(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("babylonjs"));
	else if(typeof define === 'function' && define.amd)
		define("babylonjs-gui", ["babylonjs"], factory);
	else if(typeof exports === 'object')
		exports["babylonjs-gui"] = factory(require("babylonjs"));
	else
		root["BABYLON"] = root["BABYLON"] || {}, root["BABYLON"]["GUI"] = factory(root["BABYLON"]);
})((typeof self !== "undefined" ? self : typeof global !== "undefined" ? global : this), (__WEBPACK_EXTERNAL_MODULE_babylonjs_Misc_perfCounter__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../../dev/gui/src/2D/adtInstrumentation.ts":
/*!*****************************************************!*\
  !*** ../../../dev/gui/src/2D/adtInstrumentation.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AdvancedDynamicTextureInstrumentation: () => (/* binding */ AdvancedDynamicTextureInstrumentation)
/* harmony export */ });
/* harmony import */ var babylonjs_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/perfCounter */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0__);

/**
 * This class can be used to get instrumentation data from a AdvancedDynamicTexture object
 */
var AdvancedDynamicTextureInstrumentation = /** @class */ (function () {
    /**
     * Instantiates a new advanced dynamic texture instrumentation.
     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object
     * @param texture Defines the AdvancedDynamicTexture to instrument
     */
    function AdvancedDynamicTextureInstrumentation(
    /**
     * Define the instrumented AdvancedDynamicTexture.
     */
    texture) {
        this.texture = texture;
        this._captureRenderTime = false;
        this._renderTime = new babylonjs_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0__.PerfCounter();
        this._captureLayoutTime = false;
        this._layoutTime = new babylonjs_Misc_perfCounter__WEBPACK_IMPORTED_MODULE_0__.PerfCounter();
        // Observers
        this._onBeginRenderObserver = null;
        this._onEndRenderObserver = null;
        this._onBeginLayoutObserver = null;
        this._onEndLayoutObserver = null;
    }
    Object.defineProperty(AdvancedDynamicTextureInstrumentation.prototype, "renderTimeCounter", {
        // Properties
        /**
         * Gets the perf counter used to capture render time
         */
        get: function () {
            return this._renderTime;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTextureInstrumentation.prototype, "layoutTimeCounter", {
        /**
         * Gets the perf counter used to capture layout time
         */
        get: function () {
            return this._layoutTime;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTextureInstrumentation.prototype, "captureRenderTime", {
        /**
         * Enable or disable the render time capture
         */
        get: function () {
            return this._captureRenderTime;
        },
        set: function (value) {
            var _this = this;
            if (value === this._captureRenderTime) {
                return;
            }
            this._captureRenderTime = value;
            if (value) {
                this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(function () {
                    _this._renderTime.beginMonitoring();
                });
                this._onEndRenderObserver = this.texture.onEndRenderObservable.add(function () {
                    _this._renderTime.endMonitoring(true);
                });
            }
            else {
                this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);
                this._onBeginRenderObserver = null;
                this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);
                this._onEndRenderObserver = null;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTextureInstrumentation.prototype, "captureLayoutTime", {
        /**
         * Enable or disable the layout time capture
         */
        get: function () {
            return this._captureLayoutTime;
        },
        set: function (value) {
            var _this = this;
            if (value === this._captureLayoutTime) {
                return;
            }
            this._captureLayoutTime = value;
            if (value) {
                this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(function () {
                    _this._layoutTime.beginMonitoring();
                });
                this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(function () {
                    _this._layoutTime.endMonitoring(true);
                });
            }
            else {
                this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);
                this._onBeginLayoutObserver = null;
                this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);
                this._onEndLayoutObserver = null;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Dispose and release associated resources.
     */
    AdvancedDynamicTextureInstrumentation.prototype.dispose = function () {
        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);
        this._onBeginRenderObserver = null;
        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);
        this._onEndRenderObserver = null;
        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);
        this._onBeginLayoutObserver = null;
        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);
        this._onEndLayoutObserver = null;
        this.texture = null;
    };
    return AdvancedDynamicTextureInstrumentation;
}());



/***/ }),

/***/ "../../../dev/gui/src/2D/advancedDynamicTexture.ts":
/*!*********************************************************!*\
  !*** ../../../dev/gui/src/2D/advancedDynamicTexture.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AdvancedDynamicTexture: () => (/* binding */ AdvancedDynamicTexture)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/stringTools */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _controls_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controls/container */ "../../../dev/gui/src/2D/controls/container.ts");
/* harmony import */ var _controls_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controls/control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./style */ "../../../dev/gui/src/2D/style.ts");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./measure */ "../../../dev/gui/src/2D/measure.ts");





















/**
 * Class used to create texture to support 2D GUI elements
 * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui
 */
var AdvancedDynamicTexture = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__extends)(AdvancedDynamicTexture, _super);
    /**
     * Creates a new AdvancedDynamicTexture
     * @param name defines the name of the texture
     * @param width defines the width of the texture
     * @param height defines the height of the texture
     * @param scene defines the hosting scene
     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)
     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)
     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)
     */
    function AdvancedDynamicTexture(name, width, height, scene, generateMipMaps, samplingMode, invertY) {
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        if (generateMipMaps === void 0) { generateMipMaps = false; }
        if (samplingMode === void 0) { samplingMode = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.NEAREST_SAMPLINGMODE; }
        if (invertY === void 0) { invertY = true; }
        var _this = _super.call(this, name, { width: width, height: height }, scene, generateMipMaps, samplingMode, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Constants.TEXTUREFORMAT_RGBA, invertY) || this;
        /** Observable that fires when the GUI is ready */
        _this.onGuiReadyObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        _this._isDirty = false;
        /** @internal */
        _this._rootContainer = new _controls_container__WEBPACK_IMPORTED_MODULE_1__.Container("root");
        /** @internal */
        _this._lastControlOver = {};
        /** @internal */
        _this._lastControlDown = {};
        /** @internal */
        _this._capturingControl = {};
        /** @internal */
        _this._linkedControls = new Array();
        /** @internal */
        _this._isFullscreen = false;
        _this._fullscreenViewport = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Viewport(0, 0, 1, 1);
        _this._idealWidth = 0;
        _this._idealHeight = 0;
        _this._useSmallestIdeal = false;
        _this._renderAtIdealSize = false;
        _this._blockNextFocusCheck = false;
        _this._renderScale = 1;
        _this._cursorChanged = false;
        _this._defaultMousePointerId = 0;
        _this._rootChildrenHaveChanged = false;
        /** @internal */
        _this._capturedPointerIds = new Set();
        /** @internal */
        _this._numLayoutCalls = 0;
        /** @internal */
        _this._numRenderCalls = 0;
        /**
         * Define type to string to ensure compatibility across browsers
         * Safari doesn't support DataTransfer constructor
         */
        _this._clipboardData = "";
        /**
         * Observable event triggered each time an clipboard event is received from the rendering canvas
         */
        _this.onClipboardObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Observable event triggered each time a pointer down is intercepted by a control
         */
        _this.onControlPickedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Observable event triggered before layout is evaluated
         */
        _this.onBeginLayoutObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Observable event triggered after the layout was evaluated
         */
        _this.onEndLayoutObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Observable event triggered before the texture is rendered
         */
        _this.onBeginRenderObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Observable event triggered after the texture was rendered
         */
        _this.onEndRenderObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Gets or sets a boolean defining if alpha is stored as premultiplied
         */
        _this.premulAlpha = false;
        /**
         * Gets or sets a boolean indicating that the canvas must be reverted on Y when updating the texture
         */
        _this.applyYInversionOnUpdate = true;
        /**
         * A boolean indicating whether or not the elements can be navigated to using the tab key.
         * Defaults to false.
         */
        _this.disableTabNavigation = false;
        /**
         * If set to true, the POINTERTAP event type will be used for "click", instead of POINTERUP
         */
        _this.usePointerTapForClickEvent = false;
        /**
         * If this is set, even when a control is pointer blocker, some events can still be passed through to the scene.
         * Options from values are PointerEventTypes
         * POINTERDOWN, POINTERUP, POINTERMOVE, POINTERWHEEL, POINTERPICK, POINTERTAP, POINTERDOUBLETAP
         */
        _this.skipBlockEvents = 0;
        /**
         * If set to true, every scene render will trigger a pointer event for the GUI
         * if it is linked to a mesh or has controls linked to a mesh. This will allow
         * you to catch the pointer moving around the GUI due to camera or mesh movements,
         * but it has a performance cost.
         */
        _this.checkPointerEveryFrame = false;
        _this._useInvalidateRectOptimization = true;
        // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position
        _this._invalidatedRectangle = null;
        _this._clearMeasure = new _measure__WEBPACK_IMPORTED_MODULE_4__.Measure(0, 0, 0, 0);
        _this._focusProperties = { index: 0, total: -1 };
        /**
         * @internal
         */
        _this._onClipboardCopy = function (rawEvt) {
            var evt = rawEvt;
            var ev = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.ClipboardInfo(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.ClipboardEventTypes.COPY, evt);
            _this.onClipboardObservable.notifyObservers(ev);
            evt.preventDefault();
        };
        /**
         * @internal
         */
        _this._onClipboardCut = function (rawEvt) {
            var evt = rawEvt;
            var ev = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.ClipboardInfo(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.ClipboardEventTypes.CUT, evt);
            _this.onClipboardObservable.notifyObservers(ev);
            evt.preventDefault();
        };
        /**
         * @internal
         */
        _this._onClipboardPaste = function (rawEvt) {
            var evt = rawEvt;
            var ev = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.ClipboardInfo(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.ClipboardEventTypes.PASTE, evt);
            _this.onClipboardObservable.notifyObservers(ev);
            evt.preventDefault();
        };
        /**
         * Recreate the content of the ADT from a JSON object
         * @param serializedObject define the JSON serialized object to restore from
         * @param scaleToSize defines whether to scale to texture to the saved size
         * @param urlRewriter defines an url rewriter to update urls before sending them to the controls
         * @deprecated Please use parseSerializedObject instead
         */
        _this.parseContent = _this.parseSerializedObject;
        scene = _this.getScene();
        if (!scene || !_this._texture) {
            return _this;
        }
        _this.applyYInversionOnUpdate = invertY;
        _this._rootElement = scene.getEngine().getInputElement();
        _this._renderObserver = scene.onBeforeCameraRenderObservable.add(function (camera) { return _this._checkUpdate(camera); });
        /** Whenever a control is added or removed to the root, we have to recheck the camera projection as it can have changed  */
        _this._controlAddedObserver = _this._rootContainer.onControlAddedObservable.add(function (control) {
            if (control) {
                _this._rootChildrenHaveChanged = true;
            }
        });
        _this._controlRemovedObserver = _this._rootContainer.onControlRemovedObservable.add(function (control) {
            if (control) {
                _this._rootChildrenHaveChanged = true;
            }
        });
        _this._preKeyboardObserver = scene.onPreKeyboardObservable.add(function (info) {
            // check if tab is pressed
            if (!_this.disableTabNavigation && info.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.KeyboardEventTypes.KEYDOWN && info.event.code === "Tab") {
                var forward = !info.event.shiftKey;
                if ((forward && _this._focusProperties.index === _this._focusProperties.total - 1) ||
                    (!forward && _this._focusProperties.index === 0 && _this._focusProperties.total > 0)) {
                    _this.focusedControl = null;
                    _this._focusProperties.index = 0;
                    _this._focusProperties.total = -1;
                    return;
                }
                _this._focusNextElement(forward);
                info.event.preventDefault();
                return;
            }
            if (!_this._focusedControl) {
                return;
            }
            if (info.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.KeyboardEventTypes.KEYDOWN) {
                _this._focusedControl.processKeyboard(info.event);
            }
            info.skipOnPointerObservable = true;
        });
        _this._rootContainer._link(_this);
        _this.hasAlpha = true;
        if (!width || !height) {
            _this._resizeObserver = scene.getEngine().onResizeObservable.add(function () { return _this._onResize(); });
            _this._onResize();
        }
        _this._texture.isReady = true;
        return _this;
    }
    Object.defineProperty(AdvancedDynamicTexture.prototype, "numLayoutCalls", {
        /** Gets the number of layout calls made the last time the ADT has been rendered */
        get: function () {
            return this._numLayoutCalls;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "numRenderCalls", {
        /** Gets the number of render calls made the last time the ADT has been rendered */
        get: function () {
            return this._numRenderCalls;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "renderScale", {
        /**
         * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).
         * Useful when you want more antialiasing
         */
        get: function () {
            return this._renderScale;
        },
        set: function (value) {
            if (value === this._renderScale) {
                return;
            }
            this._renderScale = value;
            this._onResize();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "background", {
        /** Gets or sets the background color */
        get: function () {
            return this._background;
        },
        set: function (value) {
            if (this._background === value) {
                return;
            }
            this._background = value;
            this.markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "idealWidth", {
        /**
         * Gets or sets the ideal width used to design controls.
         * The GUI will then rescale everything accordingly
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
         */
        get: function () {
            return this._idealWidth;
        },
        set: function (value) {
            if (this._idealWidth === value) {
                return;
            }
            this._idealWidth = value;
            this.markAsDirty();
            this._rootContainer._markAllAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "idealHeight", {
        /**
         * Gets or sets the ideal height used to design controls.
         * The GUI will then rescale everything accordingly
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
         */
        get: function () {
            return this._idealHeight;
        },
        set: function (value) {
            if (this._idealHeight === value) {
                return;
            }
            this._idealHeight = value;
            this.markAsDirty();
            this._rootContainer._markAllAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "useSmallestIdeal", {
        /**
         * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
         */
        get: function () {
            return this._useSmallestIdeal;
        },
        set: function (value) {
            if (this._useSmallestIdeal === value) {
                return;
            }
            this._useSmallestIdeal = value;
            this.markAsDirty();
            this._rootContainer._markAllAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "renderAtIdealSize", {
        /**
         * Gets or sets a boolean indicating if adaptive scaling must be used
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
         */
        get: function () {
            return this._renderAtIdealSize;
        },
        set: function (value) {
            if (this._renderAtIdealSize === value) {
                return;
            }
            this._renderAtIdealSize = value;
            this._onResize();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "idealRatio", {
        /**
         * Gets the ratio used when in "ideal mode"
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
         * */
        get: function () {
            var rwidth = 0;
            var rheight = 0;
            if (this._idealWidth) {
                rwidth = this.getSize().width / this._idealWidth;
            }
            if (this._idealHeight) {
                rheight = this.getSize().height / this._idealHeight;
            }
            if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {
                return window.innerWidth < window.innerHeight ? rwidth : rheight;
            }
            if (this._idealWidth) {
                // horizontal
                return rwidth;
            }
            if (this._idealHeight) {
                // vertical
                return rheight;
            }
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "layer", {
        /**
         * Gets the underlying layer used to render the texture when in fullscreen mode
         */
        get: function () {
            return this._layerToDispose;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "rootContainer", {
        /**
         * Gets the root container control
         */
        get: function () {
            return this._rootContainer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns an array containing the root container.
     * This is mostly used to let the Inspector introspects the ADT
     * @returns an array containing the rootContainer
     */
    AdvancedDynamicTexture.prototype.getChildren = function () {
        return [this._rootContainer];
    };
    /**
     * Will return all controls that are inside this texture
     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered
     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored
     * @returns all child controls
     */
    AdvancedDynamicTexture.prototype.getDescendants = function (directDescendantsOnly, predicate) {
        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);
    };
    /**
     * Will return all controls with the given type name
     * @param typeName defines the type name to search for
     * @returns an array of all controls found
     */
    AdvancedDynamicTexture.prototype.getControlsByType = function (typeName) {
        return this._rootContainer.getDescendants(false, function (control) { return control.typeName === typeName; });
    };
    /**
     * Will return the first control with the given name
     * @param name defines the name to search for
     * @returns the first control found or null
     */
    AdvancedDynamicTexture.prototype.getControlByName = function (name) {
        return this._getControlByKey("name", name);
    };
    AdvancedDynamicTexture.prototype._getControlByKey = function (key, value) {
        return this._rootContainer.getDescendants().find(function (control) { return control[key] === value; }) || null;
    };
    Object.defineProperty(AdvancedDynamicTexture.prototype, "focusedControl", {
        /**
         * Gets or sets the current focused control
         */
        get: function () {
            return this._focusedControl;
        },
        set: function (control) {
            if (this._focusedControl == control) {
                return;
            }
            if (this._focusedControl) {
                this._focusedControl.onBlur();
            }
            if (control) {
                control.onFocus();
            }
            this._focusedControl = control;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "isForeground", {
        /**
         * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode
         */
        get: function () {
            if (!this.layer) {
                return true;
            }
            return !this.layer.isBackground;
        },
        set: function (value) {
            if (!this.layer) {
                return;
            }
            if (this.layer.isBackground === !value) {
                return;
            }
            this.layer.isBackground = !value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdvancedDynamicTexture.prototype, "clipboardData", {
        /**
         * Gets or set information about clipboardData
         */
        get: function () {
            return this._clipboardData;
        },
        set: function (value) {
            this._clipboardData = value;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get the current class name of the texture useful for serialization or dynamic coding.
     * @returns "AdvancedDynamicTexture"
     */
    AdvancedDynamicTexture.prototype.getClassName = function () {
        return "AdvancedDynamicTexture";
    };
    /**
     * Function used to execute a function on all controls
     * @param func defines the function to execute
     * @param container defines the container where controls belong. If null the root container will be used
     */
    AdvancedDynamicTexture.prototype.executeOnAllControls = function (func, container) {
        if (!container) {
            container = this._rootContainer;
        }
        func(container);
        for (var _i = 0, _a = container.children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (child.children) {
                this.executeOnAllControls(func, child);
                continue;
            }
            func(child);
        }
    };
    Object.defineProperty(AdvancedDynamicTexture.prototype, "useInvalidateRectOptimization", {
        /**
         * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on
         */
        get: function () {
            return this._useInvalidateRectOptimization;
        },
        set: function (value) {
            this._useInvalidateRectOptimization = value;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Invalidates a rectangle area on the gui texture
     * @param invalidMinX left most position of the rectangle to invalidate in the texture
     * @param invalidMinY top most position of the rectangle to invalidate in the texture
     * @param invalidMaxX right most position of the rectangle to invalidate in the texture
     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture
     */
    AdvancedDynamicTexture.prototype.invalidateRect = function (invalidMinX, invalidMinY, invalidMaxX, invalidMaxY) {
        if (!this._useInvalidateRectOptimization) {
            return;
        }
        if (!this._invalidatedRectangle) {
            this._invalidatedRectangle = new _measure__WEBPACK_IMPORTED_MODULE_4__.Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);
        }
        else {
            // Compute intersection
            var maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));
            var maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));
            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));
            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));
            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;
            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;
        }
    };
    /**
     * Marks the texture as dirty forcing a complete update
     */
    AdvancedDynamicTexture.prototype.markAsDirty = function () {
        this._isDirty = true;
    };
    /**
     * Helper function used to create a new style
     * @returns a new style
     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles
     */
    AdvancedDynamicTexture.prototype.createStyle = function () {
        return new _style__WEBPACK_IMPORTED_MODULE_3__.Style(this);
    };
    /**
     * Adds a new control to the root container
     * @param control defines the control to add
     * @returns the current texture
     */
    AdvancedDynamicTexture.prototype.addControl = function (control) {
        this._rootContainer.addControl(control);
        return this;
    };
    /**
     * Removes a control from the root container
     * @param control defines the control to remove
     * @returns the current texture
     */
    AdvancedDynamicTexture.prototype.removeControl = function (control) {
        this._rootContainer.removeControl(control);
        return this;
    };
    /**
     * Moves overlapped controls towards a position where it is not overlapping anymore.
     * Please note that this method alters linkOffsetXInPixels and linkOffsetYInPixels.
     * @param overlapGroup the overlap group which will be processed or undefined to process all overlap groups
     * @param deltaStep the step size (speed) to reach the target non overlapping position (default 0.1)
     * @param repelFactor how much is the control repelled by other controls
     */
    AdvancedDynamicTexture.prototype.moveToNonOverlappedPosition = function (overlapGroup, deltaStep, repelFactor) {
        if (deltaStep === void 0) { deltaStep = 1; }
        if (repelFactor === void 0) { repelFactor = 1; }
        var controlsForGroup;
        if (Array.isArray(overlapGroup)) {
            controlsForGroup = overlapGroup;
        }
        else {
            var descendants = this.getDescendants(true);
            // get only the controls with an overlapGroup property set
            // if the overlapGroup parameter is set, filter the controls and get only the controls belonging to that overlapGroup
            controlsForGroup = overlapGroup === undefined ? descendants.filter(function (c) { return c.overlapGroup !== undefined; }) : descendants.filter(function (c) { return c.overlapGroup === overlapGroup; });
        }
        controlsForGroup.forEach(function (control1) {
            var _a;
            var velocity = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2.Zero();
            var center = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2(control1.centerX, control1.centerY);
            controlsForGroup.forEach(function (control2) {
                if (control1 !== control2 && AdvancedDynamicTexture._Overlaps(control1, control2)) {
                    // if the two controls overlaps get a direction vector from one control's center to another control's center
                    var diff = center.subtract(new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2(control2.centerX, control2.centerY));
                    var diffLength = diff.length();
                    if (diffLength > 0) {
                        // calculate the velocity
                        velocity = velocity.add(diff.normalize().scale(repelFactor / diffLength));
                    }
                }
            });
            if (velocity.length() > 0) {
                // move the control along the direction vector away from the overlapping control
                velocity = velocity.normalize().scale(deltaStep * ((_a = control1.overlapDeltaMultiplier) !== null && _a !== void 0 ? _a : 1));
                control1.linkOffsetXInPixels += velocity.x;
                control1.linkOffsetYInPixels += velocity.y;
            }
        });
    };
    /**
     * Release all resources
     */
    AdvancedDynamicTexture.prototype.dispose = function () {
        var scene = this.getScene();
        if (!scene) {
            return;
        }
        this._rootElement = null;
        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);
        if (this._resizeObserver) {
            scene.getEngine().onResizeObservable.remove(this._resizeObserver);
        }
        if (this._prePointerObserver) {
            scene.onPrePointerObservable.remove(this._prePointerObserver);
        }
        if (this._sceneRenderObserver) {
            scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);
        }
        if (this._pointerObserver) {
            scene.onPointerObservable.remove(this._pointerObserver);
        }
        if (this._preKeyboardObserver) {
            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);
        }
        if (this._canvasPointerOutObserver) {
            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);
        }
        if (this._canvasBlurObserver) {
            scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);
        }
        if (this._controlAddedObserver) {
            this._rootContainer.onControlAddedObservable.remove(this._controlAddedObserver);
        }
        if (this._controlRemovedObserver) {
            this._rootContainer.onControlRemovedObservable.remove(this._controlRemovedObserver);
        }
        if (this._layerToDispose) {
            this._layerToDispose.texture = null;
            this._layerToDispose.dispose();
            this._layerToDispose = null;
        }
        this._rootContainer.dispose();
        this.onClipboardObservable.clear();
        this.onControlPickedObservable.clear();
        this.onBeginRenderObservable.clear();
        this.onEndRenderObservable.clear();
        this.onBeginLayoutObservable.clear();
        this.onEndLayoutObservable.clear();
        this.onGuiReadyObservable.clear();
        _super.prototype.dispose.call(this);
    };
    AdvancedDynamicTexture.prototype._onResize = function () {
        var scene = this.getScene();
        if (!scene) {
            return;
        }
        // Check size
        var engine = scene.getEngine();
        var textureSize = this.getSize();
        var renderWidth = engine.getRenderWidth() * this._renderScale;
        var renderHeight = engine.getRenderHeight() * this._renderScale;
        if (this._renderAtIdealSize) {
            if (this._idealWidth) {
                renderHeight = (renderHeight * this._idealWidth) / renderWidth;
                renderWidth = this._idealWidth;
            }
            else if (this._idealHeight) {
                renderWidth = (renderWidth * this._idealHeight) / renderHeight;
                renderHeight = this._idealHeight;
            }
        }
        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {
            this.scaleTo(renderWidth, renderHeight);
            this.markAsDirty();
            if (this._idealWidth || this._idealHeight) {
                this._rootContainer._markAllAsDirty();
            }
        }
        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);
    };
    /** @internal */
    AdvancedDynamicTexture.prototype._getGlobalViewport = function () {
        var size = this.getSize();
        var globalViewPort = this._fullscreenViewport.toGlobal(size.width, size.height);
        var targetX = Math.round(globalViewPort.width * (1 / this.rootContainer.scaleX));
        var targetY = Math.round(globalViewPort.height * (1 / this.rootContainer.scaleY));
        globalViewPort.x += (globalViewPort.width - targetX) / 2;
        globalViewPort.y += (globalViewPort.height - targetY) / 2;
        globalViewPort.width = targetX;
        globalViewPort.height = targetY;
        return globalViewPort;
    };
    /**
     * Get screen coordinates for a vector3
     * @param position defines the position to project
     * @param worldMatrix defines the world matrix to use
     * @returns the projected position
     */
    AdvancedDynamicTexture.prototype.getProjectedPosition = function (position, worldMatrix) {
        var result = this.getProjectedPositionWithZ(position, worldMatrix);
        return new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2(result.x, result.y);
    };
    /**
     * Get screen coordinates for a vector3
     * @param position defines the position to project
     * @param worldMatrix defines the world matrix to use
     * @returns the projected position with Z
     */
    AdvancedDynamicTexture.prototype.getProjectedPositionWithZ = function (position, worldMatrix) {
        var scene = this.getScene();
        if (!scene) {
            return babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
        }
        var globalViewport = this._getGlobalViewport();
        var projectedPosition = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);
        return new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);
    };
    AdvancedDynamicTexture.prototype._checkUpdate = function (camera, skipUpdate) {
        if (this._layerToDispose) {
            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {
                return;
            }
        }
        if (this._isFullscreen && this._linkedControls.length) {
            var scene = this.getScene();
            if (!scene) {
                return;
            }
            var globalViewport = this._getGlobalViewport();
            var _loop_1 = function (control) {
                if (!control.isVisible) {
                    return "continue";
                }
                var mesh = control._linkedMesh;
                if (!mesh || mesh.isDisposed()) {
                    babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Tools.SetImmediate(function () {
                        control.linkWithMesh(null);
                    });
                    return "continue";
                }
                var position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.ZeroReadOnly;
                var projectedPosition = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);
                if (projectedPosition.z < 0 || projectedPosition.z > 1) {
                    control.notRenderable = true;
                    return "continue";
                }
                control.notRenderable = false;
                if (this_1.useInvalidateRectOptimization) {
                    control.invalidateRect();
                }
                control._moveToProjectedPosition(projectedPosition);
            };
            var this_1 = this;
            for (var _i = 0, _a = this._linkedControls; _i < _a.length; _i++) {
                var control = _a[_i];
                _loop_1(control);
            }
        }
        if (!this._isDirty && !this._rootContainer.isDirty) {
            return;
        }
        this._isDirty = false;
        this._render(skipUpdate);
        if (!skipUpdate) {
            this.update(this.applyYInversionOnUpdate, this.premulAlpha, AdvancedDynamicTexture.AllowGPUOptimizations);
        }
    };
    AdvancedDynamicTexture.prototype._render = function (skipRender) {
        var _a;
        var textureSize = this.getSize();
        var renderWidth = textureSize.width;
        var renderHeight = textureSize.height;
        var context = this.getContext();
        context.font = "18px Arial";
        context.strokeStyle = "white";
        if (this.onGuiReadyObservable.hasObservers()) {
            this._checkGuiIsReady();
        }
        /** We have to recheck the camera projection in the case the root control's children have changed  */
        if (this._rootChildrenHaveChanged) {
            var camera = (_a = this.getScene()) === null || _a === void 0 ? void 0 : _a.activeCamera;
            if (camera) {
                this._rootChildrenHaveChanged = false;
                this._checkUpdate(camera, true);
            }
        }
        // Layout
        this.onBeginLayoutObservable.notifyObservers(this);
        var measure = new _measure__WEBPACK_IMPORTED_MODULE_4__.Measure(0, 0, renderWidth, renderHeight);
        this._numLayoutCalls = 0;
        this._rootContainer._layout(measure, context);
        this.onEndLayoutObservable.notifyObservers(this);
        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing
        if (skipRender) {
            return;
        }
        // Clear
        if (this._invalidatedRectangle) {
            this._clearMeasure.copyFrom(this._invalidatedRectangle);
        }
        else {
            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);
        }
        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);
        if (this._background) {
            context.save();
            context.fillStyle = this._background;
            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);
            context.restore();
        }
        // Render
        this.onBeginRenderObservable.notifyObservers(this);
        this._numRenderCalls = 0;
        this._rootContainer._render(context, this._invalidatedRectangle);
        this.onEndRenderObservable.notifyObservers(this);
        this._invalidatedRectangle = null;
    };
    /**
     * @internal
     */
    AdvancedDynamicTexture.prototype._changeCursor = function (cursor) {
        if (this._rootElement) {
            this._rootElement.style.cursor = cursor;
            this._cursorChanged = true;
        }
    };
    /**
     * @internal
     */
    AdvancedDynamicTexture.prototype._registerLastControlDown = function (control, pointerId) {
        this._lastControlDown[pointerId] = control;
        this.onControlPickedObservable.notifyObservers(control);
    };
    AdvancedDynamicTexture.prototype._doPicking = function (x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
        var scene = this.getScene();
        if (!scene) {
            return;
        }
        var engine = scene.getEngine();
        var textureSize = this.getSize();
        if (this._isFullscreen) {
            var camera = scene.cameraToUseForPointers || scene.activeCamera;
            if (!camera) {
                return;
            }
            var viewport = camera.viewport;
            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));
            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));
        }
        if (this._capturingControl[pointerId]) {
            if (this._capturingControl[pointerId].isPointerBlocker) {
                this._shouldBlockPointer = true;
            }
            this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);
            return;
        }
        this._cursorChanged = false;
        if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {
            if (!scene.doNotHandleCursors) {
                this._changeCursor("");
            }
            if (type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE) {
                if (this._lastControlOver[pointerId]) {
                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);
                    delete this._lastControlOver[pointerId];
                }
            }
        }
        if (!this._cursorChanged && !scene.doNotHandleCursors) {
            this._changeCursor("");
        }
        this._manageFocus();
    };
    /**
     * @internal
     */
    AdvancedDynamicTexture.prototype._cleanControlAfterRemovalFromList = function (list, control) {
        for (var pointerId in list) {
            if (!Object.prototype.hasOwnProperty.call(list, pointerId)) {
                continue;
            }
            var lastControlOver = list[pointerId];
            if (lastControlOver === control) {
                delete list[pointerId];
            }
        }
    };
    /**
     * @internal
     */
    AdvancedDynamicTexture.prototype._cleanControlAfterRemoval = function (control) {
        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);
        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);
    };
    /**
     * This function will run a pointer event on this ADT and will trigger any pointer events on any controls
     * This will work on a fullscreen ADT only. For mesh based ADT, simulate pointer events using the scene directly.
     * @param x pointer X on the canvas for the picking
     * @param y pointer Y on the canvas for the picking
     * @param pi optional pointer information
     */
    AdvancedDynamicTexture.prototype.pick = function (x, y, pi) {
        if (pi === void 0) { pi = null; }
        if (this._isFullscreen && this._scene) {
            this._translateToPicking(this._scene, new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Viewport(0, 0, 0, 0), pi, x, y);
        }
    };
    AdvancedDynamicTexture.prototype._translateToPicking = function (scene, tempViewport, pi, x, y) {
        if (x === void 0) { x = scene.pointerX; }
        if (y === void 0) { y = scene.pointerY; }
        var camera = scene.cameraToUseForPointers || scene.activeCamera;
        var engine = scene.getEngine();
        var originalCameraToUseForPointers = scene.cameraToUseForPointers;
        if (!camera) {
            tempViewport.x = 0;
            tempViewport.y = 0;
            tempViewport.width = engine.getRenderWidth();
            tempViewport.height = engine.getRenderHeight();
        }
        else {
            if (camera.rigCameras.length) {
                // rig camera - we need to find the camera to use for this event
                var rigViewport_1 = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Viewport(0, 0, 1, 1);
                camera.rigCameras.forEach(function (rigCamera) {
                    // generate the viewport of this camera
                    rigCamera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), rigViewport_1);
                    var transformedX = x / engine.getHardwareScalingLevel() - rigViewport_1.x;
                    var transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - rigViewport_1.y - rigViewport_1.height);
                    // check if the pointer is in the camera's viewport
                    if (transformedX < 0 || transformedY < 0 || x > rigViewport_1.width || y > rigViewport_1.height) {
                        // out of viewport - don't use this camera
                        return;
                    }
                    // set the camera to use for pointers until this pointer loop is over
                    scene.cameraToUseForPointers = rigCamera;
                    // set the viewport
                    tempViewport.x = rigViewport_1.x;
                    tempViewport.y = rigViewport_1.y;
                    tempViewport.width = rigViewport_1.width;
                    tempViewport.height = rigViewport_1.height;
                });
            }
            else {
                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);
            }
        }
        var transformedX = x / engine.getHardwareScalingLevel() - tempViewport.x;
        var transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);
        this._shouldBlockPointer = false;
        // Do picking modifies _shouldBlockPointer
        if (pi) {
            var pointerId = pi.event.pointerId || this._defaultMousePointerId;
            this._doPicking(transformedX, transformedY, pi, pi.type, pointerId, pi.event.button, pi.event.deltaX, pi.event.deltaY);
            // Avoid overwriting a true skipOnPointerObservable to false
            if ((this._shouldBlockPointer && !(pi.type & this.skipBlockEvents)) || this._capturingControl[pointerId]) {
                pi.skipOnPointerObservable = true;
            }
        }
        else {
            this._doPicking(transformedX, transformedY, null, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE, this._defaultMousePointerId, 0);
        }
        // if overridden by a rig camera - reset back to the original value
        scene.cameraToUseForPointers = originalCameraToUseForPointers;
    };
    /** Attach to all scene events required to support pointer events */
    AdvancedDynamicTexture.prototype.attach = function () {
        var _this = this;
        var scene = this.getScene();
        if (!scene) {
            return;
        }
        var tempViewport = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Viewport(0, 0, 0, 0);
        this._prePointerObserver = scene.onPrePointerObservable.add(function (pi) {
            if (scene.isPointerCaptured(pi.event.pointerId) &&
                pi.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP &&
                !_this._capturedPointerIds.has(pi.event.pointerId)) {
                return;
            }
            if (pi.type !== babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE &&
                pi.type !== babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP &&
                pi.type !== babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERDOWN &&
                pi.type !== babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERWHEEL &&
                pi.type !== babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERTAP) {
                return;
            }
            if (pi.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE) {
                // Avoid pointerMove events firing while the pointer is captured by the scene
                if (scene.isPointerCaptured(pi.event.pointerId)) {
                    return;
                }
                if (pi.event.pointerId) {
                    _this._defaultMousePointerId = pi.event.pointerId; // This is required to make sure we have the correct pointer ID for wheel
                }
            }
            _this._translateToPicking(scene, tempViewport, pi);
        });
        this._attachPickingToSceneRender(scene, function () { return _this._translateToPicking(scene, tempViewport, null); }, false);
        this._attachToOnPointerOut(scene);
        this._attachToOnBlur(scene);
    };
    AdvancedDynamicTexture.prototype._focusNextElement = function (forward) {
        if (forward === void 0) { forward = true; }
        // generate the order of tab-able controls
        var sortedTabbableControls = [];
        this.executeOnAllControls(function (control) {
            if (control.isFocusInvisible || !control.isVisible || control.tabIndex < 0) {
                return;
            }
            sortedTabbableControls.push(control);
        });
        // if no control is tab-able, return
        if (sortedTabbableControls.length === 0) {
            return;
        }
        sortedTabbableControls.sort(function (a, b) {
            // if tabIndex is 0, put it in the end of the list, otherwise sort by tabIndex
            return a.tabIndex === 0 ? 1 : b.tabIndex === 0 ? -1 : a.tabIndex - b.tabIndex;
        });
        this._focusProperties.total = sortedTabbableControls.length;
        // if no control is focused, focus the first one
        var nextIndex = -1;
        if (!this._focusedControl) {
            nextIndex = forward ? 0 : sortedTabbableControls.length - 1;
        }
        else {
            var currentIndex = sortedTabbableControls.indexOf(this._focusedControl);
            nextIndex = currentIndex + (forward ? 1 : -1);
            if (nextIndex < 0) {
                nextIndex = sortedTabbableControls.length - 1;
            }
            else if (nextIndex >= sortedTabbableControls.length) {
                nextIndex = 0;
            }
        }
        sortedTabbableControls[nextIndex].focus();
        this._focusProperties.index = nextIndex;
    };
    /**
     * Register the clipboard Events onto the canvas
     */
    AdvancedDynamicTexture.prototype.registerClipboardEvents = function () {
        self.addEventListener("copy", this._onClipboardCopy, false);
        self.addEventListener("cut", this._onClipboardCut, false);
        self.addEventListener("paste", this._onClipboardPaste, false);
    };
    /**
     * Unregister the clipboard Events from the canvas
     */
    AdvancedDynamicTexture.prototype.unRegisterClipboardEvents = function () {
        self.removeEventListener("copy", this._onClipboardCopy);
        self.removeEventListener("cut", this._onClipboardCut);
        self.removeEventListener("paste", this._onClipboardPaste);
    };
    /**
     * Transform uvs from mesh space to texture space, taking the texture into account
     * @param uv the uvs in mesh space
     * @returns the uvs in texture space
     */
    AdvancedDynamicTexture.prototype._transformUvs = function (uv) {
        var textureMatrix = this.getTextureMatrix();
        var result;
        if (textureMatrix.isIdentityAs3x2()) {
            result = uv;
        }
        else {
            var homogeneousTextureMatrix = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Matrix[0];
            textureMatrix.getRowToRef(0, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector4[0]);
            textureMatrix.getRowToRef(1, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector4[1]);
            textureMatrix.getRowToRef(2, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector4[2]);
            var r0 = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector4[0];
            var r1 = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector4[1];
            var r2 = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector4[2];
            homogeneousTextureMatrix.setRowFromFloats(0, r0.x, r0.y, 0, 0);
            homogeneousTextureMatrix.setRowFromFloats(1, r1.x, r1.y, 0, 0);
            homogeneousTextureMatrix.setRowFromFloats(2, 0, 0, 1, 0);
            homogeneousTextureMatrix.setRowFromFloats(3, r2.x, r2.y, 0, 1);
            result = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector2[0];
            babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2.TransformToRef(uv, homogeneousTextureMatrix, result);
        }
        // In wrap and mirror mode, the texture coordinate for coordinates more than 1 is the fractional part of the coordinate
        if (this.wrapU === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.WRAP_ADDRESSMODE || this.wrapU === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.MIRROR_ADDRESSMODE) {
            if (result.x > 1) {
                var fX = result.x - Math.trunc(result.x);
                // In mirror mode, the sign of the texture coordinate depends on the integer part -
                // odd integers means it is mirrored from the original coordinate
                if (this.wrapU === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {
                    fX = 1 - fX;
                }
                result.x = fX;
            }
        }
        if (this.wrapV === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.WRAP_ADDRESSMODE || this.wrapV === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.MIRROR_ADDRESSMODE) {
            if (result.y > 1) {
                var fY = result.y - Math.trunc(result.y);
                if (this.wrapV === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {
                    fY = 1 - fY;
                }
                result.y = fY;
            }
        }
        return result;
    };
    /**
     * Connect the texture to a hosting mesh to enable interactions
     * @param mesh defines the mesh to attach to
     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well
     */
    AdvancedDynamicTexture.prototype.attachToMesh = function (mesh, supportPointerMove) {
        var _this = this;
        if (supportPointerMove === void 0) { supportPointerMove = true; }
        var scene = this.getScene();
        if (!scene) {
            return;
        }
        if (this._pointerObserver) {
            scene.onPointerObservable.remove(this._pointerObserver);
        }
        this._pointerObserver = scene.onPointerObservable.add(function (pi) {
            if (pi.type !== babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE &&
                pi.type !== babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP &&
                pi.type !== babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERDOWN &&
                pi.type !== babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERWHEEL) {
                return;
            }
            if (pi.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE && pi.event.pointerId) {
                _this._defaultMousePointerId = pi.event.pointerId; // This is required to make sure we have the correct pointer ID for wheel
            }
            var pointerId = pi.event.pointerId || _this._defaultMousePointerId;
            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {
                var uv = pi.pickInfo.getTextureCoordinates();
                if (uv) {
                    uv = _this._transformUvs(uv);
                    var size = _this.getSize();
                    _this._doPicking(uv.x * size.width, (_this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, pi, pi.type, pointerId, pi.event.button, pi.event.deltaX, pi.event.deltaY);
                }
            }
            else if (pi.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP) {
                if (_this._lastControlDown[pointerId]) {
                    _this._lastControlDown[pointerId]._forcePointerUp(pointerId);
                }
                delete _this._lastControlDown[pointerId];
                if (_this.focusedControl) {
                    var friendlyControls = _this.focusedControl.keepsFocusWith();
                    var canMoveFocus = true;
                    if (friendlyControls) {
                        for (var _i = 0, friendlyControls_1 = friendlyControls; _i < friendlyControls_1.length; _i++) {
                            var control = friendlyControls_1[_i];
                            // Same host, no need to keep the focus
                            if (_this === control._host) {
                                continue;
                            }
                            // Different hosts
                            var otherHost = control._host;
                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {
                                canMoveFocus = false;
                                break;
                            }
                        }
                    }
                    if (canMoveFocus) {
                        _this.focusedControl = null;
                    }
                }
            }
            else if (pi.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE) {
                if (_this._lastControlOver[pointerId]) {
                    _this._lastControlOver[pointerId]._onPointerOut(_this._lastControlOver[pointerId], pi, true);
                }
                delete _this._lastControlOver[pointerId];
            }
        });
        mesh.enablePointerMoveEvents = supportPointerMove;
        this._attachPickingToSceneRender(scene, function () {
            var pointerId = _this._defaultMousePointerId;
            var pick = scene === null || scene === void 0 ? void 0 : scene.pick(scene.pointerX, scene.pointerY);
            if (pick && pick.hit && pick.pickedMesh === mesh) {
                var uv = pick.getTextureCoordinates();
                if (uv) {
                    uv = _this._transformUvs(uv);
                    var size = _this.getSize();
                    _this._doPicking(uv.x * size.width, (_this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, null, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE, pointerId, 0);
                }
            }
            else {
                if (_this._lastControlOver[pointerId]) {
                    _this._lastControlOver[pointerId]._onPointerOut(_this._lastControlOver[pointerId], null, true);
                }
                delete _this._lastControlOver[pointerId];
            }
        }, true);
        this._attachToOnPointerOut(scene);
        this._attachToOnBlur(scene);
    };
    /**
     * Move the focus to a specific control
     * @param control defines the control which will receive the focus
     */
    AdvancedDynamicTexture.prototype.moveFocusToControl = function (control) {
        this.focusedControl = control;
        this._lastPickedControl = control;
        this._blockNextFocusCheck = true;
    };
    AdvancedDynamicTexture.prototype._manageFocus = function () {
        if (this._blockNextFocusCheck) {
            this._blockNextFocusCheck = false;
            this._lastPickedControl = this._focusedControl;
            return;
        }
        // Focus management
        if (this._focusedControl) {
            if (this._focusedControl !== this._lastPickedControl) {
                if (this._lastPickedControl.isFocusInvisible) {
                    return;
                }
                this.focusedControl = null;
            }
        }
    };
    AdvancedDynamicTexture.prototype._attachPickingToSceneRender = function (scene, pickFunction, forcePicking) {
        var _this = this;
        this._sceneRenderObserver = scene.onBeforeRenderObservable.add(function () {
            if (!_this.checkPointerEveryFrame) {
                return;
            }
            if (_this._linkedControls.length > 0 || forcePicking) {
                pickFunction();
            }
        });
    };
    AdvancedDynamicTexture.prototype._attachToOnPointerOut = function (scene) {
        var _this = this;
        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add(function (pointerEvent) {
            if (_this._lastControlOver[pointerEvent.pointerId]) {
                _this._lastControlOver[pointerEvent.pointerId]._onPointerOut(_this._lastControlOver[pointerEvent.pointerId], null);
            }
            delete _this._lastControlOver[pointerEvent.pointerId];
            if (_this._lastControlDown[pointerEvent.pointerId] && _this._lastControlDown[pointerEvent.pointerId] !== _this._capturingControl[pointerEvent.pointerId]) {
                _this._lastControlDown[pointerEvent.pointerId]._forcePointerUp(pointerEvent.pointerId);
                delete _this._lastControlDown[pointerEvent.pointerId];
            }
        });
    };
    AdvancedDynamicTexture.prototype._attachToOnBlur = function (scene) {
        var _this = this;
        this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add(function () {
            Object.entries(_this._lastControlDown).forEach(function (_a) {
                var value = _a[1];
                value._onCanvasBlur();
            });
            _this.focusedControl = null;
            _this._lastControlDown = {};
        });
    };
    /**
     * Serializes the entire GUI system
     * @returns an object with the JSON serialized data
     */
    AdvancedDynamicTexture.prototype.serializeContent = function () {
        var size = this.getSize();
        var serializationObject = {
            root: {},
            width: size.width,
            height: size.height,
        };
        this._rootContainer.serialize(serializationObject.root);
        return serializationObject;
    };
    /**
     * Recreate the content of the ADT from a JSON object
     * @param serializedObject define the JSON serialized object to restore from
     * @param scaleToSize defines whether to scale to texture to the saved size
     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls
     */
    AdvancedDynamicTexture.prototype.parseSerializedObject = function (serializedObject, scaleToSize, urlRewriter) {
        this._rootContainer = _controls_control__WEBPACK_IMPORTED_MODULE_2__.Control.Parse(serializedObject.root, this, urlRewriter);
        if (scaleToSize) {
            var width = serializedObject.width;
            var height = serializedObject.height;
            if (typeof width === "number" && typeof height === "number" && width >= 0 && height >= 0) {
                this.scaleTo(width, height);
            }
            else {
                // scales the GUI to a default size if none was available in the serialized content
                this.scaleTo(1920, 1080);
            }
        }
    };
    /**
     * Clones the ADT. If no mesh is defined, the GUI will be considered as a fullscreen GUI
     * @param newName defines the name of the new ADT
     * @param attachToMesh defines if the new ADT should be attached to a mesh
     * @returns the clone of the ADT
     */
    AdvancedDynamicTexture.prototype.clone = function (newName, attachToMesh) {
        var scene = this.getScene();
        if (!scene) {
            return this;
        }
        var size = this.getSize();
        var data = this.serializeContent();
        var clone;
        if (!this._isFullscreen) {
            if (attachToMesh) {
                clone = AdvancedDynamicTexture.CreateForMesh(attachToMesh, size.width, size.height);
            }
            else {
                clone = new AdvancedDynamicTexture(newName !== null && newName !== void 0 ? newName : "Clone of " + this.name, size.width, size.height, scene, !this.noMipmap, this.samplingMode);
            }
        }
        else {
            clone = AdvancedDynamicTexture.CreateFullscreenUI(newName !== null && newName !== void 0 ? newName : "Clone of " + this.name);
        }
        clone.parseSerializedObject(data);
        return clone;
    };
    /**
     * Recreate the content of the ADT from a snippet saved by the GUI editor
     * @param snippetId defines the snippet to load
     * @param scaleToSize defines whether to scale to texture to the saved size
     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.
     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls
     * @returns a promise that will resolve on success
     */
    AdvancedDynamicTexture.ParseFromSnippetAsync = function (snippetId, scaleToSize, appendToAdt, urlRewriter) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function () {
            var adt, serialized;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        adt = appendToAdt !== null && appendToAdt !== void 0 ? appendToAdt : AdvancedDynamicTexture.CreateFullscreenUI("ADT from snippet");
                        if (snippetId === "_BLANK") {
                            return [2 /*return*/, adt];
                        }
                        return [4 /*yield*/, AdvancedDynamicTexture._LoadURLContentAsync(AdvancedDynamicTexture.SnippetUrl + "/" + snippetId.replace(/#/g, "/"), true)];
                    case 1:
                        serialized = _a.sent();
                        adt.parseSerializedObject(serialized, scaleToSize, urlRewriter);
                        return [2 /*return*/, adt];
                }
            });
        });
    };
    /**
     * Recreate the content of the ADT from a snippet saved by the GUI editor
     * @param snippetId defines the snippet to load
     * @param scaleToSize defines whether to scale to texture to the saved size
     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls
     * @returns a promise that will resolve on success
     */
    AdvancedDynamicTexture.prototype.parseFromSnippetAsync = function (snippetId, scaleToSize, urlRewriter) {
        return AdvancedDynamicTexture.ParseFromSnippetAsync(snippetId, scaleToSize, this, urlRewriter);
    };
    /**
     * Recreate the content of the ADT from a url json
     * @param url defines the url to load
     * @param scaleToSize defines whether to scale to texture to the saved size
     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.
     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls
     * @returns a promise that will resolve on success
     */
    AdvancedDynamicTexture.ParseFromFileAsync = function (url, scaleToSize, appendToAdt, urlRewriter) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function () {
            var adt, serialized;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        adt = appendToAdt !== null && appendToAdt !== void 0 ? appendToAdt : AdvancedDynamicTexture.CreateFullscreenUI("ADT from URL");
                        return [4 /*yield*/, AdvancedDynamicTexture._LoadURLContentAsync(url)];
                    case 1:
                        serialized = _a.sent();
                        adt.parseSerializedObject(serialized, scaleToSize, urlRewriter);
                        return [2 /*return*/, adt];
                }
            });
        });
    };
    /**
     * Recreate the content of the ADT from a url json
     * @param url defines the url to load
     * @param scaleToSize defines whether to scale to texture to the saved size
     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls
     * @returns a promise that will resolve on success
     */
    AdvancedDynamicTexture.prototype.parseFromURLAsync = function (url, scaleToSize, urlRewriter) {
        return AdvancedDynamicTexture.ParseFromFileAsync(url, scaleToSize, this, urlRewriter);
    };
    AdvancedDynamicTexture._LoadURLContentAsync = function (url, snippet) {
        if (snippet === void 0) { snippet = false; }
        if (url === "") {
            return Promise.reject("No URL provided");
        }
        return new Promise(function (resolve, reject) {
            var request = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.WebRequest();
            request.addEventListener("readystatechange", function () {
                if (request.readyState == 4) {
                    if (request.status == 200) {
                        var gui = void 0;
                        if (snippet) {
                            var payload = JSON.parse(JSON.parse(request.responseText).jsonPayload);
                            gui = payload.encodedGui ? new TextDecoder("utf-8").decode((0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.DecodeBase64ToBinary)(payload.encodedGui)) : payload.gui;
                        }
                        else {
                            gui = request.responseText;
                        }
                        var serializationObject = JSON.parse(gui);
                        resolve(serializationObject);
                    }
                    else {
                        reject("Unable to load");
                    }
                }
            });
            request.open("GET", url);
            request.send();
        });
    };
    // Statics
    /**
     * Compares two rectangle based controls for pixel overlap
     * @param control1 The first control to compare
     * @param control2 The second control to compare
     * @returns true if overlaps, otherwise false
     */
    AdvancedDynamicTexture._Overlaps = function (control1, control2) {
        return !(control1.centerX > control2.centerX + control2.widthInPixels ||
            control1.centerX + control1.widthInPixels < control2.centerX ||
            control1.centerY + control1.heightInPixels < control2.centerY ||
            control1.centerY > control2.centerY + control2.heightInPixels);
    };
    /**
     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)
     * @param mesh defines the mesh which will receive the texture
     * @param width defines the texture width (1024 by default)
     * @param height defines the texture height (1024 by default)
     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)
     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)
     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)
     * @param materialSetupCallback defines a custom way of creating and setting up the material on the mesh
     * @param sampling defines the texture sampling mode (Texture.TRILINEAR_SAMPLINGMODE by default)
     * @returns a new AdvancedDynamicTexture
     */
    AdvancedDynamicTexture.CreateForMesh = function (mesh, width, height, supportPointerMove, onlyAlphaTesting, invertY, materialSetupCallback, sampling) {
        if (width === void 0) { width = 1024; }
        if (height === void 0) { height = 1024; }
        if (supportPointerMove === void 0) { supportPointerMove = true; }
        if (onlyAlphaTesting === void 0) { onlyAlphaTesting = false; }
        if (materialSetupCallback === void 0) { materialSetupCallback = this._CreateMaterial; }
        if (sampling === void 0) { sampling = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.TRILINEAR_SAMPLINGMODE; }
        // use a unique ID in name so serialization will work even if you create two ADTs for a single mesh
        var uniqueId = (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RandomGUID)();
        var result = new AdvancedDynamicTexture("AdvancedDynamicTexture for ".concat(mesh.name, " [").concat(uniqueId, "]"), width, height, mesh.getScene(), true, sampling, invertY);
        materialSetupCallback(mesh, uniqueId, result, onlyAlphaTesting);
        result.attachToMesh(mesh, supportPointerMove);
        return result;
    };
    AdvancedDynamicTexture._CreateMaterial = function (mesh, uniqueId, texture, onlyAlphaTesting) {
        var internalClassType = (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.GetClass)("BABYLON.StandardMaterial");
        if (!internalClassType) {
            // eslint-disable-next-line no-throw-literal
            throw "StandardMaterial needs to be imported before as it contains a side-effect required by your code.";
        }
        var material = new internalClassType("AdvancedDynamicTextureMaterial for ".concat(mesh.name, " [").concat(uniqueId, "]"), mesh.getScene());
        material.backFaceCulling = false;
        material.diffuseColor = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.Black();
        material.specularColor = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.Black();
        if (onlyAlphaTesting) {
            material.diffuseTexture = texture;
            material.emissiveTexture = texture;
            texture.hasAlpha = true;
        }
        else {
            material.emissiveTexture = texture;
            material.opacityTexture = texture;
        }
        mesh.material = material;
    };
    /**
     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh) BUT do not create a new material for the mesh. You will be responsible for connecting the texture
     * @param mesh defines the mesh which will receive the texture
     * @param width defines the texture width (1024 by default)
     * @param height defines the texture height (1024 by default)
     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)
     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)
     * @param sampling defines the texture sampling mode (Texture.TRILINEAR_SAMPLINGMODE by default)
     * @returns a new AdvancedDynamicTexture
     */
    AdvancedDynamicTexture.CreateForMeshTexture = function (mesh, width, height, supportPointerMove, invertY, sampling) {
        if (width === void 0) { width = 1024; }
        if (height === void 0) { height = 1024; }
        if (supportPointerMove === void 0) { supportPointerMove = true; }
        if (sampling === void 0) { sampling = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.TRILINEAR_SAMPLINGMODE; }
        var result = new AdvancedDynamicTexture(mesh.name + " AdvancedDynamicTexture", width, height, mesh.getScene(), true, sampling, invertY);
        result.attachToMesh(mesh, supportPointerMove);
        return result;
    };
    /**
     * Creates a new AdvancedDynamicTexture in fullscreen mode.
     * In this mode the texture will rely on a layer for its rendering.
     * This allows it to be treated like any other layer.
     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.
     * LayerMask is set through advancedTexture.layer.layerMask
     * @param name defines name for the texture
     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)
     * @param scene defines the hosting scene
     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)
     * @param adaptiveScaling defines whether to automatically scale root to match hardwarescaling (false by default)
     * @returns a new AdvancedDynamicTexture
     */
    AdvancedDynamicTexture.CreateFullscreenUI = function (name, foreground, scene, sampling, adaptiveScaling) {
        if (foreground === void 0) { foreground = true; }
        if (scene === void 0) { scene = null; }
        if (sampling === void 0) { sampling = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Texture.BILINEAR_SAMPLINGMODE; }
        if (adaptiveScaling === void 0) { adaptiveScaling = false; }
        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);
        // Display
        var resultScene = result.getScene();
        var layer = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Layer(name + "_layer", null, resultScene, !foreground);
        layer.texture = result;
        result._layerToDispose = layer;
        result._isFullscreen = true;
        if (adaptiveScaling && resultScene) {
            var newScale = 1 / resultScene.getEngine().getHardwareScalingLevel();
            result._rootContainer.scaleX = newScale;
            result._rootContainer.scaleY = newScale;
        }
        // Attach
        result.attach();
        return result;
    };
    /**
     * Scales the texture
     * @param ratio the scale factor to apply to both width and height
     */
    AdvancedDynamicTexture.prototype.scale = function (ratio) {
        _super.prototype.scale.call(this, ratio);
        this.markAsDirty();
    };
    /**
     * Resizes the texture
     * @param width the new width
     * @param height the new height
     */
    AdvancedDynamicTexture.prototype.scaleTo = function (width, height) {
        _super.prototype.scaleTo.call(this, width, height);
        this.markAsDirty();
    };
    AdvancedDynamicTexture.prototype._checkGuiIsReady = function () {
        if (this.guiIsReady()) {
            this.onGuiReadyObservable.notifyObservers(this);
            this.onGuiReadyObservable.clear();
        }
    };
    /**
     * @returns true if all the GUI components are ready to render
     */
    AdvancedDynamicTexture.prototype.guiIsReady = function () {
        return this._rootContainer.isReady();
    };
    /** Define the url to load snippets */
    AdvancedDynamicTexture.SnippetUrl = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Constants.SnippetUrl;
    /** Indicates if some optimizations can be performed in GUI GPU management (the downside is additional memory/GPU texture memory used) */
    AdvancedDynamicTexture.AllowGPUOptimizations = true;
    return AdvancedDynamicTexture;
}(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.DynamicTexture));


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/button.ts":
/*!**************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/button.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* binding */ Button)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rectangle */ "../../../dev/gui/src/2D/controls/rectangle.ts");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _textBlock__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./image */ "../../../dev/gui/src/2D/controls/image.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! babylonjs/Misc/typeStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_4__);






/**
 * Class used to create 2D buttons
 */
var Button = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__extends)(Button, _super);
    /**
     * Creates a new Button
     * @param name defines the name of the button
     */
    function Button(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this.thickness = 1;
        _this.isPointerBlocker = true;
        var alphaStore = null;
        _this.pointerEnterAnimation = function () {
            alphaStore = _this.alpha;
            _this.alpha -= 0.1;
        };
        _this.pointerOutAnimation = function () {
            if (alphaStore !== null) {
                _this.alpha = alphaStore;
            }
        };
        _this.pointerDownAnimation = function () {
            _this.scaleX -= 0.05;
            _this.scaleY -= 0.05;
        };
        _this.pointerUpAnimation = function () {
            _this.scaleX += 0.05;
            _this.scaleY += 0.05;
        };
        return _this;
    }
    Object.defineProperty(Button.prototype, "image", {
        /**
         * Returns the image part of the button (if any)
         */
        get: function () {
            return this._image;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "textBlock", {
        /**
         * Returns the TextBlock part of the button (if any)
         */
        get: function () {
            return this._textBlock;
        },
        enumerable: false,
        configurable: true
    });
    Button.prototype._getTypeName = function () {
        return "Button";
    };
    // While being a container, the button behaves like a control.
    /**
     * @internal
     */
    Button.prototype._processPicking = function (x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {
            return false;
        }
        if (!_super.prototype.contains.call(this, x, y)) {
            return false;
        }
        if (this.delegatePickingToChildren) {
            var contains = false;
            for (var index = this._children.length - 1; index >= 0; index--) {
                var child = this._children[index];
                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {
                    contains = true;
                    break;
                }
            }
            if (!contains) {
                return false;
            }
        }
        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);
        return true;
    };
    /**
     * @internal
     */
    Button.prototype._onPointerEnter = function (target, pi) {
        if (!_super.prototype._onPointerEnter.call(this, target, pi)) {
            return false;
        }
        if (!this.isReadOnly && this.pointerEnterAnimation) {
            this.pointerEnterAnimation();
        }
        return true;
    };
    /**
     * @internal
     */
    Button.prototype._onPointerOut = function (target, pi, force) {
        if (force === void 0) { force = false; }
        if (!this.isReadOnly && this.pointerOutAnimation) {
            this.pointerOutAnimation();
        }
        _super.prototype._onPointerOut.call(this, target, pi, force);
    };
    /**
     * @internal
     */
    Button.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
            return false;
        }
        if (!this.isReadOnly && this.pointerDownAnimation) {
            this.pointerDownAnimation();
        }
        return true;
    };
    Button.prototype._getRectangleFill = function (context) {
        if (this.isEnabled) {
            return this._getBackgroundColor(context);
        }
        else {
            return this._disabledColor;
        }
    };
    /**
     * @internal
     */
    Button.prototype._onPointerUp = function (target, coordinates, pointerId, buttonIndex, notifyClick, pi) {
        if (!this.isReadOnly && this.pointerUpAnimation) {
            this.pointerUpAnimation();
        }
        _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick, pi);
    };
    /**
     * Serializes the current button
     * @param serializationObject defines the JSON serialized object
     * @param force force serialization even if isSerializable === false
     */
    Button.prototype.serialize = function (serializationObject, force) {
        _super.prototype.serialize.call(this, serializationObject, force);
        if (!this.isSerializable && !force) {
            return;
        }
        if (this._textBlock) {
            serializationObject.textBlockName = this._textBlock.name;
        }
        if (this._image) {
            serializationObject.imageName = this._image.name;
        }
    };
    /**
     * @internal
     */
    Button.prototype._parseFromContent = function (serializedObject, host) {
        _super.prototype._parseFromContent.call(this, serializedObject, host);
        if (serializedObject.textBlockName) {
            this._textBlock = this.getChildByName(serializedObject.textBlockName);
        }
        if (serializedObject.imageName) {
            this._image = this.getChildByName(serializedObject.imageName);
        }
    };
    // Statics
    /**
     * Creates a new button made with an image and a text
     * @param name defines the name of the button
     * @param text defines the text of the button
     * @param imageUrl defines the url of the image
     * @returns a new Button
     */
    Button.CreateImageButton = function (name, text, imageUrl) {
        var result = new this(name);
        // Adding text
        var textBlock = new _textBlock__WEBPACK_IMPORTED_MODULE_2__.TextBlock(name + "_button", text);
        textBlock.textWrapping = true;
        textBlock.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_CENTER;
        textBlock.paddingLeft = "20%";
        result.addControl(textBlock);
        // Adding image
        var iconImage = new _image__WEBPACK_IMPORTED_MODULE_3__.Image(name + "_icon", imageUrl);
        iconImage.width = "20%";
        iconImage.stretch = _image__WEBPACK_IMPORTED_MODULE_3__.Image.STRETCH_UNIFORM;
        iconImage.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        result.addControl(iconImage);
        // Store
        result._image = iconImage;
        result._textBlock = textBlock;
        return result;
    };
    /**
     * Creates a new button made with an image
     * @param name defines the name of the button
     * @param imageUrl defines the url of the image
     * @returns a new Button
     */
    Button.CreateImageOnlyButton = function (name, imageUrl) {
        var result = new this(name);
        // Adding image
        var iconImage = new _image__WEBPACK_IMPORTED_MODULE_3__.Image(name + "_icon", imageUrl);
        iconImage.stretch = _image__WEBPACK_IMPORTED_MODULE_3__.Image.STRETCH_FILL;
        iconImage.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        result.addControl(iconImage);
        // Store
        result._image = iconImage;
        return result;
    };
    /**
     * Creates a new button made with a text
     * @param name defines the name of the button
     * @param text defines the text of the button
     * @returns a new Button
     */
    Button.CreateSimpleButton = function (name, text) {
        var result = new this(name);
        // Adding text
        var textBlock = new _textBlock__WEBPACK_IMPORTED_MODULE_2__.TextBlock(name + "_button", text);
        textBlock.textWrapping = true;
        textBlock.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_CENTER;
        result.addControl(textBlock);
        // Store
        result._textBlock = textBlock;
        return result;
    };
    /**
     * Creates a new button made with an image and a centered text
     * @param name defines the name of the button
     * @param text defines the text of the button
     * @param imageUrl defines the url of the image
     * @returns a new Button
     */
    Button.CreateImageWithCenterTextButton = function (name, text, imageUrl) {
        var result = new this(name);
        // Adding image
        var iconImage = new _image__WEBPACK_IMPORTED_MODULE_3__.Image(name + "_icon", imageUrl);
        iconImage.stretch = _image__WEBPACK_IMPORTED_MODULE_3__.Image.STRETCH_FILL;
        result.addControl(iconImage);
        // Adding text
        var textBlock = new _textBlock__WEBPACK_IMPORTED_MODULE_2__.TextBlock(name + "_button", text);
        textBlock.textWrapping = true;
        textBlock.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_CENTER;
        result.addControl(textBlock);
        // Store
        result._image = iconImage;
        result._textBlock = textBlock;
        return result;
    };
    return Button;
}(_rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle));

(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_4__.RegisterClass)("BABYLON.GUI.Button", Button);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/checkbox.ts":
/*!****************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/checkbox.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Checkbox: () => (/* binding */ Checkbox)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _stackPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stackPanel */ "../../../dev/gui/src/2D/controls/stackPanel.ts");
/* harmony import */ var _textBlock__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");







/**
 * Class used to represent a 2D checkbox
 */
var Checkbox = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(Checkbox, _super);
    /**
     * Creates a new CheckBox
     * @param name defines the control name
     */
    function Checkbox(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._isChecked = false;
        _this._background = "black";
        _this._checkSizeRatio = 0.8;
        _this._thickness = 1;
        /**
         * Observable raised when isChecked property changes
         */
        _this.onIsCheckedChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        _this.isPointerBlocker = true;
        return _this;
    }
    Object.defineProperty(Checkbox.prototype, "thickness", {
        /** Gets or sets border thickness  */
        get: function () {
            return this._thickness;
        },
        set: function (value) {
            if (this._thickness === value) {
                return;
            }
            this._thickness = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "checkSizeRatio", {
        /** Gets or sets a value indicating the ratio between overall size and check size */
        get: function () {
            return this._checkSizeRatio;
        },
        set: function (value) {
            value = Math.max(Math.min(1, value), 0);
            if (this._checkSizeRatio === value) {
                return;
            }
            this._checkSizeRatio = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "background", {
        /** Gets or sets background color */
        get: function () {
            return this._background;
        },
        set: function (value) {
            if (this._background === value) {
                return;
            }
            this._background = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "isChecked", {
        /** Gets or sets a boolean indicating if the checkbox is checked or not */
        get: function () {
            return this._isChecked;
        },
        set: function (value) {
            if (this._isChecked === value) {
                return;
            }
            this._isChecked = value;
            this._markAsDirty();
            this.onIsCheckedChangedObservable.notifyObservers(value);
        },
        enumerable: false,
        configurable: true
    });
    Checkbox.prototype._getTypeName = function () {
        return "Checkbox";
    };
    /**
     * @internal
     */
    Checkbox.prototype._draw = function (context) {
        context.save();
        this._applyStates(context);
        var actualWidth = this._currentMeasure.width - this._thickness;
        var actualHeight = this._currentMeasure.height - this._thickness;
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;
        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
        }
        if (this._isChecked) {
            // Color is white if not set
            context.fillStyle = this._isEnabled ? (this.color ? this.color : "#ffffff") : this._disabledColorItem;
            var offsetWidth = actualWidth * this._checkSizeRatio;
            var offsetHeight = actualHeight * this._checkSizeRatio;
            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offsetHeight) / 2, offsetWidth, offsetHeight);
        }
        context.strokeStyle = this.color;
        context.lineWidth = this._thickness;
        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);
        context.restore();
    };
    // Events
    /**
     * @internal
     */
    Checkbox.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
            return false;
        }
        if (!this.isReadOnly) {
            this.isChecked = !this.isChecked;
        }
        return true;
    };
    /**
     * Utility function to easily create a checkbox with a header
     * @param title defines the label to use for the header
     * @param onValueChanged defines the callback to call when value changes
     * @returns a StackPanel containing the checkbox and a textBlock
     */
    Checkbox.AddCheckBoxWithHeader = function (title, onValueChanged) {
        var panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_2__.StackPanel();
        panel.isVertical = false;
        panel.height = "30px";
        var checkbox = new Checkbox();
        checkbox.width = "20px";
        checkbox.height = "20px";
        checkbox.isChecked = true;
        checkbox.color = "green";
        checkbox.onIsCheckedChangedObservable.add(onValueChanged);
        panel.addControl(checkbox);
        var header = new _textBlock__WEBPACK_IMPORTED_MODULE_3__.TextBlock();
        header.text = title;
        header.width = "180px";
        header.paddingLeft = "5px";
        header.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        header.color = "white";
        panel.addControl(header);
        return panel;
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Checkbox.prototype, "thickness", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Checkbox.prototype, "checkSizeRatio", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Checkbox.prototype, "background", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Checkbox.prototype, "isChecked", null);
    return Checkbox;
}(_control__WEBPACK_IMPORTED_MODULE_1__.Control));
(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.Checkbox", Checkbox);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/colorpicker.ts":
/*!*******************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/colorpicker.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColorPicker: () => (/* binding */ ColorPicker)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/engineStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _inputText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./inputText */ "../../../dev/gui/src/2D/controls/inputText.ts");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rectangle */ "../../../dev/gui/src/2D/controls/rectangle.ts");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./button */ "../../../dev/gui/src/2D/controls/button.ts");
/* harmony import */ var _grid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./grid */ "../../../dev/gui/src/2D/controls/grid.ts");
/* harmony import */ var _controls_textBlock__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../controls/textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");












/** Class used to create color pickers */
var ColorPicker = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__extends)(ColorPicker, _super);
    /**
     * Creates a new ColorPicker
     * @param name defines the control name
     */
    function ColorPicker(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._value = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.Red();
        _this._tmpColor = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3();
        _this._pointerStartedOnSquare = false;
        _this._pointerStartedOnWheel = false;
        _this._squareLeft = 0;
        _this._squareTop = 0;
        _this._squareSize = 0;
        _this._h = 360;
        _this._s = 1;
        _this._v = 1;
        _this._lastPointerDownId = -1;
        /**
         * Observable raised when the value changes
         */
        _this.onValueChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        // Events
        _this._pointerIsDown = false;
        _this.value = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3(0.88, 0.1, 0.1);
        _this.size = "200px";
        _this.isPointerBlocker = true;
        return _this;
    }
    Object.defineProperty(ColorPicker.prototype, "value", {
        /** Gets or sets the color of the color picker */
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (this._value.equals(value)) {
                return;
            }
            this._value.copyFrom(value);
            this._value.toHSVToRef(this._tmpColor);
            this._h = this._tmpColor.r;
            this._s = Math.max(this._tmpColor.g, 0.00001);
            this._v = Math.max(this._tmpColor.b, 0.00001);
            this._markAsDirty();
            if (this._value.r <= ColorPicker._Epsilon) {
                this._value.r = 0;
            }
            if (this._value.g <= ColorPicker._Epsilon) {
                this._value.g = 0;
            }
            if (this._value.b <= ColorPicker._Epsilon) {
                this._value.b = 0;
            }
            if (this._value.r >= 1.0 - ColorPicker._Epsilon) {
                this._value.r = 1.0;
            }
            if (this._value.g >= 1.0 - ColorPicker._Epsilon) {
                this._value.g = 1.0;
            }
            if (this._value.b >= 1.0 - ColorPicker._Epsilon) {
                this._value.b = 1.0;
            }
            this.onValueChangedObservable.notifyObservers(this._value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorPicker.prototype, "width", {
        /**
         * Gets or sets control width
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._width.toString(this._host);
        },
        set: function (value) {
            if (this._width.toString(this._host) === value) {
                return;
            }
            if (this._width.fromString(value)) {
                if (this._width.getValue(this._host) === 0) {
                    value = "1px";
                    this._width.fromString(value);
                }
                this._height.fromString(value);
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorPicker.prototype, "height", {
        /**
         * Gets or sets control height
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._height.toString(this._host);
        },
        /** Gets or sets control height */
        set: function (value) {
            if (this._height.toString(this._host) === value) {
                return;
            }
            if (this._height.fromString(value)) {
                if (this._height.getValue(this._host) === 0) {
                    value = "1px";
                    this._height.fromString(value);
                }
                this._width.fromString(value);
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColorPicker.prototype, "size", {
        /** Gets or sets control size */
        get: function () {
            return this.width;
        },
        set: function (value) {
            this.width = value;
        },
        enumerable: false,
        configurable: true
    });
    ColorPicker.prototype._getTypeName = function () {
        return "ColorPicker";
    };
    /**
     * @internal
     */
    ColorPicker.prototype._preMeasure = function (parentMeasure) {
        if (parentMeasure.width < parentMeasure.height) {
            this._currentMeasure.height = parentMeasure.width;
        }
        else {
            this._currentMeasure.width = parentMeasure.height;
        }
    };
    ColorPicker.prototype._updateSquareProps = function () {
        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;
        var wheelThickness = radius * 0.2;
        var innerDiameter = (radius - wheelThickness) * 2;
        var squareSize = innerDiameter / Math.sqrt(2);
        var offset = radius - squareSize * 0.5;
        this._squareLeft = this._currentMeasure.left + offset;
        this._squareTop = this._currentMeasure.top + offset;
        this._squareSize = squareSize;
    };
    ColorPicker.prototype._drawGradientSquare = function (hueValue, left, top, width, height, context) {
        var lgh = context.createLinearGradient(left, top, width + left, top);
        lgh.addColorStop(0, "#fff");
        lgh.addColorStop(1, "hsl(" + hueValue + ", 100%, 50%)");
        context.fillStyle = lgh;
        context.fillRect(left, top, width, height);
        var lgv = context.createLinearGradient(left, top, left, height + top);
        lgv.addColorStop(0, "rgba(0,0,0,0)");
        lgv.addColorStop(1, "#000");
        context.fillStyle = lgv;
        context.fillRect(left, top, width, height);
    };
    ColorPicker.prototype._drawCircle = function (centerX, centerY, radius, context) {
        context.beginPath();
        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);
        context.lineWidth = 3;
        context.strokeStyle = "#333333";
        context.stroke();
        context.beginPath();
        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
        context.lineWidth = 3;
        context.strokeStyle = "#ffffff";
        context.stroke();
    };
    ColorPicker.prototype._createColorWheelCanvas = function (radius, thickness) {
        // Shoudl abstract platform instead of using LastCreatedEngine
        var engine = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.EngineStore.LastCreatedEngine;
        if (!engine) {
            throw new Error("Invalid engine. Unable to create a canvas.");
        }
        var canvas = engine.createCanvas(radius * 2, radius * 2);
        var context = canvas.getContext("2d");
        var image = context.getImageData(0, 0, radius * 2, radius * 2);
        var data = image.data;
        var color = this._tmpColor;
        var maxDistSq = radius * radius;
        var innerRadius = radius - thickness;
        var minDistSq = innerRadius * innerRadius;
        for (var x = -radius; x < radius; x++) {
            for (var y = -radius; y < radius; y++) {
                var distSq = x * x + y * y;
                if (distSq > maxDistSq || distSq < minDistSq) {
                    continue;
                }
                var dist = Math.sqrt(distSq);
                var ang = Math.atan2(y, x);
                babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.HSVtoRGBToRef((ang * 180) / Math.PI + 180, dist / radius, 1, color);
                var index = (x + radius + (y + radius) * 2 * radius) * 4;
                data[index] = color.r * 255;
                data[index + 1] = color.g * 255;
                data[index + 2] = color.b * 255;
                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);
                //apply less alpha to bigger color pickers
                var alphaAmount = 0.2;
                var maxAlpha = 0.2;
                var minAlpha = 0.04;
                var lowerRadius = 50;
                var upperRadius = 150;
                if (radius < lowerRadius) {
                    alphaAmount = maxAlpha;
                }
                else if (radius > upperRadius) {
                    alphaAmount = minAlpha;
                }
                else {
                    alphaAmount = ((minAlpha - maxAlpha) * (radius - lowerRadius)) / (upperRadius - lowerRadius) + maxAlpha;
                }
                alphaRatio = (dist - innerRadius) / (radius - innerRadius);
                if (alphaRatio < alphaAmount) {
                    data[index + 3] = 255 * (alphaRatio / alphaAmount);
                }
                else if (alphaRatio > 1 - alphaAmount) {
                    data[index + 3] = 255 * (1.0 - (alphaRatio - (1 - alphaAmount)) / alphaAmount);
                }
                else {
                    data[index + 3] = 255;
                }
            }
        }
        context.putImageData(image, 0, 0);
        return canvas;
    };
    /**
     * @internal
     */
    ColorPicker.prototype._draw = function (context) {
        context.save();
        this._applyStates(context);
        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;
        var wheelThickness = radius * 0.2;
        var left = this._currentMeasure.left;
        var top = this._currentMeasure.top;
        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {
            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);
        }
        this._updateSquareProps();
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);
        }
        context.drawImage(this._colorWheelCanvas, left, top);
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
        }
        this._drawGradientSquare(this._h, this._squareLeft, this._squareTop, this._squareSize, this._squareSize, context);
        var cx = this._squareLeft + this._squareSize * this._s;
        var cy = this._squareTop + this._squareSize * (1 - this._v);
        this._drawCircle(cx, cy, radius * 0.04, context);
        var dist = radius - wheelThickness * 0.5;
        cx = left + radius + Math.cos(((this._h - 180) * Math.PI) / 180) * dist;
        cy = top + radius + Math.sin(((this._h - 180) * Math.PI) / 180) * dist;
        this._drawCircle(cx, cy, wheelThickness * 0.35, context);
        context.restore();
    };
    ColorPicker.prototype._updateValueFromPointer = function (x, y) {
        if (this._pointerStartedOnWheel) {
            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;
            var centerX = radius + this._currentMeasure.left;
            var centerY = radius + this._currentMeasure.top;
            this._h = (Math.atan2(y - centerY, x - centerX) * 180) / Math.PI + 180;
        }
        else if (this._pointerStartedOnSquare) {
            this._updateSquareProps();
            this._s = (x - this._squareLeft) / this._squareSize;
            this._v = 1 - (y - this._squareTop) / this._squareSize;
            this._s = Math.min(this._s, 1);
            this._s = Math.max(this._s, ColorPicker._Epsilon);
            this._v = Math.min(this._v, 1);
            this._v = Math.max(this._v, ColorPicker._Epsilon);
        }
        babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);
        this.value = this._tmpColor;
    };
    ColorPicker.prototype._isPointOnSquare = function (x, y) {
        this._updateSquareProps();
        var left = this._squareLeft;
        var top = this._squareTop;
        var size = this._squareSize;
        if (x >= left && x <= left + size && y >= top && y <= top + size) {
            return true;
        }
        return false;
    };
    ColorPicker.prototype._isPointOnWheel = function (x, y) {
        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;
        var centerX = radius + this._currentMeasure.left;
        var centerY = radius + this._currentMeasure.top;
        var wheelThickness = radius * 0.2;
        var innerRadius = radius - wheelThickness;
        var radiusSq = radius * radius;
        var innerRadiusSq = innerRadius * innerRadius;
        var dx = x - centerX;
        var dy = y - centerY;
        var distSq = dx * dx + dy * dy;
        if (distSq <= radiusSq && distSq >= innerRadiusSq) {
            return true;
        }
        return false;
    };
    ColorPicker.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
            return false;
        }
        if (this.isReadOnly) {
            return true;
        }
        this._pointerIsDown = true;
        this._pointerStartedOnSquare = false;
        this._pointerStartedOnWheel = false;
        // Invert transform
        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);
        var x = this._transformedPosition.x;
        var y = this._transformedPosition.y;
        if (this._isPointOnSquare(x, y)) {
            this._pointerStartedOnSquare = true;
        }
        else if (this._isPointOnWheel(x, y)) {
            this._pointerStartedOnWheel = true;
        }
        this._updateValueFromPointer(x, y);
        this._host._capturingControl[pointerId] = this;
        this._lastPointerDownId = pointerId;
        return true;
    };
    ColorPicker.prototype._onPointerMove = function (target, coordinates, pointerId, pi) {
        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)
        if (pointerId != this._lastPointerDownId) {
            return;
        }
        if (!this.isReadOnly) {
            // Invert transform
            this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);
            var x = this._transformedPosition.x;
            var y = this._transformedPosition.y;
            if (this._pointerIsDown) {
                this._updateValueFromPointer(x, y);
            }
        }
        _super.prototype._onPointerMove.call(this, target, coordinates, pointerId, pi);
    };
    ColorPicker.prototype._onPointerUp = function (target, coordinates, pointerId, buttonIndex, notifyClick, pi) {
        this._pointerIsDown = false;
        delete this._host._capturingControl[pointerId];
        _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick, pi);
    };
    ColorPicker.prototype._onCanvasBlur = function () {
        this._forcePointerUp();
        _super.prototype._onCanvasBlur.call(this);
    };
    /**
     * This function expands the color picker by creating a color picker dialog with manual
     * color value input and the ability to save colors into an array to be used later in
     * subsequent launches of the dialogue.
     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to
     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.
     * @param options.pickerWidth
     * @param options.pickerHeight
     * @param options.headerHeight
     * @param options.lastColor
     * @param options.swatchLimit
     * @param options.numSwatchesPerLine
     * @param options.savedColors
     * @returns picked color as a hex string and the saved colors array as hex strings.
     */
    ColorPicker.ShowPickerDialogAsync = function (advancedTexture, options) {
        return new Promise(function (resolve) {
            // Default options
            options.pickerWidth = options.pickerWidth || "640px";
            options.pickerHeight = options.pickerHeight || "400px";
            options.headerHeight = options.headerHeight || "35px";
            options.lastColor = options.lastColor || "#000000";
            options.swatchLimit = options.swatchLimit || 20;
            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;
            // Window size settings
            var drawerMaxRows = options.swatchLimit / options.numSwatchesPerLine;
            var rawSwatchSize = parseFloat(options.pickerWidth) / options.numSwatchesPerLine;
            var gutterSize = Math.floor(rawSwatchSize * 0.25);
            var colGutters = gutterSize * (options.numSwatchesPerLine + 1);
            var swatchSize = Math.floor((parseFloat(options.pickerWidth) - colGutters) / options.numSwatchesPerLine);
            var drawerMaxSize = swatchSize * drawerMaxRows + gutterSize * (drawerMaxRows + 1);
            var containerSize = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + "px";
            // Button Colors
            var buttonColor = "#c0c0c0";
            var buttonBackgroundColor = "#535353";
            var buttonBackgroundHoverColor = "#414141";
            var buttonBackgroundClickColor = "515151";
            var buttonDisabledColor = "#555555";
            var buttonDisabledBackgroundColor = "#454545";
            var currentSwatchesOutlineColor = "#404040";
            var luminanceLimitColor = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString("#dddddd");
            var luminanceLimit = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;
            var iconColorDark = "#aaaaaa";
            var iconColorLight = "#ffffff";
            // Button settings
            var buttonFontSize;
            var butEdit;
            // Input Text Colors
            var inputFieldLabels = ["R", "G", "B"];
            var inputTextBackgroundColor = "#454545";
            var inputTextColor = "#f0f0f0";
            // This int is used for naming swatches and serves as the index for calling them from the list
            var swatchNumber;
            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.
            var swatchDrawer;
            var editSwatchMode = false;
            // Color InputText fields that will be updated upon value change
            var butSave;
            var lastVal;
            var activeField;
            // Dialog menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.
            var dialogContainer = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            dialogContainer.name = "Dialog Container";
            dialogContainer.width = options.pickerWidth;
            if (options.savedColors) {
                dialogContainer.height = containerSize;
                var topRow = parseInt(options.pickerHeight) / parseInt(containerSize);
                dialogContainer.addRowDefinition(topRow, false);
                dialogContainer.addRowDefinition(1.0 - topRow, false);
            }
            else {
                dialogContainer.height = options.pickerHeight;
                dialogContainer.addRowDefinition(1.0, false);
            }
            advancedTexture.addControl(dialogContainer);
            // Swatch drawer which contains all saved color buttons
            if (options.savedColors) {
                swatchDrawer = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
                swatchDrawer.name = "Swatch Drawer";
                swatchDrawer.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_TOP;
                swatchDrawer.background = buttonBackgroundColor;
                swatchDrawer.width = options.pickerWidth;
                var initialRows = options.savedColors.length / options.numSwatchesPerLine;
                var gutterCount = void 0;
                if (initialRows == 0) {
                    gutterCount = 0;
                }
                else {
                    gutterCount = initialRows + 1;
                }
                swatchDrawer.height = (swatchSize * initialRows + gutterCount * gutterSize).toString() + "px";
                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + "px";
                for (var i = 0; i < Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2 + 1; i++) {
                    if (i % 2 != 0) {
                        swatchDrawer.addRowDefinition(swatchSize, true);
                    }
                    else {
                        swatchDrawer.addRowDefinition(gutterSize, true);
                    }
                }
                for (var i = 0; i < options.numSwatchesPerLine * 2 + 1; i++) {
                    if (i % 2 != 0) {
                        swatchDrawer.addColumnDefinition(swatchSize, true);
                    }
                    else {
                        swatchDrawer.addColumnDefinition(gutterSize, true);
                    }
                }
                dialogContainer.addControl(swatchDrawer, 1, 0);
            }
            // Picker container
            var pickerPanel = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            pickerPanel.name = "Picker Panel";
            pickerPanel.height = options.pickerHeight;
            var panelHead = parseInt(options.headerHeight) / parseInt(options.pickerHeight);
            var pickerPanelRows = [panelHead, 1.0 - panelHead];
            pickerPanel.addRowDefinition(pickerPanelRows[0], false);
            pickerPanel.addRowDefinition(pickerPanelRows[1], false);
            dialogContainer.addControl(pickerPanel, 0, 0);
            // Picker container header
            var header = new _rectangle__WEBPACK_IMPORTED_MODULE_3__.Rectangle();
            header.name = "Dialogue Header Bar";
            header.background = "#cccccc";
            header.thickness = 0;
            pickerPanel.addControl(header, 0, 0);
            // Header close button
            var closeButton = _button__WEBPACK_IMPORTED_MODULE_4__.Button.CreateSimpleButton("closeButton", "a");
            closeButton.fontFamily = "coreglyphs";
            var headerColor3 = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(header.background);
            var closeIconColor = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);
            closeButton.color = closeIconColor.toHexString();
            closeButton.fontSize = Math.floor(parseInt(options.headerHeight) * 0.6);
            closeButton.textBlock.textVerticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_CENTER;
            closeButton.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_RIGHT;
            closeButton.height = closeButton.width = options.headerHeight;
            closeButton.background = header.background;
            closeButton.thickness = 0;
            closeButton.pointerDownAnimation = function () { };
            closeButton.pointerUpAnimation = function () {
                closeButton.background = header.background;
            };
            closeButton.pointerEnterAnimation = function () {
                closeButton.color = header.background;
                closeButton.background = "red";
            };
            closeButton.pointerOutAnimation = function () {
                closeButton.color = closeIconColor.toHexString();
                closeButton.background = header.background;
            };
            closeButton.onPointerClickObservable.add(function () {
                closePicker(currentSwatch.background);
            });
            pickerPanel.addControl(closeButton, 0, 0);
            // Dialog container body
            var dialogBody = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            dialogBody.name = "Dialogue Body";
            dialogBody.background = buttonBackgroundColor;
            var dialogBodyCols = [0.4375, 0.5625];
            dialogBody.addRowDefinition(1.0, false);
            dialogBody.addColumnDefinition(dialogBodyCols[0], false);
            dialogBody.addColumnDefinition(dialogBodyCols[1], false);
            pickerPanel.addControl(dialogBody, 1, 0);
            // Picker grid
            var pickerGrid = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            pickerGrid.name = "Picker Grid";
            pickerGrid.addRowDefinition(0.85, false);
            pickerGrid.addRowDefinition(0.15, false);
            dialogBody.addControl(pickerGrid, 0, 0);
            //  Picker control
            var picker = new ColorPicker();
            picker.name = "GUI Color Picker";
            if (options.pickerHeight < options.pickerWidth) {
                picker.width = 0.89;
            }
            else {
                picker.height = 0.89;
            }
            picker.value = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(options.lastColor);
            picker.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_CENTER;
            picker.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_CENTER;
            picker.onPointerDownObservable.add(function () {
                activeField = picker.name;
                lastVal = "";
                editSwatches(false);
            });
            picker.onValueChangedObservable.add(function (value) {
                // value is a color3
                if (activeField == picker.name) {
                    updateValues(value, picker.name);
                }
            });
            pickerGrid.addControl(picker, 0, 0);
            // Picker body right quarant
            var pickerBodyRight = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            pickerBodyRight.name = "Dialogue Right Half";
            pickerBodyRight.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
            var pickerBodyRightRows = [0.514, 0.486];
            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);
            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);
            dialogBody.addControl(pickerBodyRight, 1, 1);
            // Picker container swatches and buttons
            var pickerSwatchesButtons = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            pickerSwatchesButtons.name = "Swatches and Buttons";
            var pickerButtonsCol = [0.417, 0.583];
            pickerSwatchesButtons.addRowDefinition(1.0, false);
            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);
            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);
            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);
            // Picker Swatches quadrant
            var pickerSwatches = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            pickerSwatches.name = "New and Current Swatches";
            var pickeSwatchesRows = [0.04, 0.16, 0.64, 0.16];
            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);
            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);
            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);
            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);
            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);
            // Active swatches
            var activeSwatches = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            activeSwatches.name = "Active Swatches";
            activeSwatches.width = 0.67;
            activeSwatches.addRowDefinition(0.5, false);
            activeSwatches.addRowDefinition(0.5, false);
            pickerSwatches.addControl(activeSwatches, 2, 0);
            var labelWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11);
            var labelHeight = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5);
            var labelTextSize;
            if (options.pickerWidth > options.pickerHeight) {
                labelTextSize = labelHeight;
            }
            else {
                labelTextSize = labelWidth;
            }
            // New color swatch and previous color button
            var newText = new _controls_textBlock__WEBPACK_IMPORTED_MODULE_6__.TextBlock();
            newText.text = "new";
            newText.name = "New Color Label";
            newText.color = buttonColor;
            newText.fontSize = labelTextSize;
            pickerSwatches.addControl(newText, 1, 0);
            var newSwatch = new _rectangle__WEBPACK_IMPORTED_MODULE_3__.Rectangle();
            newSwatch.name = "New Color Swatch";
            newSwatch.background = options.lastColor;
            newSwatch.thickness = 0;
            activeSwatches.addControl(newSwatch, 0, 0);
            var currentSwatch = _button__WEBPACK_IMPORTED_MODULE_4__.Button.CreateSimpleButton("currentSwatch", "");
            currentSwatch.background = options.lastColor;
            currentSwatch.thickness = 0;
            currentSwatch.onPointerClickObservable.add(function () {
                var revertColor = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(currentSwatch.background);
                updateValues(revertColor, currentSwatch.name);
                editSwatches(false);
            });
            currentSwatch.pointerDownAnimation = function () { };
            currentSwatch.pointerUpAnimation = function () { };
            currentSwatch.pointerEnterAnimation = function () { };
            currentSwatch.pointerOutAnimation = function () { };
            activeSwatches.addControl(currentSwatch, 1, 0);
            var swatchOutline = new _rectangle__WEBPACK_IMPORTED_MODULE_3__.Rectangle();
            swatchOutline.name = "Swatch Outline";
            swatchOutline.width = 0.67;
            swatchOutline.thickness = 2;
            swatchOutline.color = currentSwatchesOutlineColor;
            swatchOutline.isHitTestVisible = false;
            pickerSwatches.addControl(swatchOutline, 2, 0);
            var currentText = new _controls_textBlock__WEBPACK_IMPORTED_MODULE_6__.TextBlock();
            currentText.name = "Current Color Label";
            currentText.text = "current";
            currentText.color = buttonColor;
            currentText.fontSize = labelTextSize;
            pickerSwatches.addControl(currentText, 3, 0);
            // Buttons grid
            var buttonGrid = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            buttonGrid.name = "Button Grid";
            buttonGrid.height = 0.8;
            var buttonGridRows = 1 / 3;
            buttonGrid.addRowDefinition(buttonGridRows, false);
            buttonGrid.addRowDefinition(buttonGridRows, false);
            buttonGrid.addRowDefinition(buttonGridRows, false);
            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);
            // Determine pixel width and height for all buttons from overall panel dimensions
            var buttonWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67).toString() + "px";
            var buttonHeight = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7).toString() + "px";
            // Determine button type size
            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {
                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);
            }
            else {
                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);
            }
            // Panel Buttons
            var butOK = _button__WEBPACK_IMPORTED_MODULE_4__.Button.CreateSimpleButton("butOK", "OK");
            butOK.width = buttonWidth;
            butOK.height = buttonHeight;
            butOK.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_CENTER;
            butOK.thickness = 2;
            butOK.color = buttonColor;
            butOK.fontSize = buttonFontSize;
            butOK.background = buttonBackgroundColor;
            butOK.onPointerEnterObservable.add(function () {
                butOK.background = buttonBackgroundHoverColor;
            });
            butOK.onPointerOutObservable.add(function () {
                butOK.background = buttonBackgroundColor;
            });
            butOK.pointerDownAnimation = function () {
                butOK.background = buttonBackgroundClickColor;
            };
            butOK.pointerUpAnimation = function () {
                butOK.background = buttonBackgroundHoverColor;
            };
            butOK.onPointerClickObservable.add(function () {
                editSwatches(false);
                closePicker(newSwatch.background);
            });
            buttonGrid.addControl(butOK, 0, 0);
            var butCancel = _button__WEBPACK_IMPORTED_MODULE_4__.Button.CreateSimpleButton("butCancel", "Cancel");
            butCancel.width = buttonWidth;
            butCancel.height = buttonHeight;
            butCancel.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_CENTER;
            butCancel.thickness = 2;
            butCancel.color = buttonColor;
            butCancel.fontSize = buttonFontSize;
            butCancel.background = buttonBackgroundColor;
            butCancel.onPointerEnterObservable.add(function () {
                butCancel.background = buttonBackgroundHoverColor;
            });
            butCancel.onPointerOutObservable.add(function () {
                butCancel.background = buttonBackgroundColor;
            });
            butCancel.pointerDownAnimation = function () {
                butCancel.background = buttonBackgroundClickColor;
            };
            butCancel.pointerUpAnimation = function () {
                butCancel.background = buttonBackgroundHoverColor;
            };
            butCancel.onPointerClickObservable.add(function () {
                editSwatches(false);
                closePicker(currentSwatch.background);
            });
            buttonGrid.addControl(butCancel, 1, 0);
            if (options.savedColors) {
                butSave = _button__WEBPACK_IMPORTED_MODULE_4__.Button.CreateSimpleButton("butSave", "Save");
                butSave.width = buttonWidth;
                butSave.height = buttonHeight;
                butSave.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_CENTER;
                butSave.thickness = 2;
                butSave.fontSize = buttonFontSize;
                if (options.savedColors.length < options.swatchLimit) {
                    butSave.color = buttonColor;
                    butSave.background = buttonBackgroundColor;
                }
                else {
                    disableButton(butSave, true);
                }
                butSave.onPointerEnterObservable.add(function () {
                    if (options.savedColors) {
                        if (options.savedColors.length < options.swatchLimit) {
                            butSave.background = buttonBackgroundHoverColor;
                        }
                    }
                });
                butSave.onPointerOutObservable.add(function () {
                    if (options.savedColors) {
                        if (options.savedColors.length < options.swatchLimit) {
                            butSave.background = buttonBackgroundColor;
                        }
                    }
                });
                butSave.pointerDownAnimation = function () {
                    if (options.savedColors) {
                        if (options.savedColors.length < options.swatchLimit) {
                            butSave.background = buttonBackgroundClickColor;
                        }
                    }
                };
                butSave.pointerUpAnimation = function () {
                    if (options.savedColors) {
                        if (options.savedColors.length < options.swatchLimit) {
                            butSave.background = buttonBackgroundHoverColor;
                        }
                    }
                };
                butSave.onPointerClickObservable.add(function () {
                    if (options.savedColors) {
                        if (options.savedColors.length == 0) {
                            setEditButtonVisibility(true);
                        }
                        if (options.savedColors.length < options.swatchLimit) {
                            updateSwatches(newSwatch.background, butSave);
                        }
                        editSwatches(false);
                    }
                });
                if (options.savedColors.length > 0) {
                    setEditButtonVisibility(true);
                }
                buttonGrid.addControl(butSave, 2, 0);
            }
            // Picker color values input
            var pickerColorValues = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            pickerColorValues.name = "Dialog Lower Right";
            pickerColorValues.addRowDefinition(0.02, false);
            pickerColorValues.addRowDefinition(0.63, false);
            pickerColorValues.addRowDefinition(0.21, false);
            pickerColorValues.addRowDefinition(0.14, false);
            pickerBodyRight.addControl(pickerColorValues, 1, 0);
            // RGB values text boxes
            var currentColor = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(options.lastColor);
            var rgbValuesQuadrant = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            rgbValuesQuadrant.name = "RGB Values";
            rgbValuesQuadrant.width = 0.82;
            rgbValuesQuadrant.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_CENTER;
            rgbValuesQuadrant.addRowDefinition(1 / 3, false);
            rgbValuesQuadrant.addRowDefinition(1 / 3, false);
            rgbValuesQuadrant.addRowDefinition(1 / 3, false);
            rgbValuesQuadrant.addColumnDefinition(0.1, false);
            rgbValuesQuadrant.addColumnDefinition(0.2, false);
            rgbValuesQuadrant.addColumnDefinition(0.7, false);
            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);
            for (var i = 0; i < inputFieldLabels.length; i++) {
                var labelText_1 = new _controls_textBlock__WEBPACK_IMPORTED_MODULE_6__.TextBlock();
                labelText_1.text = inputFieldLabels[i];
                labelText_1.color = buttonColor;
                labelText_1.fontSize = buttonFontSize;
                rgbValuesQuadrant.addControl(labelText_1, i, 0);
            }
            // Input fields for RGB values
            var rValInt = new _inputText__WEBPACK_IMPORTED_MODULE_2__.InputText();
            rValInt.width = 0.83;
            rValInt.height = 0.72;
            rValInt.name = "rIntField";
            rValInt.fontSize = buttonFontSize;
            rValInt.text = (currentColor.r * 255).toString();
            rValInt.color = inputTextColor;
            rValInt.background = inputTextBackgroundColor;
            rValInt.onFocusObservable.add(function () {
                activeField = rValInt.name;
                lastVal = rValInt.text;
                editSwatches(false);
            });
            rValInt.onBlurObservable.add(function () {
                if (rValInt.text == "") {
                    rValInt.text = "0";
                }
                updateInt(rValInt, "r");
                if (activeField == rValInt.name) {
                    activeField = "";
                }
            });
            rValInt.onTextChangedObservable.add(function () {
                if (activeField == rValInt.name) {
                    updateInt(rValInt, "r");
                }
            });
            rgbValuesQuadrant.addControl(rValInt, 0, 1);
            var gValInt = new _inputText__WEBPACK_IMPORTED_MODULE_2__.InputText();
            gValInt.width = 0.83;
            gValInt.height = 0.72;
            gValInt.name = "gIntField";
            gValInt.fontSize = buttonFontSize;
            gValInt.text = (currentColor.g * 255).toString();
            gValInt.color = inputTextColor;
            gValInt.background = inputTextBackgroundColor;
            gValInt.onFocusObservable.add(function () {
                activeField = gValInt.name;
                lastVal = gValInt.text;
                editSwatches(false);
            });
            gValInt.onBlurObservable.add(function () {
                if (gValInt.text == "") {
                    gValInt.text = "0";
                }
                updateInt(gValInt, "g");
                if (activeField == gValInt.name) {
                    activeField = "";
                }
            });
            gValInt.onTextChangedObservable.add(function () {
                if (activeField == gValInt.name) {
                    updateInt(gValInt, "g");
                }
            });
            rgbValuesQuadrant.addControl(gValInt, 1, 1);
            var bValInt = new _inputText__WEBPACK_IMPORTED_MODULE_2__.InputText();
            bValInt.width = 0.83;
            bValInt.height = 0.72;
            bValInt.name = "bIntField";
            bValInt.fontSize = buttonFontSize;
            bValInt.text = (currentColor.b * 255).toString();
            bValInt.color = inputTextColor;
            bValInt.background = inputTextBackgroundColor;
            bValInt.onFocusObservable.add(function () {
                activeField = bValInt.name;
                lastVal = bValInt.text;
                editSwatches(false);
            });
            bValInt.onBlurObservable.add(function () {
                if (bValInt.text == "") {
                    bValInt.text = "0";
                }
                updateInt(bValInt, "b");
                if (activeField == bValInt.name) {
                    activeField = "";
                }
            });
            bValInt.onTextChangedObservable.add(function () {
                if (activeField == bValInt.name) {
                    updateInt(bValInt, "b");
                }
            });
            rgbValuesQuadrant.addControl(bValInt, 2, 1);
            var rValDec = new _inputText__WEBPACK_IMPORTED_MODULE_2__.InputText();
            rValDec.width = 0.95;
            rValDec.height = 0.72;
            rValDec.name = "rDecField";
            rValDec.fontSize = buttonFontSize;
            rValDec.text = currentColor.r.toString();
            rValDec.color = inputTextColor;
            rValDec.background = inputTextBackgroundColor;
            rValDec.onFocusObservable.add(function () {
                activeField = rValDec.name;
                lastVal = rValDec.text;
                editSwatches(false);
            });
            rValDec.onBlurObservable.add(function () {
                if (parseFloat(rValDec.text) == 0 || rValDec.text == "") {
                    rValDec.text = "0";
                    updateFloat(rValDec, "r");
                }
                if (activeField == rValDec.name) {
                    activeField = "";
                }
            });
            rValDec.onTextChangedObservable.add(function () {
                if (activeField == rValDec.name) {
                    updateFloat(rValDec, "r");
                }
            });
            rgbValuesQuadrant.addControl(rValDec, 0, 2);
            var gValDec = new _inputText__WEBPACK_IMPORTED_MODULE_2__.InputText();
            gValDec.width = 0.95;
            gValDec.height = 0.72;
            gValDec.name = "gDecField";
            gValDec.fontSize = buttonFontSize;
            gValDec.text = currentColor.g.toString();
            gValDec.color = inputTextColor;
            gValDec.background = inputTextBackgroundColor;
            gValDec.onFocusObservable.add(function () {
                activeField = gValDec.name;
                lastVal = gValDec.text;
                editSwatches(false);
            });
            gValDec.onBlurObservable.add(function () {
                if (parseFloat(gValDec.text) == 0 || gValDec.text == "") {
                    gValDec.text = "0";
                    updateFloat(gValDec, "g");
                }
                if (activeField == gValDec.name) {
                    activeField = "";
                }
            });
            gValDec.onTextChangedObservable.add(function () {
                if (activeField == gValDec.name) {
                    updateFloat(gValDec, "g");
                }
            });
            rgbValuesQuadrant.addControl(gValDec, 1, 2);
            var bValDec = new _inputText__WEBPACK_IMPORTED_MODULE_2__.InputText();
            bValDec.width = 0.95;
            bValDec.height = 0.72;
            bValDec.name = "bDecField";
            bValDec.fontSize = buttonFontSize;
            bValDec.text = currentColor.b.toString();
            bValDec.color = inputTextColor;
            bValDec.background = inputTextBackgroundColor;
            bValDec.onFocusObservable.add(function () {
                activeField = bValDec.name;
                lastVal = bValDec.text;
                editSwatches(false);
            });
            bValDec.onBlurObservable.add(function () {
                if (parseFloat(bValDec.text) == 0 || bValDec.text == "") {
                    bValDec.text = "0";
                    updateFloat(bValDec, "b");
                }
                if (activeField == bValDec.name) {
                    activeField = "";
                }
            });
            bValDec.onTextChangedObservable.add(function () {
                if (activeField == bValDec.name) {
                    updateFloat(bValDec, "b");
                }
            });
            rgbValuesQuadrant.addControl(bValDec, 2, 2);
            // Hex value input
            var hexValueQuadrant = new _grid__WEBPACK_IMPORTED_MODULE_5__.Grid();
            hexValueQuadrant.name = "Hex Value";
            hexValueQuadrant.width = 0.82;
            hexValueQuadrant.addRowDefinition(1.0, false);
            hexValueQuadrant.addColumnDefinition(0.1, false);
            hexValueQuadrant.addColumnDefinition(0.9, false);
            pickerColorValues.addControl(hexValueQuadrant, 2, 0);
            var labelText = new _controls_textBlock__WEBPACK_IMPORTED_MODULE_6__.TextBlock();
            labelText.text = "#";
            labelText.color = buttonColor;
            labelText.fontSize = buttonFontSize;
            hexValueQuadrant.addControl(labelText, 0, 0);
            var hexVal = new _inputText__WEBPACK_IMPORTED_MODULE_2__.InputText();
            hexVal.width = 0.96;
            hexVal.height = 0.72;
            hexVal.name = "hexField";
            hexVal.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_CENTER;
            hexVal.fontSize = buttonFontSize;
            var minusPound = options.lastColor.split("#");
            hexVal.text = minusPound[1];
            hexVal.color = inputTextColor;
            hexVal.background = inputTextBackgroundColor;
            hexVal.onFocusObservable.add(function () {
                activeField = hexVal.name;
                lastVal = hexVal.text;
                editSwatches(false);
            });
            hexVal.onBlurObservable.add(function () {
                if (hexVal.text.length == 3) {
                    var val = hexVal.text.split("");
                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];
                }
                if (hexVal.text == "") {
                    hexVal.text = "000000";
                    updateValues(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(hexVal.text), "b");
                }
                if (activeField == hexVal.name) {
                    activeField = "";
                }
            });
            hexVal.onTextChangedObservable.add(function () {
                var newHexValue = hexVal.text;
                var checkHex = /[^0-9A-F]/i.test(newHexValue);
                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {
                    hexVal.text = lastVal;
                }
                else {
                    if (hexVal.text.length < 6) {
                        var leadingZero = 6 - hexVal.text.length;
                        for (var i = 0; i < leadingZero; i++) {
                            newHexValue = "0" + newHexValue;
                        }
                    }
                    if (hexVal.text.length == 3) {
                        var val = hexVal.text.split("");
                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];
                    }
                    newHexValue = "#" + newHexValue;
                    if (activeField == hexVal.name) {
                        lastVal = hexVal.text;
                        updateValues(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(newHexValue), hexVal.name);
                    }
                }
            });
            hexValueQuadrant.addControl(hexVal, 0, 1);
            if (options.savedColors && options.savedColors.length > 0) {
                updateSwatches("", butSave);
            }
            /**
             * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.
             * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they
             * are will receive no update. This is to prevent the input from the user being overwritten.
             * @param value
             * @param inputField
             */
            function updateValues(value, inputField) {
                activeField = inputField;
                var pickedColor = value.toHexString();
                newSwatch.background = pickedColor;
                if (rValInt.name != activeField) {
                    rValInt.text = Math.floor(value.r * 255).toString();
                }
                if (gValInt.name != activeField) {
                    gValInt.text = Math.floor(value.g * 255).toString();
                }
                if (bValInt.name != activeField) {
                    bValInt.text = Math.floor(value.b * 255).toString();
                }
                if (rValDec.name != activeField) {
                    rValDec.text = value.r.toString();
                }
                if (gValDec.name != activeField) {
                    gValDec.text = value.g.toString();
                }
                if (bValDec.name != activeField) {
                    bValDec.text = value.b.toString();
                }
                if (hexVal.name != activeField) {
                    var minusPound_1 = pickedColor.split("#");
                    hexVal.text = minusPound_1[1];
                }
                if (picker.name != activeField) {
                    picker.value = value;
                }
            }
            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.
            function updateInt(field, channel) {
                var newValue = field.text;
                var checkVal = /[^0-9]/g.test(newValue);
                if (checkVal) {
                    field.text = lastVal;
                    return;
                }
                else {
                    if (newValue != "") {
                        if (Math.floor(parseInt(newValue)) < 0) {
                            newValue = "0";
                        }
                        else if (Math.floor(parseInt(newValue)) > 255) {
                            newValue = "255";
                        }
                        else if (isNaN(parseInt(newValue))) {
                            newValue = "0";
                        }
                    }
                    if (activeField == field.name) {
                        lastVal = newValue;
                    }
                }
                if (newValue != "") {
                    newValue = parseInt(newValue).toString();
                    field.text = newValue;
                    var newSwatchRGB = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(newSwatch.background);
                    if (activeField == field.name) {
                        if (channel == "r") {
                            updateValues(new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3(parseInt(newValue) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);
                        }
                        else if (channel == "g") {
                            updateValues(new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3(newSwatchRGB.r, parseInt(newValue) / 255, newSwatchRGB.b), field.name);
                        }
                        else {
                            updateValues(new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3(newSwatchRGB.r, newSwatchRGB.g, parseInt(newValue) / 255), field.name);
                        }
                    }
                }
            }
            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.
            function updateFloat(field, channel) {
                var newValue = field.text;
                var checkVal = /[^0-9.]/g.test(newValue);
                if (checkVal) {
                    field.text = lastVal;
                    return;
                }
                else {
                    if (newValue != "" && newValue != "." && parseFloat(newValue) != 0) {
                        if (parseFloat(newValue) < 0.0) {
                            newValue = "0.0";
                        }
                        else if (parseFloat(newValue) > 1.0) {
                            newValue = "1.0";
                        }
                        else if (isNaN(parseFloat(newValue))) {
                            newValue = "0.0";
                        }
                    }
                    if (activeField == field.name) {
                        lastVal = newValue;
                    }
                }
                if (newValue != "" && newValue != "." && parseFloat(newValue) != 0) {
                    newValue = parseFloat(newValue).toString();
                    field.text = newValue;
                }
                else {
                    newValue = "0.0";
                }
                var newSwatchRGB = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(newSwatch.background);
                if (activeField == field.name) {
                    if (channel == "r") {
                        updateValues(new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);
                    }
                    else if (channel == "g") {
                        updateValues(new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);
                    }
                    else {
                        updateValues(new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);
                    }
                }
            }
            // Removes the current index from the savedColors array. Drawer can then be regenerated.
            function deleteSwatch(index) {
                if (options.savedColors) {
                    options.savedColors.splice(index, 1);
                }
                if (options.savedColors && options.savedColors.length == 0) {
                    setEditButtonVisibility(false);
                    editSwatchMode = false;
                }
            }
            // Creates and styles an individual swatch when updateSwatches is called.
            function createSwatch() {
                if (options.savedColors && options.savedColors[swatchNumber]) {
                    var icon = void 0;
                    if (editSwatchMode) {
                        icon = "b";
                    }
                    else {
                        icon = "";
                    }
                    var swatch_1 = _button__WEBPACK_IMPORTED_MODULE_4__.Button.CreateSimpleButton("Swatch_" + swatchNumber, icon);
                    swatch_1.fontFamily = "coreglyphs";
                    var swatchColor = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(options.savedColors[swatchNumber]);
                    var swatchLuminence = swatchColor.r + swatchColor.g + swatchColor.b;
                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible
                    if (swatchLuminence > luminanceLimit) {
                        swatch_1.color = iconColorDark;
                    }
                    else {
                        swatch_1.color = iconColorLight;
                    }
                    swatch_1.fontSize = Math.floor(swatchSize * 0.7);
                    swatch_1.textBlock.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_CENTER;
                    swatch_1.height = swatch_1.width = swatchSize.toString() + "px";
                    swatch_1.background = options.savedColors[swatchNumber];
                    swatch_1.thickness = 2;
                    var metadata_1 = swatchNumber;
                    swatch_1.pointerDownAnimation = function () {
                        swatch_1.thickness = 4;
                    };
                    swatch_1.pointerUpAnimation = function () {
                        swatch_1.thickness = 3;
                    };
                    swatch_1.pointerEnterAnimation = function () {
                        swatch_1.thickness = 3;
                    };
                    swatch_1.pointerOutAnimation = function () {
                        swatch_1.thickness = 2;
                    };
                    swatch_1.onPointerClickObservable.add(function () {
                        if (!editSwatchMode) {
                            if (options.savedColors) {
                                updateValues(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString(options.savedColors[metadata_1]), swatch_1.name);
                            }
                        }
                        else {
                            deleteSwatch(metadata_1);
                            updateSwatches("", butSave);
                        }
                    });
                    return swatch_1;
                }
                else {
                    return null;
                }
            }
            // Mode switch to render button text and close symbols on swatch controls
            function editSwatches(mode) {
                if (mode !== undefined) {
                    editSwatchMode = mode;
                }
                var thisButton;
                if (editSwatchMode) {
                    for (var i = 0; i < swatchDrawer.children.length; i++) {
                        thisButton = swatchDrawer.children[i];
                        thisButton.textBlock.text = "b";
                    }
                    if (butEdit !== undefined) {
                        butEdit.textBlock.text = "Done";
                    }
                }
                else {
                    for (var i = 0; i < swatchDrawer.children.length; i++) {
                        thisButton = swatchDrawer.children[i];
                        thisButton.textBlock.text = "";
                    }
                    if (butEdit !== undefined) {
                        butEdit.textBlock.text = "Edit";
                    }
                }
            }
            /**
             * When Save Color button is pressed this function will first create a swatch drawer if one is not already
             * made. Then all controls are removed from the drawer and we step through the savedColors array and
             * creates one swatch per color. It will also set the height of the drawer control based on how many
             * saved colors there are and how many can be stored per row.
             * @param color
             * @param button
             */
            function updateSwatches(color, button) {
                if (options.savedColors) {
                    if (color != "") {
                        options.savedColors.push(color);
                    }
                    swatchNumber = 0;
                    swatchDrawer.clearControls();
                    var rowCount = Math.ceil(options.savedColors.length / options.numSwatchesPerLine);
                    var gutterCount = void 0;
                    if (rowCount == 0) {
                        gutterCount = 0;
                    }
                    else {
                        gutterCount = rowCount + 1;
                    }
                    if (swatchDrawer.rowCount != rowCount + gutterCount) {
                        var currentRows = swatchDrawer.rowCount;
                        for (var i = 0; i < currentRows; i++) {
                            swatchDrawer.removeRowDefinition(0);
                        }
                        for (var i = 0; i < rowCount + gutterCount; i++) {
                            if (i % 2) {
                                swatchDrawer.addRowDefinition(swatchSize, true);
                            }
                            else {
                                swatchDrawer.addRowDefinition(gutterSize, true);
                            }
                        }
                    }
                    swatchDrawer.height = (swatchSize * rowCount + gutterCount * gutterSize).toString() + "px";
                    for (var y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {
                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors
                        var totalButtonsThisRow = void 0;
                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine) {
                            totalButtonsThisRow = options.numSwatchesPerLine;
                        }
                        else {
                            totalButtonsThisRow = options.savedColors.length - (thisRow - 1) * options.numSwatchesPerLine;
                        }
                        var buttonIterations = Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine);
                        for (var x = 0, w = 1; x < buttonIterations; x++) {
                            if (x > options.numSwatchesPerLine) {
                                continue;
                            }
                            var swatch = createSwatch();
                            if (swatch != null) {
                                swatchDrawer.addControl(swatch, y, w);
                                w += 2;
                                swatchNumber++;
                            }
                            else {
                                continue;
                            }
                        }
                    }
                    if (options.savedColors.length >= options.swatchLimit) {
                        disableButton(button, true);
                    }
                    else {
                        disableButton(button, false);
                    }
                }
            }
            // Shows or hides edit swatches button depending on if there are saved swatches
            function setEditButtonVisibility(enableButton) {
                if (enableButton) {
                    butEdit = _button__WEBPACK_IMPORTED_MODULE_4__.Button.CreateSimpleButton("butEdit", "Edit");
                    butEdit.width = buttonWidth;
                    butEdit.height = buttonHeight;
                    butEdit.left = Math.floor(parseInt(buttonWidth) * 0.1).toString() + "px";
                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + "px";
                    butEdit.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_BOTTOM;
                    butEdit.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                    butEdit.thickness = 2;
                    butEdit.color = buttonColor;
                    butEdit.fontSize = buttonFontSize;
                    butEdit.background = buttonBackgroundColor;
                    butEdit.onPointerEnterObservable.add(function () {
                        butEdit.background = buttonBackgroundHoverColor;
                    });
                    butEdit.onPointerOutObservable.add(function () {
                        butEdit.background = buttonBackgroundColor;
                    });
                    butEdit.pointerDownAnimation = function () {
                        butEdit.background = buttonBackgroundClickColor;
                    };
                    butEdit.pointerUpAnimation = function () {
                        butEdit.background = buttonBackgroundHoverColor;
                    };
                    butEdit.onPointerClickObservable.add(function () {
                        if (editSwatchMode) {
                            editSwatchMode = false;
                        }
                        else {
                            editSwatchMode = true;
                        }
                        editSwatches();
                    });
                    pickerGrid.addControl(butEdit, 1, 0);
                }
                else {
                    pickerGrid.removeControl(butEdit);
                }
            }
            // Called when the user hits the limit of saved colors in the drawer.
            function disableButton(button, disabled) {
                if (disabled) {
                    button.color = buttonDisabledColor;
                    button.background = buttonDisabledBackgroundColor;
                }
                else {
                    button.color = buttonColor;
                    button.background = buttonBackgroundColor;
                }
            }
            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture
            function closePicker(color) {
                if (options.savedColors && options.savedColors.length > 0) {
                    resolve({
                        savedColors: options.savedColors,
                        pickedColor: color,
                    });
                }
                else {
                    resolve({
                        pickedColor: color,
                    });
                }
                advancedTexture.removeControl(dialogContainer);
            }
        });
    };
    ColorPicker._Epsilon = 0.000001;
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], ColorPicker.prototype, "value", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], ColorPicker.prototype, "width", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], ColorPicker.prototype, "height", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], ColorPicker.prototype, "size", null);
    return ColorPicker;
}(_control__WEBPACK_IMPORTED_MODULE_1__.Control));
(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.ColorPicker", ColorPicker);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/container.ts":
/*!*****************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/container.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Container: () => (/* binding */ Container)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/tools */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../measure */ "../../../dev/gui/src/2D/measure.ts");
/* harmony import */ var _math2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math2D */ "../../../dev/gui/src/2D/math2D.ts");












/**
 * Root class for 2D containers
 * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#containers
 */
var Container = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(Container, _super);
    /**
     * Creates a new Container
     * @param name defines the name of the container
     */
    function Container(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        /** @internal */
        _this._children = new Array();
        /** @internal */
        _this._measureForChildren = _measure__WEBPACK_IMPORTED_MODULE_2__.Measure.Empty();
        /** @internal */
        _this._background = "";
        /** @internal */
        _this._backgroundGradient = null;
        /** @internal */
        _this._adaptWidthToChildren = false;
        /** @internal */
        _this._adaptHeightToChildren = false;
        /** @internal */
        _this._renderToIntermediateTexture = false;
        /** @internal */
        _this._intermediateTexture = null;
        /**
         * Gets or sets a boolean indicating that the container will let internal controls handle picking instead of doing it directly using its bounding info
         */
        _this.delegatePickingToChildren = false;
        /**
         * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console
         */
        _this.logLayoutCycleErrors = false;
        /**
         * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed
         */
        _this.maxLayoutCycle = 3;
        /**
         * An event triggered when any control is added to this container.
         */
        _this.onControlAddedObservable = new babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when any control is removed from this container.
         */
        _this.onControlRemovedObservable = new babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.Observable();
        _this._inverseTransformMatrix = _math2D__WEBPACK_IMPORTED_MODULE_3__.Matrix2D.Identity();
        _this._inverseMeasure = new _measure__WEBPACK_IMPORTED_MODULE_2__.Measure(0, 0, 0, 0);
        return _this;
    }
    Object.defineProperty(Container.prototype, "renderToIntermediateTexture", {
        /** Gets or sets boolean indicating if children should be rendered to an intermediate texture rather than directly to host, useful for alpha blending */
        get: function () {
            return this._renderToIntermediateTexture;
        },
        set: function (value) {
            if (this._renderToIntermediateTexture === value) {
                return;
            }
            this._renderToIntermediateTexture = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "adaptHeightToChildren", {
        /** Gets or sets a boolean indicating if the container should try to adapt to its children height */
        get: function () {
            return this._adaptHeightToChildren;
        },
        set: function (value) {
            if (this._adaptHeightToChildren === value) {
                return;
            }
            this._adaptHeightToChildren = value;
            if (value) {
                this.height = "100%";
            }
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "adaptWidthToChildren", {
        /** Gets or sets a boolean indicating if the container should try to adapt to its children width */
        get: function () {
            return this._adaptWidthToChildren;
        },
        set: function (value) {
            if (this._adaptWidthToChildren === value) {
                return;
            }
            this._adaptWidthToChildren = value;
            if (value) {
                this.width = "100%";
            }
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "background", {
        /** Gets or sets background color */
        get: function () {
            return this._background;
        },
        set: function (value) {
            if (this._background === value) {
                return;
            }
            this._background = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "backgroundGradient", {
        /** Gets or sets background gradient color. Takes precedence over background */
        get: function () {
            return this._backgroundGradient;
        },
        set: function (value) {
            if (this._backgroundGradient === value) {
                return;
            }
            this._backgroundGradient = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "children", {
        /** Gets the list of children */
        get: function () {
            return this._children;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "isReadOnly", {
        get: function () {
            return this._isReadOnly;
        },
        set: function (value) {
            this._isReadOnly = value;
            for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                var child = _a[_i];
                child.isReadOnly = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Container.prototype._getTypeName = function () {
        return "Container";
    };
    Container.prototype._flagDescendantsAsMatrixDirty = function () {
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            child._isClipped = false;
            child._markMatrixAsDirty();
        }
    };
    /**
     * Gets a child using its name
     * @param name defines the child name to look for
     * @returns the child control if found
     */
    Container.prototype.getChildByName = function (name) {
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (child.name === name) {
                return child;
            }
        }
        return null;
    };
    /**
     * Gets a child using its type and its name
     * @param name defines the child name to look for
     * @param type defines the child type to look for
     * @returns the child control if found
     */
    Container.prototype.getChildByType = function (name, type) {
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (child.typeName === type) {
                return child;
            }
        }
        return null;
    };
    /**
     * Search for a specific control in children
     * @param control defines the control to look for
     * @returns true if the control is in child list
     */
    Container.prototype.containsControl = function (control) {
        return this.children.indexOf(control) !== -1;
    };
    /**
     * Adds a new control to the current container
     * @param control defines the control to add
     * @returns the current container
     */
    Container.prototype.addControl = function (control) {
        if (!control) {
            return this;
        }
        var index = this._children.indexOf(control);
        if (index !== -1) {
            return this;
        }
        control._link(this._host);
        control._markAllAsDirty();
        this._reOrderControl(control);
        this._markAsDirty();
        this.onControlAddedObservable.notifyObservers(control);
        return this;
    };
    /**
     * Removes all controls from the current container
     * @returns the current container
     */
    Container.prototype.clearControls = function () {
        var children = this.children.slice();
        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
            var child = children_1[_i];
            this.removeControl(child);
        }
        return this;
    };
    /**
     * Removes a control from the current container
     * @param control defines the control to remove
     * @returns the current container
     */
    Container.prototype.removeControl = function (control) {
        var index = this._children.indexOf(control);
        if (index !== -1) {
            this._children.splice(index, 1);
            control.parent = null;
        }
        control.linkWithMesh(null);
        if (this._host) {
            this._host._cleanControlAfterRemoval(control);
        }
        this._markAsDirty();
        this.onControlRemovedObservable.notifyObservers(control);
        return this;
    };
    /**
     * @internal
     */
    Container.prototype._reOrderControl = function (control) {
        var linkedMesh = control.linkedMesh;
        this.removeControl(control);
        var wasAdded = false;
        for (var index = 0; index < this._children.length; index++) {
            if (this._children[index].zIndex > control.zIndex) {
                this._children.splice(index, 0, control);
                wasAdded = true;
                break;
            }
        }
        if (!wasAdded) {
            this._children.push(control);
        }
        control.parent = this;
        if (linkedMesh) {
            control.linkWithMesh(linkedMesh);
        }
        this._markAsDirty();
    };
    /**
     * @internal
     */
    Container.prototype._offsetLeft = function (offset) {
        _super.prototype._offsetLeft.call(this, offset);
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            child._offsetLeft(offset);
        }
    };
    /**
     * @internal
     */
    Container.prototype._offsetTop = function (offset) {
        _super.prototype._offsetTop.call(this, offset);
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            child._offsetTop(offset);
        }
    };
    /** @internal */
    Container.prototype._markAllAsDirty = function () {
        _super.prototype._markAllAsDirty.call(this);
        for (var index = 0; index < this._children.length; index++) {
            this._children[index]._markAllAsDirty();
        }
    };
    Container.prototype._getBackgroundColor = function (context) {
        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;
    };
    /**
     * @internal
     */
    Container.prototype._localDraw = function (context) {
        if (this._background || this._backgroundGradient) {
            context.save();
            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                context.shadowColor = this.shadowColor;
                context.shadowBlur = this.shadowBlur;
                context.shadowOffsetX = this.shadowOffsetX;
                context.shadowOffsetY = this.shadowOffsetY;
            }
            context.fillStyle = this._getBackgroundColor(context);
            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
            context.restore();
        }
    };
    /**
     * @internal
     */
    Container.prototype._link = function (host) {
        _super.prototype._link.call(this, host);
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            child._link(host);
        }
    };
    /** @internal */
    Container.prototype._beforeLayout = function () {
        // Do nothing
    };
    /**
     * @internal
     */
    Container.prototype._processMeasures = function (parentMeasure, context) {
        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {
            _super.prototype._processMeasures.call(this, parentMeasure, context);
            this._evaluateClippingState(parentMeasure);
            if (this._renderToIntermediateTexture) {
                if (this._intermediateTexture && this._host.getScene() != this._intermediateTexture.getScene()) {
                    this._intermediateTexture.dispose();
                    this._intermediateTexture = null;
                }
                if (!this._intermediateTexture) {
                    this._intermediateTexture = new babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.DynamicTexture("", { width: this._currentMeasure.width, height: this._currentMeasure.height }, this._host.getScene(), false, babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.Texture.NEAREST_SAMPLINGMODE, babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.Constants.TEXTUREFORMAT_RGBA, false);
                    this._intermediateTexture.hasAlpha = true;
                }
                else {
                    this._intermediateTexture.scaleTo(this._currentMeasure.width, this._currentMeasure.height);
                }
            }
        }
    };
    /**
     * @internal
     */
    Container.prototype._layout = function (parentMeasure, context) {
        var _a, _b;
        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {
            return false;
        }
        this.host._numLayoutCalls++;
        if (this._isDirty) {
            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);
        }
        var rebuildCount = 0;
        context.save();
        this._applyStates(context);
        this._beforeLayout();
        do {
            var computedWidth = -1;
            var computedHeight = -1;
            this._rebuildLayout = false;
            this._processMeasures(parentMeasure, context);
            if (!this._isClipped) {
                for (var _i = 0, _c = this._children; _i < _c.length; _i++) {
                    var child = _c[_i];
                    child._tempParentMeasure.copyFrom(this._measureForChildren);
                    if (child._layout(this._measureForChildren, context)) {
                        if (child.isVisible && !child.notRenderable) {
                            if (this.adaptWidthToChildren && child._width.isPixel) {
                                computedWidth = Math.max(computedWidth, child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels);
                            }
                            if (this.adaptHeightToChildren && child._height.isPixel) {
                                computedHeight = Math.max(computedHeight, child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels);
                            }
                        }
                    }
                }
                if (this.adaptWidthToChildren && computedWidth >= 0) {
                    computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;
                    if (this.width !== computedWidth + "px") {
                        (_a = this.parent) === null || _a === void 0 ? void 0 : _a._markAsDirty();
                        this.width = computedWidth + "px";
                        this._width.ignoreAdaptiveScaling = true;
                        this._rebuildLayout = true;
                    }
                }
                if (this.adaptHeightToChildren && computedHeight >= 0) {
                    computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;
                    if (this.height !== computedHeight + "px") {
                        (_b = this.parent) === null || _b === void 0 ? void 0 : _b._markAsDirty();
                        this.height = computedHeight + "px";
                        this._height.ignoreAdaptiveScaling = true;
                        this._rebuildLayout = true;
                    }
                }
                this._postMeasure();
            }
            rebuildCount++;
        } while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);
        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {
            babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error("Layout cycle detected in GUI (Container name=".concat(this.name, ", uniqueId=").concat(this.uniqueId, ")"));
        }
        context.restore();
        if (this._isDirty) {
            this.invalidateRect();
            this._isDirty = false;
        }
        return true;
    };
    Container.prototype._postMeasure = function () {
        // Do nothing by default
    };
    /**
     * @internal
     */
    Container.prototype._draw = function (context, invalidatedRectangle) {
        var renderToIntermediateTextureThisDraw = this._renderToIntermediateTexture && this._intermediateTexture;
        var contextToDrawTo = renderToIntermediateTextureThisDraw ? this._intermediateTexture.getContext() : context;
        if (renderToIntermediateTextureThisDraw) {
            contextToDrawTo.save();
            contextToDrawTo.translate(-this._currentMeasure.left, -this._currentMeasure.top);
            if (invalidatedRectangle) {
                this._transformMatrix.invertToRef(this._inverseTransformMatrix);
                invalidatedRectangle.transformToRef(this._inverseTransformMatrix, this._inverseMeasure);
                contextToDrawTo.clearRect(this._inverseMeasure.left, this._inverseMeasure.top, this._inverseMeasure.width, this._inverseMeasure.height);
            }
            else {
                contextToDrawTo.clearRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
            }
        }
        this._localDraw(contextToDrawTo);
        context.save();
        if (this.clipChildren) {
            this._clipForChildren(contextToDrawTo);
        }
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            // Only redraw parts of the screen that are invalidated
            if (invalidatedRectangle) {
                if (!child._intersectsRect(invalidatedRectangle)) {
                    continue;
                }
            }
            child._render(contextToDrawTo, invalidatedRectangle);
        }
        if (renderToIntermediateTextureThisDraw) {
            contextToDrawTo.restore();
            context.save();
            context.globalAlpha = this.alpha;
            context.drawImage(contextToDrawTo.canvas, this._currentMeasure.left, this._currentMeasure.top);
            context.restore();
        }
        context.restore();
    };
    Container.prototype.getDescendantsToRef = function (results, directDescendantsOnly, predicate) {
        if (directDescendantsOnly === void 0) { directDescendantsOnly = false; }
        if (!this.children) {
            return;
        }
        for (var index = 0; index < this.children.length; index++) {
            var item = this.children[index];
            if (!predicate || predicate(item)) {
                results.push(item);
            }
            if (!directDescendantsOnly) {
                item.getDescendantsToRef(results, false, predicate);
            }
        }
    };
    /**
     * @internal
     */
    Container.prototype._processPicking = function (x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
        if (!this._isEnabled || !this.isVisible || this.notRenderable) {
            return false;
        }
        // checks if the picking position is within the container
        var contains = _super.prototype.contains.call(this, x, y);
        // if clipChildren is off, we should still pass picking events to children even if we don't contain the pointer
        if (!contains && this.clipChildren) {
            return false;
        }
        if (this.delegatePickingToChildren) {
            var contains_1 = false;
            for (var index = this._children.length - 1; index >= 0; index--) {
                var child = this._children[index];
                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {
                    contains_1 = true;
                    break;
                }
            }
            if (!contains_1) {
                return false;
            }
        }
        // Checking backwards to pick closest first
        for (var index = this._children.length - 1; index >= 0; index--) {
            var child = this._children[index];
            if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {
                if (child.hoverCursor) {
                    this._host._changeCursor(child.hoverCursor);
                }
                return true;
            }
        }
        if (!contains) {
            return false;
        }
        if (!this.isHitTestVisible) {
            return false;
        }
        return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);
    };
    /**
     * @internal
     */
    Container.prototype._additionalProcessing = function (parentMeasure, context) {
        _super.prototype._additionalProcessing.call(this, parentMeasure, context);
        this._measureForChildren.copyFrom(this._currentMeasure);
    };
    Container.prototype._getAdaptDimTo = function (dim) {
        if (dim === "width") {
            return this.adaptWidthToChildren;
        }
        else {
            return this.adaptHeightToChildren;
        }
    };
    Container.prototype.isDimensionFullyDefined = function (dim) {
        if (this._getAdaptDimTo(dim)) {
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var child = _a[_i];
                if (!child.isDimensionFullyDefined(dim)) {
                    return false;
                }
            }
            return true;
        }
        return _super.prototype.isDimensionFullyDefined.call(this, dim);
    };
    /**
     * Serializes the current control
     * @param serializationObject defined the JSON serialized object
     * @param force force serialization even if isSerializable === false
     * @param allowCanvas defines if the control is allowed to use a Canvas2D object to serialize (true by default)
     */
    Container.prototype.serialize = function (serializationObject, force, allowCanvas) {
        if (force === void 0) { force = false; }
        if (allowCanvas === void 0) { allowCanvas = true; }
        _super.prototype.serialize.call(this, serializationObject, force, allowCanvas);
        if (!this.isSerializable && !force) {
            return;
        }
        if (this.backgroundGradient) {
            serializationObject.backgroundGradient = {};
            this.backgroundGradient.serialize(serializationObject.backgroundGradient);
        }
        if (!this.children.length) {
            return;
        }
        serializationObject.children = [];
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (child.isSerializable || force) {
                var childSerializationObject = {};
                child.serialize(childSerializationObject, force, allowCanvas);
                serializationObject.children.push(childSerializationObject);
            }
        }
    };
    /** Releases associated resources */
    Container.prototype.dispose = function () {
        var _a;
        _super.prototype.dispose.call(this);
        for (var index = this.children.length - 1; index >= 0; index--) {
            this.children[index].dispose();
        }
        (_a = this._intermediateTexture) === null || _a === void 0 ? void 0 : _a.dispose();
    };
    /**
     * @internal
     */
    Container.prototype._parseFromContent = function (serializedObject, host, urlRewriter) {
        var _a;
        _super.prototype._parseFromContent.call(this, serializedObject, host, urlRewriter);
        this._link(host);
        // Gradient
        if (serializedObject.backgroundGradient) {
            var className = babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.Tools.Instantiate("BABYLON.GUI." + serializedObject.backgroundGradient.className);
            this._backgroundGradient = new className();
            (_a = this._backgroundGradient) === null || _a === void 0 ? void 0 : _a.parse(serializedObject.backgroundGradient);
        }
        if (!serializedObject.children) {
            return;
        }
        for (var _i = 0, _b = serializedObject.children; _i < _b.length; _i++) {
            var childData = _b[_i];
            this.addControl(_control__WEBPACK_IMPORTED_MODULE_1__.Control.Parse(childData, host, urlRewriter));
        }
    };
    Container.prototype.isReady = function () {
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (!child.isReady()) {
                return false;
            }
        }
        return true;
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Container.prototype, "delegatePickingToChildren", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Container.prototype, "renderToIntermediateTexture", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Container.prototype, "maxLayoutCycle", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Container.prototype, "adaptHeightToChildren", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Container.prototype, "adaptWidthToChildren", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Container.prototype, "background", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Container.prototype, "backgroundGradient", null);
    return Container;
}(_control__WEBPACK_IMPORTED_MODULE_1__.Control));
(0,babylonjs_Misc_logger__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.Container", Container);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/control.ts":
/*!***************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/control.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Control: () => (/* binding */ Control)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/engineStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../measure */ "../../../dev/gui/src/2D/measure.ts");
/* harmony import */ var _math2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math2D */ "../../../dev/gui/src/2D/math2D.ts");













/**
 * Root class used for all 2D controls
 * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls
 */
var Control = /** @class */ (function () {
    // Functions
    /**
     * Creates a new control
     * @param name defines the name of the control
     */
    function Control(
    /** defines the name of the control */
    name) {
        this.name = name;
        this._alpha = 1;
        this._alphaSet = false;
        this._zIndex = 0;
        /** @internal */
        this._currentMeasure = _measure__WEBPACK_IMPORTED_MODULE_2__.Measure.Empty();
        /** @internal */
        this._tempPaddingMeasure = _measure__WEBPACK_IMPORTED_MODULE_2__.Measure.Empty();
        this._fontFamily = "";
        this._fontStyle = "";
        this._fontWeight = "";
        this._fontSize = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(18, _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PIXEL, false);
        /** @internal */
        this._width = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(1, _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PERCENTAGE, false);
        /** @internal */
        this._height = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(1, _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PERCENTAGE, false);
        this._color = "";
        this._style = null;
        /** @internal */
        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;
        /** @internal */
        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;
        /** @internal */
        this._isDirty = true;
        /** @internal */
        this._wasDirty = false;
        /** @internal */
        this._tempParentMeasure = _measure__WEBPACK_IMPORTED_MODULE_2__.Measure.Empty();
        /** @internal */
        this._prevCurrentMeasureTransformedIntoGlobalSpace = _measure__WEBPACK_IMPORTED_MODULE_2__.Measure.Empty();
        /** @internal */
        this._cachedParentMeasure = _measure__WEBPACK_IMPORTED_MODULE_2__.Measure.Empty();
        this._descendantsOnlyPadding = false;
        this._paddingLeft = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        this._paddingRight = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        this._paddingTop = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        this._paddingBottom = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        /** @internal */
        this._left = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        /** @internal */
        this._top = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        this._scaleX = 1.0;
        this._scaleY = 1.0;
        this._rotation = 0;
        this._transformCenterX = 0.5;
        this._transformCenterY = 0.5;
        /** @internal */
        this._transformMatrix = _math2D__WEBPACK_IMPORTED_MODULE_3__.Matrix2D.Identity();
        /** @internal */
        this._invertTransformMatrix = _math2D__WEBPACK_IMPORTED_MODULE_3__.Matrix2D.Identity();
        /** @internal */
        this._transformedPosition = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2.Zero();
        this._isMatrixDirty = true;
        this._isVisible = true;
        this._isHighlighted = false;
        this._highlightColor = "#4affff";
        this._highlightLineWidth = 2;
        this._fontSet = false;
        this._dummyVector2 = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2.Zero();
        this._downCount = 0;
        this._enterCount = -1;
        this._doNotRender = false;
        this._downPointerIds = {};
        this._evaluatedMeasure = new _measure__WEBPACK_IMPORTED_MODULE_2__.Measure(0, 0, 0, 0);
        this._evaluatedParentMeasure = new _measure__WEBPACK_IMPORTED_MODULE_2__.Measure(0, 0, 0, 0);
        this._isEnabled = true;
        this._disabledColor = "#9a9a9a";
        this._disabledColorItem = "#6a6a6a";
        this._isReadOnly = false;
        this._gradient = null;
        /** @internal */
        this._rebuildLayout = false;
        /**
         * Observable that fires when the control's enabled state changes
         */
        this.onEnabledStateChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /** @internal */
        this._customData = {};
        /** @internal */
        this._isClipped = false;
        /** @internal */
        this._automaticSize = false;
        /**
         * Gets or sets an object used to store user defined information for the node
         */
        this.metadata = null;
        /** Gets or sets a boolean indicating if the control can be hit with pointer events */
        this.isHitTestVisible = true;
        /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:
         * * Button controls (Button, RadioButton, ToggleButton)
         * * Checkbox
         * * ColorPicker
         * * InputText
         * * Slider
         */
        this.isPointerBlocker = false;
        /** Gets or sets a boolean indicating if the control can be focusable */
        this.isFocusInvisible = false;
        this._clipChildren = true;
        this._clipContent = true;
        /**
         * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)
         */
        this.useBitmapCache = false;
        this._shadowOffsetX = 0;
        this._shadowOffsetY = 0;
        this._shadowBlur = 0;
        this._previousShadowBlur = 0;
        this._shadowColor = "black";
        /** Gets or sets the cursor to use when the control is hovered */
        this.hoverCursor = "";
        /** @internal */
        this._linkOffsetX = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        /** @internal */
        this._linkOffsetY = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        this._accessibilityTag = null;
        /**
         * Observable that fires whenever the accessibility event of the control has changed
         */
        this.onAccessibilityTagChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when pointer wheel is scrolled
         */
        this.onWheelObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when the pointer moves over the control.
         */
        this.onPointerMoveObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when the pointer moves out of the control.
         */
        this.onPointerOutObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when the pointer taps the control
         */
        this.onPointerDownObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when pointer up
         */
        this.onPointerUpObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when a control is clicked on
         */
        this.onPointerClickObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when a control receives an ENTER key down event
         */
        this.onEnterPressedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when pointer enters the control
         */
        this.onPointerEnterObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when the control is marked as dirty
         */
        this.onDirtyObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered before drawing the control
         */
        this.onBeforeDrawObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered after the control was drawn
         */
        this.onAfterDrawObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when the control has been disposed
         */
        this.onDisposeObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when the control isVisible is changed
         */
        this.onIsVisibleChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Indicates if the control should be serialized. Defaults to true.
         */
        this.isSerializable = true;
        this._fixedRatio = 0;
        this._fixedRatioMasterIsWidth = true;
        /**
         * Array of animations
         */
        this.animations = null;
        // Focus functionality
        this._focusedColor = null;
        /**
         * The tab index of this control. -1 indicates this control is not part of the tab navigation.
         * A positive value indicates the order of the control in the tab navigation.
         * A value of 0 indicated the control will be focused after all controls with a positive index.
         * More than one control can have the same tab index and the navigation would then go through all controls with the same value in an order defined by the layout or the hierarchy.
         * The value can be changed at any time.
         * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
         */
        this.tabIndex = -1;
        this._isFocused = false;
        this._unfocusedColor = null;
        /** Observable raised when the control gets the focus */
        this.onFocusObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /** Observable raised when the control loses the focus */
        this.onBlurObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /** Observable raised when a key event was processed */
        this.onKeyboardEventProcessedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        this._tmpMeasureA = new _measure__WEBPACK_IMPORTED_MODULE_2__.Measure(0, 0, 0, 0);
    }
    Object.defineProperty(Control.prototype, "isReadOnly", {
        /**
         * Gets or sets a boolean indicating if the control is readonly (default: false).
         * A readonly control will still raise pointer events but will not react to them
         */
        get: function () {
            return this._isReadOnly;
        },
        set: function (value) {
            this._isReadOnly = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "transformedMeasure", {
        /**
         * Gets the transformed measure, that is the bounding box of the control after applying all transformations
         */
        get: function () {
            return this._evaluatedMeasure;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "clipChildren", {
        get: function () {
            return this._clipChildren;
        },
        /**
         * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.
         * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children
         */
        set: function (value) {
            this._clipChildren = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "clipContent", {
        get: function () {
            return this._clipContent;
        },
        /**
         * Sets/Gets a boolean indicating that control content must be clipped
         * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children
         */
        set: function (value) {
            this._clipContent = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "shadowOffsetX", {
        /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */
        get: function () {
            return this._shadowOffsetX;
        },
        set: function (value) {
            if (this._shadowOffsetX === value) {
                return;
            }
            this._shadowOffsetX = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "shadowOffsetY", {
        /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */
        get: function () {
            return this._shadowOffsetY;
        },
        set: function (value) {
            if (this._shadowOffsetY === value) {
                return;
            }
            this._shadowOffsetY = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "shadowBlur", {
        /** Gets or sets a value indicating the amount of blur to use to render the shadow */
        get: function () {
            return this._shadowBlur;
        },
        set: function (value) {
            if (this._shadowBlur === value) {
                return;
            }
            this._previousShadowBlur = this._shadowBlur;
            this._shadowBlur = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "shadowColor", {
        /** Gets or sets a value indicating the color of the shadow (black by default ie. "#000") */
        get: function () {
            return this._shadowColor;
        },
        set: function (value) {
            if (this._shadowColor === value) {
                return;
            }
            this._shadowColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "typeName", {
        // Properties
        /** Gets the control type name */
        get: function () {
            return this._getTypeName();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get the current class name of the control.
     * @returns current class name
     */
    Control.prototype.getClassName = function () {
        return this._getTypeName();
    };
    Object.defineProperty(Control.prototype, "accessibilityTag", {
        get: function () {
            return this._accessibilityTag;
        },
        /**
         * Gets or sets the accessibility tag to describe the control for accessibility purpose.
         * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.
         */
        set: function (value) {
            this._accessibilityTag = value;
            this.onAccessibilityTagChangedObservable.notifyObservers(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "host", {
        /**
         * Get the hosting AdvancedDynamicTexture
         */
        get: function () {
            return this._host;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "fontOffset", {
        /** Gets or set information about font offsets (used to render and align text) */
        get: function () {
            return this._fontOffset;
        },
        set: function (offset) {
            this._fontOffset = offset;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "alpha", {
        /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */
        get: function () {
            return this._alpha;
        },
        set: function (value) {
            if (this._alpha === value) {
                return;
            }
            this._alphaSet = true;
            this._alpha = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "highlightLineWidth", {
        /**
         * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)
         */
        get: function () {
            return this._highlightLineWidth;
        },
        set: function (value) {
            if (this._highlightLineWidth === value) {
                return;
            }
            this._highlightLineWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "isHighlighted", {
        /**
         * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)
         */
        get: function () {
            return this._isHighlighted;
        },
        set: function (value) {
            if (this._isHighlighted === value) {
                return;
            }
            this._isHighlighted = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "highlightColor", {
        /**
         * Gets or sets a string defining the color to use for highlighting this control
         */
        get: function () {
            return this._highlightColor;
        },
        set: function (value) {
            if (this._highlightColor === value) {
                return;
            }
            this._highlightColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "scaleX", {
        /** Gets or sets a value indicating the scale factor on X axis (1 by default)
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
         */
        get: function () {
            return this._scaleX;
        },
        set: function (value) {
            if (this._scaleX === value) {
                return;
            }
            this._scaleX = value;
            this._markAsDirty();
            this._markMatrixAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "scaleY", {
        /** Gets or sets a value indicating the scale factor on Y axis (1 by default)
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
         */
        get: function () {
            return this._scaleY;
        },
        set: function (value) {
            if (this._scaleY === value) {
                return;
            }
            this._scaleY = value;
            this._markAsDirty();
            this._markMatrixAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "rotation", {
        /** Gets or sets the rotation angle (0 by default)
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
         */
        get: function () {
            return this._rotation;
        },
        set: function (value) {
            if (this._rotation === value) {
                return;
            }
            this._rotation = value;
            this._markAsDirty();
            this._markMatrixAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "transformCenterY", {
        /** Gets or sets the transformation center on Y axis (0 by default)
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
         */
        get: function () {
            return this._transformCenterY;
        },
        set: function (value) {
            if (this._transformCenterY === value) {
                return;
            }
            this._transformCenterY = value;
            this._markAsDirty();
            this._markMatrixAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "transformCenterX", {
        /** Gets or sets the transformation center on X axis (0 by default)
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling
         */
        get: function () {
            return this._transformCenterX;
        },
        set: function (value) {
            if (this._transformCenterX === value) {
                return;
            }
            this._transformCenterX = value;
            this._markAsDirty();
            this._markMatrixAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "horizontalAlignment", {
        /**
         * Gets or sets the horizontal alignment
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments
         */
        get: function () {
            return this._horizontalAlignment;
        },
        set: function (value) {
            if (this._horizontalAlignment === value) {
                return;
            }
            this._horizontalAlignment = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "verticalAlignment", {
        /**
         * Gets or sets the vertical alignment
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments
         */
        get: function () {
            return this._verticalAlignment;
        },
        set: function (value) {
            if (this._verticalAlignment === value) {
                return;
            }
            this._verticalAlignment = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "fixedRatio", {
        /**
         * Gets or sets a fixed ratio for this control.
         * When different from 0, the ratio is used to compute the "second" dimension.
         * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the
         * second dimension is computed as first dimension * fixedRatio
         */
        get: function () {
            return this._fixedRatio;
        },
        set: function (value) {
            if (this._fixedRatio === value) {
                return;
            }
            this._fixedRatio = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "fixedRatioMasterIsWidth", {
        /**
         * Gets or sets a boolean indicating that the fixed ratio is set on the width instead of the height. True by default.
         * When the height of a control is set, this property is changed to false.
         */
        get: function () {
            return this._fixedRatioMasterIsWidth;
        },
        set: function (value) {
            if (this._fixedRatioMasterIsWidth === value) {
                return;
            }
            this._fixedRatioMasterIsWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "width", {
        /**
         * Gets or sets control width
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._width.toString(this._host);
        },
        set: function (value) {
            this._fixedRatioMasterIsWidth = true;
            if (this._width.toString(this._host) === value) {
                return;
            }
            if (this._width.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "widthInPixels", {
        /**
         * Gets or sets the control width in pixel
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this._fixedRatioMasterIsWidth = true;
            this.width = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "height", {
        /**
         * Gets or sets control height
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._height.toString(this._host);
        },
        set: function (value) {
            this._fixedRatioMasterIsWidth = false;
            if (this._height.toString(this._host) === value) {
                return;
            }
            if (this._height.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "heightInPixels", {
        /**
         * Gets or sets control height in pixel
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this._fixedRatioMasterIsWidth = false;
            this.height = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "fontFamily", {
        /** Gets or set font family */
        get: function () {
            return this._fontFamily;
        },
        set: function (value) {
            if (this._fontFamily === value) {
                return;
            }
            this._fontFamily = value;
            this._resetFontCache();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "fontStyle", {
        /** Gets or sets font style */
        get: function () {
            return this._fontStyle;
        },
        set: function (value) {
            if (this._fontStyle === value) {
                return;
            }
            this._fontStyle = value;
            this._resetFontCache();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "fontWeight", {
        /** Gets or sets font weight */
        get: function () {
            return this._fontWeight;
        },
        set: function (value) {
            if (this._fontWeight === value) {
                return;
            }
            this._fontWeight = value;
            this._resetFontCache();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "style", {
        /**
         * Gets or sets style
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles
         */
        get: function () {
            return this._style;
        },
        set: function (value) {
            var _this = this;
            if (this._style) {
                this._style.onChangedObservable.remove(this._styleObserver);
                this._styleObserver = null;
            }
            this._style = value;
            if (this._style) {
                this._styleObserver = this._style.onChangedObservable.add(function () {
                    _this._markAsDirty();
                    _this._resetFontCache();
                });
            }
            this._markAsDirty();
            this._resetFontCache();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "_isFontSizeInPercentage", {
        /** @internal */
        get: function () {
            return this._fontSize.isPercentage;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "fontSizeInPixels", {
        /** Gets or sets font size in pixels */
        get: function () {
            var fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;
            if (fontSizeToUse.isPixel) {
                return fontSizeToUse.getValue(this._host);
            }
            return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this.fontSize = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "fontSize", {
        /** Gets or sets font size */
        get: function () {
            return this._fontSize.toString(this._host);
        },
        set: function (value) {
            if (this._fontSize.toString(this._host) === value) {
                return;
            }
            if (this._fontSize.fromString(value)) {
                this._markAsDirty();
                this._resetFontCache();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "color", {
        /** Gets or sets foreground color */
        get: function () {
            return this._color;
        },
        set: function (value) {
            if (this._color === value) {
                return;
            }
            this._color = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "gradient", {
        /** Gets or sets gradient. Setting a gradient will override the color */
        get: function () {
            return this._gradient;
        },
        set: function (value) {
            if (this._gradient === value) {
                return;
            }
            this._gradient = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "zIndex", {
        /** Gets or sets z index which is used to reorder controls on the z axis */
        get: function () {
            return this._zIndex;
        },
        set: function (value) {
            if (this.zIndex === value) {
                return;
            }
            this._zIndex = value;
            if (this.parent) {
                this.parent._reOrderControl(this);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "notRenderable", {
        /** Gets or sets a boolean indicating if the control can be rendered */
        get: function () {
            return this._doNotRender;
        },
        set: function (value) {
            if (this._doNotRender === value) {
                return;
            }
            this._doNotRender = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "isVisible", {
        /** Gets or sets a boolean indicating if the control is visible */
        get: function () {
            return this._isVisible;
        },
        set: function (value) {
            if (this._isVisible === value) {
                return;
            }
            this._isVisible = value;
            this._markAsDirty(true);
            this.onIsVisibleChangedObservable.notifyObservers(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "isDirty", {
        /** Gets a boolean indicating that the control needs to update its rendering */
        get: function () {
            return this._isDirty;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "linkedMesh", {
        /**
         * Gets the current linked mesh (or null if none)
         */
        get: function () {
            return this._linkedMesh;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "descendantsOnlyPadding", {
        /**
         * Gets or sets a value indicating the padding should work like in CSS.
         * Basically, it will add the padding amount on each side of the parent control for its children.
         */
        get: function () {
            return this._descendantsOnlyPadding;
        },
        set: function (value) {
            if (this._descendantsOnlyPadding === value) {
                return;
            }
            this._descendantsOnlyPadding = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "paddingLeft", {
        /**
         * Gets or sets a value indicating the padding to use on the left of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._paddingLeft.toString(this._host);
        },
        set: function (value) {
            if (this._paddingLeft.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "paddingLeftInPixels", {
        /**
         * Gets or sets a value indicating the padding in pixels to use on the left of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this.paddingLeft = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "_paddingLeftInPixels", {
        /** @internal */
        get: function () {
            if (this._descendantsOnlyPadding) {
                return 0;
            }
            return this.paddingLeftInPixels;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "paddingRight", {
        /**
         * Gets or sets a value indicating the padding to use on the right of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._paddingRight.toString(this._host);
        },
        set: function (value) {
            if (this._paddingRight.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "paddingRightInPixels", {
        /**
         * Gets or sets a value indicating the padding in pixels to use on the right of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this.paddingRight = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "_paddingRightInPixels", {
        /** @internal */
        get: function () {
            if (this._descendantsOnlyPadding) {
                return 0;
            }
            return this.paddingRightInPixels;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "paddingTop", {
        /**
         * Gets or sets a value indicating the padding to use on the top of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._paddingTop.toString(this._host);
        },
        set: function (value) {
            if (this._paddingTop.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "paddingTopInPixels", {
        /**
         * Gets or sets a value indicating the padding in pixels to use on the top of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this.paddingTop = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "_paddingTopInPixels", {
        /** @internal */
        get: function () {
            if (this._descendantsOnlyPadding) {
                return 0;
            }
            return this.paddingTopInPixels;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "paddingBottom", {
        /**
         * Gets or sets a value indicating the padding to use on the bottom of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._paddingBottom.toString(this._host);
        },
        set: function (value) {
            if (this._paddingBottom.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "paddingBottomInPixels", {
        /**
         * Gets or sets a value indicating the padding in pixels to use on the bottom of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this.paddingBottom = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "_paddingBottomInPixels", {
        /** @internal */
        get: function () {
            if (this._descendantsOnlyPadding) {
                return 0;
            }
            return this.paddingBottomInPixels;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "left", {
        /**
         * Gets or sets a value indicating the left coordinate of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._left.toString(this._host);
        },
        set: function (value) {
            if (this._left.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "leftInPixels", {
        /**
         * Gets or sets a value indicating the left coordinate in pixels of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this.left = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "top", {
        /**
         * Gets or sets a value indicating the top coordinate of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._top.toString(this._host);
        },
        set: function (value) {
            if (this._top.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "topInPixels", {
        /**
         * Gets or sets a value indicating the top coordinate in pixels of the control
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
         */
        get: function () {
            return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this.top = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "linkOffsetX", {
        /**
         * Gets or sets a value indicating the offset on X axis to the linked mesh
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions
         */
        get: function () {
            return this._linkOffsetX.toString(this._host);
        },
        set: function (value) {
            if (this._linkOffsetX.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "linkOffsetXInPixels", {
        /**
         * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions
         */
        get: function () {
            return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this.linkOffsetX = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "linkOffsetY", {
        /**
         * Gets or sets a value indicating the offset on Y axis to the linked mesh
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions
         */
        get: function () {
            return this._linkOffsetY.toString(this._host);
        },
        set: function (value) {
            if (this._linkOffsetY.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "linkOffsetYInPixels", {
        /**
         * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions
         */
        get: function () {
            return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);
        },
        set: function (value) {
            if (isNaN(value)) {
                return;
            }
            this.linkOffsetY = value + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "centerX", {
        /** Gets the center coordinate on X axis */
        get: function () {
            return this._currentMeasure.left + this._currentMeasure.width / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "centerY", {
        /** Gets the center coordinate on Y axis */
        get: function () {
            return this._currentMeasure.top + this._currentMeasure.height / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "isEnabled", {
        /** Gets or sets if control is Enabled */
        get: function () {
            return this._isEnabled;
        },
        set: function (value) {
            var _this = this;
            if (this._isEnabled === value) {
                return;
            }
            this._isEnabled = value;
            this._markAsDirty();
            // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event
            var recursivelyFirePointerOut = function (control) {
                if (!control.host) {
                    return;
                }
                for (var pointer in control.host._lastControlOver) {
                    if (control === _this.host._lastControlOver[pointer]) {
                        control._onPointerOut(control, null, true);
                        delete control.host._lastControlOver[pointer];
                    }
                }
                if (control.children !== undefined) {
                    control.children.forEach(recursivelyFirePointerOut);
                }
            };
            recursivelyFirePointerOut(this);
            this.onEnabledStateChangedObservable.notifyObservers(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "disabledColor", {
        /** Gets or sets background color of control if it's disabled. Only applies to Button class. */
        get: function () {
            return this._disabledColor;
        },
        set: function (value) {
            if (this._disabledColor === value) {
                return;
            }
            this._disabledColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "disabledColorItem", {
        /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */
        get: function () {
            return this._disabledColorItem;
        },
        set: function (value) {
            if (this._disabledColorItem === value) {
                return;
            }
            this._disabledColorItem = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control.prototype, "focusedColor", {
        /**
         * Border color when control is focused
         * When not defined the ADT color will be used. If no ADT color is defined, focused state won't have any border
         */
        get: function () {
            return this._focusedColor;
        },
        set: function (value) {
            this._focusedColor = value;
        },
        enumerable: false,
        configurable: true
    });
    /** @internal */
    Control.prototype.onBlur = function () {
        if (this._isFocused) {
            this._isFocused = false;
            if (this.focusedColor && this._unfocusedColor != null) {
                // Set color back to saved unfocused color
                this.color = this._unfocusedColor;
            }
            this.onBlurObservable.notifyObservers(this);
        }
    };
    /** @internal */
    Control.prototype.onFocus = function () {
        this._isFocused = true;
        if (this.focusedColor) {
            // Save the unfocused color
            this._unfocusedColor = this.color;
            this.color = this.focusedColor;
        }
        this.onFocusObservable.notifyObservers(this);
    };
    /**
     * Function called to get the list of controls that should not steal the focus from this control
     * @returns an array of controls
     */
    Control.prototype.keepsFocusWith = function () {
        return null;
    };
    /**
     * Function to focus a button programmatically
     */
    Control.prototype.focus = function () {
        this._host.moveFocusToControl(this);
    };
    /**
     * Function to unfocus a button programmatically
     */
    Control.prototype.blur = function () {
        this._host.focusedControl = null;
    };
    /**
     * Handles the keyboard event
     * @param evt Defines the KeyboardEvent
     */
    Control.prototype.processKeyboard = function (evt) {
        // if enter, trigger the new observable
        if (evt.key === "Enter") {
            this.onEnterPressedObservable.notifyObservers(this);
        }
        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);
    };
    /** @internal */
    Control.prototype._getTypeName = function () {
        return "Control";
    };
    /**
     * Gets the first ascendant in the hierarchy of the given type
     * @param className defines the required type
     * @returns the ascendant or null if not found
     */
    Control.prototype.getAscendantOfClass = function (className) {
        if (!this.parent) {
            return null;
        }
        if (this.parent.getClassName() === className) {
            return this.parent;
        }
        return this.parent.getAscendantOfClass(className);
    };
    /**
     * Mark control element as dirty
     * @param force force non visible elements to be marked too
     */
    Control.prototype.markAsDirty = function (force) {
        if (force === void 0) { force = false; }
        this._markAsDirty(force);
    };
    /**
     * Mark the element and its children as dirty
     */
    Control.prototype.markAllAsDirty = function () {
        this._markAllAsDirty();
    };
    /** @internal */
    Control.prototype._resetFontCache = function () {
        this._fontSet = true;
        this._markAsDirty();
    };
    /**
     * Determines if a container is an ascendant of the current control
     * @param container defines the container to look for
     * @returns true if the container is one of the ascendant of the control
     */
    Control.prototype.isAscendant = function (container) {
        if (!this.parent) {
            return false;
        }
        if (this.parent === container) {
            return true;
        }
        return this.parent.isAscendant(container);
    };
    /**
     * Gets coordinates in local control space
     * @param globalCoordinates defines the coordinates to transform
     * @returns the new coordinates in local space
     */
    Control.prototype.getLocalCoordinates = function (globalCoordinates) {
        var result = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2.Zero();
        this.getLocalCoordinatesToRef(globalCoordinates, result);
        return result;
    };
    /**
     * Gets coordinates in local control space
     * @param globalCoordinates defines the coordinates to transform
     * @param result defines the target vector2 where to store the result
     * @returns the current control
     */
    Control.prototype.getLocalCoordinatesToRef = function (globalCoordinates, result) {
        result.x = globalCoordinates.x - this._currentMeasure.left;
        result.y = globalCoordinates.y - this._currentMeasure.top;
        return this;
    };
    /**
     * Gets coordinates in parent local control space
     * @param globalCoordinates defines the coordinates to transform
     * @returns the new coordinates in parent local space
     */
    Control.prototype.getParentLocalCoordinates = function (globalCoordinates) {
        var result = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2.Zero();
        result.x = globalCoordinates.x - this._cachedParentMeasure.left;
        result.y = globalCoordinates.y - this._cachedParentMeasure.top;
        return result;
    };
    /**
     * Move the current control to a vector3 position projected onto the screen.
     * @param position defines the target position
     * @param scene defines the hosting scene
     */
    Control.prototype.moveToVector3 = function (position, scene) {
        if (!this._host || this.parent !== this._host._rootContainer) {
            babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Tools.Error("Cannot move a control to a vector3 if the control is not at root level");
            return;
        }
        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;
        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;
        var globalViewport = this._host._getGlobalViewport();
        var projectedPosition = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Project(position, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);
        this._moveToProjectedPosition(projectedPosition);
        if (projectedPosition.z < 0 || projectedPosition.z > 1) {
            this.notRenderable = true;
            return;
        }
        this.notRenderable = false;
    };
    /**
     * Will store all controls that have this control as ascendant in a given array
     * @param results defines the array where to store the descendants
     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered
     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored
     */
    Control.prototype.getDescendantsToRef = function (results, directDescendantsOnly, predicate) {
        if (directDescendantsOnly === void 0) { directDescendantsOnly = false; }
        // Do nothing by default
    };
    /**
     * Will return all controls that have this control as ascendant
     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered
     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored
     * @returns all child controls
     */
    Control.prototype.getDescendants = function (directDescendantsOnly, predicate) {
        var results = [];
        this.getDescendantsToRef(results, directDescendantsOnly, predicate);
        return results;
    };
    /**
     * Link current control with a target mesh
     * @param mesh defines the mesh to link with
     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions
     */
    Control.prototype.linkWithMesh = function (mesh) {
        if (!this._host || (this.parent && this.parent !== this._host._rootContainer)) {
            if (mesh) {
                babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Tools.Error("Cannot link a control to a mesh if the control is not at root level");
            }
            return;
        }
        var index = this._host._linkedControls.indexOf(this);
        if (index !== -1) {
            this._linkedMesh = mesh;
            if (!mesh) {
                this._host._linkedControls.splice(index, 1);
            }
            return;
        }
        else if (!mesh) {
            return;
        }
        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;
        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;
        this._linkedMesh = mesh;
        this._host._linkedControls.push(this);
    };
    /**
     * Shorthand function to set the top, right, bottom, and left padding values on the control.
     * @param { string | number} paddingTop - The value of the top padding.
     * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.
     * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.
     * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.
     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
     */
    Control.prototype.setPadding = function (paddingTop, paddingRight, paddingBottom, paddingLeft) {
        var top = paddingTop;
        var right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;
        var bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;
        var left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;
        this.paddingTop = top;
        this.paddingRight = right;
        this.paddingBottom = bottom;
        this.paddingLeft = left;
    };
    /**
     * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.
     * @param { number} paddingTop - The value in pixels of the top padding.
     * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.
     * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.
     * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.
     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size
     */
    Control.prototype.setPaddingInPixels = function (paddingTop, paddingRight, paddingBottom, paddingLeft) {
        var top = paddingTop;
        var right = paddingRight !== null && paddingRight !== void 0 ? paddingRight : top;
        var bottom = paddingBottom !== null && paddingBottom !== void 0 ? paddingBottom : top;
        var left = paddingLeft !== null && paddingLeft !== void 0 ? paddingLeft : right;
        this.paddingTopInPixels = top;
        this.paddingRightInPixels = right;
        this.paddingBottomInPixels = bottom;
        this.paddingLeftInPixels = left;
    };
    /**
     * @internal
     */
    Control.prototype._moveToProjectedPosition = function (projectedPosition) {
        var _a;
        var oldLeft = this._left.getValue(this._host);
        var oldTop = this._top.getValue(this._host);
        var parentMeasure = (_a = this.parent) === null || _a === void 0 ? void 0 : _a._currentMeasure;
        if (parentMeasure) {
            this._processMeasures(parentMeasure, this._host.getContext());
        }
        var newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;
        var newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;
        var leftAndTopIgnoreAdaptiveScaling = this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling;
        if (leftAndTopIgnoreAdaptiveScaling) {
            if (Math.abs(newLeft - oldLeft) < 0.5) {
                newLeft = oldLeft;
            }
            if (Math.abs(newTop - oldTop) < 0.5) {
                newTop = oldTop;
            }
        }
        if (!leftAndTopIgnoreAdaptiveScaling && oldLeft === newLeft && oldTop === newTop) {
            return;
        }
        this.left = newLeft + "px";
        this.top = newTop + "px";
        this._left.ignoreAdaptiveScaling = true;
        this._top.ignoreAdaptiveScaling = true;
        this._markAsDirty();
    };
    /**
     * @internal
     */
    Control.prototype._offsetLeft = function (offset) {
        this._isDirty = true;
        this._currentMeasure.left += offset;
    };
    /**
     * @internal
     */
    Control.prototype._offsetTop = function (offset) {
        this._isDirty = true;
        this._currentMeasure.top += offset;
    };
    /** @internal */
    Control.prototype._markMatrixAsDirty = function () {
        this._isMatrixDirty = true;
        this._flagDescendantsAsMatrixDirty();
    };
    /** @internal */
    Control.prototype._flagDescendantsAsMatrixDirty = function () {
        // No child
    };
    /**
     * @internal
     */
    Control.prototype._intersectsRect = function (rect, context) {
        // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.
        this._transform(context);
        if (this._evaluatedMeasure.left >= rect.left + rect.width) {
            return false;
        }
        if (this._evaluatedMeasure.top >= rect.top + rect.height) {
            return false;
        }
        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {
            return false;
        }
        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {
            return false;
        }
        return true;
    };
    /** @internal */
    Control.prototype._computeAdditionalOffsetX = function () {
        return 0;
    };
    /** @internal */
    Control.prototype._computeAdditionalOffsetY = function () {
        return 0;
    };
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    Control.prototype.invalidateRect = function () {
        this._transform();
        if (this.host && this.host.useInvalidateRectOptimization) {
            // Rotate by transform to get the measure transformed to global space
            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);
            // get the boudning box of the current measure and last frames measure in global space and invalidate it
            // the previous measure is used to properly clear a control that is scaled down
            _measure__WEBPACK_IMPORTED_MODULE_2__.Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);
            // Expand rect based on shadows
            var shadowOffsetX = this.shadowOffsetX;
            var shadowOffsetY = this.shadowOffsetY;
            var shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);
            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);
            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);
            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);
            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);
            var offsetX = this._computeAdditionalOffsetX();
            var offsetY = this._computeAdditionalOffsetY();
            this.host.invalidateRect(Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX), Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY), Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX), Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY));
        }
    };
    /**
     * @internal
     */
    Control.prototype._markAsDirty = function (force) {
        if (force === void 0) { force = false; }
        if (!this._isVisible && !force) {
            return;
        }
        this._isDirty = true;
        this._markMatrixAsDirty();
        // Redraw only this rectangle
        if (this._host) {
            this._host.markAsDirty();
        }
    };
    /** @internal */
    Control.prototype._markAllAsDirty = function () {
        this._markAsDirty();
        if (this._font) {
            this._prepareFont();
        }
    };
    /**
     * @internal
     */
    Control.prototype._link = function (host) {
        this._host = host;
        if (this._host) {
            this.uniqueId = this._host.getScene().getUniqueId();
        }
    };
    /**
     * @internal
     */
    Control.prototype._transform = function (context) {
        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {
            return;
        }
        // postTranslate
        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;
        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;
        if (context) {
            context.translate(offsetX, offsetY);
            // rotate
            context.rotate(this._rotation);
            // scale
            context.scale(this._scaleX, this._scaleY);
            // preTranslate
            context.translate(-offsetX, -offsetY);
        }
        // Need to update matrices?
        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {
            this._cachedOffsetX = offsetX;
            this._cachedOffsetY = offsetY;
            this._isMatrixDirty = false;
            this._flagDescendantsAsMatrixDirty();
            _math2D__WEBPACK_IMPORTED_MODULE_3__.Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);
            this._transformMatrix.invertToRef(this._invertTransformMatrix);
            this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);
        }
    };
    /**
     * @internal
     */
    Control.prototype._renderHighlight = function (context) {
        if (!this.isHighlighted) {
            return;
        }
        context.save();
        context.strokeStyle = this._highlightColor;
        context.lineWidth = this._highlightLineWidth;
        this._renderHighlightSpecific(context);
        context.restore();
    };
    /**
     * @internal
     */
    Control.prototype._renderHighlightSpecific = function (context) {
        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
    };
    Control.prototype._getColor = function (context) {
        return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;
    };
    /**
     * @internal
     */
    Control.prototype._applyStates = function (context) {
        if (this._isFontSizeInPercentage) {
            this._fontSet = true;
        }
        if (this._host && this._host.useSmallestIdeal && !this._font) {
            this._fontSet = true;
        }
        if (this._fontSet) {
            this._prepareFont();
            this._fontSet = false;
        }
        if (this._font) {
            context.font = this._font;
        }
        if (this._color || this.gradient) {
            context.fillStyle = this._getColor(context);
        }
        if (Control.AllowAlphaInheritance) {
            context.globalAlpha *= this._alpha;
        }
        else if (this._alphaSet) {
            context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;
        }
    };
    /**
     * @internal
     */
    Control.prototype._layout = function (parentMeasure, context) {
        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {
            return false;
        }
        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {
            this.host._numLayoutCalls++;
            this._currentMeasure.addAndTransformToRef(this._transformMatrix, -this._paddingLeftInPixels | 0, -this._paddingTopInPixels | 0, this._paddingRightInPixels | 0, this._paddingBottomInPixels | 0, this._prevCurrentMeasureTransformedIntoGlobalSpace);
            context.save();
            this._applyStates(context);
            var rebuildCount = 0;
            do {
                this._rebuildLayout = false;
                this._processMeasures(parentMeasure, context);
                rebuildCount++;
            } while (this._rebuildLayout && rebuildCount < 3);
            if (rebuildCount >= 3) {
                babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Logger.Error("Layout cycle detected in GUI (Control name=".concat(this.name, ", uniqueId=").concat(this.uniqueId, ")"));
            }
            context.restore();
            this.invalidateRect();
            this._evaluateClippingState(parentMeasure);
        }
        this._wasDirty = this._isDirty;
        this._isDirty = false;
        return true;
    };
    /**
     * @internal
     */
    Control.prototype._processMeasures = function (parentMeasure, context) {
        this._tempPaddingMeasure.copyFrom(parentMeasure);
        // Apply padding if in correct mode
        if (this.parent && this.parent.descendantsOnlyPadding) {
            this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;
            this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;
            this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;
            this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;
        }
        this._currentMeasure.copyFrom(this._tempPaddingMeasure);
        // Let children take some pre-measurement actions
        this._preMeasure(this._tempPaddingMeasure, context);
        this._measure();
        // Let children take some post-measurement actions
        this._postMeasure(this._tempPaddingMeasure, context);
        this._computeAlignment(this._tempPaddingMeasure, context);
        // Convert to int values
        this._currentMeasure.left = this._currentMeasure.left | 0;
        this._currentMeasure.top = this._currentMeasure.top | 0;
        this._currentMeasure.width = this._currentMeasure.width | 0;
        this._currentMeasure.height = this._currentMeasure.height | 0;
        // Let children add more features
        this._additionalProcessing(this._tempPaddingMeasure, context);
        this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);
        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);
        if (this.onDirtyObservable.hasObservers()) {
            this.onDirtyObservable.notifyObservers(this);
        }
    };
    Control.prototype._evaluateClippingState = function (parentMeasure) {
        // Since transformMatrix is used here, we need to have it freshly computed
        this._transform();
        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);
        if (this.parent && this.parent.clipChildren) {
            parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);
            // Early clip
            if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {
                this._isClipped = true;
                return;
            }
            if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {
                this._isClipped = true;
                return;
            }
            if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {
                this._isClipped = true;
                return;
            }
            if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {
                this._isClipped = true;
                return;
            }
        }
        this._isClipped = false;
    };
    /** @internal */
    Control.prototype._measure = function () {
        // Width / Height
        if (this._width.isPixel) {
            this._currentMeasure.width = this._width.getValue(this._host);
        }
        else {
            this._currentMeasure.width *= this._width.getValue(this._host);
        }
        if (this._height.isPixel) {
            this._currentMeasure.height = this._height.getValue(this._host);
        }
        else {
            this._currentMeasure.height *= this._height.getValue(this._host);
        }
        if (this._fixedRatio !== 0) {
            if (this._fixedRatioMasterIsWidth) {
                this._currentMeasure.height = this._currentMeasure.width * this._fixedRatio;
            }
            else {
                this._currentMeasure.width = this._currentMeasure.height * this._fixedRatio;
            }
        }
    };
    /**
     * @internal
     */
    Control.prototype._computeAlignment = function (parentMeasure, context) {
        var width = this._currentMeasure.width;
        var height = this._currentMeasure.height;
        var parentWidth = parentMeasure.width;
        var parentHeight = parentMeasure.height;
        // Left / top
        var x = 0;
        var y = 0;
        switch (this.horizontalAlignment) {
            case Control.HORIZONTAL_ALIGNMENT_LEFT:
                x = 0;
                break;
            case Control.HORIZONTAL_ALIGNMENT_RIGHT:
                x = parentWidth - width;
                break;
            case Control.HORIZONTAL_ALIGNMENT_CENTER:
                x = (parentWidth - width) / 2;
                break;
        }
        switch (this.verticalAlignment) {
            case Control.VERTICAL_ALIGNMENT_TOP:
                y = 0;
                break;
            case Control.VERTICAL_ALIGNMENT_BOTTOM:
                y = parentHeight - height;
                break;
            case Control.VERTICAL_ALIGNMENT_CENTER:
                y = (parentHeight - height) / 2;
                break;
        }
        if (!this.descendantsOnlyPadding) {
            if (this._paddingLeft.isPixel) {
                this._currentMeasure.left += this._paddingLeft.getValue(this._host);
                this._currentMeasure.width -= this._paddingLeft.getValue(this._host);
            }
            else {
                this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);
                this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);
            }
            if (this._paddingRight.isPixel) {
                this._currentMeasure.width -= this._paddingRight.getValue(this._host);
            }
            else {
                this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);
            }
            if (this._paddingTop.isPixel) {
                this._currentMeasure.top += this._paddingTop.getValue(this._host);
                this._currentMeasure.height -= this._paddingTop.getValue(this._host);
            }
            else {
                this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);
                this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);
            }
            if (this._paddingBottom.isPixel) {
                this._currentMeasure.height -= this._paddingBottom.getValue(this._host);
            }
            else {
                this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);
            }
        }
        if (this._left.isPixel) {
            this._currentMeasure.left += this._left.getValue(this._host);
        }
        else {
            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);
        }
        if (this._top.isPixel) {
            this._currentMeasure.top += this._top.getValue(this._host);
        }
        else {
            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);
        }
        this._currentMeasure.left += x;
        this._currentMeasure.top += y;
    };
    /**
     * @internal
     */
    Control.prototype._preMeasure = function (parentMeasure, context) {
        // Do nothing
    };
    /**
     * @internal
     */
    Control.prototype._postMeasure = function (parentMeasure, context) {
        // Do nothing
    };
    /**
     * @internal
     */
    Control.prototype._additionalProcessing = function (parentMeasure, context) {
        // Do nothing
    };
    /**
     * @internal
     */
    Control.prototype._clipForChildren = function (context) {
        // DO nothing
    };
    Control.prototype._clip = function (context, invalidatedRectangle) {
        context.beginPath();
        Control._ClipMeasure.copyFrom(this._currentMeasure);
        if (invalidatedRectangle) {
            // Rotate the invalidated rect into the control's space
            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);
            // Get the intersection of the rect in context space and the current context
            var intersection = new _measure__WEBPACK_IMPORTED_MODULE_2__.Measure(0, 0, 0, 0);
            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);
            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);
            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;
            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;
            Control._ClipMeasure.copyFrom(intersection);
        }
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            var shadowOffsetX = this.shadowOffsetX;
            var shadowOffsetY = this.shadowOffsetY;
            var shadowBlur = this.shadowBlur;
            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);
            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);
            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);
            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);
            context.rect(Control._ClipMeasure.left + leftShadowOffset, Control._ClipMeasure.top + topShadowOffset, Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset, Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset);
        }
        else {
            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);
        }
        context.clip();
    };
    /**
     * @internal
     */
    Control.prototype._render = function (context, invalidatedRectangle) {
        if (!this.isVisible || this.notRenderable || this._isClipped) {
            this._isDirty = false;
            return false;
        }
        this.host._numRenderCalls++;
        context.save();
        this._applyStates(context);
        // Transform
        this._transform(context);
        // Clip
        if (this.clipContent) {
            this._clip(context, invalidatedRectangle);
        }
        if (this.onBeforeDrawObservable.hasObservers()) {
            this.onBeforeDrawObservable.notifyObservers(this);
        }
        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {
            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);
        }
        else {
            this._draw(context, invalidatedRectangle);
        }
        if (this.useBitmapCache && this._wasDirty) {
            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
        }
        this._renderHighlight(context);
        if (this.onAfterDrawObservable.hasObservers()) {
            this.onAfterDrawObservable.notifyObservers(this);
        }
        context.restore();
        return true;
    };
    /**
     * @internal
     */
    Control.prototype._draw = function (context, invalidatedRectangle) {
        // Do nothing
    };
    /**
     * Tests if a given coordinates belong to the current control
     * @param x defines x coordinate to test
     * @param y defines y coordinate to test
     * @returns true if the coordinates are inside the control
     */
    Control.prototype.contains = function (x, y) {
        // Invert transform
        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);
        x = this._transformedPosition.x;
        y = this._transformedPosition.y;
        // Check
        if (x < this._currentMeasure.left) {
            return false;
        }
        if (x > this._currentMeasure.left + this._currentMeasure.width) {
            return false;
        }
        if (y < this._currentMeasure.top) {
            return false;
        }
        if (y > this._currentMeasure.top + this._currentMeasure.height) {
            return false;
        }
        if (this.isPointerBlocker) {
            this._host._shouldBlockPointer = true;
        }
        return true;
    };
    /**
     * @internal
     */
    Control.prototype._processPicking = function (x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
        if (!this._isEnabled) {
            return false;
        }
        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {
            return false;
        }
        if (!this.contains(x, y)) {
            return false;
        }
        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);
        return true;
    };
    /**
     * @internal
     */
    Control.prototype._onPointerMove = function (target, coordinates, pointerId, pi) {
        var canNotify = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);
        if (canNotify && this.parent != null && !this.isPointerBlocker) {
            this.parent._onPointerMove(target, coordinates, pointerId, pi);
        }
    };
    /**
     * @internal
     */
    Control.prototype._onPointerEnter = function (target, pi) {
        if (!this._isEnabled) {
            return false;
        }
        if (this._enterCount > 0) {
            return false;
        }
        if (this._enterCount === -1) {
            // -1 is for touch input, we are now sure we are with a mouse or pencil
            this._enterCount = 0;
        }
        this._enterCount++;
        var canNotify = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);
        if (canNotify && this.parent != null && !this.isPointerBlocker) {
            this.parent._onPointerEnter(target, pi);
        }
        return true;
    };
    /**
     * @internal
     */
    Control.prototype._onPointerOut = function (target, pi, force) {
        if (force === void 0) { force = false; }
        if (!force && !this._isEnabled) {
            return;
        }
        this._enterCount = 0;
        var canNotify = true;
        if (!target.isAscendant(this)) {
            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);
        }
        if (canNotify && this.parent != null && !this.isPointerBlocker) {
            this.parent._onPointerOut(target, pi, force);
        }
    };
    /**
     * @internal
     */
    Control.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        // Prevent pointerout to lose control context.
        // Event redundancy is checked inside the function.
        this._onPointerEnter(this, pi);
        if (this.tabIndex !== -1) {
            this.host.focusedControl = this;
        }
        if (this._downCount !== 0) {
            return false;
        }
        this._downCount++;
        this._downPointerIds[pointerId] = true;
        var canNotify = this.onPointerDownObservable.notifyObservers(new _math2D__WEBPACK_IMPORTED_MODULE_3__.Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);
        if (canNotify && this.parent != null && !this.isPointerBlocker) {
            this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);
        }
        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {
            this._host._capturedPointerIds.add(pi.event.pointerId);
        }
        return true;
    };
    /**
     * @internal
     */
    Control.prototype._onPointerUp = function (target, coordinates, pointerId, buttonIndex, notifyClick, pi) {
        if (!this._isEnabled) {
            return;
        }
        this._downCount = 0;
        delete this._downPointerIds[pointerId];
        var canNotifyClick = notifyClick;
        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {
            if (!this._host.usePointerTapForClickEvent) {
                canNotifyClick = this.onPointerClickObservable.notifyObservers(new _math2D__WEBPACK_IMPORTED_MODULE_3__.Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);
            }
        }
        var canNotify = this.onPointerUpObservable.notifyObservers(new _math2D__WEBPACK_IMPORTED_MODULE_3__.Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);
        if (canNotify && this.parent != null && !this.isPointerBlocker) {
            this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);
        }
        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {
            this._host._capturedPointerIds.delete(pi.event.pointerId);
        }
    };
    Control.prototype._onPointerPick = function (target, coordinates, pointerId, buttonIndex, notifyClick, pi) {
        if (!this._host.usePointerTapForClickEvent) {
            return false;
        }
        var canNotifyClick = notifyClick;
        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {
            canNotifyClick = this.onPointerClickObservable.notifyObservers(new _math2D__WEBPACK_IMPORTED_MODULE_3__.Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);
        }
        var canNotify = this.onPointerUpObservable.notifyObservers(new _math2D__WEBPACK_IMPORTED_MODULE_3__.Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);
        if (canNotify && this.parent != null && !this.isPointerBlocker) {
            this.parent._onPointerPick(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);
        }
        return true;
    };
    /**
     * @internal
     */
    Control.prototype._forcePointerUp = function (pointerId) {
        if (pointerId === void 0) { pointerId = null; }
        if (pointerId !== null) {
            this._onPointerUp(this, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2.Zero(), pointerId, 0, true);
        }
        else {
            for (var key in this._downPointerIds) {
                this._onPointerUp(this, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2.Zero(), +key, 0, true);
            }
        }
    };
    /**
     * @internal
     */
    Control.prototype._onWheelScroll = function (deltaX, deltaY) {
        if (!this._isEnabled) {
            return;
        }
        var canNotify = this.onWheelObservable.notifyObservers(new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector2(deltaX, deltaY));
        if (canNotify && this.parent != null) {
            this.parent._onWheelScroll(deltaX, deltaY);
        }
    };
    /** @internal */
    Control.prototype._onCanvasBlur = function () { };
    /**
     * @internal
     */
    Control.prototype._processObservables = function (type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY) {
        if (!this._isEnabled) {
            return false;
        }
        this._dummyVector2.copyFromFloats(x, y);
        if (type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE) {
            this._onPointerMove(this, this._dummyVector2, pointerId, pi);
            var previousControlOver = this._host._lastControlOver[pointerId];
            if (previousControlOver && previousControlOver !== this) {
                previousControlOver._onPointerOut(this, pi);
            }
            if (previousControlOver !== this) {
                this._onPointerEnter(this, pi);
            }
            this._host._lastControlOver[pointerId] = this;
            return true;
        }
        else if (type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERDOWN) {
            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);
            this._host._registerLastControlDown(this, pointerId);
            this._host._lastPickedControl = this;
            return true;
        }
        else if (type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP) {
            if (this._host._lastControlDown[pointerId]) {
                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);
            }
            if (!this._host.usePointerTapForClickEvent) {
                delete this._host._lastControlDown[pointerId];
            }
            return true;
        }
        else if (type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERWHEEL) {
            if (this._host._lastControlOver[pointerId]) {
                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);
                return true;
            }
        }
        else if (type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERTAP) {
            if (this._host._lastControlDown[pointerId]) {
                this._host._lastControlDown[pointerId]._onPointerPick(this, this._dummyVector2, pointerId, buttonIndex, true, pi);
            }
            delete this._host._lastControlDown[pointerId];
            return true;
        }
        return false;
    };
    Control.prototype._getStyleProperty = function (propName, defaultValue) {
        var _a;
        var prop = (_a = (this._style && this._style[propName])) !== null && _a !== void 0 ? _a : this[propName];
        if (!prop && this.parent) {
            return this.parent._getStyleProperty(propName, defaultValue);
        }
        else if (!this.parent) {
            return defaultValue;
        }
        else {
            return prop;
        }
    };
    Control.prototype._prepareFont = function () {
        var _a, _b;
        if (!this._font && !this._fontSet) {
            return;
        }
        this._font =
            this._getStyleProperty("fontStyle", "") +
                " " +
                this._getStyleProperty("fontWeight", "") +
                " " +
                this.fontSizeInPixels +
                "px " +
                this._getStyleProperty("fontFamily", "Arial");
        this._fontOffset = Control._GetFontOffset(this._font, (_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine());
        //children need to be refreshed
        this.getDescendants().forEach(function (child) { return child._markAllAsDirty(); });
    };
    /**
     * A control has a dimension fully defined if that dimension doesn't depend on the parent's dimension.
     * As an example, a control that has dimensions in pixels is fully defined, while in percentage is not fully defined.
     * @param dim the dimension to check (width or height)
     * @returns if the dimension is fully defined
     */
    Control.prototype.isDimensionFullyDefined = function (dim) {
        return this.getDimension(dim).isPixel;
    };
    /**
     * Gets the dimension of the control along a specified axis
     * @param dim the dimension to retrieve (width or height)
     * @returns the dimension value along the specified axis
     */
    Control.prototype.getDimension = function (dim) {
        if (dim === "width") {
            return this._width;
        }
        else {
            return this._height;
        }
    };
    /**
     * Clones a control and its descendants
     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture
     * @returns the cloned control
     */
    Control.prototype.clone = function (host) {
        var serialization = {};
        this.serialize(serialization, true);
        var controlType = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Tools.Instantiate("BABYLON.GUI." + serialization.className);
        var cloned = new controlType();
        cloned.parse(serialization, host);
        return cloned;
    };
    /**
     * Parses a serialized object into this control
     * @param serializedObject the object with the serialized properties
     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture
     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls
     * @returns this control
     */
    Control.prototype.parse = function (serializedObject, host, urlRewriter) {
        var _this = this;
        this._urlRewriter = urlRewriter;
        babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return _this; }, serializedObject, null);
        this.name = serializedObject.name;
        this._parseFromContent(serializedObject, host !== null && host !== void 0 ? host : this._host);
        return this;
    };
    /**
     * Serializes the current control
     * @param serializationObject defined the JSON serialized object
     * @param force if the control should be serialized even if the isSerializable flag is set to false (default false)
     * @param allowCanvas defines if the control is allowed to use a Canvas2D object to serialize (true by default)
     */
    Control.prototype.serialize = function (serializationObject, force, allowCanvas) {
        if (force === void 0) { force = false; }
        if (allowCanvas === void 0) { allowCanvas = true; }
        if (!this.isSerializable && !force) {
            return;
        }
        babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Serialize(this, serializationObject);
        serializationObject.name = this.name;
        serializationObject.className = this.getClassName();
        // Call prepareFont to guarantee the font is properly set before serializing
        if (allowCanvas) {
            this._prepareFont();
        }
        if (this._fontFamily) {
            serializationObject.fontFamily = this._fontFamily;
        }
        if (this.fontSize) {
            serializationObject.fontSize = this.fontSize;
        }
        if (this.fontWeight) {
            serializationObject.fontWeight = this.fontWeight;
        }
        if (this.fontStyle) {
            serializationObject.fontStyle = this.fontStyle;
        }
        if (this._gradient) {
            serializationObject.gradient = {};
            this._gradient.serialize(serializationObject.gradient);
        }
        // Animations
        babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.AppendSerializedAnimations(this, serializationObject);
    };
    /**
     * @internal
     */
    Control.prototype._parseFromContent = function (serializedObject, host, urlRewriter) {
        var _a, _b;
        if (serializedObject.fontFamily) {
            this.fontFamily = serializedObject.fontFamily;
        }
        if (serializedObject.fontSize) {
            this.fontSize = serializedObject.fontSize;
        }
        if (serializedObject.fontWeight) {
            this.fontWeight = serializedObject.fontWeight;
        }
        if (serializedObject.fontStyle) {
            this.fontStyle = serializedObject.fontStyle;
        }
        // Gradient
        if (serializedObject.gradient) {
            var className = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Tools.Instantiate("BABYLON.GUI." + serializedObject.gradient.className);
            this._gradient = new className();
            (_a = this._gradient) === null || _a === void 0 ? void 0 : _a.parse(serializedObject.gradient);
        }
        // Animations
        if (serializedObject.animations) {
            this.animations = [];
            for (var animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {
                var parsedAnimation = serializedObject.animations[animationIndex];
                var internalClass = (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.GetClass)("BABYLON.Animation");
                if (internalClass) {
                    this.animations.push(internalClass.Parse(parsedAnimation));
                }
            }
            if (serializedObject.autoAnimate && this._host && this._host.getScene()) {
                this._host
                    .getScene()
                    .beginAnimation(this, serializedObject.autoAnimateFrom, serializedObject.autoAnimateTo, serializedObject.autoAnimateLoop, serializedObject.autoAnimateSpeed || 1.0);
            }
        }
        this.fixedRatioMasterIsWidth = (_b = serializedObject.fixedRatioMasterIsWidth) !== null && _b !== void 0 ? _b : this.fixedRatioMasterIsWidth;
    };
    /** Releases associated resources */
    Control.prototype.dispose = function () {
        this.onDirtyObservable.clear();
        this.onBeforeDrawObservable.clear();
        this.onAfterDrawObservable.clear();
        this.onPointerDownObservable.clear();
        this.onPointerEnterObservable.clear();
        this.onPointerMoveObservable.clear();
        this.onPointerOutObservable.clear();
        this.onPointerUpObservable.clear();
        this.onPointerClickObservable.clear();
        this.onWheelObservable.clear();
        // focus
        this.onBlurObservable.clear();
        this.onFocusObservable.clear();
        this.onKeyboardEventProcessedObservable.clear();
        if (this._styleObserver && this._style) {
            this._style.onChangedObservable.remove(this._styleObserver);
            this._styleObserver = null;
        }
        if (this.parent) {
            this.parent.removeControl(this);
            this.parent = null;
        }
        if (this._host) {
            var index = this._host._linkedControls.indexOf(this);
            if (index > -1) {
                this.linkWithMesh(null);
            }
        }
        // Callback
        this.onDisposeObservable.notifyObservers(this);
        this.onDisposeObservable.clear();
    };
    Object.defineProperty(Control, "HORIZONTAL_ALIGNMENT_LEFT", {
        /** HORIZONTAL_ALIGNMENT_LEFT */
        get: function () {
            return Control._HORIZONTAL_ALIGNMENT_LEFT;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control, "HORIZONTAL_ALIGNMENT_RIGHT", {
        /** HORIZONTAL_ALIGNMENT_RIGHT */
        get: function () {
            return Control._HORIZONTAL_ALIGNMENT_RIGHT;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control, "HORIZONTAL_ALIGNMENT_CENTER", {
        /** HORIZONTAL_ALIGNMENT_CENTER */
        get: function () {
            return Control._HORIZONTAL_ALIGNMENT_CENTER;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control, "VERTICAL_ALIGNMENT_TOP", {
        /** VERTICAL_ALIGNMENT_TOP */
        get: function () {
            return Control._VERTICAL_ALIGNMENT_TOP;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control, "VERTICAL_ALIGNMENT_BOTTOM", {
        /** VERTICAL_ALIGNMENT_BOTTOM */
        get: function () {
            return Control._VERTICAL_ALIGNMENT_BOTTOM;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control, "VERTICAL_ALIGNMENT_CENTER", {
        /** VERTICAL_ALIGNMENT_CENTER */
        get: function () {
            return Control._VERTICAL_ALIGNMENT_CENTER;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @internal
     */
    Control._GetFontOffset = function (font, engineToUse) {
        if (Control._FontHeightSizes[font]) {
            return Control._FontHeightSizes[font];
        }
        var engine = engineToUse || babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.EngineStore.LastCreatedEngine;
        if (!engine) {
            throw new Error("Invalid engine. Unable to create a canvas.");
        }
        var result = engine.getFontOffset(font);
        Control._FontHeightSizes[font] = result;
        return result;
    };
    /**
     * Creates a Control from parsed data
     * @param serializedObject defines parsed data
     * @param host defines the hosting AdvancedDynamicTexture
     * @param urlRewriter defines an url rewriter to update urls before sending them to the controls
     * @returns a new Control
     */
    Control.Parse = function (serializedObject, host, urlRewriter) {
        var controlType = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Tools.Instantiate("BABYLON.GUI." + serializedObject.className);
        var control = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () {
            var newControl = new controlType();
            newControl._urlRewriter = urlRewriter;
            return newControl;
        }, serializedObject, null);
        control.name = serializedObject.name;
        control._parseFromContent(serializedObject, host, urlRewriter);
        return control;
    };
    /**
     * @internal
     */
    Control.drawEllipse = function (x, y, width, height, arc, context) {
        context.translate(x, y);
        context.scale(width, height);
        context.beginPath();
        context.arc(0, 0, 1, 0, 2 * Math.PI * arc, arc < 0);
        if (arc >= 1) {
            context.closePath();
        }
        context.scale(1 / width, 1 / height);
        context.translate(-x, -y);
    };
    /**
     * Returns true if the control is ready to be used
     * @returns
     */
    Control.prototype.isReady = function () {
        // Most controls are ready by default, so the default implementation is to return true
        return true;
    };
    /**
     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)
     */
    Control.AllowAlphaInheritance = false;
    Control._ClipMeasure = new _measure__WEBPACK_IMPORTED_MODULE_2__.Measure(0, 0, 0, 0);
    // Statics
    Control._HORIZONTAL_ALIGNMENT_LEFT = 0;
    Control._HORIZONTAL_ALIGNMENT_RIGHT = 1;
    Control._HORIZONTAL_ALIGNMENT_CENTER = 2;
    Control._VERTICAL_ALIGNMENT_TOP = 0;
    Control._VERTICAL_ALIGNMENT_BOTTOM = 1;
    Control._VERTICAL_ALIGNMENT_CENTER = 2;
    Control._FontHeightSizes = {};
    Control.AddHeader = function () { };
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "metadata", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "isHitTestVisible", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "isPointerBlocker", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "isFocusInvisible", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "clipChildren", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "clipContent", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "useBitmapCache", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "shadowOffsetX", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "shadowOffsetY", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "shadowBlur", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "shadowColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "hoverCursor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "fontOffset", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "alpha", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "isSerializable", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "scaleX", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "scaleY", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "rotation", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "transformCenterY", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "transformCenterX", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "horizontalAlignment", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "verticalAlignment", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "fixedRatio", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "fixedRatioMasterIsWidth", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "width", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "height", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "style", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "color", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "gradient", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "zIndex", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "notRenderable", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "isVisible", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "descendantsOnlyPadding", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "paddingLeft", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "paddingRight", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "paddingTop", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "paddingBottom", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "left", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "top", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "linkOffsetX", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "linkOffsetY", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "isEnabled", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "disabledColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "disabledColorItem", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "overlapGroup", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Control.prototype, "overlapDeltaMultiplier", void 0);
    return Control;
}());
(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.Control", Control);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/displayGrid.ts":
/*!*******************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/displayGrid.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DisplayGrid: () => (/* binding */ DisplayGrid)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__);




/** Class used to render a grid  */
var DisplayGrid = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(DisplayGrid, _super);
    /**
     * Creates a new GridDisplayRectangle
     * @param name defines the control name
     */
    function DisplayGrid(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._cellWidth = 20;
        _this._cellHeight = 20;
        _this._minorLineTickness = 1;
        _this._minorLineColor = "DarkGray";
        _this._majorLineTickness = 2;
        _this._majorLineColor = "White";
        _this._majorLineFrequency = 5;
        _this._background = "Black";
        _this._displayMajorLines = true;
        _this._displayMinorLines = true;
        return _this;
    }
    Object.defineProperty(DisplayGrid.prototype, "displayMinorLines", {
        /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */
        get: function () {
            return this._displayMinorLines;
        },
        set: function (value) {
            if (this._displayMinorLines === value) {
                return;
            }
            this._displayMinorLines = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayGrid.prototype, "displayMajorLines", {
        /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */
        get: function () {
            return this._displayMajorLines;
        },
        set: function (value) {
            if (this._displayMajorLines === value) {
                return;
            }
            this._displayMajorLines = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayGrid.prototype, "background", {
        /** Gets or sets background color (Black by default) */
        get: function () {
            return this._background;
        },
        set: function (value) {
            if (this._background === value) {
                return;
            }
            this._background = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayGrid.prototype, "cellWidth", {
        /** Gets or sets the width of each cell (20 by default) */
        get: function () {
            return this._cellWidth;
        },
        set: function (value) {
            this._cellWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayGrid.prototype, "cellHeight", {
        /** Gets or sets the height of each cell (20 by default) */
        get: function () {
            return this._cellHeight;
        },
        set: function (value) {
            this._cellHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayGrid.prototype, "minorLineTickness", {
        /** Gets or sets the tickness of minor lines (1 by default) */
        get: function () {
            return this._minorLineTickness;
        },
        set: function (value) {
            this._minorLineTickness = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayGrid.prototype, "minorLineColor", {
        /** Gets or sets the color of minor lines (DarkGray by default) */
        get: function () {
            return this._minorLineColor;
        },
        set: function (value) {
            this._minorLineColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayGrid.prototype, "majorLineTickness", {
        /** Gets or sets the tickness of major lines (2 by default) */
        get: function () {
            return this._majorLineTickness;
        },
        set: function (value) {
            this._majorLineTickness = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayGrid.prototype, "majorLineColor", {
        /** Gets or sets the color of major lines (White by default) */
        get: function () {
            return this._majorLineColor;
        },
        set: function (value) {
            this._majorLineColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayGrid.prototype, "majorLineFrequency", {
        /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/
        get: function () {
            return this._majorLineFrequency;
        },
        set: function (value) {
            this._majorLineFrequency = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    DisplayGrid.prototype._draw = function (context) {
        context.save();
        this._applyStates(context);
        if (this._isEnabled) {
            if (this._background) {
                context.fillStyle = this._background;
                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
            }
            var cellCountX = this._currentMeasure.width / this._cellWidth;
            var cellCountY = this._currentMeasure.height / this._cellHeight;
            // Minor lines
            var left = this._currentMeasure.left + this._currentMeasure.width / 2;
            var top_1 = this._currentMeasure.top + this._currentMeasure.height / 2;
            if (this._displayMinorLines) {
                context.strokeStyle = this._minorLineColor;
                context.lineWidth = this._minorLineTickness;
                for (var x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {
                    var cellX = left + x * this.cellWidth;
                    context.beginPath();
                    context.moveTo(cellX, this._currentMeasure.top);
                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);
                    context.stroke();
                }
                for (var y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {
                    var cellY = top_1 + y * this.cellHeight;
                    context.beginPath();
                    context.moveTo(this._currentMeasure.left, cellY);
                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);
                    context.stroke();
                }
            }
            // Major lines
            if (this._displayMajorLines) {
                context.strokeStyle = this._majorLineColor;
                context.lineWidth = this._majorLineTickness;
                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {
                    var cellX = left + x * this.cellWidth;
                    context.beginPath();
                    context.moveTo(cellX, this._currentMeasure.top);
                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);
                    context.stroke();
                }
                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {
                    var cellY = top_1 + y * this.cellHeight;
                    context.moveTo(this._currentMeasure.left, cellY);
                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);
                    context.closePath();
                    context.stroke();
                }
            }
        }
        context.restore();
    };
    DisplayGrid.prototype._getTypeName = function () {
        return "DisplayGrid";
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "displayMinorLines", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "displayMajorLines", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "background", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "cellWidth", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "cellHeight", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "minorLineTickness", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "minorLineColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "majorLineTickness", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "majorLineColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], DisplayGrid.prototype, "majorLineFrequency", null);
    return DisplayGrid;
}(_control__WEBPACK_IMPORTED_MODULE_0__.Control));
(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.DisplayGrid", DisplayGrid);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/ellipse.ts":
/*!***************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/ellipse.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ellipse: () => (/* binding */ Ellipse)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./container */ "../../../dev/gui/src/2D/controls/container.ts");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__);





/** Class used to create 2D ellipse containers */
var Ellipse = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(Ellipse, _super);
    /**
     * Creates a new Ellipse
     * @param name defines the control name
     */
    function Ellipse(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._thickness = 1;
        _this._arc = 1;
        return _this;
    }
    Object.defineProperty(Ellipse.prototype, "thickness", {
        /** Gets or sets border thickness */
        get: function () {
            return this._thickness;
        },
        set: function (value) {
            if (this._thickness === value) {
                return;
            }
            this._thickness = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Ellipse.prototype, "arc", {
        /** Gets or sets arcing of the ellipse (ratio of the circumference between 0 and 1) */
        get: function () {
            return this._arc;
        },
        set: function (value) {
            if (this._arc === value) {
                return;
            }
            this._arc = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Ellipse.prototype._getTypeName = function () {
        return "Ellipse";
    };
    Ellipse.prototype._localDraw = function (context) {
        context.save();
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        _control__WEBPACK_IMPORTED_MODULE_1__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, this._arc, context);
        if (this._backgroundGradient || this._background) {
            context.fillStyle = this._getBackgroundColor(context);
            context.fill();
        }
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
        }
        if (this._thickness) {
            if (this.color) {
                context.strokeStyle = this.color;
            }
            context.lineWidth = this._thickness;
            context.stroke();
        }
        context.restore();
    };
    Ellipse.prototype._additionalProcessing = function (parentMeasure, context) {
        _super.prototype._additionalProcessing.call(this, parentMeasure, context);
        this._measureForChildren.width -= 2 * this._thickness;
        this._measureForChildren.height -= 2 * this._thickness;
        this._measureForChildren.left += this._thickness;
        this._measureForChildren.top += this._thickness;
    };
    Ellipse.prototype._clipForChildren = function (context) {
        _control__WEBPACK_IMPORTED_MODULE_1__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, this._arc, context);
        context.clip();
    };
    Ellipse.prototype._renderHighlightSpecific = function (context) {
        _control__WEBPACK_IMPORTED_MODULE_1__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._highlightLineWidth / 2, this._currentMeasure.height / 2 - this._highlightLineWidth / 2, this._arc, context);
        context.stroke();
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], Ellipse.prototype, "thickness", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], Ellipse.prototype, "arc", null);
    return Ellipse;
}(_container__WEBPACK_IMPORTED_MODULE_0__.Container));
(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.Ellipse", Ellipse);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/focusableButton.ts":
/*!***********************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/focusableButton.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusableButton: () => (/* binding */ FocusableButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "../../../dev/gui/src/2D/controls/button.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Misc/typeStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__);



/**
 * Class used to create a focusable button that can easily handle keyboard events
 * @since 5.0.0
 */
var FocusableButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(FocusableButton, _super);
    function FocusableButton(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._unfocusedColor = _this.color;
        return _this;
    }
    /**
     * @internal
     */
    FocusableButton.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!this.isReadOnly) {
            // Clicking on button should focus
            this.focus();
        }
        return _super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi);
    };
    return FocusableButton;
}(_button__WEBPACK_IMPORTED_MODULE_0__.Button));

(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.FocusableButton", FocusableButton);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/focusableControl.ts":
/*!************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/focusableControl.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../../dev/gui/src/2D/controls/gradient/BaseGradient.ts":
/*!*****************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/gradient/BaseGradient.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseGradient: () => (/* binding */ BaseGradient)
/* harmony export */ });
/*
 * Base Gradient class. Should not be used directly.
 */
/**
 * Class that serves as a base for all the gradients created from context.
 */
var BaseGradient = /** @class */ (function () {
    function BaseGradient() {
        this._colorStops = [];
        this._gradientDirty = true;
    }
    BaseGradient.prototype._addColorStopsToCanvasGradient = function () {
        for (var _i = 0, _a = this._colorStops; _i < _a.length; _i++) {
            var stop_1 = _a[_i];
            this._canvasGradient.addColorStop(stop_1.offset, stop_1.color);
        }
    };
    /**
     * If there are any changes or the context changed, regenerate the canvas gradient object. Else,
     * reuse the existing gradient.
     * @param context the context to create the gradient from
     * @returns the canvas gradient
     */
    BaseGradient.prototype.getCanvasGradient = function (context) {
        if (this._gradientDirty || this._context !== context) {
            this._context = context;
            this._canvasGradient = this._createCanvasGradient(context);
            this._addColorStopsToCanvasGradient();
            this._gradientDirty = false;
        }
        return this._canvasGradient;
    };
    /**
     * Adds a new color stop to the gradient.
     * @param offset the offset of the stop on the gradient. Should be between 0 and 1
     * @param color the color of the stop
     */
    BaseGradient.prototype.addColorStop = function (offset, color) {
        this._colorStops.push({ offset: offset, color: color });
        this._gradientDirty = true;
    };
    /**
     * Removes an existing color stop with the specified offset from the gradient
     * @param offset the offset of the stop to be removed
     */
    BaseGradient.prototype.removeColorStop = function (offset) {
        this._colorStops = this._colorStops.filter(function (colorStop) { return colorStop.offset !== offset; });
        this._gradientDirty = true;
    };
    /**
     * Removes all color stops from the gradient
     */
    BaseGradient.prototype.clearColorStops = function () {
        this._colorStops = [];
        this._gradientDirty = true;
    };
    Object.defineProperty(BaseGradient.prototype, "colorStops", {
        /**
         * Color stops of the gradient
         */
        get: function () {
            return this._colorStops;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @returns Type of the gradient
     */
    BaseGradient.prototype.getClassName = function () {
        return "BaseGradient";
    };
    /**
     * Serialize into a json object
     * @param serializationObject object to serialize into
     */
    BaseGradient.prototype.serialize = function (serializationObject) {
        serializationObject.colorStops = this._colorStops;
        serializationObject.className = this.getClassName();
    };
    /**
     * Parse from json object
     * @param serializationObject object to parse from
     */
    BaseGradient.prototype.parse = function (serializationObject) {
        this._colorStops = serializationObject.colorStops;
    };
    return BaseGradient;
}());



/***/ }),

/***/ "../../../dev/gui/src/2D/controls/gradient/LinearGradient.ts":
/*!*******************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/gradient/LinearGradient.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinearGradient: () => (/* binding */ LinearGradient)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _BaseGradient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseGradient */ "../../../dev/gui/src/2D/controls/gradient/BaseGradient.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Misc/typeStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__);



/**
 * Gradient along a line that connects two coordinates.
 * These coordinates are relative to the canvas' space, not to any control's space.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient
 */
var LinearGradient = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(LinearGradient, _super);
    /**
     * Creates a new linear gradient
     * @param x0
     * @param y0
     * @param x1
     * @param y1
     */
    function LinearGradient(x0, y0, x1, y1) {
        var _this = _super.call(this) || this;
        _this._x0 = x0 !== null && x0 !== void 0 ? x0 : 0;
        _this._y0 = y0 !== null && y0 !== void 0 ? y0 : 0;
        _this._x1 = x1 !== null && x1 !== void 0 ? x1 : 0;
        _this._y1 = y1 !== null && y1 !== void 0 ? y1 : 0;
        return _this;
    }
    LinearGradient.prototype._createCanvasGradient = function (context) {
        return context.createLinearGradient(this._x0, this._y0, this._x1, this._y1);
    };
    Object.defineProperty(LinearGradient.prototype, "x0", {
        /** X axis coordinate of the starting point in the line */
        get: function () {
            return this._x0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LinearGradient.prototype, "x1", {
        /** X axis coordinate of the ending point in the line */
        get: function () {
            return this._x1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LinearGradient.prototype, "y0", {
        /** Y axis coordinate of the starting point in the line */
        get: function () {
            return this._y0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LinearGradient.prototype, "y1", {
        /** Y axis coordinate of the ending point in the line */
        get: function () {
            return this._y1;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Class name of the gradient
     * @returns the class name of the gradient
     */
    LinearGradient.prototype.getClassName = function () {
        return "LinearGradient";
    };
    /**
     * Serializes this gradient
     * @param serializationObject the object to serialize to
     */
    LinearGradient.prototype.serialize = function (serializationObject) {
        _super.prototype.serialize.call(this, serializationObject);
        serializationObject.x0 = this._x0;
        serializationObject.y0 = this._y0;
        serializationObject.x1 = this._x1;
        serializationObject.y1 = this._y1;
    };
    /**
     * Parses a gradient from a serialization object
     * @param serializationObject the object to parse from
     */
    LinearGradient.prototype.parse = function (serializationObject) {
        _super.prototype.parse.call(this, serializationObject);
        this._x0 = serializationObject.x0;
        this._y0 = serializationObject.y0;
        this._x1 = serializationObject.x1;
        this._y1 = serializationObject.y1;
    };
    return LinearGradient;
}(_BaseGradient__WEBPACK_IMPORTED_MODULE_0__.BaseGradient));

(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.LinearGradient", LinearGradient);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/gradient/RadialGradient.ts":
/*!*******************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/gradient/RadialGradient.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RadialGradient: () => (/* binding */ RadialGradient)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _BaseGradient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseGradient */ "../../../dev/gui/src/2D/controls/gradient/BaseGradient.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Misc/typeStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__);



/**
 * Gradient formed from two circles with their own centers and radius.
 * The coordinates of the circles centers are relative to the canvas' space, not to any control's space.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient
 */
var RadialGradient = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(RadialGradient, _super);
    /**
     * Creates a new radial gradient
     * @param x0 x coordinate of the first circle's center
     * @param y0 y coordinate of the first circle's center
     * @param r0 radius of the first circle
     * @param x1 x coordinate of the second circle's center
     * @param y1 y coordinate of the second circle's center
     * @param r1 radius of the second circle
     */
    function RadialGradient(x0, y0, r0, x1, y1, r1) {
        var _this = _super.call(this) || this;
        _this._x0 = x0 !== null && x0 !== void 0 ? x0 : 0;
        _this._y0 = y0 !== null && y0 !== void 0 ? y0 : 0;
        _this._r0 = r0 !== null && r0 !== void 0 ? r0 : 0;
        _this._x1 = x1 !== null && x1 !== void 0 ? x1 : 0;
        _this._y1 = y1 !== null && y1 !== void 0 ? y1 : 0;
        _this._r1 = r1 !== null && r1 !== void 0 ? r1 : 0;
        return _this;
    }
    RadialGradient.prototype._createCanvasGradient = function (context) {
        return context.createRadialGradient(this._x0, this._y0, this._r0, this._x1, this._y1, this._r1);
    };
    Object.defineProperty(RadialGradient.prototype, "x0", {
        /** x coordinate of the first circle's center */
        get: function () {
            return this._x0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "x1", {
        /** x coordinate of the second circle's center */
        get: function () {
            return this._x1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "y0", {
        /** y coordinate of the first circle's center */
        get: function () {
            return this._y0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "y1", {
        /** y coordinate of the second circle's center */
        get: function () {
            return this._y1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "r0", {
        /** radius of the first circle */
        get: function () {
            return this._r0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialGradient.prototype, "r1", {
        /** radius of the second circle */
        get: function () {
            return this._r1;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Class name of the gradient
     * @returns the class name of the gradient
     */
    RadialGradient.prototype.getClassName = function () {
        return "RadialGradient";
    };
    /**
     * Serializes this gradient
     * @param serializationObject the object to serialize to
     */
    RadialGradient.prototype.serialize = function (serializationObject) {
        _super.prototype.serialize.call(this, serializationObject);
        serializationObject.x0 = this._x0;
        serializationObject.y0 = this._y0;
        serializationObject.r0 = this._r0;
        serializationObject.x1 = this._x1;
        serializationObject.y1 = this._y1;
        serializationObject.r1 = this._r1;
    };
    /**
     * Parses a gradient from a serialization object
     * @param serializationObject the object to parse from
     */
    RadialGradient.prototype.parse = function (serializationObject) {
        _super.prototype.parse.call(this, serializationObject);
        this._x0 = serializationObject.x0;
        this._y0 = serializationObject.y0;
        this._r0 = serializationObject.r0;
        this._x1 = serializationObject.x1;
        this._y1 = serializationObject.y1;
        this._r1 = serializationObject.r1;
    };
    return RadialGradient;
}(_BaseGradient__WEBPACK_IMPORTED_MODULE_0__.BaseGradient));

(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.RadialGradient", RadialGradient);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/grid.ts":
/*!************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/grid.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Grid: () => (/* binding */ Grid)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./container */ "../../../dev/gui/src/2D/controls/container.ts");
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_3__);







/**
 * Class used to create a 2D grid container
 */
var Grid = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(Grid, _super);
    /**
     * Creates a new Grid
     * @param name defines control name
     */
    function Grid(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._rowDefinitions = new Array();
        _this._rowDefinitionObservers = [];
        _this._columnDefinitions = new Array();
        _this._columnDefinitionObservers = [];
        _this._cells = {};
        _this._childControls = new Array();
        return _this;
    }
    Object.defineProperty(Grid.prototype, "clipContent", {
        get: function () {
            return this._clipContent;
        },
        /**
         * Sets/Gets a boolean indicating that control content must be clipped
         * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children
         */
        set: function (value) {
            this._clipContent = value;
            // This value has to be replicated on all of the container cells
            for (var key in this._cells) {
                this._cells[key].clipContent = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "clipChildren", {
        get: function () {
            return this._clipChildren;
        },
        /**
         * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.
         * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children
         */
        set: function (value) {
            this._clipChildren = value;
            // This value has to be replicated on all of the container cells
            for (var key in this._cells) {
                this._cells[key].clipChildren = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "columnCount", {
        /**
         * Gets the number of columns
         */
        get: function () {
            return this._columnDefinitions.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "rowCount", {
        /**
         * Gets the number of rows
         */
        get: function () {
            return this._rowDefinitions.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "children", {
        /** Gets the list of children */
        get: function () {
            return this._childControls;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "cells", {
        /** Gets the list of cells (e.g. the containers) */
        get: function () {
            return this._cells;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the definition of a specific row
     * @param index defines the index of the row
     * @returns the row definition
     */
    Grid.prototype.getRowDefinition = function (index) {
        if (index < 0 || index >= this._rowDefinitions.length) {
            return null;
        }
        return this._rowDefinitions[index];
    };
    /**
     * Gets the definition of a specific column
     * @param index defines the index of the column
     * @returns the column definition
     */
    Grid.prototype.getColumnDefinition = function (index) {
        if (index < 0 || index >= this._columnDefinitions.length) {
            return null;
        }
        return this._columnDefinitions[index];
    };
    /**
     * Adds a new row to the grid
     * @param height defines the height of the row (either in pixel or a value between 0 and 1)
     * @param isPixel defines if the height is expressed in pixel (or in percentage)
     * @returns the current grid
     */
    Grid.prototype.addRowDefinition = function (height, isPixel) {
        var _this = this;
        if (isPixel === void 0) { isPixel = false; }
        this._rowDefinitions.push(new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(height, isPixel ? _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PIXEL : _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PERCENTAGE));
        this._rowDefinitionObservers.push(this._rowDefinitions[this.rowCount - 1].onChangedObservable.add(function () { return _this._markAsDirty(); }));
        this._markAsDirty();
        return this;
    };
    /**
     * Adds a new column to the grid
     * @param width defines the width of the column (either in pixel or a value between 0 and 1)
     * @param isPixel defines if the width is expressed in pixel (or in percentage)
     * @returns the current grid
     */
    Grid.prototype.addColumnDefinition = function (width, isPixel) {
        var _this = this;
        if (isPixel === void 0) { isPixel = false; }
        this._columnDefinitions.push(new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(width, isPixel ? _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PIXEL : _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PERCENTAGE));
        this._columnDefinitionObservers.push(this._columnDefinitions[this.columnCount - 1].onChangedObservable.add(function () { return _this._markAsDirty(); }));
        this._markAsDirty();
        return this;
    };
    /**
     * Update a row definition
     * @param index defines the index of the row to update
     * @param height defines the height of the row (either in pixel or a value between 0 and 1)
     * @param isPixel defines if the weight is expressed in pixel (or in percentage)
     * @returns the current grid
     */
    Grid.prototype.setRowDefinition = function (index, height, isPixel) {
        var _this = this;
        if (isPixel === void 0) { isPixel = false; }
        if (index < 0 || index >= this._rowDefinitions.length) {
            return this;
        }
        var current = this._rowDefinitions[index];
        if (current && current.isPixel === isPixel && current.value === height) {
            return this;
        }
        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);
        this._rowDefinitions[index] = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(height, isPixel ? _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PIXEL : _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PERCENTAGE);
        this._rowDefinitionObservers[index] = this._rowDefinitions[index].onChangedObservable.add(function () { return _this._markAsDirty(); });
        this._markAsDirty();
        return this;
    };
    /**
     * Update a column definition
     * @param index defines the index of the column to update
     * @param width defines the width of the column (either in pixel or a value between 0 and 1)
     * @param isPixel defines if the width is expressed in pixel (or in percentage)
     * @returns the current grid
     */
    Grid.prototype.setColumnDefinition = function (index, width, isPixel) {
        var _this = this;
        if (isPixel === void 0) { isPixel = false; }
        if (index < 0 || index >= this._columnDefinitions.length) {
            return this;
        }
        var current = this._columnDefinitions[index];
        if (current && current.isPixel === isPixel && current.value === width) {
            return this;
        }
        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);
        this._columnDefinitions[index] = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(width, isPixel ? _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PIXEL : _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PERCENTAGE);
        this._columnDefinitionObservers[index] = this._columnDefinitions[index].onChangedObservable.add(function () { return _this._markAsDirty(); });
        this._markAsDirty();
        return this;
    };
    /**
     * Gets the list of children stored in a specific cell
     * @param row defines the row to check
     * @param column defines the column to check
     * @returns the list of controls
     */
    Grid.prototype.getChildrenAt = function (row, column) {
        var cell = this._cells["".concat(row, ":").concat(column)];
        if (!cell) {
            return null;
        }
        return cell.children;
    };
    /**
     * Gets a string representing the child cell info (row x column)
     * @param child defines the control to get info from
     * @returns a string containing the child cell info (row x column)
     */
    Grid.prototype.getChildCellInfo = function (child) {
        return child._tag;
    };
    Grid.prototype._removeCell = function (cell, key) {
        if (!cell) {
            return;
        }
        _super.prototype.removeControl.call(this, cell);
        for (var _i = 0, _a = cell.children; _i < _a.length; _i++) {
            var control = _a[_i];
            var childIndex = this._childControls.indexOf(control);
            if (childIndex !== -1) {
                this._childControls.splice(childIndex, 1);
            }
        }
        delete this._cells[key];
    };
    Grid.prototype._offsetCell = function (previousKey, key) {
        if (!this._cells[key]) {
            return;
        }
        this._cells[previousKey] = this._cells[key];
        for (var _i = 0, _a = this._cells[previousKey].children; _i < _a.length; _i++) {
            var control = _a[_i];
            control._tag = previousKey;
        }
        delete this._cells[key];
    };
    /**
     * Remove a column definition at specified index
     * @param index defines the index of the column to remove
     * @returns the current grid
     */
    Grid.prototype.removeColumnDefinition = function (index) {
        if (index < 0 || index >= this._columnDefinitions.length) {
            return this;
        }
        for (var x = 0; x < this._rowDefinitions.length; x++) {
            var key = "".concat(x, ":").concat(index);
            var cell = this._cells[key];
            this._removeCell(cell, key);
        }
        for (var x = 0; x < this._rowDefinitions.length; x++) {
            for (var y = index + 1; y < this._columnDefinitions.length; y++) {
                var previousKey = "".concat(x, ":").concat(y - 1);
                var key = "".concat(x, ":").concat(y);
                this._offsetCell(previousKey, key);
            }
        }
        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);
        this._columnDefinitions.splice(index, 1);
        this._columnDefinitionObservers.splice(index, 1);
        this._markAsDirty();
        return this;
    };
    /**
     * Remove a row definition at specified index
     * @param index defines the index of the row to remove
     * @returns the current grid
     */
    Grid.prototype.removeRowDefinition = function (index) {
        if (index < 0 || index >= this._rowDefinitions.length) {
            return this;
        }
        for (var y = 0; y < this._columnDefinitions.length; y++) {
            var key = "".concat(index, ":").concat(y);
            var cell = this._cells[key];
            this._removeCell(cell, key);
        }
        for (var y = 0; y < this._columnDefinitions.length; y++) {
            for (var x = index + 1; x < this._rowDefinitions.length; x++) {
                var previousKey = "".concat(x - 1, ":").concat(y);
                var key = "".concat(x, ":").concat(y);
                this._offsetCell(previousKey, key);
            }
        }
        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);
        this._rowDefinitions.splice(index, 1);
        this._rowDefinitionObservers.splice(index, 1);
        this._markAsDirty();
        return this;
    };
    /**
     * Adds a new control to the current grid
     * @param control defines the control to add
     * @param row defines the row where to add the control (0 by default)
     * @param column defines the column where to add the control (0 by default)
     * @returns the current grid
     */
    Grid.prototype.addControl = function (control, row, column) {
        if (row === void 0) { row = 0; }
        if (column === void 0) { column = 0; }
        if (this._rowDefinitions.length === 0) {
            // Add default row definition
            this.addRowDefinition(1, false);
        }
        if (this._columnDefinitions.length === 0) {
            // Add default column definition
            this.addColumnDefinition(1, false);
        }
        if (this._childControls.indexOf(control) !== -1) {
            babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_3__.Tools.Warn("Control (Name:".concat(control.name, ", UniqueId:").concat(control.uniqueId, ") is already associated with this grid. You must remove it before reattaching it"));
            return this;
        }
        var x = Math.min(row, this._rowDefinitions.length - 1);
        var y = Math.min(column, this._columnDefinitions.length - 1);
        var key = "".concat(x, ":").concat(y);
        var goodContainer = this._cells[key];
        if (!goodContainer) {
            goodContainer = new _container__WEBPACK_IMPORTED_MODULE_0__.Container(key);
            this._cells[key] = goodContainer;
            goodContainer.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
            goodContainer.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
            goodContainer.clipContent = this.clipContent;
            goodContainer.clipChildren = this.clipChildren;
            _super.prototype.addControl.call(this, goodContainer);
        }
        goodContainer.addControl(control);
        this._childControls.push(control);
        control._tag = key;
        control.parent = this;
        this._markAsDirty();
        return this;
    };
    /**
     * Removes a control from the current container
     * @param control defines the control to remove
     * @returns the current container
     */
    Grid.prototype.removeControl = function (control) {
        var index = this._childControls.indexOf(control);
        if (index !== -1) {
            this._childControls.splice(index, 1);
        }
        var cell = this._cells[control._tag];
        if (cell) {
            cell.removeControl(control);
            control._tag = null;
        }
        this._markAsDirty();
        return this;
    };
    Grid.prototype._getTypeName = function () {
        return "Grid";
    };
    Grid.prototype._getGridDefinitions = function (definitionCallback) {
        var widths = [];
        var heights = [];
        var lefts = [];
        var tops = [];
        var availableWidth = this._currentMeasure.width;
        var globalWidthPercentage = 0;
        var availableHeight = this._currentMeasure.height;
        var globalHeightPercentage = 0;
        // Heights
        var index = 0;
        for (var _i = 0, _a = this._rowDefinitions; _i < _a.length; _i++) {
            var rowDefinition = _a[_i];
            if (rowDefinition.isPixel) {
                var height = rowDefinition.getValue(this._host);
                availableHeight -= height;
                heights[index] = height;
            }
            else {
                globalHeightPercentage += rowDefinition.value;
            }
            index++;
        }
        var top = 0;
        index = 0;
        for (var _b = 0, _c = this._rowDefinitions; _b < _c.length; _b++) {
            var rowDefinition = _c[_b];
            tops.push(top);
            if (!rowDefinition.isPixel) {
                var height = Math.round((rowDefinition.value / globalHeightPercentage) * availableHeight);
                top += height;
                heights[index] = height;
            }
            else {
                top += rowDefinition.getValue(this._host);
            }
            index++;
        }
        // Widths
        index = 0;
        for (var _d = 0, _e = this._columnDefinitions; _d < _e.length; _d++) {
            var columnDefinition = _e[_d];
            if (columnDefinition.isPixel) {
                var width = columnDefinition.getValue(this._host);
                availableWidth -= width;
                widths[index] = width;
            }
            else {
                globalWidthPercentage += columnDefinition.value;
            }
            index++;
        }
        var left = 0;
        index = 0;
        for (var _f = 0, _g = this._columnDefinitions; _f < _g.length; _f++) {
            var columnDefinition = _g[_f];
            lefts.push(left);
            if (!columnDefinition.isPixel) {
                var width = Math.round((columnDefinition.value / globalWidthPercentage) * availableWidth);
                left += width;
                widths[index] = width;
            }
            else {
                left += columnDefinition.getValue(this._host);
            }
            index++;
        }
        definitionCallback(lefts, tops, widths, heights);
    };
    Grid.prototype._additionalProcessing = function (parentMeasure, context) {
        var _this = this;
        this._getGridDefinitions(function (lefts, tops, widths, heights) {
            // Setting child sizes
            for (var key in _this._cells) {
                if (!Object.prototype.hasOwnProperty.call(_this._cells, key)) {
                    continue;
                }
                var split = key.split(":");
                var x = parseInt(split[0]);
                var y = parseInt(split[1]);
                var cell = _this._cells[key];
                cell.leftInPixels = lefts[y];
                cell.topInPixels = tops[x];
                cell.widthInPixels = widths[y];
                cell.heightInPixels = heights[x];
                cell._left.ignoreAdaptiveScaling = true;
                cell._top.ignoreAdaptiveScaling = true;
                cell._width.ignoreAdaptiveScaling = true;
                cell._height.ignoreAdaptiveScaling = true;
            }
        });
        _super.prototype._additionalProcessing.call(this, parentMeasure, context);
    };
    Grid.prototype._flagDescendantsAsMatrixDirty = function () {
        for (var key in this._cells) {
            if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {
                continue;
            }
            var child = this._cells[key];
            child._markMatrixAsDirty();
        }
    };
    Grid.prototype._renderHighlightSpecific = function (context) {
        var _this = this;
        _super.prototype._renderHighlightSpecific.call(this, context);
        this._getGridDefinitions(function (lefts, tops, widths, heights) {
            // Columns
            for (var index = 0; index < lefts.length; index++) {
                var left = _this._currentMeasure.left + lefts[index] + widths[index];
                context.beginPath();
                context.moveTo(left, _this._currentMeasure.top);
                context.lineTo(left, _this._currentMeasure.top + _this._currentMeasure.height);
                context.stroke();
            }
            // Rows
            for (var index = 0; index < tops.length; index++) {
                var top_1 = _this._currentMeasure.top + tops[index] + heights[index];
                context.beginPath();
                context.moveTo(_this._currentMeasure.left, top_1);
                context.lineTo(_this._currentMeasure.left + _this._currentMeasure.width, top_1);
                context.stroke();
            }
        });
        context.restore();
    };
    /** Releases associated resources */
    Grid.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        for (var _i = 0, _a = this._childControls; _i < _a.length; _i++) {
            var control = _a[_i];
            control.dispose();
        }
        for (var index = 0; index < this._rowDefinitions.length; index++) {
            this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);
        }
        for (var index = 0; index < this._columnDefinitions.length; index++) {
            this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);
        }
        this._rowDefinitionObservers.length = 0;
        this._rowDefinitions.length = 0;
        this._columnDefinitionObservers.length = 0;
        this._columnDefinitions.length = 0;
        this._cells = {};
        this._childControls.length = 0;
    };
    /**
     * Serializes the current control
     * @param serializationObject defined the JSON serialized object
     * @param force force serialization even if isSerializable === false
     */
    Grid.prototype.serialize = function (serializationObject, force) {
        _super.prototype.serialize.call(this, serializationObject, force);
        if (!this.isSerializable && !force) {
            return;
        }
        serializationObject.columnCount = this.columnCount;
        serializationObject.rowCount = this.rowCount;
        serializationObject.columns = [];
        serializationObject.rows = [];
        serializationObject.tags = [];
        for (var i = 0; i < this.columnCount; ++i) {
            var cd = this.getColumnDefinition(i);
            var childSerializationObject = { value: cd === null || cd === void 0 ? void 0 : cd.getValue(this.host), unit: cd === null || cd === void 0 ? void 0 : cd.unit };
            serializationObject.columns.push(childSerializationObject);
        }
        for (var i = 0; i < this.rowCount; ++i) {
            var rd = this.getRowDefinition(i);
            var childSerializationObject = { value: rd === null || rd === void 0 ? void 0 : rd.getValue(this.host), unit: rd === null || rd === void 0 ? void 0 : rd.unit };
            serializationObject.rows.push(childSerializationObject);
        }
        this.children.forEach(function (child) {
            serializationObject.tags.push(child._tag);
        });
    };
    /**
     * @internal
     */
    Grid.prototype._parseFromContent = function (serializedObject, host) {
        _super.prototype._parseFromContent.call(this, serializedObject, host);
        var children = [];
        this.children.forEach(function (child) {
            children.push(child);
        });
        this.removeRowDefinition(0);
        this.removeColumnDefinition(0);
        for (var i = 0; i < serializedObject.columnCount; ++i) {
            var columnValue = serializedObject.columns[i].value;
            var unit = serializedObject.columns[i].unit;
            this.addColumnDefinition(columnValue, unit === 1 ? true : false);
        }
        for (var i = 0; i < serializedObject.rowCount; ++i) {
            var rowValue = serializedObject.rows[i].value;
            var unit = serializedObject.rows[i].unit;
            this.addRowDefinition(rowValue, unit === 1 ? true : false);
        }
        for (var i = 0; i < children.length; ++i) {
            var cellInfo = serializedObject.tags[i];
            var rowNumber = parseInt(cellInfo.substring(0, cellInfo.search(":")));
            if (isNaN(rowNumber)) {
                rowNumber = 0;
            }
            var columnNumber = parseInt(cellInfo.substring(cellInfo.search(":") + 1));
            if (isNaN(columnNumber)) {
                columnNumber = 0;
            }
            this.addControl(children[i], rowNumber, columnNumber);
        }
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_3__.serialize)()
    ], Grid.prototype, "clipContent", null);
    return Grid;
}(_container__WEBPACK_IMPORTED_MODULE_0__.Container));
(0,babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_3__.RegisterClass)("BABYLON.GUI.Grid", Grid);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/image.ts":
/*!*************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/image.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Image: () => (/* binding */ Image)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/engineStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");







/**
 * Class used to create 2D images
 */
var Image = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Image, _super);
    /**
     * Creates a new Image
     * @param name defines the control name
     * @param url defines the image url
     */
    function Image(name, url) {
        if (url === void 0) { url = null; }
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._workingCanvas = null;
        _this._loaded = false;
        _this._stretch = Image.STRETCH_FILL;
        _this._source = null;
        _this._autoScale = false;
        _this._sourceLeft = 0;
        _this._sourceTop = 0;
        _this._sourceWidth = 0;
        _this._sourceHeight = 0;
        _this._svgAttributesComputationCompleted = false;
        _this._isSVG = false;
        _this._cellWidth = 0;
        _this._cellHeight = 0;
        _this._cellId = -1;
        _this._populateNinePatchSlicesFromImage = false;
        _this._imageDataCache = { data: null, key: "" };
        /**
         * Observable notified when the content is loaded
         */
        _this.onImageLoadedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed
         */
        _this.onSVGAttributesComputedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        _this.source = url;
        return _this;
    }
    Object.defineProperty(Image.prototype, "isLoaded", {
        /**
         * Gets a boolean indicating that the content is loaded
         */
        get: function () {
            return this._loaded;
        },
        enumerable: false,
        configurable: true
    });
    Image.prototype.isReady = function () {
        return this.isLoaded;
    };
    Object.defineProperty(Image.prototype, "detectPointerOnOpaqueOnly", {
        /**
         * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.
         * Beware using this as this will consume more memory as the image has to be stored twice
         */
        get: function () {
            return this._detectPointerOnOpaqueOnly;
        },
        set: function (value) {
            if (this._detectPointerOnOpaqueOnly === value) {
                return;
            }
            this._detectPointerOnOpaqueOnly = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "sliceLeft", {
        /**
         * Gets or sets the left value for slicing (9-patch)
         */
        get: function () {
            return this._sliceLeft;
        },
        set: function (value) {
            if (this._sliceLeft === value) {
                return;
            }
            this._sliceLeft = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "sliceRight", {
        /**
         * Gets or sets the right value for slicing (9-patch)
         */
        get: function () {
            return this._sliceRight;
        },
        set: function (value) {
            if (this._sliceRight === value) {
                return;
            }
            this._sliceRight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "sliceTop", {
        /**
         * Gets or sets the top value for slicing (9-patch)
         */
        get: function () {
            return this._sliceTop;
        },
        set: function (value) {
            if (this._sliceTop === value) {
                return;
            }
            this._sliceTop = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "sliceBottom", {
        /**
         * Gets or sets the bottom value for slicing (9-patch)
         */
        get: function () {
            return this._sliceBottom;
        },
        set: function (value) {
            if (this._sliceBottom === value) {
                return;
            }
            this._sliceBottom = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "sourceLeft", {
        /**
         * Gets or sets the left coordinate in the source image
         */
        get: function () {
            return this._sourceLeft;
        },
        set: function (value) {
            if (this._sourceLeft === value) {
                return;
            }
            this._sourceLeft = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "sourceTop", {
        /**
         * Gets or sets the top coordinate in the source image
         */
        get: function () {
            return this._sourceTop;
        },
        set: function (value) {
            if (this._sourceTop === value) {
                return;
            }
            this._sourceTop = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "sourceWidth", {
        /**
         * Gets or sets the width to capture in the source image
         */
        get: function () {
            return this._sourceWidth;
        },
        set: function (value) {
            if (this._sourceWidth === value) {
                return;
            }
            this._sourceWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "sourceHeight", {
        /**
         * Gets or sets the height to capture in the source image
         */
        get: function () {
            return this._sourceHeight;
        },
        set: function (value) {
            if (this._sourceHeight === value) {
                return;
            }
            this._sourceHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "imageWidth", {
        /**
         * Gets the image width
         */
        get: function () {
            return this._imageWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "imageHeight", {
        /**
         * Gets the image height
         */
        get: function () {
            return this._imageHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "populateNinePatchSlicesFromImage", {
        /**
         * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data
         */
        get: function () {
            return this._populateNinePatchSlicesFromImage;
        },
        set: function (value) {
            if (this._populateNinePatchSlicesFromImage === value) {
                return;
            }
            this._populateNinePatchSlicesFromImage = value;
            if (this._populateNinePatchSlicesFromImage && this._loaded) {
                this._extractNinePatchSliceDataFromImage();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "isSVG", {
        /** Indicates if the format of the image is SVG */
        get: function () {
            return this._isSVG;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "svgAttributesComputationCompleted", {
        /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */
        get: function () {
            return this._svgAttributesComputationCompleted;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "autoScale", {
        /**
         * Gets or sets a boolean indicating if the image can force its container to adapt its size
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image
         */
        get: function () {
            return this._autoScale;
        },
        set: function (value) {
            if (this._autoScale === value) {
                return;
            }
            this._autoScale = value;
            if (value && this._loaded) {
                this.synchronizeSizeWithContent();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "stretch", {
        /** Gets or sets the stretching mode used by the image */
        get: function () {
            return this._stretch;
        },
        set: function (value) {
            if (this._stretch === value) {
                return;
            }
            this._stretch = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @internal
     */
    Image.prototype._rotate90 = function (n, preserveProperties) {
        var _a, _b;
        if (preserveProperties === void 0) { preserveProperties = false; }
        var width = this._domImage.width;
        var height = this._domImage.height;
        // Should abstract platform instead of using LastCreatedEngine
        var engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.EngineStore.LastCreatedEngine;
        if (!engine) {
            throw new Error("Invalid engine. Unable to create a canvas.");
        }
        var canvas = engine.createCanvas(height, width);
        var context = canvas.getContext("2d");
        context.translate(canvas.width / 2, canvas.height / 2);
        context.rotate((n * Math.PI) / 2);
        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);
        var dataUrl = canvas.toDataURL("image/jpg");
        var rotatedImage = new Image(this.name + "rotated", dataUrl);
        if (preserveProperties) {
            rotatedImage._stretch = this._stretch;
            rotatedImage._autoScale = this._autoScale;
            rotatedImage._cellId = this._cellId;
            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;
            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;
        }
        this._handleRotationForSVGImage(this, rotatedImage, n);
        this._imageDataCache.data = null;
        return rotatedImage;
    };
    Image.prototype._handleRotationForSVGImage = function (srcImage, dstImage, n) {
        var _this = this;
        if (!srcImage._isSVG) {
            return;
        }
        if (srcImage._svgAttributesComputationCompleted) {
            this._rotate90SourceProperties(srcImage, dstImage, n);
            this._markAsDirty();
        }
        else {
            srcImage.onSVGAttributesComputedObservable.addOnce(function () {
                _this._rotate90SourceProperties(srcImage, dstImage, n);
                _this._markAsDirty();
            });
        }
    };
    Image.prototype._rotate90SourceProperties = function (srcImage, dstImage, n) {
        var _a, _b;
        var srcLeft = srcImage.sourceLeft, srcTop = srcImage.sourceTop, srcWidth = srcImage.domImage.width, srcHeight = srcImage.domImage.height;
        var dstLeft = srcLeft, dstTop = srcTop, dstWidth = srcImage.sourceWidth, dstHeight = srcImage.sourceHeight;
        if (n != 0) {
            var mult = n < 0 ? -1 : 1;
            n = n % 4;
            for (var i = 0; i < Math.abs(n); ++i) {
                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;
                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;
                _a = [dstHeight, dstWidth], dstWidth = _a[0], dstHeight = _a[1];
                if (n < 0) {
                    dstTop -= dstHeight;
                }
                else {
                    dstLeft -= dstWidth;
                }
                srcLeft = dstLeft;
                srcTop = dstTop;
                _b = [srcHeight, srcWidth], srcWidth = _b[0], srcHeight = _b[1];
            }
        }
        dstImage.sourceLeft = dstLeft;
        dstImage.sourceTop = dstTop;
        dstImage.sourceWidth = dstWidth;
        dstImage.sourceHeight = dstHeight;
    };
    Image.prototype._extractNinePatchSliceDataFromImage = function () {
        var _a, _b;
        var width = this._domImage.width;
        var height = this._domImage.height;
        if (!this._workingCanvas) {
            var engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.EngineStore.LastCreatedEngine;
            if (!engine) {
                throw new Error("Invalid engine. Unable to create a canvas.");
            }
            this._workingCanvas = engine.createCanvas(width, height);
        }
        var canvas = this._workingCanvas;
        var context = canvas.getContext("2d");
        context.drawImage(this._domImage, 0, 0, width, height);
        var imageData = context.getImageData(0, 0, width, height);
        // Left and right
        this._sliceLeft = -1;
        this._sliceRight = -1;
        for (var x = 0; x < width; x++) {
            var alpha = imageData.data[x * 4 + 3];
            if (alpha > 127 && this._sliceLeft === -1) {
                this._sliceLeft = x;
                continue;
            }
            if (alpha < 127 && this._sliceLeft > -1) {
                this._sliceRight = x;
                break;
            }
        }
        // top and bottom
        this._sliceTop = -1;
        this._sliceBottom = -1;
        for (var y = 0; y < height; y++) {
            var alpha = imageData.data[y * width * 4 + 3];
            if (alpha > 127 && this._sliceTop === -1) {
                this._sliceTop = y;
                continue;
            }
            if (alpha < 127 && this._sliceTop > -1) {
                this._sliceBottom = y;
                break;
            }
        }
    };
    Object.defineProperty(Image.prototype, "domImage", {
        get: function () {
            return this._domImage;
        },
        /**
         * Gets or sets the internal DOM image used to render the control
         */
        set: function (value) {
            var _this = this;
            this._domImage = value;
            this._loaded = false;
            this._imageDataCache.data = null;
            if (this._domImage.width) {
                this._onImageLoaded();
            }
            else {
                this._domImage.onload = function () {
                    _this._onImageLoaded();
                };
            }
        },
        enumerable: false,
        configurable: true
    });
    Image.prototype._onImageLoaded = function () {
        this._imageDataCache.data = null;
        this._imageWidth = this._domImage.width;
        this._imageHeight = this._domImage.height;
        this._loaded = true;
        if (this._populateNinePatchSlicesFromImage) {
            this._extractNinePatchSliceDataFromImage();
        }
        if (this._autoScale) {
            this.synchronizeSizeWithContent();
        }
        this.onImageLoadedObservable.notifyObservers(this);
        this._markAsDirty();
    };
    Object.defineProperty(Image.prototype, "source", {
        /**
         * Gets the image source url
         */
        get: function () {
            return this._source;
        },
        /**
         * Gets or sets image source url
         */
        set: function (value) {
            var _this = this;
            var _a, _b, _c, _d, _e;
            if (this._urlRewriter && value) {
                value = this._urlRewriter(value);
            }
            if (this._source === value) {
                return;
            }
            this._removeCacheUsage(this._source);
            this._loaded = false;
            this._source = value;
            this._imageDataCache.data = null;
            if (value) {
                value = this._svgCheck(value);
            }
            // Should abstract platform instead of using LastCreatedEngine
            var engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.EngineStore.LastCreatedEngine;
            if (!engine) {
                throw new Error("Invalid engine. Unable to create a canvas.");
            }
            if (value && Image.SourceImgCache.has(value)) {
                var cachedData = Image.SourceImgCache.get(value);
                this._domImage = cachedData.img;
                cachedData.timesUsed += 1;
                if (cachedData.loaded) {
                    this._onImageLoaded();
                }
                else {
                    cachedData.waitingForLoadCallback.push(this._onImageLoaded.bind(this));
                }
                return;
            }
            this._domImage = engine.createCanvasImage();
            // need to add to enforce rendering
            var imgElement = this._domImage;
            var addedToDom = false;
            if (imgElement.style && ((_c = this._source) === null || _c === void 0 ? void 0 : _c.endsWith(".svg"))) {
                imgElement.style.visibility = "hidden";
                imgElement.style.position = "absolute";
                imgElement.style.top = "0";
                (_e = (_d = engine.getRenderingCanvas()) === null || _d === void 0 ? void 0 : _d.parentNode) === null || _e === void 0 ? void 0 : _e.appendChild(imgElement);
                addedToDom = true;
            }
            if (value) {
                Image.SourceImgCache.set(value, { img: this._domImage, timesUsed: 1, loaded: false, waitingForLoadCallback: [this._onImageLoaded.bind(this)] });
            }
            this._domImage.onload = function () {
                if (value) {
                    var cachedData = Image.SourceImgCache.get(value);
                    if (cachedData) {
                        cachedData.loaded = true;
                        for (var _i = 0, _a = cachedData.waitingForLoadCallback; _i < _a.length; _i++) {
                            var waitingCallback = _a[_i];
                            waitingCallback();
                        }
                        cachedData.waitingForLoadCallback.length = 0;
                        addedToDom && imgElement.remove();
                        return;
                    }
                }
                _this._onImageLoaded();
                addedToDom && imgElement.remove();
            };
            if (value) {
                babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Tools.SetCorsBehavior(value, this._domImage);
                babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Tools.SetReferrerPolicyBehavior(this.referrerPolicy, this._domImage);
                this._domImage.src = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Resets the internal Image Element cache. Can reduce memory usage.
     */
    Image.ResetImageCache = function () {
        Image.SourceImgCache.clear();
    };
    Image.prototype._removeCacheUsage = function (source) {
        var value = source && Image.SourceImgCache.get(source);
        if (value) {
            value.timesUsed -= 1;
            // Remove from DOM
            var htmlElement = value.img;
            if (htmlElement.parentNode) {
                htmlElement.parentNode.removeChild(htmlElement);
            }
            // Since the image isn't being used anymore, we can clean it from the cache
            if (value.timesUsed === 0) {
                Image.SourceImgCache.delete(source);
            }
        }
    };
    /**
     * Checks for svg document with icon id present
     * @param value the source svg
     * @returns the svg
     */
    Image.prototype._svgCheck = function (value) {
        var _this = this;
        if (window.SVGSVGElement && value.search(/(\.svg|\.svg?[?|#].*)$/gi) !== -1 && value.indexOf("#") === value.lastIndexOf("#")) {
            this._isSVG = true;
            var svgsrc_1 = value.split("#")[0];
            var elemid_1 = value.split("#")[1];
            // check if object alr exist in document
            var svgExist_1 = document.body.querySelector('object[data="' + svgsrc_1 + '"]');
            if (svgExist_1) {
                var svgDoc = svgExist_1.contentDocument;
                // get viewbox width and height, get svg document width and height in px
                if (svgDoc && svgDoc.documentElement) {
                    var vb = svgDoc.documentElement.getAttribute("viewBox");
                    var docwidth = Number(svgDoc.documentElement.getAttribute("width"));
                    var docheight = Number(svgDoc.documentElement.getAttribute("height"));
                    var elem = svgDoc.getElementById(elemid_1);
                    if (elem && vb && docwidth && docheight) {
                        this._getSVGAttribs(svgExist_1, elemid_1);
                        return value;
                    }
                }
                // wait for object to load
                svgExist_1.addEventListener("load", function () {
                    _this._getSVGAttribs(svgExist_1, elemid_1);
                });
            }
            else {
                // create document object
                var svgImage = document.createElement("object");
                svgImage.data = svgsrc_1;
                svgImage.type = "image/svg+xml";
                svgImage.width = "0%";
                svgImage.height = "0%";
                document.body.appendChild(svgImage);
                // when the object has loaded, get the element attribs
                svgImage.onload = function () {
                    var svgobj = document.body.querySelector('object[data="' + svgsrc_1 + '"]');
                    if (svgobj) {
                        _this._getSVGAttribs(svgobj, elemid_1);
                    }
                };
            }
            return svgsrc_1;
        }
        else {
            return value;
        }
    };
    /**
     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically
     * given external svg file and icon id
     * @param svgsrc
     * @param elemid
     */
    Image.prototype._getSVGAttribs = function (svgsrc, elemid) {
        var svgDoc = svgsrc.contentDocument;
        // get viewbox width and height, get svg document width and height in px
        if (svgDoc && svgDoc.documentElement) {
            var vb = svgDoc.documentElement.getAttribute("viewBox");
            var docwidth = Number(svgDoc.documentElement.getAttribute("width"));
            var docheight = Number(svgDoc.documentElement.getAttribute("height"));
            // get element bbox and matrix transform
            var elem = svgDoc.getElementById(elemid);
            if (vb && docwidth && docheight && elem) {
                var vb_width = Number(vb.split(" ")[2]);
                var vb_height = Number(vb.split(" ")[3]);
                var elem_bbox = elem.getBBox();
                var elem_matrix_a = 1;
                var elem_matrix_d = 1;
                var elem_matrix_e = 0;
                var elem_matrix_f = 0;
                var mainMatrix = elem.transform.baseVal.consolidate().matrix;
                if (elem.transform && elem.transform.baseVal.consolidate()) {
                    elem_matrix_a = mainMatrix.a;
                    elem_matrix_d = mainMatrix.d;
                    elem_matrix_e = mainMatrix.e;
                    elem_matrix_f = mainMatrix.f;
                }
                // compute source coordinates and dimensions
                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;
                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;
                this.sourceWidth = elem_bbox.width * elem_matrix_a * (docwidth / vb_width);
                this.sourceHeight = elem_bbox.height * elem_matrix_d * (docheight / vb_height);
                this._svgAttributesComputationCompleted = true;
                this.onSVGAttributesComputedObservable.notifyObservers(this);
            }
        }
    };
    Object.defineProperty(Image.prototype, "cellWidth", {
        /**
         * Gets or sets the cell width to use when animation sheet is enabled
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image
         */
        get: function () {
            return this._cellWidth;
        },
        set: function (value) {
            if (this._cellWidth === value) {
                return;
            }
            this._cellWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "cellHeight", {
        /**
         * Gets or sets the cell height to use when animation sheet is enabled
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image
         */
        get: function () {
            return this._cellHeight;
        },
        set: function (value) {
            if (this._cellHeight === value) {
                return;
            }
            this._cellHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "cellId", {
        /**
         * Gets or sets the cell id to use (this will turn on the animation sheet mode)
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image
         */
        get: function () {
            return this._cellId;
        },
        set: function (value) {
            if (this._cellId === value) {
                return;
            }
            this._cellId = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Tests if a given coordinates belong to the current control
     * @param x defines x coordinate to test
     * @param y defines y coordinate to test
     * @returns true if the coordinates are inside the control
     */
    Image.prototype.contains = function (x, y) {
        if (!_super.prototype.contains.call(this, x, y)) {
            return false;
        }
        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {
            return true;
        }
        var width = this._currentMeasure.width | 0;
        var height = this._currentMeasure.height | 0;
        var key = width + "_" + height;
        var imageData = this._imageDataCache.data;
        if (!imageData || this._imageDataCache.key !== key) {
            var canvas = this._workingCanvas;
            var context_1 = canvas.getContext("2d");
            this._imageDataCache.data = imageData = context_1.getImageData(0, 0, width, height).data;
            this._imageDataCache.key = key;
        }
        x = (x - this._currentMeasure.left) | 0;
        y = (y - this._currentMeasure.top) | 0;
        var pickedPixel = imageData[(x + y * width) * 4 + 3];
        return pickedPixel > 0;
    };
    Image.prototype._getTypeName = function () {
        return "Image";
    };
    /** Force the control to synchronize with its content */
    Image.prototype.synchronizeSizeWithContent = function () {
        if (!this._loaded) {
            return;
        }
        this.width = this._domImage.width + "px";
        this.height = this._domImage.height + "px";
    };
    Image.prototype._processMeasures = function (parentMeasure, context) {
        if (this._loaded) {
            switch (this._stretch) {
                case Image.STRETCH_NONE:
                    break;
                case Image.STRETCH_FILL:
                    break;
                case Image.STRETCH_UNIFORM:
                    break;
                case Image.STRETCH_NINE_PATCH:
                    break;
                case Image.STRETCH_EXTEND:
                    if (this._autoScale) {
                        this.synchronizeSizeWithContent();
                    }
                    if (this.parent && this.parent.parent) {
                        // Will update root size if root is not the top root
                        this.parent.adaptWidthToChildren = true;
                        this.parent.adaptHeightToChildren = true;
                    }
                    break;
            }
        }
        _super.prototype._processMeasures.call(this, parentMeasure, context);
    };
    Image.prototype._prepareWorkingCanvasForOpaqueDetection = function () {
        var _a, _b;
        if (!this._detectPointerOnOpaqueOnly) {
            return;
        }
        var width = this._currentMeasure.width;
        var height = this._currentMeasure.height;
        if (!this._workingCanvas) {
            var engine = ((_b = (_a = this._host) === null || _a === void 0 ? void 0 : _a.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine()) || babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.EngineStore.LastCreatedEngine;
            if (!engine) {
                throw new Error("Invalid engine. Unable to create a canvas.");
            }
            this._workingCanvas = engine.createCanvas(width, height);
        }
        var canvas = this._workingCanvas;
        var context = canvas.getContext("2d");
        context.clearRect(0, 0, width, height);
    };
    Image.prototype._drawImage = function (context, sx, sy, sw, sh, tx, ty, tw, th) {
        context.drawImage(this._domImage, sx, sy, sw, sh, tx, ty, tw, th);
        if (!this._detectPointerOnOpaqueOnly) {
            return;
        }
        var transform = context.getTransform();
        var canvas = this._workingCanvas;
        var workingCanvasContext = canvas.getContext("2d");
        workingCanvasContext.save();
        var ttx = tx - this._currentMeasure.left;
        var tty = ty - this._currentMeasure.top;
        workingCanvasContext.setTransform(transform.a, transform.b, transform.c, transform.d, (ttx + tw) / 2, (tty + th) / 2);
        workingCanvasContext.translate(-(ttx + tw) / 2, -(tty + th) / 2);
        workingCanvasContext.drawImage(this._domImage, sx, sy, sw, sh, ttx, tty, tw, th);
        workingCanvasContext.restore();
    };
    Image.prototype._draw = function (context) {
        context.save();
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        var x, y, width, height;
        if (this.cellId == -1) {
            x = this._sourceLeft;
            y = this._sourceTop;
            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;
            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;
        }
        else {
            var rowCount = this._domImage.naturalWidth / this.cellWidth;
            var column = (this.cellId / rowCount) >> 0;
            var row = this.cellId % rowCount;
            x = this.cellWidth * row;
            y = this.cellHeight * column;
            width = this.cellWidth;
            height = this.cellHeight;
        }
        this._prepareWorkingCanvasForOpaqueDetection();
        this._applyStates(context);
        if (this._loaded) {
            switch (this._stretch) {
                case Image.STRETCH_NONE:
                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                    break;
                case Image.STRETCH_FILL:
                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                    break;
                case Image.STRETCH_UNIFORM: {
                    var hRatio = this._currentMeasure.width / width;
                    var vRatio = this._currentMeasure.height / height;
                    var ratio = Math.min(hRatio, vRatio);
                    var centerX = (this._currentMeasure.width - width * ratio) / 2;
                    var centerY = (this._currentMeasure.height - height * ratio) / 2;
                    this._drawImage(context, x, y, width, height, this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);
                    break;
                }
                case Image.STRETCH_EXTEND:
                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
                    break;
                case Image.STRETCH_NINE_PATCH:
                    this._renderNinePatch(context, x, y, width, height);
                    break;
            }
        }
        context.restore();
    };
    Image.prototype._renderNinePatch = function (context, sx, sy, sw, sh) {
        var idealRatio = this.host.idealWidth
            ? this._width.getValue(this.host) / this.host.idealWidth
            : this.host.idealHeight
                ? this._height.getValue(this.host) / this.host.idealHeight
                : 1;
        var leftWidth = this._sliceLeft;
        var topHeight = this._sliceTop;
        var bottomHeight = sh - this._sliceBottom;
        var rightWidth = sw - this._sliceRight;
        var centerWidth = this._sliceRight - this._sliceLeft;
        var centerHeight = this._sliceBottom - this._sliceTop;
        var leftWidthAdjusted = Math.round(leftWidth * idealRatio);
        var topHeightAdjusted = Math.round(topHeight * idealRatio);
        var bottomHeightAdjusted = Math.round(bottomHeight * idealRatio);
        var rightWidthAdjusted = Math.round(rightWidth * idealRatio);
        var targetCenterWidth = Math.round(this._currentMeasure.width) - rightWidthAdjusted - leftWidthAdjusted + 2;
        var targetCenterHeight = Math.round(this._currentMeasure.height) - bottomHeightAdjusted - topHeightAdjusted + 2;
        var centerLeftOffset = Math.round(this._currentMeasure.left) + leftWidthAdjusted - 1;
        var centerTopOffset = Math.round(this._currentMeasure.top) + topHeightAdjusted - 1;
        var rightOffset = Math.round(this._currentMeasure.left + this._currentMeasure.width) - rightWidthAdjusted;
        var bottomOffset = Math.round(this._currentMeasure.top + this._currentMeasure.height) - bottomHeightAdjusted;
        //Top Left
        this._drawImage(context, sx, sy, leftWidth, topHeight, this._currentMeasure.left, this._currentMeasure.top, leftWidthAdjusted, topHeightAdjusted);
        //Top
        this._drawImage(context, sx + this._sliceLeft, sy, centerWidth, topHeight, centerLeftOffset + 1, this._currentMeasure.top, targetCenterWidth - 2, topHeightAdjusted);
        //Top Right
        this._drawImage(context, sx + this._sliceRight, sy, rightWidth, topHeight, rightOffset, this._currentMeasure.top, rightWidthAdjusted, topHeightAdjusted);
        //Left
        this._drawImage(context, sx, sy + this._sliceTop, leftWidth, centerHeight, this._currentMeasure.left, centerTopOffset + 1, leftWidthAdjusted, targetCenterHeight - 2);
        // Center
        this._drawImage(context, sx + this._sliceLeft, sy + this._sliceTop, centerWidth, centerHeight, centerLeftOffset + 1, centerTopOffset + 1, targetCenterWidth - 2, targetCenterHeight - 2);
        //Right
        this._drawImage(context, sx + this._sliceRight, sy + this._sliceTop, rightWidth, centerHeight, rightOffset, centerTopOffset + 1, rightWidthAdjusted, targetCenterHeight - 2);
        //Bottom Left
        this._drawImage(context, sx, sy + this._sliceBottom, leftWidth, bottomHeight, this._currentMeasure.left, bottomOffset, leftWidthAdjusted, bottomHeightAdjusted);
        //Bottom
        this._drawImage(context, sx + this.sliceLeft, sy + this._sliceBottom, centerWidth, bottomHeight, centerLeftOffset + 1, bottomOffset, targetCenterWidth - 2, bottomHeightAdjusted);
        //Bottom Right
        this._drawImage(context, sx + this._sliceRight, sy + this._sliceBottom, rightWidth, bottomHeight, rightOffset, bottomOffset, rightWidthAdjusted, bottomHeightAdjusted);
    };
    Image.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.onImageLoadedObservable.clear();
        this.onSVGAttributesComputedObservable.clear();
        this._removeCacheUsage(this._source);
    };
    /**
     * Cache of images to avoid loading the same image multiple times
     */
    Image.SourceImgCache = new Map();
    // Static
    /** STRETCH_NONE */
    Image.STRETCH_NONE = 0;
    /** STRETCH_FILL */
    Image.STRETCH_FILL = 1;
    /** STRETCH_UNIFORM */
    Image.STRETCH_UNIFORM = 2;
    /** STRETCH_EXTEND */
    Image.STRETCH_EXTEND = 3;
    /** NINE_PATCH */
    Image.STRETCH_NINE_PATCH = 4;
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "detectPointerOnOpaqueOnly", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "sliceLeft", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "sliceRight", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "sliceTop", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "sliceBottom", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "sourceLeft", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "sourceTop", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "sourceWidth", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "sourceHeight", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "populateNinePatchSlicesFromImage", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "autoScale", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "stretch", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "source", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "cellWidth", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "cellHeight", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Image.prototype, "cellId", null);
    return Image;
}(_control__WEBPACK_IMPORTED_MODULE_1__.Control));
(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.Image", Image);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/index.ts":
/*!*************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/index.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseGradient: () => (/* reexport safe */ _gradient_BaseGradient__WEBPACK_IMPORTED_MODULE_31__.BaseGradient),
/* harmony export */   BaseSlider: () => (/* reexport safe */ _sliders_baseSlider__WEBPACK_IMPORTED_MODULE_25__.BaseSlider),
/* harmony export */   Button: () => (/* reexport safe */ _button__WEBPACK_IMPORTED_MODULE_0__.Button),
/* harmony export */   Checkbox: () => (/* reexport safe */ _checkbox__WEBPACK_IMPORTED_MODULE_1__.Checkbox),
/* harmony export */   CheckboxGroup: () => (/* reexport safe */ _selector__WEBPACK_IMPORTED_MODULE_17__.CheckboxGroup),
/* harmony export */   ColorPicker: () => (/* reexport safe */ _colorpicker__WEBPACK_IMPORTED_MODULE_2__.ColorPicker),
/* harmony export */   Container: () => (/* reexport safe */ _container__WEBPACK_IMPORTED_MODULE_3__.Container),
/* harmony export */   Control: () => (/* reexport safe */ _control__WEBPACK_IMPORTED_MODULE_4__.Control),
/* harmony export */   DisplayGrid: () => (/* reexport safe */ _displayGrid__WEBPACK_IMPORTED_MODULE_24__.DisplayGrid),
/* harmony export */   Ellipse: () => (/* reexport safe */ _ellipse__WEBPACK_IMPORTED_MODULE_5__.Ellipse),
/* harmony export */   FocusableButton: () => (/* reexport safe */ _focusableButton__WEBPACK_IMPORTED_MODULE_6__.FocusableButton),
/* harmony export */   Grid: () => (/* reexport safe */ _grid__WEBPACK_IMPORTED_MODULE_8__.Grid),
/* harmony export */   Image: () => (/* reexport safe */ _image__WEBPACK_IMPORTED_MODULE_9__.Image),
/* harmony export */   ImageBasedSlider: () => (/* reexport safe */ _sliders_imageBasedSlider__WEBPACK_IMPORTED_MODULE_27__.ImageBasedSlider),
/* harmony export */   ImageScrollBar: () => (/* reexport safe */ _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_29__.ImageScrollBar),
/* harmony export */   InputPassword: () => (/* reexport safe */ _inputPassword__WEBPACK_IMPORTED_MODULE_12__.InputPassword),
/* harmony export */   InputText: () => (/* reexport safe */ _inputText__WEBPACK_IMPORTED_MODULE_10__.InputText),
/* harmony export */   InputTextArea: () => (/* reexport safe */ _inputTextArea__WEBPACK_IMPORTED_MODULE_11__.InputTextArea),
/* harmony export */   KeyPropertySet: () => (/* reexport safe */ _virtualKeyboard__WEBPACK_IMPORTED_MODULE_22__.KeyPropertySet),
/* harmony export */   Line: () => (/* reexport safe */ _line__WEBPACK_IMPORTED_MODULE_13__.Line),
/* harmony export */   LinearGradient: () => (/* reexport safe */ _gradient_LinearGradient__WEBPACK_IMPORTED_MODULE_32__.LinearGradient),
/* harmony export */   MultiLine: () => (/* reexport safe */ _multiLine__WEBPACK_IMPORTED_MODULE_14__.MultiLine),
/* harmony export */   RadialGradient: () => (/* reexport safe */ _gradient_RadialGradient__WEBPACK_IMPORTED_MODULE_33__.RadialGradient),
/* harmony export */   RadioButton: () => (/* reexport safe */ _radioButton__WEBPACK_IMPORTED_MODULE_15__.RadioButton),
/* harmony export */   RadioGroup: () => (/* reexport safe */ _selector__WEBPACK_IMPORTED_MODULE_17__.RadioGroup),
/* harmony export */   Rectangle: () => (/* reexport safe */ _rectangle__WEBPACK_IMPORTED_MODULE_23__.Rectangle),
/* harmony export */   ScrollBar: () => (/* reexport safe */ _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_28__.ScrollBar),
/* harmony export */   ScrollViewer: () => (/* reexport safe */ _scrollViewers_scrollViewer__WEBPACK_IMPORTED_MODULE_18__.ScrollViewer),
/* harmony export */   SelectionPanel: () => (/* reexport safe */ _selector__WEBPACK_IMPORTED_MODULE_17__.SelectionPanel),
/* harmony export */   SelectorGroup: () => (/* reexport safe */ _selector__WEBPACK_IMPORTED_MODULE_17__.SelectorGroup),
/* harmony export */   Slider: () => (/* reexport safe */ _sliders_slider__WEBPACK_IMPORTED_MODULE_26__.Slider),
/* harmony export */   SliderGroup: () => (/* reexport safe */ _selector__WEBPACK_IMPORTED_MODULE_17__.SliderGroup),
/* harmony export */   StackPanel: () => (/* reexport safe */ _stackPanel__WEBPACK_IMPORTED_MODULE_16__.StackPanel),
/* harmony export */   TextBlock: () => (/* reexport safe */ _textBlock__WEBPACK_IMPORTED_MODULE_19__.TextBlock),
/* harmony export */   TextWrapper: () => (/* reexport safe */ _textWrapper__WEBPACK_IMPORTED_MODULE_20__.TextWrapper),
/* harmony export */   TextWrapping: () => (/* reexport safe */ _textBlock__WEBPACK_IMPORTED_MODULE_19__.TextWrapping),
/* harmony export */   ToggleButton: () => (/* reexport safe */ _toggleButton__WEBPACK_IMPORTED_MODULE_21__.ToggleButton),
/* harmony export */   VirtualKeyboard: () => (/* reexport safe */ _virtualKeyboard__WEBPACK_IMPORTED_MODULE_22__.VirtualKeyboard),
/* harmony export */   name: () => (/* reexport safe */ _statics__WEBPACK_IMPORTED_MODULE_30__.name)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "../../../dev/gui/src/2D/controls/button.ts");
/* harmony import */ var _checkbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkbox */ "../../../dev/gui/src/2D/controls/checkbox.ts");
/* harmony import */ var _colorpicker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./colorpicker */ "../../../dev/gui/src/2D/controls/colorpicker.ts");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./container */ "../../../dev/gui/src/2D/controls/container.ts");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _ellipse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ellipse */ "../../../dev/gui/src/2D/controls/ellipse.ts");
/* harmony import */ var _focusableButton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./focusableButton */ "../../../dev/gui/src/2D/controls/focusableButton.ts");
/* harmony import */ var _focusableControl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./focusableControl */ "../../../dev/gui/src/2D/controls/focusableControl.ts");
/* harmony import */ var _grid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./grid */ "../../../dev/gui/src/2D/controls/grid.ts");
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./image */ "../../../dev/gui/src/2D/controls/image.ts");
/* harmony import */ var _inputText__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./inputText */ "../../../dev/gui/src/2D/controls/inputText.ts");
/* harmony import */ var _inputTextArea__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./inputTextArea */ "../../../dev/gui/src/2D/controls/inputTextArea.ts");
/* harmony import */ var _inputPassword__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./inputPassword */ "../../../dev/gui/src/2D/controls/inputPassword.ts");
/* harmony import */ var _line__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./line */ "../../../dev/gui/src/2D/controls/line.ts");
/* harmony import */ var _multiLine__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./multiLine */ "../../../dev/gui/src/2D/controls/multiLine.ts");
/* harmony import */ var _radioButton__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./radioButton */ "../../../dev/gui/src/2D/controls/radioButton.ts");
/* harmony import */ var _stackPanel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./stackPanel */ "../../../dev/gui/src/2D/controls/stackPanel.ts");
/* harmony import */ var _selector__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./selector */ "../../../dev/gui/src/2D/controls/selector.ts");
/* harmony import */ var _scrollViewers_scrollViewer__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./scrollViewers/scrollViewer */ "../../../dev/gui/src/2D/controls/scrollViewers/scrollViewer.ts");
/* harmony import */ var _textBlock__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");
/* harmony import */ var _textWrapper__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./textWrapper */ "../../../dev/gui/src/2D/controls/textWrapper.ts");
/* harmony import */ var _toggleButton__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./toggleButton */ "../../../dev/gui/src/2D/controls/toggleButton.ts");
/* harmony import */ var _virtualKeyboard__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./virtualKeyboard */ "../../../dev/gui/src/2D/controls/virtualKeyboard.ts");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./rectangle */ "../../../dev/gui/src/2D/controls/rectangle.ts");
/* harmony import */ var _displayGrid__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./displayGrid */ "../../../dev/gui/src/2D/controls/displayGrid.ts");
/* harmony import */ var _sliders_baseSlider__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./sliders/baseSlider */ "../../../dev/gui/src/2D/controls/sliders/baseSlider.ts");
/* harmony import */ var _sliders_slider__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./sliders/slider */ "../../../dev/gui/src/2D/controls/sliders/slider.ts");
/* harmony import */ var _sliders_imageBasedSlider__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./sliders/imageBasedSlider */ "../../../dev/gui/src/2D/controls/sliders/imageBasedSlider.ts");
/* harmony import */ var _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./sliders/scrollBar */ "../../../dev/gui/src/2D/controls/sliders/scrollBar.ts");
/* harmony import */ var _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./sliders/imageScrollBar */ "../../../dev/gui/src/2D/controls/sliders/imageScrollBar.ts");
/* harmony import */ var _statics__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./statics */ "../../../dev/gui/src/2D/controls/statics.ts");
/* harmony import */ var _gradient_BaseGradient__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./gradient/BaseGradient */ "../../../dev/gui/src/2D/controls/gradient/BaseGradient.ts");
/* harmony import */ var _gradient_LinearGradient__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./gradient/LinearGradient */ "../../../dev/gui/src/2D/controls/gradient/LinearGradient.ts");
/* harmony import */ var _gradient_RadialGradient__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./gradient/RadialGradient */ "../../../dev/gui/src/2D/controls/gradient/RadialGradient.ts");




































/***/ }),

/***/ "../../../dev/gui/src/2D/controls/inputPassword.ts":
/*!*********************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/inputPassword.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputPassword: () => (/* binding */ InputPassword)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _inputText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inputText */ "../../../dev/gui/src/2D/controls/inputText.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Misc/typeStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _textWrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textWrapper */ "../../../dev/gui/src/2D/controls/textWrapper.ts");




/**
 * Class used to create a password control
 */
var InputPassword = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(InputPassword, _super);
    function InputPassword() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputPassword.prototype._getTypeName = function () {
        return "InputPassword";
    };
    InputPassword.prototype._beforeRenderText = function (textWrapper) {
        var pwdTextWrapper = new _textWrapper__WEBPACK_IMPORTED_MODULE_2__.TextWrapper();
        var txt = "";
        for (var i = 0; i < textWrapper.length; i++) {
            txt += "\u2022";
        }
        pwdTextWrapper.text = txt;
        return pwdTextWrapper;
    };
    return InputPassword;
}(_inputText__WEBPACK_IMPORTED_MODULE_0__.InputText));

(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.InputPassword", InputPassword);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/inputText.ts":
/*!*****************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/inputText.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputText: () => (/* binding */ InputText)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");
/* harmony import */ var _textWrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./textWrapper */ "../../../dev/gui/src/2D/controls/textWrapper.ts");









/**
 * Class used to create input text control
 */
var InputText = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(InputText, _super);
    /**
     * Creates a new InputText
     * @param name defines the control name
     * @param text defines the text of the control
     */
    function InputText(name, text) {
        if (text === void 0) { text = ""; }
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._placeholderText = "";
        _this._background = "#222222";
        _this._focusedBackground = "#000000";
        _this._placeholderColor = "gray";
        _this._thickness = 1;
        _this._margin = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(10, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL);
        _this._autoStretchWidth = true;
        _this._maxWidth = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(1, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PERCENTAGE, false);
        _this._blinkIsEven = false;
        _this._cursorOffset = 0;
        _this._deadKey = false;
        _this._addKey = true;
        _this._currentKey = "";
        _this._isTextHighlightOn = false;
        _this._textHighlightColor = "#d5e0ff";
        _this._highligherOpacity = 0.4;
        _this._highlightedText = "";
        _this._startHighlightIndex = 0;
        _this._endHighlightIndex = 0;
        _this._cursorIndex = -1;
        _this._outlineWidth = 0;
        _this._outlineColor = "white";
        _this._onFocusSelectAll = false;
        _this._isPointerDown = false;
        /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */
        _this.promptMessage = "Please enter text:";
        /** Force disable prompt on mobile device */
        _this.disableMobilePrompt = false;
        /** Observable raised when the text changes */
        _this.onTextChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /** Observable raised just before an entered character is to be added */
        _this.onBeforeKeyAddObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /** Observable raised when the text is highlighted */
        _this.onTextHighlightObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /** Observable raised when copy event is triggered */
        _this.onTextCopyObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /** Observable raised when cut event is triggered */
        _this.onTextCutObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /** Observable raised when paste event is triggered */
        _this.onTextPasteObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        _this.text = text;
        _this.isPointerBlocker = true;
        _this._focusedColor = "white";
        return _this;
    }
    Object.defineProperty(InputText.prototype, "outlineWidth", {
        /**
         * Gets or sets outlineWidth of the text to display
         */
        get: function () {
            return this._outlineWidth;
        },
        set: function (value) {
            if (this._outlineWidth === value) {
                return;
            }
            this._outlineWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "outlineColor", {
        /**
         * Gets or sets outlineColor of the text to display
         */
        get: function () {
            return this._outlineColor;
        },
        set: function (value) {
            if (this._outlineColor === value) {
                return;
            }
            this._outlineColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "maxWidth", {
        /** Gets or sets the maximum width allowed by the control */
        get: function () {
            return this._maxWidth.toString(this._host);
        },
        set: function (value) {
            if (this._maxWidth.toString(this._host) === value) {
                return;
            }
            if (this._maxWidth.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "maxWidthInPixels", {
        /** Gets the maximum width allowed by the control in pixels */
        get: function () {
            return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "highligherOpacity", {
        /** Gets or sets the text highlighter transparency; default: 0.4 */
        get: function () {
            return this._highligherOpacity;
        },
        set: function (value) {
            if (this._highligherOpacity === value) {
                return;
            }
            this._highligherOpacity = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "onFocusSelectAll", {
        /** Gets or sets a boolean indicating whether to select complete text by default on input focus */
        get: function () {
            return this._onFocusSelectAll;
        },
        set: function (value) {
            if (this._onFocusSelectAll === value) {
                return;
            }
            this._onFocusSelectAll = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "textHighlightColor", {
        /** Gets or sets the text hightlight color */
        get: function () {
            return this._textHighlightColor;
        },
        set: function (value) {
            if (this._textHighlightColor === value) {
                return;
            }
            this._textHighlightColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "margin", {
        /** Gets or sets control margin */
        get: function () {
            return this._margin.toString(this._host);
        },
        set: function (value) {
            if (this._margin.toString(this._host) === value) {
                return;
            }
            if (this._margin.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "marginInPixels", {
        /** Gets control margin in pixels */
        get: function () {
            return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "autoStretchWidth", {
        /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */
        get: function () {
            return this._autoStretchWidth;
        },
        set: function (value) {
            if (this._autoStretchWidth === value) {
                return;
            }
            this._autoStretchWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "thickness", {
        /** Gets or sets border thickness */
        get: function () {
            return this._thickness;
        },
        set: function (value) {
            if (this._thickness === value) {
                return;
            }
            this._thickness = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "focusedBackground", {
        /** Gets or sets the background color when focused */
        get: function () {
            return this._focusedBackground;
        },
        set: function (value) {
            if (this._focusedBackground === value) {
                return;
            }
            this._focusedBackground = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "focusedColor", {
        /** Gets or sets the background color when focused */
        set: function (value) {
            if (this._focusedColor === value) {
                return;
            }
            this._focusedColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "background", {
        /** Gets or sets the background color */
        get: function () {
            return this._background;
        },
        set: function (value) {
            if (this._background === value) {
                return;
            }
            this._background = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "placeholderColor", {
        /** Gets or sets the placeholder color */
        get: function () {
            return this._placeholderColor;
        },
        set: function (value) {
            if (this._placeholderColor === value) {
                return;
            }
            this._placeholderColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "placeholderText", {
        /** Gets or sets the text displayed when the control is empty */
        get: function () {
            return this._placeholderText;
        },
        set: function (value) {
            if (this._placeholderText === value) {
                return;
            }
            this._placeholderText = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "deadKey", {
        /** Gets or sets the dead key. 0 to disable. */
        get: function () {
            return this._deadKey;
        },
        set: function (flag) {
            this._deadKey = flag;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "highlightedText", {
        /** Gets or sets the highlight text */
        get: function () {
            return this._highlightedText;
        },
        set: function (text) {
            if (this._highlightedText === text) {
                return;
            }
            this._highlightedText = text;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "addKey", {
        /** Gets or sets if the current key should be added */
        get: function () {
            return this._addKey;
        },
        set: function (flag) {
            this._addKey = flag;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "currentKey", {
        /** Gets or sets the value of the current key being entered */
        get: function () {
            return this._currentKey;
        },
        set: function (key) {
            this._currentKey = key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputText.prototype, "text", {
        /** Gets or sets the text displayed in the control */
        get: function () {
            return this._textWrapper.text;
        },
        set: function (value) {
            var valueAsString = value.toString(); // Forcing convertion
            if (!this._textWrapper) {
                this._textWrapper = new _textWrapper__WEBPACK_IMPORTED_MODULE_3__.TextWrapper();
            }
            if (this._textWrapper.text === valueAsString) {
                return;
            }
            this._textWrapper.text = valueAsString;
            this._textHasChanged();
        },
        enumerable: false,
        configurable: true
    });
    InputText.prototype._textHasChanged = function () {
        this._markAsDirty();
        this.onTextChangedObservable.notifyObservers(this);
    };
    InputText.prototype._applyStates = function (context) {
        _super.prototype._applyStates.call(this, context);
        if (this.outlineWidth) {
            context.lineWidth = this.outlineWidth;
            context.strokeStyle = this.outlineColor;
        }
    };
    Object.defineProperty(InputText.prototype, "width", {
        /** Gets or sets control width */
        get: function () {
            return this._width.toString(this._host);
        },
        set: function (value) {
            if (this._width.toString(this._host) === value && !this._autoStretchWidth) {
                return;
            }
            if (this._width.fromString(value)) {
                this._markAsDirty();
            }
            this.autoStretchWidth = false;
        },
        enumerable: false,
        configurable: true
    });
    /** @internal */
    InputText.prototype.onBlur = function () {
        this._isFocused = false;
        this._scrollLeft = null;
        this._cursorOffset = 0;
        clearTimeout(this._blinkTimeout);
        this._markAsDirty();
        this.onBlurObservable.notifyObservers(this);
        this._host.unRegisterClipboardEvents();
        if (this._onClipboardObserver) {
            this._host.onClipboardObservable.remove(this._onClipboardObserver);
        }
        var scene = this._host.getScene();
        if (this._onPointerDblTapObserver && scene) {
            scene.onPointerObservable.remove(this._onPointerDblTapObserver);
        }
    };
    /** @internal */
    InputText.prototype.onFocus = function () {
        var _this = this;
        if (!this._isEnabled) {
            return;
        }
        this._scrollLeft = null;
        this._isFocused = true;
        this._blinkIsEven = false;
        this._cursorOffset = 0;
        this._markAsDirty();
        this.onFocusObservable.notifyObservers(this);
        if (this._focusedBy === "touch" && !this.disableMobilePrompt) {
            var value = prompt(this.promptMessage);
            if (value !== null) {
                this.text = value;
            }
            this._host.focusedControl = null;
            return;
        }
        this._host.registerClipboardEvents();
        this._onClipboardObserver = this._host.onClipboardObservable.add(function (clipboardInfo) {
            // process clipboard event, can be configured.
            switch (clipboardInfo.type) {
                case babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.ClipboardEventTypes.COPY:
                    _this._onCopyText(clipboardInfo.event);
                    _this.onTextCopyObservable.notifyObservers(_this);
                    break;
                case babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.ClipboardEventTypes.CUT:
                    _this._onCutText(clipboardInfo.event);
                    _this.onTextCutObservable.notifyObservers(_this);
                    break;
                case babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.ClipboardEventTypes.PASTE:
                    _this._onPasteText(clipboardInfo.event);
                    _this.onTextPasteObservable.notifyObservers(_this);
                    break;
                default:
                    return;
            }
        });
        var scene = this._host.getScene();
        if (scene) {
            //register the pointer double tap event
            this._onPointerDblTapObserver = scene.onPointerObservable.add(function (pointerInfo) {
                if (!_this._isFocused) {
                    return;
                }
                if (pointerInfo.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERDOUBLETAP) {
                    _this._processDblClick(pointerInfo);
                }
            });
        }
        if (this._onFocusSelectAll) {
            this._selectAllText();
        }
    };
    InputText.prototype._getTypeName = function () {
        return "InputText";
    };
    /**
     * Function called to get the list of controls that should not steal the focus from this control
     * @returns an array of controls
     */
    InputText.prototype.keepsFocusWith = function () {
        if (!this._connectedVirtualKeyboard) {
            return null;
        }
        return [this._connectedVirtualKeyboard];
    };
    /**
     * @internal
     */
    InputText.prototype.processKey = function (keyCode, key, evt) {
        var _a;
        if (this.isReadOnly) {
            return;
        }
        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)
        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {
            return;
        }
        //select all
        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {
            this._selectAllText();
            evt.preventDefault();
            return;
        }
        // Specific cases
        switch (keyCode) {
            case 32: //SPACE
                key = " "; //ie11 key for space is "Spacebar"
                break;
            case 191: //SLASH
                if (evt) {
                    evt.preventDefault();
                }
                break;
            case 8: // BACKSPACE
                if (this._textWrapper.text && this._textWrapper.length > 0) {
                    //delete the highlighted text
                    if (this.isTextHighlightOn) {
                        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);
                        this._textHasChanged();
                        this.isTextHighlightOn = false;
                        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
                        this._blinkIsEven = false;
                        if (evt) {
                            evt.preventDefault();
                        }
                        return;
                    }
                    //delete single character
                    if (this._cursorOffset === 0) {
                        this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);
                    }
                    else {
                        var deletePosition = this._textWrapper.length - this._cursorOffset;
                        if (deletePosition > 0) {
                            this._textWrapper.removePart(deletePosition - 1, deletePosition);
                            this._textHasChanged();
                        }
                    }
                }
                if (evt) {
                    evt.preventDefault();
                }
                return;
            case 46: // DELETE
                if (this.isTextHighlightOn) {
                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);
                    this._textHasChanged();
                    this.isTextHighlightOn = false;
                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
                    if (evt) {
                        evt.preventDefault();
                    }
                    return;
                }
                if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {
                    var deletePosition = this._textWrapper.length - this._cursorOffset;
                    this._textWrapper.removePart(deletePosition, deletePosition + 1);
                    this._textHasChanged();
                    this._cursorOffset--;
                }
                if (evt) {
                    evt.preventDefault();
                }
                return;
            case 13: // RETURN
                this._host.focusedControl = null;
                this.isTextHighlightOn = false;
                return;
            case 35: // END
                this._cursorOffset = 0;
                this._blinkIsEven = false;
                this.isTextHighlightOn = false;
                this._markAsDirty();
                return;
            case 36: // HOME
                this._cursorOffset = this._textWrapper.length;
                this._blinkIsEven = false;
                this.isTextHighlightOn = false;
                this._markAsDirty();
                return;
            case 37: // LEFT
                this._cursorOffset++;
                if (this._cursorOffset > this._textWrapper.length) {
                    this._cursorOffset = this._textWrapper.length;
                }
                if (evt && evt.shiftKey) {
                    // update the cursor
                    this._blinkIsEven = false;
                    // shift + ctrl/cmd + <-
                    if (evt.ctrlKey || evt.metaKey) {
                        if (!this.isTextHighlightOn) {
                            if (this._textWrapper.length === this._cursorOffset) {
                                return;
                            }
                            else {
                                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;
                            }
                        }
                        this._startHighlightIndex = 0;
                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;
                        this._cursorOffset = this._textWrapper.length;
                        this.isTextHighlightOn = true;
                        this._markAsDirty();
                        return;
                    }
                    //store the starting point
                    if (!this.isTextHighlightOn) {
                        this.isTextHighlightOn = true;
                        this._cursorIndex = this._cursorOffset >= this._textWrapper.length ? this._textWrapper.length : this._cursorOffset - 1;
                    }
                    //if text is already highlighted
                    else if (this._cursorIndex === -1) {
                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;
                        this._cursorOffset = this._startHighlightIndex === 0 ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;
                    }
                    //set the highlight indexes
                    if (this._cursorIndex < this._cursorOffset) {
                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;
                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;
                    }
                    else if (this._cursorIndex > this._cursorOffset) {
                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;
                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;
                    }
                    else {
                        this.isTextHighlightOn = false;
                    }
                    this._markAsDirty();
                    return;
                }
                if (this.isTextHighlightOn) {
                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
                    this.isTextHighlightOn = false;
                }
                if (evt && (evt.ctrlKey || evt.metaKey)) {
                    this._cursorOffset = this._textWrapper.length;
                    evt.preventDefault();
                }
                this._blinkIsEven = false;
                this.isTextHighlightOn = false;
                this._cursorIndex = -1;
                this._markAsDirty();
                return;
            case 39: // RIGHT
                this._cursorOffset--;
                if (this._cursorOffset < 0) {
                    this._cursorOffset = 0;
                }
                if (evt && evt.shiftKey) {
                    //update the cursor
                    this._blinkIsEven = false;
                    //shift + ctrl/cmd + ->
                    if (evt.ctrlKey || evt.metaKey) {
                        if (!this.isTextHighlightOn) {
                            if (this._cursorOffset === 0) {
                                return;
                            }
                            else {
                                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;
                            }
                        }
                        this._endHighlightIndex = this._textWrapper.length;
                        this.isTextHighlightOn = true;
                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;
                        this._cursorOffset = 0;
                        this._markAsDirty();
                        return;
                    }
                    if (!this.isTextHighlightOn) {
                        this.isTextHighlightOn = true;
                        this._cursorIndex = this._cursorOffset <= 0 ? 0 : this._cursorOffset + 1;
                    }
                    //if text is already highlighted
                    else if (this._cursorIndex === -1) {
                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;
                        this._cursorOffset = this._textWrapper.length === this._endHighlightIndex ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;
                    }
                    //set the highlight indexes
                    if (this._cursorIndex < this._cursorOffset) {
                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;
                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;
                    }
                    else if (this._cursorIndex > this._cursorOffset) {
                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;
                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;
                    }
                    else {
                        this.isTextHighlightOn = false;
                    }
                    this._markAsDirty();
                    return;
                }
                if (this.isTextHighlightOn) {
                    this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;
                    this.isTextHighlightOn = false;
                }
                //ctr + ->
                if (evt && (evt.ctrlKey || evt.metaKey)) {
                    this._cursorOffset = 0;
                    evt.preventDefault();
                }
                this._blinkIsEven = false;
                this.isTextHighlightOn = false;
                this._cursorIndex = -1;
                this._markAsDirty();
                return;
        }
        if (keyCode === 32) {
            key = (_a = evt === null || evt === void 0 ? void 0 : evt.key) !== null && _a !== void 0 ? _a : " ";
        }
        this._deadKey = key === "Dead";
        // Printable characters
        if (key &&
            (keyCode === -1 || // Direct access
                keyCode === 32 || // Space
                keyCode === 34 || // "    add support for single and double quotes
                keyCode === 39 || // '
                (keyCode > 47 && keyCode < 64) || // Numbers
                (keyCode > 64 && keyCode < 91) || // Letters
                (keyCode > 159 && keyCode < 193) || // Special characters
                (keyCode > 218 && keyCode < 223) || // Special characters
                (keyCode > 95 && keyCode < 112))) {
            // Numpad
            this._currentKey = key;
            this.onBeforeKeyAddObservable.notifyObservers(this);
            key = this._currentKey;
            if (this._addKey && !this._deadKey) {
                if (this.isTextHighlightOn) {
                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);
                    this._textHasChanged();
                    this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);
                    this.isTextHighlightOn = false;
                    this._blinkIsEven = false;
                    this._markAsDirty();
                }
                else if (this._cursorOffset === 0) {
                    this.text += this._deadKey && (evt === null || evt === void 0 ? void 0 : evt.key) ? evt.key : key;
                }
                else {
                    var insertPosition = this._textWrapper.length - this._cursorOffset;
                    this._textWrapper.removePart(insertPosition, insertPosition, key);
                    this._textHasChanged();
                }
            }
        }
    };
    /**
     * @internal
     */
    InputText.prototype._updateValueFromCursorIndex = function (offset) {
        //update the cursor
        this._blinkIsEven = false;
        if (this._cursorIndex === -1) {
            this._cursorIndex = offset;
        }
        else {
            if (this._cursorIndex < this._cursorOffset) {
                this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;
                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;
            }
            else if (this._cursorIndex > this._cursorOffset) {
                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;
                this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;
            }
            else {
                this.isTextHighlightOn = false;
                this._markAsDirty();
                return;
            }
        }
        this.isTextHighlightOn = true;
        this._markAsDirty();
    };
    /**
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    InputText.prototype._processDblClick = function (evt) {
        //pre-find the start and end index of the word under cursor, speeds up the rendering
        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;
        this._endHighlightIndex = this._startHighlightIndex;
        var moveLeft, moveRight;
        do {
            moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;
            moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;
        } while (moveLeft || moveRight);
        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
        this.isTextHighlightOn = true;
        this._clickedCoordinate = null;
        this._blinkIsEven = true;
        this._cursorIndex = -1;
        this._markAsDirty();
    };
    /** @internal */
    InputText.prototype._selectAllText = function () {
        this._blinkIsEven = true;
        this.isTextHighlightOn = true;
        this._startHighlightIndex = 0;
        this._endHighlightIndex = this._textWrapper.length;
        this._cursorOffset = this._textWrapper.length;
        this._cursorIndex = -1;
        this._markAsDirty();
    };
    /**
     * Handles the keyboard event
     * @param evt Defines the KeyboardEvent
     */
    InputText.prototype.processKeyboard = function (evt) {
        // process pressed key
        this.processKey(evt.keyCode, evt.key, evt);
        _super.prototype.processKeyboard.call(this, evt);
    };
    /**
     * @internal
     */
    InputText.prototype._onCopyText = function (ev) {
        this.isTextHighlightOn = false;
        //when write permission to clipbaord data is denied
        try {
            ev.clipboardData && ev.clipboardData.setData("text/plain", this._highlightedText);
        }
        catch (_a) { } //pass
        this._host.clipboardData = this._highlightedText;
    };
    /**
     * @internal
     */
    InputText.prototype._onCutText = function (ev) {
        if (!this._highlightedText) {
            return;
        }
        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);
        this._textHasChanged();
        this.isTextHighlightOn = false;
        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;
        //when write permission to clipbaord data is denied
        try {
            ev.clipboardData && ev.clipboardData.setData("text/plain", this._highlightedText);
        }
        catch (_a) { } //pass
        this._host.clipboardData = this._highlightedText;
        this._highlightedText = "";
    };
    /**
     * @internal
     */
    InputText.prototype._onPasteText = function (ev) {
        var data = "";
        if (ev.clipboardData && ev.clipboardData.types.indexOf("text/plain") !== -1) {
            data = ev.clipboardData.getData("text/plain");
        }
        else {
            //get the cached data; returns blank string by default
            data = this._host.clipboardData;
        }
        var insertPosition = this._textWrapper.length - this._cursorOffset;
        this._textWrapper.removePart(insertPosition, insertPosition, data);
        this._textHasChanged();
    };
    InputText.prototype._draw = function (context) {
        var _this = this;
        var _a;
        context.save();
        this._applyStates(context);
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        // Background
        if (this._isFocused) {
            if (this._focusedBackground) {
                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;
                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
            }
        }
        else if (this._background) {
            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;
            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
        }
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
        }
        if (!this._fontOffset || this._wasDirty) {
            this._fontOffset = _control__WEBPACK_IMPORTED_MODULE_1__.Control._GetFontOffset(context.font, (_a = this._host.getScene()) === null || _a === void 0 ? void 0 : _a.getEngine());
        }
        // Text
        var clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);
        if (this.color) {
            context.fillStyle = this.color;
        }
        var text = this._beforeRenderText(this._textWrapper);
        if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {
            text = new _textWrapper__WEBPACK_IMPORTED_MODULE_3__.TextWrapper();
            text.text = this._placeholderText;
            if (this._placeholderColor) {
                context.fillStyle = this._placeholderColor;
            }
        }
        this._textWidth = context.measureText(text.text).width;
        var marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;
        if (this._autoStretchWidth) {
            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + "px";
            this._autoStretchWidth = true; // setting the width will have reset _autoStretchWidth to false!
        }
        var rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;
        var availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;
        context.save();
        context.beginPath();
        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);
        context.clip();
        if (this._isFocused && this._textWidth > availableWidth) {
            var textLeft = clipTextLeft - this._textWidth + availableWidth;
            if (!this._scrollLeft) {
                this._scrollLeft = textLeft;
            }
        }
        else {
            this._scrollLeft = clipTextLeft;
        }
        if (this.outlineWidth) {
            context.strokeText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);
        }
        context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);
        // Cursor
        if (this._isFocused) {
            // Need to move cursor
            if (this._clickedCoordinate) {
                var rightPosition = this._scrollLeft + this._textWidth;
                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;
                var currentSize = 0;
                this._cursorOffset = 0;
                var previousDist = 0;
                do {
                    if (this._cursorOffset) {
                        previousDist = Math.abs(absoluteCursorPosition - currentSize);
                    }
                    this._cursorOffset++;
                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;
                } while (currentSize < absoluteCursorPosition && text.length >= this._cursorOffset);
                // Find closest move
                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {
                    this._cursorOffset--;
                }
                this._blinkIsEven = false;
                this._clickedCoordinate = null;
            }
            // Render cursor
            if (!this._blinkIsEven) {
                var cursorOffsetText = text.substr(text.length - this._cursorOffset);
                var cursorOffsetWidth = context.measureText(cursorOffsetText).width;
                var cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;
                if (cursorLeft < clipTextLeft) {
                    this._scrollLeft += clipTextLeft - cursorLeft;
                    cursorLeft = clipTextLeft;
                    this._markAsDirty();
                }
                else if (cursorLeft > clipTextLeft + availableWidth) {
                    this._scrollLeft += clipTextLeft + availableWidth - cursorLeft;
                    cursorLeft = clipTextLeft + availableWidth;
                    this._markAsDirty();
                }
                if (!this.isTextHighlightOn) {
                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);
                }
            }
            clearTimeout(this._blinkTimeout);
            this._blinkTimeout = setTimeout(function () {
                _this._blinkIsEven = !_this._blinkIsEven;
                _this._markAsDirty();
            }, 500);
            //show the highlighted text
            if (this.isTextHighlightOn) {
                clearTimeout(this._blinkTimeout);
                var highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;
                var highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;
                this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);
                var width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;
                if (highlightCursorLeft < clipTextLeft) {
                    width = width - (clipTextLeft - highlightCursorLeft);
                    if (!width) {
                        // when using left arrow on text.length > availableWidth;
                        // assigns the width of the first letter after clipTextLeft
                        width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;
                    }
                    highlightCursorLeft = clipTextLeft;
                }
                //for transparancy
                context.globalAlpha = this._highligherOpacity;
                context.fillStyle = this._textHighlightColor;
                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);
                context.globalAlpha = 1.0;
            }
        }
        context.restore();
        // Border
        if (this._thickness) {
            if (this._isFocused) {
                if (this.focusedColor) {
                    context.strokeStyle = this.focusedColor;
                }
            }
            else {
                if (this.color) {
                    context.strokeStyle = this.color;
                }
            }
            context.lineWidth = this._thickness;
            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);
        }
        context.restore();
    };
    InputText.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
            return false;
        }
        if (this.isReadOnly) {
            return true;
        }
        this._clickedCoordinate = coordinates.x;
        this.isTextHighlightOn = false;
        this._highlightedText = "";
        this._cursorIndex = -1;
        this._isPointerDown = true;
        this._host._capturingControl[pointerId] = this;
        this._focusedBy = pi.event.pointerType;
        if (this._host.focusedControl === this) {
            // Move cursor
            clearTimeout(this._blinkTimeout);
            this._markAsDirty();
            return true;
        }
        if (!this._isEnabled) {
            return false;
        }
        this._host.focusedControl = this;
        return true;
    };
    InputText.prototype._onPointerMove = function (target, coordinates, pointerId, pi) {
        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {
            this._clickedCoordinate = coordinates.x;
            this._markAsDirty();
            this._updateValueFromCursorIndex(this._cursorOffset);
        }
        _super.prototype._onPointerMove.call(this, target, coordinates, pointerId, pi);
    };
    InputText.prototype._onPointerUp = function (target, coordinates, pointerId, buttonIndex, notifyClick) {
        this._isPointerDown = false;
        delete this._host._capturingControl[pointerId];
        _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick);
    };
    InputText.prototype._beforeRenderText = function (textWrapper) {
        return textWrapper;
    };
    Object.defineProperty(InputText.prototype, "isTextHighlightOn", {
        /** @internal */
        // eslint-disable-next-line @typescript-eslint/naming-convention
        get: function () {
            return this._isTextHighlightOn;
        },
        /** @internal */
        // eslint-disable-next-line @typescript-eslint/naming-convention
        set: function (value) {
            if (this._isTextHighlightOn === value) {
                return;
            }
            if (value) {
                this.onTextHighlightObservable.notifyObservers(this);
            }
            this._isTextHighlightOn = value;
        },
        enumerable: false,
        configurable: true
    });
    InputText.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.onBlurObservable.clear();
        this.onFocusObservable.clear();
        this.onTextChangedObservable.clear();
        this.onTextCopyObservable.clear();
        this.onTextCutObservable.clear();
        this.onTextPasteObservable.clear();
        this.onTextHighlightObservable.clear();
        this.onKeyboardEventProcessedObservable.clear();
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "promptMessage", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "disableMobilePrompt", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "maxWidth", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "highligherOpacity", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "onFocusSelectAll", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "textHighlightColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "margin", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "autoStretchWidth", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "thickness", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "focusedBackground", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "background", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "placeholderColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "placeholderText", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "deadKey", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "text", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputText.prototype, "width", null);
    return InputText;
}(_control__WEBPACK_IMPORTED_MODULE_1__.Control));
(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.InputText", InputText);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/inputTextArea.ts":
/*!*********************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/inputTextArea.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputTextArea: () => (/* binding */ InputTextArea)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");
/* harmony import */ var _inputText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./inputText */ "../../../dev/gui/src/2D/controls/inputText.ts");







/**
 * Class used to create input text control
 */
var InputTextArea = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(InputTextArea, _super);
    /**
     * Creates a new InputTextArea
     * @param name defines the control name
     * @param text defines the text of the control
     */
    function InputTextArea(name, text) {
        if (text === void 0) { text = ""; }
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._textVerticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_TOP;
        _this._prevText = _this.text;
        _this._lineSpacing = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
        _this._maxHeight = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(1, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PERCENTAGE, false);
        /**
         * An event triggered after the text was broken up into lines
         */
        _this.onLinesReadyObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        _this.text = text;
        _this.isPointerBlocker = true;
        _this.onLinesReadyObservable.add(function () { return _this._updateCursorPosition(); });
        _this._highlightCursorInfo = {
            initialStartIndex: -1,
            initialRelativeStartIndex: -1,
            initialLineIndex: -1,
        };
        _this._cursorInfo = {
            globalStartIndex: 0,
            globalEndIndex: 0,
            relativeEndIndex: 0,
            relativeStartIndex: 0,
            currentLineIndex: 0,
        };
        return _this;
    }
    Object.defineProperty(InputTextArea.prototype, "autoStretchHeight", {
        /** Gets or sets a boolean indicating if the control can auto stretch its height to adapt to the text */
        get: function () {
            return this._autoStretchHeight;
        },
        set: function (value) {
            if (this._autoStretchHeight === value) {
                return;
            }
            this._autoStretchHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputTextArea.prototype, "height", {
        set: function (value) {
            this.fixedRatioMasterIsWidth = false;
            if (this._height.toString(this._host) === value) {
                return;
            }
            if (this._height.fromString(value)) {
                this._markAsDirty();
            }
            this._autoStretchHeight = false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputTextArea.prototype, "maxHeight", {
        get: function () {
            return this._maxHeight.toString(this._host);
        },
        set: function (value) {
            if (this._maxHeight.toString(this._host) === value) {
                return;
            }
            if (this._maxHeight.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputTextArea.prototype, "maxHeightInPixels", {
        /** Gets the maximum width allowed by the control in pixels */
        get: function () {
            return this._maxHeight.getValueInPixel(this._host, this._cachedParentMeasure.height);
        },
        enumerable: false,
        configurable: true
    });
    InputTextArea.prototype._getTypeName = function () {
        return "InputTextArea";
    };
    /**
     * Handles the keyboard event
     * @param evt Defines the KeyboardEvent
     */
    InputTextArea.prototype.processKeyboard = function (evt) {
        if (this.isReadOnly) {
            return;
        }
        // process pressed key
        this.alternativeProcessKey(evt.code, evt.key, evt);
        this.onKeyboardEventProcessedObservable.notifyObservers(evt);
    };
    /**
     * Process the last keyboard input
     *
     * @param code The ascii input number
     * @param key The key string representation
     * @param evt The keyboard event emits with input
     * @internal
     */
    InputTextArea.prototype.alternativeProcessKey = function (code, key, evt) {
        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)
        if (evt && (evt.ctrlKey || evt.metaKey) && (key === "c" || key === "v" || key === "x")) {
            return;
        }
        // Specific cases
        switch (code) {
            case "Period": //SLASH
                if (evt && evt.shiftKey) {
                    evt.preventDefault();
                }
                break;
            case "Backspace": // BACKSPACE
                if (!this._isTextHighlightOn && this._cursorInfo.globalStartIndex > 0) {
                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                    this._cursorInfo.globalStartIndex--;
                }
                this._prevText = this._textWrapper.text;
                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);
                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                if (evt) {
                    evt.preventDefault();
                }
                this._blinkIsEven = false;
                this._isTextHighlightOn = false;
                this._textHasChanged();
                break;
            case "Delete": // DELETE
                if (!this._isTextHighlightOn && this._cursorInfo.globalEndIndex < this.text.length) {
                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex + 1;
                }
                this._prevText = this._textWrapper.text;
                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);
                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                if (evt) {
                    evt.preventDefault();
                }
                this._blinkIsEven = false;
                this._isTextHighlightOn = false;
                this._textHasChanged();
                break;
            case "NumpadEnter": // NUMPAD ENTER
            case "Enter": // RETURN
                this._prevText = this._textWrapper.text;
                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, "\n");
                this._cursorInfo.globalStartIndex++;
                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                this._blinkIsEven = false;
                this._isTextHighlightOn = false;
                this._textHasChanged();
                return;
            case "End": // END
                this._cursorInfo.globalStartIndex = this.text.length;
                this._blinkIsEven = false;
                this._isTextHighlightOn = false;
                this._markAsDirty();
                return;
            case "Home": // HOME
                this._cursorInfo.globalStartIndex = 0;
                this._blinkIsEven = false;
                this._isTextHighlightOn = false;
                this._markAsDirty();
                return;
            case "ArrowLeft": // LEFT
                this._markAsDirty();
                if (evt && evt.shiftKey) {
                    // shift + ctrl/cmd + <-
                    if (evt.ctrlKey || evt.metaKey) {
                        // Go to line's start by substract the relativeStartIndex to the globalStartIndex
                        this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;
                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;
                    }
                    // store the starting point
                    if (!this._isTextHighlightOn) {
                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                        this._cursorInfo.globalStartIndex--;
                        this._isTextHighlightOn = true;
                    }
                    else {
                        if (this._cursorInfo.globalEndIndex > this._highlightCursorInfo.initialStartIndex) {
                            this._cursorInfo.globalEndIndex--;
                        }
                        else {
                            this._cursorInfo.globalStartIndex--;
                        }
                    }
                    this._blinkIsEven = true;
                    evt.preventDefault();
                    return;
                }
                if (this._isTextHighlightOn) {
                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                }
                else if (evt && (evt.ctrlKey || evt.metaKey)) {
                    // ctr + <-
                    this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;
                    evt.preventDefault();
                }
                else if (this._cursorInfo.globalStartIndex > 0) {
                    this._cursorInfo.globalStartIndex--;
                }
                // update the cursor
                this._blinkIsEven = false;
                this._isTextHighlightOn = false;
                return;
            case "ArrowRight": // RIGHT
                this._markAsDirty();
                if (evt && evt.shiftKey) {
                    // shift + ctrl/cmd + ->
                    if (evt.ctrlKey || evt.metaKey) {
                        var rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex - 1;
                        this._cursorInfo.globalEndIndex += rightDelta;
                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;
                    }
                    // store the starting point
                    if (!this._isTextHighlightOn) {
                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                        this._cursorInfo.globalEndIndex++;
                        this._isTextHighlightOn = true;
                    }
                    else {
                        if (this._cursorInfo.globalStartIndex < this._highlightCursorInfo.initialStartIndex) {
                            this._cursorInfo.globalStartIndex++;
                        }
                        else {
                            this._cursorInfo.globalEndIndex++;
                        }
                    }
                    this._blinkIsEven = true;
                    evt.preventDefault();
                    return;
                }
                if (this._isTextHighlightOn) {
                    this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex;
                }
                else if (evt && (evt.ctrlKey || evt.metaKey)) {
                    //ctr + ->
                    var rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex;
                    this._cursorInfo.globalStartIndex += rightDelta;
                }
                else if (this._cursorInfo.globalStartIndex < this.text.length) {
                    this._cursorInfo.globalStartIndex++;
                }
                // update the cursor
                this._blinkIsEven = false;
                this._isTextHighlightOn = false;
                return;
            case "ArrowUp": // UP
                // update the cursor
                this._blinkIsEven = false;
                if (evt) {
                    if (evt.shiftKey) {
                        if (!this._isTextHighlightOn) {
                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                        }
                        this._isTextHighlightOn = true;
                        this._blinkIsEven = true;
                    }
                    else {
                        this._isTextHighlightOn = false;
                    }
                    evt.preventDefault();
                }
                if (this._cursorInfo.currentLineIndex === 0) {
                    // First line
                    this._cursorInfo.globalStartIndex = 0;
                }
                else {
                    var currentLine = this._lines[this._cursorInfo.currentLineIndex];
                    var upperLine = this._lines[this._cursorInfo.currentLineIndex - 1];
                    var tmpIndex = 0;
                    var relativeIndex = 0;
                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {
                        tmpIndex = this._cursorInfo.globalStartIndex;
                        relativeIndex = this._cursorInfo.relativeStartIndex;
                    }
                    else {
                        tmpIndex = this._cursorInfo.globalEndIndex;
                        relativeIndex = this._cursorInfo.relativeEndIndex;
                    }
                    var currentText = currentLine.text.substr(0, relativeIndex);
                    var currentWidth = this._contextForBreakLines.measureText(currentText).width;
                    var upperWidth = 0;
                    var previousWidth = 0;
                    tmpIndex -= relativeIndex; // Start of current line
                    tmpIndex -= upperLine.text.length + upperLine.lineEnding.length; // Start of upper line
                    var upperLineRelativeIndex = 0;
                    while (upperWidth < currentWidth && upperLineRelativeIndex < upperLine.text.length) {
                        tmpIndex++;
                        upperLineRelativeIndex++;
                        previousWidth = Math.abs(currentWidth - upperWidth);
                        upperWidth = this._contextForBreakLines.measureText(upperLine.text.substr(0, upperLineRelativeIndex)).width;
                    }
                    // Find closest move
                    if (Math.abs(currentWidth - upperWidth) > previousWidth && upperLineRelativeIndex > 0) {
                        tmpIndex--;
                    }
                    if (!this._isTextHighlightOn) {
                        this._cursorInfo.globalStartIndex = tmpIndex;
                    }
                    else if (this._cursorInfo.currentLineIndex <= this._highlightCursorInfo.initialLineIndex) {
                        this._cursorInfo.globalStartIndex = tmpIndex;
                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;
                        this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;
                    }
                    else {
                        this._cursorInfo.globalEndIndex = tmpIndex;
                    }
                }
                this._markAsDirty();
                return;
            case "ArrowDown": // DOWN
                // update the cursor
                this._blinkIsEven = false;
                if (evt) {
                    if (evt.shiftKey) {
                        if (!this._isTextHighlightOn) {
                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                        }
                        this._isTextHighlightOn = true;
                        this._blinkIsEven = true;
                    }
                    else {
                        this._isTextHighlightOn = false;
                    }
                    evt.preventDefault();
                }
                if (this._cursorInfo.currentLineIndex === this._lines.length - 1) {
                    // Last line
                    this._cursorInfo.globalStartIndex = this.text.length;
                }
                else {
                    var currentLine = this._lines[this._cursorInfo.currentLineIndex];
                    var underLine = this._lines[this._cursorInfo.currentLineIndex + 1];
                    var tmpIndex = 0;
                    var relativeIndex = 0;
                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {
                        tmpIndex = this._cursorInfo.globalStartIndex;
                        relativeIndex = this._cursorInfo.relativeStartIndex;
                    }
                    else {
                        tmpIndex = this._cursorInfo.globalEndIndex;
                        relativeIndex = this._cursorInfo.relativeEndIndex;
                    }
                    var currentText = currentLine.text.substr(0, relativeIndex);
                    var currentWidth = this._contextForBreakLines.measureText(currentText).width;
                    var underWidth = 0;
                    var previousWidth = 0;
                    tmpIndex += currentLine.text.length - relativeIndex + currentLine.lineEnding.length; // Start of current line
                    var underLineRelativeIndex = 0;
                    while (underWidth < currentWidth && underLineRelativeIndex < underLine.text.length) {
                        tmpIndex++;
                        underLineRelativeIndex++;
                        previousWidth = Math.abs(currentWidth - underWidth);
                        underWidth = this._contextForBreakLines.measureText(underLine.text.substr(0, underLineRelativeIndex)).width;
                    }
                    // Find closest move
                    if (Math.abs(currentWidth - underWidth) > previousWidth && underLineRelativeIndex > 0) {
                        tmpIndex--;
                    }
                    if (!this._isTextHighlightOn) {
                        this._cursorInfo.globalStartIndex = tmpIndex;
                    }
                    else if (this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {
                        this._cursorInfo.globalStartIndex = tmpIndex;
                        if (this._cursorInfo.globalStartIndex > this._cursorInfo.globalEndIndex) {
                            this._cursorInfo.globalEndIndex += this._cursorInfo.globalStartIndex;
                            this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex;
                            this._cursorInfo.globalEndIndex -= this._cursorInfo.globalStartIndex;
                        }
                    }
                    else {
                        this._cursorInfo.globalEndIndex = tmpIndex;
                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;
                    }
                }
                this._markAsDirty();
                return;
        }
        // special case - select all. Use key instead of code to support all keyboard layouts
        if (key === "a" && evt && (evt.ctrlKey || evt.metaKey)) {
            this._selectAllText();
            evt.preventDefault();
            return;
        }
        // Printable characters
        if ((key === null || key === void 0 ? void 0 : key.length) === 1) {
            evt === null || evt === void 0 ? void 0 : evt.preventDefault();
            this._currentKey = key;
            this.onBeforeKeyAddObservable.notifyObservers(this);
            key = this._currentKey;
            if (this._addKey) {
                this._isTextHighlightOn = false;
                this._blinkIsEven = false;
                this._prevText = this._textWrapper.text;
                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, key);
                this._cursorInfo.globalStartIndex += key.length;
                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                this._textHasChanged();
            }
        }
    };
    InputTextArea.prototype._parseLineWordWrap = function (line, width, context) {
        if (line === void 0) { line = ""; }
        var lines = [];
        var words = line.split(" ");
        var lineWidth = 0;
        var _loop_1 = function (n) {
            var testLine = n > 0 ? line + " " + words[n] : words[0];
            var metrics = context.measureText(testLine);
            var testWidth = metrics.width;
            if (testWidth > width) {
                if (n > 0) {
                    // Avoid first word duplication if of too long
                    lineWidth = context.measureText(line).width;
                    lines.push({ text: line, width: lineWidth, lineEnding: " " });
                }
                line = words[n];
                var flushedLine_1 = "";
                line.split("").map(function (char) {
                    if (context.measureText(flushedLine_1 + char).width > width) {
                        lines.push({ text: flushedLine_1, width: context.measureText(flushedLine_1).width, lineEnding: "" });
                        flushedLine_1 = "";
                    }
                    flushedLine_1 += char;
                });
                line = flushedLine_1;
                // Measure remaining characters
                lineWidth = context.measureText(line).width;
            }
            else {
                lineWidth = testWidth;
                line = testLine;
            }
        };
        for (var n = 0; n < words.length; n++) {
            _loop_1(n);
        }
        lines.push({ text: line, width: lineWidth, lineEnding: " " });
        return lines;
    };
    InputTextArea.prototype._breakLines = function (refWidth, context) {
        var lines = [];
        var _lines = (this.text || this.placeholderText).split("\n");
        if (this.clipContent) {
            for (var _i = 0, _lines_1 = _lines; _i < _lines_1.length; _i++) {
                var _line = _lines_1[_i];
                lines.push.apply(lines, this._parseLineWordWrap(_line, refWidth, context));
            }
        }
        else {
            for (var _a = 0, _lines_2 = _lines; _a < _lines_2.length; _a++) {
                var _line = _lines_2[_a];
                lines.push(this._parseLine(_line, context));
            }
        }
        lines[lines.length - 1].lineEnding = "\n";
        return lines;
    };
    InputTextArea.prototype._parseLine = function (line, context) {
        if (line === void 0) { line = ""; }
        return { text: line, width: context.measureText(line).width, lineEnding: " " };
    };
    /**
     * Processing of child right before the parent measurement update
     *
     * @param parentMeasure The parent measure
     * @param context The rendering canvas
     * @internal
     */
    InputTextArea.prototype._preMeasure = function (parentMeasure, context) {
        var _a;
        if (!this._fontOffset || this._wasDirty) {
            this._fontOffset = _control__WEBPACK_IMPORTED_MODULE_1__.Control._GetFontOffset(context.font, (_a = this._host.getScene()) === null || _a === void 0 ? void 0 : _a.getEngine());
        }
        var text = this._beforeRenderText(this._textWrapper).text;
        // placeholder conditions and color setting
        if (!this.text && this._placeholderText) {
            text = this._placeholderText;
        }
        // measures the textlength -> this.measure.width
        this._textWidth = context.measureText(text).width;
        // we double up the margin width
        var marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;
        if (this._autoStretchWidth) {
            var tmpLines = text.split("\n");
            var longerString = tmpLines.reduce(function (acc, val) {
                var valueLength = context.measureText(val).width;
                var accLength = context.measureText(acc).width;
                return valueLength > accLength ? val : acc;
            }, "");
            var longerStringWidth = context.measureText(longerString).width;
            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), longerStringWidth + marginWidth) + "px";
            this.autoStretchWidth = true;
        }
        this._availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;
        // Prepare lines
        this._lines = this._breakLines(this._availableWidth, context);
        // can we find a cleaner implementation here?
        this._contextForBreakLines = context;
        if (this._autoStretchHeight) {
            var textHeight = this._lines.length * this._fontOffset.height;
            var totalHeight = textHeight + this._margin.getValueInPixel(this._host, parentMeasure.height) * 2;
            this.height = Math.min(this._maxHeight.getValueInPixel(this._host, parentMeasure.height), totalHeight) + "px";
            this._autoStretchHeight = true;
        }
        this._availableHeight = this._height.getValueInPixel(this._host, parentMeasure.height) - marginWidth;
        if (this._isFocused) {
            this._cursorInfo.currentLineIndex = 0;
            var lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
            var tmpLength = 0;
            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {
                tmpLength += lineLength;
                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {
                    this._cursorInfo.currentLineIndex++;
                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
                }
            }
        }
    };
    InputTextArea.prototype._textHasChanged = function () {
        if (!this._prevText && this._textWrapper.text && this.placeholderText) {
            this._cursorInfo.currentLineIndex = 0;
            this._cursorInfo.globalStartIndex = 1;
            this._cursorInfo.globalEndIndex = 1;
            this._cursorInfo.relativeStartIndex = 1;
            this._cursorInfo.relativeEndIndex = 1;
        }
        _super.prototype._textHasChanged.call(this);
    };
    InputTextArea.prototype._computeScroll = function () {
        this._clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);
        this._clipTextTop = this._currentMeasure.top + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.height);
        if (this._isFocused && this._lines[this._cursorInfo.currentLineIndex].width > this._availableWidth) {
            var textLeft = this._clipTextLeft - this._lines[this._cursorInfo.currentLineIndex].width + this._availableWidth;
            if (!this._scrollLeft) {
                this._scrollLeft = textLeft;
            }
        }
        else {
            this._scrollLeft = this._clipTextLeft;
        }
        if (this._isFocused) {
            var selectedHeight = (this._cursorInfo.currentLineIndex + 1) * this._fontOffset.height;
            var textTop = this._clipTextTop - selectedHeight;
            if (!this._scrollTop) {
                this._scrollTop = textTop;
            }
        }
        else {
            this._scrollTop = this._clipTextTop;
        }
    };
    /**
     * Processing of child after the parent measurement update
     *
     * @internal
     */
    InputTextArea.prototype._additionalProcessing = function () {
        // Flush the highlighted text each frame
        this.highlightedText = "";
        this.onLinesReadyObservable.notifyObservers(this);
    };
    InputTextArea.prototype._drawText = function (text, textWidth, y, context) {
        var width = this._currentMeasure.width;
        var x = this._scrollLeft;
        switch (this._textHorizontalAlignment) {
            case _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT:
                x += 0;
                break;
            case _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_RIGHT:
                x += width - textWidth;
                break;
            case _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_CENTER:
                x += (width - textWidth) / 2;
                break;
        }
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        if (this.outlineWidth) {
            context.strokeText(text, this._currentMeasure.left + x, y);
        }
        context.fillText(text, x, y);
    };
    /**
     * Copy the text in the clipboard
     *
     * @param ev The clipboard event
     * @internal
     */
    InputTextArea.prototype._onCopyText = function (ev) {
        this._isTextHighlightOn = false;
        //when write permission to clipbaord data is denied
        try {
            ev.clipboardData && ev.clipboardData.setData("text/plain", this._highlightedText);
        }
        catch (_a) { } //pass
        this._host.clipboardData = this._highlightedText;
    };
    /**
     * Cut the text and copy it in the clipboard
     *
     * @param ev The clipboard event
     * @internal
     */
    InputTextArea.prototype._onCutText = function (ev) {
        if (!this._highlightedText) {
            return;
        }
        //when write permission to clipbaord data is denied
        try {
            ev.clipboardData && ev.clipboardData.setData("text/plain", this._highlightedText);
        }
        catch (_a) { } //pass
        this._host.clipboardData = this._highlightedText;
        this._prevText = this._textWrapper.text;
        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);
        this._textHasChanged();
    };
    /**
     * Paste the copied text from the clipboard
     *
     * @param ev The clipboard event
     * @internal
     */
    InputTextArea.prototype._onPasteText = function (ev) {
        var data = "";
        if (ev.clipboardData && ev.clipboardData.types.indexOf("text/plain") !== -1) {
            data = ev.clipboardData.getData("text/plain");
        }
        else {
            //get the cached data; returns blank string by default
            data = this._host.clipboardData;
        }
        this._isTextHighlightOn = false;
        this._prevText = this._textWrapper.text;
        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, data);
        var deltaIndex = data.length - (this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex);
        this._cursorInfo.globalStartIndex += deltaIndex;
        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
        this._clickedCoordinateX = null;
        this._clickedCoordinateY = null;
        _super.prototype._textHasChanged.call(this);
    };
    InputTextArea.prototype._draw = function (context) {
        var _a, _b;
        this._computeScroll();
        this._scrollLeft = (_a = this._scrollLeft) !== null && _a !== void 0 ? _a : 0;
        this._scrollTop = (_b = this._scrollTop) !== null && _b !== void 0 ? _b : 0;
        context.save();
        this._applyStates(context);
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        // Background
        if (this._isFocused) {
            if (this._focusedBackground) {
                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;
                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
            }
        }
        else if (this._background) {
            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;
            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
        }
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
        }
        // sets the color of the rectangle (border if background available)
        if (this.color) {
            context.fillStyle = this.color;
        }
        var height = this._currentMeasure.height;
        var width = this._currentMeasure.width;
        var rootY = 0;
        switch (this._textVerticalAlignment) {
            case _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_TOP:
                rootY = this._fontOffset.ascent;
                break;
            case _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_BOTTOM:
                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;
                break;
            case _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_CENTER:
                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;
                break;
        }
        context.save();
        context.beginPath();
        context.fillStyle = this.fontStyle;
        if (!this._textWrapper.text && this.placeholderText) {
            context.fillStyle = this._placeholderColor;
        }
        // here we define the visible reactangle to clip it in next line
        context.rect(this._clipTextLeft, this._clipTextTop, this._availableWidth + 2, this._availableHeight + 2);
        context.clip();
        // Text
        rootY += this._scrollTop;
        for (var i = 0; i < this._lines.length; i++) {
            var line = this._lines[i];
            if (i !== 0 && this._lineSpacing.internalValue !== 0) {
                if (this._lineSpacing.isPixel) {
                    rootY += this._lineSpacing.getValue(this._host);
                }
                else {
                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
                }
            }
            this._drawText(line.text, line.width, rootY, context);
            rootY += this._fontOffset.height;
        }
        context.restore();
        // Cursor
        if (this._isFocused) {
            // Render cursor
            if (!this._blinkIsEven || this._isTextHighlightOn) {
                var cursorLeft = this._scrollLeft + context.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, this._cursorInfo.relativeStartIndex)).width;
                if (cursorLeft < this._clipTextLeft) {
                    this._scrollLeft += this._clipTextLeft - cursorLeft;
                    cursorLeft = this._clipTextLeft;
                    this._markAsDirty();
                }
                else if (cursorLeft > this._clipTextLeft + this._availableWidth) {
                    this._scrollLeft += this._clipTextLeft + this._availableWidth - cursorLeft;
                    cursorLeft = this._clipTextLeft + this._availableWidth;
                    this._markAsDirty();
                }
                var cursorTop = this._scrollTop + this._cursorInfo.currentLineIndex * this._fontOffset.height; //cursorTop distance from top to cursor start
                if (cursorTop < this._clipTextTop) {
                    this._scrollTop += this._clipTextTop - cursorTop;
                    cursorTop = this._clipTextTop;
                    this._markAsDirty();
                }
                else if (cursorTop + this._fontOffset.height > this._clipTextTop + this._availableHeight && this._availableHeight > this._fontOffset.height) {
                    this._scrollTop += this._clipTextTop + this._availableHeight - cursorTop - this._fontOffset.height;
                    cursorTop = this._clipTextTop + this._availableHeight - this._fontOffset.height;
                    this._markAsDirty();
                }
                if (!this._isTextHighlightOn) {
                    context.fillRect(cursorLeft, cursorTop, 2, this._fontOffset.height);
                }
            }
            this._resetBlinking();
            //show the highlighted text
            if (this._isTextHighlightOn) {
                clearTimeout(this._blinkTimeout);
                this._highlightedText = this.text.substring(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);
                context.globalAlpha = this._highligherOpacity;
                context.fillStyle = this._textHighlightColor;
                var startLineIndex = Math.min(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);
                var endLineIndex = Math.max(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);
                var highlightRootY = this._scrollTop + startLineIndex * this._fontOffset.height;
                for (var i = startLineIndex; i <= endLineIndex; i++) {
                    var line = this._lines[i];
                    var highlightRootX = this._scrollLeft;
                    switch (this._textHorizontalAlignment) {
                        case _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT:
                            highlightRootX += 0;
                            break;
                        case _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_RIGHT:
                            highlightRootX += width - line.width;
                            break;
                        case _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_CENTER:
                            highlightRootX += (width - line.width) / 2;
                            break;
                    }
                    var begin = i === startLineIndex ? this._cursorInfo.relativeStartIndex : 0;
                    var end = i === endLineIndex ? this._cursorInfo.relativeEndIndex : line.text.length;
                    var leftOffsetWidth = context.measureText(line.text.substr(0, begin)).width;
                    var selectedText = line.text.substring(begin, end);
                    var hightlightWidth = context.measureText(selectedText).width;
                    context.fillRect(highlightRootX + leftOffsetWidth, highlightRootY, hightlightWidth, this._fontOffset.height);
                    highlightRootY += this._fontOffset.height;
                }
                if (this._cursorInfo.globalEndIndex === this._cursorInfo.globalStartIndex) {
                    this._resetBlinking();
                }
            }
        }
        context.restore();
        // Border
        if (this._thickness) {
            if (this._isFocused) {
                if (this.focusedColor) {
                    context.strokeStyle = this.focusedColor;
                }
            }
            else {
                if (this.color) {
                    context.strokeStyle = this.color;
                }
            }
            context.lineWidth = this._thickness;
            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);
        }
    };
    InputTextArea.prototype._resetBlinking = function () {
        var _this = this;
        clearTimeout(this._blinkTimeout);
        this._blinkTimeout = setTimeout(function () {
            _this._blinkIsEven = !_this._blinkIsEven;
            _this._markAsDirty();
        }, 500);
    };
    InputTextArea.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
            return false;
        }
        if (this.isReadOnly) {
            return true;
        }
        this._clickedCoordinateX = coordinates.x;
        this._clickedCoordinateY = coordinates.y;
        this._isTextHighlightOn = false;
        this._highlightedText = "";
        this._isPointerDown = true;
        this._host._capturingControl[pointerId] = this;
        if (this._host.focusedControl === this) {
            // Move cursor
            clearTimeout(this._blinkTimeout);
            this._markAsDirty();
            return true;
        }
        if (!this._isEnabled) {
            return false;
        }
        this._host.focusedControl = this;
        return true;
    };
    // for textselection
    InputTextArea.prototype._onPointerMove = function (target, coordinates, pointerId, pi) {
        // Avoid Chromium-like beahavior when this event is fired right after onPointerDown
        if (pi.event.movementX === 0 && pi.event.movementY === 0) {
            return;
        }
        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {
            this._clickedCoordinateX = coordinates.x;
            this._clickedCoordinateY = coordinates.y;
            if (!this._isTextHighlightOn) {
                this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
                this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
                this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;
                this._isTextHighlightOn = true;
            }
            this._markAsDirty();
        }
        _super.prototype._onPointerMove.call(this, target, coordinates, pointerId, pi);
    };
    /**
     * Apply the correct position of cursor according to current modification
     */
    InputTextArea.prototype._updateCursorPosition = function () {
        var _a;
        if (!this._isFocused) {
            return;
        }
        if (!this._textWrapper.text && this.placeholderText) {
            this._cursorInfo.currentLineIndex = 0;
            this._cursorInfo.globalStartIndex = 0;
            this._cursorInfo.globalEndIndex = 0;
            this._cursorInfo.relativeStartIndex = 0;
            this._cursorInfo.relativeEndIndex = 0;
        }
        else {
            if (this._clickedCoordinateX && this._clickedCoordinateY) {
                if (!this._isTextHighlightOn) {
                    this._cursorInfo = {
                        globalStartIndex: 0,
                        globalEndIndex: 0,
                        relativeStartIndex: 0,
                        relativeEndIndex: 0,
                        currentLineIndex: 0,
                    };
                }
                var globalIndex = 0;
                var relativeIndex = 0;
                var lastClickedCoordinateY = this._clickedCoordinateY - this._scrollTop;
                var relativeCoordinateY = Math.floor(lastClickedCoordinateY / this._fontOffset.height);
                this._cursorInfo.currentLineIndex = Math.min(Math.max(relativeCoordinateY, 0), this._lines.length - 1);
                var currentSize = 0;
                var relativeXPosition = this._clickedCoordinateX - ((_a = this._scrollLeft) !== null && _a !== void 0 ? _a : 0);
                var previousDist = 0;
                for (var index = 0; index < this._cursorInfo.currentLineIndex; index++) {
                    var line = this._lines[index];
                    globalIndex += line.text.length + line.lineEnding.length;
                }
                while (currentSize < relativeXPosition && this._lines[this._cursorInfo.currentLineIndex].text.length > relativeIndex) {
                    relativeIndex++;
                    previousDist = Math.abs(relativeXPosition - currentSize);
                    currentSize = this._contextForBreakLines.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, relativeIndex)).width;
                }
                // Find closest move
                if (Math.abs(relativeXPosition - currentSize) > previousDist && relativeIndex > 0) {
                    relativeIndex--;
                }
                globalIndex += relativeIndex;
                if (!this._isTextHighlightOn) {
                    this._cursorInfo.globalStartIndex = globalIndex;
                    this._cursorInfo.relativeStartIndex = relativeIndex;
                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                    this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;
                }
                else {
                    if (globalIndex < this._highlightCursorInfo.initialStartIndex) {
                        this._cursorInfo.globalStartIndex = globalIndex;
                        this._cursorInfo.relativeStartIndex = relativeIndex;
                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;
                        this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;
                    }
                    else {
                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;
                        this._cursorInfo.relativeStartIndex = this._highlightCursorInfo.initialRelativeStartIndex;
                        this._cursorInfo.globalEndIndex = globalIndex;
                        this._cursorInfo.relativeEndIndex = relativeIndex;
                    }
                }
                // Avoid the caret during highlighting
                this._blinkIsEven = this._isTextHighlightOn;
                this._clickedCoordinateX = null;
                this._clickedCoordinateY = null;
            }
            else {
                // Standard behavior same as Current line is at least above the initial highlight index
                this._cursorInfo.relativeStartIndex = 0;
                this._cursorInfo.currentLineIndex = 0;
                var lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
                var tmpLength = 0;
                while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {
                    tmpLength += lineLength;
                    if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {
                        this._cursorInfo.currentLineIndex++;
                        lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
                    }
                }
                this._cursorInfo.relativeStartIndex = this._cursorInfo.globalStartIndex - tmpLength;
                if (!this._isTextHighlightOn) {
                    this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;
                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;
                }
                else if (this._highlightCursorInfo.initialStartIndex !== -1 && this._cursorInfo.globalStartIndex >= this._highlightCursorInfo.initialStartIndex) {
                    // Current line is at least below the initial highlight index
                    while (tmpLength + lineLength <= this._cursorInfo.globalEndIndex) {
                        tmpLength += lineLength;
                        if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {
                            this._cursorInfo.currentLineIndex++;
                            lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;
                        }
                    }
                    this._cursorInfo.relativeEndIndex = this._cursorInfo.globalEndIndex - tmpLength;
                }
            }
        }
    };
    /**
     * Update all values of cursor information based on cursorIndex value
     *
     * @param offset The index to take care of
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    InputTextArea.prototype._updateValueFromCursorIndex = function (offset) {
        // Override to avoid parent behavior during _onPointerMove
    };
    /**
     * Select the word immediatly under the cursor on double click
     *
     * @param _evt Pointer informations of double click
     * @internal
     */
    InputTextArea.prototype._processDblClick = function (_evt) {
        //pre-find the start and end index of the word under cursor, speeds up the rendering
        var moveLeft, moveRight;
        do {
            moveLeft = this._cursorInfo.globalStartIndex > 0 && this._textWrapper.isWord(this._cursorInfo.globalStartIndex - 1) ? --this._cursorInfo.globalStartIndex : 0;
            moveRight =
                this._cursorInfo.globalEndIndex < this._textWrapper.length && this._textWrapper.isWord(this._cursorInfo.globalEndIndex) ? ++this._cursorInfo.globalEndIndex : 0;
        } while (moveLeft || moveRight);
        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;
        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;
        this.onTextHighlightObservable.notifyObservers(this);
        this._isTextHighlightOn = true;
        this._blinkIsEven = true;
        this._markAsDirty();
    };
    /** @internal */
    InputTextArea.prototype._selectAllText = function () {
        this._isTextHighlightOn = true;
        this._blinkIsEven = true;
        this._highlightCursorInfo = {
            initialStartIndex: 0,
            initialRelativeStartIndex: 0,
            initialLineIndex: 0,
        };
        this._cursorInfo = {
            globalStartIndex: 0,
            globalEndIndex: this._textWrapper.length,
            relativeEndIndex: this._lines[this._lines.length - 1].text.length,
            relativeStartIndex: 0,
            currentLineIndex: this._lines.length - 1,
        };
        this._markAsDirty();
    };
    InputTextArea.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.onLinesReadyObservable.clear();
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputTextArea.prototype, "autoStretchHeight", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], InputTextArea.prototype, "maxHeight", null);
    return InputTextArea;
}(_inputText__WEBPACK_IMPORTED_MODULE_3__.InputText));
(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.InputTextArea", InputTextArea);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/line.ts":
/*!************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/line.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Line: () => (/* binding */ Line)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");







/** Class used to render 2D lines */
var Line = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(Line, _super);
    /**
     * Creates a new Line
     * @param name defines the control name
     */
    function Line(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._lineWidth = 1;
        /** @internal */
        _this._x1 = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
        /** @internal */
        _this._y1 = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
        /** @internal */
        _this._x2 = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
        /** @internal */
        _this._y2 = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(0);
        _this._dash = new Array();
        _this._automaticSize = true;
        _this.isHitTestVisible = false;
        _this._horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_TOP;
        return _this;
    }
    Object.defineProperty(Line.prototype, "dash", {
        /** Gets or sets the dash pattern */
        get: function () {
            return this._dash;
        },
        set: function (value) {
            if (this._dash === value) {
                return;
            }
            this._dash = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "connectedControl", {
        /** Gets or sets the control connected with the line end */
        get: function () {
            return this._connectedControl;
        },
        set: function (value) {
            var _this = this;
            if (this._connectedControl === value) {
                return;
            }
            if (this._connectedControlDirtyObserver && this._connectedControl) {
                this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);
                this._connectedControlDirtyObserver = null;
            }
            if (value) {
                this._connectedControlDirtyObserver = value.onDirtyObservable.add(function () { return _this._markAsDirty(); });
            }
            this._connectedControl = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "x1", {
        /** Gets or sets start coordinates on X axis */
        get: function () {
            return this._x1.toString(this._host);
        },
        set: function (value) {
            if (this._x1.toString(this._host) === value) {
                return;
            }
            if (this._x1.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "y1", {
        /** Gets or sets start coordinates on Y axis */
        get: function () {
            return this._y1.toString(this._host);
        },
        set: function (value) {
            if (this._y1.toString(this._host) === value) {
                return;
            }
            if (this._y1.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "x2", {
        /** Gets or sets end coordinates on X axis */
        get: function () {
            return this._x2.toString(this._host);
        },
        set: function (value) {
            if (this._x2.toString(this._host) === value) {
                return;
            }
            if (this._x2.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "y2", {
        /** Gets or sets end coordinates on Y axis */
        get: function () {
            return this._y2.toString(this._host);
        },
        set: function (value) {
            if (this._y2.toString(this._host) === value) {
                return;
            }
            if (this._y2.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "lineWidth", {
        /** Gets or sets line width */
        get: function () {
            return this._lineWidth;
        },
        set: function (value) {
            if (this._lineWidth === value) {
                return;
            }
            this._lineWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "horizontalAlignment", {
        /** Gets or sets horizontal alignment */
        set: function (value) {
            return;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "verticalAlignment", {
        /** Gets or sets vertical alignment */
        set: function (value) {
            return;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "_effectiveX2", {
        /** @internal */
        get: function () {
            return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Line.prototype, "_effectiveY2", {
        /** @internal */
        get: function () {
            return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);
        },
        enumerable: false,
        configurable: true
    });
    Line.prototype._getTypeName = function () {
        return "Line";
    };
    Line.prototype._draw = function (context) {
        context.save();
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        this._applyStates(context);
        context.strokeStyle = this._getColor(context);
        context.lineWidth = this._lineWidth;
        context.setLineDash(this._dash);
        context.beginPath();
        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));
        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);
        context.stroke();
        context.restore();
    };
    Line.prototype._measure = function () {
        // Width / Height
        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;
        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;
    };
    Line.prototype._computeAlignment = function (parentMeasure) {
        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;
        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;
    };
    /**
     * Move one end of the line given 3D cartesian coordinates.
     * @param position Targeted world position
     * @param scene Scene
     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.
     */
    Line.prototype.moveToVector3 = function (position, scene, end) {
        if (end === void 0) { end = false; }
        if (!this._host || this.parent !== this._host._rootContainer) {
            babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Tools.Error("Cannot move a control to a vector3 if the control is not at root level");
            return;
        }
        var globalViewport = this._host._getGlobalViewport();
        var projectedPosition = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Project(position, babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);
        this._moveToProjectedPosition(projectedPosition, end);
        if (projectedPosition.z < 0 || projectedPosition.z > 1) {
            this.notRenderable = true;
            return;
        }
        this.notRenderable = false;
    };
    /**
     * Move one end of the line to a position in screen absolute space.
     * @param projectedPosition Position in screen absolute space (X, Y)
     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.
     */
    Line.prototype._moveToProjectedPosition = function (projectedPosition, end) {
        if (end === void 0) { end = false; }
        var x = projectedPosition.x + this._linkOffsetX.getValue(this._host) + "px";
        var y = projectedPosition.y + this._linkOffsetY.getValue(this._host) + "px";
        if (end) {
            this.x2 = x;
            this.y2 = y;
            this._x2.ignoreAdaptiveScaling = true;
            this._y2.ignoreAdaptiveScaling = true;
        }
        else {
            this.x1 = x;
            this.y1 = y;
            this._x1.ignoreAdaptiveScaling = true;
            this._y1.ignoreAdaptiveScaling = true;
        }
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Line.prototype, "dash", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Line.prototype, "x1", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Line.prototype, "y1", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Line.prototype, "x2", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Line.prototype, "y2", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], Line.prototype, "lineWidth", null);
    return Line;
}(_control__WEBPACK_IMPORTED_MODULE_1__.Control));
(0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.Line", Line);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/multiLine.ts":
/*!*****************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/multiLine.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiLine: () => (/* binding */ MultiLine)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _multiLinePoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../multiLinePoint */ "../../../dev/gui/src/2D/multiLinePoint.ts");






/**
 * Class used to create multi line control
 */
var MultiLine = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MultiLine, _super);
    /**
     * Creates a new MultiLine
     * @param name defines the control name
     */
    function MultiLine(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._lineWidth = 1;
        /** Function called when a point is updated */
        _this.onPointUpdate = function () {
            _this._markAsDirty();
        };
        _this._automaticSize = true;
        _this.isHitTestVisible = false;
        _this._horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_TOP;
        _this._dash = [];
        _this._points = [];
        return _this;
    }
    Object.defineProperty(MultiLine.prototype, "dash", {
        /** Gets or sets dash pattern */
        get: function () {
            return this._dash;
        },
        set: function (value) {
            if (this._dash === value) {
                return;
            }
            this._dash = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets point stored at specified index
     * @param index defines the index to look for
     * @returns the requested point if found
     */
    MultiLine.prototype.getAt = function (index) {
        if (!this._points[index]) {
            this._points[index] = new _multiLinePoint__WEBPACK_IMPORTED_MODULE_2__.MultiLinePoint(this);
        }
        return this._points[index];
    };
    /**
     * Adds new points to the point collection
     * @param items defines the list of items (mesh, control or 2d coordinates) to add
     * @returns the list of created MultiLinePoint
     */
    MultiLine.prototype.add = function () {
        var _this = this;
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return items.map(function (item) { return _this.push(item); });
    };
    /**
     * Adds a new point to the point collection
     * @param item defines the item (mesh, control or 2d coordinates) to add
     * @returns the created MultiLinePoint
     */
    MultiLine.prototype.push = function (item) {
        var point = this.getAt(this._points.length);
        if (item == null) {
            return point;
        }
        if (item instanceof babylonjs_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_0__.AbstractMesh) {
            point.mesh = item;
        }
        else if (item instanceof _control__WEBPACK_IMPORTED_MODULE_1__.Control) {
            point.control = item;
        }
        else if (item.x != null && item.y != null) {
            point.x = item.x;
            point.y = item.y;
        }
        return point;
    };
    /**
     * Remove a specific value or point from the active point collection
     * @param value defines the value or point to remove
     */
    MultiLine.prototype.remove = function (value) {
        var index;
        if (value instanceof _multiLinePoint__WEBPACK_IMPORTED_MODULE_2__.MultiLinePoint) {
            index = this._points.indexOf(value);
            if (index === -1) {
                return;
            }
        }
        else {
            index = value;
        }
        var point = this._points[index];
        if (!point) {
            return;
        }
        point.dispose();
        this._points.splice(index, 1);
    };
    /**
     * Resets this object to initial state (no point)
     */
    MultiLine.prototype.reset = function () {
        while (this._points.length > 0) {
            this.remove(this._points.length - 1);
        }
    };
    /**
     * Resets all links
     */
    MultiLine.prototype.resetLinks = function () {
        this._points.forEach(function (point) {
            if (point != null) {
                point.resetLinks();
            }
        });
    };
    Object.defineProperty(MultiLine.prototype, "lineWidth", {
        /** Gets or sets line width */
        get: function () {
            return this._lineWidth;
        },
        set: function (value) {
            if (this._lineWidth === value) {
                return;
            }
            this._lineWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiLine.prototype, "horizontalAlignment", {
        set: function (value) {
            return;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiLine.prototype, "verticalAlignment", {
        set: function (value) {
            return;
        },
        enumerable: false,
        configurable: true
    });
    MultiLine.prototype._getTypeName = function () {
        return "MultiLine";
    };
    MultiLine.prototype._draw = function (context) {
        context.save();
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        this._applyStates(context);
        context.strokeStyle = this.color;
        context.lineWidth = this._lineWidth;
        context.setLineDash(this._dash);
        context.beginPath();
        var first = true; //first index is not necessarily 0
        var previousPoint;
        this._points.forEach(function (point) {
            if (!point) {
                return;
            }
            if (first) {
                context.moveTo(point._point.x, point._point.y);
                first = false;
            }
            else {
                if (point._point.z < 1 && previousPoint.z < 1) {
                    context.lineTo(point._point.x, point._point.y);
                }
                else {
                    context.moveTo(point._point.x, point._point.y);
                }
            }
            previousPoint = point._point;
        });
        context.stroke();
        context.restore();
    };
    MultiLine.prototype._additionalProcessing = function () {
        var _this = this;
        this._minX = null;
        this._minY = null;
        this._maxX = null;
        this._maxY = null;
        this._points.forEach(function (point) {
            if (!point) {
                return;
            }
            point.translate();
            if (_this._minX == null || point._point.x < _this._minX) {
                _this._minX = point._point.x;
            }
            if (_this._minY == null || point._point.y < _this._minY) {
                _this._minY = point._point.y;
            }
            if (_this._maxX == null || point._point.x > _this._maxX) {
                _this._maxX = point._point.x;
            }
            if (_this._maxY == null || point._point.y > _this._maxY) {
                _this._maxY = point._point.y;
            }
        });
        if (this._minX == null) {
            this._minX = 0;
        }
        if (this._minY == null) {
            this._minY = 0;
        }
        if (this._maxX == null) {
            this._maxX = 0;
        }
        if (this._maxY == null) {
            this._maxY = 0;
        }
    };
    MultiLine.prototype._measure = function () {
        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {
            return;
        }
        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;
        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;
    };
    MultiLine.prototype._computeAlignment = function () {
        if (this._minX == null || this._minY == null) {
            return;
        }
        this._currentMeasure.left = this._minX - this._lineWidth / 2;
        this._currentMeasure.top = this._minY - this._lineWidth / 2;
    };
    MultiLine.prototype.dispose = function () {
        this.reset();
        _super.prototype.dispose.call(this);
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MultiLine.prototype, "dash", null);
    return MultiLine;
}(_control__WEBPACK_IMPORTED_MODULE_1__.Control));
(0,babylonjs_Meshes_abstractMesh__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.MultiLine", MultiLine);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/radioButton.ts":
/*!*******************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/radioButton.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RadioButton: () => (/* binding */ RadioButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _stackPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stackPanel */ "../../../dev/gui/src/2D/controls/stackPanel.ts");
/* harmony import */ var _textBlock__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");







/**
 * Class used to create radio button controls
 */
var RadioButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(RadioButton, _super);
    /**
     * Creates a new RadioButton
     * @param name defines the control name
     */
    function RadioButton(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._isChecked = false;
        _this._background = "black";
        _this._checkSizeRatio = 0.8;
        _this._thickness = 1;
        /** Gets or sets group name */
        _this.group = "";
        /** Observable raised when isChecked is changed */
        _this.onIsCheckedChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        _this.isPointerBlocker = true;
        return _this;
    }
    Object.defineProperty(RadioButton.prototype, "thickness", {
        /** Gets or sets border thickness */
        get: function () {
            return this._thickness;
        },
        set: function (value) {
            if (this._thickness === value) {
                return;
            }
            this._thickness = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadioButton.prototype, "checkSizeRatio", {
        /** Gets or sets a value indicating the ratio between overall size and check size */
        get: function () {
            return this._checkSizeRatio;
        },
        set: function (value) {
            value = Math.max(Math.min(1, value), 0);
            if (this._checkSizeRatio === value) {
                return;
            }
            this._checkSizeRatio = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadioButton.prototype, "background", {
        /** Gets or sets background color */
        get: function () {
            return this._background;
        },
        set: function (value) {
            if (this._background === value) {
                return;
            }
            this._background = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadioButton.prototype, "isChecked", {
        /** Gets or sets a boolean indicating if the checkbox is checked or not */
        get: function () {
            return this._isChecked;
        },
        set: function (value) {
            var _this = this;
            if (this._isChecked === value) {
                return;
            }
            this._isChecked = value;
            this._markAsDirty();
            this.onIsCheckedChangedObservable.notifyObservers(value);
            if (this._isChecked && this._host) {
                // Update all controls from same group
                this._host.executeOnAllControls(function (control) {
                    if (control === _this) {
                        return;
                    }
                    if (control.group === undefined) {
                        return;
                    }
                    var childRadio = control;
                    if (childRadio.group === _this.group) {
                        childRadio.isChecked = false;
                    }
                });
            }
        },
        enumerable: false,
        configurable: true
    });
    RadioButton.prototype._getTypeName = function () {
        return "RadioButton";
    };
    RadioButton.prototype._draw = function (context) {
        context.save();
        this._applyStates(context);
        var actualWidth = this._currentMeasure.width - this._thickness;
        var actualHeight = this._currentMeasure.height - this._thickness;
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        // Outer
        _control__WEBPACK_IMPORTED_MODULE_1__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, 1, context);
        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;
        context.fill();
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
        }
        context.strokeStyle = this.color;
        context.lineWidth = this._thickness;
        context.stroke();
        // Inner
        if (this._isChecked) {
            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;
            var offsetWidth = actualWidth * this._checkSizeRatio;
            var offseHeight = actualHeight * this._checkSizeRatio;
            _control__WEBPACK_IMPORTED_MODULE_1__.Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, 1, context);
            context.fill();
        }
        context.restore();
    };
    // Events
    RadioButton.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
            return false;
        }
        if (this.isReadOnly) {
            return true;
        }
        if (!this.isChecked) {
            this.isChecked = true;
        }
        return true;
    };
    /**
     * Utility function to easily create a radio button with a header
     * @param title defines the label to use for the header
     * @param group defines the group to use for the radio button
     * @param isChecked defines the initial state of the radio button
     * @param onValueChanged defines the callback to call when value changes
     * @returns a StackPanel containing the radio button and a textBlock
     */
    RadioButton.AddRadioButtonWithHeader = function (title, group, isChecked, onValueChanged) {
        var panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_2__.StackPanel();
        panel.isVertical = false;
        panel.height = "30px";
        var radio = new RadioButton();
        radio.width = "20px";
        radio.height = "20px";
        radio.isChecked = isChecked;
        radio.color = "green";
        radio.group = group;
        radio.onIsCheckedChangedObservable.add(function (value) { return onValueChanged(radio, value); });
        panel.addControl(radio);
        var header = new _textBlock__WEBPACK_IMPORTED_MODULE_3__.TextBlock();
        header.text = title;
        header.width = "180px";
        header.paddingLeft = "5px";
        header.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        header.color = "white";
        panel.addControl(header);
        return panel;
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], RadioButton.prototype, "thickness", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], RadioButton.prototype, "group", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], RadioButton.prototype, "checkSizeRatio", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], RadioButton.prototype, "background", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], RadioButton.prototype, "isChecked", null);
    return RadioButton;
}(_control__WEBPACK_IMPORTED_MODULE_1__.Control));
(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.RadioButton", RadioButton);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/rectangle.ts":
/*!*****************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/rectangle.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Rectangle: () => (/* binding */ Rectangle)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./container */ "../../../dev/gui/src/2D/controls/container.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__);




/** Class used to create rectangle container */
var Rectangle = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Rectangle, _super);
    /**
     * Creates a new Rectangle
     * @param name defines the control name
     */
    function Rectangle(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._thickness = 1;
        _this._cornerRadius = [0, 0, 0, 0];
        _this._cachedRadius = [0, 0, 0, 0];
        return _this;
    }
    Object.defineProperty(Rectangle.prototype, "thickness", {
        /** Gets or sets border thickness */
        get: function () {
            return this._thickness;
        },
        set: function (value) {
            if (this._thickness === value) {
                return;
            }
            this._thickness = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "cornerRadius", {
        /** Gets or sets the corner radius of all angles */
        get: function () {
            return this._cornerRadius[0];
        },
        set: function (value) {
            if (value < 0) {
                value = 0;
            }
            if (this._cornerRadius[0] === value && this._cornerRadius[1] === value && this._cornerRadius[2] === value && this._cornerRadius[3] === value) {
                return;
            }
            this._cornerRadius[0] = this._cornerRadius[1] = this._cornerRadius[2] = this._cornerRadius[3] = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "cornerRadiusX", {
        /** Gets or sets the corner radius top left angle */
        get: function () {
            return this._cornerRadius[0];
        },
        set: function (value) {
            if (this._cornerRadius[0] === value) {
                return;
            }
            this._cornerRadius[0] = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "cornerRadiusY", {
        /** Gets or sets the corner radius top right angle */
        get: function () {
            return this._cornerRadius[1];
        },
        set: function (value) {
            if (this._cornerRadius[1] === value) {
                return;
            }
            this._cornerRadius[1] = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "cornerRadiusZ", {
        /** Gets or sets the corner radius bottom left angle */
        get: function () {
            return this._cornerRadius[2];
        },
        set: function (value) {
            if (this._cornerRadius[2] === value) {
                return;
            }
            this._cornerRadius[2] = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "cornerRadiusW", {
        /** Gets or sets the corner radius bottom right angle */
        get: function () {
            return this._cornerRadius[3];
        },
        set: function (value) {
            if (this._cornerRadius[3] === value) {
                return;
            }
            this._cornerRadius[3] = value;
        },
        enumerable: false,
        configurable: true
    });
    Rectangle.prototype._getTypeName = function () {
        return "Rectangle";
    };
    /** @internal */
    Rectangle.prototype._computeAdditionalOffsetX = function () {
        var additionalWidth = 0;
        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {
            // Take in account the aliasing
            additionalWidth += 1;
        }
        if (this.thickness) {
            additionalWidth += this.thickness / 2;
        }
        return additionalWidth;
    };
    /** @internal */
    Rectangle.prototype._computeAdditionalOffsetY = function () {
        var additionalHeight = 0;
        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {
            // Take in account the aliasing
            additionalHeight += 1;
        }
        if (this.thickness) {
            additionalHeight += this.thickness / 2;
        }
        return additionalHeight;
    };
    Rectangle.prototype._getRectangleFill = function (context) {
        return this._getBackgroundColor(context);
    };
    Rectangle.prototype._localDraw = function (context) {
        context.save();
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        if (this._background || this._backgroundGradient) {
            context.fillStyle = this._getRectangleFill(context);
            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {
                this._drawRoundedRect(context, this._thickness / 2);
                context.fill();
            }
            else {
                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
            }
        }
        if (this._thickness) {
            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                context.shadowBlur = 0;
                context.shadowOffsetX = 0;
                context.shadowOffsetY = 0;
            }
            if (this.color || this.gradient) {
                context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;
            }
            context.lineWidth = this._thickness;
            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {
                this._drawRoundedRect(context, this._thickness / 2);
                context.stroke();
            }
            else {
                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);
            }
        }
        context.restore();
    };
    Rectangle.prototype._additionalProcessing = function (parentMeasure, context) {
        _super.prototype._additionalProcessing.call(this, parentMeasure, context);
        this._measureForChildren.width -= 2 * this._thickness;
        this._measureForChildren.height -= 2 * this._thickness;
        this._measureForChildren.left += this._thickness;
        this._measureForChildren.top += this._thickness;
    };
    Rectangle.prototype._drawRoundedRect = function (context, offset) {
        if (offset === void 0) { offset = 0; }
        var x = this._currentMeasure.left + offset;
        var y = this._currentMeasure.top + offset;
        var width = this._currentMeasure.width - offset * 2;
        var height = this._currentMeasure.height - offset * 2;
        for (var index = 0; index < this._cornerRadius.length; index++) {
            this._cachedRadius[index] = Math.abs(Math.min(height / 2, Math.min(width / 2, this._cornerRadius[index])));
        }
        context.beginPath();
        context.moveTo(x + this._cachedRadius[0], y);
        context.lineTo(x + width - this._cachedRadius[1], y);
        context.arc(x + width - this._cachedRadius[1], y + this._cachedRadius[1], this._cachedRadius[1], (3 * Math.PI) / 2, Math.PI * 2);
        context.lineTo(x + width, y + height - this._cachedRadius[2]);
        context.arc(x + width - this._cachedRadius[2], y + height - this._cachedRadius[2], this._cachedRadius[2], 0, Math.PI / 2);
        context.lineTo(x + this._cachedRadius[3], y + height);
        context.arc(x + this._cachedRadius[3], y + height - this._cachedRadius[3], this._cachedRadius[3], Math.PI / 2, Math.PI);
        context.lineTo(x, y + this._cachedRadius[0]);
        context.arc(x + this._cachedRadius[0], y + this._cachedRadius[0], this._cachedRadius[0], Math.PI, (3 * Math.PI) / 2);
        context.closePath();
    };
    Rectangle.prototype._clipForChildren = function (context) {
        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {
            this._drawRoundedRect(context, this._thickness);
            context.clip();
        }
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Rectangle.prototype, "thickness", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Rectangle.prototype, "cornerRadius", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Rectangle.prototype, "cornerRadiusX", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Rectangle.prototype, "cornerRadiusY", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Rectangle.prototype, "cornerRadiusZ", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Rectangle.prototype, "cornerRadiusW", null);
    return Rectangle;
}(_container__WEBPACK_IMPORTED_MODULE_0__.Container));
(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.Rectangle", Rectangle);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/scrollViewers/scrollViewer.ts":
/*!**********************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/scrollViewers/scrollViewer.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScrollViewer: () => (/* binding */ ScrollViewer)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../rectangle */ "../../../dev/gui/src/2D/controls/rectangle.ts");
/* harmony import */ var _grid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid */ "../../../dev/gui/src/2D/controls/grid.ts");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _scrollViewerWindow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scrollViewerWindow */ "../../../dev/gui/src/2D/controls/scrollViewers/scrollViewerWindow.ts");
/* harmony import */ var _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sliders/scrollBar */ "../../../dev/gui/src/2D/controls/sliders/scrollBar.ts");
/* harmony import */ var _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sliders/imageScrollBar */ "../../../dev/gui/src/2D/controls/sliders/imageScrollBar.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_6__);









/**
 * Class used to hold a viewer window and sliders in a grid
 */
var ScrollViewer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__extends)(ScrollViewer, _super);
    /**
     * Creates a new ScrollViewer
     * @param name of ScrollViewer
     * @param isImageBased
     */
    function ScrollViewer(name, isImageBased) {
        var _this = _super.call(this, name) || this;
        _this._barSize = 20;
        _this._pointerIsOver = false;
        _this._wheelPrecision = 0.05;
        _this._thumbLength = 0.5;
        _this._thumbHeight = 1;
        _this._barImageHeight = 1;
        _this._horizontalBarImageHeight = 1;
        _this._verticalBarImageHeight = 1;
        _this._oldWindowContentsWidth = 0;
        _this._oldWindowContentsHeight = 0;
        _this._forceHorizontalBar = false;
        _this._forceVerticalBar = false;
        _this._useImageBar = isImageBased ? isImageBased : false;
        _this.onDirtyObservable.add(function () {
            _this._horizontalBarSpace.color = _this.color;
            _this._verticalBarSpace.color = _this.color;
            _this._dragSpace.color = _this.color;
        });
        _this.onPointerEnterObservable.add(function () {
            _this._pointerIsOver = true;
        });
        _this.onPointerOutObservable.add(function () {
            _this._pointerIsOver = false;
        });
        _this._grid = new _grid__WEBPACK_IMPORTED_MODULE_1__.Grid();
        if (_this._useImageBar) {
            _this._horizontalBar = new _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_5__.ImageScrollBar();
            _this._verticalBar = new _sliders_imageScrollBar__WEBPACK_IMPORTED_MODULE_5__.ImageScrollBar();
        }
        else {
            _this._horizontalBar = new _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_4__.ScrollBar();
            _this._verticalBar = new _sliders_scrollBar__WEBPACK_IMPORTED_MODULE_4__.ScrollBar();
        }
        _this._window = new _scrollViewerWindow__WEBPACK_IMPORTED_MODULE_3__._ScrollViewerWindow("scrollViewer_window");
        _this._window.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._window.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
        _this._grid.addColumnDefinition(1);
        _this._grid.addColumnDefinition(0, true);
        _this._grid.addRowDefinition(1);
        _this._grid.addRowDefinition(0, true);
        _super.prototype.addControl.call(_this, _this._grid);
        _this._grid.addControl(_this._window, 0, 0);
        _this._verticalBarSpace = new _rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle();
        _this._verticalBarSpace.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._verticalBarSpace.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
        _this._verticalBarSpace.thickness = 1;
        _this._grid.addControl(_this._verticalBarSpace, 0, 1);
        _this._addBar(_this._verticalBar, _this._verticalBarSpace, true, Math.PI);
        _this._horizontalBarSpace = new _rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle();
        _this._horizontalBarSpace.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._horizontalBarSpace.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
        _this._horizontalBarSpace.thickness = 1;
        _this._grid.addControl(_this._horizontalBarSpace, 1, 0);
        _this._addBar(_this._horizontalBar, _this._horizontalBarSpace, false, 0);
        _this._dragSpace = new _rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle();
        _this._dragSpace.thickness = 1;
        _this._grid.addControl(_this._dragSpace, 1, 1);
        _this._grid.clipChildren = false;
        // Colors
        if (!_this._useImageBar) {
            _this.barColor = "grey";
            _this.barBackground = "transparent";
        }
        return _this;
    }
    Object.defineProperty(ScrollViewer.prototype, "horizontalBar", {
        /**
         * Gets the horizontal scrollbar
         */
        get: function () {
            return this._horizontalBar;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "verticalBar", {
        /**
         * Gets the vertical scrollbar
         */
        get: function () {
            return this._verticalBar;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Adds a new control to the current container
     * @param control defines the control to add
     * @returns the current container
     */
    ScrollViewer.prototype.addControl = function (control) {
        if (!control) {
            return this;
        }
        this._window.addControl(control);
        return this;
    };
    /**
     * Removes a control from the current container
     * @param control defines the control to remove
     * @returns the current container
     */
    ScrollViewer.prototype.removeControl = function (control) {
        this._window.removeControl(control);
        return this;
    };
    Object.defineProperty(ScrollViewer.prototype, "children", {
        /** Gets the list of children */
        get: function () {
            return this._window.children;
        },
        enumerable: false,
        configurable: true
    });
    ScrollViewer.prototype._flagDescendantsAsMatrixDirty = function () {
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            child._markMatrixAsDirty();
        }
    };
    Object.defineProperty(ScrollViewer.prototype, "freezeControls", {
        /**
         * Freezes or unfreezes the controls in the window.
         * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls
         * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again
         */
        get: function () {
            return this._window.freezeControls;
        },
        set: function (value) {
            this._window.freezeControls = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "bucketWidth", {
        /** Gets the bucket width */
        get: function () {
            return this._window.bucketWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "bucketHeight", {
        /** Gets the bucket height */
        get: function () {
            return this._window.bucketHeight;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the bucket sizes.
     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only
     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which
     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of
     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.
     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory
     * used), that's why it is not enabled by default.
     * @param width width of the bucket
     * @param height height of the bucket
     */
    ScrollViewer.prototype.setBucketSizes = function (width, height) {
        this._window.setBucketSizes(width, height);
    };
    Object.defineProperty(ScrollViewer.prototype, "forceHorizontalBar", {
        /**
         * Forces the horizontal scroll bar to be displayed
         */
        get: function () {
            return this._forceHorizontalBar;
        },
        set: function (value) {
            this._grid.setRowDefinition(1, value ? this._barSize : 0, true);
            this._horizontalBar.isVisible = value;
            this._forceHorizontalBar = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "forceVerticalBar", {
        /**
         * Forces the vertical scroll bar to be displayed
         */
        get: function () {
            return this._forceVerticalBar;
        },
        set: function (value) {
            this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);
            this._verticalBar.isVisible = value;
            this._forceVerticalBar = value;
        },
        enumerable: false,
        configurable: true
    });
    /** Reset the scroll viewer window to initial size */
    ScrollViewer.prototype.resetWindow = function () {
        this._window.width = "100%";
        this._window.height = "100%";
    };
    ScrollViewer.prototype._getTypeName = function () {
        return "ScrollViewer";
    };
    ScrollViewer.prototype._buildClientSizes = function () {
        var ratio = this.host.idealRatio;
        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;
        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;
        this._clientWidth = this._window.parentClientWidth;
        this._clientHeight = this._window.parentClientHeight;
    };
    ScrollViewer.prototype._additionalProcessing = function (parentMeasure, context) {
        _super.prototype._additionalProcessing.call(this, parentMeasure, context);
        this._buildClientSizes();
    };
    ScrollViewer.prototype._postMeasure = function () {
        _super.prototype._postMeasure.call(this);
        this._updateScroller();
        this._setWindowPosition(false);
    };
    Object.defineProperty(ScrollViewer.prototype, "wheelPrecision", {
        /**
         * Gets or sets the mouse wheel precision
         * from 0 to 1 with a default value of 0.05
         * */
        get: function () {
            return this._wheelPrecision;
        },
        set: function (value) {
            if (this._wheelPrecision === value) {
                return;
            }
            if (value < 0) {
                value = 0;
            }
            if (value > 1) {
                value = 1;
            }
            this._wheelPrecision = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "scrollBackground", {
        /** Gets or sets the scroll bar container background color */
        get: function () {
            return this._horizontalBarSpace.background;
        },
        set: function (color) {
            if (this._horizontalBarSpace.background === color) {
                return;
            }
            this._horizontalBarSpace.background = color;
            this._verticalBarSpace.background = color;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "barColor", {
        /** Gets or sets the bar color */
        get: function () {
            return this._barColor;
        },
        set: function (color) {
            if (this._barColor === color) {
                return;
            }
            this._barColor = color;
            this._horizontalBar.color = color;
            this._verticalBar.color = color;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "thumbImage", {
        /** Gets or sets the bar image */
        get: function () {
            return this._barImage;
        },
        set: function (value) {
            if (this._barImage === value) {
                return;
            }
            this._barImage = value;
            var hb = this._horizontalBar;
            var vb = this._verticalBar;
            hb.thumbImage = value;
            vb.thumbImage = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "horizontalThumbImage", {
        /** Gets or sets the horizontal bar image */
        get: function () {
            return this._horizontalBarImage;
        },
        set: function (value) {
            if (this._horizontalBarImage === value) {
                return;
            }
            this._horizontalBarImage = value;
            var hb = this._horizontalBar;
            hb.thumbImage = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "verticalThumbImage", {
        /** Gets or sets the vertical bar image */
        get: function () {
            return this._verticalBarImage;
        },
        set: function (value) {
            if (this._verticalBarImage === value) {
                return;
            }
            this._verticalBarImage = value;
            var vb = this._verticalBar;
            vb.thumbImage = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "barSize", {
        /** Gets or sets the size of the bar */
        get: function () {
            return this._barSize;
        },
        set: function (value) {
            if (this._barSize === value) {
                return;
            }
            this._barSize = value;
            this._markAsDirty();
            if (this._horizontalBar.isVisible) {
                this._grid.setRowDefinition(1, this._barSize, true);
            }
            if (this._verticalBar.isVisible) {
                this._grid.setColumnDefinition(1, this._barSize, true);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "thumbLength", {
        /** Gets or sets the length of the thumb */
        get: function () {
            return this._thumbLength;
        },
        set: function (value) {
            if (this._thumbLength === value) {
                return;
            }
            if (value <= 0) {
                value = 0.1;
            }
            if (value > 1) {
                value = 1;
            }
            this._thumbLength = value;
            var hb = this._horizontalBar;
            var vb = this._verticalBar;
            hb.thumbLength = value;
            vb.thumbLength = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "thumbHeight", {
        /** Gets or sets the height of the thumb */
        get: function () {
            return this._thumbHeight;
        },
        set: function (value) {
            if (this._thumbHeight === value) {
                return;
            }
            if (value <= 0) {
                value = 0.1;
            }
            if (value > 1) {
                value = 1;
            }
            this._thumbHeight = value;
            var hb = this._horizontalBar;
            var vb = this._verticalBar;
            hb.thumbHeight = value;
            vb.thumbHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "barImageHeight", {
        /** Gets or sets the height of the bar image */
        get: function () {
            return this._barImageHeight;
        },
        set: function (value) {
            if (this._barImageHeight === value) {
                return;
            }
            if (value <= 0) {
                value = 0.1;
            }
            if (value > 1) {
                value = 1;
            }
            this._barImageHeight = value;
            var hb = this._horizontalBar;
            var vb = this._verticalBar;
            hb.barImageHeight = value;
            vb.barImageHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "horizontalBarImageHeight", {
        /** Gets or sets the height of the horizontal bar image */
        get: function () {
            return this._horizontalBarImageHeight;
        },
        set: function (value) {
            if (this._horizontalBarImageHeight === value) {
                return;
            }
            if (value <= 0) {
                value = 0.1;
            }
            if (value > 1) {
                value = 1;
            }
            this._horizontalBarImageHeight = value;
            var hb = this._horizontalBar;
            hb.barImageHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "verticalBarImageHeight", {
        /** Gets or sets the height of the vertical bar image */
        get: function () {
            return this._verticalBarImageHeight;
        },
        set: function (value) {
            if (this._verticalBarImageHeight === value) {
                return;
            }
            if (value <= 0) {
                value = 0.1;
            }
            if (value > 1) {
                value = 1;
            }
            this._verticalBarImageHeight = value;
            var vb = this._verticalBar;
            vb.barImageHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "barBackground", {
        /** Gets or sets the bar background */
        get: function () {
            return this._barBackground;
        },
        set: function (color) {
            if (this._barBackground === color) {
                return;
            }
            this._barBackground = color;
            var hb = this._horizontalBar;
            var vb = this._verticalBar;
            hb.background = color;
            vb.background = color;
            this._dragSpace.background = color;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "barImage", {
        /** Gets or sets the bar background image */
        get: function () {
            return this._barBackgroundImage;
        },
        set: function (value) {
            this._barBackgroundImage = value;
            var hb = this._horizontalBar;
            var vb = this._verticalBar;
            hb.backgroundImage = value;
            vb.backgroundImage = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "horizontalBarImage", {
        /** Gets or sets the horizontal bar background image */
        get: function () {
            return this._horizontalBarBackgroundImage;
        },
        set: function (value) {
            this._horizontalBarBackgroundImage = value;
            var hb = this._horizontalBar;
            hb.backgroundImage = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollViewer.prototype, "verticalBarImage", {
        /** Gets or sets the vertical bar background image */
        get: function () {
            return this._verticalBarBackgroundImage;
        },
        set: function (value) {
            this._verticalBarBackgroundImage = value;
            var vb = this._verticalBar;
            vb.backgroundImage = value;
        },
        enumerable: false,
        configurable: true
    });
    ScrollViewer.prototype._setWindowPosition = function (force) {
        if (force === void 0) { force = true; }
        var ratio = this.host.idealRatio;
        var windowContentsWidth = this._window._currentMeasure.width;
        var windowContentsHeight = this._window._currentMeasure.height;
        if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {
            return;
        }
        this._oldWindowContentsWidth = windowContentsWidth;
        this._oldWindowContentsHeight = windowContentsHeight;
        var _endLeft = this._clientWidth - windowContentsWidth;
        var _endTop = this._clientHeight - windowContentsHeight;
        var newLeft = (this._horizontalBar.value / ratio) * _endLeft + "px";
        var newTop = (this._verticalBar.value / ratio) * _endTop + "px";
        if (newLeft !== this._window.left) {
            this._window.left = newLeft;
            if (!this.freezeControls) {
                this._rebuildLayout = true;
            }
        }
        if (newTop !== this._window.top) {
            this._window.top = newTop;
            if (!this.freezeControls) {
                this._rebuildLayout = true;
            }
        }
    };
    /** @internal */
    ScrollViewer.prototype._updateScroller = function () {
        var windowContentsWidth = this._window._currentMeasure.width;
        var windowContentsHeight = this._window._currentMeasure.height;
        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {
            this._grid.setRowDefinition(1, 0, true);
            this._horizontalBar.isVisible = false;
            this._horizontalBar.value = 0;
            this._rebuildLayout = true;
        }
        else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {
            this._grid.setRowDefinition(1, this._barSize, true);
            this._horizontalBar.isVisible = true;
            this._rebuildLayout = true;
        }
        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {
            this._grid.setColumnDefinition(1, 0, true);
            this._verticalBar.isVisible = false;
            this._verticalBar.value = 0;
            this._rebuildLayout = true;
        }
        else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {
            this._grid.setColumnDefinition(1, this._barSize, true);
            this._verticalBar.isVisible = true;
            this._rebuildLayout = true;
        }
        this._buildClientSizes();
        var ratio = this.host.idealRatio;
        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + "px";
        this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + "px";
    };
    ScrollViewer.prototype._link = function (host) {
        _super.prototype._link.call(this, host);
        this._attachWheel();
    };
    /**
     * @internal
     */
    ScrollViewer.prototype._addBar = function (barControl, barContainer, isVertical, rotation) {
        var _this = this;
        barControl.paddingLeft = 0;
        barControl.width = "100%";
        barControl.height = "100%";
        barControl.barOffset = 0;
        barControl.value = 0;
        barControl.maximum = 1;
        barControl.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER;
        barControl.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
        barControl.isVertical = isVertical;
        barControl.rotation = rotation;
        barControl.isVisible = false;
        barContainer.addControl(barControl);
        barControl.onValueChangedObservable.add(function () {
            _this._setWindowPosition();
        });
    };
    /** @internal */
    ScrollViewer.prototype._attachWheel = function () {
        var _this = this;
        if (!this._host || this._onWheelObserver) {
            return;
        }
        this._onWheelObserver = this.onWheelObservable.add(function (pi) {
            if (!_this._pointerIsOver || _this.isReadOnly) {
                return;
            }
            if (_this._verticalBar.isVisible == true) {
                if (pi.y < 0 && _this._verticalBar.value > 0) {
                    _this._verticalBar.value -= _this._wheelPrecision;
                }
                else if (pi.y > 0 && _this._verticalBar.value < _this._verticalBar.maximum) {
                    _this._verticalBar.value += _this._wheelPrecision;
                }
            }
            if (_this._horizontalBar.isVisible == true) {
                if (pi.x < 0 && _this._horizontalBar.value < _this._horizontalBar.maximum) {
                    _this._horizontalBar.value += _this._wheelPrecision;
                }
                else if (pi.x > 0 && _this._horizontalBar.value > 0) {
                    _this._horizontalBar.value -= _this._wheelPrecision;
                }
            }
        });
    };
    ScrollViewer.prototype._renderHighlightSpecific = function (context) {
        if (!this.isHighlighted) {
            return;
        }
        _super.prototype._renderHighlightSpecific.call(this, context);
        this._grid._renderHighlightSpecific(context);
        context.restore();
    };
    /** Releases associated resources */
    ScrollViewer.prototype.dispose = function () {
        this.onWheelObservable.remove(this._onWheelObserver);
        this._onWheelObserver = null;
        _super.prototype.dispose.call(this);
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_6__.serialize)()
    ], ScrollViewer.prototype, "wheelPrecision", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_6__.serialize)()
    ], ScrollViewer.prototype, "scrollBackground", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_6__.serialize)()
    ], ScrollViewer.prototype, "barColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_6__.serialize)()
    ], ScrollViewer.prototype, "barSize", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_6__.serialize)()
    ], ScrollViewer.prototype, "barBackground", null);
    return ScrollViewer;
}(_rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle));
(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_6__.RegisterClass)("BABYLON.GUI.ScrollViewer", ScrollViewer);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/scrollViewers/scrollViewerWindow.ts":
/*!****************************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/scrollViewers/scrollViewerWindow.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _ScrollViewerWindow: () => (/* binding */ _ScrollViewerWindow)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../measure */ "../../../dev/gui/src/2D/measure.ts");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../container */ "../../../dev/gui/src/2D/controls/container.ts");
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../control */ "../../../dev/gui/src/2D/controls/control.ts");





/**
 * Class used to hold a the container for ScrollViewer
 * @internal
 */
var _ScrollViewerWindow = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(_ScrollViewerWindow, _super);
    /**
     * Creates a new ScrollViewerWindow
     * @param name of ScrollViewerWindow
     */
    function _ScrollViewerWindow(name) {
        var _this = _super.call(this, name) || this;
        _this._freezeControls = false;
        _this._bucketWidth = 0;
        _this._bucketHeight = 0;
        _this._buckets = {};
        return _this;
    }
    Object.defineProperty(_ScrollViewerWindow.prototype, "freezeControls", {
        get: function () {
            return this._freezeControls;
        },
        set: function (value) {
            if (this._freezeControls === value) {
                return;
            }
            if (!value) {
                this._restoreMeasures();
            }
            // trigger a full normal layout calculation to be sure all children have their measures up to date
            this._freezeControls = false;
            var textureSize = this.host.getSize();
            var renderWidth = textureSize.width;
            var renderHeight = textureSize.height;
            var context = this.host.getContext();
            var measure = new _measure__WEBPACK_IMPORTED_MODULE_0__.Measure(0, 0, renderWidth, renderHeight);
            this.host._numLayoutCalls = 0;
            this.host._rootContainer._layout(measure, context);
            // in freeze mode, prepare children measures accordingly
            if (value) {
                this._updateMeasures();
                if (this._useBuckets()) {
                    this._makeBuckets();
                }
            }
            this._freezeControls = value;
            this.host.markAsDirty(); // redraw with the (new) current settings
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ScrollViewerWindow.prototype, "bucketWidth", {
        get: function () {
            return this._bucketWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ScrollViewerWindow.prototype, "bucketHeight", {
        get: function () {
            return this._bucketHeight;
        },
        enumerable: false,
        configurable: true
    });
    _ScrollViewerWindow.prototype.setBucketSizes = function (width, height) {
        this._bucketWidth = width;
        this._bucketHeight = height;
        if (this._useBuckets()) {
            if (this._freezeControls) {
                this._makeBuckets();
            }
        }
        else {
            this._buckets = {};
        }
    };
    _ScrollViewerWindow.prototype._useBuckets = function () {
        return this._bucketWidth > 0 && this._bucketHeight > 0;
    };
    _ScrollViewerWindow.prototype._makeBuckets = function () {
        this._buckets = {};
        this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);
        this._dispatchInBuckets(this._children);
        this._oldLeft = null;
        this._oldTop = null;
    };
    _ScrollViewerWindow.prototype._dispatchInBuckets = function (children) {
        for (var i = 0; i < children.length; ++i) {
            var child = children[i];
            var bStartX = Math.max(0, Math.floor((child._customData._origLeft - this._customData.origLeft) / this._bucketWidth)), bEndX = Math.floor((child._customData._origLeft - this._customData.origLeft + child._currentMeasure.width - 1) / this._bucketWidth), bEndY = Math.floor((child._customData._origTop - this._customData.origTop + child._currentMeasure.height - 1) / this._bucketHeight);
            var bStartY = Math.max(0, Math.floor((child._customData._origTop - this._customData.origTop) / this._bucketHeight));
            while (bStartY <= bEndY) {
                for (var x = bStartX; x <= bEndX; ++x) {
                    var bucket = bStartY * this._bucketLen + x;
                    var lstc = this._buckets[bucket];
                    if (!lstc) {
                        lstc = [];
                        this._buckets[bucket] = lstc;
                    }
                    lstc.push(child);
                }
                bStartY++;
            }
            if (child instanceof _container__WEBPACK_IMPORTED_MODULE_1__.Container && child._children.length > 0) {
                this._dispatchInBuckets(child._children);
            }
        }
    };
    // reset left and top measures for the window and all its children
    _ScrollViewerWindow.prototype._updateMeasures = function () {
        var left = this.leftInPixels | 0, top = this.topInPixels | 0;
        this._measureForChildren.left -= left;
        this._measureForChildren.top -= top;
        this._currentMeasure.left -= left;
        this._currentMeasure.top -= top;
        this._customData.origLeftForChildren = this._measureForChildren.left;
        this._customData.origTopForChildren = this._measureForChildren.top;
        this._customData.origLeft = this._currentMeasure.left;
        this._customData.origTop = this._currentMeasure.top;
        this._updateChildrenMeasures(this._children, left, top);
    };
    _ScrollViewerWindow.prototype._updateChildrenMeasures = function (children, left, top) {
        for (var i = 0; i < children.length; ++i) {
            var child = children[i];
            child._currentMeasure.left -= left;
            child._currentMeasure.top -= top;
            child._customData._origLeft = child._currentMeasure.left; // save the original left and top values for each child
            child._customData._origTop = child._currentMeasure.top;
            if (child instanceof _container__WEBPACK_IMPORTED_MODULE_1__.Container && child._children.length > 0) {
                this._updateChildrenMeasures(child._children, left, top);
            }
        }
    };
    _ScrollViewerWindow.prototype._restoreMeasures = function () {
        var left = this.leftInPixels | 0, top = this.topInPixels | 0;
        this._measureForChildren.left = this._customData.origLeftForChildren + left;
        this._measureForChildren.top = this._customData.origTopForChildren + top;
        this._currentMeasure.left = this._customData.origLeft + left;
        this._currentMeasure.top = this._customData.origTop + top;
    };
    _ScrollViewerWindow.prototype._getTypeName = function () {
        return "ScrollViewerWindow";
    };
    /**
     * @internal
     */
    _ScrollViewerWindow.prototype._additionalProcessing = function (parentMeasure, context) {
        _super.prototype._additionalProcessing.call(this, parentMeasure, context);
        this._parentMeasure = parentMeasure;
        this._measureForChildren.left = this._currentMeasure.left;
        this._measureForChildren.top = this._currentMeasure.top;
        this._measureForChildren.width = parentMeasure.width;
        this._measureForChildren.height = parentMeasure.height;
    };
    /**
     * @internal
     */
    _ScrollViewerWindow.prototype._layout = function (parentMeasure, context) {
        if (this._freezeControls) {
            this.invalidateRect(); // will trigger a redraw of the window
            return false;
        }
        return _super.prototype._layout.call(this, parentMeasure, context);
    };
    _ScrollViewerWindow.prototype._scrollChildren = function (children, left, top) {
        for (var i = 0; i < children.length; ++i) {
            var child = children[i];
            child._currentMeasure.left = child._customData._origLeft + left;
            child._currentMeasure.top = child._customData._origTop + top;
            child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()
            if (child instanceof _container__WEBPACK_IMPORTED_MODULE_1__.Container && child._children.length > 0) {
                this._scrollChildren(child._children, left, top);
            }
        }
    };
    _ScrollViewerWindow.prototype._scrollChildrenWithBuckets = function (left, top, scrollLeft, scrollTop) {
        var bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)), bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth), bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);
        var bStartY = Math.max(0, Math.floor(-top / this._bucketHeight));
        while (bStartY <= bEndY) {
            for (var x = bStartX; x <= bEndX; ++x) {
                var bucket = bStartY * this._bucketLen + x, lstc = this._buckets[bucket];
                if (lstc) {
                    for (var i = 0; i < lstc.length; ++i) {
                        var child = lstc[i];
                        child._currentMeasure.left = child._customData._origLeft + scrollLeft;
                        child._currentMeasure.top = child._customData._origTop + scrollTop;
                        child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()
                    }
                }
            }
            bStartY++;
        }
    };
    /**
     * @internal
     */
    _ScrollViewerWindow.prototype._draw = function (context, invalidatedRectangle) {
        if (!this._freezeControls) {
            _super.prototype._draw.call(this, context, invalidatedRectangle);
            return;
        }
        this._localDraw(context);
        if (this.clipChildren) {
            this._clipForChildren(context);
        }
        var left = this.leftInPixels | 0, top = this.topInPixels | 0;
        if (this._useBuckets()) {
            if (this._oldLeft !== null && this._oldTop !== null) {
                this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);
                this._scrollChildrenWithBuckets(left, top, left, top);
            }
            else {
                this._scrollChildren(this._children, left, top);
            }
        }
        else {
            this._scrollChildren(this._children, left, top);
        }
        this._oldLeft = left;
        this._oldTop = top;
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (!child._intersectsRect(this._parentMeasure)) {
                continue;
            }
            child._render(context, this._parentMeasure);
        }
    };
    _ScrollViewerWindow.prototype._postMeasure = function () {
        if (this._freezeControls) {
            _super.prototype._postMeasure.call(this);
            return;
        }
        var maxWidth = this.parentClientWidth;
        var maxHeight = this.parentClientHeight;
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (!child.isVisible || child.notRenderable) {
                continue;
            }
            if (child.horizontalAlignment === _control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_CENTER) {
                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);
            }
            if (child.verticalAlignment === _control__WEBPACK_IMPORTED_MODULE_3__.Control.VERTICAL_ALIGNMENT_CENTER) {
                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);
            }
            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width + child.paddingRightInPixels);
            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height + child.paddingBottomInPixels);
        }
        if (this._currentMeasure.width !== maxWidth) {
            this._width.updateInPlace(maxWidth, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL);
            this._currentMeasure.width = maxWidth;
            this._rebuildLayout = true;
            this._isDirty = true;
        }
        if (this._currentMeasure.height !== maxHeight) {
            this._height.updateInPlace(maxHeight, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL);
            this._currentMeasure.height = maxHeight;
            this._rebuildLayout = true;
            this._isDirty = true;
        }
        _super.prototype._postMeasure.call(this);
    };
    return _ScrollViewerWindow;
}(_container__WEBPACK_IMPORTED_MODULE_1__.Container));



/***/ }),

/***/ "../../../dev/gui/src/2D/controls/selector.ts":
/*!****************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/selector.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CheckboxGroup: () => (/* binding */ CheckboxGroup),
/* harmony export */   RadioGroup: () => (/* binding */ RadioGroup),
/* harmony export */   SelectionPanel: () => (/* binding */ SelectionPanel),
/* harmony export */   SelectorGroup: () => (/* binding */ SelectorGroup),
/* harmony export */   SliderGroup: () => (/* binding */ SliderGroup)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rectangle */ "../../../dev/gui/src/2D/controls/rectangle.ts");
/* harmony import */ var _stackPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stackPanel */ "../../../dev/gui/src/2D/controls/stackPanel.ts");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _textBlock__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");
/* harmony import */ var _checkbox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./checkbox */ "../../../dev/gui/src/2D/controls/checkbox.ts");
/* harmony import */ var _radioButton__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./radioButton */ "../../../dev/gui/src/2D/controls/radioButton.ts");
/* harmony import */ var _sliders_slider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sliders/slider */ "../../../dev/gui/src/2D/controls/sliders/slider.ts");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./container */ "../../../dev/gui/src/2D/controls/container.ts");









/** Class used to create a RadioGroup
 * which contains groups of radio buttons
 */
var SelectorGroup = /** @class */ (function () {
    /**
     * Creates a new SelectorGroup
     * @param name of group, used as a group heading
     */
    function SelectorGroup(
    /** name of SelectorGroup */
    name) {
        this.name = name;
        this._groupPanel = new _stackPanel__WEBPACK_IMPORTED_MODULE_1__.StackPanel();
        this._selectors = new Array();
        this._groupPanel.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
        this._groupPanel.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        this._groupHeader = this._addGroupHeader(name);
    }
    Object.defineProperty(SelectorGroup.prototype, "groupPanel", {
        /** Gets the groupPanel of the SelectorGroup  */
        get: function () {
            return this._groupPanel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectorGroup.prototype, "selectors", {
        /** Gets the selectors array */
        get: function () {
            return this._selectors;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectorGroup.prototype, "header", {
        /** Gets and sets the group header */
        get: function () {
            return this._groupHeader.text;
        },
        set: function (label) {
            if (this._groupHeader.text === "label") {
                return;
            }
            this._groupHeader.text = label;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @internal
     */
    SelectorGroup.prototype._addGroupHeader = function (text) {
        var groupHeading = new _textBlock__WEBPACK_IMPORTED_MODULE_3__.TextBlock("groupHead", text);
        groupHeading.width = 0.9;
        groupHeading.height = "30px";
        groupHeading.textWrapping = true;
        groupHeading.color = "black";
        groupHeading.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        groupHeading.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        groupHeading.left = "2px";
        this._groupPanel.addControl(groupHeading);
        return groupHeading;
    };
    /**
     * @internal
     */
    SelectorGroup.prototype._getSelector = function (selectorNb) {
        if (selectorNb < 0 || selectorNb >= this._selectors.length) {
            return;
        }
        return this._selectors[selectorNb];
    };
    /** Removes the selector at the given position
     * @param selectorNb the position of the selector within the group
     */
    SelectorGroup.prototype.removeSelector = function (selectorNb) {
        if (selectorNb < 0 || selectorNb >= this._selectors.length) {
            return;
        }
        this._groupPanel.removeControl(this._selectors[selectorNb]);
        this._selectors.splice(selectorNb, 1);
    };
    return SelectorGroup;
}());

/** Class used to create a CheckboxGroup
 * which contains groups of checkbox buttons
 */
var CheckboxGroup = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__extends)(CheckboxGroup, _super);
    function CheckboxGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** Adds a checkbox as a control
     * @param text is the label for the selector
     * @param func is the function called when the Selector is checked
     * @param checked is true when Selector is checked
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    CheckboxGroup.prototype.addCheckbox = function (text, func, checked) {
        if (func === void 0) { func = function (s) { }; }
        if (checked === void 0) { checked = false; }
        checked = checked || false;
        var button = new _checkbox__WEBPACK_IMPORTED_MODULE_4__.Checkbox();
        button.width = "20px";
        button.height = "20px";
        button.color = "#364249";
        button.background = "#CCCCCC";
        button.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        button.onIsCheckedChangedObservable.add(function (state) {
            func(state);
        });
        var _selector = _control__WEBPACK_IMPORTED_MODULE_2__.Control.AddHeader(button, text, "200px", { isHorizontal: true, controlFirst: true });
        _selector.height = "30px";
        _selector.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _selector.left = "4px";
        this.groupPanel.addControl(_selector);
        this.selectors.push(_selector);
        button.isChecked = checked;
        if (this.groupPanel.parent && this.groupPanel.parent.parent) {
            button.color = this.groupPanel.parent.parent.buttonColor;
            button.background = this.groupPanel.parent.parent.buttonBackground;
        }
    };
    /**
     * @internal
     */
    CheckboxGroup.prototype._setSelectorLabel = function (selectorNb, label) {
        this.selectors[selectorNb].children[1].text = label;
    };
    /**
     * @internal
     */
    CheckboxGroup.prototype._setSelectorLabelColor = function (selectorNb, color) {
        this.selectors[selectorNb].children[1].color = color;
    };
    /**
     * @internal
     */
    CheckboxGroup.prototype._setSelectorButtonColor = function (selectorNb, color) {
        this.selectors[selectorNb].children[0].color = color;
    };
    /**
     * @internal
     */
    CheckboxGroup.prototype._setSelectorButtonBackground = function (selectorNb, color) {
        this.selectors[selectorNb].children[0].background = color;
    };
    return CheckboxGroup;
}(SelectorGroup));

/** Class used to create a RadioGroup
 * which contains groups of radio buttons
 */
var RadioGroup = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__extends)(RadioGroup, _super);
    function RadioGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._selectNb = 0;
        return _this;
    }
    /** Adds a radio button as a control
     * @param label is the label for the selector
     * @param func is the function called when the Selector is checked
     * @param checked is true when Selector is checked
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    RadioGroup.prototype.addRadio = function (label, func, checked) {
        if (func === void 0) { func = function (n) { }; }
        if (checked === void 0) { checked = false; }
        var nb = this._selectNb++;
        var button = new _radioButton__WEBPACK_IMPORTED_MODULE_5__.RadioButton();
        button.name = label;
        button.width = "20px";
        button.height = "20px";
        button.color = "#364249";
        button.background = "#CCCCCC";
        button.group = this.name;
        button.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        button.onIsCheckedChangedObservable.add(function (state) {
            if (state) {
                func(nb);
            }
        });
        var _selector = _control__WEBPACK_IMPORTED_MODULE_2__.Control.AddHeader(button, label, "200px", { isHorizontal: true, controlFirst: true });
        _selector.height = "30px";
        _selector.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _selector.left = "4px";
        this.groupPanel.addControl(_selector);
        this.selectors.push(_selector);
        button.isChecked = checked;
        if (this.groupPanel.parent && this.groupPanel.parent.parent) {
            button.color = this.groupPanel.parent.parent.buttonColor;
            button.background = this.groupPanel.parent.parent.buttonBackground;
        }
    };
    /**
     * @internal
     */
    RadioGroup.prototype._setSelectorLabel = function (selectorNb, label) {
        this.selectors[selectorNb].children[1].text = label;
    };
    /**
     * @internal
     */
    RadioGroup.prototype._setSelectorLabelColor = function (selectorNb, color) {
        this.selectors[selectorNb].children[1].color = color;
    };
    /**
     * @internal
     */
    RadioGroup.prototype._setSelectorButtonColor = function (selectorNb, color) {
        this.selectors[selectorNb].children[0].color = color;
    };
    /**
     * @internal
     */
    RadioGroup.prototype._setSelectorButtonBackground = function (selectorNb, color) {
        this.selectors[selectorNb].children[0].background = color;
    };
    return RadioGroup;
}(SelectorGroup));

/** Class used to create a SliderGroup
 * which contains groups of slider buttons
 */
var SliderGroup = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__extends)(SliderGroup, _super);
    function SliderGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a slider to the SelectorGroup
     * @param label is the label for the SliderBar
     * @param func is the function called when the Slider moves
     * @param unit is a string describing the units used, eg degrees or metres
     * @param min is the minimum value for the Slider
     * @param max is the maximum value for the Slider
     * @param value is the start value for the Slider between min and max
     * @param onValueChange is the function used to format the value displayed, eg radians to degrees
     */
    SliderGroup.prototype.addSlider = function (label, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    func, unit, min, max, value, onValueChange) {
        if (func === void 0) { func = function (v) { }; }
        if (unit === void 0) { unit = "Units"; }
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 0; }
        if (value === void 0) { value = 0; }
        if (onValueChange === void 0) { onValueChange = function (v) {
            return v | 0;
        }; }
        var button = new _sliders_slider__WEBPACK_IMPORTED_MODULE_6__.Slider();
        button.name = unit;
        button.value = value;
        button.minimum = min;
        button.maximum = max;
        button.width = 0.9;
        button.height = "20px";
        button.color = "#364249";
        button.background = "#CCCCCC";
        button.borderColor = "black";
        button.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        button.left = "4px";
        button.paddingBottom = "4px";
        button.onValueChangedObservable.add(function (value) {
            button.parent.children[0].text = button.parent.children[0].name + ": " + onValueChange(value) + " " + button.name;
            func(value);
        });
        var _selector = _control__WEBPACK_IMPORTED_MODULE_2__.Control.AddHeader(button, label + ": " + onValueChange(value) + " " + unit, "30px", { isHorizontal: false, controlFirst: false });
        _selector.height = "60px";
        _selector.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _selector.left = "4px";
        _selector.children[0].name = label;
        this.groupPanel.addControl(_selector);
        this.selectors.push(_selector);
        if (this.groupPanel.parent && this.groupPanel.parent.parent) {
            button.color = this.groupPanel.parent.parent.buttonColor;
            button.background = this.groupPanel.parent.parent.buttonBackground;
        }
    };
    /**
     * @internal
     */
    SliderGroup.prototype._setSelectorLabel = function (selectorNb, label) {
        this.selectors[selectorNb].children[0].name = label;
        this.selectors[selectorNb].children[0].text =
            label + ": " + this.selectors[selectorNb].children[1].value + " " + this.selectors[selectorNb].children[1].name;
    };
    /**
     * @internal
     */
    SliderGroup.prototype._setSelectorLabelColor = function (selectorNb, color) {
        this.selectors[selectorNb].children[0].color = color;
    };
    /**
     * @internal
     */
    SliderGroup.prototype._setSelectorButtonColor = function (selectorNb, color) {
        this.selectors[selectorNb].children[1].color = color;
    };
    /**
     * @internal
     */
    SliderGroup.prototype._setSelectorButtonBackground = function (selectorNb, color) {
        this.selectors[selectorNb].children[1].background = color;
    };
    return SliderGroup;
}(SelectorGroup));

/** Class used to hold the controls for the checkboxes, radio buttons and sliders
 * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/selector
 */
var SelectionPanel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__extends)(SelectionPanel, _super);
    /**
     * Creates a new SelectionPanel
     * @param name of SelectionPanel
     * @param groups is an array of SelectionGroups
     */
    function SelectionPanel(
    /** name of SelectionPanel */
    name, 
    /** an array of SelectionGroups */
    groups) {
        if (groups === void 0) { groups = []; }
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this.groups = groups;
        _this._buttonColor = "#364249";
        _this._buttonBackground = "#CCCCCC";
        _this._headerColor = "black";
        _this._barColor = "white";
        _this._barHeight = "2px";
        _this._spacerHeight = "20px";
        _this._bars = new Array();
        _this._groups = groups;
        _this.thickness = 2;
        _this._panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_1__.StackPanel();
        _this._panel.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP;
        _this._panel.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        _this._panel.top = 5;
        _this._panel.left = 5;
        _this._panel.width = 0.95;
        if (groups.length > 0) {
            for (var i = 0; i < groups.length - 1; i++) {
                _this._panel.addControl(groups[i].groupPanel);
                _this._addSpacer();
            }
            _this._panel.addControl(groups[groups.length - 1].groupPanel);
        }
        _this.addControl(_this._panel);
        return _this;
    }
    SelectionPanel.prototype._getTypeName = function () {
        return "SelectionPanel";
    };
    Object.defineProperty(SelectionPanel.prototype, "panel", {
        /** Gets the (stack) panel of the SelectionPanel  */
        get: function () {
            return this._panel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectionPanel.prototype, "headerColor", {
        /** Gets or sets the headerColor */
        get: function () {
            return this._headerColor;
        },
        set: function (color) {
            if (this._headerColor === color) {
                return;
            }
            this._headerColor = color;
            this._setHeaderColor();
        },
        enumerable: false,
        configurable: true
    });
    SelectionPanel.prototype._setHeaderColor = function () {
        for (var i = 0; i < this._groups.length; i++) {
            this._groups[i].groupPanel.children[0].color = this._headerColor;
        }
    };
    Object.defineProperty(SelectionPanel.prototype, "buttonColor", {
        /** Gets or sets the button color */
        get: function () {
            return this._buttonColor;
        },
        set: function (color) {
            if (this._buttonColor === color) {
                return;
            }
            this._buttonColor = color;
            this._setbuttonColor();
        },
        enumerable: false,
        configurable: true
    });
    SelectionPanel.prototype._setbuttonColor = function () {
        for (var i = 0; i < this._groups.length; i++) {
            for (var j = 0; j < this._groups[i].selectors.length; j++) {
                this._groups[i]._setSelectorButtonColor(j, this._buttonColor);
            }
        }
    };
    Object.defineProperty(SelectionPanel.prototype, "labelColor", {
        /** Gets or sets the label color */
        get: function () {
            return this._labelColor;
        },
        set: function (color) {
            if (this._labelColor === color) {
                return;
            }
            this._labelColor = color;
            this._setLabelColor();
        },
        enumerable: false,
        configurable: true
    });
    SelectionPanel.prototype._setLabelColor = function () {
        for (var i = 0; i < this._groups.length; i++) {
            for (var j = 0; j < this._groups[i].selectors.length; j++) {
                this._groups[i]._setSelectorLabelColor(j, this._labelColor);
            }
        }
    };
    Object.defineProperty(SelectionPanel.prototype, "buttonBackground", {
        /** Gets or sets the button background */
        get: function () {
            return this._buttonBackground;
        },
        set: function (color) {
            if (this._buttonBackground === color) {
                return;
            }
            this._buttonBackground = color;
            this._setButtonBackground();
        },
        enumerable: false,
        configurable: true
    });
    SelectionPanel.prototype._setButtonBackground = function () {
        for (var i = 0; i < this._groups.length; i++) {
            for (var j = 0; j < this._groups[i].selectors.length; j++) {
                this._groups[i]._setSelectorButtonBackground(j, this._buttonBackground);
            }
        }
    };
    Object.defineProperty(SelectionPanel.prototype, "barColor", {
        /** Gets or sets the color of separator bar */
        get: function () {
            return this._barColor;
        },
        set: function (color) {
            if (this._barColor === color) {
                return;
            }
            this._barColor = color;
            this._setBarColor();
        },
        enumerable: false,
        configurable: true
    });
    SelectionPanel.prototype._setBarColor = function () {
        for (var i = 0; i < this._bars.length; i++) {
            this._bars[i].children[0].background = this._barColor;
        }
    };
    Object.defineProperty(SelectionPanel.prototype, "barHeight", {
        /** Gets or sets the height of separator bar */
        get: function () {
            return this._barHeight;
        },
        set: function (value) {
            if (this._barHeight === value) {
                return;
            }
            this._barHeight = value;
            this._setBarHeight();
        },
        enumerable: false,
        configurable: true
    });
    SelectionPanel.prototype._setBarHeight = function () {
        for (var i = 0; i < this._bars.length; i++) {
            this._bars[i].children[0].height = this._barHeight;
        }
    };
    Object.defineProperty(SelectionPanel.prototype, "spacerHeight", {
        /** Gets or sets the height of spacers*/
        get: function () {
            return this._spacerHeight;
        },
        set: function (value) {
            if (this._spacerHeight === value) {
                return;
            }
            this._spacerHeight = value;
            this._setSpacerHeight();
        },
        enumerable: false,
        configurable: true
    });
    SelectionPanel.prototype._setSpacerHeight = function () {
        for (var i = 0; i < this._bars.length; i++) {
            this._bars[i].height = this._spacerHeight;
        }
    };
    /** Adds a bar between groups */
    SelectionPanel.prototype._addSpacer = function () {
        var separator = new _container__WEBPACK_IMPORTED_MODULE_7__.Container();
        separator.width = 1;
        separator.height = this._spacerHeight;
        separator.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        var bar = new _rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle();
        bar.width = 1;
        bar.height = this._barHeight;
        bar.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        bar.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
        bar.background = this._barColor;
        bar.color = "transparent";
        separator.addControl(bar);
        this._panel.addControl(separator);
        this._bars.push(separator);
    };
    /** Add a group to the selection panel
     * @param group is the selector group to add
     */
    SelectionPanel.prototype.addGroup = function (group) {
        if (this._groups.length > 0) {
            this._addSpacer();
        }
        this._panel.addControl(group.groupPanel);
        this._groups.push(group);
        group.groupPanel.children[0].color = this._headerColor;
        for (var j = 0; j < group.selectors.length; j++) {
            group._setSelectorButtonColor(j, this._buttonColor);
            group._setSelectorButtonBackground(j, this._buttonBackground);
        }
    };
    /** Remove the group from the given position
     * @param groupNb is the position of the group in the list
     */
    SelectionPanel.prototype.removeGroup = function (groupNb) {
        if (groupNb < 0 || groupNb >= this._groups.length) {
            return;
        }
        var group = this._groups[groupNb];
        this._panel.removeControl(group.groupPanel);
        this._groups.splice(groupNb, 1);
        if (groupNb < this._bars.length) {
            this._panel.removeControl(this._bars[groupNb]);
            this._bars.splice(groupNb, 1);
        }
    };
    /** Change a group header label
     * @param label is the new group header label
     * @param groupNb is the number of the group to relabel
     * */
    SelectionPanel.prototype.setHeaderName = function (label, groupNb) {
        if (groupNb < 0 || groupNb >= this._groups.length) {
            return;
        }
        var group = this._groups[groupNb];
        group.groupPanel.children[0].text = label;
    };
    /** Change selector label to the one given
     * @param label is the new selector label
     * @param groupNb is the number of the groupcontaining the selector
     * @param selectorNb is the number of the selector within a group to relabel
     * */
    SelectionPanel.prototype.relabel = function (label, groupNb, selectorNb) {
        if (groupNb < 0 || groupNb >= this._groups.length) {
            return;
        }
        var group = this._groups[groupNb];
        if (selectorNb < 0 || selectorNb >= group.selectors.length) {
            return;
        }
        group._setSelectorLabel(selectorNb, label);
    };
    /** For a given group position remove the selector at the given position
     * @param groupNb is the number of the group to remove the selector from
     * @param selectorNb is the number of the selector within the group
     */
    SelectionPanel.prototype.removeFromGroupSelector = function (groupNb, selectorNb) {
        if (groupNb < 0 || groupNb >= this._groups.length) {
            return;
        }
        var group = this._groups[groupNb];
        if (selectorNb < 0 || selectorNb >= group.selectors.length) {
            return;
        }
        group.removeSelector(selectorNb);
    };
    /** For a given group position of correct type add a checkbox button
     * @param groupNb is the number of the group to remove the selector from
     * @param label is the label for the selector
     * @param func is the function called when the Selector is checked
     * @param checked is true when Selector is checked
     */
    SelectionPanel.prototype.addToGroupCheckbox = function (groupNb, label, func, checked) {
        if (func === void 0) { func = function () { }; }
        if (checked === void 0) { checked = false; }
        if (groupNb < 0 || groupNb >= this._groups.length) {
            return;
        }
        var group = this._groups[groupNb];
        group.addCheckbox(label, func, checked);
    };
    /** For a given group position of correct type add a radio button
     * @param groupNb is the number of the group to remove the selector from
     * @param label is the label for the selector
     * @param func is the function called when the Selector is checked
     * @param checked is true when Selector is checked
     */
    SelectionPanel.prototype.addToGroupRadio = function (groupNb, label, func, checked) {
        if (func === void 0) { func = function () { }; }
        if (checked === void 0) { checked = false; }
        if (groupNb < 0 || groupNb >= this._groups.length) {
            return;
        }
        var group = this._groups[groupNb];
        group.addRadio(label, func, checked);
    };
    /**
     * For a given slider group add a slider
     * @param groupNb is the number of the group to add the slider to
     * @param label is the label for the Slider
     * @param func is the function called when the Slider moves
     * @param unit is a string describing the units used, eg degrees or metres
     * @param min is the minimum value for the Slider
     * @param max is the maximum value for the Slider
     * @param value is the start value for the Slider between min and max
     * @param onVal is the function used to format the value displayed, eg radians to degrees
     */
    SelectionPanel.prototype.addToGroupSlider = function (groupNb, label, func, unit, min, max, value, onVal) {
        if (func === void 0) { func = function () { }; }
        if (unit === void 0) { unit = "Units"; }
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 0; }
        if (value === void 0) { value = 0; }
        if (onVal === void 0) { onVal = function (v) {
            return v | 0;
        }; }
        if (groupNb < 0 || groupNb >= this._groups.length) {
            return;
        }
        var group = this._groups[groupNb];
        group.addSlider(label, func, unit, min, max, value, onVal);
    };
    return SelectionPanel;
}(_rectangle__WEBPACK_IMPORTED_MODULE_0__.Rectangle));



/***/ }),

/***/ "../../../dev/gui/src/2D/controls/sliders/baseSlider.ts":
/*!**************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/sliders/baseSlider.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseSlider: () => (/* binding */ BaseSlider)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/logger */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");






/**
 * Class used to create slider controls
 */
var BaseSlider = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(BaseSlider, _super);
    /**
     * Creates a new BaseSlider
     * @param name defines the control name
     */
    function BaseSlider(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._thumbWidth = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(20, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL, false);
        _this._minimum = 0;
        _this._maximum = 100;
        _this._value = 50;
        _this._isVertical = false;
        _this._barOffset = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit(5, _valueAndUnit__WEBPACK_IMPORTED_MODULE_2__.ValueAndUnit.UNITMODE_PIXEL, false);
        _this._isThumbClamped = false;
        _this._displayThumb = true;
        _this._step = 0;
        _this._lastPointerDownId = -1;
        // Shared rendering info
        _this._effectiveBarOffset = 0;
        /** Observable raised when the slider value changes */
        _this.onValueChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        // Events
        _this._pointerIsDown = false;
        _this.isPointerBlocker = true;
        return _this;
    }
    Object.defineProperty(BaseSlider.prototype, "displayThumb", {
        /** Gets or sets a boolean indicating if the thumb must be rendered */
        get: function () {
            return this._displayThumb;
        },
        set: function (value) {
            if (this._displayThumb === value) {
                return;
            }
            this._displayThumb = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "step", {
        /** Gets or sets a step to apply to values (0 by default) */
        get: function () {
            return this._step;
        },
        set: function (value) {
            if (this._step === value) {
                return;
            }
            this._step = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "barOffset", {
        /** Gets or sets main bar offset (ie. the margin applied to the value bar) */
        get: function () {
            return this._barOffset.toString(this._host);
        },
        set: function (value) {
            if (this._barOffset.toString(this._host) === value) {
                return;
            }
            if (this._barOffset.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "barOffsetInPixels", {
        /** Gets main bar offset in pixels*/
        get: function () {
            return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "thumbWidth", {
        /** Gets or sets thumb width */
        get: function () {
            return this._thumbWidth.toString(this._host);
        },
        set: function (value) {
            if (this._thumbWidth.toString(this._host) === value) {
                return;
            }
            if (this._thumbWidth.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "thumbWidthInPixels", {
        /** Gets thumb width in pixels */
        get: function () {
            return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "minimum", {
        /** Gets or sets minimum value */
        get: function () {
            return this._minimum;
        },
        set: function (value) {
            if (this._minimum === value) {
                return;
            }
            this._minimum = value;
            this._markAsDirty();
            this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "maximum", {
        /** Gets or sets maximum value */
        get: function () {
            return this._maximum;
        },
        set: function (value) {
            if (this._maximum === value) {
                return;
            }
            this._maximum = value;
            this._markAsDirty();
            this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "value", {
        /** Gets or sets current value */
        get: function () {
            return this._value;
        },
        set: function (value) {
            value = Math.max(Math.min(value, this._maximum), this._minimum);
            if (this._value === value) {
                return;
            }
            this._value = value;
            this._markAsDirty();
            this.onValueChangedObservable.notifyObservers(this._value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "isVertical", {
        /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */
        get: function () {
            return this._isVertical;
        },
        set: function (value) {
            if (this._isVertical === value) {
                return;
            }
            this._isVertical = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseSlider.prototype, "isThumbClamped", {
        /** Gets or sets a value indicating if the thumb can go over main bar extends */
        get: function () {
            return this._isThumbClamped;
        },
        set: function (value) {
            if (this._isThumbClamped === value) {
                return;
            }
            this._isThumbClamped = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    BaseSlider.prototype._getTypeName = function () {
        return "BaseSlider";
    };
    BaseSlider.prototype._getThumbPosition = function () {
        if (this.isVertical) {
            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;
        }
        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;
    };
    BaseSlider.prototype._getThumbThickness = function (type) {
        var thumbThickness = 0;
        switch (type) {
            case "circle":
                if (this._thumbWidth.isPixel) {
                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);
                }
                else {
                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);
                }
                break;
            case "rectangle":
                if (this._thumbWidth.isPixel) {
                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);
                }
                else {
                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);
                }
        }
        return thumbThickness;
    };
    BaseSlider.prototype._prepareRenderingData = function (type) {
        // Main bar
        this._effectiveBarOffset = 0;
        this._renderLeft = this._currentMeasure.left;
        this._renderTop = this._currentMeasure.top;
        this._renderWidth = this._currentMeasure.width;
        this._renderHeight = this._currentMeasure.height;
        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);
        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);
        this._effectiveThumbThickness = this._getThumbThickness(type);
        if (this.displayThumb) {
            this._backgroundBoxLength -= this._effectiveThumbThickness;
        }
        //throw error when height is less than width for vertical slider
        if (this.isVertical && this._currentMeasure.height < this._currentMeasure.width) {
            babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Logger.Error("Height should be greater than width");
            return;
        }
        if (this._barOffset.isPixel) {
            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);
        }
        else {
            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);
        }
        this._backgroundBoxThickness -= this._effectiveBarOffset * 2;
        if (this.isVertical) {
            this._renderLeft += this._effectiveBarOffset;
            if (!this.isThumbClamped && this.displayThumb) {
                this._renderTop += this._effectiveThumbThickness / 2;
            }
            this._renderHeight = this._backgroundBoxLength;
            this._renderWidth = this._backgroundBoxThickness;
        }
        else {
            this._renderTop += this._effectiveBarOffset;
            if (!this.isThumbClamped && this.displayThumb) {
                this._renderLeft += this._effectiveThumbThickness / 2;
            }
            this._renderHeight = this._backgroundBoxThickness;
            this._renderWidth = this._backgroundBoxLength;
        }
    };
    /**
     * @internal
     */
    BaseSlider.prototype._updateValueFromPointer = function (x, y) {
        if (this.rotation != 0) {
            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);
            x = this._transformedPosition.x;
            y = this._transformedPosition.y;
        }
        var value;
        if (this._isVertical) {
            value = this._minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this._maximum - this._minimum);
        }
        else {
            value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);
        }
        this.value = this._step ? Math.round(value / this._step) * this._step : value;
    };
    BaseSlider.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
            return false;
        }
        if (this.isReadOnly) {
            return true;
        }
        this._pointerIsDown = true;
        this._updateValueFromPointer(coordinates.x, coordinates.y);
        this._host._capturingControl[pointerId] = this;
        this._lastPointerDownId = pointerId;
        return true;
    };
    BaseSlider.prototype._onPointerMove = function (target, coordinates, pointerId, pi) {
        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)
        if (pointerId != this._lastPointerDownId) {
            return;
        }
        if (this._pointerIsDown && !this.isReadOnly) {
            this._updateValueFromPointer(coordinates.x, coordinates.y);
        }
        _super.prototype._onPointerMove.call(this, target, coordinates, pointerId, pi);
    };
    BaseSlider.prototype._onPointerUp = function (target, coordinates, pointerId, buttonIndex, notifyClick) {
        this._pointerIsDown = false;
        delete this._host._capturingControl[pointerId];
        _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick);
    };
    BaseSlider.prototype._onCanvasBlur = function () {
        this._forcePointerUp();
        _super.prototype._onCanvasBlur.call(this);
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], BaseSlider.prototype, "displayThumb", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], BaseSlider.prototype, "step", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], BaseSlider.prototype, "barOffset", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], BaseSlider.prototype, "thumbWidth", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], BaseSlider.prototype, "minimum", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], BaseSlider.prototype, "maximum", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], BaseSlider.prototype, "value", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], BaseSlider.prototype, "isVertical", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], BaseSlider.prototype, "isThumbClamped", null);
    return BaseSlider;
}(_control__WEBPACK_IMPORTED_MODULE_1__.Control));


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/sliders/imageBasedSlider.ts":
/*!********************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/sliders/imageBasedSlider.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageBasedSlider: () => (/* binding */ ImageBasedSlider)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _baseSlider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseSlider */ "../../../dev/gui/src/2D/controls/sliders/baseSlider.ts");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../measure */ "../../../dev/gui/src/2D/measure.ts");
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../image */ "../../../dev/gui/src/2D/controls/image.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3__);






/**
 * Class used to create slider controls based on images
 */
var ImageBasedSlider = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(ImageBasedSlider, _super);
    /**
     * Creates a new ImageBasedSlider
     * @param name defines the control name
     */
    function ImageBasedSlider(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._tempMeasure = new _measure__WEBPACK_IMPORTED_MODULE_1__.Measure(0, 0, 0, 0);
        return _this;
    }
    Object.defineProperty(ImageBasedSlider.prototype, "displayThumb", {
        get: function () {
            return this._displayThumb && this.thumbImage != null;
        },
        set: function (value) {
            if (this._displayThumb === value) {
                return;
            }
            this._displayThumb = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageBasedSlider.prototype, "backgroundImage", {
        /**
         * Gets or sets the image used to render the background
         */
        get: function () {
            return this._backgroundImage;
        },
        set: function (value) {
            var _this = this;
            if (this._backgroundImage === value) {
                return;
            }
            this._backgroundImage = value;
            if (value && !value.isLoaded) {
                value.onImageLoadedObservable.addOnce(function () { return _this._markAsDirty(); });
            }
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageBasedSlider.prototype, "valueBarImage", {
        /**
         * Gets or sets the image used to render the value bar
         */
        get: function () {
            return this._valueBarImage;
        },
        set: function (value) {
            var _this = this;
            if (this._valueBarImage === value) {
                return;
            }
            this._valueBarImage = value;
            if (value && !value.isLoaded) {
                value.onImageLoadedObservable.addOnce(function () { return _this._markAsDirty(); });
            }
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageBasedSlider.prototype, "thumbImage", {
        /**
         * Gets or sets the image used to render the thumb
         */
        get: function () {
            return this._thumbImage;
        },
        set: function (value) {
            var _this = this;
            if (this._thumbImage === value) {
                return;
            }
            this._thumbImage = value;
            if (value && !value.isLoaded) {
                value.onImageLoadedObservable.addOnce(function () { return _this._markAsDirty(); });
            }
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    ImageBasedSlider.prototype._getTypeName = function () {
        return "ImageBasedSlider";
    };
    ImageBasedSlider.prototype._draw = function (context) {
        context.save();
        this._applyStates(context);
        this._prepareRenderingData("rectangle");
        var thumbPosition = this._getThumbPosition();
        var left = this._renderLeft;
        var top = this._renderTop;
        var width = this._renderWidth;
        var height = this._renderHeight;
        // Background
        if (this._backgroundImage) {
            this._tempMeasure.copyFromFloats(left, top, width, height);
            if (this.isThumbClamped && this.displayThumb) {
                if (this.isVertical) {
                    this._tempMeasure.height += this._effectiveThumbThickness;
                }
                else {
                    this._tempMeasure.width += this._effectiveThumbThickness;
                }
            }
            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);
            this._backgroundImage._draw(context);
        }
        // Bar
        if (this._valueBarImage) {
            if (this.isVertical) {
                if (this.isThumbClamped && this.displayThumb) {
                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);
                }
                else {
                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);
                }
            }
            else {
                if (this.isThumbClamped && this.displayThumb) {
                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);
                }
                else {
                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);
                }
            }
            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);
            this._valueBarImage._draw(context);
        }
        // Thumb
        if (this.displayThumb) {
            if (this.isVertical) {
                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);
            }
            else {
                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);
            }
            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);
            this._thumbImage._draw(context);
        }
        context.restore();
    };
    /**
     * Serializes the current control
     * @param serializationObject defined the JSON serialized object
     */
    ImageBasedSlider.prototype.serialize = function (serializationObject) {
        _super.prototype.serialize.call(this, serializationObject);
        var backgroundImage = {};
        var thumbImage = {};
        var valueBarImage = {};
        this.backgroundImage.serialize(backgroundImage);
        this.thumbImage.serialize(thumbImage);
        this.valueBarImage.serialize(valueBarImage);
        serializationObject.backgroundImage = backgroundImage;
        serializationObject.thumbImage = thumbImage;
        serializationObject.valueBarImage = valueBarImage;
    };
    /**
     * @internal
     */
    ImageBasedSlider.prototype._parseFromContent = function (serializedObject, host) {
        _super.prototype._parseFromContent.call(this, serializedObject, host);
        this.backgroundImage = _image__WEBPACK_IMPORTED_MODULE_2__.Image.Parse(serializedObject.backgroundImage, host);
        this.thumbImage = _image__WEBPACK_IMPORTED_MODULE_2__.Image.Parse(serializedObject.thumbImage, host);
        this.valueBarImage = _image__WEBPACK_IMPORTED_MODULE_2__.Image.Parse(serializedObject.valueBarImage, host);
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3__.serialize)()
    ], ImageBasedSlider.prototype, "displayThumb", null);
    return ImageBasedSlider;
}(_baseSlider__WEBPACK_IMPORTED_MODULE_0__.BaseSlider));
(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_3__.RegisterClass)("BABYLON.GUI.ImageBasedSlider", ImageBasedSlider);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/sliders/imageScrollBar.ts":
/*!******************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/sliders/imageScrollBar.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageScrollBar: () => (/* binding */ ImageScrollBar)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _baseSlider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseSlider */ "../../../dev/gui/src/2D/controls/sliders/baseSlider.ts");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../measure */ "../../../dev/gui/src/2D/measure.ts");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! babylonjs/Misc/decorators */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__);




/**
 * Class used to create slider controls
 */
var ImageScrollBar = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ImageScrollBar, _super);
    /**
     * Creates a new ImageScrollBar
     * @param name defines the control name
     */
    function ImageScrollBar(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._thumbLength = 0.5;
        _this._thumbHeight = 1;
        _this._barImageHeight = 1;
        _this._tempMeasure = new _measure__WEBPACK_IMPORTED_MODULE_1__.Measure(0, 0, 0, 0);
        _this._invertScrollDirection = false;
        /** Number of 90° rotation to apply on the images when in vertical mode */
        _this.num90RotationInVerticalMode = 1;
        return _this;
    }
    Object.defineProperty(ImageScrollBar.prototype, "invertScrollDirection", {
        /** Inverts the scrolling direction (default: false) */
        get: function () {
            return this._invertScrollDirection;
        },
        set: function (invert) {
            this._invertScrollDirection = invert;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageScrollBar.prototype, "backgroundImage", {
        /**
         * Gets or sets the image used to render the background for horizontal bar
         */
        get: function () {
            return this._backgroundBaseImage;
        },
        set: function (value) {
            var _this = this;
            if (this._backgroundBaseImage === value) {
                return;
            }
            this._backgroundBaseImage = value;
            if (this.isVertical && this.num90RotationInVerticalMode !== 0) {
                if (!value.isLoaded) {
                    value.onImageLoadedObservable.addOnce(function () {
                        var rotatedValue = value._rotate90(_this.num90RotationInVerticalMode, true);
                        _this._backgroundImage = rotatedValue;
                        if (!rotatedValue.isLoaded) {
                            rotatedValue.onImageLoadedObservable.addOnce(function () {
                                _this._markAsDirty();
                            });
                        }
                        _this._markAsDirty();
                    });
                }
                else {
                    this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);
                    this._markAsDirty();
                }
            }
            else {
                this._backgroundImage = value;
                if (value && !value.isLoaded) {
                    value.onImageLoadedObservable.addOnce(function () {
                        _this._markAsDirty();
                    });
                }
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageScrollBar.prototype, "thumbImage", {
        /**
         * Gets or sets the image used to render the thumb
         */
        get: function () {
            return this._thumbBaseImage;
        },
        set: function (value) {
            var _this = this;
            if (this._thumbBaseImage === value) {
                return;
            }
            this._thumbBaseImage = value;
            if (this.isVertical && this.num90RotationInVerticalMode !== 0) {
                if (!value.isLoaded) {
                    value.onImageLoadedObservable.addOnce(function () {
                        var rotatedValue = value._rotate90(-_this.num90RotationInVerticalMode, true);
                        _this._thumbImage = rotatedValue;
                        if (!rotatedValue.isLoaded) {
                            rotatedValue.onImageLoadedObservable.addOnce(function () {
                                _this._markAsDirty();
                            });
                        }
                        _this._markAsDirty();
                    });
                }
                else {
                    this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);
                    this._markAsDirty();
                }
            }
            else {
                this._thumbImage = value;
                if (value && !value.isLoaded) {
                    value.onImageLoadedObservable.addOnce(function () {
                        _this._markAsDirty();
                    });
                }
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageScrollBar.prototype, "thumbLength", {
        /**
         * Gets or sets the length of the thumb
         */
        get: function () {
            return this._thumbLength;
        },
        set: function (value) {
            if (this._thumbLength === value) {
                return;
            }
            this._thumbLength = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageScrollBar.prototype, "thumbHeight", {
        /**
         * Gets or sets the height of the thumb
         */
        get: function () {
            return this._thumbHeight;
        },
        set: function (value) {
            if (this._thumbLength === value) {
                return;
            }
            this._thumbHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageScrollBar.prototype, "barImageHeight", {
        /**
         * Gets or sets the height of the bar image
         */
        get: function () {
            return this._barImageHeight;
        },
        set: function (value) {
            if (this._barImageHeight === value) {
                return;
            }
            this._barImageHeight = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    ImageScrollBar.prototype._getTypeName = function () {
        return "ImageScrollBar";
    };
    ImageScrollBar.prototype._getThumbThickness = function () {
        var thumbThickness = 0;
        if (this._thumbWidth.isPixel) {
            thumbThickness = this._thumbWidth.getValue(this._host);
        }
        else {
            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);
        }
        return thumbThickness;
    };
    ImageScrollBar.prototype._draw = function (context) {
        context.save();
        this._applyStates(context);
        this._prepareRenderingData("rectangle");
        var thumbPosition = this._getThumbPosition();
        var left = this._renderLeft;
        var top = this._renderTop;
        var width = this._renderWidth;
        var height = this._renderHeight;
        // Background
        if (this._backgroundImage) {
            this._tempMeasure.copyFromFloats(left, top, width, height);
            if (this.isVertical) {
                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);
                this._tempMeasure.height += this._effectiveThumbThickness;
                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);
            }
            else {
                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);
                this._tempMeasure.width += this._effectiveThumbThickness;
                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);
            }
            this._backgroundImage._draw(context);
        }
        // Thumb
        if (this.isVertical) {
            this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5, this._currentMeasure.top + thumbPosition, this._currentMeasure.width * this._thumbHeight, this._effectiveThumbThickness);
        }
        else {
            this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5, this._effectiveThumbThickness, this._currentMeasure.height * this._thumbHeight);
        }
        if (this._thumbImage) {
            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);
            this._thumbImage._draw(context);
        }
        context.restore();
    };
    /**
     * @internal
     */
    ImageScrollBar.prototype._updateValueFromPointer = function (x, y) {
        if (this.rotation != 0) {
            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);
            x = this._transformedPosition.x;
            y = this._transformedPosition.y;
        }
        var sign = this._invertScrollDirection ? -1 : 1;
        if (this._first) {
            this._first = false;
            this._originX = x;
            this._originY = y;
            // Check if move is required
            if (x < this._tempMeasure.left ||
                x > this._tempMeasure.left + this._tempMeasure.width ||
                y < this._tempMeasure.top ||
                y > this._tempMeasure.top + this._tempMeasure.height) {
                if (this.isVertical) {
                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);
                }
                else {
                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);
                }
            }
        }
        // Delta mode
        var delta = 0;
        if (this.isVertical) {
            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));
        }
        else {
            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);
        }
        this.value += sign * delta * (this.maximum - this.minimum);
        this._originX = x;
        this._originY = y;
    };
    ImageScrollBar.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        this._first = true;
        return _super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi);
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], ImageScrollBar.prototype, "num90RotationInVerticalMode", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], ImageScrollBar.prototype, "invertScrollDirection", null);
    return ImageScrollBar;
}(_baseSlider__WEBPACK_IMPORTED_MODULE_0__.BaseSlider));


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/sliders/scrollBar.ts":
/*!*************************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/sliders/scrollBar.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScrollBar: () => (/* binding */ ScrollBar)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _baseSlider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseSlider */ "../../../dev/gui/src/2D/controls/sliders/baseSlider.ts");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../measure */ "../../../dev/gui/src/2D/measure.ts");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! babylonjs/Misc/typeStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__);






/**
 * Class used to create slider controls
 */
var ScrollBar = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ScrollBar, _super);
    /**
     * Creates a new Slider
     * @param name defines the control name
     */
    function ScrollBar(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._background = "black";
        _this._borderColor = "white";
        _this._tempMeasure = new _measure__WEBPACK_IMPORTED_MODULE_1__.Measure(0, 0, 0, 0);
        _this._invertScrollDirection = false;
        _this._backgroundGradient = null;
        return _this;
    }
    Object.defineProperty(ScrollBar.prototype, "borderColor", {
        /** Gets or sets border color */
        get: function () {
            return this._borderColor;
        },
        set: function (value) {
            if (this._borderColor === value) {
                return;
            }
            this._borderColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollBar.prototype, "background", {
        /** Gets or sets background color */
        get: function () {
            return this._background;
        },
        set: function (value) {
            if (this._background === value) {
                return;
            }
            this._background = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollBar.prototype, "backgroundGradient", {
        /** Gets or sets background gradient. Takes precedence over gradient. */
        get: function () {
            return this._backgroundGradient;
        },
        set: function (value) {
            if (this._backgroundGradient === value) {
                return;
            }
            this._backgroundGradient = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScrollBar.prototype, "invertScrollDirection", {
        /** Inverts the scrolling direction (default: false) */
        get: function () {
            return this._invertScrollDirection;
        },
        set: function (invert) {
            this._invertScrollDirection = invert;
        },
        enumerable: false,
        configurable: true
    });
    ScrollBar.prototype._getTypeName = function () {
        return "Scrollbar";
    };
    ScrollBar.prototype._getThumbThickness = function () {
        var thumbThickness = 0;
        if (this._thumbWidth.isPixel) {
            thumbThickness = this._thumbWidth.getValue(this._host);
        }
        else {
            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);
        }
        return thumbThickness;
    };
    ScrollBar.prototype._getBackgroundColor = function (context) {
        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;
    };
    ScrollBar.prototype._draw = function (context) {
        context.save();
        this._applyStates(context);
        this._prepareRenderingData("rectangle");
        var left = this._renderLeft;
        var thumbPosition = this._getThumbPosition();
        context.fillStyle = this._getBackgroundColor(context);
        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);
        // Value bar
        context.fillStyle = this._getColor(context);
        // Thumb
        if (this.isVertical) {
            this._tempMeasure.left = left - this._effectiveBarOffset;
            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;
            this._tempMeasure.width = this._currentMeasure.width;
            this._tempMeasure.height = this._effectiveThumbThickness;
        }
        else {
            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;
            this._tempMeasure.top = this._currentMeasure.top;
            this._tempMeasure.width = this._effectiveThumbThickness;
            this._tempMeasure.height = this._currentMeasure.height;
        }
        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);
        context.restore();
    };
    /**
     * @internal
     */
    ScrollBar.prototype._updateValueFromPointer = function (x, y) {
        if (this.rotation != 0) {
            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);
            x = this._transformedPosition.x;
            y = this._transformedPosition.y;
        }
        var sign = this._invertScrollDirection ? -1 : 1;
        if (this._first) {
            this._first = false;
            this._originX = x;
            this._originY = y;
            // Check if move is required
            if (x < this._tempMeasure.left ||
                x > this._tempMeasure.left + this._tempMeasure.width ||
                y < this._tempMeasure.top ||
                y > this._tempMeasure.top + this._tempMeasure.height) {
                if (this.isVertical) {
                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);
                }
                else {
                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);
                }
            }
        }
        // Delta mode
        var delta = 0;
        if (this.isVertical) {
            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));
        }
        else {
            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);
        }
        this.value += sign * delta * (this.maximum - this.minimum);
        this._originX = x;
        this._originY = y;
    };
    ScrollBar.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        this._first = true;
        return _super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi);
    };
    ScrollBar.prototype.serialize = function (serializationObject) {
        _super.prototype.serialize.call(this, serializationObject);
        if (this.backgroundGradient) {
            serializationObject.backgroundGradient = {};
            this.backgroundGradient.serialize(serializationObject.backgroundGradient);
        }
    };
    ScrollBar.prototype._parseFromContent = function (serializationObject, host) {
        _super.prototype._parseFromContent.call(this, serializationObject, host);
        if (serializationObject.backgroundGradient) {
            var className = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__.Tools.Instantiate("BABYLON.GUI." + serializationObject.backgroundGradient.className);
            this.backgroundGradient = new className();
            this.backgroundGradient.parse(serializationObject.backgroundGradient);
        }
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], ScrollBar.prototype, "borderColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], ScrollBar.prototype, "background", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], ScrollBar.prototype, "invertScrollDirection", null);
    return ScrollBar;
}(_baseSlider__WEBPACK_IMPORTED_MODULE_0__.BaseSlider));
(0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.Scrollbar", ScrollBar);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/sliders/slider.ts":
/*!**********************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/sliders/slider.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Slider: () => (/* binding */ Slider)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _baseSlider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseSlider */ "../../../dev/gui/src/2D/controls/sliders/baseSlider.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Misc/tools */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__);





/**
 * Class used to create slider controls
 */
var Slider = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Slider, _super);
    /**
     * Creates a new Slider
     * @param name defines the control name
     */
    function Slider(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._background = "black";
        _this._borderColor = "white";
        _this._thumbColor = "";
        _this._isThumbCircle = false;
        _this._displayValueBar = true;
        _this._backgroundGradient = null;
        return _this;
    }
    Object.defineProperty(Slider.prototype, "displayValueBar", {
        /** Gets or sets a boolean indicating if the value bar must be rendered */
        get: function () {
            return this._displayValueBar;
        },
        set: function (value) {
            if (this._displayValueBar === value) {
                return;
            }
            this._displayValueBar = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "borderColor", {
        /** Gets or sets border color */
        get: function () {
            return this._borderColor;
        },
        set: function (value) {
            if (this._borderColor === value) {
                return;
            }
            this._borderColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "background", {
        /** Gets or sets background color */
        get: function () {
            return this._background;
        },
        set: function (value) {
            if (this._background === value) {
                return;
            }
            this._background = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "backgroundGradient", {
        /** Gets or sets background gradient */
        get: function () {
            return this._backgroundGradient;
        },
        set: function (value) {
            if (this._backgroundGradient === value) {
                return;
            }
            this._backgroundGradient = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "thumbColor", {
        /** Gets or sets thumb's color */
        get: function () {
            return this._thumbColor;
        },
        set: function (value) {
            if (this._thumbColor === value) {
                return;
            }
            this._thumbColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "isThumbCircle", {
        /** Gets or sets a boolean indicating if the thumb should be round or square */
        get: function () {
            return this._isThumbCircle;
        },
        set: function (value) {
            if (this._isThumbCircle === value) {
                return;
            }
            this._isThumbCircle = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Slider.prototype._getTypeName = function () {
        return "Slider";
    };
    Slider.prototype._getBackgroundColor = function (context) {
        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;
    };
    Slider.prototype._draw = function (context) {
        context.save();
        this._applyStates(context);
        this._prepareRenderingData(this.isThumbCircle ? "circle" : "rectangle");
        var left = this._renderLeft;
        var top = this._renderTop;
        var width = this._renderWidth;
        var height = this._renderHeight;
        var radius = 0;
        if (this.isThumbClamped && this.isThumbCircle) {
            if (this.isVertical) {
                top += this._effectiveThumbThickness / 2;
            }
            else {
                left += this._effectiveThumbThickness / 2;
            }
            radius = this._backgroundBoxThickness / 2;
        }
        else {
            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;
        }
        radius = Math.max(0, radius);
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        var thumbPosition = this._getThumbPosition();
        context.fillStyle = this._getBackgroundColor(context);
        if (this.isVertical) {
            if (this.isThumbClamped) {
                if (this.isThumbCircle) {
                    context.beginPath();
                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);
                    context.fill();
                    context.fillRect(left, top, width, height);
                }
                else {
                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);
                }
            }
            else {
                context.fillRect(left, top, width, height);
            }
        }
        else {
            if (this.isThumbClamped) {
                if (this.isThumbCircle) {
                    context.beginPath();
                    context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);
                    context.fill();
                    context.fillRect(left, top, width, height);
                }
                else {
                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);
                }
            }
            else {
                context.fillRect(left, top, width, height);
            }
        }
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowBlur = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
        }
        // Value bar
        context.fillStyle = this._getColor(context);
        if (this._displayValueBar) {
            if (this.isVertical) {
                if (this.isThumbClamped) {
                    if (this.isThumbCircle) {
                        context.beginPath();
                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);
                        context.fill();
                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);
                    }
                    else {
                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);
                    }
                }
                else {
                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);
                }
            }
            else {
                if (this.isThumbClamped) {
                    if (this.isThumbCircle) {
                        context.beginPath();
                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);
                        context.fill();
                        context.fillRect(left, top, thumbPosition, height);
                    }
                    else {
                        context.fillRect(left, top, thumbPosition, height);
                    }
                }
                else {
                    context.fillRect(left, top, thumbPosition, height);
                }
            }
        }
        // Thumb
        context.fillStyle = this._thumbColor || this._getColor(context);
        if (this.displayThumb) {
            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                context.shadowColor = this.shadowColor;
                context.shadowBlur = this.shadowBlur;
                context.shadowOffsetX = this.shadowOffsetX;
                context.shadowOffsetY = this.shadowOffsetY;
            }
            if (this._isThumbCircle) {
                context.beginPath();
                if (this.isVertical) {
                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);
                }
                else {
                    context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);
                }
                context.fill();
                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                    context.shadowBlur = 0;
                    context.shadowOffsetX = 0;
                    context.shadowOffsetY = 0;
                }
                context.strokeStyle = this._borderColor;
                context.stroke();
            }
            else {
                if (this.isVertical) {
                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);
                }
                else {
                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);
                }
                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
                    context.shadowBlur = 0;
                    context.shadowOffsetX = 0;
                    context.shadowOffsetY = 0;
                }
                context.strokeStyle = this._borderColor;
                if (this.isVertical) {
                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);
                }
                else {
                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);
                }
            }
        }
        context.restore();
    };
    Slider.prototype.serialize = function (serializationObject) {
        _super.prototype.serialize.call(this, serializationObject);
        if (this.backgroundGradient) {
            serializationObject.backgroundGradient = {};
            this.backgroundGradient.serialize(serializationObject.backgroundGradient);
        }
    };
    /** @internal */
    Slider.prototype._parseFromContent = function (serializedObject, host) {
        _super.prototype._parseFromContent.call(this, serializedObject, host);
        if (serializedObject.backgroundGradient) {
            var className = babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.Tools.Instantiate("BABYLON.GUI." + serializedObject.backgroundGradient.className);
            this.backgroundGradient = new className();
            this.backgroundGradient.parse(serializedObject.backgroundGradient);
        }
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Slider.prototype, "displayValueBar", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Slider.prototype, "borderColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Slider.prototype, "background", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Slider.prototype, "thumbColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.serialize)()
    ], Slider.prototype, "isThumbCircle", null);
    return Slider;
}(_baseSlider__WEBPACK_IMPORTED_MODULE_0__.BaseSlider));
(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_1__.RegisterClass)("BABYLON.GUI.Slider", Slider);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/stackPanel.ts":
/*!******************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/stackPanel.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StackPanel: () => (/* binding */ StackPanel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./container */ "../../../dev/gui/src/2D/controls/container.ts");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! babylonjs/Misc/logger */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__);






/**
 * Class used to create a 2D stack panel container
 */
var StackPanel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(StackPanel, _super);
    /**
     * Creates a new StackPanel
     * @param name defines control name
     */
    function StackPanel(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._isVertical = true;
        _this._manualWidth = false;
        _this._manualHeight = false;
        _this._doNotTrackManualChanges = false;
        _this._spacing = 0;
        /**
         * Gets or sets a boolean indicating that layout warnings should be ignored
         */
        _this.ignoreLayoutWarnings = false;
        return _this;
    }
    Object.defineProperty(StackPanel.prototype, "isVertical", {
        /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/
        get: function () {
            return this._isVertical;
        },
        set: function (value) {
            if (this._isVertical === value) {
                return;
            }
            this._isVertical = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StackPanel.prototype, "spacing", {
        /**
         * Gets or sets the spacing (in pixels) between each child.
         */
        get: function () {
            return this._spacing;
        },
        set: function (value) {
            if (this._spacing === value) {
                return;
            }
            this._spacing = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StackPanel.prototype, "width", {
        get: function () {
            return this._width.toString(this._host);
        },
        /**
         * Gets or sets panel width.
         * This value should not be set when in horizontal mode as it will be computed automatically
         */
        set: function (value) {
            if (!this._doNotTrackManualChanges) {
                this._manualWidth = true;
            }
            if (this._width.toString(this._host) === value) {
                return;
            }
            if (this._width.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StackPanel.prototype, "height", {
        get: function () {
            return this._height.toString(this._host);
        },
        /**
         * Gets or sets panel height.
         * This value should not be set when in vertical mode as it will be computed automatically
         */
        set: function (value) {
            if (!this._doNotTrackManualChanges) {
                this._manualHeight = true;
            }
            if (this._height.toString(this._host) === value) {
                return;
            }
            if (this._height.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    StackPanel.prototype._getTypeName = function () {
        return "StackPanel";
    };
    /**
     * @internal
     */
    StackPanel.prototype._preMeasure = function (parentMeasure, context) {
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (this._isVertical) {
                child.verticalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.VERTICAL_ALIGNMENT_TOP;
            }
            else {
                child.horizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_1__.Control.HORIZONTAL_ALIGNMENT_LEFT;
            }
        }
        _super.prototype._preMeasure.call(this, parentMeasure, context);
    };
    StackPanel.prototype._additionalProcessing = function (parentMeasure, context) {
        _super.prototype._additionalProcessing.call(this, parentMeasure, context);
        this._measureForChildren.copyFrom(parentMeasure);
        this._measureForChildren.left = this._currentMeasure.left;
        this._measureForChildren.top = this._currentMeasure.top;
        if (!this.isVertical || this._manualWidth) {
            this._measureForChildren.width = this._currentMeasure.width;
        }
        if (this.isVertical || this._manualHeight) {
            this._measureForChildren.height = this._currentMeasure.height;
        }
    };
    StackPanel.prototype._postMeasure = function () {
        var stackWidth = 0;
        var stackHeight = 0;
        var childrenCount = this._children.length;
        for (var index = 0; index < childrenCount; index++) {
            var child = this._children[index];
            if (!child.isVisible || child.notRenderable) {
                continue;
            }
            if (this._isVertical) {
                if (child.top !== stackHeight + "px") {
                    child.top = stackHeight + "px";
                    this._rebuildLayout = true;
                    child._top.ignoreAdaptiveScaling = true;
                }
                if (!this.ignoreLayoutWarnings && !child.isDimensionFullyDefined("height")) {
                    babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.Logger.Warn("Control (Name:".concat(child.name, ", UniqueId:").concat(child.uniqueId, ") is using height in percentage mode inside a vertical StackPanel"), 1);
                }
                else {
                    stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);
                }
            }
            else {
                if (child.left !== stackWidth + "px") {
                    child.left = stackWidth + "px";
                    this._rebuildLayout = true;
                    child._left.ignoreAdaptiveScaling = true;
                }
                if (!this.ignoreLayoutWarnings && !child.isDimensionFullyDefined("width")) {
                    babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.Logger.Warn("Control (Name:".concat(child.name, ", UniqueId:").concat(child.uniqueId, ") is using width in percentage mode inside a horizontal StackPanel"), 1);
                }
                else {
                    stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);
                }
            }
        }
        stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;
        stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;
        this._doNotTrackManualChanges = true;
        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.
        // User can now define their own height and width for stack panel.
        var panelWidthChanged = false;
        var panelHeightChanged = false;
        if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {
            // do not specify height if strictly defined by user
            var previousHeight = this.height;
            this.height = stackHeight + "px";
            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;
        }
        if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {
            // do not specify width if strictly defined by user
            var previousWidth = this.width;
            this.width = stackWidth + "px";
            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;
        }
        if (panelHeightChanged) {
            this._height.ignoreAdaptiveScaling = true;
        }
        if (panelWidthChanged) {
            this._width.ignoreAdaptiveScaling = true;
        }
        this._doNotTrackManualChanges = false;
        if (panelWidthChanged || panelHeightChanged) {
            this._rebuildLayout = true;
        }
        _super.prototype._postMeasure.call(this);
    };
    StackPanel.prototype._getManualDim = function (dim) {
        if (dim === "width") {
            return this._manualWidth;
        }
        else {
            return this._manualHeight;
        }
    };
    StackPanel.prototype.isDimensionFullyDefined = function (dim) {
        if (dim === "height" ? this.isVertical : !this.isVertical && !this._getManualDim(dim)) {
            for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                var child = _a[_i];
                if (!child.isDimensionFullyDefined(dim)) {
                    return false;
                }
            }
            return true;
        }
        return this.getDimension(dim).isPixel || this._getAdaptDimTo(dim);
    };
    /**
     * Serializes the current control
     * @param serializationObject defined the JSON serialized object
     * @param force force serialization even if isSerializable === false
     */
    StackPanel.prototype.serialize = function (serializationObject, force) {
        _super.prototype.serialize.call(this, serializationObject, force);
        if (!this.isSerializable && !force) {
            return;
        }
        serializationObject.manualWidth = this._manualWidth;
        serializationObject.manualHeight = this._manualHeight;
    };
    /**
     * @internal
     */
    StackPanel.prototype._parseFromContent = function (serializedObject, host) {
        this._manualWidth = serializedObject.manualWidth;
        this._manualHeight = serializedObject.manualHeight;
        _super.prototype._parseFromContent.call(this, serializedObject, host);
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], StackPanel.prototype, "ignoreLayoutWarnings", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], StackPanel.prototype, "isVertical", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], StackPanel.prototype, "spacing", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], StackPanel.prototype, "width", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.serialize)()
    ], StackPanel.prototype, "height", null);
    return StackPanel;
}(_container__WEBPACK_IMPORTED_MODULE_0__.Container));
(0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_2__.RegisterClass)("BABYLON.GUI.StackPanel", StackPanel);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/statics.ts":
/*!***************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/statics.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   name: () => (/* binding */ name)
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _stackPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stackPanel */ "../../../dev/gui/src/2D/controls/stackPanel.ts");
/* harmony import */ var _textBlock__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");



/**
 * Forcing an export so that this code will execute
 * @internal
 */
var name = "Statics";

/**
 * Creates a stack panel that can be used to render headers
 * @param control defines the control to associate with the header
 * @param text defines the text of the header
 * @param size defines the size of the header
 * @param options defines options used to configure the header
 * @param options.isHorizontal
 * @param options.controlFirst
 * @returns a new StackPanel
 */
_control__WEBPACK_IMPORTED_MODULE_0__.Control.AddHeader = function (control, text, size, options) {
    var panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_1__.StackPanel("panel");
    var isHorizontal = options ? options.isHorizontal : true;
    var controlFirst = options ? options.controlFirst : true;
    panel.isVertical = !isHorizontal;
    var header = new _textBlock__WEBPACK_IMPORTED_MODULE_2__.TextBlock("header");
    header.text = text;
    header.textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_0__.Control.HORIZONTAL_ALIGNMENT_LEFT;
    if (isHorizontal) {
        header.width = size;
    }
    else {
        header.height = size;
    }
    if (controlFirst) {
        panel.addControl(control);
        panel.addControl(header);
        header.paddingLeft = "5px";
    }
    else {
        panel.addControl(header);
        panel.addControl(control);
        header.paddingRight = "5px";
    }
    header.shadowBlur = control.shadowBlur;
    header.shadowColor = control.shadowColor;
    header.shadowOffsetX = control.shadowOffsetX;
    header.shadowOffsetY = control.shadowOffsetY;
    return panel;
};


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/textBlock.ts":
/*!*****************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/textBlock.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextBlock: () => (/* binding */ TextBlock),
/* harmony export */   TextWrapping: () => (/* binding */ TextWrapping)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/engineStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./control */ "../../../dev/gui/src/2D/controls/control.ts");







/**
 * Enum that determines the text-wrapping mode to use.
 */
var TextWrapping;
(function (TextWrapping) {
    /**
     * Clip the text when it's larger than Control.width; this is the default mode.
     */
    TextWrapping[TextWrapping["Clip"] = 0] = "Clip";
    /**
     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.
     */
    TextWrapping[TextWrapping["WordWrap"] = 1] = "WordWrap";
    /**
     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.
     */
    TextWrapping[TextWrapping["Ellipsis"] = 2] = "Ellipsis";
    /**
     * Wrap the text word-wise and clip the text when the text's height is larger than the Control.height, and shrink the last line with trailing … .
     */
    TextWrapping[TextWrapping["WordWrapEllipsis"] = 3] = "WordWrapEllipsis";
    /**
     * Use HTML to wrap the text. This is the only mode that supports east-asian languages.
     */
    TextWrapping[TextWrapping["HTML"] = 4] = "HTML";
})(TextWrapping || (TextWrapping = {}));
/**
 * Class used to create text block control
 */
var TextBlock = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TextBlock, _super);
    /**
     * Creates a new TextBlock object
     * @param name defines the name of the control
     * @param text defines the text to display (empty string by default)
     */
    function TextBlock(
    /**
     * Defines the name of the control
     */
    name, text) {
        if (text === void 0) { text = ""; }
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this._text = "";
        _this._textWrapping = 0 /* TextWrapping.Clip */;
        _this._textHorizontalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER;
        _this._textVerticalAlignment = _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER;
        _this._resizeToFit = false;
        _this._lineSpacing = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        _this._outlineWidth = 0;
        _this._outlineColor = "white";
        _this._underline = false;
        _this._lineThrough = false;
        _this._wordDivider = " ";
        _this._forceResizeWidth = false;
        _this._applyOutlineToUnderline = false;
        /**
         * An event triggered after the text is changed
         */
        _this.onTextChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered after the text was broken up into lines
         */
        _this.onLinesReadyObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Gets or sets a boolean indicating if the HTML element generated for word wrapping should be reused or removed after each wrapping.
         */
        _this.reuseHTMLForWordWrapping = false;
        _this._linesTemp = [];
        _this._htmlElement = null;
        _this.text = text;
        return _this;
    }
    Object.defineProperty(TextBlock.prototype, "lines", {
        /**
         * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)
         */
        get: function () {
            return this._lines;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "resizeToFit", {
        /**
         * Gets or sets a boolean indicating that the TextBlock will be resized to fit its content
    
         */
        get: function () {
            return this._resizeToFit;
        },
        /**
         * Gets or sets a boolean indicating that the TextBlock will be resized to fit its content
    
         */
        set: function (value) {
            if (this._resizeToFit === value) {
                return;
            }
            this._resizeToFit = value;
            if (this._resizeToFit) {
                this._width.ignoreAdaptiveScaling = true;
                this._height.ignoreAdaptiveScaling = true;
            }
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "textWrapping", {
        /**
         * Gets or sets a boolean indicating if text must be wrapped
         */
        get: function () {
            return this._textWrapping;
        },
        /**
         * Gets or sets a boolean indicating if text must be wrapped
         */
        set: function (value) {
            if (this._textWrapping === value) {
                return;
            }
            this._textWrapping = +value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "text", {
        /**
         * Gets or sets text to display
         */
        get: function () {
            return this._text;
        },
        /**
         * Gets or sets text to display
         */
        set: function (value) {
            if (this._text === value) {
                return;
            }
            this._text = value + ""; // Making sure it is a text
            this._markAsDirty();
            this.onTextChangedObservable.notifyObservers(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "textHorizontalAlignment", {
        /**
         * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)
         */
        get: function () {
            return this._textHorizontalAlignment;
        },
        /**
         * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)
         */
        set: function (value) {
            if (this._textHorizontalAlignment === value) {
                return;
            }
            this._textHorizontalAlignment = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "textVerticalAlignment", {
        /**
         * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)
         */
        get: function () {
            return this._textVerticalAlignment;
        },
        /**
         * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)
         */
        set: function (value) {
            if (this._textVerticalAlignment === value) {
                return;
            }
            this._textVerticalAlignment = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "lineSpacing", {
        /**
         * Gets or sets line spacing value
         */
        get: function () {
            return this._lineSpacing.toString(this._host);
        },
        /**
         * Gets or sets line spacing value
         */
        set: function (value) {
            if (this._lineSpacing.fromString(value)) {
                this._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "outlineWidth", {
        /**
         * Gets or sets outlineWidth of the text to display
         */
        get: function () {
            return this._outlineWidth;
        },
        /**
         * Gets or sets outlineWidth of the text to display
         */
        set: function (value) {
            if (this._outlineWidth === value) {
                return;
            }
            this._outlineWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "underline", {
        /**
         * Gets or sets a boolean indicating that text must have underline
         */
        get: function () {
            return this._underline;
        },
        /**
         * Gets or sets a boolean indicating that text must have underline
         */
        set: function (value) {
            if (this._underline === value) {
                return;
            }
            this._underline = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "lineThrough", {
        /**
         * Gets or sets an boolean indicating that text must be crossed out
         */
        get: function () {
            return this._lineThrough;
        },
        /**
         * Gets or sets an boolean indicating that text must be crossed out
         */
        set: function (value) {
            if (this._lineThrough === value) {
                return;
            }
            this._lineThrough = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "applyOutlineToUnderline", {
        /**
         * If the outline should be applied to the underline/strike-through too. Has different behavior in Edge/Chrome vs Firefox.
         */
        get: function () {
            return this._applyOutlineToUnderline;
        },
        set: function (value) {
            if (this._applyOutlineToUnderline === value) {
                return;
            }
            this._applyOutlineToUnderline = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "outlineColor", {
        /**
         * Gets or sets outlineColor of the text to display
         */
        get: function () {
            return this._outlineColor;
        },
        /**
         * Gets or sets outlineColor of the text to display
         */
        set: function (value) {
            if (this._outlineColor === value) {
                return;
            }
            this._outlineColor = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "wordDivider", {
        /**
         * Gets or sets word divider
         */
        get: function () {
            return this._wordDivider;
        },
        /**
         * Gets or sets word divider
         */
        set: function (value) {
            if (this._wordDivider === value) {
                return;
            }
            this._wordDivider = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBlock.prototype, "forceResizeWidth", {
        /**
         * By default, if a text block has text wrapping other than Clip, its width
         * is not resized even if resizeToFit = true. This parameter forces the width
         * to be resized.
         */
        get: function () {
            return this._forceResizeWidth;
        },
        set: function (value) {
            if (this._forceResizeWidth === value) {
                return;
            }
            this._forceResizeWidth = value;
            this._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    TextBlock.prototype._getTypeName = function () {
        return "TextBlock";
    };
    TextBlock.prototype._processMeasures = function (parentMeasure, context) {
        var _a;
        if (!this._fontOffset || this.isDirty) {
            this._fontOffset = _control__WEBPACK_IMPORTED_MODULE_2__.Control._GetFontOffset(context.font, (_a = this._host.getScene()) === null || _a === void 0 ? void 0 : _a.getEngine());
        }
        _super.prototype._processMeasures.call(this, parentMeasure, context);
        // Prepare lines
        this._lines = this._breakLines(this._currentMeasure.width, this._currentMeasure.height, context);
        this.onLinesReadyObservable.notifyObservers(this);
        var maxLineWidth = 0;
        for (var i = 0; i < this._lines.length; i++) {
            var line = this._lines[i];
            if (line.width > maxLineWidth) {
                maxLineWidth = line.width;
            }
        }
        if (this._resizeToFit) {
            if (this._textWrapping === 0 /* TextWrapping.Clip */ || this._forceResizeWidth) {
                var newWidth = Math.ceil(this._paddingLeftInPixels) + Math.ceil(this._paddingRightInPixels) + Math.ceil(maxLineWidth);
                if (newWidth !== this._width.getValueInPixel(this._host, this._tempParentMeasure.width)) {
                    this._width.updateInPlace(newWidth, _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PIXEL);
                    this._rebuildLayout = true;
                }
            }
            var newHeight = (this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * this._lines.length) | 0;
            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {
                var lineSpacing = 0;
                if (this._lineSpacing.isPixel) {
                    lineSpacing = this._lineSpacing.getValue(this._host);
                }
                else {
                    lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
                }
                newHeight += (this._lines.length - 1) * lineSpacing;
            }
            if (newHeight !== this._height.internalValue) {
                this._height.updateInPlace(newHeight, _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PIXEL);
                this._rebuildLayout = true;
            }
        }
    };
    TextBlock.prototype._drawText = function (text, textWidth, y, context) {
        var width = this._currentMeasure.width;
        var x = 0;
        switch (this._textHorizontalAlignment) {
            case _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT:
                x = 0;
                break;
            case _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_RIGHT:
                x = width - textWidth;
                break;
            case _control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_CENTER:
                x = (width - textWidth) / 2;
                break;
        }
        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
        }
        if (this.outlineWidth) {
            context.strokeText(text, this._currentMeasure.left + x, y);
        }
        context.fillText(text, this._currentMeasure.left + x, y);
        if (this._underline) {
            this._drawLine(this._currentMeasure.left + x, y + 3, this._currentMeasure.left + x + textWidth, y + 3, context);
        }
        if (this._lineThrough) {
            this._drawLine(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3, this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3, context);
        }
    };
    TextBlock.prototype._drawLine = function (xFrom, yFrom, xTo, yTo, context) {
        context.beginPath();
        context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);
        context.moveTo(xFrom, yFrom);
        context.lineTo(xTo, yTo);
        if (this.outlineWidth && this.applyOutlineToUnderline) {
            context.stroke();
            context.fill();
        }
        else {
            var currentStroke = context.strokeStyle;
            context.strokeStyle = context.fillStyle;
            context.stroke();
            context.strokeStyle = currentStroke;
        }
        context.closePath();
    };
    /**
     * @internal
     */
    TextBlock.prototype._draw = function (context) {
        context.save();
        this._applyStates(context);
        // Render lines
        this._renderLines(context);
        context.restore();
    };
    TextBlock.prototype._applyStates = function (context) {
        _super.prototype._applyStates.call(this, context);
        if (this.outlineWidth) {
            context.lineWidth = this.outlineWidth;
            context.strokeStyle = this.outlineColor;
            context.lineJoin = "miter";
            context.miterLimit = 2;
        }
    };
    TextBlock.prototype._breakLines = function (refWidth, refHeight, context) {
        var _a, _b;
        this._linesTemp.length = 0;
        var _lines = this._textWrapping === 4 /* TextWrapping.HTML */ ? this._parseHTMLText(refWidth, refHeight, context) : this.text.split("\n");
        switch (this._textWrapping) {
            case 1 /* TextWrapping.WordWrap */:
                for (var _i = 0, _lines_1 = _lines; _i < _lines_1.length; _i++) {
                    var _line = _lines_1[_i];
                    (_a = this._linesTemp).push.apply(_a, this._parseLineWordWrap(_line, refWidth, context));
                }
                break;
            case 2 /* TextWrapping.Ellipsis */:
                for (var _c = 0, _lines_2 = _lines; _c < _lines_2.length; _c++) {
                    var _line = _lines_2[_c];
                    this._linesTemp.push(this._parseLineEllipsis(_line, refWidth, context));
                }
                break;
            case 3 /* TextWrapping.WordWrapEllipsis */:
                for (var _d = 0, _lines_3 = _lines; _d < _lines_3.length; _d++) {
                    var _line = _lines_3[_d];
                    (_b = this._linesTemp).push.apply(_b, this._parseLineWordWrapEllipsis(_line, refWidth, refHeight, context));
                }
                break;
            case 4 /* TextWrapping.HTML */:
            default:
                for (var _e = 0, _lines_4 = _lines; _e < _lines_4.length; _e++) {
                    var _line = _lines_4[_e];
                    this._linesTemp.push(this._parseLine(_line, context));
                }
                break;
        }
        return this._linesTemp;
    };
    TextBlock.prototype._parseHTMLText = function (refWidth, refHeight, context) {
        var _a;
        var lines = [];
        if (!this._htmlElement) {
            this._htmlElement = document.createElement("div");
            document.body.appendChild(this._htmlElement);
        }
        var htmlElement = this._htmlElement;
        htmlElement.textContent = this.text;
        htmlElement.style.font = context.font;
        htmlElement.style.position = "absolute";
        htmlElement.style.visibility = "hidden";
        htmlElement.style.top = "-1000px";
        htmlElement.style.left = "-1000px";
        (_a = this.adjustWordWrappingHTMLElement) === null || _a === void 0 ? void 0 : _a.call(this, htmlElement);
        htmlElement.style.width = refWidth + "px";
        htmlElement.style.height = refHeight + "px";
        var textContent = htmlElement.textContent;
        if (!textContent) {
            return lines;
        }
        // get the text node
        var textNode = htmlElement.childNodes[0];
        var range = document.createRange();
        var idx = 0;
        for (var _i = 0, textContent_1 = textContent; _i < textContent_1.length; _i++) {
            var c = textContent_1[_i];
            range.setStart(textNode, 0);
            range.setEnd(textNode, idx + 1);
            // "select" text from beginning to this position to determine the line
            var lineIndex = range.getClientRects().length - 1;
            lines[lineIndex] = (lines[lineIndex] || "") + c;
            idx++;
        }
        if (!this.reuseHTMLForWordWrapping) {
            htmlElement.remove();
            this._htmlElement = null;
        }
        return lines;
    };
    TextBlock.prototype._parseLine = function (line, context) {
        if (line === void 0) { line = ""; }
        return { text: line, width: this._getTextMetricsWidth(context.measureText(line)) };
    };
    //Calculate how many characters approximately we need to remove
    TextBlock.prototype._getCharsToRemove = function (lineWidth, width, lineLength) {
        var diff = lineWidth > width ? lineWidth - width : 0;
        // This isn't exact unless the font is monospaced
        var charWidth = lineWidth / lineLength;
        var removeChars = Math.max(Math.floor(diff / charWidth), 1);
        return removeChars;
    };
    TextBlock.prototype._parseLineEllipsis = function (line, width, context) {
        if (line === void 0) { line = ""; }
        var lineWidth = this._getTextMetricsWidth(context.measureText(line));
        var removeChars = this._getCharsToRemove(lineWidth, width, line.length);
        // unicode support. split('') does not work with unicode!
        // make sure Array.from is available
        var characters = Array.from && Array.from(line);
        if (!characters) {
            // no array.from, use the old method
            while (line.length > 2 && lineWidth > width) {
                line = line.slice(0, -removeChars);
                lineWidth = this._getTextMetricsWidth(context.measureText(line + "…"));
                removeChars = this._getCharsToRemove(lineWidth, width, line.length);
            }
            // Add on the end
            line += "…";
        }
        else {
            while (characters.length && lineWidth > width) {
                characters.splice(characters.length - removeChars, removeChars);
                line = "".concat(characters.join(""), "\u2026");
                lineWidth = this._getTextMetricsWidth(context.measureText(line));
                removeChars = this._getCharsToRemove(lineWidth, width, line.length);
            }
        }
        return { text: line, width: lineWidth };
    };
    TextBlock.prototype._getTextMetricsWidth = function (textMetrics) {
        if (textMetrics.actualBoundingBoxLeft !== undefined) {
            return Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);
        }
        return textMetrics.width;
    };
    TextBlock.prototype._parseLineWordWrap = function (line, width, context) {
        if (line === void 0) { line = ""; }
        var lines = [];
        var words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(this._wordDivider);
        var lineWidth = this._getTextMetricsWidth(context.measureText(line));
        for (var n = 0; n < words.length; n++) {
            var testLine = n > 0 ? line + this._wordDivider + words[n] : words[0];
            var testWidth = this._getTextMetricsWidth(context.measureText(testLine));
            if (testWidth > width && n > 0) {
                lines.push({ text: line, width: lineWidth });
                line = words[n];
                lineWidth = this._getTextMetricsWidth(context.measureText(line));
            }
            else {
                lineWidth = testWidth;
                line = testLine;
            }
        }
        lines.push({ text: line, width: lineWidth });
        return lines;
    };
    TextBlock.prototype._parseLineWordWrapEllipsis = function (line, width, height, context) {
        if (line === void 0) { line = ""; }
        var lines = this._parseLineWordWrap(line, width, context);
        for (var n = 1; n <= lines.length; n++) {
            var currentHeight = this._computeHeightForLinesOf(n);
            if (currentHeight > height && n > 1) {
                var lastLine = lines[n - 2];
                var currentLine = lines[n - 1];
                lines[n - 2] = this._parseLineEllipsis(lastLine.text + this._wordDivider + currentLine.text, width, context);
                var linesToRemove = lines.length - n + 1;
                for (var i = 0; i < linesToRemove; i++) {
                    lines.pop();
                }
                return lines;
            }
        }
        return lines;
    };
    TextBlock.prototype._renderLines = function (context) {
        if (!this._fontOffset || !this._lines) {
            return;
        }
        var height = this._currentMeasure.height;
        var rootY = 0;
        switch (this._textVerticalAlignment) {
            case _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_TOP:
                rootY = this._fontOffset.ascent;
                break;
            case _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_BOTTOM:
                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;
                break;
            case _control__WEBPACK_IMPORTED_MODULE_2__.Control.VERTICAL_ALIGNMENT_CENTER:
                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;
                break;
        }
        rootY += this._currentMeasure.top;
        for (var i = 0; i < this._lines.length; i++) {
            var line = this._lines[i];
            if (i !== 0 && this._lineSpacing.internalValue !== 0) {
                if (this._lineSpacing.isPixel) {
                    rootY += this._lineSpacing.getValue(this._host);
                }
                else {
                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
                }
            }
            this._drawText(line.text, line.width, rootY, context);
            rootY += this._fontOffset.height;
        }
    };
    TextBlock.prototype._computeHeightForLinesOf = function (lineCount) {
        var newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * lineCount;
        if (lineCount > 0 && this._lineSpacing.internalValue !== 0) {
            var lineSpacing = 0;
            if (this._lineSpacing.isPixel) {
                lineSpacing = this._lineSpacing.getValue(this._host);
            }
            else {
                lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);
            }
            newHeight += (lineCount - 1) * lineSpacing;
        }
        return newHeight;
    };
    TextBlock.prototype.isDimensionFullyDefined = function (dim) {
        if (this.resizeToFit) {
            return true;
        }
        return _super.prototype.isDimensionFullyDefined.call(this, dim);
    };
    /**
     * Given a width constraint applied on the text block, find the expected height
     * @returns expected height
     */
    TextBlock.prototype.computeExpectedHeight = function () {
        var _a, _b;
        if (this.text && this.widthInPixels) {
            // Should abstract platform instead of using LastCreatedEngine
            var context_1 = (_a = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.EngineStore.LastCreatedEngine) === null || _a === void 0 ? void 0 : _a.createCanvas(0, 0).getContext("2d");
            if (context_1) {
                this._applyStates(context_1);
                if (!this._fontOffset) {
                    this._fontOffset = _control__WEBPACK_IMPORTED_MODULE_2__.Control._GetFontOffset(context_1.font, (_b = this._host.getScene()) === null || _b === void 0 ? void 0 : _b.getEngine());
                }
                var lines = this._lines
                    ? this._lines
                    : this._breakLines(this.widthInPixels - this._paddingLeftInPixels - this._paddingRightInPixels, this.heightInPixels - this._paddingTopInPixels - this._paddingBottomInPixels, context_1);
                return this._computeHeightForLinesOf(lines.length);
            }
        }
        return 0;
    };
    TextBlock.prototype.dispose = function () {
        var _a;
        _super.prototype.dispose.call(this);
        this.onTextChangedObservable.clear();
        (_a = this._htmlElement) === null || _a === void 0 ? void 0 : _a.remove();
        this._htmlElement = null;
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "resizeToFit", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "textWrapping", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "text", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "textHorizontalAlignment", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "textVerticalAlignment", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "lineSpacing", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "outlineWidth", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "underline", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "lineThrough", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "applyOutlineToUnderline", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "outlineColor", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "wordDivider", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], TextBlock.prototype, "forceResizeWidth", null);
    return TextBlock;
}(_control__WEBPACK_IMPORTED_MODULE_2__.Control));
(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.TextBlock", TextBlock);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/textWrapper.ts":
/*!*******************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/textWrapper.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextWrapper: () => (/* binding */ TextWrapper)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");

/** @internal */
var TextWrapper = /** @class */ (function () {
    function TextWrapper() {
    }
    Object.defineProperty(TextWrapper.prototype, "text", {
        get: function () {
            return this._characters ? this._characters.join("") : this._text;
        },
        set: function (txt) {
            this._text = txt;
            this._characters = Array.from && Array.from(txt);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextWrapper.prototype, "length", {
        get: function () {
            return this._characters ? this._characters.length : this._text.length;
        },
        enumerable: false,
        configurable: true
    });
    TextWrapper.prototype.removePart = function (idxStart, idxEnd, insertTxt) {
        var _a;
        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : "") + this._text.slice(idxEnd);
        if (this._characters) {
            var newCharacters = insertTxt ? Array.from(insertTxt) : [];
            (_a = this._characters).splice.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([idxStart, idxEnd - idxStart], newCharacters, false));
        }
    };
    TextWrapper.prototype.charAt = function (idx) {
        return this._characters ? this._characters[idx] : this._text.charAt(idx);
    };
    TextWrapper.prototype.substr = function (from, length) {
        if (this._characters) {
            if (isNaN(from)) {
                from = 0;
            }
            else if (from >= 0) {
                from = Math.min(from, this._characters.length);
            }
            else {
                from = this._characters.length + Math.max(from, -this._characters.length);
            }
            if (length === undefined) {
                length = this._characters.length - from;
            }
            else if (isNaN(length)) {
                length = 0;
            }
            else if (length < 0) {
                length = 0;
            }
            var temp = [];
            while (--length >= 0) {
                temp[length] = this._characters[from + length];
            }
            return temp.join("");
        }
        return this._text.substr(from, length);
    };
    TextWrapper.prototype.substring = function (from, to) {
        if (this._characters) {
            if (isNaN(from)) {
                from = 0;
            }
            else if (from > this._characters.length) {
                from = this._characters.length;
            }
            else if (from < 0) {
                from = 0;
            }
            if (to === undefined) {
                to = this._characters.length;
            }
            else if (isNaN(to)) {
                to = 0;
            }
            else if (to > this._characters.length) {
                to = this._characters.length;
            }
            else if (to < 0) {
                to = 0;
            }
            var temp = [];
            var idx = 0;
            while (from < to) {
                temp[idx++] = this._characters[from++];
            }
            return temp.join("");
        }
        return this._text.substring(from, to);
    };
    TextWrapper.prototype.isWord = function (index) {
        var rWord = /\w/g;
        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;
    };
    return TextWrapper;
}());



/***/ }),

/***/ "../../../dev/gui/src/2D/controls/toggleButton.ts":
/*!********************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/toggleButton.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ToggleButton: () => (/* binding */ ToggleButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/typeStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rectangle */ "../../../dev/gui/src/2D/controls/rectangle.ts");




/**
 * Class used to create toggle buttons
 * @since 5.0.0
 */
var ToggleButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ToggleButton, _super);
    /**
     * Creates a new ToggleButton
     * @param name defines the control name
     * @param group defines the toggle group this toggle belongs to
     */
    function ToggleButton(name, group) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        /** Observable raised when isActive is changed */
        _this.onIsActiveChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info
         */
        _this.delegatePickingToChildren = false;
        _this._isActive = false;
        _this.group = group !== null && group !== void 0 ? group : "";
        _this.thickness = 0;
        _this.isPointerBlocker = true;
        var alphaStore = null;
        _this.toActiveAnimation = function () {
            _this.thickness = 1;
        };
        _this.toInactiveAnimation = function () {
            _this.thickness = 0;
        };
        _this.pointerEnterActiveAnimation = function () {
            alphaStore = _this.alpha;
            _this.alpha -= 0.1;
        };
        _this.pointerOutActiveAnimation = function () {
            if (alphaStore !== null) {
                _this.alpha = alphaStore;
            }
        };
        _this.pointerDownActiveAnimation = function () {
            _this.scaleX -= 0.05;
            _this.scaleY -= 0.05;
        };
        _this.pointerUpActiveAnimation = function () {
            _this.scaleX += 0.05;
            _this.scaleY += 0.05;
        };
        _this.pointerEnterInactiveAnimation = function () {
            alphaStore = _this.alpha;
            _this.alpha -= 0.1;
        };
        _this.pointerOutInactiveAnimation = function () {
            if (alphaStore !== null) {
                _this.alpha = alphaStore;
            }
        };
        _this.pointerDownInactiveAnimation = function () {
            _this.scaleX -= 0.05;
            _this.scaleY -= 0.05;
        };
        _this.pointerUpInactiveAnimation = function () {
            _this.scaleX += 0.05;
            _this.scaleY += 0.05;
        };
        return _this;
    }
    Object.defineProperty(ToggleButton.prototype, "group", {
        /** Gets or sets group name this toggle button belongs to */
        get: function () {
            return this._group;
        },
        set: function (value) {
            if (this._group === value) {
                return;
            }
            this._group = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToggleButton.prototype, "isActive", {
        /** Gets or sets a boolean indicating if the toggle button is active or not */
        get: function () {
            return this._isActive;
        },
        set: function (value) {
            var _this = this;
            var _a, _b;
            // Function modeled after radioButton.ts
            if (this._isActive === value) {
                return;
            }
            this._isActive = value;
            // Update the visual state based on the new value
            if (this._isActive) {
                (_a = this.toActiveAnimation) === null || _a === void 0 ? void 0 : _a.call(this);
            }
            else {
                (_b = this.toInactiveAnimation) === null || _b === void 0 ? void 0 : _b.call(this);
            }
            this._markAsDirty();
            this.onIsActiveChangedObservable.notifyObservers(value);
            if (this._isActive && this._host && this._group) {
                // A toggle button in a group can only have 1 active element at a given time.
                // If this toggle button has a group, set other toggle buttons in the group to inactive.
                this._host.executeOnAllControls(function (control) {
                    // Check for control type ToggleButton
                    if (control.typeName === "ToggleButton") {
                        // Don't do anything to this toggle button
                        if (control === _this) {
                            return;
                        }
                        var childToggle = control;
                        // If toggle button is in same group, set isActive to false
                        if (childToggle.group === _this.group) {
                            childToggle.isActive = false;
                        }
                    }
                });
            }
        },
        enumerable: false,
        configurable: true
    });
    ToggleButton.prototype._getTypeName = function () {
        return "ToggleButton";
    };
    // While being a container, the toggle button behaves like a control.
    /**
     * @internal
     */
    ToggleButton.prototype._processPicking = function (x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY) {
        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {
            return false;
        }
        if (!_super.prototype.contains.call(this, x, y)) {
            return false;
        }
        if (this.delegatePickingToChildren) {
            var contains = false;
            for (var index = this._children.length - 1; index >= 0; index--) {
                var child = this._children[index];
                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {
                    contains = true;
                    break;
                }
            }
            if (!contains) {
                return false;
            }
        }
        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);
        return true;
    };
    /**
     * @internal
     */
    ToggleButton.prototype._onPointerEnter = function (target, pi) {
        if (!_super.prototype._onPointerEnter.call(this, target, pi)) {
            return false;
        }
        if (this.isReadOnly) {
            return true;
        }
        if (this._isActive) {
            if (this.pointerEnterActiveAnimation) {
                this.pointerEnterActiveAnimation();
            }
        }
        else {
            if (this.pointerEnterInactiveAnimation) {
                this.pointerEnterInactiveAnimation();
            }
        }
        return true;
    };
    /**
     * @internal
     */
    ToggleButton.prototype._onPointerOut = function (target, pi, force) {
        if (force === void 0) { force = false; }
        if (!this.isReadOnly) {
            if (this._isActive) {
                if (this.pointerOutActiveAnimation) {
                    this.pointerOutActiveAnimation();
                }
            }
            else {
                if (this.pointerOutInactiveAnimation) {
                    this.pointerOutInactiveAnimation();
                }
            }
        }
        _super.prototype._onPointerOut.call(this, target, pi, force);
    };
    /**
     * @internal
     */
    ToggleButton.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!_super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi)) {
            return false;
        }
        if (this.isReadOnly) {
            return true;
        }
        if (this._isActive) {
            if (this.pointerDownActiveAnimation) {
                this.pointerDownActiveAnimation();
            }
        }
        else {
            if (this.pointerDownInactiveAnimation) {
                this.pointerDownInactiveAnimation();
            }
        }
        return true;
    };
    /**
     * @internal
     */
    ToggleButton.prototype._onPointerUp = function (target, coordinates, pointerId, buttonIndex, notifyClick, pi) {
        if (!this.isReadOnly) {
            if (this._isActive) {
                if (this.pointerUpActiveAnimation) {
                    this.pointerUpActiveAnimation();
                }
            }
            else {
                if (this.pointerUpInactiveAnimation) {
                    this.pointerUpInactiveAnimation();
                }
            }
        }
        _super.prototype._onPointerUp.call(this, target, coordinates, pointerId, buttonIndex, notifyClick, pi);
    };
    return ToggleButton;
}(_rectangle__WEBPACK_IMPORTED_MODULE_1__.Rectangle));

(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.ToggleButton", ToggleButton);


/***/ }),

/***/ "../../../dev/gui/src/2D/controls/virtualKeyboard.ts":
/*!***********************************************************!*\
  !*** ../../../dev/gui/src/2D/controls/virtualKeyboard.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeyPropertySet: () => (/* binding */ KeyPropertySet),
/* harmony export */   VirtualKeyboard: () => (/* binding */ VirtualKeyboard)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/typeStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _stackPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stackPanel */ "../../../dev/gui/src/2D/controls/stackPanel.ts");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./button */ "../../../dev/gui/src/2D/controls/button.ts");
/* harmony import */ var _inputTextArea__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./inputTextArea */ "../../../dev/gui/src/2D/controls/inputTextArea.ts");






/**
 * Class used to store key control properties
 */
var KeyPropertySet = /** @class */ (function () {
    function KeyPropertySet() {
    }
    return KeyPropertySet;
}());

/**
 * Class used to create virtual keyboard
 */
var VirtualKeyboard = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(VirtualKeyboard, _super);
    function VirtualKeyboard() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Observable raised when a key is pressed */
        _this.onKeyPressObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /** Gets or sets default key button width */
        _this.defaultButtonWidth = "40px";
        /** Gets or sets default key button height */
        _this.defaultButtonHeight = "40px";
        /** Gets or sets default key button left padding */
        _this.defaultButtonPaddingLeft = "2px";
        /** Gets or sets default key button right padding */
        _this.defaultButtonPaddingRight = "2px";
        /** Gets or sets default key button top padding */
        _this.defaultButtonPaddingTop = "2px";
        /** Gets or sets default key button bottom padding */
        _this.defaultButtonPaddingBottom = "2px";
        /** Gets or sets default key button foreground color */
        _this.defaultButtonColor = "#DDD";
        /** Gets or sets default key button background color */
        _this.defaultButtonBackground = "#070707";
        /** Gets or sets shift button foreground color */
        _this.shiftButtonColor = "#7799FF";
        /** Gets or sets shift button thickness*/
        _this.selectedShiftThickness = 1;
        /** Gets shift key state */
        _this.shiftState = 0;
        _this._currentlyConnectedInputText = null;
        _this._connectedInputTexts = [];
        _this._onKeyPressObserver = null;
        return _this;
    }
    VirtualKeyboard.prototype._getTypeName = function () {
        return "VirtualKeyboard";
    };
    VirtualKeyboard.prototype._createKey = function (key, propertySet) {
        var _this = this;
        var button = _button__WEBPACK_IMPORTED_MODULE_2__.Button.CreateSimpleButton(key, key);
        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;
        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;
        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;
        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;
        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;
        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;
        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;
        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;
        button.thickness = 0;
        button.isFocusInvisible = true;
        button.shadowColor = this.shadowColor;
        button.shadowBlur = this.shadowBlur;
        button.shadowOffsetX = this.shadowOffsetX;
        button.shadowOffsetY = this.shadowOffsetY;
        button.onPointerUpObservable.add(function () {
            _this.onKeyPressObservable.notifyObservers(key);
        });
        return button;
    };
    /**
     * Adds a new row of keys
     * @param keys defines the list of keys to add
     * @param propertySets defines the associated property sets
     */
    VirtualKeyboard.prototype.addKeysRow = function (keys, propertySets) {
        var panel = new _stackPanel__WEBPACK_IMPORTED_MODULE_1__.StackPanel();
        panel.isVertical = false;
        panel.isFocusInvisible = true;
        var maxKey = null;
        for (var i = 0; i < keys.length; i++) {
            var properties = null;
            if (propertySets && propertySets.length === keys.length) {
                properties = propertySets[i];
            }
            var key = this._createKey(keys[i], properties);
            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {
                maxKey = key;
            }
            panel.addControl(key);
        }
        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;
        this.addControl(panel);
    };
    /**
     * Set the shift key to a specific state
     * @param shiftState defines the new shift state
     */
    VirtualKeyboard.prototype.applyShiftState = function (shiftState) {
        if (!this.children) {
            return;
        }
        for (var i = 0; i < this.children.length; i++) {
            var row = this.children[i];
            if (!row || !row.children) {
                continue;
            }
            var rowContainer = row;
            for (var j = 0; j < rowContainer.children.length; j++) {
                var button = rowContainer.children[j];
                if (!button || !button.children[0]) {
                    continue;
                }
                var button_tblock = button.children[0];
                if (button_tblock.text === "\u21E7") {
                    button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;
                    button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;
                }
                button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();
            }
        }
    };
    Object.defineProperty(VirtualKeyboard.prototype, "connectedInputText", {
        /** Gets the input text control currently attached to the keyboard */
        get: function () {
            return this._currentlyConnectedInputText;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Connects the keyboard with an input text control
     *
     * @param input defines the target control
     */
    VirtualKeyboard.prototype.connect = function (input) {
        var _this = this;
        var inputTextAlreadyConnected = this._connectedInputTexts.some(function (a) { return a.input === input; });
        if (inputTextAlreadyConnected) {
            return;
        }
        if (this._onKeyPressObserver === null) {
            this._onKeyPressObserver = this.onKeyPressObservable.add(function (key) {
                if (!_this._currentlyConnectedInputText) {
                    return;
                }
                _this._currentlyConnectedInputText._host.focusedControl = _this._currentlyConnectedInputText;
                switch (key) {
                    case "\u21E7":
                        _this.shiftState++;
                        if (_this.shiftState > 2) {
                            _this.shiftState = 0;
                        }
                        _this.applyShiftState(_this.shiftState);
                        return;
                    case "\u2190":
                        if (_this._currentlyConnectedInputText instanceof _inputTextArea__WEBPACK_IMPORTED_MODULE_3__.InputTextArea) {
                            _this._currentlyConnectedInputText.alternativeProcessKey("Backspace");
                        }
                        else {
                            _this._currentlyConnectedInputText.processKey(8);
                        }
                        return;
                    case "\u21B5":
                        if (_this._currentlyConnectedInputText instanceof _inputTextArea__WEBPACK_IMPORTED_MODULE_3__.InputTextArea) {
                            _this._currentlyConnectedInputText.alternativeProcessKey("Enter");
                        }
                        else {
                            _this._currentlyConnectedInputText.processKey(13);
                        }
                        return;
                }
                if (_this._currentlyConnectedInputText instanceof _inputTextArea__WEBPACK_IMPORTED_MODULE_3__.InputTextArea) {
                    _this._currentlyConnectedInputText.alternativeProcessKey("", _this.shiftState ? key.toUpperCase() : key);
                }
                else {
                    _this._currentlyConnectedInputText.processKey(-1, _this.shiftState ? key.toUpperCase() : key);
                }
                if (_this.shiftState === 1) {
                    _this.shiftState = 0;
                    _this.applyShiftState(_this.shiftState);
                }
            });
        }
        this.isVisible = false;
        this._currentlyConnectedInputText = input;
        input._connectedVirtualKeyboard = this;
        // Events hooking
        var onFocusObserver = input.onFocusObservable.add(function () {
            _this._currentlyConnectedInputText = input;
            input._connectedVirtualKeyboard = _this;
            _this.isVisible = true;
        });
        var onBlurObserver = input.onBlurObservable.add(function () {
            input._connectedVirtualKeyboard = null;
            _this._currentlyConnectedInputText = null;
            _this.isVisible = false;
        });
        this._connectedInputTexts.push({
            input: input,
            onBlurObserver: onBlurObserver,
            onFocusObserver: onFocusObserver,
        });
    };
    /**
     * Disconnects the keyboard from connected InputText controls
     *
     * @param input optionally defines a target control, otherwise all are disconnected
     */
    VirtualKeyboard.prototype.disconnect = function (input) {
        var _this = this;
        if (input) {
            // .find not available on IE
            var filtered = this._connectedInputTexts.filter(function (a) { return a.input === input; });
            if (filtered.length === 1) {
                this._removeConnectedInputObservables(filtered[0]);
                this._connectedInputTexts = this._connectedInputTexts.filter(function (a) { return a.input !== input; });
                if (this._currentlyConnectedInputText === input) {
                    this._currentlyConnectedInputText = null;
                }
            }
        }
        else {
            this._connectedInputTexts.forEach(function (connectedInputText) {
                _this._removeConnectedInputObservables(connectedInputText);
            });
            this._connectedInputTexts.length = 0;
        }
        if (this._connectedInputTexts.length === 0) {
            this._currentlyConnectedInputText = null;
            this.onKeyPressObservable.remove(this._onKeyPressObserver);
            this._onKeyPressObserver = null;
        }
    };
    VirtualKeyboard.prototype._removeConnectedInputObservables = function (connectedInputText) {
        connectedInputText.input._connectedVirtualKeyboard = null;
        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);
        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);
    };
    /**
     * Release all resources
     */
    VirtualKeyboard.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disconnect();
    };
    // Statics
    /**
     * Creates a new keyboard using a default layout
     *
     * @param name defines control name
     * @returns a new VirtualKeyboard
     */
    VirtualKeyboard.CreateDefaultLayout = function (name) {
        var returnValue = new VirtualKeyboard(name);
        returnValue.addKeysRow(["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "\u2190"]);
        returnValue.addKeysRow(["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"]);
        returnValue.addKeysRow(["a", "s", "d", "f", "g", "h", "j", "k", "l", ";", "'", "\u21B5"]);
        returnValue.addKeysRow(["\u21E7", "z", "x", "c", "v", "b", "n", "m", ",", ".", "/"]);
        returnValue.addKeysRow([" "], [{ width: "200px" }]);
        return returnValue;
    };
    /**
     * @internal
     */
    VirtualKeyboard.prototype._parseFromContent = function (serializedObject, host) {
        var _this = this;
        _super.prototype._parseFromContent.call(this, serializedObject, host);
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var row = _a[_i];
            if (row.getClassName() === "StackPanel") {
                var stackPanel = row;
                var _loop_1 = function (key) {
                    if (key.getClassName() === "Button" && key.name) {
                        key.onPointerUpObservable.add(function () {
                            _this.onKeyPressObservable.notifyObservers(key.name);
                        });
                    }
                };
                for (var _b = 0, _c = stackPanel.children; _b < _c.length; _b++) {
                    var key = _c[_b];
                    _loop_1(key);
                }
            }
        }
    };
    return VirtualKeyboard;
}(_stackPanel__WEBPACK_IMPORTED_MODULE_1__.StackPanel));

(0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.VirtualKeyboard", VirtualKeyboard);


/***/ }),

/***/ "../../../dev/gui/src/2D/index.ts":
/*!****************************************!*\
  !*** ../../../dev/gui/src/2D/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AdvancedDynamicTexture: () => (/* reexport safe */ _advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_1__.AdvancedDynamicTexture),
/* harmony export */   AdvancedDynamicTextureInstrumentation: () => (/* reexport safe */ _adtInstrumentation__WEBPACK_IMPORTED_MODULE_2__.AdvancedDynamicTextureInstrumentation),
/* harmony export */   BaseGradient: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.BaseGradient),
/* harmony export */   BaseSlider: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.BaseSlider),
/* harmony export */   Button: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Button),
/* harmony export */   Checkbox: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Checkbox),
/* harmony export */   CheckboxGroup: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.CheckboxGroup),
/* harmony export */   ColorPicker: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.ColorPicker),
/* harmony export */   Container: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Container),
/* harmony export */   Control: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Control),
/* harmony export */   DisplayGrid: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.DisplayGrid),
/* harmony export */   Ellipse: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Ellipse),
/* harmony export */   FocusableButton: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.FocusableButton),
/* harmony export */   Grid: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Grid),
/* harmony export */   Image: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Image),
/* harmony export */   ImageBasedSlider: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.ImageBasedSlider),
/* harmony export */   ImageScrollBar: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.ImageScrollBar),
/* harmony export */   InputPassword: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.InputPassword),
/* harmony export */   InputText: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.InputText),
/* harmony export */   InputTextArea: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.InputTextArea),
/* harmony export */   KeyPropertySet: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.KeyPropertySet),
/* harmony export */   Line: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Line),
/* harmony export */   LinearGradient: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.LinearGradient),
/* harmony export */   MathTools: () => (/* reexport safe */ _math2D__WEBPACK_IMPORTED_MODULE_3__.MathTools),
/* harmony export */   Matrix2D: () => (/* reexport safe */ _math2D__WEBPACK_IMPORTED_MODULE_3__.Matrix2D),
/* harmony export */   Measure: () => (/* reexport safe */ _measure__WEBPACK_IMPORTED_MODULE_4__.Measure),
/* harmony export */   MultiLine: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.MultiLine),
/* harmony export */   MultiLinePoint: () => (/* reexport safe */ _multiLinePoint__WEBPACK_IMPORTED_MODULE_5__.MultiLinePoint),
/* harmony export */   RadialGradient: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.RadialGradient),
/* harmony export */   RadioButton: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.RadioButton),
/* harmony export */   RadioGroup: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.RadioGroup),
/* harmony export */   Rectangle: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Rectangle),
/* harmony export */   ScrollBar: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.ScrollBar),
/* harmony export */   ScrollViewer: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.ScrollViewer),
/* harmony export */   SelectionPanel: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.SelectionPanel),
/* harmony export */   SelectorGroup: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.SelectorGroup),
/* harmony export */   Slider: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Slider),
/* harmony export */   SliderGroup: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.SliderGroup),
/* harmony export */   StackPanel: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.StackPanel),
/* harmony export */   Style: () => (/* reexport safe */ _style__WEBPACK_IMPORTED_MODULE_6__.Style),
/* harmony export */   TextBlock: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.TextBlock),
/* harmony export */   TextWrapper: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapper),
/* harmony export */   TextWrapping: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapping),
/* harmony export */   ToggleButton: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.ToggleButton),
/* harmony export */   ValueAndUnit: () => (/* reexport safe */ _valueAndUnit__WEBPACK_IMPORTED_MODULE_7__.ValueAndUnit),
/* harmony export */   Vector2WithInfo: () => (/* reexport safe */ _math2D__WEBPACK_IMPORTED_MODULE_3__.Vector2WithInfo),
/* harmony export */   VirtualKeyboard: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.VirtualKeyboard),
/* harmony export */   XmlLoader: () => (/* reexport safe */ _xmlLoader__WEBPACK_IMPORTED_MODULE_8__.XmlLoader),
/* harmony export */   name: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.name)
/* harmony export */ });
/* harmony import */ var _controls_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controls/index */ "../../../dev/gui/src/2D/controls/index.ts");
/* harmony import */ var _advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./advancedDynamicTexture */ "../../../dev/gui/src/2D/advancedDynamicTexture.ts");
/* harmony import */ var _adtInstrumentation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adtInstrumentation */ "../../../dev/gui/src/2D/adtInstrumentation.ts");
/* harmony import */ var _math2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./math2D */ "../../../dev/gui/src/2D/math2D.ts");
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./measure */ "../../../dev/gui/src/2D/measure.ts");
/* harmony import */ var _multiLinePoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multiLinePoint */ "../../../dev/gui/src/2D/multiLinePoint.ts");
/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./style */ "../../../dev/gui/src/2D/style.ts");
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");
/* harmony import */ var _xmlLoader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./xmlLoader */ "../../../dev/gui/src/2D/xmlLoader.ts");
/* eslint-disable import/no-internal-modules */











/***/ }),

/***/ "../../../dev/gui/src/2D/math2D.ts":
/*!*****************************************!*\
  !*** ../../../dev/gui/src/2D/math2D.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MathTools: () => (/* binding */ MathTools),
/* harmony export */   Matrix2D: () => (/* binding */ Matrix2D),
/* harmony export */   Vector2WithInfo: () => (/* binding */ Vector2WithInfo)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.constants */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);



/**
 * Class used to transport Vector2 information for pointer events
 */
var Vector2WithInfo = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(Vector2WithInfo, _super);
    /**
     * Creates a new Vector2WithInfo
     * @param source defines the vector2 data to transport
     * @param buttonIndex defines the current mouse button index
     */
    function Vector2WithInfo(source, 
    /** defines the current mouse button index */
    buttonIndex) {
        if (buttonIndex === void 0) { buttonIndex = 0; }
        var _this = _super.call(this, source.x, source.y) || this;
        _this.buttonIndex = buttonIndex;
        return _this;
    }
    return Vector2WithInfo;
}(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2));

/** Class used to provide 2D matrix features */
var Matrix2D = /** @class */ (function () {
    /**
     * Creates a new matrix
     * @param m00 defines value for (0, 0)
     * @param m01 defines value for (0, 1)
     * @param m10 defines value for (1, 0)
     * @param m11 defines value for (1, 1)
     * @param m20 defines value for (2, 0)
     * @param m21 defines value for (2, 1)
     */
    function Matrix2D(m00, m01, m10, m11, m20, m21) {
        /** Gets the internal array of 6 floats used to store matrix data */
        this.m = new Float32Array(6);
        this.fromValues(m00, m01, m10, m11, m20, m21);
    }
    /**
     * Fills the matrix from direct values
     * @param m00 defines value for (0, 0)
     * @param m01 defines value for (0, 1)
     * @param m10 defines value for (1, 0)
     * @param m11 defines value for (1, 1)
     * @param m20 defines value for (2, 0)
     * @param m21 defines value for (2, 1)
     * @returns the current modified matrix
     */
    Matrix2D.prototype.fromValues = function (m00, m01, m10, m11, m20, m21) {
        this.m[0] = m00;
        this.m[1] = m01;
        this.m[2] = m10;
        this.m[3] = m11;
        this.m[4] = m20;
        this.m[5] = m21;
        return this;
    };
    /**
     * Gets matrix determinant
     * @returns the determinant
     */
    Matrix2D.prototype.determinant = function () {
        return this.m[0] * this.m[3] - this.m[1] * this.m[2];
    };
    /**
     * Inverses the matrix and stores it in a target matrix
     * @param result defines the target matrix
     * @returns the current matrix
     */
    Matrix2D.prototype.invertToRef = function (result) {
        var l0 = this.m[0];
        var l1 = this.m[1];
        var l2 = this.m[2];
        var l3 = this.m[3];
        var l4 = this.m[4];
        var l5 = this.m[5];
        var det = this.determinant();
        if (det < babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Epsilon * babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Epsilon) {
            result.m[0] = 0;
            result.m[1] = 0;
            result.m[2] = 0;
            result.m[3] = 0;
            result.m[4] = 0;
            result.m[5] = 0;
            return this;
        }
        var detDiv = 1 / det;
        var det4 = l2 * l5 - l3 * l4;
        var det5 = l1 * l4 - l0 * l5;
        result.m[0] = l3 * detDiv;
        result.m[1] = -l1 * detDiv;
        result.m[2] = -l2 * detDiv;
        result.m[3] = l0 * detDiv;
        result.m[4] = det4 * detDiv;
        result.m[5] = det5 * detDiv;
        return this;
    };
    /**
     * Multiplies the current matrix with another one
     * @param other defines the second operand
     * @param result defines the target matrix
     * @returns the current matrix
     */
    Matrix2D.prototype.multiplyToRef = function (other, result) {
        var l0 = this.m[0];
        var l1 = this.m[1];
        var l2 = this.m[2];
        var l3 = this.m[3];
        var l4 = this.m[4];
        var l5 = this.m[5];
        var r0 = other.m[0];
        var r1 = other.m[1];
        var r2 = other.m[2];
        var r3 = other.m[3];
        var r4 = other.m[4];
        var r5 = other.m[5];
        result.m[0] = l0 * r0 + l1 * r2;
        result.m[1] = l0 * r1 + l1 * r3;
        result.m[2] = l2 * r0 + l3 * r2;
        result.m[3] = l2 * r1 + l3 * r3;
        result.m[4] = l4 * r0 + l5 * r2 + r4;
        result.m[5] = l4 * r1 + l5 * r3 + r5;
        return this;
    };
    /**
     * Applies the current matrix to a set of 2 floats and stores the result in a vector2
     * @param x defines the x coordinate to transform
     * @param y defines the x coordinate to transform
     * @param result defines the target vector2
     * @returns the current matrix
     */
    Matrix2D.prototype.transformCoordinates = function (x, y, result) {
        result.x = x * this.m[0] + y * this.m[2] + this.m[4];
        result.y = x * this.m[1] + y * this.m[3] + this.m[5];
        return this;
    };
    // Statics
    /**
     * Creates an identity matrix
     * @returns a new matrix
     */
    Matrix2D.Identity = function () {
        return new Matrix2D(1, 0, 0, 1, 0, 0);
    };
    /**
     * Creates an identity matrix and stores it in a target matrix
     * @param result defines the target matrix
     */
    Matrix2D.IdentityToRef = function (result) {
        result.m[0] = 1;
        result.m[1] = 0;
        result.m[2] = 0;
        result.m[3] = 1;
        result.m[4] = 0;
        result.m[5] = 0;
    };
    /**
     * Creates a translation matrix and stores it in a target matrix
     * @param x defines the x coordinate of the translation
     * @param y defines the y coordinate of the translation
     * @param result defines the target matrix
     */
    Matrix2D.TranslationToRef = function (x, y, result) {
        result.fromValues(1, 0, 0, 1, x, y);
    };
    /**
     * Creates a scaling matrix and stores it in a target matrix
     * @param x defines the x coordinate of the scaling
     * @param y defines the y coordinate of the scaling
     * @param result defines the target matrix
     */
    Matrix2D.ScalingToRef = function (x, y, result) {
        result.fromValues(x, 0, 0, y, 0, 0);
    };
    /**
     * Creates a rotation matrix and stores it in a target matrix
     * @param angle defines the rotation angle
     * @param result defines the target matrix
     */
    Matrix2D.RotationToRef = function (angle, result) {
        var s = Math.sin(angle);
        var c = Math.cos(angle);
        result.fromValues(c, s, -s, c, 0, 0);
    };
    /**
     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix
     * @param tx defines the x coordinate of the translation
     * @param ty defines the y coordinate of the translation
     * @param angle defines the rotation angle
     * @param scaleX defines the x coordinate of the scaling
     * @param scaleY defines the y coordinate of the scaling
     * @param parentMatrix defines the parent matrix to multiply by (can be null)
     * @param result defines the target matrix
     */
    Matrix2D.ComposeToRef = function (tx, ty, angle, scaleX, scaleY, parentMatrix, result) {
        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);
        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);
        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);
        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);
        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);
        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);
        if (parentMatrix) {
            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);
            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);
        }
        else {
            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);
        }
    };
    Matrix2D._TempPreTranslationMatrix = Matrix2D.Identity();
    Matrix2D._TempPostTranslationMatrix = Matrix2D.Identity();
    Matrix2D._TempRotationMatrix = Matrix2D.Identity();
    Matrix2D._TempScalingMatrix = Matrix2D.Identity();
    Matrix2D._TempCompose0 = Matrix2D.Identity();
    Matrix2D._TempCompose1 = Matrix2D.Identity();
    Matrix2D._TempCompose2 = Matrix2D.Identity();
    return Matrix2D;
}());
/**
 * Useful math functions
 */
var MathTools = /** @class */ (function () {
    function MathTools() {
    }
    /**
     * Rounds a number to the nearest multiple of a given precision
     * @param value the value to be rounded
     * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)
     * @returns
     */
    MathTools.Round = function (value, precision) {
        if (precision === void 0) { precision = MathTools.DefaultRoundingPrecision; }
        return Math.round(value * precision) / precision;
    };
    /**
     * Default rounding precision for GUI elements. It should be
     * set to a power of ten, where the exponent means the number
     * of decimal digits to round to, i.e, 100 means 2 decimal digits,
     * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).
     */
    MathTools.DefaultRoundingPrecision = 100;
    return MathTools;
}());


/***/ }),

/***/ "../../../dev/gui/src/2D/measure.ts":
/*!******************************************!*\
  !*** ../../../dev/gui/src/2D/measure.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Measure: () => (/* binding */ Measure)
/* harmony export */ });
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.vector */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);

var tmpRect = [new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0)];
var tmpRect2 = [new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0), new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0)];
var tmpV1 = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0);
var tmpV2 = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0);
/**
 * Class used to store 2D control sizes
 */
var Measure = /** @class */ (function () {
    /**
     * Creates a new measure
     * @param left defines left coordinate
     * @param top defines top coordinate
     * @param width defines width dimension
     * @param height defines height dimension
     */
    function Measure(
    /** defines left coordinate */
    left, 
    /** defines top coordinate  */
    top, 
    /** defines width dimension  */
    width, 
    /** defines height dimension */
    height) {
        this.left = left;
        this.top = top;
        this.width = width;
        this.height = height;
    }
    /**
     * Copy from another measure
     * @param other defines the other measure to copy from
     */
    Measure.prototype.copyFrom = function (other) {
        this.left = other.left;
        this.top = other.top;
        this.width = other.width;
        this.height = other.height;
    };
    /**
     * Copy from a group of 4 floats
     * @param left defines left coordinate
     * @param top defines top coordinate
     * @param width defines width dimension
     * @param height defines height dimension
     */
    Measure.prototype.copyFromFloats = function (left, top, width, height) {
        this.left = left;
        this.top = top;
        this.width = width;
        this.height = height;
    };
    /**
     * Computes the axis aligned bounding box measure for two given measures
     * @param a Input measure
     * @param b Input measure
     * @param result the resulting bounding measure
     */
    Measure.CombineToRef = function (a, b, result) {
        var left = Math.min(a.left, b.left);
        var top = Math.min(a.top, b.top);
        var right = Math.max(a.left + a.width, b.left + b.width);
        var bottom = Math.max(a.top + a.height, b.top + b.height);
        result.left = left;
        result.top = top;
        result.width = right - left;
        result.height = bottom - top;
    };
    /**
     * Computes the axis aligned bounding box of the measure after it is modified by a given transform
     * @param transform the matrix to transform the measure before computing the AABB
     * @param addX number to add to left
     * @param addY number to add to top
     * @param addWidth number to add to width
     * @param addHeight number to add to height
     * @param result the resulting AABB
     */
    Measure.prototype.addAndTransformToRef = function (transform, addX, addY, addWidth, addHeight, result) {
        var left = this.left + addX;
        var top = this.top + addY;
        var width = this.width + addWidth;
        var height = this.height + addHeight;
        tmpRect[0].copyFromFloats(left, top);
        tmpRect[1].copyFromFloats(left + width, top);
        tmpRect[2].copyFromFloats(left + width, top + height);
        tmpRect[3].copyFromFloats(left, top + height);
        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);
        tmpV2.copyFromFloats(0, 0);
        for (var i = 0; i < 4; i++) {
            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);
            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));
            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));
            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));
            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));
        }
        result.left = tmpV1.x;
        result.top = tmpV1.y;
        result.width = tmpV2.x - tmpV1.x;
        result.height = tmpV2.y - tmpV1.y;
    };
    /**
     * Computes the axis aligned bounding box of the measure after it is modified by a given transform
     * @param transform the matrix to transform the measure before computing the AABB
     * @param result the resulting AABB
     */
    Measure.prototype.transformToRef = function (transform, result) {
        this.addAndTransformToRef(transform, 0, 0, 0, 0, result);
    };
    /**
     * Check equality between this measure and another one
     * @param other defines the other measures
     * @returns true if both measures are equals
     */
    Measure.prototype.isEqualsTo = function (other) {
        if (this.left !== other.left) {
            return false;
        }
        if (this.top !== other.top) {
            return false;
        }
        if (this.width !== other.width) {
            return false;
        }
        if (this.height !== other.height) {
            return false;
        }
        return true;
    };
    /**
     * Creates an empty measure
     * @returns a new measure
     */
    Measure.Empty = function () {
        return new Measure(0, 0, 0, 0);
    };
    return Measure;
}());



/***/ }),

/***/ "../../../dev/gui/src/2D/multiLinePoint.ts":
/*!*************************************************!*\
  !*** ../../../dev/gui/src/2D/multiLinePoint.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiLinePoint: () => (/* binding */ MultiLinePoint)
/* harmony export */ });
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.constants */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");



/**
 * Class used to store a point for a MultiLine object.
 * The point can be pure 2D coordinates, a mesh or a control
 */
var MultiLinePoint = /** @class */ (function () {
    /**
     * Creates a new MultiLinePoint
     * @param multiLine defines the source MultiLine object
     */
    function MultiLinePoint(multiLine) {
        this._multiLine = multiLine;
        this._x = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        this._y = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(0);
        this._point = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
    }
    Object.defineProperty(MultiLinePoint.prototype, "x", {
        /** Gets or sets x coordinate */
        get: function () {
            return this._x.toString(this._multiLine._host);
        },
        set: function (value) {
            if (this._x.toString(this._multiLine._host) === value) {
                return;
            }
            if (this._x.fromString(value)) {
                this._multiLine._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiLinePoint.prototype, "y", {
        /** Gets or sets y coordinate */
        get: function () {
            return this._y.toString(this._multiLine._host);
        },
        set: function (value) {
            if (this._y.toString(this._multiLine._host) === value) {
                return;
            }
            if (this._y.fromString(value)) {
                this._multiLine._markAsDirty();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiLinePoint.prototype, "control", {
        /** Gets or sets the control associated with this point */
        get: function () {
            return this._control;
        },
        set: function (value) {
            if (this._control === value) {
                return;
            }
            if (this._control && this._controlObserver) {
                this._control.onDirtyObservable.remove(this._controlObserver);
                this._controlObserver = null;
            }
            this._control = value;
            if (this._control) {
                this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);
            }
            this._multiLine._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiLinePoint.prototype, "mesh", {
        /** Gets or sets the mesh associated with this point */
        get: function () {
            return this._mesh;
        },
        set: function (value) {
            if (this._mesh === value) {
                return;
            }
            if (this._mesh && this._meshObserver) {
                this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);
            }
            this._mesh = value;
            if (this._mesh) {
                this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);
            }
            this._multiLine._markAsDirty();
        },
        enumerable: false,
        configurable: true
    });
    /** Resets links */
    MultiLinePoint.prototype.resetLinks = function () {
        this.control = null;
        this.mesh = null;
    };
    /**
     * Gets a translation vector with Z component
     * @returns the translation vector
     */
    MultiLinePoint.prototype.translate = function () {
        this._point = this._translatePoint();
        return this._point;
    };
    MultiLinePoint.prototype._translatePoint = function () {
        if (this._mesh != null) {
            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());
        }
        else if (this._control != null) {
            return new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(this._control.centerX, this._control.centerY, 1 - babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Epsilon);
        }
        else {
            var host = this._multiLine._host;
            var xValue = this._x.getValueInPixel(host, Number(host._canvas.width));
            var yValue = this._y.getValueInPixel(host, Number(host._canvas.height));
            return new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(xValue, yValue, 1 - babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Epsilon);
        }
    };
    /** Release associated resources */
    MultiLinePoint.prototype.dispose = function () {
        this.resetLinks();
    };
    return MultiLinePoint;
}());



/***/ }),

/***/ "../../../dev/gui/src/2D/style.ts":
/*!****************************************!*\
  !*** ../../../dev/gui/src/2D/style.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Style: () => (/* binding */ Style)
/* harmony export */ });
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/observable */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./valueAndUnit */ "../../../dev/gui/src/2D/valueAndUnit.ts");


/**
 * Define a style used by control to automatically setup properties based on a template.
 * Only support font related properties so far
 */
var Style = /** @class */ (function () {
    /**
     * Creates a new style object
     * @param host defines the AdvancedDynamicTexture which hosts this style
     */
    function Style(host) {
        this._fontFamily = "Arial";
        this._fontStyle = "";
        this._fontWeight = "";
        /** @internal */
        this._fontSize = new _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit(18, _valueAndUnit__WEBPACK_IMPORTED_MODULE_1__.ValueAndUnit.UNITMODE_PIXEL, false);
        /**
         * Observable raised when the style values are changed
         */
        this.onChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        this._host = host;
    }
    Object.defineProperty(Style.prototype, "fontSize", {
        /**
         * Gets or sets the font size
         */
        get: function () {
            return this._fontSize.toString(this._host);
        },
        set: function (value) {
            if (this._fontSize.toString(this._host) === value) {
                return;
            }
            if (this._fontSize.fromString(value)) {
                this.onChangedObservable.notifyObservers(this);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "fontFamily", {
        /**
         * Gets or sets the font family
         */
        get: function () {
            return this._fontFamily;
        },
        set: function (value) {
            if (this._fontFamily === value) {
                return;
            }
            this._fontFamily = value;
            this.onChangedObservable.notifyObservers(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "fontStyle", {
        /**
         * Gets or sets the font style
         */
        get: function () {
            return this._fontStyle;
        },
        set: function (value) {
            if (this._fontStyle === value) {
                return;
            }
            this._fontStyle = value;
            this.onChangedObservable.notifyObservers(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "fontWeight", {
        /** Gets or sets font weight */
        get: function () {
            return this._fontWeight;
        },
        set: function (value) {
            if (this._fontWeight === value) {
                return;
            }
            this._fontWeight = value;
            this.onChangedObservable.notifyObservers(this);
        },
        enumerable: false,
        configurable: true
    });
    /** Dispose all associated resources */
    Style.prototype.dispose = function () {
        this.onChangedObservable.clear();
    };
    return Style;
}());



/***/ }),

/***/ "../../../dev/gui/src/2D/valueAndUnit.ts":
/*!***********************************************!*\
  !*** ../../../dev/gui/src/2D/valueAndUnit.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ValueAndUnit: () => (/* binding */ ValueAndUnit)
/* harmony export */ });
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/observable */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Class used to specific a value and its associated unit
 */
var ValueAndUnit = /** @class */ (function () {
    /**
     * Creates a new ValueAndUnit
     * @param value defines the value to store
     * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL
     * @param negativeValueAllowed defines a boolean indicating if the value can be negative
     */
    function ValueAndUnit(value, 
    /** defines the unit to store */
    unit, 
    /** defines a boolean indicating if the value can be negative */
    negativeValueAllowed) {
        if (unit === void 0) { unit = ValueAndUnit.UNITMODE_PIXEL; }
        if (negativeValueAllowed === void 0) { negativeValueAllowed = true; }
        this.negativeValueAllowed = negativeValueAllowed;
        this._value = 1;
        this._unit = ValueAndUnit.UNITMODE_PIXEL;
        /**
         * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property
         * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling
         */
        this.ignoreAdaptiveScaling = false;
        /**
         * Observable event triggered each time the value or unit changes
         */
        this.onChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        this._value = value;
        this._unit = unit;
        this._originalUnit = unit;
    }
    Object.defineProperty(ValueAndUnit.prototype, "isPercentage", {
        /** Gets a boolean indicating if the value is a percentage */
        get: function () {
            return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueAndUnit.prototype, "isPixel", {
        /** Gets a boolean indicating if the value is store as pixel */
        get: function () {
            return this._unit === ValueAndUnit.UNITMODE_PIXEL;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueAndUnit.prototype, "internalValue", {
        /**
         * Gets value (without units)
         * @deprecated use value property instead
         */
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueAndUnit.prototype, "value", {
        /** Gets value (without units) */
        get: function () {
            return this._value;
        },
        /** Sets value (without units) */
        set: function (value) {
            if (value !== this._value) {
                this._value = value;
                this.onChangedObservable.notifyObservers();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueAndUnit.prototype, "unit", {
        /** Gets units (without value) */
        get: function () {
            return this._unit;
        },
        /** Sets units (without value) */
        set: function (value) {
            if (value !== this._unit) {
                this._unit = value;
                this.onChangedObservable.notifyObservers();
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets value as pixel
     * @param host defines the root host
     * @param refValue defines the reference value for percentages
     * @returns the value as pixel
     */
    ValueAndUnit.prototype.getValueInPixel = function (host, refValue) {
        if (this.isPixel) {
            return this.getValue(host);
        }
        return this.getValue(host) * refValue;
    };
    /**
     * Update the current value and unit.
     * @param value defines the value to store
     * @param unit defines the unit to store
     * @returns the current ValueAndUnit
     */
    ValueAndUnit.prototype.updateInPlace = function (value, unit) {
        if (unit === void 0) { unit = ValueAndUnit.UNITMODE_PIXEL; }
        if (this.value !== value || this.unit !== unit) {
            // set member variables to notify only once
            this._value = value;
            this._unit = unit;
            this.onChangedObservable.notifyObservers();
        }
        return this;
    };
    /**
     * Gets the value accordingly to its unit
     * @param host  defines the root host
     * @returns the value
     */
    ValueAndUnit.prototype.getValue = function (host) {
        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {
            var width = 0;
            var height = 0;
            if (host.idealWidth) {
                width = Math.ceil((this._value * host.getSize().width) / host.idealWidth);
            }
            if (host.idealHeight) {
                height = Math.ceil((this._value * host.getSize().height) / host.idealHeight);
            }
            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {
                return window.innerWidth < window.innerHeight ? width : height;
            }
            if (host.idealWidth) {
                // horizontal
                return width;
            }
            if (host.idealHeight) {
                // vertical
                return height;
            }
        }
        return this._value;
    };
    /**
     * Gets a string representation of the value
     * @param host defines the root host
     * @param decimals defines an optional number of decimals to display
     * @returns a string
     */
    ValueAndUnit.prototype.toString = function (host, decimals) {
        switch (this._unit) {
            case ValueAndUnit.UNITMODE_PERCENTAGE: {
                var percentage = this.getValue(host) * 100;
                return (decimals ? percentage.toFixed(decimals) : percentage) + "%";
            }
            case ValueAndUnit.UNITMODE_PIXEL: {
                var pixels = this.getValue(host);
                return (decimals ? pixels.toFixed(decimals) : pixels) + "px";
            }
        }
        return this._unit.toString();
    };
    /**
     * Store a value parsed from a string
     * @param source defines the source string
     * @returns true if the value was successfully parsed and updated
     */
    ValueAndUnit.prototype.fromString = function (source) {
        var match = ValueAndUnit._Regex.exec(source.toString());
        if (!match || match.length === 0) {
            return false;
        }
        var sourceValue = parseFloat(match[1]);
        var sourceUnit = this._originalUnit;
        if (!this.negativeValueAllowed) {
            if (sourceValue < 0) {
                sourceValue = 0;
            }
        }
        if (match.length === 4) {
            switch (match[3]) {
                case "px":
                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;
                    break;
                case "%":
                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;
                    sourceValue /= 100.0;
                    break;
            }
        }
        if (sourceValue === this._value && sourceUnit === this._unit) {
            return false;
        }
        this._value = sourceValue;
        this._unit = sourceUnit;
        this.onChangedObservable.notifyObservers();
        return true;
    };
    Object.defineProperty(ValueAndUnit, "UNITMODE_PERCENTAGE", {
        /** UNITMODE_PERCENTAGE */
        get: function () {
            return ValueAndUnit._UNITMODE_PERCENTAGE;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueAndUnit, "UNITMODE_PIXEL", {
        /** UNITMODE_PIXEL */
        get: function () {
            return ValueAndUnit._UNITMODE_PIXEL;
        },
        enumerable: false,
        configurable: true
    });
    // Static
    ValueAndUnit._Regex = /(^-?\d*(\.\d+)?)(%|px)?/;
    ValueAndUnit._UNITMODE_PERCENTAGE = 0;
    ValueAndUnit._UNITMODE_PIXEL = 1;
    return ValueAndUnit;
}());


/***/ }),

/***/ "../../../dev/gui/src/2D/xmlLoader.ts":
/*!********************************************!*\
  !*** ../../../dev/gui/src/2D/xmlLoader.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XmlLoader: () => (/* binding */ XmlLoader)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/typeStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_0__);


var XmlLoaderError = "XmlLoader Exception : XML file is malformed or corrupted.";
/**
 * Class used to load GUI via XML.
 */
var XmlLoader = /** @class */ (function () {
    /**
     * Create a new xml loader
     * @param parentClass Sets the class context. Used when the loader is instanced inside a class and not in a global context
     */
    function XmlLoader(parentClass) {
        if (parentClass === void 0) { parentClass = null; }
        this._nodes = {};
        this._nodeTypes = {
            element: 1,
            attribute: 2,
            text: 3,
        };
        this._isLoaded = false;
        this._objectAttributes = {
            textHorizontalAlignment: 1,
            textVerticalAlignment: 2,
            horizontalAlignment: 3,
            verticalAlignment: 4,
            stretch: 5,
        };
        if (parentClass) {
            this._parentClass = parentClass;
        }
    }
    XmlLoader.prototype._getChainElement = function (attributeValue) {
        var element = window;
        if (this._parentClass) {
            element = this._parentClass;
        }
        var value = attributeValue;
        value = value.split(".");
        for (var i = 0; i < value.length; i++) {
            element = element[value[i]];
        }
        return element;
    };
    XmlLoader.prototype._getClassAttribute = function (attributeName) {
        var attribute = attributeName.split(".");
        var className = (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_0__.GetClass)("BABYLON.GUI." + attribute[0]);
        return className[attribute[1]];
    };
    XmlLoader.prototype._createGuiElement = function (node, parent, linkParent) {
        if (linkParent === void 0) { linkParent = true; }
        try {
            var className = (0,babylonjs_Misc_typeStore__WEBPACK_IMPORTED_MODULE_0__.GetClass)("BABYLON.GUI." + node.nodeName);
            var guiNode = new className();
            if (parent && linkParent) {
                parent.addControl(guiNode);
            }
            for (var i = 0; i < node.attributes.length; i++) {
                if (node.attributes[i].name.toLowerCase().includes("datasource")) {
                    continue;
                }
                if (node.attributes[i].name.toLowerCase().includes("observable")) {
                    var element = this._getChainElement(node.attributes[i].value);
                    guiNode[node.attributes[i].name].add(element);
                    continue;
                }
                else if (node.attributes[i].name == "linkWithMesh") {
                    if (this._parentClass) {
                        guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);
                    }
                    else {
                        guiNode.linkWithMesh(window[node.attributes[i].value]);
                    }
                }
                else if (node.attributes[i].value.match(/{{.*}}/)) {
                    var matches = node.attributes[i].value.match(/{{(.*)}}/);
                    var element = this._getChainElement(matches[1]);
                    if (!(node.attributes[i].value.startsWith("{{") && node.attributes[i].value.endsWith("}}"))) {
                        element = node.attributes[i].value.replace(/{{.*}}/, "".concat(element));
                    }
                    guiNode[node.attributes[i].name] = element;
                }
                else if (!this._objectAttributes[node.attributes[i].name]) {
                    if (node.attributes[i].value == "true" || node.attributes[i].value == "false") {
                        guiNode[node.attributes[i].name] = node.attributes[i].value == "true";
                    }
                    else {
                        guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;
                    }
                }
                else {
                    guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);
                }
            }
            if (!node.attributes.getNamedItem("id")) {
                this._nodes[node.nodeName + Object.keys(this._nodes).length + "_gen"] = guiNode;
                return guiNode;
            }
            var id = node.attributes.getNamedItem("id").value;
            if (id.startsWith("{{") && id.endsWith("}}")) {
                id = this._getChainElement(id.substring(2, id.length - 2));
            }
            if (!this._nodes[id]) {
                this._nodes[id] = guiNode;
            }
            else {
                // eslint-disable-next-line no-throw-literal
                throw "XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute";
            }
            return guiNode;
        }
        catch (exception) {
            // eslint-disable-next-line no-throw-literal
            throw "XmlLoader Exception : Error parsing Control " + node.nodeName + "," + exception + ".";
        }
    };
    XmlLoader.prototype._parseGrid = function (node, guiNode, parent) {
        var width;
        var height;
        var columns;
        var rows = node.children;
        var cells;
        var isPixel = false;
        var cellNode;
        var rowNumber = -1;
        var columnNumber = -1;
        var totalColumnsNumber = 0;
        for (var i = 0; i < rows.length; i++) {
            if (rows[i].nodeType != this._nodeTypes.element) {
                continue;
            }
            if (rows[i].nodeName != "Row") {
                // eslint-disable-next-line no-throw-literal
                throw "XmlLoader Exception : Expecting Row node, received " + rows[i].nodeName;
            }
            rowNumber += 1;
            columns = rows[i].children;
            if (!rows[i].attributes.getNamedItem("height")) {
                // eslint-disable-next-line no-throw-literal
                throw "XmlLoader Exception : Height must be defined for grid rows";
            }
            height = Number(rows[i].attributes.getNamedItem("height").nodeValue);
            isPixel = rows[i].attributes.getNamedItem("isPixel") ? JSON.parse(rows[i].attributes.getNamedItem("isPixel").nodeValue) : false;
            guiNode.addRowDefinition(height, isPixel);
            for (var j = 0; j < columns.length; j++) {
                if (columns[j].nodeType != this._nodeTypes.element) {
                    continue;
                }
                if (columns[j].nodeName != "Column") {
                    // eslint-disable-next-line no-throw-literal
                    throw "XmlLoader Exception : Expecting Column node, received " + columns[j].nodeName;
                }
                columnNumber += 1;
                if (rowNumber > 0 && columnNumber > totalColumnsNumber) {
                    // eslint-disable-next-line no-throw-literal
                    throw "XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.";
                }
                if (rowNumber == 0) {
                    if (!columns[j].attributes.getNamedItem("width")) {
                        // eslint-disable-next-line no-throw-literal
                        throw "XmlLoader Exception : Width must be defined for all the grid columns in the first row";
                    }
                    width = Number(columns[j].attributes.getNamedItem("width").nodeValue);
                    isPixel = columns[j].attributes.getNamedItem("isPixel") ? JSON.parse(columns[j].attributes.getNamedItem("isPixel").nodeValue) : false;
                    guiNode.addColumnDefinition(width, isPixel);
                }
                cells = columns[j].children;
                for (var k = 0; k < cells.length; k++) {
                    if (cells[k].nodeType != this._nodeTypes.element) {
                        continue;
                    }
                    cellNode = this._createGuiElement(cells[k], guiNode, false);
                    guiNode.addControl(cellNode, rowNumber, columnNumber);
                    if (cells[k].firstChild) {
                        this._parseXml(cells[k].firstChild, cellNode);
                    }
                }
            }
            if (rowNumber == 0) {
                totalColumnsNumber = columnNumber;
            }
            columnNumber = -1;
        }
        if (node.nextSibling) {
            this._parseXml(node.nextSibling, parent);
        }
    };
    XmlLoader.prototype._parseElement = function (node, guiNode, parent) {
        if (node.firstChild) {
            this._parseXml(node.firstChild, guiNode);
        }
        if (node.nextSibling) {
            this._parseXml(node.nextSibling, parent);
        }
    };
    XmlLoader.prototype._prepareSourceElement = function (node, guiNode, variable, source, iterator) {
        if (this._parentClass) {
            this._parentClass[variable] = source[iterator];
        }
        else {
            window[variable] = source[iterator];
        }
        if (node.firstChild) {
            this._parseXml(node.firstChild, guiNode, true);
        }
    };
    XmlLoader.prototype._parseElementsFromSource = function (node, guiNode, parent) {
        var dataSource = node.attributes.getNamedItem("dataSource").value;
        if (!dataSource.includes(" in ")) {
            // eslint-disable-next-line no-throw-literal
            throw "XmlLoader Exception : Malformed XML, Data Source must include an in";
        }
        else {
            var isArray = true;
            var splittedSource = dataSource.split(" in ");
            if (splittedSource.length < 2) {
                // eslint-disable-next-line no-throw-literal
                throw "XmlLoader Exception : Malformed XML, Data Source must have an iterator and a source";
            }
            var source = splittedSource[1];
            if (source.startsWith("{") && source.endsWith("}")) {
                isArray = false;
            }
            if (!isArray || (source.startsWith("[") && source.endsWith("]"))) {
                source = source.substring(1, source.length - 1);
            }
            if (this._parentClass) {
                source = this._parentClass[source];
            }
            else {
                source = window[source];
            }
            if (isArray) {
                for (var i = 0; i < source.length; i++) {
                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);
                }
            }
            else {
                for (var i in source) {
                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);
                }
            }
            if (node.nextSibling) {
                this._parseXml(node.nextSibling, parent);
            }
        }
    };
    XmlLoader.prototype._parseXml = function (node, parent, generated) {
        if (generated === void 0) { generated = false; }
        if (node.nodeType != this._nodeTypes.element) {
            if (node.nextSibling) {
                this._parseXml(node.nextSibling, parent, generated);
            }
            return;
        }
        if (generated) {
            node.setAttribute("id", parent.id + (parent._children.length + 1));
        }
        var guiNode = this._createGuiElement(node, parent);
        if (!this._rootNode) {
            this._rootNode = guiNode;
        }
        if (node.nodeName == "Grid") {
            this._parseGrid(node, guiNode, parent);
        }
        else if (!node.attributes.getNamedItem("dataSource")) {
            this._parseElement(node, guiNode, parent);
        }
        else {
            this._parseElementsFromSource(node, guiNode, parent);
        }
    };
    /**
     * Gets if the loading has finished.
     * @returns whether the loading has finished or not
     */
    XmlLoader.prototype.isLoaded = function () {
        return this._isLoaded;
    };
    /**
     * Gets a loaded node / control by id.
     * @param id the Controls id set in the xml
     * @returns element of type Control
     */
    XmlLoader.prototype.getNodeById = function (id) {
        return this._nodes[id];
    };
    /**
     * Gets all loaded nodes / controls
     * @returns Array of controls
     */
    XmlLoader.prototype.getNodes = function () {
        return this._nodes;
    };
    /**
     * Disposes the loaded layout
     */
    XmlLoader.prototype.dispose = function () {
        if (this._rootNode) {
            this._rootNode.dispose();
            this._rootNode = null;
            this._nodes = {};
        }
    };
    /**
     * Initiates the xml layout loading
     * @param xmlFile defines the xml layout to load
     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.
     * @param onSuccess defines the callback called on layout load successfully.
     * @param onError defines the callback called on layout load failure.
     */
    XmlLoader.prototype.loadLayout = function (xmlFile, rootNode, onSuccess, onError) {
        var _this = this;
        if (onSuccess === void 0) { onSuccess = null; }
        if (onError === void 0) { onError = null; }
        var xhttp = new XMLHttpRequest();
        xhttp.onload = function () {
            if (xhttp.readyState === 4 && xhttp.status === 200) {
                if (!xhttp.responseXML) {
                    if (onError) {
                        onError(XmlLoaderError);
                        return;
                    }
                    else {
                        throw XmlLoaderError;
                    }
                }
                var xmlDoc = xhttp.responseXML.documentElement;
                _this._parseXml(xmlDoc.firstChild, rootNode);
                _this._isLoaded = true;
                if (onSuccess) {
                    onSuccess();
                }
            }
        };
        xhttp.onerror = function () {
            if (onError) {
                onError("an error occurred during loading the layout");
            }
        };
        xhttp.open("GET", xmlFile, true);
        xhttp.send();
    };
    /**
     * Initiates the xml layout loading asynchronously
     * @param xmlFile defines the xml layout to load
     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.
     * @returns Promise
     */
    XmlLoader.prototype.loadLayoutAsync = function (xmlFile, rootNode) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function () {
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.loadLayout(xmlFile, rootNode, resolve, reject);
                    })];
            });
        });
    };
    return XmlLoader;
}());



/***/ }),

/***/ "../../../dev/gui/src/3D/behaviors/defaultBehavior.ts":
/*!************************************************************!*\
  !*** ../../../dev/gui/src/3D/behaviors/defaultBehavior.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultBehavior: () => (/* binding */ DefaultBehavior)
/* harmony export */ });
/* harmony import */ var babylonjs_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Behaviors/Meshes/surfaceMagnetismBehavior */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__);



/**
 * Default behavior for 3D UI elements.
 * Handles a FollowBehavior, SixDofBehavior and SurfaceMagnetismBehavior
 * @since 5.0.0
 */
var DefaultBehavior = /** @class */ (function () {
    /**
     * Instantiates the default behavior
     */
    function DefaultBehavior() {
        /**
         * Enables the follow behavior
         */
        this.followBehaviorEnabled = false;
        /**
         * Enables the six DoF drag behavior
         */
        this.sixDofDragBehaviorEnabled = true;
        /**
         * Enables the surface magnetism behavior
         */
        this.surfaceMagnetismBehaviorEnabled = true;
        this._followBehavior = new babylonjs_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__.FollowBehavior();
        this._sixDofDragBehavior = new babylonjs_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__.SixDofDragBehavior();
        this._surfaceMagnetismBehavior = new babylonjs_Behaviors_Meshes_followBehavior__WEBPACK_IMPORTED_MODULE_0__.SurfaceMagnetismBehavior();
    }
    Object.defineProperty(DefaultBehavior.prototype, "name", {
        /**
         *  The name of the behavior
         */
        get: function () {
            return "Default";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DefaultBehavior.prototype, "followBehavior", {
        /**
         *  The follow behavior
         */
        get: function () {
            return this._followBehavior;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DefaultBehavior.prototype, "sixDofDragBehavior", {
        /**
         *  The six DoF drag behavior
         */
        get: function () {
            return this._sixDofDragBehavior;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DefaultBehavior.prototype, "surfaceMagnetismBehavior", {
        /**
         * The surface magnetism behavior
         */
        get: function () {
            return this._surfaceMagnetismBehavior;
        },
        enumerable: false,
        configurable: true
    });
    /**
     *  Initializes the behavior
     */
    DefaultBehavior.prototype.init = function () { };
    /**
     * Attaches the default behavior
     * @param ownerMesh The top level mesh
     * @param draggablesMeshes Descendant meshes that can be used for dragging the owner mesh
     * @param sceneUnderstandingMeshes Meshes from the scene understanding that will be used for surface magnetism
     */
    DefaultBehavior.prototype.attach = function (ownerMesh, draggablesMeshes, sceneUnderstandingMeshes) {
        this._scene = ownerMesh.getScene();
        this.attachedNode = ownerMesh;
        this._addObservables();
        // Since our observables are bound before the child behaviors', ours are called first
        this._followBehavior.attach(ownerMesh);
        this._sixDofDragBehavior.attach(ownerMesh);
        this._sixDofDragBehavior.draggableMeshes = draggablesMeshes || null;
        this._sixDofDragBehavior.faceCameraOnDragStart = true;
        this._surfaceMagnetismBehavior.attach(ownerMesh, this._scene);
        if (sceneUnderstandingMeshes) {
            this._surfaceMagnetismBehavior.meshes = sceneUnderstandingMeshes;
        }
        // We disable this behavior because we will handle pose changing event manually with sixDofDragBehavior
        this._surfaceMagnetismBehavior.enabled = false;
    };
    /**
     *  Detaches the behavior from the mesh
     */
    DefaultBehavior.prototype.detach = function () {
        this.attachedNode = null;
        this._removeObservables();
        this._followBehavior.detach();
        this._sixDofDragBehavior.detach();
        this._surfaceMagnetismBehavior.detach();
    };
    DefaultBehavior.prototype._addObservables = function () {
        var _this = this;
        this._onBeforeRenderObserver = this._scene.onBeforeRenderObservable.add(function () {
            _this._followBehavior._enabled = !_this._sixDofDragBehavior.isMoving && _this.followBehaviorEnabled;
        });
        this._onDragObserver = this._sixDofDragBehavior.onDragObservable.add(function (event) {
            _this._sixDofDragBehavior.disableMovement = _this._surfaceMagnetismBehavior.findAndUpdateTarget(event.pickInfo);
        });
    };
    DefaultBehavior.prototype._removeObservables = function () {
        this._scene.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);
        this._sixDofDragBehavior.onDragObservable.remove(this._onDragObserver);
    };
    return DefaultBehavior;
}());



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/MRTK3/touchHolographicButton.ts":
/*!************************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/MRTK3/touchHolographicButton.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TouchHolographicButton: () => (/* binding */ TouchHolographicButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../2D/advancedDynamicTexture */ "../../../dev/gui/src/2D/advancedDynamicTexture.ts");
/* harmony import */ var babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Maths/math.vector */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _2D_controls_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../2D/controls/control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _2D_controls_grid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../2D/controls/grid */ "../../../dev/gui/src/2D/controls/grid.ts");
/* harmony import */ var _2D_controls_image__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../2D/controls/image */ "../../../dev/gui/src/2D/controls/image.ts");
/* harmony import */ var _materials_mrdl_mrdlBackglowMaterial__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../materials/mrdl/mrdlBackglowMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlBackglowMaterial.ts");
/* harmony import */ var _materials_mrdl_mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../materials/mrdl/mrdlBackplateMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlBackplateMaterial.ts");
/* harmony import */ var _materials_mrdl_mrdlFrontplateMaterial__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../materials/mrdl/mrdlFrontplateMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlFrontplateMaterial.ts");
/* harmony import */ var _materials_mrdl_mrdlInnerquadMaterial__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../materials/mrdl/mrdlInnerquadMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlInnerquadMaterial.ts");
/* harmony import */ var _2D_controls_rectangle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../2D/controls/rectangle */ "../../../dev/gui/src/2D/controls/rectangle.ts");
/* harmony import */ var _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../2D/controls/stackPanel */ "../../../dev/gui/src/2D/controls/stackPanel.ts");
/* harmony import */ var _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../2D/controls/textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");
/* harmony import */ var _touchButton3D__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../touchButton3D */ "../../../dev/gui/src/3D/controls/touchButton3D.ts");
























/**
 * Class used to create the mrtkv3 button
 */
var TouchHolographicButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__extends)(TouchHolographicButton, _super);
    /**
     * Creates a new button
     * @param name defines the control name
     * @param shareMaterials
     */
    function TouchHolographicButton(name, shareMaterials) {
        if (shareMaterials === void 0) { shareMaterials = true; }
        var _this = _super.call(this, name) || this;
        /**
         * Gets or sets the horizontal scaling for the button.
         */
        _this.width = 1;
        /**
         * Gets or sets the vertical scaling for the button.
         */
        _this.height = 1;
        /**
         * Gets or sets the bevel radius for the button.
         */
        _this.radius = 0.14;
        /**
         * Gets or sets the font size of the button text in pixels.
         * This is only adjustable for a button with width to height ratio greater than 1.
         */
        _this.textSizeInPixels = 18;
        /**
         * Gets or sets the size of the button image in pixels.
         * This is only adjustable for a button with width to height ratio greater than 1.
         */
        _this.imageSizeInPixels = 40;
        /**
         * Gets or sets the color of the button plate.
         */
        _this.plateMaterialColor = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Color3(0.4, 0.4, 0.4);
        // Shared variables for meshes
        /**
         * Gets or sets the depth of the button's front plate.
         * This variable determines the z scaling and z position for some of the button's meshes.
         */
        _this.frontPlateDepth = 0.2;
        /**
         * Gets or sets the depth of the button's back plate.
         * This variable determines the z scaling and z position for some of the button's meshes.
         */
        _this.backPlateDepth = 0.04;
        /**
         * Gets or sets the offset value for button's back glow.
         * This variable determines the x, y scaling of the button's meshes.
         */
        _this.backGlowOffset = 0.1;
        /**
         * Gets or sets the value that determines the z scaling and z position for the innerQuad and BackGlow meshes.
         */
        _this.flatPlaneDepth = 0.001;
        /**
         * Gets or sets the radius for FrontMaterial and innerQuadMaterial.
         */
        _this.innerQuadRadius = _this.radius - 0.04;
        /**
         * Gets or sets the color for innerQuadMaterial.
         */
        _this.innerQuadColor = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Color4(0, 0, 0, 0);
        /**
         * Gets or sets the color for innerQuadMaterial for when it is toggled.
         */
        _this.innerQuadToggledColor = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Color4(0.5197843, 0.6485234, 0.9607843, 0.6);
        /**
         * Gets or sets the color for innerQuadMaterial for when it is hovered.
         */
        _this.innerQuadHoverColor = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Color4(1, 1, 1, 0.05);
        /**
         * Gets or sets the color for innerQuadMaterial for when it is toggled and hovered.
         */
        _this.innerQuadToggledHoverColor = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Color4(0.5197843, 0.6485234, 0.9607843, 1);
        _this._isBackplateVisible = true;
        // Materials
        _this._shareMaterials = true;
        _this._shareMaterials = shareMaterials;
        _this.pointerEnterAnimation = function () {
            if (_this._frontPlate && _this._textPlate && !_this.isToggleButton) {
                _this._performEnterExitAnimation(1);
            }
            if (_this.isToggleButton && _this._innerQuadMaterial) {
                if (_this.isToggled) {
                    _this._innerQuadMaterial.color = _this.innerQuadToggledHoverColor;
                }
                else {
                    _this._innerQuadMaterial.color = _this.innerQuadHoverColor;
                }
            }
        };
        _this.pointerOutAnimation = function () {
            if (_this._frontPlate && _this._textPlate && !_this.isToggleButton) {
                _this._performEnterExitAnimation(-0.8);
            }
            if (_this.isToggleButton && _this._innerQuadMaterial) {
                _this._onToggle(_this.isToggled);
            }
        };
        _this.pointerDownAnimation = function () {
            // Do nothing
        };
        _this.pointerUpAnimation = function () {
            // Do nothing
        };
        _this._pointerClickObserver = _this.onPointerClickObservable.add(function () {
            if (_this._frontPlate && _this._backGlow && !_this.isActiveNearInteraction) {
                _this._performClickAnimation();
            }
            if (_this.isToggleButton && _this._innerQuadMaterial) {
                _this._onToggle(_this.isToggled);
            }
        });
        _this._pointerEnterObserver = _this.onPointerEnterObservable.add(function () {
            _this.pointerEnterAnimation();
        });
        _this._pointerOutObserver = _this.onPointerOutObservable.add(function () {
            _this.pointerOutAnimation();
        });
        _this._toggleObserver = _this.onToggleObservable.add(function (isToggled) {
            if (isToggled) {
                _this._innerQuadMaterial.color = _this.innerQuadToggledColor;
            }
            else {
                _this._innerQuadMaterial.color = _this.innerQuadColor;
            }
        });
        return _this;
    }
    TouchHolographicButton.prototype._disposeTooltip = function () {
        this._tooltipFade = null;
        if (this._tooltipTextBlock) {
            this._tooltipTextBlock.dispose();
        }
        if (this._tooltipTexture) {
            this._tooltipTexture.dispose();
        }
        if (this._tooltipMesh) {
            this._tooltipMesh.dispose();
        }
        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);
        this.onPointerOutObservable.remove(this._tooltipOutObserver);
    };
    Object.defineProperty(TouchHolographicButton.prototype, "renderingGroupId", {
        get: function () {
            return this._backPlate.renderingGroupId;
        },
        /**
         * Rendering ground id of all the mesh in the button
         */
        set: function (id) {
            this._backPlate.renderingGroupId = id;
            this._textPlate.renderingGroupId = id;
            this._frontPlate.renderingGroupId = id;
            this._backGlow.renderingGroupId = id;
            this._innerQuad.renderingGroupId = id;
            if (this._tooltipMesh) {
                this._tooltipMesh.renderingGroupId = id;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "mesh", {
        /**
         * Gets the mesh used to render this control
         */
        get: function () {
            return this._backPlate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "tooltipText", {
        get: function () {
            var _a;
            return ((_a = this._tooltipTextBlock) === null || _a === void 0 ? void 0 : _a.text) || null;
        },
        /**
         * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)
         * Set this property after adding the button to the GUI3DManager
         */
        set: function (text) {
            var _this = this;
            if (!text) {
                this._disposeTooltip();
                return;
            }
            if (!this._tooltipFade) {
                var rightHandedScene = this._backPlate._scene.useRightHandedSystem;
                // Create tooltip with mesh and text
                this._tooltipMesh = (0,babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.CreatePlane)("", { size: 1 }, this._backPlate._scene);
                this._tooltipMesh.position = babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Vector3.Down().scale(0.7).add(babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(rightHandedScene).scale(-0.15));
                this._tooltipMesh.isPickable = false;
                this._tooltipMesh.parent = this._frontPlateCollisionMesh;
                // Create text texture for the tooltip
                this._tooltipTexture = _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);
                var tooltipBackground = new _2D_controls_rectangle__WEBPACK_IMPORTED_MODULE_9__.Rectangle();
                tooltipBackground.height = 0.25;
                tooltipBackground.width = 0.8;
                tooltipBackground.cornerRadius = 25;
                tooltipBackground.color = "#ffffff";
                tooltipBackground.thickness = 20;
                tooltipBackground.background = "#060668";
                this._tooltipTexture.addControl(tooltipBackground);
                this._tooltipTextBlock = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_11__.TextBlock();
                this._tooltipTextBlock.color = "white";
                this._tooltipTextBlock.fontSize = 100;
                this._tooltipTexture.addControl(this._tooltipTextBlock);
                // Add hover action to tooltip
                this._tooltipFade = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.FadeInOutBehavior();
                this._tooltipFade.delay = 500;
                this._tooltipMesh.addBehavior(this._tooltipFade);
                this._tooltipHoverObserver = this.onPointerEnterObservable.add(function () {
                    if (_this._tooltipFade) {
                        _this._tooltipFade.fadeIn(true);
                    }
                });
                this._tooltipOutObserver = this.onPointerOutObservable.add(function () {
                    if (_this._tooltipFade) {
                        _this._tooltipFade.fadeIn(false);
                    }
                });
            }
            if (this._tooltipTextBlock) {
                this._tooltipTextBlock.text = text;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "text", {
        /**
         * Gets or sets text for the button
         */
        get: function () {
            return this._text;
        },
        set: function (value) {
            if (this._text === value) {
                return;
            }
            this._text = value;
            this._rebuildContent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "subtext", {
        /**
         * Gets or sets subtext for a button with larger width
         */
        get: function () {
            return this._subtext;
        },
        set: function (value) {
            if (this._subtext === value) {
                return;
            }
            this._subtext = value;
            this._rebuildContent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "imageUrl", {
        /**
         * Gets or sets the image url for the button
         */
        get: function () {
            return this._imageUrl;
        },
        set: function (value) {
            if (this._imageUrl === value) {
                return;
            }
            this._imageUrl = value;
            this._rebuildContent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "backMaterial", {
        /**
         * Gets the back material used by this button
         */
        get: function () {
            return this._backMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "frontMaterial", {
        /**
         * Gets the front material used by this button
         */
        get: function () {
            return this._frontMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "backGlowMaterial", {
        /**
         * Gets the back glow material used by this button
         */
        get: function () {
            return this._backGlowMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "innerQuadMaterial", {
        /**
         * Gets the inner quad material used by this button
         */
        get: function () {
            return this._innerQuadMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "plateMaterial", {
        /**
         * Gets the plate material used by this button
         */
        get: function () {
            return this._plateMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "shareMaterials", {
        /**
         * Gets a boolean indicating if this button shares its material with other V3 Buttons
         */
        get: function () {
            return this._shareMaterials;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "isBackplateVisible", {
        /**
         * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement
         */
        set: function (isVisible) {
            if (this.mesh && this._backMaterial) {
                if (isVisible && !this._isBackplateVisible) {
                    this._backPlate.visibility = 1;
                }
                else if (!isVisible && this._isBackplateVisible) {
                    this._backPlate.visibility = 0;
                }
            }
            this._isBackplateVisible = isVisible;
        },
        enumerable: false,
        configurable: true
    });
    TouchHolographicButton.prototype._getTypeName = function () {
        return "TouchHolographicButton";
    };
    TouchHolographicButton.prototype._rebuildContent = function () {
        var content;
        if (this._getAspectRatio() <= 1) {
            // align text and image vertically
            content = this._alignContentVertically();
        }
        else {
            // align text and image horizontally
            content = this._alignContentHorizontally();
        }
        this.content = content;
    };
    TouchHolographicButton.prototype._getAspectRatio = function () {
        return this.width / this.height;
    };
    TouchHolographicButton.prototype._alignContentVertically = function () {
        var panel = new _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_10__.StackPanel();
        panel.isVertical = true;
        if ((0,babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.IsDocumentAvailable)() && !!document.createElement) {
            if (this._imageUrl) {
                var image = new _2D_controls_image__WEBPACK_IMPORTED_MODULE_4__.Image();
                image.source = this._imageUrl;
                image.heightInPixels = 180;
                image.widthInPixels = 100;
                image.paddingTopInPixels = 40;
                image.paddingBottomInPixels = 40;
                panel.addControl(image);
            }
        }
        if (this._text) {
            var text = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_11__.TextBlock();
            text.text = this._text;
            text.color = "white";
            text.heightInPixels = 30;
            text.fontSize = 24;
            panel.addControl(text);
        }
        return panel;
    };
    TouchHolographicButton.prototype._alignContentHorizontally = function () {
        var totalPanelWidthInPixels = 240;
        var padding = 15;
        var contentContainer = new _2D_controls_rectangle__WEBPACK_IMPORTED_MODULE_9__.Rectangle();
        contentContainer.widthInPixels = totalPanelWidthInPixels;
        contentContainer.heightInPixels = totalPanelWidthInPixels;
        contentContainer.color = "transparent";
        contentContainer.setPaddingInPixels(padding, padding, padding, padding);
        totalPanelWidthInPixels -= padding * 2;
        var panel = new _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_10__.StackPanel();
        panel.isVertical = false;
        panel.scaleY = this._getAspectRatio();
        if ((0,babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.IsDocumentAvailable)() && !!document.createElement) {
            if (this._imageUrl) {
                var imageContainer = new _2D_controls_rectangle__WEBPACK_IMPORTED_MODULE_9__.Rectangle("".concat(this.name, "_image"));
                imageContainer.widthInPixels = this.imageSizeInPixels;
                imageContainer.heightInPixels = this.imageSizeInPixels;
                imageContainer.color = "transparent";
                totalPanelWidthInPixels -= this.imageSizeInPixels;
                var image = new _2D_controls_image__WEBPACK_IMPORTED_MODULE_4__.Image();
                image.source = this._imageUrl;
                imageContainer.addControl(image);
                panel.addControl(imageContainer);
            }
        }
        if (this._text) {
            var text = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_11__.TextBlock("".concat(this.name, "_text"));
            text.text = this._text;
            text.color = "white";
            text.fontSize = this.textSizeInPixels;
            text.widthInPixels = totalPanelWidthInPixels;
            if (this._imageUrl) {
                text.textHorizontalAlignment = _2D_controls_control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                text.paddingLeftInPixels = padding;
            }
            if (this._subtext) {
                var textContainer = new _2D_controls_grid__WEBPACK_IMPORTED_MODULE_3__.Grid();
                textContainer.addColumnDefinition(1);
                textContainer.addRowDefinition(0.5);
                textContainer.addRowDefinition(0.5);
                textContainer.widthInPixels = totalPanelWidthInPixels;
                textContainer.heightInPixels = 45;
                var subtext = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_11__.TextBlock("".concat(this.name, "_subtext"));
                subtext.text = this._subtext;
                subtext.color = "#EEEEEEAB";
                subtext.fontSize = this.textSizeInPixels * 0.75;
                subtext.fontWeight = "600";
                if (this._imageUrl) {
                    subtext.textHorizontalAlignment = _2D_controls_control__WEBPACK_IMPORTED_MODULE_2__.Control.HORIZONTAL_ALIGNMENT_LEFT;
                    subtext.paddingLeftInPixels = padding;
                }
                textContainer.addControl(text, 0);
                textContainer.addControl(subtext, 1);
                panel.addControl(textContainer);
            }
            else {
                panel.addControl(text);
            }
        }
        contentContainer.addControl(panel);
        return contentContainer;
    };
    // Mesh association
    TouchHolographicButton.prototype._createNode = function (scene) {
        var _a;
        this.name = (_a = this.name) !== null && _a !== void 0 ? _a : "TouchHolographicButton";
        var backPlateMesh = this._createBackPlate(scene);
        var collisionMesh = this._createFrontPlate(scene);
        var innerQuadMesh = this._createInnerQuad(scene);
        var backGlowMesh = this._createBackGlow(scene);
        this._frontPlateCollisionMesh = collisionMesh;
        this._textPlate = _super.prototype._createNode.call(this, scene);
        this._textPlate.name = "".concat(this.name, "_textPlate");
        this._textPlate.isPickable = false;
        this._textPlate.scaling.x = this.width;
        this._textPlate.parent = collisionMesh;
        this._backPlate = backPlateMesh;
        this._backPlate.position = babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(scene.useRightHandedSystem).scale(this.backPlateDepth / 2);
        this._backPlate.isPickable = false;
        this._backPlate.addChild(collisionMesh);
        this._backPlate.addChild(innerQuadMesh);
        if (backGlowMesh) {
            this._backPlate.addChild(backGlowMesh);
        }
        var tn = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.TransformNode("".concat(this.name, "_root"), scene);
        this._backPlate.setParent(tn);
        this.collisionMesh = collisionMesh;
        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way
        return tn;
    };
    TouchHolographicButton.prototype._createBackPlate = function (scene) {
        var _this = this;
        var backPlateMesh = (0,babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("".concat(this.name, "_backPlate"), {}, scene);
        backPlateMesh.isPickable = false;
        backPlateMesh.visibility = 0;
        backPlateMesh.scaling.z = 0.2;
        babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKPLATE_MODEL_FILENAME, scene).then(function (result) {
            var backPlateModel = result.meshes[1];
            backPlateModel.visibility = 0;
            if (_this._isBackplateVisible) {
                backPlateModel.visibility = 1;
                backPlateModel.name = "".concat(_this.name, "_backPlate");
                backPlateModel.isPickable = false;
                backPlateModel.scaling.x = _this.width;
                backPlateModel.scaling.y = _this.height;
                backPlateModel.parent = backPlateMesh;
            }
            if (_this._backMaterial) {
                backPlateModel.material = _this._backMaterial;
            }
            _this._backPlate = backPlateModel;
        });
        return backPlateMesh;
    };
    TouchHolographicButton.prototype._createFrontPlate = function (scene) {
        var _this = this;
        var collisionMesh = (0,babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("".concat(this.name, "_frontPlate"), {
            width: this.width,
            height: this.height,
            depth: this.frontPlateDepth,
        }, scene);
        collisionMesh.isPickable = true;
        collisionMesh.isNearPickable = true;
        collisionMesh.visibility = 0;
        collisionMesh.position = babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(scene.useRightHandedSystem).scale((this.backPlateDepth - this.frontPlateDepth) / 2);
        babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.FRONTPLATE_MODEL_FILENAME, scene).then(function (result) {
            var collisionPlate = (0,babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("".concat(_this.name, "_collisionPlate"), {
                width: _this.width,
                height: _this.height,
            }, scene);
            collisionPlate.isPickable = false;
            collisionPlate.scaling.z = _this.frontPlateDepth;
            collisionPlate.visibility = 0;
            collisionPlate.parent = collisionMesh;
            _this._collisionPlate = collisionPlate;
            var frontPlateModel = result.meshes[1];
            frontPlateModel.name = "".concat(_this.name, "_frontPlate");
            frontPlateModel.isPickable = false;
            frontPlateModel.scaling.x = _this.width - _this.backGlowOffset;
            frontPlateModel.scaling.y = _this.height - _this.backGlowOffset;
            frontPlateModel.position = babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(scene.useRightHandedSystem).scale(-0.5);
            frontPlateModel.parent = collisionPlate;
            if (_this.isToggleButton) {
                frontPlateModel.visibility = 0;
            }
            if (_this._frontMaterial) {
                frontPlateModel.material = _this._frontMaterial;
            }
            _this._textPlate.scaling.x = 1;
            _this._textPlate.parent = frontPlateModel;
            _this._frontPlate = frontPlateModel;
        });
        return collisionMesh;
    };
    TouchHolographicButton.prototype._createInnerQuad = function (scene) {
        var _this = this;
        var innerQuadMesh = (0,babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("".concat(this.name, "_innerQuad"), {}, scene);
        innerQuadMesh.isPickable = false;
        innerQuadMesh.visibility = 0;
        innerQuadMesh.scaling.z = this.flatPlaneDepth;
        innerQuadMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth;
        babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.INNERQUAD_MODEL_FILENAME, scene).then(function (result) {
            var innerQuadModel = result.meshes[1];
            innerQuadModel.name = "".concat(_this.name, "_innerQuad");
            innerQuadModel.isPickable = false;
            innerQuadModel.scaling.x = _this.width - _this.backGlowOffset;
            innerQuadModel.scaling.y = _this.height - _this.backGlowOffset;
            innerQuadModel.parent = innerQuadMesh;
            if (_this._innerQuadMaterial) {
                innerQuadModel.material = _this._innerQuadMaterial;
            }
            _this._innerQuad = innerQuadModel;
        });
        return innerQuadMesh;
    };
    TouchHolographicButton.prototype._createBackGlow = function (scene) {
        var _this = this;
        if (this.isToggleButton) {
            return;
        }
        var backGlowMesh = (0,babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("".concat(this.name, "_backGlow"), {}, scene);
        backGlowMesh.isPickable = false;
        backGlowMesh.visibility = 0;
        backGlowMesh.scaling.z = this.flatPlaneDepth;
        backGlowMesh.position.z += this.backPlateDepth / 2 - this.flatPlaneDepth * 2;
        babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MRTK_ASSET_BASE_URL, TouchHolographicButton.BACKGLOW_MODEL_FILENAME, scene).then(function (result) {
            var backGlowModel = result.meshes[1];
            backGlowModel.name = "".concat(_this.name, "_backGlow");
            backGlowModel.isPickable = false;
            backGlowModel.scaling.x = _this.width - _this.backGlowOffset;
            backGlowModel.scaling.y = _this.height - _this.backGlowOffset;
            backGlowModel.parent = backGlowMesh;
            if (_this._backGlowMaterial) {
                backGlowModel.material = _this._backGlowMaterial;
            }
            _this._backGlow = backGlowModel;
        });
        return backGlowMesh;
    };
    TouchHolographicButton.prototype._applyFacade = function (facadeTexture) {
        this._plateMaterial.emissiveTexture = facadeTexture;
        this._plateMaterial.opacityTexture = facadeTexture;
        this._plateMaterial.diffuseColor = this.plateMaterialColor;
    };
    TouchHolographicButton.prototype._performClickAnimation = function () {
        var frameRate = 60;
        var animationGroup = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.AnimationGroup("Click Animation Group");
        var animations = [
            {
                name: "backGlowMotion",
                mesh: this._backGlow,
                property: "material.motion",
                keys: [
                    {
                        frame: 0,
                        values: [0, 0, 0],
                    },
                    {
                        frame: 20,
                        values: [1, 0.0144, 0.0144],
                    },
                    {
                        frame: 40,
                        values: [0.0027713229489760476, 0, 0],
                    },
                    {
                        frame: 45,
                        values: [0.0027713229489760476],
                    },
                ],
            },
            {
                name: "_collisionPlateZSlide",
                mesh: this._collisionPlate,
                property: "position.z",
                keys: [
                    {
                        frame: 0,
                        values: [0.0, 0.0, 0.0],
                    },
                    {
                        frame: 20,
                        values: [babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(this._collisionPlate._scene.useRightHandedSystem).scale(this.frontPlateDepth / 2).z, 0.0, 0.0],
                    },
                    {
                        frame: 40,
                        values: [0.0, 0.005403332496794331],
                    },
                    {
                        frame: 45,
                        values: [0.0],
                    },
                ],
            },
            {
                name: "_collisionPlateZScale",
                mesh: this._collisionPlate,
                property: "scaling.z",
                keys: [
                    {
                        frame: 0,
                        values: [this.frontPlateDepth, 0.0, 0.0],
                    },
                    {
                        frame: 20,
                        values: [this.backPlateDepth, 0.0, 0.0],
                    },
                    {
                        frame: 40,
                        values: [this.frontPlateDepth, 0.0054],
                    },
                    {
                        frame: 45,
                        values: [this.frontPlateDepth],
                    },
                ],
            },
        ];
        for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
            var animation = animations_1[_i];
            var anim = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Animation(animation.name, animation.property, frameRate, babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Animation.ANIMATIONTYPE_FLOAT, babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Animation.ANIMATIONLOOPMODE_CYCLE);
            var animkeyFrames = [];
            for (var _a = 0, _b = animation.keys; _a < _b.length; _a++) {
                var key = _b[_a];
                animkeyFrames.push({
                    frame: key.frame,
                    value: key.values[0],
                    inTangent: key.values[1],
                    outTangent: key.values[2],
                    interpolation: key.values[3],
                });
            }
            anim.setKeys(animkeyFrames);
            if (!animation.mesh) {
                continue;
            }
            animationGroup.addTargetedAnimation(anim, animation.mesh);
        }
        animationGroup.normalize(0, 45);
        animationGroup.speedRatio = 1;
        animationGroup.play();
    };
    TouchHolographicButton.prototype._performEnterExitAnimation = function (speedRatio) {
        var frameRate = 60;
        var animationGroup = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.AnimationGroup("Enter Exit Animation Group");
        var animations = [
            {
                name: "frontPlateFadeOut",
                mesh: this._frontPlate,
                property: "material.fadeOut",
                keys: [
                    {
                        frame: 0,
                        values: [0, 0, 0.025045314830017686, 0],
                    },
                    {
                        frame: 40,
                        values: [1.00205599570012, 0.025045314830017686, 0, 0],
                    },
                ],
            },
            {
                name: "textPlateZSlide",
                mesh: this._textPlate,
                property: "position.z",
                keys: [
                    {
                        frame: 0,
                        values: [0, 0.0, 0.0],
                    },
                    {
                        frame: 40,
                        values: [babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(this._textPlate._scene.useRightHandedSystem).scale(-0.15).z, 0.0, 0.0],
                    },
                ],
            },
        ];
        for (var _i = 0, animations_2 = animations; _i < animations_2.length; _i++) {
            var animation = animations_2[_i];
            var anim = new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Animation(animation.name, animation.property, frameRate, babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Animation.ANIMATIONTYPE_FLOAT, babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Animation.ANIMATIONLOOPMODE_CYCLE);
            var animkeyFrames = [];
            for (var _a = 0, _b = animation.keys; _a < _b.length; _a++) {
                var key = _b[_a];
                animkeyFrames.push({
                    frame: key.frame,
                    value: key.values[0],
                    inTangent: key.values[1],
                    outTangent: key.values[2],
                    interpolation: key.values[3],
                });
            }
            anim.setKeys(animkeyFrames);
            if (!animation.mesh) {
                continue;
            }
            animationGroup.addTargetedAnimation(anim, animation.mesh);
        }
        animationGroup.normalize(0, 45);
        animationGroup.speedRatio = speedRatio;
        animationGroup.play();
    };
    TouchHolographicButton.prototype._createBackMaterial = function (mesh) {
        var _a;
        this._backMaterial = (_a = this._backMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_6__.MRDLBackplateMaterial(this.name + "backPlateMaterial", mesh.getScene());
        this._backMaterial.absoluteSizes = true;
        this._backMaterial.radius = this.radius;
        this._backMaterial.lineWidth = 0.02;
    };
    TouchHolographicButton.prototype._createFrontMaterial = function (mesh) {
        var _a;
        this._frontMaterial = (_a = this._frontMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlFrontplateMaterial__WEBPACK_IMPORTED_MODULE_7__.MRDLFrontplateMaterial(this.name + "Front Material", mesh.getScene());
        this.frontMaterial.radius = this.innerQuadRadius;
        this.frontMaterial.fadeOut = 0.0;
    };
    TouchHolographicButton.prototype._createBackGlowMaterial = function (mesh) {
        var _a;
        var glowRadius = this.radius + 0.04;
        this._backGlowMaterial = (_a = this._backGlowMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlBackglowMaterial__WEBPACK_IMPORTED_MODULE_5__.MRDLBackglowMaterial(this.name + "Back Glow Material", mesh.getScene());
        this._backGlowMaterial.bevelRadius = glowRadius;
        this._backGlowMaterial.lineWidth = glowRadius;
        this._backGlowMaterial.motion = 0.0;
    };
    TouchHolographicButton.prototype._createInnerQuadMaterial = function (mesh) {
        var _a;
        this._innerQuadMaterial = (_a = this._innerQuadMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlInnerquadMaterial__WEBPACK_IMPORTED_MODULE_8__.MRDLInnerquadMaterial("inner_quad", mesh.getScene());
        this._innerQuadMaterial.radius = this.innerQuadRadius;
        if (this.isToggleButton) {
            this._innerQuadMaterial.color = this.innerQuadColor;
        }
    };
    TouchHolographicButton.prototype._createPlateMaterial = function (mesh) {
        var _a;
        this._plateMaterial = (_a = this._plateMaterial) !== null && _a !== void 0 ? _a : new babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.StandardMaterial(this.name + "Plate Material", mesh.getScene());
        this._plateMaterial.specularColor = babylonjs_Animations_animation__WEBPACK_IMPORTED_MODULE_1__.Color3.Black();
    };
    TouchHolographicButton.prototype._onToggle = function (newState) {
        _super.prototype._onToggle.call(this, newState);
    };
    TouchHolographicButton.prototype._affectMaterial = function (mesh) {
        if (this._shareMaterials) {
            // Back
            if (!this._host._touchSharedMaterials["mrdlBackplateMaterial"]) {
                this._createBackMaterial(mesh);
                this._host._touchSharedMaterials["mrdlBackplateMaterial"] = this._backMaterial;
            }
            else {
                this._backMaterial = this._host._touchSharedMaterials["mrdlBackplateMaterial"];
            }
            // Front
            if (!this._host._touchSharedMaterials["mrdlFrontplateMaterial"]) {
                this._createFrontMaterial(mesh);
                this._host._touchSharedMaterials["mrdlFrontplateMaterial"] = this._frontMaterial;
            }
            else {
                this._frontMaterial = this._host._touchSharedMaterials["mrdlFrontplateMaterial"];
            }
            // Back glow
            if (!this._host._touchSharedMaterials["mrdlBackglowMaterial"]) {
                this._createBackGlowMaterial(mesh);
                this._host._touchSharedMaterials["mrdlBackglowMaterial"] = this._backGlowMaterial;
            }
            else {
                this._backGlowMaterial = this._host._touchSharedMaterials["mrdlBackglowMaterial"];
            }
            // Inner quad
            if (!this._host._touchSharedMaterials["mrdlInnerQuadMaterial"]) {
                this._createInnerQuadMaterial(mesh);
                this._host._touchSharedMaterials["mrdlInnerQuadMaterial"] = this._innerQuadMaterial;
            }
            else {
                this._innerQuadMaterial = this._host._touchSharedMaterials["mrdlInnerQuadMaterial"];
            }
        }
        else {
            this._createBackMaterial(mesh);
            this._createFrontMaterial(mesh);
            this._createBackGlowMaterial(mesh);
            this._createInnerQuadMaterial(mesh);
        }
        this._createPlateMaterial(mesh);
        this._backPlate.material = this._backMaterial;
        this._textPlate.material = this._plateMaterial;
        if (!this._isBackplateVisible) {
            this._backPlate.visibility = 0;
        }
        if (this._frontPlate) {
            this._frontPlate.material = this._frontMaterial;
        }
        if (this._backGlow) {
            this._backGlow.material = this._backGlowMaterial;
        }
        if (this._innerQuad) {
            this._innerQuad.material = this._innerQuadMaterial;
        }
        this._rebuildContent();
    };
    /**
     * Releases all associated resources
     */
    TouchHolographicButton.prototype.dispose = function () {
        _super.prototype.dispose.call(this); // will dispose main mesh ie. back plate
        this._disposeTooltip();
        this.onPointerClickObservable.remove(this._pointerClickObserver);
        this.onPointerEnterObservable.remove(this._pointerEnterObserver);
        this.onPointerOutObservable.remove(this._pointerOutObserver);
        this.onToggleObservable.remove(this._toggleObserver);
        if (!this.shareMaterials) {
            this._backMaterial.dispose();
            this._frontMaterial.dispose();
            this._plateMaterial.dispose();
            this._backGlowMaterial.dispose();
            this._innerQuadMaterial.dispose();
            if (this._pickedPointObserver) {
                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
                this._pickedPointObserver = null;
            }
        }
    };
    /**
     * Base Url for the frontplate model.
     */
    TouchHolographicButton.MRTK_ASSET_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
    /**
     * File name for the frontplate model.
     */
    TouchHolographicButton.FRONTPLATE_MODEL_FILENAME = "mrtk-fluent-frontplate.glb";
    /**
     * File name for the backplate model.
     */
    TouchHolographicButton.BACKPLATE_MODEL_FILENAME = "mrtk-fluent-backplate.glb";
    /**
     * File name for the backglow model.
     */
    TouchHolographicButton.BACKGLOW_MODEL_FILENAME = "mrtk-fluent-button.glb";
    /**
     * File name for the innerquad model.
     */
    TouchHolographicButton.INNERQUAD_MODEL_FILENAME = "SlateProximity.glb";
    return TouchHolographicButton;
}(_touchButton3D__WEBPACK_IMPORTED_MODULE_12__.TouchButton3D));


/***/ }),

/***/ "../../../dev/gui/src/3D/controls/abstractButton3D.ts":
/*!************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/abstractButton3D.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractButton3D: () => (/* binding */ AbstractButton3D)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Meshes/transformNode */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _contentDisplay3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contentDisplay3D */ "../../../dev/gui/src/3D/controls/contentDisplay3D.ts");



/**
 * Class used as a root to all buttons
 */
var AbstractButton3D = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(AbstractButton3D, _super);
    /**
     * Creates a new button
     * @param name defines the control name
     */
    function AbstractButton3D(name) {
        return _super.call(this, name) || this;
    }
    AbstractButton3D.prototype._getTypeName = function () {
        return "AbstractButton3D";
    };
    // Mesh association
    AbstractButton3D.prototype._createNode = function (scene) {
        return new babylonjs_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_0__.TransformNode("button" + this.name, scene);
    };
    return AbstractButton3D;
}(_contentDisplay3D__WEBPACK_IMPORTED_MODULE_1__.ContentDisplay3D));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/button3D.ts":
/*!****************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/button3D.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button3D: () => (/* binding */ Button3D)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.color */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _abstractButton3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstractButton3D */ "../../../dev/gui/src/3D/controls/abstractButton3D.ts");






/**
 * Class used to create a button in 3D
 */
var Button3D = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Button3D, _super);
    /**
     * Creates a new button
     * @param name defines the control name
     * @param options defines the options used to create the button
     */
    function Button3D(name, options) {
        var _this = _super.call(this, name) || this;
        _this._options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({ width: 1, height: 1, depth: 0.08 }, options);
        // Default animations
        _this.pointerEnterAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this._currentMaterial.emissiveColor = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Color3.Red();
        };
        _this.pointerOutAnimation = function () {
            _this._currentMaterial.emissiveColor = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Color3.Black();
        };
        _this.pointerDownAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(0.95);
        };
        _this.pointerUpAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(1.0 / 0.95);
        };
        return _this;
    }
    /**
     * Apply the facade texture (created from the content property).
     * @param facadeTexture defines the AdvancedDynamicTexture to use
     */
    Button3D.prototype._applyFacade = function (facadeTexture) {
        this._currentMaterial.emissiveTexture = facadeTexture;
    };
    Button3D.prototype._getTypeName = function () {
        return "Button3D";
    };
    // Mesh association
    Button3D.prototype._createNode = function (scene) {
        var faceUV = new Array(6);
        for (var i = 0; i < 6; i++) {
            faceUV[i] = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector4(0, 0, 0, 0);
        }
        if (scene.useRightHandedSystem) {
            // Flip the u on the texture
            faceUV[0].copyFromFloats(1, 0, 0, 1);
        }
        else {
            faceUV[1].copyFromFloats(0, 0, 1, 1);
        }
        var mesh = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.CreateBox)(this.name + "_rootMesh", {
            width: this._options.width,
            height: this._options.height,
            depth: this._options.depth,
            faceUV: faceUV,
            wrap: true,
        }, scene);
        this._contentScaleRatioY = (this._contentScaleRatio * this._options.width) / this._options.height;
        this._setFacadeTextureScaling();
        return mesh;
    };
    Button3D.prototype._affectMaterial = function (mesh) {
        var material = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.StandardMaterial(this.name + "Material", mesh.getScene());
        material.specularColor = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Color3.Black();
        mesh.material = material;
        this._currentMaterial = material;
        this._resetContent();
    };
    /**
     * Releases all associated resources
     */
    Button3D.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._disposeFacadeTexture();
        if (this._currentMaterial) {
            this._currentMaterial.dispose();
        }
    };
    return Button3D;
}(_abstractButton3D__WEBPACK_IMPORTED_MODULE_1__.AbstractButton3D));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/container3D.ts":
/*!*******************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/container3D.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Container3D: () => (/* binding */ Container3D)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Meshes/transformNode */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control3D */ "../../../dev/gui/src/3D/controls/control3D.ts");



/**
 * Class used to create containers for controls
 */
var Container3D = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Container3D, _super);
    /**
     * Creates a new container
     * @param name defines the container name
     */
    function Container3D(name) {
        var _this = _super.call(this, name) || this;
        _this._blockLayout = false;
        /**
         * Gets the list of child controls
         */
        _this._children = new Array();
        return _this;
    }
    Object.defineProperty(Container3D.prototype, "children", {
        /**
         * Gets the list of child controls
         */
        get: function () {
            return this._children;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container3D.prototype, "blockLayout", {
        /**
         * Gets or sets a boolean indicating if the layout must be blocked (default is false).
         * This is helpful to optimize layout operation when adding multiple children in a row
         */
        get: function () {
            return this._blockLayout;
        },
        set: function (value) {
            if (this._blockLayout === value) {
                return;
            }
            this._blockLayout = value;
            if (!this._blockLayout) {
                this._arrangeChildren();
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Force the container to update the layout. Please note that it will not take blockLayout property in account
     * @returns the current container
     */
    Container3D.prototype.updateLayout = function () {
        this._arrangeChildren();
        return this;
    };
    /**
     * Gets a boolean indicating if the given control is in the children of this control
     * @param control defines the control to check
     * @returns true if the control is in the child list
     */
    Container3D.prototype.containsControl = function (control) {
        return this._children.indexOf(control) !== -1;
    };
    /**
     * Adds a control to the children of this control
     * @param control defines the control to add
     * @returns the current container
     */
    Container3D.prototype.addControl = function (control) {
        var index = this._children.indexOf(control);
        if (index !== -1) {
            return this;
        }
        control.parent = this;
        control._host = this._host;
        this._children.push(control);
        if (this._host.utilityLayer) {
            control._prepareNode(this._host.utilityLayer.utilityLayerScene);
            if (control.node) {
                control.node.parent = this.node;
            }
            if (!this.blockLayout) {
                this._arrangeChildren();
            }
        }
        return this;
    };
    /**
     * This function will be called everytime a new control is added
     */
    Container3D.prototype._arrangeChildren = function () { };
    Container3D.prototype._createNode = function (scene) {
        return new babylonjs_Meshes_transformNode__WEBPACK_IMPORTED_MODULE_0__.TransformNode("ContainerNode", scene);
    };
    /**
     * Removes a control from the children of this control
     * @param control defines the control to remove
     * @returns the current container
     */
    Container3D.prototype.removeControl = function (control) {
        var index = this._children.indexOf(control);
        if (index !== -1) {
            this._children.splice(index, 1);
            control.parent = null;
            control._disposeNode();
        }
        return this;
    };
    Container3D.prototype._getTypeName = function () {
        return "Container3D";
    };
    /**
     * Releases all associated resources
     */
    Container3D.prototype.dispose = function () {
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var control = _a[_i];
            control.dispose();
        }
        this._children.length = 0;
        _super.prototype.dispose.call(this);
    };
    /** Control rotation will remain unchanged  */
    Container3D.UNSET_ORIENTATION = 0;
    /** Control will rotate to make it look at sphere central axis */
    Container3D.FACEORIGIN_ORIENTATION = 1;
    /** Control will rotate to make it look back at sphere central axis */
    Container3D.FACEORIGINREVERSED_ORIENTATION = 2;
    /** Control will rotate to look at z axis (0, 0, 1) */
    Container3D.FACEFORWARD_ORIENTATION = 3;
    /** Control will rotate to look at negative z axis (0, 0, -1) */
    Container3D.FACEFORWARDREVERSED_ORIENTATION = 4;
    return Container3D;
}(_control3D__WEBPACK_IMPORTED_MODULE_1__.Control3D));


/***/ }),

/***/ "../../../dev/gui/src/3D/controls/contentDisplay3D.ts":
/*!************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/contentDisplay3D.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContentDisplay3D: () => (/* binding */ ContentDisplay3D)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../2D/advancedDynamicTexture */ "../../../dev/gui/src/2D/advancedDynamicTexture.ts");
/* harmony import */ var _control3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control3D */ "../../../dev/gui/src/3D/controls/control3D.ts");
/* harmony import */ var babylonjs_Materials_Textures_texture__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! babylonjs/Materials/Textures/texture */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Materials_Textures_texture__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Materials_Textures_texture__WEBPACK_IMPORTED_MODULE_2__);




/**
 * The base class for controls that display content
 */
var ContentDisplay3D = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ContentDisplay3D, _super);
    function ContentDisplay3D() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._contentResolution = 512;
        _this._contentScaleRatio = 2;
        return _this;
    }
    Object.defineProperty(ContentDisplay3D.prototype, "content", {
        /**
         * Gets or sets the GUI 2D content used to display the button's facade
         */
        get: function () {
            return this._content;
        },
        set: function (value) {
            this._content = value;
            if (!value || !this._host || !this._host.utilityLayer) {
                return;
            }
            if (!this._facadeTexture) {
                this._facadeTexture = new _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTexture("Facade", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, babylonjs_Materials_Textures_texture__WEBPACK_IMPORTED_MODULE_2__.Texture.TRILINEAR_SAMPLINGMODE);
                this._setFacadeTextureScaling();
                this._facadeTexture.premulAlpha = true;
            }
            else {
                this._facadeTexture.rootContainer.clearControls();
            }
            this._facadeTexture.addControl(value);
            this._applyFacade(this._facadeTexture);
        },
        enumerable: false,
        configurable: true
    });
    ContentDisplay3D.prototype._setFacadeTextureScaling = function () {
        var _a;
        if (this._facadeTexture) {
            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;
            this._facadeTexture.rootContainer.scaleY = (_a = this._contentScaleRatioY) !== null && _a !== void 0 ? _a : this._contentScaleRatio;
        }
    };
    Object.defineProperty(ContentDisplay3D.prototype, "contentResolution", {
        /**
         * Gets or sets the texture resolution used to render content (512 by default)
         */
        get: function () {
            return this._contentResolution;
        },
        set: function (value) {
            if (this._contentResolution === value) {
                return;
            }
            this._contentResolution = value;
            this._resetContent();
        },
        enumerable: false,
        configurable: true
    });
    ContentDisplay3D.prototype._disposeFacadeTexture = function () {
        if (this._facadeTexture) {
            this._facadeTexture.dispose();
            this._facadeTexture = null;
        }
    };
    ContentDisplay3D.prototype._resetContent = function () {
        this._disposeFacadeTexture();
        this.content = this._content;
    };
    /**
     * Apply the facade texture (created from the content property).
     * This function can be overloaded by child classes
     * @param facadeTexture defines the AdvancedDynamicTexture to use
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ContentDisplay3D.prototype._applyFacade = function (facadeTexture) { };
    return ContentDisplay3D;
}(_control3D__WEBPACK_IMPORTED_MODULE_1__.Control3D));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/control3D.ts":
/*!*****************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/control3D.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Control3D: () => (/* binding */ Control3D)
/* harmony export */ });
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Meshes/abstractMesh */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _vector3WithInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector3WithInfo */ "../../../dev/gui/src/3D/vector3WithInfo.ts");





/**
 * Class used as base class for controls
 */
var Control3D = /** @class */ (function () {
    /**
     * Creates a new control
     * @param name defines the control name
     */
    function Control3D(
    /** Defines the control name */
    name) {
        this.name = name;
        this._downCount = 0;
        this._enterCount = -1;
        this._downPointerIds = {}; // Store number of pointer downs per ID, from near and far interactions
        this._isVisible = true;
        /** @internal */
        this._isScaledByManager = false;
        /**
         * An event triggered when the pointer moves over the control
         */
        this.onPointerMoveObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when the pointer moves out of the control
         */
        this.onPointerOutObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when the pointer taps the control
         */
        this.onPointerDownObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when pointer is up
         */
        this.onPointerUpObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when a control is clicked on (with a mouse)
         */
        this.onPointerClickObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * An event triggered when pointer enters the control
         */
        this.onPointerEnterObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        // Behaviors
        this._behaviors = new Array();
    }
    Object.defineProperty(Control3D.prototype, "position", {
        /** Gets or sets the control position in world space */
        get: function () {
            if (!this._node) {
                return babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
            }
            return this._node.position;
        },
        set: function (value) {
            if (!this._node) {
                return;
            }
            this._node.position = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control3D.prototype, "scaling", {
        /** Gets or sets the control scaling in world space */
        get: function () {
            if (!this._node) {
                return new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 1);
            }
            return this._node.scaling;
        },
        set: function (value) {
            if (!this._node) {
                return;
            }
            this._isScaledByManager = false;
            this._node.scaling = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control3D.prototype, "behaviors", {
        /**
         * Gets the list of attached behaviors
         * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors
         */
        get: function () {
            return this._behaviors;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Attach a behavior to the control
     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors
     * @param behavior defines the behavior to attach
     * @returns the current control
     */
    Control3D.prototype.addBehavior = function (behavior) {
        var _this = this;
        var index = this._behaviors.indexOf(behavior);
        if (index !== -1) {
            return this;
        }
        behavior.init();
        var scene = this._host.scene;
        if (scene.isLoading) {
            // We defer the attach when the scene will be loaded
            scene.onDataLoadedObservable.addOnce(function () {
                behavior.attach(_this);
            });
        }
        else {
            behavior.attach(this);
        }
        this._behaviors.push(behavior);
        return this;
    };
    /**
     * Remove an attached behavior
     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors
     * @param behavior defines the behavior to attach
     * @returns the current control
     */
    Control3D.prototype.removeBehavior = function (behavior) {
        var index = this._behaviors.indexOf(behavior);
        if (index === -1) {
            return this;
        }
        this._behaviors[index].detach();
        this._behaviors.splice(index, 1);
        return this;
    };
    /**
     * Gets an attached behavior by name
     * @param name defines the name of the behavior to look for
     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors
     * @returns null if behavior was not found else the requested behavior
     */
    Control3D.prototype.getBehaviorByName = function (name) {
        for (var _i = 0, _a = this._behaviors; _i < _a.length; _i++) {
            var behavior = _a[_i];
            if (behavior.name === name) {
                return behavior;
            }
        }
        return null;
    };
    Object.defineProperty(Control3D.prototype, "isVisible", {
        /** Gets or sets a boolean indicating if the control is visible */
        get: function () {
            return this._isVisible;
        },
        set: function (value) {
            if (this._isVisible === value) {
                return;
            }
            this._isVisible = value;
            var mesh = this.mesh;
            if (mesh) {
                mesh.setEnabled(value);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control3D.prototype, "typeName", {
        /**
         * Gets a string representing the class name
         */
        get: function () {
            return this._getTypeName();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get the current class name of the control.
     * @returns current class name
     */
    Control3D.prototype.getClassName = function () {
        return this._getTypeName();
    };
    Control3D.prototype._getTypeName = function () {
        return "Control3D";
    };
    Object.defineProperty(Control3D.prototype, "node", {
        /**
         * Gets the transform node used by this control
         */
        get: function () {
            return this._node;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Control3D.prototype, "mesh", {
        /**
         * Gets the mesh used to render this control
         */
        get: function () {
            if (this._node instanceof babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.AbstractMesh) {
                return this._node;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Link the control as child of the given node
     * @param node defines the node to link to. Use null to unlink the control
     * @returns the current control
     */
    Control3D.prototype.linkToTransformNode = function (node) {
        if (this._node) {
            this._node.parent = node;
        }
        return this;
    };
    /**
     * @internal
     */
    Control3D.prototype._prepareNode = function (scene) {
        if (!this._node) {
            this._node = this._createNode(scene);
            if (!this.node) {
                return;
            }
            this._injectGUI3DReservedDataStore(this.node).control = this; // Store the control on the reservedDataStore field in order to get it when picking
            var mesh = this.mesh;
            if (mesh) {
                mesh.isPickable = true;
                this._affectMaterial(mesh);
            }
        }
    };
    Control3D.prototype._injectGUI3DReservedDataStore = function (node) {
        var _a, _b;
        node.reservedDataStore = (_a = node.reservedDataStore) !== null && _a !== void 0 ? _a : {};
        node.reservedDataStore.GUI3D = (_b = node.reservedDataStore.GUI3D) !== null && _b !== void 0 ? _b : {};
        return node.reservedDataStore.GUI3D;
    };
    /**
     * Node creation.
     * Can be overriden by children
     * @param scene defines the scene where the node must be attached
     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an attached visible object
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Control3D.prototype._createNode = function (scene) {
        // Do nothing by default
        return null;
    };
    /**
     * Affect a material to the given mesh
     * @param mesh defines the mesh which will represent the control
     */
    Control3D.prototype._affectMaterial = function (mesh) {
        mesh.material = null;
    };
    Control3D.prototype._isTouchButton3D = function (control) {
        return control._generatePointerEventType !== undefined;
    };
    // Pointers
    /**
     * @internal
     */
    Control3D.prototype._onPointerMove = function (target, coordinates) {
        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);
    };
    /**
     * @internal
     */
    Control3D.prototype._onPointerEnter = function (target) {
        if (this._enterCount === -1) {
            // -1 is for touch input, we are now sure we are with a mouse or pencil
            this._enterCount = 0;
        }
        this._enterCount++;
        if (this._enterCount > 1) {
            return false;
        }
        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);
        if (this.pointerEnterAnimation) {
            this.pointerEnterAnimation();
        }
        return true;
    };
    /**
     * @internal
     */
    Control3D.prototype._onPointerOut = function (target) {
        this._enterCount--;
        if (this._enterCount > 0) {
            return;
        }
        this._enterCount = 0;
        this.onPointerOutObservable.notifyObservers(this, -1, target, this);
        if (this.pointerOutAnimation) {
            this.pointerOutAnimation();
        }
    };
    /**
     * @internal
     */
    Control3D.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex) {
        this._downCount++;
        this._downPointerIds[pointerId] = this._downPointerIds[pointerId] + 1 || 1;
        if (this._downCount !== 1) {
            return false;
        }
        this.onPointerDownObservable.notifyObservers(new _vector3WithInfo__WEBPACK_IMPORTED_MODULE_1__.Vector3WithInfo(coordinates, buttonIndex), -1, target, this);
        if (this.pointerDownAnimation) {
            this.pointerDownAnimation();
        }
        return true;
    };
    /**
     * @internal
     */
    Control3D.prototype._onPointerUp = function (target, coordinates, pointerId, buttonIndex, notifyClick) {
        this._downCount--;
        this._downPointerIds[pointerId]--;
        if (this._downPointerIds[pointerId] <= 0) {
            delete this._downPointerIds[pointerId];
        }
        if (this._downCount < 0) {
            // Handle if forcePointerUp was called prior to this
            this._downCount = 0;
            return;
        }
        if (this._downCount == 0) {
            if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {
                this.onPointerClickObservable.notifyObservers(new _vector3WithInfo__WEBPACK_IMPORTED_MODULE_1__.Vector3WithInfo(coordinates, buttonIndex), -1, target, this);
            }
            this.onPointerUpObservable.notifyObservers(new _vector3WithInfo__WEBPACK_IMPORTED_MODULE_1__.Vector3WithInfo(coordinates, buttonIndex), -1, target, this);
            if (this.pointerUpAnimation) {
                this.pointerUpAnimation();
            }
        }
    };
    /**
     * @internal
     */
    Control3D.prototype.forcePointerUp = function (pointerId) {
        if (pointerId === void 0) { pointerId = null; }
        if (pointerId !== null) {
            this._onPointerUp(this, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero(), pointerId, 0, true);
        }
        else {
            for (var key in this._downPointerIds) {
                this._onPointerUp(this, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero(), +key, 0, true);
            }
            if (this._downCount > 0) {
                this._downCount = 1;
                this._onPointerUp(this, babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero(), 0, 0, true);
            }
        }
    };
    /**
     * @internal
     */
    Control3D.prototype._processObservables = function (type, pickedPoint, originMeshPosition, pointerId, buttonIndex) {
        if (this._isTouchButton3D(this) && originMeshPosition) {
            type = this._generatePointerEventType(type, originMeshPosition, this._downCount);
        }
        if (type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE) {
            this._onPointerMove(this, pickedPoint);
            var previousControlOver = this._host._lastControlOver[pointerId];
            if (previousControlOver && previousControlOver !== this) {
                previousControlOver._onPointerOut(this);
            }
            if (previousControlOver !== this) {
                this._onPointerEnter(this);
            }
            this._host._lastControlOver[pointerId] = this;
            return true;
        }
        if (type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERDOWN) {
            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);
            this._host._lastControlDown[pointerId] = this;
            this._host._lastPickedControl = this;
            return true;
        }
        if (type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP || type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERDOUBLETAP) {
            if (this._host._lastControlDown[pointerId]) {
                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);
            }
            delete this._host._lastControlDown[pointerId];
            return true;
        }
        return false;
    };
    /** @internal */
    Control3D.prototype._disposeNode = function () {
        if (this._node) {
            this._node.dispose();
            this._node = null;
        }
    };
    /**
     * Releases all associated resources
     */
    Control3D.prototype.dispose = function () {
        this.onPointerDownObservable.clear();
        this.onPointerEnterObservable.clear();
        this.onPointerMoveObservable.clear();
        this.onPointerOutObservable.clear();
        this.onPointerUpObservable.clear();
        this.onPointerClickObservable.clear();
        this._disposeNode();
        // Behaviors
        for (var _i = 0, _a = this._behaviors; _i < _a.length; _i++) {
            var behavior = _a[_i];
            behavior.detach();
        }
    };
    return Control3D;
}());



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/cylinderPanel.ts":
/*!*********************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/cylinderPanel.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CylinderPanel: () => (/* binding */ CylinderPanel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.axis */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./volumeBasedPanel */ "../../../dev/gui/src/3D/controls/volumeBasedPanel.ts");
/* harmony import */ var _container3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./container3D */ "../../../dev/gui/src/3D/controls/container3D.ts");






/**
 * Class used to create a container panel deployed on the surface of a cylinder
 */
var CylinderPanel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(CylinderPanel, _super);
    function CylinderPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._radius = 5.0;
        return _this;
    }
    Object.defineProperty(CylinderPanel.prototype, "radius", {
        /**
         * Gets or sets the radius of the cylinder where to project controls (5 by default)
         */
        get: function () {
            return this._radius;
        },
        set: function (value) {
            var _this = this;
            if (this._radius === value) {
                return;
            }
            this._radius = value;
            babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Tools.SetImmediate(function () {
                _this._arrangeChildren();
            });
        },
        enumerable: false,
        configurable: true
    });
    CylinderPanel.prototype._mapGridNode = function (control, nodePosition) {
        var mesh = control.mesh;
        if (!mesh) {
            return;
        }
        var newPos = this._cylindricalMapping(nodePosition);
        control.position = newPos;
        switch (this.orientation) {
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEORIGIN_ORIENTATION:
                mesh.lookAt(new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));
                break;
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEORIGINREVERSED_ORIENTATION:
                mesh.lookAt(new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(-newPos.x, newPos.y, -newPos.z));
                break;
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEFORWARD_ORIENTATION:
                break;
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEFORWARDREVERSED_ORIENTATION:
                mesh.rotate(babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Axis.Y, Math.PI, 0 /* Space.LOCAL */);
                break;
        }
    };
    CylinderPanel.prototype._cylindricalMapping = function (source) {
        var newPos = new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, source.y, this._radius);
        var yAngle = source.x / this._radius;
        babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Matrix[0]);
        return babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3.TransformNormal(newPos, babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Matrix[0]);
    };
    return CylinderPanel;
}(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_1__.VolumeBasedPanel));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/handMenu.ts":
/*!****************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/handMenu.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HandMenu: () => (/* binding */ HandMenu)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./touchHolographicMenu */ "../../../dev/gui/src/3D/controls/touchHolographicMenu.ts");
/* harmony import */ var babylonjs_Behaviors_Meshes_handConstraintBehavior__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Behaviors/Meshes/handConstraintBehavior */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Behaviors_Meshes_handConstraintBehavior__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Behaviors_Meshes_handConstraintBehavior__WEBPACK_IMPORTED_MODULE_1__);



/**
 * Hand menu that displays buttons and floats around the hand.
 * @since 5.0.0
 */
var HandMenu = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(HandMenu, _super);
    /**
     * Creates a hand menu GUI 3D control
     * @param xr the WebXRExperienceHelper used to link this control to the enabled WebXRHandTracking feature
     * @param name name of the hand menu
     */
    function HandMenu(xr, name) {
        var _this = _super.call(this, name) || this;
        _this._handConstraintBehavior = new babylonjs_Behaviors_Meshes_handConstraintBehavior__WEBPACK_IMPORTED_MODULE_1__.HandConstraintBehavior();
        _this._handConstraintBehavior.linkToXRExperience(xr);
        _this.backPlateMargin = 0.15;
        _this.rows = 3;
        return _this;
    }
    Object.defineProperty(HandMenu.prototype, "handConstraintBehavior", {
        /**
         * The hand constraint behavior setting the transformation of this node
         */
        get: function () {
            return this._handConstraintBehavior;
        },
        enumerable: false,
        configurable: true
    });
    HandMenu.prototype._createNode = function (scene) {
        var node = _super.prototype._createNode.call(this, scene);
        this._handConstraintBehavior.attach(node);
        return node;
    };
    /**
     * Disposes the hand menu
     */
    HandMenu.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._handConstraintBehavior.detach();
    };
    return HandMenu;
}(_touchHolographicMenu__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicMenu));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/holographicBackplate.ts":
/*!****************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/holographicBackplate.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HolographicBackplate: () => (/* binding */ HolographicBackplate)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Loading/sceneLoader */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../materials/fluentBackplate/fluentBackplateMaterial */ "../../../dev/gui/src/3D/materials/fluentBackplate/fluentBackplateMaterial.ts");
/* harmony import */ var _control3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./control3D */ "../../../dev/gui/src/3D/controls/control3D.ts");





/**
 * Class used to create a holographic backplate in 3D
 * @since 5.0.0
 */
var HolographicBackplate = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(HolographicBackplate, _super);
    /**
     * Creates a new holographic backplate
     * @param name defines the control name
     * @param _shareMaterials
     */
    function HolographicBackplate(name, _shareMaterials) {
        if (_shareMaterials === void 0) { _shareMaterials = true; }
        var _this = _super.call(this, name) || this;
        _this._shareMaterials = _shareMaterials;
        return _this;
    }
    Object.defineProperty(HolographicBackplate.prototype, "renderingGroupId", {
        get: function () {
            return this._model.renderingGroupId;
        },
        /**
         * Rendering ground id of the backplate mesh.
         */
        set: function (id) {
            this._model.renderingGroupId = id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicBackplate.prototype, "material", {
        /**
         * Gets the material used by the backplate
         */
        get: function () {
            return this._material;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicBackplate.prototype, "shareMaterials", {
        /**
         * Gets a boolean indicating if this backplate shares its material with other HolographicBackplates
         */
        get: function () {
            return this._shareMaterials;
        },
        enumerable: false,
        configurable: true
    });
    HolographicBackplate.prototype._getTypeName = function () {
        return "HolographicBackplate";
    };
    // Mesh association
    HolographicBackplate.prototype._createNode = function (scene) {
        var _this = this;
        var _a;
        var collisionMesh = (0,babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.CreateBox)(((_a = this.name) !== null && _a !== void 0 ? _a : "HolographicBackplate") + "_CollisionMesh", {
            width: 1.0,
            height: 1.0,
            depth: 1.0,
        }, scene);
        collisionMesh.isPickable = true;
        collisionMesh.visibility = 0;
        babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.SceneLoader.ImportMeshAsync(undefined, HolographicBackplate.MODEL_BASE_URL, HolographicBackplate.MODEL_FILENAME, scene).then(function (result) {
            var importedModel = result.meshes[1];
            importedModel.name = "".concat(_this.name, "_frontPlate");
            importedModel.isPickable = false;
            importedModel.parent = collisionMesh;
            if (_this._material) {
                importedModel.material = _this._material;
            }
            _this._model = importedModel;
        });
        return collisionMesh;
    };
    HolographicBackplate.prototype._createMaterial = function (mesh) {
        this._material = new _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_1__.FluentBackplateMaterial(this.name + " Material", mesh.getScene());
    };
    HolographicBackplate.prototype._affectMaterial = function (mesh) {
        // Back
        if (this._shareMaterials) {
            if (!this._host._touchSharedMaterials["fluentBackplateMaterial"]) {
                this._createMaterial(mesh);
                this._host._touchSharedMaterials["fluentBackplateMaterial"] = this._material;
            }
            else {
                this._material = this._host._touchSharedMaterials["fluentBackplateMaterial"];
            }
        }
        else {
            this._createMaterial(mesh);
        }
    };
    /**
     * Releases all associated resources
     */
    HolographicBackplate.prototype.dispose = function () {
        _super.prototype.dispose.call(this); // will dispose main mesh ie. back plate
        if (!this.shareMaterials) {
            this._material.dispose();
        }
        this._model.dispose();
    };
    /**
     * Base Url for the button model.
     */
    HolographicBackplate.MODEL_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
    /**
     * File name for the button model.
     */
    HolographicBackplate.MODEL_FILENAME = "mrtk-fluent-backplate.glb";
    return HolographicBackplate;
}(_control3D__WEBPACK_IMPORTED_MODULE_2__.Control3D));


/***/ }),

/***/ "../../../dev/gui/src/3D/controls/holographicButton.ts":
/*!*************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/holographicButton.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HolographicButton: () => (/* binding */ HolographicButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _button3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button3D */ "../../../dev/gui/src/3D/controls/button3D.ts");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Misc/domManagement */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../materials/fluent/fluentMaterial */ "../../../dev/gui/src/3D/materials/fluent/fluentMaterial.ts");
/* harmony import */ var _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../2D/controls/stackPanel */ "../../../dev/gui/src/2D/controls/stackPanel.ts");
/* harmony import */ var _2D_controls_image__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../2D/controls/image */ "../../../dev/gui/src/2D/controls/image.ts");
/* harmony import */ var _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../2D/controls/textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");
/* harmony import */ var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../2D/advancedDynamicTexture */ "../../../dev/gui/src/2D/advancedDynamicTexture.ts");















/**
 * Class used to create a holographic button in 3D
 */
var HolographicButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__extends)(HolographicButton, _super);
    /**
     * Creates a new button
     * @param name defines the control name
     * @param shareMaterials
     */
    function HolographicButton(name, shareMaterials) {
        if (shareMaterials === void 0) { shareMaterials = true; }
        var _this = _super.call(this, name) || this;
        _this._shareMaterials = true;
        _this._shareMaterials = shareMaterials;
        // Default animations
        _this.pointerEnterAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this._frontPlate.setEnabled(true);
        };
        _this.pointerOutAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this._frontPlate.setEnabled(false);
        };
        return _this;
    }
    HolographicButton.prototype._disposeTooltip = function () {
        this._tooltipFade = null;
        if (this._tooltipTextBlock) {
            this._tooltipTextBlock.dispose();
        }
        if (this._tooltipTexture) {
            this._tooltipTexture.dispose();
        }
        if (this._tooltipMesh) {
            this._tooltipMesh.dispose();
        }
        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);
        this.onPointerOutObservable.remove(this._tooltipOutObserver);
    };
    Object.defineProperty(HolographicButton.prototype, "renderingGroupId", {
        get: function () {
            return this._backPlate.renderingGroupId;
        },
        /**
         * Rendering ground id of all the mesh in the button
         */
        set: function (id) {
            this._backPlate.renderingGroupId = id;
            this._textPlate.renderingGroupId = id;
            this._frontPlate.renderingGroupId = id;
            if (this._tooltipMesh) {
                this._tooltipMesh.renderingGroupId = id;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicButton.prototype, "tooltipText", {
        get: function () {
            if (this._tooltipTextBlock) {
                return this._tooltipTextBlock.text;
            }
            return null;
        },
        /**
         * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)
         */
        set: function (text) {
            var _this = this;
            if (!text) {
                this._disposeTooltip();
                return;
            }
            if (!this._tooltipFade) {
                var rightHandedScene = this._backPlate._scene.useRightHandedSystem;
                // Create tooltip with mesh and text
                this._tooltipMesh = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreatePlane)("", { size: 1 }, this._backPlate._scene);
                var tooltipBackground = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreatePlane)("", { size: 1, sideOrientation: babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Mesh.DOUBLESIDE }, this._backPlate._scene);
                var mat = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.StandardMaterial("", this._backPlate._scene);
                mat.diffuseColor = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3.FromHexString("#212121");
                tooltipBackground.material = mat;
                tooltipBackground.isPickable = false;
                this._tooltipMesh.addChild(tooltipBackground);
                tooltipBackground.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(rightHandedScene).scale(0.05);
                this._tooltipMesh.scaling.y = 1 / 3;
                this._tooltipMesh.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Up().scale(0.7).add(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(rightHandedScene).scale(-0.15));
                this._tooltipMesh.isPickable = false;
                this._tooltipMesh.parent = this._backPlate;
                // Create text texture for the tooltip
                this._tooltipTexture = _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_6__.AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);
                this._tooltipTextBlock = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_5__.TextBlock();
                this._tooltipTextBlock.scaleY = 3;
                this._tooltipTextBlock.color = "white";
                this._tooltipTextBlock.fontSize = 130;
                this._tooltipTexture.addControl(this._tooltipTextBlock);
                // Add hover action to tooltip
                this._tooltipFade = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.FadeInOutBehavior();
                this._tooltipFade.delay = 500;
                this._tooltipMesh.addBehavior(this._tooltipFade);
                this._tooltipHoverObserver = this.onPointerEnterObservable.add(function () {
                    if (_this._tooltipFade) {
                        _this._tooltipFade.fadeIn(true);
                    }
                });
                this._tooltipOutObserver = this.onPointerOutObservable.add(function () {
                    if (_this._tooltipFade) {
                        _this._tooltipFade.fadeIn(false);
                    }
                });
            }
            if (this._tooltipTextBlock) {
                this._tooltipTextBlock.text = text;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicButton.prototype, "text", {
        /**
         * Gets or sets text for the button
         */
        get: function () {
            return this._text;
        },
        set: function (value) {
            if (this._text === value) {
                return;
            }
            this._text = value;
            this._rebuildContent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicButton.prototype, "imageUrl", {
        /**
         * Gets or sets the image url for the button
         */
        get: function () {
            return this._imageUrl;
        },
        set: function (value) {
            if (this._imageUrl === value) {
                return;
            }
            this._imageUrl = value;
            this._rebuildContent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicButton.prototype, "backMaterial", {
        /**
         * Gets the back material used by this button
         */
        get: function () {
            return this._backMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicButton.prototype, "frontMaterial", {
        /**
         * Gets the front material used by this button
         */
        get: function () {
            return this._frontMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicButton.prototype, "plateMaterial", {
        /**
         * Gets the plate material used by this button
         */
        get: function () {
            return this._plateMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicButton.prototype, "shareMaterials", {
        /**
         * Gets a boolean indicating if this button shares its material with other HolographicButtons
         */
        get: function () {
            return this._shareMaterials;
        },
        enumerable: false,
        configurable: true
    });
    HolographicButton.prototype._getTypeName = function () {
        return "HolographicButton";
    };
    HolographicButton.prototype._rebuildContent = function () {
        this._disposeFacadeTexture();
        var panel = new _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_3__.StackPanel();
        panel.isVertical = true;
        if ((0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.IsDocumentAvailable)() && !!document.createElement) {
            if (this._imageUrl) {
                var image = new _2D_controls_image__WEBPACK_IMPORTED_MODULE_4__.Image();
                image.source = this._imageUrl;
                image.paddingTop = "40px";
                image.height = "180px";
                image.width = "100px";
                image.paddingBottom = "40px";
                panel.addControl(image);
            }
        }
        if (this._text) {
            var text = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_5__.TextBlock();
            text.text = this._text;
            text.color = "white";
            text.height = "30px";
            text.fontSize = 24;
            panel.addControl(text);
        }
        if (this._frontPlate) {
            this.content = panel;
        }
    };
    // Mesh association
    HolographicButton.prototype._createNode = function (scene) {
        this._backPlate = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreateBox)(this.name + "BackMesh", {
            width: 1.0,
            height: 1.0,
            depth: 0.08,
        }, scene);
        this._frontPlate = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.CreateBox)(this.name + "FrontMesh", {
            width: 1.0,
            height: 1.0,
            depth: 0.08,
        }, scene);
        this._frontPlate.parent = this._backPlate;
        this._frontPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);
        this._frontPlate.isPickable = false;
        this._frontPlate.setEnabled(false);
        this._textPlate = _super.prototype._createNode.call(this, scene);
        this._textPlate.parent = this._backPlate;
        this._textPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Vector3.Forward(scene.useRightHandedSystem).scale(-0.08);
        this._textPlate.isPickable = false;
        return this._backPlate;
    };
    HolographicButton.prototype._applyFacade = function (facadeTexture) {
        this._plateMaterial.emissiveTexture = facadeTexture;
        this._plateMaterial.opacityTexture = facadeTexture;
    };
    HolographicButton.prototype._createBackMaterial = function (mesh) {
        var _this = this;
        this._backMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_2__.FluentMaterial(this.name + "Back Material", mesh.getScene());
        this._backMaterial.renderHoverLight = true;
        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(function (pickedPoint) {
            if (pickedPoint) {
                _this._backMaterial.hoverPosition = pickedPoint;
                _this._backMaterial.hoverColor.a = 1.0;
            }
            else {
                _this._backMaterial.hoverColor.a = 0;
            }
        });
    };
    HolographicButton.prototype._createFrontMaterial = function (mesh) {
        this._frontMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_2__.FluentMaterial(this.name + "Front Material", mesh.getScene());
        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow
        this._frontMaterial.alpha = 0.5; // Additive
        this._frontMaterial.renderBorders = true;
    };
    HolographicButton.prototype._createPlateMaterial = function (mesh) {
        this._plateMaterial = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.StandardMaterial(this.name + "Plate Material", mesh.getScene());
        this._plateMaterial.specularColor = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_1__.Color3.Black();
    };
    HolographicButton.prototype._affectMaterial = function (mesh) {
        // Back
        if (this._shareMaterials) {
            if (!this._host._sharedMaterials["backFluentMaterial"]) {
                this._createBackMaterial(mesh);
                this._host._sharedMaterials["backFluentMaterial"] = this._backMaterial;
            }
            else {
                this._backMaterial = this._host._sharedMaterials["backFluentMaterial"];
            }
            // Front
            if (!this._host._sharedMaterials["frontFluentMaterial"]) {
                this._createFrontMaterial(mesh);
                this._host._sharedMaterials["frontFluentMaterial"] = this._frontMaterial;
            }
            else {
                this._frontMaterial = this._host._sharedMaterials["frontFluentMaterial"];
            }
        }
        else {
            this._createBackMaterial(mesh);
            this._createFrontMaterial(mesh);
        }
        this._createPlateMaterial(mesh);
        this._backPlate.material = this._backMaterial;
        this._frontPlate.material = this._frontMaterial;
        this._textPlate.material = this._plateMaterial;
        this._rebuildContent();
    };
    /**
     * Releases all associated resources
     */
    HolographicButton.prototype.dispose = function () {
        _super.prototype.dispose.call(this); // will dispose main mesh ie. back plate
        this._disposeTooltip();
        if (!this.shareMaterials) {
            this._backMaterial.dispose();
            this._frontMaterial.dispose();
            this._plateMaterial.dispose();
            if (this._pickedPointObserver) {
                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
                this._pickedPointObserver = null;
            }
        }
    };
    return HolographicButton;
}(_button3D__WEBPACK_IMPORTED_MODULE_0__.Button3D));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/holographicSlate.ts":
/*!************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/holographicSlate.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HolographicSlate: () => (/* binding */ HolographicSlate)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _contentDisplay3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contentDisplay3D */ "../../../dev/gui/src/3D/controls/contentDisplay3D.ts");
/* harmony import */ var _touchHolographicButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./touchHolographicButton */ "../../../dev/gui/src/3D/controls/touchHolographicButton.ts");
/* harmony import */ var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../2D/advancedDynamicTexture */ "../../../dev/gui/src/2D/advancedDynamicTexture.ts");
/* harmony import */ var _2D_controls_control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../2D/controls/control */ "../../../dev/gui/src/2D/controls/control.ts");
/* harmony import */ var _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../2D/controls/textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");
/* harmony import */ var _behaviors_defaultBehavior__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../behaviors/defaultBehavior */ "../../../dev/gui/src/3D/behaviors/defaultBehavior.ts");
/* harmony import */ var _gizmos_slateGizmo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../gizmos/slateGizmo */ "../../../dev/gui/src/3D/gizmos/slateGizmo.ts");
/* harmony import */ var _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../materials/fluent/fluentMaterial */ "../../../dev/gui/src/3D/materials/fluent/fluentMaterial.ts");
/* harmony import */ var _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../materials/fluentBackplate/fluentBackplateMaterial */ "../../../dev/gui/src/3D/materials/fluentBackplate/fluentBackplateMaterial.ts");
/* harmony import */ var babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! babylonjs/Meshes/mesh.vertexData */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__);




















/**
 * Class used to create a holographic slate
 * @since 5.0.0
 */
var HolographicSlate = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__extends)(HolographicSlate, _super);
    /**
     * Creates a new slate
     * @param name defines the control name
     */
    function HolographicSlate(name) {
        var _this = _super.call(this, name) || this;
        /**
         * Margin between title bar and contentplate
         */
        _this.titleBarMargin = 0.005;
        /**
         * Origin in local coordinates (top left corner)
         */
        _this.origin = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3(0, 0, 0);
        _this._dimensions = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector2(21.875, 12.5);
        _this._titleBarHeight = 0.625;
        _this._titleText = "";
        _this._contentScaleRatio = 1;
        /**
         * Minimum dimensions of the slate
         */
        _this.minDimensions = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector2(15.625, 6.25);
        /**
         * Default dimensions of the slate
         */
        _this.defaultDimensions = _this._dimensions.clone();
        _this._followButton = new _touchHolographicButton__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicButton("followButton" + _this.name);
        _this._followButton.isToggleButton = true;
        _this._closeButton = new _touchHolographicButton__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicButton("closeButton" + _this.name);
        _this._contentViewport = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Viewport(0, 0, 1, 1);
        _this._contentDragBehavior = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.PointerDragBehavior({
            dragPlaneNormal: new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3(0, 0, -1),
        });
        return _this;
    }
    Object.defineProperty(HolographicSlate.prototype, "defaultBehavior", {
        /**
         * Regroups all mesh behaviors for the slate
         */
        get: function () {
            return this._defaultBehavior;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicSlate.prototype, "dimensions", {
        /**
         * 2D dimensions of the slate
         */
        get: function () {
            return this._dimensions;
        },
        set: function (value) {
            //clamp, respecting ratios
            var scale = 1.0;
            if (value.x < this.minDimensions.x || value.y < this.minDimensions.y) {
                var newRatio = value.x / value.y;
                var minRatio = this.minDimensions.x / this.minDimensions.y;
                if (minRatio > newRatio) {
                    // We just need to make sure the x-val is greater than the min
                    scale = this.minDimensions.x / value.x;
                }
                else {
                    // We just need to make sure the y-val is greater than the min
                    scale = this.minDimensions.y / value.y;
                }
            }
            this._dimensions.copyFrom(value).scaleInPlace(scale);
            this._updatePivot();
            this._positionElements();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicSlate.prototype, "titleBarHeight", {
        /**
         * Height of the title bar component
         */
        get: function () {
            return this._titleBarHeight;
        },
        set: function (value) {
            this._titleBarHeight = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicSlate.prototype, "renderingGroupId", {
        get: function () {
            return this._titleBar.renderingGroupId;
        },
        /**
         * Rendering ground id of all the meshes
         */
        set: function (id) {
            this._titleBar.renderingGroupId = id;
            this._titleBarTitle.renderingGroupId = id;
            this._contentPlate.renderingGroupId = id;
            this._backPlate.renderingGroupId = id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HolographicSlate.prototype, "title", {
        get: function () {
            return this._titleText;
        },
        /**
         * The title text displayed at the top of the slate
         */
        set: function (title) {
            this._titleText = title;
            if (this._titleTextComponent) {
                this._titleTextComponent.text = title;
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Apply the facade texture (created from the content property).
     * This function can be overloaded by child classes
     * @param facadeTexture defines the AdvancedDynamicTexture to use
     */
    HolographicSlate.prototype._applyFacade = function (facadeTexture) {
        this._contentMaterial.albedoTexture = facadeTexture;
        this._resetContentPositionAndZoom();
        this._applyContentViewport();
        facadeTexture.attachToMesh(this._contentPlate, true);
    };
    HolographicSlate.prototype._addControl = function (control) {
        control._host = this._host;
        if (this._host.utilityLayer) {
            control._prepareNode(this._host.utilityLayer.utilityLayerScene);
        }
    };
    HolographicSlate.prototype._getTypeName = function () {
        return "HolographicSlate";
    };
    /**
     * @internal
     */
    HolographicSlate.prototype._positionElements = function () {
        var followButton = this._followButton;
        var closeButton = this._closeButton;
        var titleBar = this._titleBar;
        var titleBarTitle = this._titleBarTitle;
        var contentPlate = this._contentPlate;
        var backPlate = this._backPlate;
        if (followButton && closeButton && titleBar) {
            closeButton.scaling.setAll(this.titleBarHeight);
            followButton.scaling.setAll(this.titleBarHeight);
            closeButton.position.copyFromFloats(this.dimensions.x - this.titleBarHeight / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);
            followButton.position.copyFromFloats(this.dimensions.x - (3 * this.titleBarHeight) / 2, -this.titleBarHeight / 2, 0).addInPlace(this.origin);
            var contentPlateHeight = this.dimensions.y - this.titleBarHeight - this.titleBarMargin;
            var rightHandScene = contentPlate.getScene().useRightHandedSystem;
            titleBar.scaling.set(this.dimensions.x, this.titleBarHeight, babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon);
            titleBarTitle.scaling.set(this.dimensions.x - 2 * this.titleBarHeight, this.titleBarHeight, babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon);
            contentPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon);
            backPlate.scaling.copyFromFloats(this.dimensions.x, contentPlateHeight, babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon);
            titleBar.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight / 2), 0).addInPlace(this.origin);
            titleBarTitle.position
                .copyFromFloats(this.dimensions.x / 2 - this.titleBarHeight, -(this.titleBarHeight / 2), rightHandScene ? babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon : -babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon)
                .addInPlace(this.origin);
            contentPlate.position.copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), 0).addInPlace(this.origin);
            backPlate.position
                .copyFromFloats(this.dimensions.x / 2, -(this.titleBarHeight + this.titleBarMargin + contentPlateHeight / 2), rightHandScene ? -babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon : babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon)
                .addInPlace(this.origin);
            // Update the title's AdvancedDynamicTexture scale to avoid visual stretching
            this._titleTextComponent.host.scaleTo((HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y * titleBarTitle.scaling.x) / titleBarTitle.scaling.y, HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y);
            var aspectRatio = this.dimensions.x / contentPlateHeight;
            this._contentViewport.width = this._contentScaleRatio;
            this._contentViewport.height = this._contentScaleRatio / aspectRatio;
            this._applyContentViewport();
            if (this._gizmo) {
                this._gizmo.updateBoundingBox();
            }
        }
    };
    HolographicSlate.prototype._applyContentViewport = function () {
        var _a;
        if (((_a = this._contentPlate) === null || _a === void 0 ? void 0 : _a.material) && this._contentPlate.material.albedoTexture) {
            var tex = this._contentPlate.material.albedoTexture;
            tex.uScale = this._contentScaleRatio;
            tex.vScale = (this._contentScaleRatio / this._contentViewport.width) * this._contentViewport.height;
            tex.uOffset = this._contentViewport.x;
            tex.vOffset = this._contentViewport.y;
        }
    };
    HolographicSlate.prototype._resetContentPositionAndZoom = function () {
        this._contentViewport.x = 0;
        this._contentViewport.y = 1 - this._contentViewport.height / this._contentViewport.width;
        this._contentScaleRatio = 1;
    };
    /**
     * @internal
     */
    HolographicSlate.prototype._updatePivot = function () {
        if (!this.mesh) {
            return;
        }
        // Update pivot point so it is at the center of geometry
        // As origin is topleft corner in 2D, dimensions are calculated towards bottom right corner, thus y axis is downwards
        var center = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3(this.dimensions.x * 0.5, -this.dimensions.y * 0.5, babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon);
        center.addInPlace(this.origin);
        center.z = 0;
        var origin = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3(0, 0, 0);
        babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.TransformCoordinatesToRef(origin, this.mesh.computeWorldMatrix(true), origin);
        this.mesh.setPivotPoint(center);
        var origin2 = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3(0, 0, 0);
        babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.TransformCoordinatesToRef(origin2, this.mesh.computeWorldMatrix(true), origin2);
        this.mesh.position.addInPlace(origin).subtractInPlace(origin2);
    };
    // Mesh association
    HolographicSlate.prototype._createNode = function (scene) {
        var _this = this;
        var node = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Mesh("slate_" + this.name, scene);
        this._titleBar = (0,babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.CreateBox)("titleBar_" + this.name, { size: 1 }, scene);
        this._titleBarTitle = (0,babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.CreatePlane)("titleText_" + this.name, { size: 1 }, scene);
        this._titleBarTitle.parent = node;
        this._titleBarTitle.isPickable = false;
        var adt = _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_2__.AdvancedDynamicTexture.CreateForMesh(this._titleBarTitle);
        this._titleTextComponent = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_4__.TextBlock("titleText_" + this.name, this._titleText);
        this._titleTextComponent.textWrapping = 2 /* TextWrapping.Ellipsis */;
        this._titleTextComponent.textHorizontalAlignment = _2D_controls_control__WEBPACK_IMPORTED_MODULE_3__.Control.HORIZONTAL_ALIGNMENT_LEFT;
        this._titleTextComponent.color = "white";
        this._titleTextComponent.fontSize = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 2;
        this._titleTextComponent.paddingLeft = HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y / 4;
        adt.addControl(this._titleTextComponent);
        if (scene.useRightHandedSystem) {
            var faceUV = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector4(0, 0, 1, 1);
            this._contentPlate = (0,babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.CreatePlane)("contentPlate_" + this.name, { size: 1, sideOrientation: babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.VertexData.BACKSIDE, frontUVs: faceUV }, scene);
            this._backPlate = (0,babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.CreatePlane)("backPlate_" + this.name, { size: 1, sideOrientation: babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.VertexData.FRONTSIDE }, scene);
        }
        else {
            var faceUV = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector4(0, 0, 1, 1);
            this._contentPlate = (0,babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.CreatePlane)("contentPlate_" + this.name, { size: 1, sideOrientation: babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.VertexData.FRONTSIDE, frontUVs: faceUV }, scene);
            this._backPlate = (0,babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.CreatePlane)("backPlate_" + this.name, { size: 1, sideOrientation: babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.VertexData.BACKSIDE }, scene);
        }
        this._titleBar.parent = node;
        this._titleBar.isNearGrabbable = true;
        this._contentPlate.parent = node;
        this._backPlate.parent = node;
        this._attachContentPlateBehavior();
        this._addControl(this._followButton);
        this._addControl(this._closeButton);
        var followButton = this._followButton;
        var closeButton = this._closeButton;
        followButton.node.parent = node;
        closeButton.node.parent = node;
        this._positionElements();
        this._followButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.FOLLOW_ICON_FILENAME;
        this._closeButton.imageUrl = HolographicSlate.ASSETS_BASE_URL + HolographicSlate.CLOSE_ICON_FILENAME;
        this._followButton.isBackplateVisible = false;
        this._closeButton.isBackplateVisible = false;
        this._followButton.onToggleObservable.add(function (isToggled) {
            _this._defaultBehavior.followBehaviorEnabled = isToggled;
            if (_this._defaultBehavior.followBehaviorEnabled) {
                _this._defaultBehavior.followBehavior.recenter();
            }
        });
        this._closeButton.onPointerClickObservable.add(function () {
            _this.dispose();
        });
        node.rotationQuaternion = babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Quaternion.Identity();
        node.isVisible = false;
        return node;
    };
    HolographicSlate.prototype._attachContentPlateBehavior = function () {
        var _this = this;
        this._contentDragBehavior.attach(this._contentPlate);
        this._contentDragBehavior.moveAttached = false;
        this._contentDragBehavior.useObjectOrientationForDragging = true;
        this._contentDragBehavior.updateDragPlane = false;
        var origin = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3();
        var worldDimensions = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3();
        var upWorld = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3();
        var rightWorld = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3();
        var projectedOffset = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector2();
        var startViewport;
        var worldMatrix;
        this._contentDragBehavior.onDragStartObservable.add(function (event) {
            if (!_this.node) {
                return;
            }
            startViewport = _this._contentViewport.clone();
            worldMatrix = _this.node.computeWorldMatrix(true);
            origin.copyFrom(event.dragPlanePoint);
            worldDimensions.set(_this.dimensions.x, _this.dimensions.y, babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon);
            worldDimensions.y -= _this.titleBarHeight + _this.titleBarMargin;
            babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.TransformNormalToRef(worldDimensions, worldMatrix, worldDimensions);
            upWorld.copyFromFloats(0, 1, 0);
            babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.TransformNormalToRef(upWorld, worldMatrix, upWorld);
            rightWorld.copyFromFloats(1, 0, 0);
            babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.TransformNormalToRef(rightWorld, worldMatrix, rightWorld);
            upWorld.normalize();
            upWorld.scaleInPlace(1 / babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.Dot(upWorld, worldDimensions));
            rightWorld.normalize();
            rightWorld.scaleInPlace(1 / babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.Dot(rightWorld, worldDimensions));
        });
        var offset = new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3();
        this._contentDragBehavior.onDragObservable.add(function (event) {
            offset.copyFrom(event.dragPlanePoint);
            offset.subtractInPlace(origin);
            projectedOffset.copyFromFloats(babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.Dot(offset, rightWorld), babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.Dot(offset, upWorld));
            // By default, content takes full width available and height is cropped to keep aspect ratio
            _this._contentViewport.x = babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Scalar.Clamp(startViewport.x - offset.x, 0, 1 - _this._contentViewport.width * _this._contentScaleRatio);
            _this._contentViewport.y = babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Scalar.Clamp(startViewport.y - offset.y, 0, 1 - _this._contentViewport.height * _this._contentScaleRatio);
            _this._applyContentViewport();
        });
    };
    HolographicSlate.prototype._affectMaterial = function (mesh) {
        // TODO share materials
        this._titleBarMaterial = new _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_8__.FluentBackplateMaterial("".concat(this.name, " plateMaterial"), mesh.getScene());
        this._contentMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_7__.FluentMaterial("".concat(this.name, " contentMaterial"), mesh.getScene());
        this._contentMaterial.renderBorders = true;
        this._backMaterial = new _materials_fluentBackplate_fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_8__.FluentBackplateMaterial("".concat(this.name, " backPlate"), mesh.getScene());
        this._backMaterial.lineWidth = babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Epsilon;
        this._backMaterial.radius = 0.005;
        this._backMaterial.backFaceCulling = true;
        this._titleBar.material = this._titleBarMaterial;
        this._contentPlate.material = this._contentMaterial;
        this._backPlate.material = this._backMaterial;
        this._resetContent();
        this._applyContentViewport();
    };
    /**
     * @internal
     */
    HolographicSlate.prototype._prepareNode = function (scene) {
        var _this = this;
        _super.prototype._prepareNode.call(this, scene);
        this._gizmo = new _gizmos_slateGizmo__WEBPACK_IMPORTED_MODULE_6__.SlateGizmo(this._host.utilityLayer);
        this._gizmo.attachedSlate = this;
        this._defaultBehavior = new _behaviors_defaultBehavior__WEBPACK_IMPORTED_MODULE_5__.DefaultBehavior();
        this._defaultBehavior.attach(this.node, [this._titleBar]);
        this._defaultBehavior.sixDofDragBehavior.onDragStartObservable.add(function () {
            _this._followButton.isToggled = false;
        });
        this._positionChangedObserver = this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.add(function () {
            _this._gizmo.updateBoundingBox();
        });
        this._updatePivot();
        this.resetDefaultAspectAndPose(false);
    };
    /**
     * Resets the aspect and pose of the slate so it is right in front of the active camera, facing towards it.
     * @param resetAspect Should the slate's dimensions/aspect ratio be reset as well
     */
    HolographicSlate.prototype.resetDefaultAspectAndPose = function (resetAspect) {
        if (resetAspect === void 0) { resetAspect = true; }
        if (!this._host || !this._host.utilityLayer || !this.node) {
            return;
        }
        var scene = this._host.utilityLayer.utilityLayerScene;
        var camera = scene.activeCamera;
        if (camera) {
            var worldMatrix = camera.getWorldMatrix();
            var backward = babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.TransformNormal(babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3.Backward(scene.useRightHandedSystem), worldMatrix);
            this.origin.setAll(0);
            this._gizmo.updateBoundingBox();
            var pivot = this.node.getAbsolutePivotPoint();
            this.node.position.copyFrom(camera.position).subtractInPlace(backward).subtractInPlace(pivot);
            this.node.rotationQuaternion = babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Quaternion.FromLookDirectionLH(backward, new babylonjs_Behaviors_Meshes_pointerDragBehavior__WEBPACK_IMPORTED_MODULE_9__.Vector3(0, 1, 0));
            if (resetAspect) {
                this.dimensions = this.defaultDimensions;
            }
        }
    };
    /**
     * Releases all associated resources
     */
    HolographicSlate.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._titleBarMaterial.dispose();
        this._contentMaterial.dispose();
        this._titleBar.dispose();
        this._titleBarTitle.dispose();
        this._contentPlate.dispose();
        this._backPlate.dispose();
        this._followButton.dispose();
        this._closeButton.dispose();
        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
        this._defaultBehavior.sixDofDragBehavior.onPositionChangedObservable.remove(this._positionChangedObserver);
        this._defaultBehavior.detach();
        this._gizmo.dispose();
        this._contentDragBehavior.detach();
    };
    /**
     * Base Url for the assets.
     */
    HolographicSlate.ASSETS_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
    /**
     * File name for the close icon.
     */
    HolographicSlate.CLOSE_ICON_FILENAME = "IconClose.png";
    /**
     * File name for the close icon.
     */
    HolographicSlate.FOLLOW_ICON_FILENAME = "IconFollowMe.png";
    HolographicSlate._DEFAULT_TEXT_RESOLUTION_Y = 102.4;
    return HolographicSlate;
}(_contentDisplay3D__WEBPACK_IMPORTED_MODULE_0__.ContentDisplay3D));


/***/ }),

/***/ "../../../dev/gui/src/3D/controls/index.ts":
/*!*************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/index.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractButton3D: () => (/* reexport safe */ _abstractButton3D__WEBPACK_IMPORTED_MODULE_0__.AbstractButton3D),
/* harmony export */   Button3D: () => (/* reexport safe */ _button3D__WEBPACK_IMPORTED_MODULE_1__.Button3D),
/* harmony export */   Container3D: () => (/* reexport safe */ _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D),
/* harmony export */   Control3D: () => (/* reexport safe */ _control3D__WEBPACK_IMPORTED_MODULE_3__.Control3D),
/* harmony export */   CylinderPanel: () => (/* reexport safe */ _cylinderPanel__WEBPACK_IMPORTED_MODULE_4__.CylinderPanel),
/* harmony export */   HandMenu: () => (/* reexport safe */ _handMenu__WEBPACK_IMPORTED_MODULE_5__.HandMenu),
/* harmony export */   HolographicBackplate: () => (/* reexport safe */ _holographicBackplate__WEBPACK_IMPORTED_MODULE_6__.HolographicBackplate),
/* harmony export */   HolographicButton: () => (/* reexport safe */ _holographicButton__WEBPACK_IMPORTED_MODULE_7__.HolographicButton),
/* harmony export */   HolographicSlate: () => (/* reexport safe */ _holographicSlate__WEBPACK_IMPORTED_MODULE_8__.HolographicSlate),
/* harmony export */   MeshButton3D: () => (/* reexport safe */ _meshButton3D__WEBPACK_IMPORTED_MODULE_9__.MeshButton3D),
/* harmony export */   NearMenu: () => (/* reexport safe */ _nearMenu__WEBPACK_IMPORTED_MODULE_10__.NearMenu),
/* harmony export */   PlanePanel: () => (/* reexport safe */ _planePanel__WEBPACK_IMPORTED_MODULE_11__.PlanePanel),
/* harmony export */   ScatterPanel: () => (/* reexport safe */ _scatterPanel__WEBPACK_IMPORTED_MODULE_12__.ScatterPanel),
/* harmony export */   Slider3D: () => (/* reexport safe */ _slider3D__WEBPACK_IMPORTED_MODULE_13__.Slider3D),
/* harmony export */   SpherePanel: () => (/* reexport safe */ _spherePanel__WEBPACK_IMPORTED_MODULE_14__.SpherePanel),
/* harmony export */   StackPanel3D: () => (/* reexport safe */ _stackPanel3D__WEBPACK_IMPORTED_MODULE_15__.StackPanel3D),
/* harmony export */   TouchButton3D: () => (/* reexport safe */ _touchButton3D__WEBPACK_IMPORTED_MODULE_16__.TouchButton3D),
/* harmony export */   TouchHolographicButton: () => (/* reexport safe */ _touchHolographicButton__WEBPACK_IMPORTED_MODULE_18__.TouchHolographicButton),
/* harmony export */   TouchHolographicButtonV3: () => (/* reexport safe */ _MRTK3_touchHolographicButton__WEBPACK_IMPORTED_MODULE_21__.TouchHolographicButton),
/* harmony export */   TouchHolographicMenu: () => (/* reexport safe */ _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_19__.TouchHolographicMenu),
/* harmony export */   TouchMeshButton3D: () => (/* reexport safe */ _touchMeshButton3D__WEBPACK_IMPORTED_MODULE_17__.TouchMeshButton3D),
/* harmony export */   VolumeBasedPanel: () => (/* reexport safe */ _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_20__.VolumeBasedPanel)
/* harmony export */ });
/* harmony import */ var _abstractButton3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstractButton3D */ "../../../dev/gui/src/3D/controls/abstractButton3D.ts");
/* harmony import */ var _button3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./button3D */ "../../../dev/gui/src/3D/controls/button3D.ts");
/* harmony import */ var _container3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./container3D */ "../../../dev/gui/src/3D/controls/container3D.ts");
/* harmony import */ var _control3D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./control3D */ "../../../dev/gui/src/3D/controls/control3D.ts");
/* harmony import */ var _cylinderPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cylinderPanel */ "../../../dev/gui/src/3D/controls/cylinderPanel.ts");
/* harmony import */ var _handMenu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./handMenu */ "../../../dev/gui/src/3D/controls/handMenu.ts");
/* harmony import */ var _holographicBackplate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./holographicBackplate */ "../../../dev/gui/src/3D/controls/holographicBackplate.ts");
/* harmony import */ var _holographicButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./holographicButton */ "../../../dev/gui/src/3D/controls/holographicButton.ts");
/* harmony import */ var _holographicSlate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./holographicSlate */ "../../../dev/gui/src/3D/controls/holographicSlate.ts");
/* harmony import */ var _meshButton3D__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./meshButton3D */ "../../../dev/gui/src/3D/controls/meshButton3D.ts");
/* harmony import */ var _nearMenu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./nearMenu */ "../../../dev/gui/src/3D/controls/nearMenu.ts");
/* harmony import */ var _planePanel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./planePanel */ "../../../dev/gui/src/3D/controls/planePanel.ts");
/* harmony import */ var _scatterPanel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./scatterPanel */ "../../../dev/gui/src/3D/controls/scatterPanel.ts");
/* harmony import */ var _slider3D__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./slider3D */ "../../../dev/gui/src/3D/controls/slider3D.ts");
/* harmony import */ var _spherePanel__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./spherePanel */ "../../../dev/gui/src/3D/controls/spherePanel.ts");
/* harmony import */ var _stackPanel3D__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./stackPanel3D */ "../../../dev/gui/src/3D/controls/stackPanel3D.ts");
/* harmony import */ var _touchButton3D__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./touchButton3D */ "../../../dev/gui/src/3D/controls/touchButton3D.ts");
/* harmony import */ var _touchMeshButton3D__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./touchMeshButton3D */ "../../../dev/gui/src/3D/controls/touchMeshButton3D.ts");
/* harmony import */ var _touchHolographicButton__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./touchHolographicButton */ "../../../dev/gui/src/3D/controls/touchHolographicButton.ts");
/* harmony import */ var _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./touchHolographicMenu */ "../../../dev/gui/src/3D/controls/touchHolographicMenu.ts");
/* harmony import */ var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./volumeBasedPanel */ "../../../dev/gui/src/3D/controls/volumeBasedPanel.ts");
/* harmony import */ var _MRTK3_touchHolographicButton__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./MRTK3/touchHolographicButton */ "../../../dev/gui/src/3D/controls/MRTK3/touchHolographicButton.ts");





















// MRTK3 Controls



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/meshButton3D.ts":
/*!********************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/meshButton3D.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MeshButton3D: () => (/* binding */ MeshButton3D)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _button3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button3D */ "../../../dev/gui/src/3D/controls/button3D.ts");


/**
 * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene
 */
var MeshButton3D = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(MeshButton3D, _super);
    /**
     * Creates a new 3D button based on a mesh
     * @param mesh mesh to become a 3D button
     * @param name defines the control name
     */
    function MeshButton3D(mesh, name) {
        var _this = _super.call(this, name) || this;
        _this._currentMesh = mesh;
        /**
         * Provides a default behavior on hover/out & up/down
         * Override those function to create your own desired behavior specific to your mesh
         */
        _this.pointerEnterAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(1.1);
        };
        _this.pointerOutAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(1.0 / 1.1);
        };
        _this.pointerDownAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(0.95);
        };
        _this.pointerUpAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(1.0 / 0.95);
        };
        return _this;
    }
    MeshButton3D.prototype._getTypeName = function () {
        return "MeshButton3D";
    };
    // Mesh association
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    MeshButton3D.prototype._createNode = function (scene) {
        var _this = this;
        this._currentMesh.getChildMeshes().forEach(function (mesh) {
            _this._injectGUI3DReservedDataStore(mesh).control = _this;
        });
        return this._currentMesh;
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    MeshButton3D.prototype._affectMaterial = function (mesh) { };
    return MeshButton3D;
}(_button3D__WEBPACK_IMPORTED_MODULE_0__.Button3D));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/nearMenu.ts":
/*!****************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/nearMenu.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NearMenu: () => (/* binding */ NearMenu)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _touchHolographicButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./touchHolographicButton */ "../../../dev/gui/src/3D/controls/touchHolographicButton.ts");
/* harmony import */ var _behaviors_defaultBehavior__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../behaviors/defaultBehavior */ "../../../dev/gui/src/3D/behaviors/defaultBehavior.ts");
/* harmony import */ var _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./touchHolographicMenu */ "../../../dev/gui/src/3D/controls/touchHolographicMenu.ts");




/**
 * NearMenu that displays buttons and follows the camera
 * @since 5.0.0
 */
var NearMenu = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(NearMenu, _super);
    /**
     * Creates a near menu GUI 3D control
     * @param name name of the near menu
     */
    function NearMenu(name) {
        var _this = _super.call(this, name) || this;
        _this._isPinned = false;
        _this._defaultBehavior = new _behaviors_defaultBehavior__WEBPACK_IMPORTED_MODULE_1__.DefaultBehavior();
        _this._dragObserver = _this._defaultBehavior.sixDofDragBehavior.onDragObservable.add(function () {
            _this.isPinned = true;
        });
        _this.backPlateMargin = 1;
        return _this;
    }
    Object.defineProperty(NearMenu.prototype, "defaultBehavior", {
        /**
         * Regroups all mesh behaviors for the near menu
         */
        get: function () {
            return this._defaultBehavior;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NearMenu.prototype, "isPinned", {
        /**
         * Indicates if the near menu is world-pinned
         */
        get: function () {
            return this._isPinned;
        },
        set: function (value) {
            // Tell the pin button to toggle if this was called manually, for clean state control
            if (this._pinButton.isToggled !== value) {
                this._pinButton.isToggled = value;
                return;
            }
            this._isPinned = value;
            if (value) {
                this._defaultBehavior.followBehaviorEnabled = false;
            }
            else {
                this._defaultBehavior.followBehaviorEnabled = true;
            }
        },
        enumerable: false,
        configurable: true
    });
    NearMenu.prototype._createPinButton = function (parent) {
        var _this = this;
        var control = new _touchHolographicButton__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicButton("pin" + this.name, false);
        control.imageUrl = NearMenu._ASSETS_BASE_URL + NearMenu._PIN_ICON_FILENAME;
        control.parent = this;
        control._host = this._host;
        control.isToggleButton = true;
        control.onToggleObservable.add(function (newState) {
            _this.isPinned = newState;
        });
        if (this._host.utilityLayer) {
            control._prepareNode(this._host.utilityLayer.utilityLayerScene);
            control.scaling.scaleInPlace(_touchHolographicMenu__WEBPACK_IMPORTED_MODULE_2__.TouchHolographicMenu.MENU_BUTTON_SCALE);
            if (control.node) {
                control.node.parent = parent;
            }
        }
        return control;
    };
    NearMenu.prototype._createNode = function (scene) {
        var node = _super.prototype._createNode.call(this, scene);
        this._pinButton = this._createPinButton(node);
        this.isPinned = false;
        this._defaultBehavior.attach(node, [this._backPlate]);
        this._defaultBehavior.followBehavior.ignoreCameraPitchAndRoll = true;
        this._defaultBehavior.followBehavior.pitchOffset = -15;
        this._defaultBehavior.followBehavior.minimumDistance = 0.3;
        this._defaultBehavior.followBehavior.defaultDistance = 0.4;
        this._defaultBehavior.followBehavior.maximumDistance = 0.6;
        this._backPlate.isNearGrabbable = true;
        node.isVisible = false;
        return node;
    };
    NearMenu.prototype._finalProcessing = function () {
        _super.prototype._finalProcessing.call(this);
        this._pinButton.position.copyFromFloats((this._backPlate.scaling.x + _touchHolographicMenu__WEBPACK_IMPORTED_MODULE_2__.TouchHolographicMenu.MENU_BUTTON_SCALE) / 2, this._backPlate.scaling.y / 2, 0);
    };
    /**
     * Disposes the near menu
     */
    NearMenu.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._defaultBehavior.sixDofDragBehavior.onDragObservable.remove(this._dragObserver);
        this._defaultBehavior.detach();
    };
    /**
     * Base Url for the assets.
     */
    NearMenu._ASSETS_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
    /**
     * File name for the close icon.
     */
    NearMenu._PIN_ICON_FILENAME = "IconPin.png";
    return NearMenu;
}(_touchHolographicMenu__WEBPACK_IMPORTED_MODULE_2__.TouchHolographicMenu));


/***/ }),

/***/ "../../../dev/gui/src/3D/controls/planePanel.ts":
/*!******************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/planePanel.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PlanePanel: () => (/* binding */ PlanePanel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.vector */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _container3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./container3D */ "../../../dev/gui/src/3D/controls/container3D.ts");
/* harmony import */ var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./volumeBasedPanel */ "../../../dev/gui/src/3D/controls/volumeBasedPanel.ts");




/**
 * Class used to create a container panel deployed on the surface of a plane
 */
var PlanePanel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(PlanePanel, _super);
    function PlanePanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PlanePanel.prototype._mapGridNode = function (control, nodePosition) {
        var mesh = control.mesh;
        if (!mesh) {
            return;
        }
        control.position = nodePosition.clone();
        var target = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0];
        target.copyFrom(nodePosition);
        switch (this.orientation) {
            case _container3D__WEBPACK_IMPORTED_MODULE_1__.Container3D.FACEORIGIN_ORIENTATION:
            case _container3D__WEBPACK_IMPORTED_MODULE_1__.Container3D.FACEFORWARD_ORIENTATION:
                target.addInPlace(new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 1));
                mesh.lookAt(target);
                break;
            case _container3D__WEBPACK_IMPORTED_MODULE_1__.Container3D.FACEFORWARDREVERSED_ORIENTATION:
            case _container3D__WEBPACK_IMPORTED_MODULE_1__.Container3D.FACEORIGINREVERSED_ORIENTATION:
                target.addInPlace(new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, -1));
                mesh.lookAt(target);
                break;
        }
    };
    return PlanePanel;
}(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_2__.VolumeBasedPanel));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/scatterPanel.ts":
/*!********************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/scatterPanel.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScatterPanel: () => (/* binding */ ScatterPanel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.vector */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./volumeBasedPanel */ "../../../dev/gui/src/3D/controls/volumeBasedPanel.ts");
/* harmony import */ var _container3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./container3D */ "../../../dev/gui/src/3D/controls/container3D.ts");





/**
 * Class used to create a container panel where items get randomized planar mapping
 */
var ScatterPanel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ScatterPanel, _super);
    function ScatterPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._iteration = 100.0;
        return _this;
    }
    Object.defineProperty(ScatterPanel.prototype, "iteration", {
        /**
         * Gets or sets the number of iteration to use to scatter the controls (100 by default)
         */
        get: function () {
            return this._iteration;
        },
        set: function (value) {
            var _this = this;
            if (this._iteration === value) {
                return;
            }
            this._iteration = value;
            babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Tools.SetImmediate(function () {
                _this._arrangeChildren();
            });
        },
        enumerable: false,
        configurable: true
    });
    ScatterPanel.prototype._mapGridNode = function (control, nodePosition) {
        var mesh = control.mesh;
        var newPos = this._scatterMapping(nodePosition);
        if (!mesh) {
            return;
        }
        switch (this.orientation) {
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEORIGIN_ORIENTATION:
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEFORWARD_ORIENTATION:
                mesh.lookAt(new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 1));
                break;
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEFORWARDREVERSED_ORIENTATION:
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEORIGINREVERSED_ORIENTATION:
                mesh.lookAt(new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, -1));
                break;
        }
        control.position = newPos;
    };
    ScatterPanel.prototype._scatterMapping = function (source) {
        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;
        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;
        return source;
    };
    ScatterPanel.prototype._finalProcessing = function () {
        var meshes = [];
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (!child.mesh) {
                continue;
            }
            meshes.push(child.mesh);
        }
        for (var count = 0; count < this._iteration; count++) {
            meshes.sort(function (a, b) {
                var distance1 = a.position.lengthSquared();
                var distance2 = b.position.lengthSquared();
                if (distance1 < distance2) {
                    return 1;
                }
                else if (distance1 > distance2) {
                    return -1;
                }
                return 0;
            });
            var radiusPaddingSquared = Math.pow(this.margin, 2.0);
            var cellSize = Math.max(this._cellWidth, this._cellHeight);
            var difference2D = babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector2[0];
            var difference = babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0];
            for (var i = 0; i < meshes.length - 1; i++) {
                for (var j = i + 1; j < meshes.length; j++) {
                    if (i != j) {
                        meshes[j].position.subtractToRef(meshes[i].position, difference);
                        // Ignore Z axis
                        difference2D.x = difference.x;
                        difference2D.y = difference.y;
                        var combinedRadius = cellSize;
                        var distance = difference2D.lengthSquared() - radiusPaddingSquared;
                        var minSeparation = Math.min(distance, radiusPaddingSquared);
                        distance -= minSeparation;
                        if (distance < Math.pow(combinedRadius, 2.0)) {
                            difference2D.normalize();
                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);
                            meshes[j].position.addInPlace(difference);
                            meshes[i].position.subtractInPlace(difference);
                        }
                    }
                }
            }
        }
    };
    return ScatterPanel;
}(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_1__.VolumeBasedPanel));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/slider3D.ts":
/*!****************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/slider3D.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Slider3D: () => (/* binding */ Slider3D)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Loading/sceneLoader */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control3D */ "../../../dev/gui/src/3D/controls/control3D.ts");
/* harmony import */ var _materials_mrdl_mrdlSliderBarMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../materials/mrdl/mrdlSliderBarMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlSliderBarMaterial.ts");
/* harmony import */ var _materials_mrdl_mrdlSliderThumbMaterial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../materials/mrdl/mrdlSliderThumbMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlSliderThumbMaterial.ts");
/* harmony import */ var _materials_mrdl_mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../materials/mrdl/mrdlBackplateMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlBackplateMaterial.ts");










var SLIDER_MIN = 0;
var SLIDER_MAX = 100;
var SLIDER_VAL = 50;
var SLIDER_STEP = 0;
var SLIDER_SCALING = 1.0;
var SLIDER_MARGIN = 0.2;
/**
 * Class used to create a slider in 3D
 */
var Slider3D = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__extends)(Slider3D, _super);
    /**
     * Creates a new slider
     * @param name defines the control name
     * @param sliderBackplateVisible defines if the control has a backplate, default is false
     */
    function Slider3D(name, sliderBackplateVisible) {
        var _this = _super.call(this, name) || this;
        /** Observable raised when the sldier value changes */
        _this.onValueChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        _this._sliderBackplateVisible = sliderBackplateVisible || false;
        _this._minimum = SLIDER_MIN;
        _this._maximum = SLIDER_MAX;
        _this._step = SLIDER_STEP;
        _this._value = SLIDER_VAL;
        return _this;
    }
    Object.defineProperty(Slider3D.prototype, "mesh", {
        /**
         * Gets the mesh used to render this control
         */
        get: function () {
            if (this.node) {
                return this._sliderThumb;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "minimum", {
        /** Gets or sets minimum value */
        get: function () {
            return this._minimum;
        },
        set: function (value) {
            if (this._minimum === value) {
                return;
            }
            this._minimum = Math.max(value, SLIDER_MIN);
            this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "maximum", {
        /** Gets or sets maximum value */
        get: function () {
            return this._maximum;
        },
        set: function (value) {
            if (this._maximum === value) {
                return;
            }
            this._maximum = Math.max(value, this._minimum);
            this._value = Math.max(Math.min(this._value, this._maximum), this._minimum);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "step", {
        /** Gets or sets step value */
        get: function () {
            return this._step;
        },
        set: function (value) {
            if (this._step === value) {
                return;
            }
            this._step = Math.max(Math.min(value, this._maximum - this._minimum), SLIDER_STEP);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "value", {
        /** Gets or sets current value */
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (this._value === value) {
                return;
            }
            this._value = Math.max(Math.min(value, this._maximum), this._minimum);
            if (this._sliderThumb) {
                this._sliderThumb.position.x = this._convertToPosition(this.value);
            }
            this.onValueChangedObservable.notifyObservers(this._value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "start", {
        get: function () {
            if (!this.node) {
                return -SLIDER_SCALING / 2;
            }
            return this._sliderBar.position.x - this._sliderBar.scaling.x / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "end", {
        get: function () {
            if (!this.node) {
                return SLIDER_SCALING / 2;
            }
            return this._sliderBar.position.x + this._sliderBar.scaling.x / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "sliderBarMaterial", {
        /**
         * Gets the slider bar material used by this control
         */
        get: function () {
            return this._sliderBarMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "sliderThumbMaterial", {
        /**
         * Gets the slider thumb material used by this control
         */
        get: function () {
            return this._sliderThumbMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "sliderBackplateMaterial", {
        /**
         * Gets the slider backplate material used by this control
         */
        get: function () {
            return this._sliderBackplateMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "sliderBar", {
        /**
         * Gets the slider bar mesh used by this control
         */
        get: function () {
            return this._sliderBar;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "sliderThumb", {
        /**
         * Gets the slider thumb mesh used by this control
         */
        get: function () {
            return this._sliderThumb;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "sliderBackplate", {
        /**
         * Gets the slider backplate mesh used by this control
         */
        get: function () {
            return this._sliderBackplate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Slider3D.prototype, "isVisible", {
        /** Sets a boolean indicating if the control is visible */
        set: function (value) {
            var _a;
            if (this._isVisible === value) {
                return;
            }
            this._isVisible = value;
            (_a = this.node) === null || _a === void 0 ? void 0 : _a.setEnabled(value);
        },
        enumerable: false,
        configurable: true
    });
    // Mesh association
    Slider3D.prototype._createNode = function (scene) {
        var _this = this;
        var sliderBackplate = (0,babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.CreateBox)("".concat(this.name, "_sliderbackplate"), {
            width: 1.0,
            height: 1.0,
            depth: 1.0,
        }, scene);
        sliderBackplate.isPickable = false;
        sliderBackplate.visibility = 0;
        sliderBackplate.scaling = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 0.5, 0.8);
        babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.SceneLoader.ImportMeshAsync(undefined, Slider3D.MODEL_BASE_URL, Slider3D.MODEL_FILENAME, scene).then(function (result) {
            // make all meshes not pickable. Required meshes' pickable state will be set later.
            result.meshes.forEach(function (m) {
                m.isPickable = false;
            });
            var sliderBackplateModel = result.meshes[1];
            var sliderBarModel = result.meshes[1].clone("".concat(_this.name, "_sliderbar"), sliderBackplate);
            var sliderThumbModel = result.meshes[1].clone("".concat(_this.name, "_sliderthumb"), sliderBackplate);
            sliderBackplateModel.visibility = 0;
            if (_this._sliderBackplateVisible) {
                sliderBackplateModel.visibility = 1;
                sliderBackplateModel.name = "".concat(_this.name, "_sliderbackplate");
                sliderBackplateModel.scaling.x = 1;
                sliderBackplateModel.scaling.z = 0.2;
                sliderBackplateModel.parent = sliderBackplate;
                if (_this._sliderBackplateMaterial) {
                    sliderBackplateModel.material = _this._sliderBackplateMaterial;
                }
                _this._sliderBackplate = sliderBackplateModel;
            }
            if (sliderBarModel) {
                sliderBarModel.parent = sliderBackplate;
                sliderBarModel.position.z = -0.1;
                sliderBarModel.scaling = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3(SLIDER_SCALING - SLIDER_MARGIN, 0.04, 0.3);
                if (_this._sliderBarMaterial) {
                    sliderBarModel.material = _this._sliderBarMaterial;
                }
                _this._sliderBar = sliderBarModel;
            }
            if (sliderThumbModel) {
                sliderThumbModel.parent = sliderBackplate;
                sliderThumbModel.isPickable = true;
                sliderThumbModel.position.z = -0.115;
                sliderThumbModel.scaling = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3(0.025, 0.3, 0.6);
                sliderThumbModel.position.x = _this._convertToPosition(_this.value);
                sliderThumbModel.addBehavior(_this._createBehavior());
                if (_this._sliderThumbMaterial) {
                    sliderThumbModel.material = _this._sliderThumbMaterial;
                }
                _this._sliderThumb = sliderThumbModel;
            }
            _this._injectGUI3DReservedDataStore(sliderBackplate).control = _this;
            sliderBackplate.getChildMeshes().forEach(function (mesh) {
                _this._injectGUI3DReservedDataStore(mesh).control = _this;
            });
        });
        this._affectMaterial(sliderBackplate);
        return sliderBackplate;
    };
    Slider3D.prototype._affectMaterial = function (mesh) {
        var _a, _b, _c;
        this._sliderBackplateMaterial = (_a = this._sliderBackplateMaterial) !== null && _a !== void 0 ? _a : new _materials_mrdl_mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_4__.MRDLBackplateMaterial("".concat(this.name, "_sliderbackplate_material"), mesh.getScene());
        this._sliderBarMaterial = (_b = this._sliderBarMaterial) !== null && _b !== void 0 ? _b : new _materials_mrdl_mrdlSliderBarMaterial__WEBPACK_IMPORTED_MODULE_2__.MRDLSliderBarMaterial("".concat(this.name, "_sliderbar_material"), mesh.getScene());
        this._sliderThumbMaterial = (_c = this._sliderThumbMaterial) !== null && _c !== void 0 ? _c : new _materials_mrdl_mrdlSliderThumbMaterial__WEBPACK_IMPORTED_MODULE_3__.MRDLSliderThumbMaterial("".concat(this.name, "_sliderthumb_material"), mesh.getScene());
    };
    Slider3D.prototype._createBehavior = function () {
        var _this = this;
        var pointerDragBehavior = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerDragBehavior({ dragAxis: babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Right() });
        pointerDragBehavior.moveAttached = false;
        pointerDragBehavior.onDragStartObservable.add(function () {
            _this._draggedPosition = _this._sliderThumb.position.x;
        });
        pointerDragBehavior.onDragObservable.add(function (event) {
            _this._draggedPosition += event.dragDistance / _this.scaling.x;
            _this.value = _this._convertToValue(_this._draggedPosition);
        });
        return pointerDragBehavior;
    };
    Slider3D.prototype._convertToPosition = function (value) {
        var position = ((value - this.minimum) / (this.maximum - this.minimum)) * (this.end - this.start) + this.start;
        return Math.min(Math.max(position, this.start), this.end);
    };
    Slider3D.prototype._convertToValue = function (position) {
        var value = ((position - this.start) / (this.end - this.start)) * (this.maximum - this.minimum);
        value = this.step ? Math.round(value / this.step) * this.step : value;
        return Math.max(Math.min(this.minimum + value, this._maximum), this._minimum);
    };
    /**
     * Releases all associated resources
     */
    Slider3D.prototype.dispose = function () {
        var _a, _b, _c, _d, _e, _f;
        _super.prototype.dispose.call(this);
        (_a = this._sliderBar) === null || _a === void 0 ? void 0 : _a.dispose();
        (_b = this._sliderThumb) === null || _b === void 0 ? void 0 : _b.dispose();
        (_c = this._sliderBarMaterial) === null || _c === void 0 ? void 0 : _c.dispose();
        (_d = this._sliderThumbMaterial) === null || _d === void 0 ? void 0 : _d.dispose();
        (_e = this._sliderBackplate) === null || _e === void 0 ? void 0 : _e.dispose();
        (_f = this._sliderBackplateMaterial) === null || _f === void 0 ? void 0 : _f.dispose();
    };
    /**
     * Base Url for the models.
     */
    Slider3D.MODEL_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
    /**
     * File name for the 8x4 model.
     */
    Slider3D.MODEL_FILENAME = "mrtk-fluent-backplate.glb";
    return Slider3D;
}(_control3D__WEBPACK_IMPORTED_MODULE_1__.Control3D));


/***/ }),

/***/ "../../../dev/gui/src/3D/controls/spherePanel.ts":
/*!*******************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/spherePanel.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SpherePanel: () => (/* binding */ SpherePanel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.axis */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./volumeBasedPanel */ "../../../dev/gui/src/3D/controls/volumeBasedPanel.ts");
/* harmony import */ var _container3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./container3D */ "../../../dev/gui/src/3D/controls/container3D.ts");






/**
 * Class used to create a container panel deployed on the surface of a sphere
 */
var SpherePanel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(SpherePanel, _super);
    function SpherePanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._radius = 5.0;
        return _this;
    }
    Object.defineProperty(SpherePanel.prototype, "radius", {
        /**
         * Gets or sets the radius of the sphere where to project controls (5 by default)
         */
        get: function () {
            return this._radius;
        },
        set: function (value) {
            var _this = this;
            if (this._radius === value) {
                return;
            }
            this._radius = value;
            babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Tools.SetImmediate(function () {
                _this._arrangeChildren();
            });
        },
        enumerable: false,
        configurable: true
    });
    SpherePanel.prototype._mapGridNode = function (control, nodePosition) {
        var mesh = control.mesh;
        if (!mesh) {
            return;
        }
        var newPos = this._sphericalMapping(nodePosition);
        control.position = newPos;
        switch (this.orientation) {
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEORIGIN_ORIENTATION:
                mesh.lookAt(new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));
                break;
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEORIGINREVERSED_ORIENTATION:
                mesh.lookAt(new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(-newPos.x, -newPos.y, -newPos.z));
                break;
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEFORWARD_ORIENTATION:
                break;
            case _container3D__WEBPACK_IMPORTED_MODULE_2__.Container3D.FACEFORWARDREVERSED_ORIENTATION:
                mesh.rotate(babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Axis.Y, Math.PI, 0 /* Space.LOCAL */);
                break;
        }
    };
    SpherePanel.prototype._sphericalMapping = function (source) {
        var newPos = new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, this._radius);
        var xAngle = source.y / this._radius;
        var yAngle = -(source.x / this._radius);
        babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Matrix[0]);
        return babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3.TransformNormal(newPos, babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Matrix[0]);
    };
    return SpherePanel;
}(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_1__.VolumeBasedPanel));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/stackPanel3D.ts":
/*!********************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/stackPanel3D.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StackPanel3D: () => (/* binding */ StackPanel3D)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.vector */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _container3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./container3D */ "../../../dev/gui/src/3D/controls/container3D.ts");




/**
 * Class used to create a stack panel in 3D on XY plane
 */
var StackPanel3D = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(StackPanel3D, _super);
    /**
     * Creates new StackPanel
     * @param isVertical
     */
    function StackPanel3D(isVertical) {
        if (isVertical === void 0) { isVertical = false; }
        var _this = _super.call(this) || this;
        _this._isVertical = false;
        /**
         * Gets or sets the distance between elements
         */
        _this.margin = 0.1;
        _this._isVertical = isVertical;
        return _this;
    }
    Object.defineProperty(StackPanel3D.prototype, "isVertical", {
        /**
         * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)
         */
        get: function () {
            return this._isVertical;
        },
        set: function (value) {
            var _this = this;
            if (this._isVertical === value) {
                return;
            }
            this._isVertical = value;
            babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Tools.SetImmediate(function () {
                _this._arrangeChildren();
            });
        },
        enumerable: false,
        configurable: true
    });
    StackPanel3D.prototype._arrangeChildren = function () {
        var width = 0;
        var height = 0;
        var controlCount = 0;
        var extendSizes = [];
        var currentInverseWorld = babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Matrix.Invert(this.node.computeWorldMatrix(true));
        // Measure
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (!child.mesh) {
                continue;
            }
            controlCount++;
            child.mesh.computeWorldMatrix(true);
            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Matrix[0]);
            var boundingBox = child.mesh.getBoundingInfo().boundingBox;
            var extendSize = babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3.TransformNormal(boundingBox.extendSize, babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Matrix[0]);
            extendSizes.push(extendSize);
            if (this._isVertical) {
                height += extendSize.y;
            }
            else {
                width += extendSize.x;
            }
        }
        if (this._isVertical) {
            height += ((controlCount - 1) * this.margin) / 2;
        }
        else {
            width += ((controlCount - 1) * this.margin) / 2;
        }
        // Arrange
        var offset;
        if (this._isVertical) {
            offset = -height;
        }
        else {
            offset = -width;
        }
        var index = 0;
        for (var _b = 0, _c = this._children; _b < _c.length; _b++) {
            var child = _c[_b];
            if (!child.mesh) {
                continue;
            }
            controlCount--;
            var extendSize = extendSizes[index++];
            if (this._isVertical) {
                child.position.y = offset + extendSize.y;
                child.position.x = 0;
                offset += extendSize.y * 2;
            }
            else {
                child.position.x = offset + extendSize.x;
                child.position.y = 0;
                offset += extendSize.x * 2;
            }
            offset += controlCount > 0 ? this.margin : 0;
        }
    };
    return StackPanel3D;
}(_container3D__WEBPACK_IMPORTED_MODULE_1__.Container3D));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/touchButton3D.ts":
/*!*********************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/touchButton3D.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TouchButton3D: () => (/* binding */ TouchButton3D)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/observable */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _button3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./button3D */ "../../../dev/gui/src/3D/controls/button3D.ts");
// Assumptions: absolute position of button mesh is inside the mesh





/**
 * Class used to create a touchable button in 3D
 */
var TouchButton3D = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(TouchButton3D, _super);
    /**
     * Creates a new touchable button
     * @param name defines the control name
     * @param collisionMesh mesh to track collisions with
     */
    function TouchButton3D(name, collisionMesh) {
        var _this = _super.call(this, name) || this;
        _this._isNearPressed = false;
        _this._interactionSurfaceHeight = 0;
        _this._isToggleButton = false;
        _this._toggleState = false;
        _this._toggleButtonCallback = function () {
            _this._onToggle(!_this._toggleState);
        };
        /**
         * An event triggered when the button is toggled. Only fired if 'isToggleButton' is true
         */
        _this.onToggleObservable = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Observable();
        _this.collidableFrontDirection = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
        if (collisionMesh) {
            _this.collisionMesh = collisionMesh;
        }
        return _this;
    }
    Object.defineProperty(TouchButton3D.prototype, "isActiveNearInteraction", {
        /**
         * Whether the current interaction is caused by near interaction or not
         */
        get: function () {
            return this._isNearPressed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchButton3D.prototype, "collidableFrontDirection", {
        /**
         * Returns the front-facing direction of the button, or Vector3.Zero if there is no 'front'
         */
        get: function () {
            if (this._collisionMesh) {
                // Update the front direction to reflect any rotations of the collision mesh
                var transformedDirection = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0];
                babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.TransformNormalToRef(this._collidableFrontDirection, this._collisionMesh.getWorldMatrix(), transformedDirection);
                return transformedDirection.normalize();
            }
            return this._collidableFrontDirection;
        },
        /**
         * Sets the front-facing direction of the button. Pass in Vector3.Zero to allow interactions from any direction
         * @param frontWorldDir the forward direction of the button
         */
        set: function (frontWorldDir) {
            this._collidableFrontDirection = frontWorldDir.normalize();
            if (this._collisionMesh) {
                var invert = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Matrix[0];
                invert.copyFrom(this._collisionMesh.getWorldMatrix());
                invert.invert();
                babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.TransformNormalToRef(this._collidableFrontDirection, invert, this._collidableFrontDirection);
                this._collidableFrontDirection.normalize();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchButton3D.prototype, "collisionMesh", {
        /**
         * Sets the mesh used for testing input collision
         * @param collisionMesh the new collision mesh for the button
         */
        set: function (collisionMesh) {
            var _this = this;
            var _a;
            // Remove the GUI3DManager's data from the previous collision mesh's reserved data store, and reset interactability
            if (this._collisionMesh) {
                this._collisionMesh.isNearPickable = false;
                if ((_a = this._collisionMesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) {
                    this._collisionMesh.reservedDataStore.GUI3D = {};
                }
                this._collisionMesh.getChildMeshes().forEach(function (mesh) {
                    var _a;
                    mesh.isNearPickable = false;
                    if ((_a = mesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) {
                        mesh.reservedDataStore.GUI3D = {};
                    }
                });
            }
            this._collisionMesh = collisionMesh;
            this._injectGUI3DReservedDataStore(this._collisionMesh).control = this;
            this._collisionMesh.isNearPickable = true;
            this._collisionMesh.getChildMeshes().forEach(function (mesh) {
                _this._injectGUI3DReservedDataStore(mesh).control = _this;
                mesh.isNearPickable = true;
            });
            this.collidableFrontDirection = collisionMesh.forward;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchButton3D.prototype, "isToggleButton", {
        get: function () {
            return this._isToggleButton;
        },
        /**
         * Setter for if this TouchButton3D should be treated as a toggle button
         * @param value If this TouchHolographicButton should act like a toggle button
         */
        set: function (value) {
            if (value === this._isToggleButton) {
                return;
            }
            this._isToggleButton = value;
            if (value) {
                this.onPointerUpObservable.add(this._toggleButtonCallback);
            }
            else {
                this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);
                // Safety check, reset the button if it's toggled on but no longer a toggle button
                if (this._toggleState) {
                    this._onToggle(false);
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchButton3D.prototype, "isToggled", {
        get: function () {
            return this._toggleState;
        },
        /**
         * A public entrypoint to set the toggle state of the TouchHolographicButton. Only works if 'isToggleButton' is true
         * @param newState The new state to set the TouchHolographicButton's toggle state to
         */
        set: function (newState) {
            if (this._isToggleButton && this._toggleState !== newState) {
                this._onToggle(newState);
            }
        },
        enumerable: false,
        configurable: true
    });
    TouchButton3D.prototype._onToggle = function (newState) {
        this._toggleState = newState;
        this.onToggleObservable.notifyObservers(newState);
    };
    // Returns true if the collidable is in front of the button, or if the button has no front direction
    TouchButton3D.prototype._isInteractionInFrontOfButton = function (collidablePos) {
        return this._getInteractionHeight(collidablePos, this._collisionMesh.getAbsolutePosition()) > 0;
    };
    /**
     * Get the height of the touchPoint from the collidable part of the button
     * @param touchPoint the point to compare to the button, in absolute position
     * @returns the depth of the touch point into the front of the button
     */
    TouchButton3D.prototype.getPressDepth = function (touchPoint) {
        if (!this._isNearPressed) {
            return 0;
        }
        var interactionHeight = this._getInteractionHeight(touchPoint, this._collisionMesh.getAbsolutePosition());
        return this._interactionSurfaceHeight - interactionHeight;
    };
    // Returns true if the collidable is in front of the button, or if the button has no front direction
    TouchButton3D.prototype._getInteractionHeight = function (interactionPos, basePos) {
        var frontDir = this.collidableFrontDirection;
        if (frontDir.length() === 0) {
            // The button has no front, just return the distance to the base
            return babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Distance(interactionPos, basePos);
        }
        var d = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Dot(basePos, frontDir);
        var abc = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Dot(interactionPos, frontDir);
        return abc - d;
    };
    /**
     * @internal
     */
    TouchButton3D.prototype._generatePointerEventType = function (providedType, nearMeshPosition, activeInteractionCount) {
        if (providedType === babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERDOWN || providedType === babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE) {
            if (!this._isInteractionInFrontOfButton(nearMeshPosition)) {
                // Near interaction mesh is behind the button, don't send a pointer down
                return babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE;
            }
            else {
                this._isNearPressed = true;
                this._interactionSurfaceHeight = this._getInteractionHeight(nearMeshPosition, this._collisionMesh.getAbsolutePosition());
            }
        }
        if (providedType === babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP) {
            if (activeInteractionCount == 0) {
                // We get the release for the down we swallowed earlier, swallow as well
                return babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE;
            }
            else {
                this._isNearPressed = false;
            }
        }
        return providedType;
    };
    TouchButton3D.prototype._getTypeName = function () {
        return "TouchButton3D";
    };
    // Mesh association
    TouchButton3D.prototype._createNode = function (scene) {
        return _super.prototype._createNode.call(this, scene);
    };
    /**
     * Releases all associated resources
     */
    TouchButton3D.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        // Clean up toggle observables
        this.onPointerUpObservable.removeCallback(this._toggleButtonCallback);
        this.onToggleObservable.clear();
        if (this._collisionMesh) {
            this._collisionMesh.dispose();
        }
    };
    return TouchButton3D;
}(_button3D__WEBPACK_IMPORTED_MODULE_1__.Button3D));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/touchHolographicButton.ts":
/*!******************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/touchHolographicButton.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TouchHolographicButton: () => (/* binding */ TouchHolographicButton)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.scalar */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../materials/fluent/fluentMaterial */ "../../../dev/gui/src/3D/materials/fluent/fluentMaterial.ts");
/* harmony import */ var _materials_fluentButton_fluentButtonMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../materials/fluentButton/fluentButtonMaterial */ "../../../dev/gui/src/3D/materials/fluentButton/fluentButtonMaterial.ts");
/* harmony import */ var _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../2D/controls/stackPanel */ "../../../dev/gui/src/2D/controls/stackPanel.ts");
/* harmony import */ var _2D_controls_image__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../2D/controls/image */ "../../../dev/gui/src/2D/controls/image.ts");
/* harmony import */ var _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../2D/controls/textBlock */ "../../../dev/gui/src/2D/controls/textBlock.ts");
/* harmony import */ var _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../2D/advancedDynamicTexture */ "../../../dev/gui/src/2D/advancedDynamicTexture.ts");
/* harmony import */ var _touchButton3D__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./touchButton3D */ "../../../dev/gui/src/3D/controls/touchButton3D.ts");



















/**
 * Class used to create a holographic button in 3D
 * @since 5.0.0
 */
var TouchHolographicButton = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__extends)(TouchHolographicButton, _super);
    /**
     * Creates a new button
     * @param name defines the control name
     * @param shareMaterials
     */
    function TouchHolographicButton(name, shareMaterials) {
        if (shareMaterials === void 0) { shareMaterials = true; }
        var _this = _super.call(this, name) || this;
        _this._shareMaterials = true;
        _this._isBackplateVisible = true;
        _this._frontPlateDepth = 0.5;
        _this._backPlateDepth = 0.04;
        _this._backplateColor = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Color3(0.08, 0.15, 0.55);
        _this._backplateToggledColor = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Color3(0.25, 0.4, 0.95);
        _this._shareMaterials = shareMaterials;
        _this.pointerEnterAnimation = function () {
            _this._frontMaterial.leftBlobEnable = true;
            _this._frontMaterial.rightBlobEnable = true;
        };
        _this.pointerOutAnimation = function () {
            _this._frontMaterial.leftBlobEnable = false;
            _this._frontMaterial.rightBlobEnable = false;
        };
        _this.pointerDownAnimation = function () {
            if (_this._frontPlate && !_this.isActiveNearInteraction) {
                _this._frontPlate.scaling.z = _this._frontPlateDepth * 0.2;
                _this._frontPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(_this._frontPlate._scene.useRightHandedSystem).scale((_this._frontPlateDepth - 0.2 * _this._frontPlateDepth) / 2);
                _this._textPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(_this._textPlate._scene.useRightHandedSystem).scale(-(_this._backPlateDepth + 0.2 * _this._frontPlateDepth) / 2);
            }
        };
        _this.pointerUpAnimation = function () {
            if (_this._frontPlate) {
                _this._frontPlate.scaling.z = _this._frontPlateDepth;
                _this._frontPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(_this._frontPlate._scene.useRightHandedSystem).scale((_this._frontPlateDepth - _this._frontPlateDepth) / 2);
                _this._textPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(_this._textPlate._scene.useRightHandedSystem).scale(-(_this._backPlateDepth + _this._frontPlateDepth) / 2);
            }
        };
        _this.onPointerMoveObservable.add(function (position) {
            if (_this._frontPlate && _this.isActiveNearInteraction) {
                var scale = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
                if (_this._backPlate.getWorldMatrix().decompose(scale, undefined, undefined)) {
                    var interactionHeight = _this._getInteractionHeight(position, _this._backPlate.getAbsolutePosition()) / scale.z;
                    interactionHeight = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Scalar.Clamp(interactionHeight - _this._backPlateDepth / 2, 0.2 * _this._frontPlateDepth, _this._frontPlateDepth);
                    _this._frontPlate.scaling.z = interactionHeight;
                    _this._frontPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(_this._frontPlate._scene.useRightHandedSystem).scale((_this._frontPlateDepth - interactionHeight) / 2);
                    _this._textPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(_this._textPlate._scene.useRightHandedSystem).scale(-(_this._backPlateDepth + interactionHeight) / 2);
                }
            }
        });
        _this._pointerHoverObserver = _this.onPointerMoveObservable.add(function (hoverPosition) {
            _this._frontMaterial.globalLeftIndexTipPosition = hoverPosition;
        });
        return _this;
    }
    TouchHolographicButton.prototype._disposeTooltip = function () {
        this._tooltipFade = null;
        if (this._tooltipTextBlock) {
            this._tooltipTextBlock.dispose();
        }
        if (this._tooltipTexture) {
            this._tooltipTexture.dispose();
        }
        if (this._tooltipMesh) {
            this._tooltipMesh.dispose();
        }
        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);
        this.onPointerOutObservable.remove(this._tooltipOutObserver);
    };
    Object.defineProperty(TouchHolographicButton.prototype, "renderingGroupId", {
        get: function () {
            return this._backPlate.renderingGroupId;
        },
        /**
         * Rendering ground id of all the mesh in the button
         */
        set: function (id) {
            this._backPlate.renderingGroupId = id;
            this._textPlate.renderingGroupId = id;
            this._frontPlate.renderingGroupId = id;
            if (this._tooltipMesh) {
                this._tooltipMesh.renderingGroupId = id;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "mesh", {
        /**
         * Gets the mesh used to render this control
         */
        get: function () {
            return this._backPlate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "tooltipText", {
        get: function () {
            if (this._tooltipTextBlock) {
                return this._tooltipTextBlock.text;
            }
            return null;
        },
        /**
         * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)
         */
        set: function (text) {
            var _this = this;
            if (!text) {
                this._disposeTooltip();
                return;
            }
            if (!this._tooltipFade) {
                var rightHandedScene = this._backPlate._scene.useRightHandedSystem;
                // Create tooltip with mesh and text
                this._tooltipMesh = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.CreatePlane)("", { size: 1 }, this._backPlate._scene);
                var tooltipBackground = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.CreatePlane)("", { size: 1, sideOrientation: babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Mesh.DOUBLESIDE }, this._backPlate._scene);
                var mat = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.StandardMaterial("", this._backPlate._scene);
                mat.diffuseColor = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Color3.FromHexString("#212121");
                tooltipBackground.material = mat;
                tooltipBackground.isPickable = false;
                this._tooltipMesh.addChild(tooltipBackground);
                tooltipBackground.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(rightHandedScene).scale(0.05);
                this._tooltipMesh.scaling.y = 1 / 3;
                this._tooltipMesh.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Up().scale(0.7).add(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(rightHandedScene).scale(-0.15));
                this._tooltipMesh.isPickable = false;
                this._tooltipMesh.parent = this._backPlate;
                // Create text texture for the tooltip
                this._tooltipTexture = _2D_advancedDynamicTexture__WEBPACK_IMPORTED_MODULE_6__.AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);
                this._tooltipTextBlock = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_5__.TextBlock();
                this._tooltipTextBlock.scaleY = 3;
                this._tooltipTextBlock.color = "white";
                this._tooltipTextBlock.fontSize = 130;
                this._tooltipTexture.addControl(this._tooltipTextBlock);
                // Add hover action to tooltip
                this._tooltipFade = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.FadeInOutBehavior();
                this._tooltipFade.delay = 500;
                this._tooltipMesh.addBehavior(this._tooltipFade);
                this._tooltipHoverObserver = this.onPointerEnterObservable.add(function () {
                    if (_this._tooltipFade) {
                        _this._tooltipFade.fadeIn(true);
                    }
                });
                this._tooltipOutObserver = this.onPointerOutObservable.add(function () {
                    if (_this._tooltipFade) {
                        _this._tooltipFade.fadeIn(false);
                    }
                });
            }
            if (this._tooltipTextBlock) {
                this._tooltipTextBlock.text = text;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "text", {
        /**
         * Gets or sets text for the button
         */
        get: function () {
            return this._text;
        },
        set: function (value) {
            if (this._text === value) {
                return;
            }
            this._text = value;
            this._rebuildContent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "imageUrl", {
        /**
         * Gets or sets the image url for the button
         */
        get: function () {
            return this._imageUrl;
        },
        set: function (value) {
            if (this._imageUrl === value) {
                return;
            }
            this._imageUrl = value;
            this._rebuildContent();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "backMaterial", {
        /**
         * Gets the back material used by this button
         */
        get: function () {
            return this._backMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "frontMaterial", {
        /**
         * Gets the front material used by this button
         */
        get: function () {
            return this._frontMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "plateMaterial", {
        /**
         * Gets the plate material used by this button
         */
        get: function () {
            return this._plateMaterial;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "shareMaterials", {
        /**
         * Gets a boolean indicating if this button shares its material with other HolographicButtons
         */
        get: function () {
            return this._shareMaterials;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchHolographicButton.prototype, "isBackplateVisible", {
        /**
         * Sets whether the backplate is visible or hidden. Hiding the backplate is not recommended without some sort of replacement
         */
        set: function (isVisible) {
            if (this.mesh && !!this._backMaterial) {
                if (isVisible && !this._isBackplateVisible) {
                    this._backPlate.visibility = 1;
                }
                else if (!isVisible && this._isBackplateVisible) {
                    this._backPlate.visibility = 0;
                }
            }
            this._isBackplateVisible = isVisible;
        },
        enumerable: false,
        configurable: true
    });
    TouchHolographicButton.prototype._getTypeName = function () {
        return "TouchHolographicButton";
    };
    TouchHolographicButton.prototype._rebuildContent = function () {
        this._disposeFacadeTexture();
        var panel = new _2D_controls_stackPanel__WEBPACK_IMPORTED_MODULE_3__.StackPanel();
        panel.isVertical = true;
        if ((0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.IsDocumentAvailable)() && !!document.createElement) {
            if (this._imageUrl) {
                var image = new _2D_controls_image__WEBPACK_IMPORTED_MODULE_4__.Image();
                image.source = this._imageUrl;
                image.paddingTop = "40px";
                image.height = "180px";
                image.width = "100px";
                image.paddingBottom = "40px";
                panel.addControl(image);
            }
        }
        if (this._text) {
            var text = new _2D_controls_textBlock__WEBPACK_IMPORTED_MODULE_5__.TextBlock();
            text.text = this._text;
            text.color = "white";
            text.height = "30px";
            text.fontSize = 24;
            panel.addControl(text);
        }
        this.content = panel;
    };
    // Mesh association
    TouchHolographicButton.prototype._createNode = function (scene) {
        var _this = this;
        var _a;
        this.name = (_a = this.name) !== null && _a !== void 0 ? _a : "TouchHolographicButton";
        var collisionMesh = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.CreateBox)("".concat(this.name, "_collisionMesh"), {
            width: 1.0,
            height: 1.0,
            depth: this._frontPlateDepth,
        }, scene);
        collisionMesh.isPickable = true;
        collisionMesh.isNearPickable = true;
        collisionMesh.visibility = 0;
        collisionMesh.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);
        babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.SceneLoader.ImportMeshAsync(undefined, TouchHolographicButton.MODEL_BASE_URL, TouchHolographicButton.MODEL_FILENAME, scene).then(function (result) {
            var alphaMesh = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.CreateBox)("${this.name}_alphaMesh", {
                width: 1.0,
                height: 1.0,
                depth: 1.0,
            }, scene);
            alphaMesh.isPickable = false;
            alphaMesh.material = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.StandardMaterial("${this.name}_alphaMesh_material", scene);
            alphaMesh.material.alpha = 0.15;
            var importedFrontPlate = result.meshes[1];
            importedFrontPlate.name = "".concat(_this.name, "_frontPlate");
            importedFrontPlate.isPickable = false;
            importedFrontPlate.scaling.z = _this._frontPlateDepth;
            alphaMesh.parent = importedFrontPlate;
            importedFrontPlate.parent = collisionMesh;
            if (_this._frontMaterial) {
                importedFrontPlate.material = _this._frontMaterial;
            }
            _this._frontPlate = importedFrontPlate;
        });
        this._backPlate = (0,babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.CreateBox)("".concat(this.name, "_backPlate"), {
            width: 1.0,
            height: 1.0,
            depth: this._backPlateDepth,
        }, scene);
        this._backPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(scene.useRightHandedSystem).scale(this._backPlateDepth / 2);
        this._backPlate.isPickable = false;
        this._textPlate = _super.prototype._createNode.call(this, scene);
        this._textPlate.name = "".concat(this.name, "_textPlate");
        this._textPlate.isPickable = false;
        this._textPlate.position = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(scene.useRightHandedSystem).scale(-this._frontPlateDepth / 2);
        this._backPlate.addChild(collisionMesh);
        this._backPlate.addChild(this._textPlate);
        var tn = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.TransformNode("{this.name}_root", scene);
        this._backPlate.setParent(tn);
        this.collisionMesh = collisionMesh;
        this.collidableFrontDirection = this._backPlate.forward.negate(); // Mesh is facing the wrong way
        return tn;
    };
    TouchHolographicButton.prototype._applyFacade = function (facadeTexture) {
        this._plateMaterial.emissiveTexture = facadeTexture;
        this._plateMaterial.opacityTexture = facadeTexture;
        this._plateMaterial.diffuseColor = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Color3(0.4, 0.4, 0.4);
    };
    TouchHolographicButton.prototype._createBackMaterial = function (mesh) {
        this._backMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_1__.FluentMaterial(this.name + "backPlateMaterial", mesh.getScene());
        this._backMaterial.albedoColor = this._backplateColor;
        this._backMaterial.renderBorders = true;
        this._backMaterial.renderHoverLight = false;
    };
    TouchHolographicButton.prototype._createFrontMaterial = function (mesh) {
        this._frontMaterial = new _materials_fluentButton_fluentButtonMaterial__WEBPACK_IMPORTED_MODULE_2__.FluentButtonMaterial(this.name + "Front Material", mesh.getScene());
    };
    TouchHolographicButton.prototype._createPlateMaterial = function (mesh) {
        this._plateMaterial = new babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.StandardMaterial(this.name + "Plate Material", mesh.getScene());
        this._plateMaterial.specularColor = babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Color3.Black();
    };
    TouchHolographicButton.prototype._onToggle = function (newState) {
        if (this._backMaterial) {
            if (newState) {
                this._backMaterial.albedoColor = this._backplateToggledColor;
            }
            else {
                this._backMaterial.albedoColor = this._backplateColor;
            }
        }
        _super.prototype._onToggle.call(this, newState);
    };
    TouchHolographicButton.prototype._affectMaterial = function (mesh) {
        if (this._shareMaterials) {
            // Back
            if (!this._host._touchSharedMaterials["backFluentMaterial"]) {
                this._createBackMaterial(mesh);
                this._host._touchSharedMaterials["backFluentMaterial"] = this._backMaterial;
            }
            else {
                this._backMaterial = this._host._touchSharedMaterials["backFluentMaterial"];
            }
            // Front
            if (!this._host._touchSharedMaterials["frontFluentMaterial"]) {
                this._createFrontMaterial(mesh);
                this._host._touchSharedMaterials["frontFluentMaterial"] = this._frontMaterial;
            }
            else {
                this._frontMaterial = this._host._touchSharedMaterials["frontFluentMaterial"];
            }
        }
        else {
            this._createBackMaterial(mesh);
            this._createFrontMaterial(mesh);
        }
        this._createPlateMaterial(mesh);
        this._backPlate.material = this._backMaterial;
        this._textPlate.material = this._plateMaterial;
        if (!this._isBackplateVisible) {
            this._backPlate.visibility = 0;
        }
        if (this._frontPlate) {
            this._frontPlate.material = this._frontMaterial;
        }
        this._rebuildContent();
    };
    /**
     * Releases all associated resources
     */
    TouchHolographicButton.prototype.dispose = function () {
        _super.prototype.dispose.call(this); // will dispose main mesh ie. back plate
        this._disposeTooltip();
        this.onPointerMoveObservable.remove(this._pointerHoverObserver);
        if (!this.shareMaterials) {
            this._backMaterial.dispose();
            this._frontMaterial.dispose();
            this._plateMaterial.dispose();
            if (this._pickedPointObserver) {
                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
                this._pickedPointObserver = null;
            }
        }
    };
    /**
     * Base Url for the button model.
     */
    TouchHolographicButton.MODEL_BASE_URL = "https://assets.babylonjs.com/meshes/MRTK/";
    /**
     * File name for the button model.
     */
    TouchHolographicButton.MODEL_FILENAME = "mrtk-fluent-button.glb";
    return TouchHolographicButton;
}(_touchButton3D__WEBPACK_IMPORTED_MODULE_7__.TouchButton3D));


/***/ }),

/***/ "../../../dev/gui/src/3D/controls/touchHolographicMenu.ts":
/*!****************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/touchHolographicMenu.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TouchHolographicMenu: () => (/* binding */ TouchHolographicMenu)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _volumeBasedPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./volumeBasedPanel */ "../../../dev/gui/src/3D/controls/volumeBasedPanel.ts");
/* harmony import */ var babylonjs_Meshes_mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! babylonjs/Misc/logger */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Meshes_mesh__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Meshes_mesh__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../materials/fluent/fluentMaterial */ "../../../dev/gui/src/3D/materials/fluent/fluentMaterial.ts");







/**
 * Simple menu that can contain holographic buttons
 */
var TouchHolographicMenu = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TouchHolographicMenu, _super);
    /**
     * Creates a holographic menu GUI 3D control
     * @param name name of the menu
     */
    function TouchHolographicMenu(name) {
        var _this = _super.call(this, name) || this;
        _this._backPlateMargin = 1.25;
        return _this;
    }
    Object.defineProperty(TouchHolographicMenu.prototype, "backPlateMargin", {
        /**
         * Gets or sets the margin size of the backplate in button size units.
         * Setting this to 1, will make the backPlate margin the size of 1 button
         */
        get: function () {
            return this._backPlateMargin;
        },
        set: function (value) {
            var _this = this;
            this._backPlateMargin = value;
            if (this._children.length >= 1) {
                this.children.forEach(function (control) {
                    _this._updateCurrentMinMax(control.position);
                });
                this._updateMargins();
            }
        },
        enumerable: false,
        configurable: true
    });
    TouchHolographicMenu.prototype._createNode = function (scene) {
        var node = new babylonjs_Meshes_mesh__WEBPACK_IMPORTED_MODULE_1__.Mesh("menu_".concat(this.name), scene);
        this._backPlate = (0,babylonjs_Meshes_mesh__WEBPACK_IMPORTED_MODULE_1__.CreateBox)("backPlate" + this.name, { size: 1 }, scene);
        this._backPlate.parent = node;
        return node;
    };
    TouchHolographicMenu.prototype._affectMaterial = function (mesh) {
        var _this = this;
        this._backPlateMaterial = new _materials_fluent_fluentMaterial__WEBPACK_IMPORTED_MODULE_2__.FluentMaterial(this.name + "backPlateMaterial", mesh.getScene());
        this._backPlateMaterial.albedoColor = new babylonjs_Meshes_mesh__WEBPACK_IMPORTED_MODULE_1__.Color3(0.08, 0.15, 0.55);
        this._backPlateMaterial.renderBorders = true;
        this._backPlateMaterial.renderHoverLight = true;
        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(function (pickedPoint) {
            if (pickedPoint) {
                _this._backPlateMaterial.hoverPosition = pickedPoint;
                _this._backPlateMaterial.hoverColor.a = 1.0;
            }
            else {
                _this._backPlateMaterial.hoverColor.a = 0;
            }
        });
        this._backPlate.material = this._backPlateMaterial;
    };
    TouchHolographicMenu.prototype._mapGridNode = function (control, nodePosition) {
        // Simple plane mapping for the menu
        var mesh = control.mesh;
        if (!mesh) {
            return;
        }
        control.position = nodePosition.clone();
        this._updateCurrentMinMax(nodePosition);
    };
    TouchHolographicMenu.prototype._finalProcessing = function () {
        this._updateMargins();
    };
    TouchHolographicMenu.prototype._updateCurrentMinMax = function (nodePosition) {
        if (!this._currentMin) {
            this._currentMin = nodePosition.clone();
            this._currentMax = nodePosition.clone();
        }
        this._currentMin.minimizeInPlace(nodePosition);
        this._currentMax.maximizeInPlace(nodePosition);
    };
    TouchHolographicMenu.prototype._updateMargins = function () {
        if (this._children.length > 0) {
            this._currentMin.addInPlaceFromFloats(-this._cellWidth / 2, -this._cellHeight / 2, 0);
            this._currentMax.addInPlaceFromFloats(this._cellWidth / 2, this._cellHeight / 2, 0);
            var extendSize = this._currentMax.subtract(this._currentMin);
            // Also add a % margin
            this._backPlate.scaling.x = extendSize.x + this._cellWidth * this.backPlateMargin;
            this._backPlate.scaling.y = extendSize.y + this._cellHeight * this.backPlateMargin;
            this._backPlate.scaling.z = 0.001;
            for (var i = 0; i < this._children.length; i++) {
                this._children[i].position.subtractInPlace(this._currentMin).subtractInPlace(extendSize.scale(0.5));
                this._children[i].position.z -= 0.01;
            }
        }
        this._currentMin = null;
        this._currentMax = null;
    };
    /**
     * Adds a button to the menu.
     * Please note that the back material of the button will be set to transparent as it is attached to the menu.
     *
     * @param button Button to add
     * @returns This menu
     */
    TouchHolographicMenu.prototype.addButton = function (button) {
        // Block updating the layout until the button is resized (which has to happen after node creation)
        var wasLayoutBlocked = this.blockLayout;
        if (!wasLayoutBlocked) {
            this.blockLayout = true;
        }
        _super.prototype.addControl.call(this, button);
        button.isBackplateVisible = false;
        button.scaling.scaleInPlace(TouchHolographicMenu.MENU_BUTTON_SCALE);
        // Unblocking the layout triggers the pending layout update that uses the size of the buttons to determine the size of the backing mesh
        if (!wasLayoutBlocked) {
            this.blockLayout = false;
        }
        return this;
    };
    /**
     * This method should not be used directly. It is inherited from `Container3D`.
     * Please use `addButton` instead.
     * @param _control the control to add
     * @returns the current container
     */
    TouchHolographicMenu.prototype.addControl = function (_control) {
        babylonjs_Meshes_mesh__WEBPACK_IMPORTED_MODULE_1__.Logger.Warn("TouchHolographicMenu can only contain buttons. Please use the method `addButton` instead.");
        return this;
    };
    /**
     * Disposes the menu
     */
    TouchHolographicMenu.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);
    };
    /**
     * Scale for the buttons added to the menu
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    TouchHolographicMenu.MENU_BUTTON_SCALE = 1;
    return TouchHolographicMenu;
}(_volumeBasedPanel__WEBPACK_IMPORTED_MODULE_0__.VolumeBasedPanel));


/***/ }),

/***/ "../../../dev/gui/src/3D/controls/touchMeshButton3D.ts":
/*!*************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/touchMeshButton3D.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TouchMeshButton3D: () => (/* binding */ TouchMeshButton3D)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _touchButton3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./touchButton3D */ "../../../dev/gui/src/3D/controls/touchButton3D.ts");


/**
 * Class used to create an interactable object. It's a touchable 3D button using a mesh coming from the current scene
 * @since 5.0.0
 */
var TouchMeshButton3D = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(TouchMeshButton3D, _super);
    /**
     * Creates a new 3D button based on a mesh
     * @param mesh mesh to become a 3D button. By default this is also the mesh for near interaction collision checking
     * @param name defines the control name
     */
    function TouchMeshButton3D(mesh, name) {
        var _this = _super.call(this, name, mesh) || this;
        _this._currentMesh = mesh;
        /**
         * Provides a default behavior on hover/out & up/down
         * Override those function to create your own desired behavior specific to your mesh
         */
        _this.pointerEnterAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(1.1);
        };
        _this.pointerOutAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(1.0 / 1.1);
        };
        _this.pointerDownAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(0.95);
        };
        _this.pointerUpAnimation = function () {
            if (!_this.mesh) {
                return;
            }
            _this.mesh.scaling.scaleInPlace(1.0 / 0.95);
        };
        return _this;
    }
    TouchMeshButton3D.prototype._getTypeName = function () {
        return "TouchMeshButton3D";
    };
    // Mesh association
    TouchMeshButton3D.prototype._createNode = function () {
        var _this = this;
        this._currentMesh.getChildMeshes().forEach(function (mesh) {
            _this._injectGUI3DReservedDataStore(mesh).control = _this;
        });
        return this._currentMesh;
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    TouchMeshButton3D.prototype._affectMaterial = function (mesh) { };
    return TouchMeshButton3D;
}(_touchButton3D__WEBPACK_IMPORTED_MODULE_0__.TouchButton3D));



/***/ }),

/***/ "../../../dev/gui/src/3D/controls/volumeBasedPanel.ts":
/*!************************************************************!*\
  !*** ../../../dev/gui/src/3D/controls/volumeBasedPanel.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VolumeBasedPanel: () => (/* binding */ VolumeBasedPanel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.vector */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _container3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./container3D */ "../../../dev/gui/src/3D/controls/container3D.ts");




/**
 * Abstract class used to create a container panel deployed on the surface of a volume
 */
var VolumeBasedPanel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(VolumeBasedPanel, _super);
    /**
     * Creates new VolumeBasedPanel
     * @param name
     */
    function VolumeBasedPanel(name) {
        var _this = _super.call(this, name) || this;
        _this._columns = 10;
        _this._rows = 0;
        _this._rowThenColum = true;
        _this._orientation = _container3D__WEBPACK_IMPORTED_MODULE_1__.Container3D.FACEORIGIN_ORIENTATION;
        /**
         * Gets or sets the distance between elements
         */
        _this.margin = 0;
        return _this;
    }
    Object.defineProperty(VolumeBasedPanel.prototype, "orientation", {
        /**
         * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)
         * | Value | Type                                | Description |
         * | ----- | ----------------------------------- | ----------- |
         * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |
         * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |
         * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |
         * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |
         * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |
         */
        get: function () {
            return this._orientation;
        },
        set: function (value) {
            var _this = this;
            if (this._orientation === value) {
                return;
            }
            this._orientation = value;
            babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Tools.SetImmediate(function () {
                _this._arrangeChildren();
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VolumeBasedPanel.prototype, "columns", {
        /**
         * Gets or sets the number of columns requested (10 by default).
         * The panel will automatically compute the number of rows based on number of child controls.
         */
        get: function () {
            return this._columns;
        },
        set: function (value) {
            var _this = this;
            if (this._columns === value) {
                return;
            }
            this._columns = value;
            this._rowThenColum = true;
            babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Tools.SetImmediate(function () {
                _this._arrangeChildren();
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VolumeBasedPanel.prototype, "rows", {
        /**
         * Gets or sets a the number of rows requested.
         * The panel will automatically compute the number of columns based on number of child controls.
         */
        get: function () {
            return this._rows;
        },
        set: function (value) {
            var _this = this;
            if (this._rows === value) {
                return;
            }
            this._rows = value;
            this._rowThenColum = false;
            babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Tools.SetImmediate(function () {
                _this._arrangeChildren();
            });
        },
        enumerable: false,
        configurable: true
    });
    VolumeBasedPanel.prototype._arrangeChildren = function () {
        this._cellWidth = 0;
        this._cellHeight = 0;
        var rows = 0;
        var columns = 0;
        var controlCount = 0;
        var currentInverseWorld = babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Matrix.Invert(this.node.computeWorldMatrix(true));
        // Measure
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (!child.mesh) {
                continue;
            }
            controlCount++;
            child.mesh.computeWorldMatrix(true);
            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);
            var boundingBox = child.mesh.getHierarchyBoundingVectors();
            var extendSize = babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0];
            var diff = babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[1];
            boundingBox.max.subtractToRef(boundingBox.min, diff);
            diff.scaleInPlace(0.5);
            babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);
            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);
            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);
        }
        this._cellWidth += this.margin * 2;
        this._cellHeight += this.margin * 2;
        // Arrange
        if (this._rowThenColum) {
            columns = this._columns;
            rows = Math.ceil(controlCount / this._columns);
        }
        else {
            rows = this._rows;
            columns = Math.ceil(controlCount / this._rows);
        }
        var startOffsetX = columns * 0.5 * this._cellWidth;
        var startOffsetY = rows * 0.5 * this._cellHeight;
        var nodeGrid = [];
        var cellCounter = 0;
        if (this._rowThenColum) {
            for (var r = 0; r < rows; r++) {
                for (var c = 0; c < columns; c++) {
                    nodeGrid.push(new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));
                    cellCounter++;
                    if (cellCounter > controlCount) {
                        break;
                    }
                }
            }
        }
        else {
            for (var c = 0; c < columns; c++) {
                for (var r = 0; r < rows; r++) {
                    nodeGrid.push(new babylonjs_Misc_tools__WEBPACK_IMPORTED_MODULE_0__.Vector3(c * this._cellWidth - startOffsetX + this._cellWidth / 2, r * this._cellHeight - startOffsetY + this._cellHeight / 2, 0));
                    cellCounter++;
                    if (cellCounter > controlCount) {
                        break;
                    }
                }
            }
        }
        cellCounter = 0;
        for (var _b = 0, _c = this._children; _b < _c.length; _b++) {
            var child = _c[_b];
            if (!child.mesh) {
                continue;
            }
            this._mapGridNode(child, nodeGrid[cellCounter]);
            cellCounter++;
        }
        this._finalProcessing();
    };
    /** Child classes can implement this function to provide additional processing */
    VolumeBasedPanel.prototype._finalProcessing = function () { };
    return VolumeBasedPanel;
}(_container3D__WEBPACK_IMPORTED_MODULE_1__.Container3D));



/***/ }),

/***/ "../../../dev/gui/src/3D/gizmos/gizmoHandle.ts":
/*!*****************************************************!*\
  !*** ../../../dev/gui/src/3D/gizmos/gizmoHandle.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CornerHandle: () => (/* binding */ CornerHandle),
/* harmony export */   GizmoHandle: () => (/* binding */ GizmoHandle),
/* harmony export */   HandleState: () => (/* binding */ HandleState),
/* harmony export */   SideHandle: () => (/* binding */ SideHandle)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Behaviors/Meshes/baseSixDofDragBehavior */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _materials_handle_handleMaterial__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../materials/handle/handleMaterial */ "../../../dev/gui/src/3D/materials/handle/handleMaterial.ts");






/**
 * State of the handle regarding user interaction
 */
var HandleState;
(function (HandleState) {
    /**
     * Handle is idle
     */
    HandleState[HandleState["IDLE"] = 0] = "IDLE";
    /**
     * Handle is hovered
     */
    HandleState[HandleState["HOVER"] = 1] = "HOVER";
    /**
     * Handle is dragged
     */
    HandleState[HandleState["DRAG"] = 2] = "DRAG";
})(HandleState || (HandleState = {}));
/**
 * Base class for SlateGizmo handles
 */
var GizmoHandle = /** @class */ (function () {
    /**
     * Creates a handle for a SlateGizmo
     * @param gizmo associated SlateGizmo
     * @param scene scene
     */
    function GizmoHandle(gizmo, scene) {
        this._state = 0 /* HandleState.IDLE */;
        this._materials = [];
        this._scene = scene;
        this._gizmo = gizmo;
        this.node = this.createNode();
        this.node.reservedDataStore = {
            handle: this,
        };
    }
    Object.defineProperty(GizmoHandle.prototype, "state", {
        /**
         * The current state of the handle
         */
        get: function () {
            return this._state;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GizmoHandle.prototype, "gizmo", {
        /**
         * Returns the gizmo carrying this handle
         */
        get: function () {
            return this._gizmo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GizmoHandle.prototype, "hover", {
        /**
         * Sets hover state
         */
        set: function (value) {
            if (value) {
                this._state |= 1 /* HandleState.HOVER */;
            }
            else {
                this._state &= ~1 /* HandleState.HOVER */;
            }
            this._updateMaterial();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GizmoHandle.prototype, "drag", {
        /**
         * Sets drag state
         */
        set: function (value) {
            if (value) {
                this._state |= 2 /* HandleState.DRAG */;
            }
            else {
                this._state &= ~2 /* HandleState.DRAG */;
            }
            this._updateMaterial();
        },
        enumerable: false,
        configurable: true
    });
    GizmoHandle.prototype._createMaterial = function (positionOffset) {
        var mat = new _materials_handle_handleMaterial__WEBPACK_IMPORTED_MODULE_1__.HandleMaterial("handle", this._scene);
        if (positionOffset) {
            mat._positionOffset = positionOffset;
        }
        return mat;
    };
    GizmoHandle.prototype._updateMaterial = function () {
        var state = this._state;
        for (var _i = 0, _a = this._materials; _i < _a.length; _i++) {
            var mat = _a[_i];
            mat.hover = false;
            mat.drag = false;
        }
        if (state & 2 /* HandleState.DRAG */) {
            for (var _b = 0, _c = this._materials; _b < _c.length; _b++) {
                var mat = _c[_b];
                mat.drag = true;
            }
        }
        else if (state & 1 /* HandleState.HOVER */) {
            for (var _d = 0, _e = this._materials; _d < _e.length; _d++) {
                var mat = _e[_d];
                mat.hover = true;
            }
        }
    };
    /**
     * Binds callbacks from dragging interaction
     * @param dragStartFn Function to call on drag start
     * @param dragFn Function to call on drag
     * @param dragEndFn Function to call on drag end
     */
    GizmoHandle.prototype.setDragBehavior = function (dragStartFn, dragFn, dragEndFn) {
        var dragBehavior = new babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.BaseSixDofDragBehavior();
        this._dragBehavior = dragBehavior;
        this._dragStartObserver = dragBehavior.onDragStartObservable.add(dragStartFn);
        this._draggingObserver = dragBehavior.onDragObservable.add(dragFn);
        this._dragEndObserver = dragBehavior.onDragEndObservable.add(dragEndFn);
        this._dragBehavior.attach(this.node);
    };
    /**
     * Disposes the handle
     */
    GizmoHandle.prototype.dispose = function () {
        this._dragBehavior.onDragStartObservable.remove(this._dragStartObserver);
        this._dragBehavior.onDragObservable.remove(this._draggingObserver);
        this._dragBehavior.onDragEndObservable.remove(this._dragEndObserver);
        this._dragBehavior.detach();
        for (var _i = 0, _a = this._materials; _i < _a.length; _i++) {
            var material = _a[_i];
            material.dispose();
        }
        this.node.dispose();
    };
    return GizmoHandle;
}());

/**
 * Side handle class that rotates the slate
 */
var SideHandle = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(SideHandle, _super);
    function SideHandle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates the meshes and parent node of the handle
     * @returns created node
     */
    SideHandle.prototype.createNode = function () {
        // Create a simple vertical rectangle
        var verticalBox = (0,babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.CreateBox)("sideVert", { width: 1, height: 10, depth: 0.1 }, this._scene);
        var sideNode = new babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.TransformNode("side", this._scene);
        verticalBox.parent = sideNode;
        var mat = this._createMaterial();
        verticalBox.material = mat;
        verticalBox.isNearGrabbable = true;
        this._materials.push(mat);
        return sideNode;
    };
    return SideHandle;
}(GizmoHandle));

/**
 * Corner handle that resizes the slate
 */
var CornerHandle = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(CornerHandle, _super);
    function CornerHandle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates the meshes and parent node of the handle
     * @returns created node
     */
    CornerHandle.prototype.createNode = function () {
        // Create 2 boxes making a bottom left corner
        var horizontalBox = (0,babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.CreateBox)("angleHor", { width: 3, height: 1, depth: 0.1 }, this._scene);
        var verticalBox = (0,babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.CreateBox)("angleVert", { width: 1, height: 3, depth: 0.1 }, this._scene);
        var angleNode = new babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.TransformNode("angle", this._scene);
        horizontalBox.parent = angleNode;
        verticalBox.parent = angleNode;
        horizontalBox.material = this._createMaterial(new babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 0, 0));
        verticalBox.material = this._createMaterial(new babylonjs_Meshes_Builders_boxBuilder__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0));
        verticalBox.isNearGrabbable = true;
        horizontalBox.isNearGrabbable = true;
        this._materials.push(horizontalBox.material);
        this._materials.push(verticalBox.material);
        return angleNode;
    };
    return CornerHandle;
}(GizmoHandle));



/***/ }),

/***/ "../../../dev/gui/src/3D/gizmos/index.ts":
/*!***********************************************!*\
  !*** ../../../dev/gui/src/3D/gizmos/index.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CornerHandle: () => (/* reexport safe */ _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.CornerHandle),
/* harmony export */   GizmoHandle: () => (/* reexport safe */ _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.GizmoHandle),
/* harmony export */   HandleState: () => (/* reexport safe */ _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.HandleState),
/* harmony export */   SideHandle: () => (/* reexport safe */ _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.SideHandle),
/* harmony export */   SlateGizmo: () => (/* reexport safe */ _slateGizmo__WEBPACK_IMPORTED_MODULE_0__.SlateGizmo)
/* harmony export */ });
/* harmony import */ var _slateGizmo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./slateGizmo */ "../../../dev/gui/src/3D/gizmos/slateGizmo.ts");
/* harmony import */ var _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gizmoHandle */ "../../../dev/gui/src/3D/gizmos/gizmoHandle.ts");




/***/ }),

/***/ "../../../dev/gui/src/3D/gizmos/slateGizmo.ts":
/*!****************************************************!*\
  !*** ../../../dev/gui/src/3D/gizmos/slateGizmo.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SlateGizmo: () => (/* binding */ SlateGizmo)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Misc/pivotTools */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gizmoHandle */ "../../../dev/gui/src/3D/gizmos/gizmoHandle.ts");







/**
 * Gizmo to resize 2D slates
 */
var SlateGizmo = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(SlateGizmo, _super);
    function SlateGizmo(utilityLayer) {
        var _this = _super.call(this, utilityLayer) || this;
        _this._boundingDimensions = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
        _this._renderObserver = null;
        _this._tmpQuaternion = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Quaternion();
        _this._tmpVector = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
        // Ordered bl, br, tr, tl
        _this._corners = [];
        // Ordered left, bottom, right, top
        _this._sides = [];
        _this._boundingBoxGizmo = {
            min: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(),
            max: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(),
        };
        /**
         * Value we use to offset handles from mesh
         */
        _this._margin = 0.35;
        _this._handleSize = 0.075;
        _this._attachedSlate = null;
        _this._existingSlateScale = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        /**
         * If set, the handles will increase in size based on the distance away from the camera to have a consistent screen size (Default: true)
         */
        _this.fixedScreenSize = false;
        /**
         * The distance away from the object which the draggable meshes should appear world sized when fixedScreenSize is set to true (default: 10)
         */
        _this.fixedScreenSizeDistanceFactor = 10;
        _this._createNode();
        _this.updateScale = false;
        _this._renderObserver = _this.gizmoLayer.originalScene.onBeforeRenderObservable.add(function () {
            // Only update the bounding box if scaling has changed
            if (_this.attachedMesh && !_this._existingSlateScale.equals(_this.attachedMesh.scaling)) {
                _this.updateBoundingBox();
            }
        });
        return _this;
    }
    Object.defineProperty(SlateGizmo.prototype, "attachedSlate", {
        get: function () {
            return this._attachedSlate;
        },
        /**
         * The slate attached to this gizmo
         */
        set: function (control) {
            var _this = this;
            if (control) {
                this.attachedMesh = control.mesh;
                this.updateBoundingBox();
                this._pickedPointObserver = control._host.onPickingObservable.add(function (pickedMesh) {
                    if (_this._handleHovered && (!pickedMesh || pickedMesh.parent !== _this._handleHovered.node)) {
                        _this._handleHovered.hover = false;
                        _this._handleHovered = null;
                    }
                    if (pickedMesh && pickedMesh.parent && pickedMesh.parent.reservedDataStore && pickedMesh.parent.reservedDataStore.handle) {
                        var handle = pickedMesh.parent.reservedDataStore.handle;
                        if (handle.gizmo === _this) {
                            _this._handleHovered = handle;
                            _this._handleHovered.hover = true;
                        }
                    }
                });
            }
            else if (this._attachedSlate) {
                this._attachedSlate._host.onPickingObservable.remove(this._pickedPointObserver);
            }
            this._attachedSlate = control;
        },
        enumerable: false,
        configurable: true
    });
    SlateGizmo.prototype._createNode = function () {
        var _this = this;
        this._handlesParent = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TransformNode("handlesParent", this.gizmoLayer.utilityLayerScene);
        this._handlesParent.rotationQuaternion = babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Quaternion.Identity();
        var masksCorners = [
            {
                dimensions: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(-1, -1, 0),
                origin: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 0, 0),
            },
            {
                dimensions: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, -1, 0),
                origin: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0),
            },
            {
                dimensions: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 0),
                origin: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0),
            },
            {
                dimensions: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(-1, 1, 0),
                origin: new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 0),
            },
        ];
        for (var i = 0; i < 4; i++) {
            var corner = new _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.CornerHandle(this, this.gizmoLayer.utilityLayerScene);
            this._corners.push(corner);
            corner.node.rotation.z = (Math.PI / 2) * i;
            corner.node.parent = this._handlesParent;
            this._assignDragBehaviorCorners(corner, function (originStart, dimensionsStart, offset, masks) { return _this._moveHandle(originStart, dimensionsStart, offset, masks, true); }, masksCorners[i]);
        }
        for (var i = 0; i < 4; i++) {
            var side = new _gizmoHandle__WEBPACK_IMPORTED_MODULE_1__.SideHandle(this, this.gizmoLayer.utilityLayerScene);
            this._sides.push(side);
            side.node.rotation.z = (Math.PI / 2) * i;
            side.node.parent = this._handlesParent;
            this._assignDragBehaviorSides(side, i % 2 === 0 ? new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0) : new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 0, 0));
        }
        this._handlesParent.parent = this._rootMesh;
    };
    SlateGizmo.prototype._keepAspectRatio = function (vector, aspectRatio, invertDiagonal) {
        if (invertDiagonal === void 0) { invertDiagonal = false; }
        var axis = babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0];
        axis.copyFromFloats(aspectRatio, 1, 0).normalize();
        if (invertDiagonal) {
            axis.y *= -1;
        }
        var dot = babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3.Dot(vector, axis);
        vector.copyFrom(axis).scaleInPlace(dot);
    };
    SlateGizmo.prototype._clampDimensions = function (vector, dimensions, mask, keepAspectRatio) {
        if (keepAspectRatio === void 0) { keepAspectRatio = false; }
        var impact = babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0];
        impact.copyFrom(vector).multiplyInPlace(mask);
        var clampedDimensions = babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[1];
        clampedDimensions.copyFromFloats(Math.max(this._attachedSlate.minDimensions.x, impact.x + dimensions.x), Math.max(this._attachedSlate.minDimensions.y, impact.y + dimensions.y), 0);
        if (keepAspectRatio) {
            // Extra logic to ensure the ratio is maintained when the vector has been clamped
            var ratio = dimensions.x / dimensions.y;
            clampedDimensions.x = Math.max(clampedDimensions.x, clampedDimensions.y * ratio);
            clampedDimensions.y = Math.max(clampedDimensions.y, clampedDimensions.x / ratio);
        }
        // Calculating the real impact of vector on clamped dimensions
        impact.copyFrom(clampedDimensions).subtractInPlace(dimensions);
        vector.x = Math.sign(vector.x) * Math.abs(impact.x);
        vector.y = Math.sign(vector.y) * Math.abs(impact.y);
    };
    SlateGizmo.prototype._moveHandle = function (originStart, dimensionsStart, offset, masks, isCorner) {
        if (!this._attachedSlate) {
            return;
        }
        if (isCorner) {
            var aspectRatio = dimensionsStart.x / dimensionsStart.y;
            this._keepAspectRatio(offset, aspectRatio, masks.dimensions.x * masks.dimensions.y < 0);
        }
        this._clampDimensions(offset, dimensionsStart, masks.dimensions, isCorner);
        var offsetOriginMasked = babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0];
        var offsetDimensionsMasked = babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[1];
        offsetOriginMasked.copyFrom(offset).multiplyInPlace(masks.origin);
        offsetDimensionsMasked.copyFrom(offset).multiplyInPlace(masks.dimensions);
        this._attachedSlate.origin.copyFrom(originStart).addInPlace(offsetOriginMasked);
        this._attachedSlate.dimensions.set(dimensionsStart.x + offsetDimensionsMasked.x, dimensionsStart.y + offsetDimensionsMasked.y);
    };
    SlateGizmo.prototype._assignDragBehaviorCorners = function (handle, moveFn, masks) {
        var _this = this;
        var dimensionsStart = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        var originStart = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        var dragOrigin = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        var toObjectFrame = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Matrix();
        var dragPlaneNormal = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        var projectToRef = function (position, normal, origin, ref) {
            // Projects on the plane with its normal and origin
            position.subtractToRef(origin, babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0]);
            var dot = babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3.Dot(babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0], normal);
            babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[1].copyFrom(normal).scaleInPlace(dot);
            babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0].subtractInPlace(babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[1]);
            babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0].addToRef(origin, ref);
        };
        var dragStart = function (event) {
            if (_this.attachedSlate && _this.attachedMesh) {
                dimensionsStart.set(_this.attachedSlate.dimensions.x, _this.attachedSlate.dimensions.y, babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Epsilon);
                originStart.copyFrom(_this.attachedSlate.origin);
                dragOrigin.copyFrom(event.position);
                toObjectFrame.copyFrom(_this.attachedMesh.computeWorldMatrix(true));
                toObjectFrame.invert();
                _this.attachedSlate._followButton.isToggled = false;
                babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3.TransformNormalToRef(babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3.Forward(), _this.attachedMesh.getWorldMatrix(), dragPlaneNormal);
                dragPlaneNormal.normalize();
                if (_this._handleHovered) {
                    _this._handleDragged = _this._handleHovered;
                    _this._handleDragged.drag = true;
                }
            }
        };
        var dragging = function (event) {
            if (_this.attachedSlate && _this.attachedMesh) {
                projectToRef(event.position, dragPlaneNormal, dragOrigin, _this._tmpVector);
                _this._tmpVector.subtractInPlace(dragOrigin);
                babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3.TransformNormalToRef(_this._tmpVector, toObjectFrame, _this._tmpVector);
                moveFn(originStart, dimensionsStart, _this._tmpVector, masks);
                _this.attachedSlate._positionElements();
                _this.updateBoundingBox();
            }
        };
        var dragEnd = function () {
            if (_this.attachedSlate && _this.attachedNode) {
                _this.attachedSlate._updatePivot();
                if (_this._handleDragged) {
                    _this._handleDragged.drag = false;
                    _this._handleDragged = null;
                }
            }
        };
        handle.setDragBehavior(dragStart, dragging, dragEnd);
    };
    SlateGizmo.prototype._assignDragBehaviorSides = function (handle, dragPlaneNormal) {
        var _this = this;
        var quaternionOrigin = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Quaternion();
        var dragOrigin = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        var directionOrigin = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        var worldPivot = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        var worldPlaneNormal = new babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        var dragStart = function (event) {
            if (_this.attachedSlate && _this.attachedMesh) {
                quaternionOrigin.copyFrom(_this.attachedMesh.rotationQuaternion);
                dragOrigin.copyFrom(event.position);
                worldPivot.copyFrom(_this.attachedMesh.getAbsolutePivotPoint());
                directionOrigin.copyFrom(dragOrigin).subtractInPlace(worldPivot).normalize();
                _this.attachedSlate._followButton.isToggled = false;
                babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3.TransformNormalToRef(dragPlaneNormal, _this.attachedMesh.getWorldMatrix(), worldPlaneNormal);
                worldPlaneNormal.normalize();
                if (_this._handleHovered) {
                    _this._handleDragged = _this._handleHovered;
                    _this._handleDragged.drag = true;
                }
            }
        };
        var dragging = function (event) {
            if (_this.attachedSlate && _this.attachedMesh) {
                _this._tmpVector.copyFrom(event.position);
                _this._tmpVector.subtractInPlace(worldPivot);
                _this._tmpVector.normalize();
                var angle = -babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Vector3.GetAngleBetweenVectorsOnPlane(_this._tmpVector, directionOrigin, worldPlaneNormal);
                babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Quaternion.RotationAxisToRef(dragPlaneNormal, angle, _this._tmpQuaternion);
                quaternionOrigin.multiplyToRef(_this._tmpQuaternion, _this.attachedMesh.rotationQuaternion);
            }
        };
        var dragEnd = function () {
            if (_this.attachedSlate && _this.attachedNode) {
                _this.attachedSlate._updatePivot();
                if (_this._handleDragged) {
                    _this._handleDragged.drag = false;
                    _this._handleDragged = null;
                }
            }
        };
        handle.setDragBehavior(dragStart, dragging, dragEnd);
    };
    SlateGizmo.prototype._attachedNodeChanged = function (value) {
        if (value) {
            this.updateBoundingBox();
        }
    };
    /**
     * Updates the bounding box information for the gizmo
     */
    SlateGizmo.prototype.updateBoundingBox = function () {
        if (this.attachedMesh) {
            babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.PivotTools._RemoveAndStorePivotPoint(this.attachedMesh);
            // Store original parent
            var originalParent = this.attachedMesh.parent;
            this.attachedMesh.setParent(null);
            this._update();
            // Rotate based on axis
            if (!this.attachedMesh.rotationQuaternion) {
                this.attachedMesh.rotationQuaternion = babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Quaternion.RotationYawPitchRoll(this.attachedMesh.rotation.y, this.attachedMesh.rotation.x, this.attachedMesh.rotation.z);
            }
            // Store original position and reset mesh to origin before computing the bounding box
            this._tmpQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);
            this._tmpVector.copyFrom(this.attachedMesh.position);
            this.attachedMesh.rotationQuaternion.set(0, 0, 0, 1);
            this.attachedMesh.position.set(0, 0, 0);
            // Update bounding dimensions/positions
            var boundingMinMax = this.attachedMesh.getHierarchyBoundingVectors();
            boundingMinMax.max.subtractToRef(boundingMinMax.min, this._boundingDimensions);
            this._boundingBoxGizmo.min = boundingMinMax.min;
            this._boundingBoxGizmo.max = boundingMinMax.max;
            // Update handles of the gizmo
            this._updateHandlesPosition();
            this._updateHandlesScaling();
            // Restore position/rotation values
            this.attachedMesh.rotationQuaternion.copyFrom(this._tmpQuaternion);
            this.attachedMesh.position.copyFrom(this._tmpVector);
            babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.PivotTools._RestorePivotPoint(this.attachedMesh);
            // Restore original parent
            this.attachedMesh.setParent(originalParent);
            this.attachedMesh.computeWorldMatrix(true);
            this._existingSlateScale.copyFrom(this.attachedMesh.scaling);
        }
    };
    SlateGizmo.prototype._updateHandlesPosition = function () {
        var min = this._boundingBoxGizmo.min.clone();
        var max = this._boundingBoxGizmo.max.clone();
        var handleScaling = this._corners[0].node.scaling.length();
        min.x -= this._margin * handleScaling;
        min.y -= this._margin * handleScaling;
        max.x += this._margin * handleScaling;
        max.y += this._margin * handleScaling;
        var center = min.add(max).scaleInPlace(0.5);
        this._corners[0].node.position.copyFromFloats(min.x, min.y, 0);
        this._corners[1].node.position.copyFromFloats(max.x, min.y, 0);
        this._corners[2].node.position.copyFromFloats(max.x, max.y, 0);
        this._corners[3].node.position.copyFromFloats(min.x, max.y, 0);
        this._sides[0].node.position.copyFromFloats(min.x, center.y, 0);
        this._sides[1].node.position.copyFromFloats(center.x, min.y, 0);
        this._sides[2].node.position.copyFromFloats(max.x, center.y, 0);
        this._sides[3].node.position.copyFromFloats(center.x, max.y, 0);
    };
    SlateGizmo.prototype._updateHandlesScaling = function () {
        if (this._attachedSlate && this._attachedSlate.mesh) {
            var scaledWidth = this._attachedSlate.mesh.scaling.x * this._attachedSlate.dimensions.x;
            var scaledHeight = this._attachedSlate.mesh.scaling.y * this._attachedSlate.dimensions.y;
            var scale = Math.min(scaledWidth, scaledHeight) * this._handleSize;
            for (var index = 0; index < this._corners.length; index++) {
                this._corners[index].node.scaling.setAll(scale);
            }
            for (var index = 0; index < this._sides.length; index++) {
                this._sides[index].node.scaling.setAll(scale);
            }
        }
    };
    SlateGizmo.prototype._update = function () {
        _super.prototype._update.call(this);
        if (!this.gizmoLayer.utilityLayerScene.activeCamera) {
            return;
        }
        if (this._attachedSlate && this._attachedSlate.mesh) {
            if (this.fixedScreenSize) {
                this._attachedSlate.mesh.absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);
                var distanceFromCamera = (this._handleSize * this._tmpVector.length()) / this.fixedScreenSizeDistanceFactor;
                for (var i = 0; i < this._corners.length; i++) {
                    this._corners[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);
                }
                for (var i = 0; i < this._sides.length; i++) {
                    this._sides[i].node.scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);
                }
            }
            this._updateHandlesPosition();
        }
    };
    SlateGizmo.prototype.dispose = function () {
        this.gizmoLayer.originalScene.onBeforeRenderObservable.remove(this._renderObserver);
        // Will dispose rootMesh and all descendants
        _super.prototype.dispose.call(this);
        for (var _i = 0, _a = this._corners; _i < _a.length; _i++) {
            var corner = _a[_i];
            corner.dispose();
        }
        for (var _b = 0, _c = this._sides; _b < _c.length; _b++) {
            var side = _c[_b];
            side.dispose();
        }
    };
    return SlateGizmo;
}(babylonjs_Gizmos_gizmo__WEBPACK_IMPORTED_MODULE_0__.Gizmo));



/***/ }),

/***/ "../../../dev/gui/src/3D/gui3DManager.ts":
/*!***********************************************!*\
  !*** ../../../dev/gui/src/3D/gui3DManager.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GUI3DManager: () => (/* binding */ GUI3DManager)
/* harmony export */ });
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/engineStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _controls_container3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controls/container3D */ "../../../dev/gui/src/3D/controls/container3D.ts");







/**
 * Class used to manage 3D user interface
 * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D
 */
var GUI3DManager = /** @class */ (function () {
    /**
     * Creates a new GUI3DManager
     * @param scene
     */
    function GUI3DManager(scene) {
        var _this = this;
        this._customControlScaling = 1.0;
        /** @internal */
        this._lastControlOver = {};
        /** @internal */
        this._lastControlDown = {};
        /**
         * Observable raised when the point picked by the pointer events changed
         */
        this.onPickedPointChangedObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        /**
         * Observable raised when a picking happens
         */
        this.onPickingObservable = new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Observable();
        // Shared resources
        /** @internal */
        this._sharedMaterials = {};
        /** @internal */
        this._touchSharedMaterials = {};
        this._scene = scene || babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.EngineStore.LastCreatedScene;
        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(function () {
            _this._sceneDisposeObserver = null;
            _this._utilityLayer = null;
            _this.dispose();
        });
        this._utilityLayer = babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(this._scene);
        this._utilityLayer.onlyCheckPointerDownEvents = false;
        this._utilityLayer.pickUtilitySceneFirst = false;
        this._utilityLayer.mainSceneTrackerPredicate = function (mesh) {
            var _a, _b, _c;
            return mesh && ((_c = (_b = (_a = mesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c._node);
        };
        // Root
        this._rootContainer = new _controls_container3D__WEBPACK_IMPORTED_MODULE_1__.Container3D("RootContainer");
        this._rootContainer._host = this;
        var utilityLayerScene = this._utilityLayer.utilityLayerScene;
        // Events
        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add(function (pointerId) {
            _this._handlePointerOut(pointerId, true);
        });
        this._pointerObserver = utilityLayerScene.onPointerObservable.add(function (pi) {
            _this._doPicking(pi);
        });
        // Scene
        this._utilityLayer.utilityLayerScene.autoClear = false;
        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;
        new babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.HemisphericLight("hemi", babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.Vector3.Up(), this._utilityLayer.utilityLayerScene);
    }
    Object.defineProperty(GUI3DManager.prototype, "scene", {
        /** Gets the hosting scene */
        get: function () {
            return this._scene;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GUI3DManager.prototype, "utilityLayer", {
        /** Gets associated utility layer */
        get: function () {
            return this._utilityLayer;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GUI3DManager.prototype, "controlScaling", {
        /** Gets the scaling for all UI elements owned by this manager */
        get: function () {
            return this._customControlScaling;
        },
        /** Sets the scaling adjustment for all UI elements owned by this manager */
        set: function (newScale) {
            if (this._customControlScaling !== newScale && newScale > 0) {
                var scaleRatio_1 = newScale / this._customControlScaling;
                this._customControlScaling = newScale;
                this._rootContainer.children.forEach(function (control) {
                    control.scaling.scaleInPlace(scaleRatio_1);
                    if (newScale !== 1) {
                        control._isScaledByManager = true;
                    }
                });
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GUI3DManager.prototype, "useRealisticScaling", {
        /** Gets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */
        get: function () {
            return this.controlScaling === GUI3DManager.MRTK_REALISTIC_SCALING;
        },
        /** Sets if controls attached to this manager are realistically sized, based on the fact that 1 unit length is 1 meter */
        set: function (newValue) {
            this.controlScaling = newValue ? GUI3DManager.MRTK_REALISTIC_SCALING : 1;
        },
        enumerable: false,
        configurable: true
    });
    GUI3DManager.prototype._handlePointerOut = function (pointerId, isPointerUp) {
        var previousControlOver = this._lastControlOver[pointerId];
        if (previousControlOver) {
            previousControlOver._onPointerOut(previousControlOver);
            delete this._lastControlOver[pointerId];
        }
        if (isPointerUp) {
            if (this._lastControlDown[pointerId]) {
                this._lastControlDown[pointerId].forcePointerUp();
                delete this._lastControlDown[pointerId];
            }
        }
        this.onPickedPointChangedObservable.notifyObservers(null);
    };
    GUI3DManager.prototype._doPicking = function (pi) {
        var _a, _b, _c;
        if (!this._utilityLayer || !this._utilityLayer.shouldRender || !this._utilityLayer.utilityLayerScene.activeCamera) {
            return false;
        }
        var pointerEvent = pi.event;
        var pointerId = pointerEvent.pointerId || 0;
        var buttonIndex = pointerEvent.button;
        var pickingInfo = pi.pickInfo;
        if (pickingInfo) {
            this.onPickingObservable.notifyObservers(pickingInfo.pickedMesh);
        }
        if (!pickingInfo || !pickingInfo.hit) {
            this._handlePointerOut(pointerId, pi.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP);
            return false;
        }
        if (pickingInfo.pickedPoint) {
            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);
        }
        var control = (_b = (_a = pickingInfo.pickedMesh.reservedDataStore) === null || _a === void 0 ? void 0 : _a.GUI3D) === null || _b === void 0 ? void 0 : _b.control;
        if (!!control && !control._processObservables(pi.type, pickingInfo.pickedPoint, ((_c = pickingInfo.originMesh) === null || _c === void 0 ? void 0 : _c.position) || null, pointerId, buttonIndex)) {
            if (pi.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERMOVE) {
                if (this._lastControlOver[pointerId]) {
                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);
                }
                delete this._lastControlOver[pointerId];
            }
        }
        if (pi.type === babylonjs_Misc_observable__WEBPACK_IMPORTED_MODULE_0__.PointerEventTypes.POINTERUP) {
            if (this._lastControlDown[pointerEvent.pointerId]) {
                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();
                delete this._lastControlDown[pointerEvent.pointerId];
            }
            if (pointerEvent.pointerType === "touch" || (pointerEvent.pointerType === "xr" && this._scene.getEngine().hostInformation.isMobile)) {
                this._handlePointerOut(pointerId, false);
            }
        }
        return true;
    };
    Object.defineProperty(GUI3DManager.prototype, "rootContainer", {
        /**
         * Gets the root container
         */
        get: function () {
            return this._rootContainer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets a boolean indicating if the given control is in the root child list
     * @param control defines the control to check
     * @returns true if the control is in the root child list
     */
    GUI3DManager.prototype.containsControl = function (control) {
        return this._rootContainer.containsControl(control);
    };
    /**
     * Adds a control to the root child list
     * @param control defines the control to add
     * @returns the current manager
     */
    GUI3DManager.prototype.addControl = function (control) {
        this._rootContainer.addControl(control);
        if (this._customControlScaling !== 1) {
            control.scaling.scaleInPlace(this._customControlScaling);
            control._isScaledByManager = true;
        }
        return this;
    };
    /**
     * Removes a control from the root child list
     * @param control defines the control to remove
     * @returns the current container
     */
    GUI3DManager.prototype.removeControl = function (control) {
        this._rootContainer.removeControl(control);
        if (control._isScaledByManager) {
            control.scaling.scaleInPlace(1 / this._customControlScaling);
            control._isScaledByManager = false;
        }
        return this;
    };
    /**
     * Releases all associated resources
     */
    GUI3DManager.prototype.dispose = function () {
        this._rootContainer.dispose();
        for (var materialName in this._sharedMaterials) {
            if (!Object.prototype.hasOwnProperty.call(this._sharedMaterials, materialName)) {
                continue;
            }
            this._sharedMaterials[materialName].dispose();
        }
        this._sharedMaterials = {};
        for (var materialName in this._touchSharedMaterials) {
            if (!Object.prototype.hasOwnProperty.call(this._touchSharedMaterials, materialName)) {
                continue;
            }
            this._touchSharedMaterials[materialName].dispose();
        }
        this._touchSharedMaterials = {};
        if (this._pointerOutObserver && this._utilityLayer) {
            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);
            this._pointerOutObserver = null;
        }
        this.onPickedPointChangedObservable.clear();
        this.onPickingObservable.clear();
        var utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;
        if (utilityLayerScene) {
            if (this._pointerObserver) {
                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);
                this._pointerObserver = null;
            }
        }
        if (this._scene) {
            if (this._sceneDisposeObserver) {
                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);
                this._sceneDisposeObserver = null;
            }
        }
        if (this._utilityLayer) {
            this._utilityLayer.dispose();
        }
    };
    GUI3DManager.MRTK_REALISTIC_SCALING = 0.032;
    return GUI3DManager;
}());


/***/ }),

/***/ "../../../dev/gui/src/3D/index.ts":
/*!****************************************!*\
  !*** ../../../dev/gui/src/3D/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractButton3D: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.AbstractButton3D),
/* harmony export */   Button3D: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Button3D),
/* harmony export */   Container3D: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Container3D),
/* harmony export */   Control3D: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Control3D),
/* harmony export */   CornerHandle: () => (/* reexport safe */ _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.CornerHandle),
/* harmony export */   CylinderPanel: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.CylinderPanel),
/* harmony export */   FluentBackplateMaterial: () => (/* reexport safe */ _materials_index__WEBPACK_IMPORTED_MODULE_1__.FluentBackplateMaterial),
/* harmony export */   FluentButtonMaterial: () => (/* reexport safe */ _materials_index__WEBPACK_IMPORTED_MODULE_1__.FluentButtonMaterial),
/* harmony export */   FluentMaterial: () => (/* reexport safe */ _materials_index__WEBPACK_IMPORTED_MODULE_1__.FluentMaterial),
/* harmony export */   FluentMaterialDefines: () => (/* reexport safe */ _materials_index__WEBPACK_IMPORTED_MODULE_1__.FluentMaterialDefines),
/* harmony export */   GUI3DManager: () => (/* reexport safe */ _gui3DManager__WEBPACK_IMPORTED_MODULE_3__.GUI3DManager),
/* harmony export */   GizmoHandle: () => (/* reexport safe */ _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.GizmoHandle),
/* harmony export */   HandMenu: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.HandMenu),
/* harmony export */   HandleMaterial: () => (/* reexport safe */ _materials_index__WEBPACK_IMPORTED_MODULE_1__.HandleMaterial),
/* harmony export */   HandleState: () => (/* reexport safe */ _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.HandleState),
/* harmony export */   HolographicBackplate: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.HolographicBackplate),
/* harmony export */   HolographicButton: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.HolographicButton),
/* harmony export */   HolographicSlate: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.HolographicSlate),
/* harmony export */   MRDLBackplateMaterial: () => (/* reexport safe */ _materials_index__WEBPACK_IMPORTED_MODULE_1__.MRDLBackplateMaterial),
/* harmony export */   MRDLSliderBarMaterial: () => (/* reexport safe */ _materials_index__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderBarMaterial),
/* harmony export */   MRDLSliderThumbMaterial: () => (/* reexport safe */ _materials_index__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderThumbMaterial),
/* harmony export */   MeshButton3D: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.MeshButton3D),
/* harmony export */   NearMenu: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.NearMenu),
/* harmony export */   PlanePanel: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.PlanePanel),
/* harmony export */   ScatterPanel: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.ScatterPanel),
/* harmony export */   SideHandle: () => (/* reexport safe */ _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.SideHandle),
/* harmony export */   SlateGizmo: () => (/* reexport safe */ _gizmos_index__WEBPACK_IMPORTED_MODULE_2__.SlateGizmo),
/* harmony export */   Slider3D: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.Slider3D),
/* harmony export */   SpherePanel: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.SpherePanel),
/* harmony export */   StackPanel3D: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.StackPanel3D),
/* harmony export */   TouchButton3D: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchButton3D),
/* harmony export */   TouchHolographicButton: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicButton),
/* harmony export */   TouchHolographicButtonV3: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicButtonV3),
/* harmony export */   TouchHolographicMenu: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicMenu),
/* harmony export */   TouchMeshButton3D: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.TouchMeshButton3D),
/* harmony export */   Vector3WithInfo: () => (/* reexport safe */ _vector3WithInfo__WEBPACK_IMPORTED_MODULE_4__.Vector3WithInfo),
/* harmony export */   VolumeBasedPanel: () => (/* reexport safe */ _controls_index__WEBPACK_IMPORTED_MODULE_0__.VolumeBasedPanel)
/* harmony export */ });
/* harmony import */ var _controls_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controls/index */ "../../../dev/gui/src/3D/controls/index.ts");
/* harmony import */ var _materials_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./materials/index */ "../../../dev/gui/src/3D/materials/index.ts");
/* harmony import */ var _gizmos_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gizmos/index */ "../../../dev/gui/src/3D/gizmos/index.ts");
/* harmony import */ var _gui3DManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gui3DManager */ "../../../dev/gui/src/3D/gui3DManager.ts");
/* harmony import */ var _vector3WithInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vector3WithInfo */ "../../../dev/gui/src/3D/vector3WithInfo.ts");
/* eslint-disable import/no-internal-modules */







/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluent/fluentMaterial.ts":
/*!******************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluent/fluentMaterial.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FluentMaterial: () => (/* binding */ FluentMaterial),
/* harmony export */   FluentMaterialDefines: () => (/* binding */ FluentMaterialDefines)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Materials/materialHelper.functions */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_fluent_vertex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/fluent.vertex */ "../../../dev/gui/src/3D/materials/fluent/shaders/fluent.vertex.ts");
/* harmony import */ var _shaders_fluent_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/fluent.fragment */ "../../../dev/gui/src/3D/materials/fluent/shaders/fluent.fragment.ts");












/** @internal */
var FluentMaterialDefines = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(FluentMaterialDefines, _super);
    function FluentMaterialDefines() {
        var _this = _super.call(this) || this;
        _this.INNERGLOW = false;
        _this.BORDER = false;
        _this.HOVERLIGHT = false;
        _this.TEXTURE = false;
        _this.rebuild();
        return _this;
    }
    return FluentMaterialDefines;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.MaterialDefines));

/**
 * Class used to render controls with fluent design
 */
var FluentMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(FluentMaterial, _super);
    /**
     * Creates a new Fluent material
     * @param name defines the name of the material
     * @param scene defines the hosting scene
     */
    function FluentMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)
         */
        _this.innerGlowColorIntensity = 0.5;
        /**
         * Gets or sets the inner glow color (white by default)
         */
        _this.innerGlowColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color3(1.0, 1.0, 1.0);
        /**
         * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))
         */
        _this.albedoColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color3(0.3, 0.35, 0.4);
        /**
         * Gets or sets a boolean indicating if borders must be rendered (default is false)
         */
        _this.renderBorders = false;
        /**
         * Gets or sets border width (default is 0.5)
         */
        _this.borderWidth = 0.5;
        /**
         * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)
         */
        _this.edgeSmoothingValue = 0.02;
        /**
         * Gets or sets the minimum value that can be applied to border width (default is 0.1)
         */
        _this.borderMinValue = 0.1;
        /**
         * Gets or sets a boolean indicating if hover light must be rendered (default is false)
         */
        _this.renderHoverLight = false;
        /**
         * Gets or sets the radius used to render the hover light (default is 0.01)
         */
        _this.hoverRadius = 0.01;
        /**
         * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))
         */
        _this.hoverColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.3, 0.3, 0.3, 1.0);
        /**
         * Gets or sets the hover light position in world space (default is Vector3.Zero())
         */
        _this.hoverPosition = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
        return _this;
    }
    FluentMaterial.prototype.needAlphaBlending = function () {
        return this.alpha !== 1.0;
    };
    FluentMaterial.prototype.needAlphaTesting = function () {
        return false;
    };
    FluentMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    FluentMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh) {
        var drawWrapper = subMesh._drawWrapper;
        if (this.isFrozen) {
            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh.materialDefines) {
            subMesh.materialDefines = new FluentMaterialDefines();
        }
        var scene = this.getScene();
        var defines = subMesh.materialDefines;
        if (!this.checkReadyOnEveryCall && subMesh.effect) {
            if (defines._renderId === scene.getRenderId()) {
                return true;
            }
        }
        if (defines._areTexturesDirty) {
            defines.INNERGLOW = this.innerGlowColorIntensity > 0;
            defines.BORDER = this.renderBorders;
            defines.HOVERLIGHT = this.renderHoverLight;
            if (this._albedoTexture) {
                if (!this._albedoTexture.isReadyOrNotBlocking()) {
                    return false;
                }
                else {
                    defines.TEXTURE = true;
                }
            }
            else {
                defines.TEXTURE = false;
            }
        }
        var engine = scene.getEngine();
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            //Attributes
            var attribs = [babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.PositionKind];
            attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.NormalKind);
            attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UVKind);
            var shaderName = "fluent";
            var uniforms = [
                "world",
                "viewProjection",
                "innerGlowColor",
                "albedoColor",
                "borderWidth",
                "edgeSmoothingValue",
                "scaleFactor",
                "borderMinValue",
                "hoverColor",
                "hoverPosition",
                "hoverRadius",
                "textureMatrix",
            ];
            var samplers = ["albedoSampler"];
            var uniformBuffers = [];
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareUniformsAndSamplersList)({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: 4,
            });
            var join = defines.toString();
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: null,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: 4 },
            }, engine), defines, this._materialContext);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        drawWrapper._wasPreviouslyReady = true;
        return true;
    };
    FluentMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var scene = this.getScene();
        var defines = subMesh.materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
        if (this._mustRebind(scene, effect, subMesh)) {
            this._activeEffect.setColor4("albedoColor", this.albedoColor, this.alpha);
            if (defines.INNERGLOW) {
                this._activeEffect.setColor4("innerGlowColor", this.innerGlowColor, this.innerGlowColorIntensity);
            }
            if (defines.BORDER) {
                this._activeEffect.setFloat("borderWidth", this.borderWidth);
                this._activeEffect.setFloat("edgeSmoothingValue", this.edgeSmoothingValue);
                this._activeEffect.setFloat("borderMinValue", this.borderMinValue);
                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0]);
                this._activeEffect.setVector3("scaleFactor", babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.TmpVectors.Vector3[0]);
            }
            if (defines.HOVERLIGHT) {
                this._activeEffect.setDirectColor4("hoverColor", this.hoverColor);
                this._activeEffect.setFloat("hoverRadius", this.hoverRadius);
                this._activeEffect.setVector3("hoverPosition", this.hoverPosition);
            }
            if (defines.TEXTURE && this._albedoTexture) {
                this._activeEffect.setTexture("albedoSampler", this._albedoTexture);
                var matrix = this._albedoTexture.getTextureMatrix();
                this._activeEffect.setMatrix("textureMatrix", matrix);
            }
        }
        this._afterBind(mesh, this._activeEffect, subMesh);
    };
    FluentMaterial.prototype.getActiveTextures = function () {
        var activeTextures = _super.prototype.getActiveTextures.call(this);
        return activeTextures;
    };
    FluentMaterial.prototype.hasTexture = function (texture) {
        if (_super.prototype.hasTexture.call(this, texture)) {
            return true;
        }
        return false;
    };
    FluentMaterial.prototype.dispose = function (forceDisposeEffect) {
        _super.prototype.dispose.call(this, forceDisposeEffect);
    };
    FluentMaterial.prototype.clone = function (name) {
        var _this = this;
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Clone(function () { return new FluentMaterial(name, _this.getScene()); }, this);
    };
    FluentMaterial.prototype.serialize = function () {
        var serializationObject = _super.prototype.serialize.call(this);
        serializationObject.customType = "BABYLON.GUI.FluentMaterial";
        return serializationObject;
    };
    FluentMaterial.prototype.getClassName = function () {
        return "FluentMaterial";
    };
    // Statics
    FluentMaterial.Parse = function (source, scene, rootUrl) {
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return new FluentMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)(),
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.expandToProperty)("_markAllSubMeshesAsTexturesDirty")
    ], FluentMaterial.prototype, "innerGlowColorIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsColor3)()
    ], FluentMaterial.prototype, "innerGlowColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsColor3)()
    ], FluentMaterial.prototype, "albedoColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)(),
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.expandToProperty)("_markAllSubMeshesAsTexturesDirty")
    ], FluentMaterial.prototype, "renderBorders", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentMaterial.prototype, "borderWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentMaterial.prototype, "edgeSmoothingValue", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentMaterial.prototype, "borderMinValue", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)(),
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.expandToProperty)("_markAllSubMeshesAsTexturesDirty")
    ], FluentMaterial.prototype, "renderHoverLight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentMaterial.prototype, "hoverRadius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsColor4)()
    ], FluentMaterial.prototype, "hoverColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsVector3)()
    ], FluentMaterial.prototype, "hoverPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsTexture)("albedoTexture")
    ], FluentMaterial.prototype, "_albedoTexture", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.expandToProperty)("_markAllSubMeshesAsTexturesAndMiscDirty")
    ], FluentMaterial.prototype, "albedoTexture", void 0);
    return FluentMaterial;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PushMaterial));
(0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.FluentMaterial", FluentMaterial);


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluent/index.ts":
/*!*********************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluent/index.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FluentMaterial: () => (/* reexport safe */ _fluentMaterial__WEBPACK_IMPORTED_MODULE_0__.FluentMaterial),
/* harmony export */   FluentMaterialDefines: () => (/* reexport safe */ _fluentMaterial__WEBPACK_IMPORTED_MODULE_0__.FluentMaterialDefines)
/* harmony export */ });
/* harmony import */ var _fluentMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fluentMaterial */ "../../../dev/gui/src/3D/materials/fluent/fluentMaterial.ts");



/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluent/shaders/fluent.fragment.ts":
/*!***************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluent/shaders/fluent.fragment.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fluentPixelShader: () => (/* binding */ fluentPixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "fluentPixelShader";
var shader = "precision highp float;varying vec2 vUV;uniform vec4 albedoColor;\n#ifdef INNERGLOW\nuniform vec4 innerGlowColor;\n#endif\n#ifdef BORDER\nvarying vec2 scaleInfo;uniform float edgeSmoothingValue;uniform float borderMinValue;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;uniform vec3 hoverPosition;uniform vec4 hoverColor;uniform float hoverRadius;\n#endif\n#ifdef TEXTURE\nuniform sampler2D albedoSampler;uniform mat4 textureMatrix;vec2 finalUV;\n#endif\nvoid main(void) {vec3 albedo=albedoColor.rgb;float alpha=albedoColor.a;\n#ifdef TEXTURE\nfinalUV=vec2(textureMatrix*vec4(vUV,1.0,0.0));albedo=texture2D(albedoSampler,finalUV).rgb;\n#endif\n#ifdef HOVERLIGHT\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;albedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\n#else\nfloat pointToHover=1.0;\n#endif\n#ifdef BORDER \nfloat borderPower=10.0;float inverseBorderPower=1.0/borderPower;vec3 borderColor=albedo*borderPower;vec2 distanceToEdge;distanceToEdge.x=abs(vUV.x-0.5)*2.0;distanceToEdge.y=abs(vUV.y-0.5)*2.0;float borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));borderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \nalbedo+=borderColor;alpha=max(alpha,borderValue);\n#endif\n#ifdef INNERGLOW\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);uvGlow=uvGlow*uvGlow;uvGlow=uvGlow*uvGlow;albedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \n#endif\ngl_FragColor=vec4(albedo,alpha);}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var fluentPixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluent/shaders/fluent.vertex.ts":
/*!*************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluent/shaders/fluent.vertex.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fluentVertexShader: () => (/* binding */ fluentVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "fluentVertexShader";
var shader = "precision highp float;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;uniform mat4 world;uniform mat4 viewProjection;varying vec2 vUV;\n#ifdef BORDER\nvarying vec2 scaleInfo;uniform float borderWidth;uniform vec3 scaleFactor;\n#endif\n#ifdef HOVERLIGHT\nvarying vec3 worldPosition;\n#endif\nvoid main(void) {vUV=uv;\n#ifdef BORDER\nvec3 scale=scaleFactor;float minScale=min(min(scale.x,scale.y),scale.z);float maxScale=max(max(scale.x,scale.y),scale.z);float minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);float areaYZ=scale.y*scale.z;float areaXZ=scale.x*scale.z;float areaXY=scale.x*scale.y;float scaledBorderWidth=borderWidth; \nif (abs(normal.x)==1.0) \n{scale.x=scale.y;scale.y=scale.z;if (areaYZ>areaXZ && areaYZ>areaXY)\n{scaledBorderWidth*=minOverMiddleScale;}}\nelse if (abs(normal.y)==1.0) \n{scale.x=scale.z;if (areaXZ>areaXY && areaXZ>areaYZ)\n{scaledBorderWidth*=minOverMiddleScale;}}\nelse \n{if (areaXY>areaYZ && areaXY>areaXZ)\n{scaledBorderWidth*=minOverMiddleScale;}}\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);if (scale.x>scale.y)\n{scaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);scaleInfo.y=1.0-scaledBorderWidth;}\nelse\n{scaleInfo.x=1.0-scaledBorderWidth;scaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);} \n#endif \nvec4 worldPos=world*vec4(position,1.0);\n#ifdef HOVERLIGHT\nworldPosition=worldPos.xyz;\n#endif\ngl_Position=viewProjection*worldPos;}\n";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var fluentVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluentBackplate/fluentBackplateMaterial.ts":
/*!************************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluentBackplate/fluentBackplateMaterial.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FluentBackplateMaterial: () => (/* binding */ FluentBackplateMaterial)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Materials/materialHelper.functions */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_fluentBackplate_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/fluentBackplate.fragment */ "../../../dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.ts");
/* harmony import */ var _shaders_fluentBackplate_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/fluentBackplate.vertex */ "../../../dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.ts");















/** @internal */
var FluentBackplateMaterialDefines = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(FluentBackplateMaterialDefines, _super);
    function FluentBackplateMaterialDefines() {
        var _this = _super.call(this) || this;
        _this.BLOB_ENABLE = true;
        _this.BLOB_ENABLE_2 = true;
        _this.SMOOTH_EDGES = true;
        _this.IRIDESCENT_MAP_ENABLE = true;
        _this._needNormals = true;
        _this.rebuild();
        return _this;
    }
    return FluentBackplateMaterialDefines;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.MaterialDefines));
/**
 * Class used to render square buttons with fluent design
 */
var FluentBackplateMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(FluentBackplateMaterial, _super);
    function FluentBackplateMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Gets or sets the corner radius on the backplate. Best to keep this value between 0.01 and 0.5. Default is 0.03.
         */
        _this.radius = 0.03;
        /**
         * Gets or sets the line width of the backplate.
         */
        _this.lineWidth = 0.01;
        /**
         * Gets or sets whether to use absolute sizes when calculating effects on the backplate.
         * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.
         */
        _this.absoluteSizes = false;
        /** @internal */
        _this._filterWidth = 1;
        /**
         * Gets or sets the base color of the backplate.
         */
        _this.baseColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0392157, 0.0666667, 0.207843, 1);
        /**
         * Gets or sets the line color of the backplate.
         */
        _this.lineColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.14902, 0.133333, 0.384314, 1);
        /**
         * Gets or sets the intensity of the fluent hover glow effect.
         */
        _this.blobIntensity = 0.98;
        /**
         * Gets or sets the far size of the fluent hover glow effect.
         */
        _this.blobFarSize = 0.04;
        /**
         * Gets or sets the distance considered "near" to the backplate, which controls the size of the fluent hover glow effect (see blobNearSize).
         */
        _this.blobNearDistance = 0;
        /**
         * Gets or sets the distance considered "far" from the backplate, which controls the size of the fluent hover glow effect (see blobFarSize).
         */
        _this.blobFarDistance = 0.08;
        /**
         * Gets or sets the length of the fluent hover glow effect fade.
         */
        _this.blobFadeLength = 0.08;
        /**
         * Gets or sets the size of the fluent hover glow effect when the left pointer is considered "near" to the backplate (see blobNearDistance).
         */
        _this.blobNearSize = 0.22;
        /**
         * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).
         */
        _this.blobPulse = 0;
        /**
         * Gets or sets the opacity of the fluent hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.
         */
        _this.blobFade = 0;
        /**
         * Gets or sets the size of the fluent hover glow effect when the right pointer is considered "near" to the backplate (see blobNearDistance).
         */
        _this.blobNearSize2 = 0.22;
        /**
         * Gets or sets the progress of the fluent hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).
         */
        _this.blobPulse2 = 0;
        /**
         * Gets or sets the opacity of the fluent hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 0.
         */
        _this.blobFade2 = 0;
        /** @internal */
        _this._rate = 0.135;
        /**
         * Gets or sets the color of the highlights on the backplate line.
         */
        _this.highlightColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.98, 0.98, 0.98, 1);
        /**
         * Gets or sets the width of the highlights on the backplate line.
         */
        _this.highlightWidth = 0.25;
        /** @internal */
        _this._highlightTransform = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(1, 1, 0, 0);
        /** @internal */
        _this._highlight = 1;
        /**
         * Gets or sets the intensity of the iridescence effect.
         */
        _this.iridescenceIntensity = 0;
        /**
         * Gets or sets the intensity of the iridescence effect on the backplate edges.
         */
        _this.iridescenceEdgeIntensity = 1;
        /** @internal */
        _this._angle = -45;
        /**
         * Gets or sets the opacity of the backplate (0.0 - 1.0).
         */
        _this.fadeOut = 1;
        /** @internal */
        _this._reflected = true;
        /** @internal */
        _this._frequency = 1;
        /** @internal */
        _this._verticalOffset = 0;
        /**
         * Gets or sets the world-space position of the tip of the left index finger.
         */
        _this.globalLeftIndexTipPosition = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
        _this._globalLeftIndexTipPosition4 = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4.Zero();
        /**
         * Gets or sets the world-space position of the tip of the right index finger.
         */
        _this.globalRightIndexTipPosition = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
        _this._globalRightIndexTipPosition4 = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4.Zero();
        _this.alphaMode = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Constants.ALPHA_DISABLE;
        _this.backFaceCulling = false;
        _this._blobTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture(FluentBackplateMaterial.BLOB_TEXTURE_URL, _this.getScene(), true, false, babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture.NEAREST_SAMPLINGMODE);
        _this._iridescentMap = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture(FluentBackplateMaterial.IM_TEXTURE_URL, _this.getScene(), true, false, babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture.NEAREST_SAMPLINGMODE);
        return _this;
    }
    FluentBackplateMaterial.prototype.needAlphaBlending = function () {
        return false;
    };
    FluentBackplateMaterial.prototype.needAlphaTesting = function () {
        return false;
    };
    FluentBackplateMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    FluentBackplateMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh) {
        var drawWrapper = subMesh._drawWrapper;
        if (this.isFrozen) {
            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh.materialDefines) {
            subMesh.materialDefines = new FluentBackplateMaterialDefines();
        }
        var defines = subMesh.materialDefines;
        var scene = this.getScene();
        if (this._isReadyForSubMesh(subMesh)) {
            return true;
        }
        var engine = scene.getEngine();
        // Attribs
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareDefinesForAttributes)(mesh, defines, false, false);
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            // Fallbacks
            var fallbacks = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.EffectFallbacks();
            if (defines.FOG) {
                fallbacks.addFallback(1, "FOG");
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.HandleFallbacksForShadows)(defines, fallbacks);
            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
            //Attributes
            var attribs = [babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.PositionKind];
            if (defines.NORMAL) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.NormalKind);
            }
            if (defines.UV1) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UVKind);
            }
            if (defines.UV2) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UV2Kind);
            }
            if (defines.VERTEXCOLOR) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.ColorKind);
            }
            if (defines.TANGENT) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.TangentKind);
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareAttributesForInstances)(attribs, defines);
            // Legacy browser patch
            var shaderName = "fluentBackplate";
            var join = defines.toString();
            var uniforms = [
                "world",
                "viewProjection",
                "cameraPosition",
                "_Radius_",
                "_Line_Width_",
                "_Absolute_Sizes_",
                "_Filter_Width_",
                "_Base_Color_",
                "_Line_Color_",
                "_Radius_Top_Left_",
                "_Radius_Top_Right_",
                "_Radius_Bottom_Left_",
                "_Radius_Bottom_Right_",
                "_Blob_Position_",
                "_Blob_Intensity_",
                "_Blob_Near_Size_",
                "_Blob_Far_Size_",
                "_Blob_Near_Distance_",
                "_Blob_Far_Distance_",
                "_Blob_Fade_Length_",
                "_Blob_Pulse_",
                "_Blob_Fade_",
                "_Blob_Texture_",
                "_Blob_Position_2_",
                "_Blob_Near_Size_2_",
                "_Blob_Pulse_2_",
                "_Blob_Fade_2_",
                "_Rate_",
                "_Highlight_Color_",
                "_Highlight_Width_",
                "_Highlight_Transform_",
                "_Highlight_",
                "_Iridescence_Intensity_",
                "_Iridescence_Edge_Intensity_",
                "_Angle_",
                "_Fade_Out_",
                "_Reflected_",
                "_Frequency_",
                "_Vertical_Offset_",
                "_Iridescent_Map_",
                "_Use_Global_Left_Index_",
                "_Use_Global_Right_Index_",
                "Global_Left_Index_Tip_Position",
                "Global_Right_Index_Tip_Position",
            ];
            var samplers = ["_Blob_Texture_", "_Iridescent_Map_"];
            var uniformBuffers = [];
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareUniformsAndSamplersList)({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: 4,
            });
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: fallbacks,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: 4 },
            }, engine), defines, this._materialContext);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        drawWrapper._wasPreviouslyReady = true;
        return true;
    };
    FluentBackplateMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var _a, _b;
        var defines = subMesh.materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", this.getScene().getTransformMatrix());
        this._activeEffect.setVector3("cameraPosition", (_b = (_a = this.getScene().activeCamera) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3.ZeroReadOnly);
        // "Round Rect"
        this._activeEffect.setFloat("_Radius_", this.radius);
        this._activeEffect.setFloat("_Line_Width_", this.lineWidth);
        this._activeEffect.setFloat("_Absolute_Sizes_", this.absoluteSizes ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Filter_Width_", this._filterWidth);
        this._activeEffect.setDirectColor4("_Base_Color_", this.baseColor);
        this._activeEffect.setDirectColor4("_Line_Color_", this.lineColor);
        // "Radii Multipliers"
        this._activeEffect.setFloat("_Radius_Top_Left_", 1);
        this._activeEffect.setFloat("_Radius_Top_Right_", 1.0);
        this._activeEffect.setFloat("_Radius_Bottom_Left_", 1.0);
        this._activeEffect.setFloat("_Radius_Bottom_Right_", 1.0);
        // "Blob"
        //define BLOB_ENABLE true;
        this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
        this._activeEffect.setFloat("_Blob_Near_Size_", this.blobNearSize);
        this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
        this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
        this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
        this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
        this._activeEffect.setFloat("_Blob_Pulse_", this.blobPulse);
        this._activeEffect.setFloat("_Blob_Fade_", this.blobFade);
        // "Blob Texture"
        this._activeEffect.setTexture("_Blob_Texture_", this._blobTexture);
        // "Blob 2"
        //define BLOB_ENABLE_2 true;
        this._activeEffect.setFloat("_Blob_Near_Size_2_", this.blobNearSize2);
        this._activeEffect.setFloat("_Blob_Pulse_2_", this.blobPulse2);
        this._activeEffect.setFloat("_Blob_Fade_2_", this.blobFade2);
        // "Line Highlight"
        this._activeEffect.setFloat("_Rate_", this._rate);
        this._activeEffect.setDirectColor4("_Highlight_Color_", this.highlightColor);
        this._activeEffect.setFloat("_Highlight_Width_", this.highlightWidth);
        this._activeEffect.setVector4("_Highlight_Transform_", this._highlightTransform);
        this._activeEffect.setFloat("_Highlight_", this._highlight);
        // "Iridescence"
        this._activeEffect.setFloat("_Iridescence_Intensity_", this.iridescenceIntensity);
        this._activeEffect.setFloat("_Iridescence_Edge_Intensity_", this.iridescenceEdgeIntensity);
        this._activeEffect.setFloat("_Angle_", this._angle);
        // "Fade"
        this._activeEffect.setFloat("_Fade_Out_", this.fadeOut);
        // "Antialiasing"
        //define SMOOTH_EDGES true;
        // "ChooseAngle"
        this._activeEffect.setFloat("_Reflected_", this._reflected ? 1.0 : 0.0);
        // "Multiply"
        this._activeEffect.setFloat("_Frequency_", this._frequency);
        this._activeEffect.setFloat("_Vertical_Offset_", this._verticalOffset);
        // "Color Texture"
        //define IRIDESCENT_MAP_ENABLE true;
        this._activeEffect.setTexture("_Iridescent_Map_", this._iridescentMap);
        // "Global"
        this._activeEffect.setFloat("_Use_Global_Left_Index_", 1.0);
        this._activeEffect.setFloat("_Use_Global_Right_Index_", 1.0);
        this._globalLeftIndexTipPosition4.set(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0);
        this._activeEffect.setVector4("Global_Left_Index_Tip_Position", this._globalLeftIndexTipPosition4);
        this._globalRightIndexTipPosition4.set(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0);
        this._activeEffect.setVector4("Global_Right_Index_Tip_Position", this._globalRightIndexTipPosition4);
        this._afterBind(mesh, this._activeEffect, subMesh);
    };
    /**
     * Get the list of animatables in the material.
     * @returns the list of animatables object used in the material
     */
    FluentBackplateMaterial.prototype.getAnimatables = function () {
        return [];
    };
    FluentBackplateMaterial.prototype.dispose = function (forceDisposeEffect) {
        _super.prototype.dispose.call(this, forceDisposeEffect);
        this._blobTexture.dispose();
        this._iridescentMap.dispose();
    };
    FluentBackplateMaterial.prototype.clone = function (name) {
        var _this = this;
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Clone(function () { return new FluentBackplateMaterial(name, _this.getScene()); }, this);
    };
    FluentBackplateMaterial.prototype.serialize = function () {
        var serializationObject = _super.prototype.serialize.call(this);
        serializationObject.customType = "BABYLON.FluentBackplateMaterial";
        return serializationObject;
    };
    FluentBackplateMaterial.prototype.getClassName = function () {
        return "FluentBackplateMaterial";
    };
    // Statics
    FluentBackplateMaterial.Parse = function (source, scene, rootUrl) {
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return new FluentBackplateMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    /**
     * URL pointing to the texture used to define the coloring for the fluent blob effect.
     */
    FluentBackplateMaterial.BLOB_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-blob.png";
    /**
     * URL pointing to the texture used to define iridescent map.
     */
    FluentBackplateMaterial.IM_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-backplate-iridescence.png";
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "radius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "lineWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "absoluteSizes", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "baseColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "lineColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobFarSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobNearDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobFarDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobFadeLength", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobNearSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobPulse", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobNearSize2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobPulse2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "blobFade2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "highlightColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "highlightWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "iridescenceIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "iridescenceEdgeIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentBackplateMaterial.prototype, "fadeOut", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsVector3)()
    ], FluentBackplateMaterial.prototype, "globalLeftIndexTipPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsVector3)()
    ], FluentBackplateMaterial.prototype, "globalRightIndexTipPosition", void 0);
    return FluentBackplateMaterial;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PushMaterial));
(0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.FluentBackplateMaterial", FluentBackplateMaterial);


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluentBackplate/index.ts":
/*!******************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluentBackplate/index.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FluentBackplateMaterial: () => (/* reexport safe */ _fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_0__.FluentBackplateMaterial)
/* harmony export */ });
/* harmony import */ var _fluentBackplateMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fluentBackplateMaterial */ "../../../dev/gui/src/3D/materials/fluentBackplate/fluentBackplateMaterial.ts");



/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.ts":
/*!*********************************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.fragment.ts ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fluentBackplatePixelShader: () => (/* binding */ fluentBackplatePixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "fluentBackplatePixelShader";
var shader = "uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform float _Angle_;uniform float _Fade_Out_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform sampler2D _Iridescent_Map_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;void Round_Rect_Fragment_B31(\nfloat Radius,\nfloat Line_Width,\nvec4 Line_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Line_Visibility,\nvec4 Rect_Parms,\nvec4 Fill_Color,\nout vec4 Color)\n{float d=length(max(abs(UV)-Rect_Parms.xy,0.0));float dx=max(fwidth(d)*Filter_Width,0.00001);float g=min(Rect_Parms.z,Rect_Parms.w);float dgrad=max(fwidth(g)*Filter_Width,0.00001);float Inside_Rect=clamp(g/dgrad,0.0,1.0);float inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);Color=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;}\nvoid Blob_Fragment_B71(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{float k1=dot(Blob_Info1.xy,Blob_Info1.xy);float k2=dot(Blob_Info2.xy,Blob_Info2.xy);vec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);Blob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);}\nvoid Line_Fragment_B48(\nvec4 Base_Color,\nvec4 Highlight_Color,\nfloat Highlight_Width,\nvec3 Line_Vertex,\nfloat Highlight,\nout vec4 Line_Color)\n{float k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);Line_Color=mix(Base_Color,Highlight_Color,Highlight*k2);}\nvoid Scale_RGB_B54(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Conditional_Float_B38(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid main()\n{float R_Q72;float G_Q72;float B_Q72;float A_Q72;R_Q72=vColor.r; G_Q72=vColor.g; B_Q72=vColor.b; A_Q72=vColor.a;vec4 Blob_Color_Q71;\n#if BLOB_ENABLE\nfloat k1=dot(vExtra2.xy,vExtra2.xy);float k2=dot(vExtra3.xy,vExtra3.xy);vec3 closer=k1<k2 ? vec3(k1,vExtra2.z,vExtra2.w) : vec3(k2,vExtra3.z,vExtra3.w);Blob_Color_Q71=closer.z*texture(_Blob_Texture_,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);\n#else\nBlob_Color_Q71=vec4(0,0,0,0);\n#endif\nvec4 Line_Color_Q48;Line_Fragment_B48(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q48);float X_Q67;float Y_Q67;X_Q67=vUV.x;Y_Q67=vUV.y;vec3 Incident_Q66=normalize(vPosition-cameraPosition);vec3 Reflected_Q60=reflect(Incident_Q66,vBinormal);float Product_Q63=Y_Q67*_Vertical_Offset_;float Dot_Q68=dot(Incident_Q66, Reflected_Q60);float Dot_Q57=dot(vNormal, Incident_Q66);float Result_Q38;Conditional_Float_B38(_Reflected_,Dot_Q68,Dot_Q57,Result_Q38);float Product_Q64=Result_Q38*_Frequency_;float Sum_Q69=Product_Q64+1.0;float Product_Q70=Sum_Q69*0.5;float Sum_Q62=Product_Q63+Product_Q70;float FractF_Q59=fract(Sum_Q62);vec2 Vec2_Q65=vec2(FractF_Q59,0.5);vec4 Color_Q58;\n#if IRIDESCENT_MAP_ENABLE\nColor_Q58=texture(_Iridescent_Map_,Vec2_Q65);\n#else\nColor_Q58=vec4(0,0,0,0);\n#endif\nvec4 Result_Q54;Scale_RGB_B54(Color_Q58,_Iridescence_Edge_Intensity_,Result_Q54);vec4 Result_Q55;Scale_RGB_B54(Color_Q58,_Iridescence_Intensity_,Result_Q55);vec4 Base_And_Iridescent_Q53;Base_And_Iridescent_Q53=Line_Color_Q48+vec4(Result_Q54.rgb,0.0);vec4 Base_And_Iridescent_Q56;Base_And_Iridescent_Q56=_Base_Color_+vec4(Result_Q55.rgb,0.0);vec4 Result_Q52=Base_And_Iridescent_Q53; Result_Q52.a=1.0;vec4 Result_Q35=Blob_Color_Q71+(1.0-Blob_Color_Q71.a)*Base_And_Iridescent_Q56;vec4 Color_Q31;Round_Rect_Fragment_B31(R_Q72,G_Q72,Result_Q52,_Filter_Width_,vUV,1.0,vExtra1,Result_Q35,Color_Q31);vec4 Result_Q47=_Fade_Out_*Color_Q31;vec4 Out_Color=Result_Q47;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var fluentBackplatePixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.ts":
/*!*******************************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluentBackplate/shaders/fluentBackplate.vertex.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fluentBackplateVertexShader: () => (/* binding */ fluentBackplateVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "fluentBackplateVertexShader";
var shader = "uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform float _Angle_;uniform float _Fade_Out_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform sampler2D _Iridescent_Map_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Object_To_World_Pos_B115(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid PickDir_B140(\nfloat Degrees,\nvec3 DirX,\nvec3 DirY,\nout vec3 Dir)\n{float a=Degrees*3.14159/180.0;Dir=cos(a)*DirX+sin(a)*DirY;}\nvoid Round_Rect_Vertex_B139(\nvec2 UV,\nfloat Radius,\nfloat Margin,\nfloat Anisotropy,\nfloat Gradient1,\nfloat Gradient2,\nout vec2 Rect_UV,\nout vec4 Rect_Parms,\nout vec2 Scale_XY,\nout vec2 Line_UV)\n{Scale_XY=vec2(Anisotropy,1.0);Line_UV=(UV-vec2(0.5,0.5));Rect_UV=Line_UV*Scale_XY;Rect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);Rect_Parms.z=Gradient1; \nRect_Parms.w=Gradient2;}\nvoid Line_Vertex_B135(\nvec2 Scale_XY,\nvec2 UV,\nfloat Time,\nfloat Rate,\nvec4 Highlight_Transform,\nout vec3 Line_Vertex)\n{float angle2=(Rate*Time)*2.0*3.1416;float sinAngle2=sin(angle2);float cosAngle2=cos(angle2);vec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;Line_Vertex.x=0.0;Line_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;Line_Vertex.z=0.0; }\nvoid Blob_Vertex_B180(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob=Blob_Position;vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Move_Verts_B129(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);New_UV=center+r2*(UV-2.0*center+0.5);New_P=vec3(New_UV-0.5,P.z);Radial_Gradient=1.0-length(delta)*2.0;Radial_Dir=vec3(delta*r2,0.0);}\nvoid Object_To_World_Dir_B132(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid RelativeOrAbsoluteDetail_B147(\nfloat Nominal_Radius,\nfloat Nominal_LineWidth,\nbool Absolute_Measurements,\nfloat Height,\nout float Radius,\nout float Line_Width)\n{float scale=Absolute_Measurements ? 1.0/Height : 1.0;Radius=Nominal_Radius*scale;Line_Width=Nominal_LineWidth*scale;}\nvoid Edge_AA_Vertex_B130(\nvec3 Position_World,\nvec3 Position_Object,\nvec3 Normal_Object,\nvec3 Eye,\nfloat Radial_Gradient,\nvec3 Radial_Dir,\nvec3 Tangent,\nout float Gradient1,\nout float Gradient2)\n{vec3 I=(Eye-Position_World);vec3 T=(world* vec4(Tangent,0.0)).xyz;float g=(dot(T,I)<0.0) ? 0.0 : 1.0;if (Normal_Object.z==0.0) { \nGradient1=Position_Object.z>0.0 ? g : 1.0;Gradient2=Position_Object.z>0.0 ? 1.0 : g;} else {Gradient1=g+(1.0-g)*(Radial_Gradient);Gradient2=1.0;}}\nvoid Pick_Radius_B144(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid main()\n{vec3 Nrm_World_Q128;Nrm_World_Q128=normalize((world*vec4(normal,0.0)).xyz);vec3 Tangent_World_Q131;vec3 Tangent_World_N_Q131;float Tangent_Length_Q131;Tangent_World_Q131=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q131=length(Tangent_World_Q131);Tangent_World_N_Q131=Tangent_World_Q131/Tangent_Length_Q131;vec3 Binormal_World_Q132;vec3 Binormal_World_N_Q132;float Binormal_Length_Q132;Object_To_World_Dir_B132(vec3(0,1,0),Binormal_World_Q132,Binormal_World_N_Q132,Binormal_Length_Q132);float Anisotropy_Q133=Tangent_Length_Q131/Binormal_Length_Q132;vec3 Result_Q177;Result_Q177=mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(_Use_Global_Left_Index_));vec3 Result_Q178;Result_Q178=mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(_Use_Global_Right_Index_));float Result_Q144;Pick_Radius_B144(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q144);vec3 Dir_Q140;PickDir_B140(_Angle_,Tangent_World_N_Q131,Binormal_World_N_Q132,Dir_Q140);float Radius_Q147;float Line_Width_Q147;RelativeOrAbsoluteDetail_B147(Result_Q144,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q132,Radius_Q147,Line_Width_Q147);vec4 Out_Color_Q145=vec4(Radius_Q147,Line_Width_Q147,0,1);vec3 New_P_Q129;vec2 New_UV_Q129;float Radial_Gradient_Q129;vec3 Radial_Dir_Q129;Move_Verts_B129(Anisotropy_Q133,position,Radius_Q147,New_P_Q129,New_UV_Q129,Radial_Gradient_Q129,Radial_Dir_Q129);vec3 Pos_World_Q115;Object_To_World_Pos_B115(New_P_Q129,Pos_World_Q115);vec4 Blob_Info_Q180;\n#if BLOB_ENABLE\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q177,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q180);\n#else\nBlob_Info_Q180=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q181;\n#if BLOB_ENABLE_2\nBlob_Vertex_B180(Pos_World_Q115,Nrm_World_Q128,Tangent_World_N_Q131,Binormal_World_N_Q132,Result_Q178,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q181);\n#else\nBlob_Info_Q181=vec4(0,0,0,0);\n#endif\nfloat Gradient1_Q130;float Gradient2_Q130;\n#if SMOOTH_EDGES\nEdge_AA_Vertex_B130(Pos_World_Q115,position,normal,cameraPosition,Radial_Gradient_Q129,Radial_Dir_Q129,tangent,Gradient1_Q130,Gradient2_Q130);\n#else\nGradient1_Q130=1.0;Gradient2_Q130=1.0;\n#endif\nvec2 Rect_UV_Q139;vec4 Rect_Parms_Q139;vec2 Scale_XY_Q139;vec2 Line_UV_Q139;Round_Rect_Vertex_B139(New_UV_Q129,Radius_Q147,0.0,Anisotropy_Q133,Gradient1_Q130,Gradient2_Q130,Rect_UV_Q139,Rect_Parms_Q139,Scale_XY_Q139,Line_UV_Q139);vec3 Line_Vertex_Q135;Line_Vertex_B135(Scale_XY_Q139,Line_UV_Q139,0.0,_Rate_,_Highlight_Transform_,Line_Vertex_Q135);vec3 Position=Pos_World_Q115;vec3 Normal=Dir_Q140;vec2 UV=Rect_UV_Q139;vec3 Tangent=Line_Vertex_Q135;vec3 Binormal=Nrm_World_Q128;vec4 Color=Out_Color_Q145;vec4 Extra1=Rect_Parms_Q139;vec4 Extra2=Blob_Info_Q180;vec4 Extra3=Blob_Info_Q181;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var fluentBackplateVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluentButton/fluentButtonMaterial.ts":
/*!******************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluentButton/fluentButtonMaterial.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FluentButtonMaterial: () => (/* binding */ FluentButtonMaterial)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Materials/materialHelper.functions */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_fluentButton_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/fluentButton.fragment */ "../../../dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.fragment.ts");
/* harmony import */ var _shaders_fluentButton_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/fluentButton.vertex */ "../../../dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.vertex.ts");















/** @internal */
var FluentButtonMaterialDefines = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(FluentButtonMaterialDefines, _super);
    function FluentButtonMaterialDefines() {
        var _this = _super.call(this) || this;
        _this.RELATIVE_WIDTH = true;
        _this.ENABLE_FADE = true;
        _this._needNormals = true;
        _this._needUVs = true;
        _this.rebuild();
        return _this;
    }
    return FluentButtonMaterialDefines;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.MaterialDefines));
/**
 * Class used to render square buttons with fluent design
 * @since 5.0.0
 */
var FluentButtonMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(FluentButtonMaterial, _super);
    function FluentButtonMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Gets or sets the width of the glowing edge, relative to the scale of the button.
         * (Default is 4% of the height).
         */
        _this.edgeWidth = 0.04;
        /**
         * Gets or sets the color of the glowing edge.
         */
        _this.edgeColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.592157, 0.592157, 0.592157, 1.0);
        /**
         * Gets or sets the maximum intensity of the proximity light.
         */
        _this.proximityMaxIntensity = 0.45;
        /**
         * Gets or sets the maximum distance for the proximity light (Default is 16mm).
         */
        _this.proximityFarDistance = 0.16;
        /**
         * Gets or sets the radius of the proximity light when near to the surface.
         */
        _this.proximityNearRadius = 1.5;
        /**
         * Gets or sets the anisotropy of the proximity light.
         */
        _this.proximityAnisotropy = 1;
        /**
         * Gets or sets the amount of fuzzing in the selection focus.
         */
        _this.selectionFuzz = 0.5;
        /**
         * Gets or sets an override value to display the button as selected.
         */
        _this.selected = 0;
        /**
         * Gets or sets a value to manually fade the blob size.
         */
        _this.selectionFade = 0;
        /**
         * Gets or sets a value to manually shrink the blob size as it fades (see selectionFade).
         */
        _this.selectionFadeSize = 0.3;
        /**
         * Gets or sets the distance from the button the cursor should be for the button
         * to appear selected (Default is 8cm).
         */
        _this.selectedDistance = 0.08;
        /**
         * Gets or sets the fall-off distance for the selection fade (Default is 8cm).
         */
        _this.selectedFadeLength = 0.08;
        /**
         * Gets or sets the intensity of the luminous blob (Ranges 0-1, default is 0.5).
         */
        _this.blobIntensity = 0.5;
        /**
         * The size of the blob when the pointer is at the blobFarDistance (Default is 5cm).
         */
        _this.blobFarSize = 0.05;
        /**
         * The distance at which the pointer is considered near. See [left|right]BlobNearSize. (Default is 0cm).
         */
        _this.blobNearDistance = 0;
        /**
         * The distance at which the pointer is considered far. See [left|right]BlobFarSize. (Default is 8cm).
         */
        _this.blobFarDistance = 0.08;
        /**
         * The distance over which the blob intensity fades from full to none (Default is 8cm).
         */
        _this.blobFadeLength = 0.08;
        /**
         * Gets or sets whether the blob corresponding to the left index finger is enabled.
         */
        _this.leftBlobEnable = true;
        /**
         * Gets or sets the size of the left blob when the left pointer is considered near. See blobNearDistance. (Default is 2.5cm).
         */
        _this.leftBlobNearSize = 0.025;
        /**
         * Gets or sets the progress of the pulse animation on the left blob (Ranges 0-1).
         */
        _this.leftBlobPulse = 0;
        /**
         * Gets or sets the fade factor on the left blob.
         */
        _this.leftBlobFade = 1;
        /**
         * Gets or sets the inner fade on the left blob;
         */
        _this.leftBlobInnerFade = 0.01;
        /**
         * Gets or sets whether the blob corresponding to the right index finger is enabled.
         */
        _this.rightBlobEnable = true;
        /**
         * Gets or sets the size of the right blob when the right pointer is considered near. See blobNearDistance. (Default is 2.5cm).
         */
        _this.rightBlobNearSize = 0.025;
        /**
         * Gets or sets the progress of the pulse animation on the right blob (Ranges 0-1).
         */
        _this.rightBlobPulse = 0;
        /**
         * Gets or sets the fade factor on the right blob.
         */
        _this.rightBlobFade = 1;
        /**
         * Gets or sets the inner fade on the right blob;
         */
        _this.rightBlobInnerFade = 0.01;
        /**
         * Gets or sets the direction of the active face before the world transform is applied.
         * This should almost always be set to -z.
         */
        _this.activeFaceDir = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, -1);
        /**
         * Gets or sets the button's up direction before the world transform is applied.
         * This should almost always be set to +y.
         */
        _this.activeFaceUp = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0);
        /**
         * Gets or sets whether the edge fade effect is enabled.
         */
        _this.enableFade = true;
        /**
         * Gets or sets a value corresponding to the width of the edge fade effect (Default 1.5).
         */
        _this.fadeWidth = 1.5;
        /**
         * Gets or sets whether the active face is smoothly interpolated.
         */
        _this.smoothActiveFace = true;
        /**
         * Gets or sets whether the frame of the fluent button model is visible.
         * This is usually only enabled for debugging purposes.
         */
        _this.showFrame = false;
        /**
         * Gets or sets whether the blob color texture is used for the proximity
         * light effect. This is usually only disabled for debugging purposes.
         */
        _this.useBlobTexture = true;
        /**
         * Gets or sets the world-space position of the tip of the left index finger.
         */
        _this.globalLeftIndexTipPosition = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
        /**
         * Gets or sets the world-space position of the tip of the right index finger.
         */
        _this.globalRightIndexTipPosition = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
        _this.alphaMode = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Constants.ALPHA_ADD;
        _this.disableDepthWrite = true;
        _this.backFaceCulling = false;
        _this._blobTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture(FluentButtonMaterial.BLOB_TEXTURE_URL, _this.getScene(), true, false, babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture.NEAREST_SAMPLINGMODE);
        return _this;
    }
    FluentButtonMaterial.prototype.needAlphaBlending = function () {
        return true;
    };
    FluentButtonMaterial.prototype.needAlphaTesting = function () {
        return true;
    };
    FluentButtonMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    // Methods
    FluentButtonMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh) {
        var drawWrapper = subMesh._drawWrapper;
        if (this.isFrozen) {
            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh.materialDefines) {
            subMesh.materialDefines = new FluentButtonMaterialDefines();
        }
        var defines = subMesh.materialDefines;
        var scene = this.getScene();
        if (this._isReadyForSubMesh(subMesh)) {
            return true;
        }
        var engine = scene.getEngine();
        // Attribs
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareDefinesForAttributes)(mesh, defines, true, false);
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            // Fallbacks
            var fallbacks = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.EffectFallbacks();
            if (defines.FOG) {
                fallbacks.addFallback(1, "FOG");
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.HandleFallbacksForShadows)(defines, fallbacks);
            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
            //Attributes
            var attribs = [babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.PositionKind];
            if (defines.NORMAL) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.NormalKind);
            }
            if (defines.UV1) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UVKind);
            }
            if (defines.UV2) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UV2Kind);
            }
            if (defines.VERTEXCOLOR) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.ColorKind);
            }
            if (defines.TANGENT) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.TangentKind);
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareAttributesForInstances)(attribs, defines);
            // Legacy browser patch
            var shaderName = "fluentButton";
            var join = defines.toString();
            var uniforms = [
                "world",
                "viewProjection",
                "cameraPosition",
                "_Edge_Width_",
                "_Edge_Color_",
                "_Relative_Width_",
                "_Proximity_Max_Intensity_",
                "_Proximity_Far_Distance_",
                "_Proximity_Near_Radius_",
                "_Proximity_Anisotropy_",
                "_Selection_Fuzz_",
                "_Selected_",
                "_Selection_Fade_",
                "_Selection_Fade_Size_",
                "_Selected_Distance_",
                "_Selected_Fade_Length_",
                "_Blob_Enable_",
                "_Blob_Position_",
                "_Blob_Intensity_",
                "_Blob_Near_Size_",
                "_Blob_Far_Size_",
                "_Blob_Near_Distance_",
                "_Blob_Far_Distance_",
                "_Blob_Fade_Length_",
                "_Blob_Inner_Fade_",
                "_Blob_Pulse_",
                "_Blob_Fade_",
                "_Blob_Texture_",
                "_Blob_Enable_2_",
                "_Blob_Position_2_",
                "_Blob_Near_Size_2_",
                "_Blob_Inner_Fade_2_",
                "_Blob_Pulse_2_",
                "_Blob_Fade_2_",
                "_Active_Face_Dir_",
                "_Active_Face_Up_",
                "_Enable_Fade_",
                "_Fade_Width_",
                "_Smooth_Active_Face_",
                "_Show_Frame_",
                "_Use_Blob_Texture_",
                "Use_Global_Left_Index",
                "Use_Global_Right_Index",
                "Global_Left_Index_Tip_Position",
                "Global_Right_Index_Tip_Position",
                "Global_Left_Thumb_Tip_Position",
                "Global_Right_Thumb_Tip_Position",
                "Global_Left_Index_Tip_Proximity",
                "Global_Right_Index_Tip_Proximity",
            ];
            var samplers = ["_Blob_Texture_"];
            var uniformBuffers = [];
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareUniformsAndSamplersList)({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: 4,
            });
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: fallbacks,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: 4 },
            }, engine), defines, this._materialContext);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        drawWrapper._wasPreviouslyReady = true;
        return true;
    };
    FluentButtonMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var scene = this.getScene();
        var defines = subMesh.materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
        this._activeEffect.setVector3("cameraPosition", scene.activeCamera.position);
        // "Blob Texture"
        this._activeEffect.setTexture("_Blob_Texture_", this._blobTexture);
        // "Wireframe"
        this._activeEffect.setFloat("_Edge_Width_", this.edgeWidth);
        this._activeEffect.setColor4("_Edge_Color_", new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color3(this.edgeColor.r, this.edgeColor.g, this.edgeColor.b), this.edgeColor.a);
        //define _Relative_Width_ true;
        // "Proximity"
        this._activeEffect.setFloat("_Proximity_Max_Intensity_", this.proximityMaxIntensity);
        this._activeEffect.setFloat("_Proximity_Far_Distance_", this.proximityFarDistance);
        this._activeEffect.setFloat("_Proximity_Near_Radius_", this.proximityNearRadius);
        this._activeEffect.setFloat("_Proximity_Anisotropy_", this.proximityAnisotropy);
        // "Selection"
        this._activeEffect.setFloat("_Selection_Fuzz_", this.selectionFuzz);
        this._activeEffect.setFloat("_Selected_", this.selected);
        this._activeEffect.setFloat("_Selection_Fade_", this.selectionFade);
        this._activeEffect.setFloat("_Selection_Fade_Size_", this.selectionFadeSize);
        this._activeEffect.setFloat("_Selected_Distance_", this.selectedDistance);
        this._activeEffect.setFloat("_Selected_Fade_Length_", this.selectedFadeLength);
        // "Blob"
        this._activeEffect.setFloat("_Blob_Enable_", this.leftBlobEnable ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
        this._activeEffect.setFloat("_Blob_Near_Size_", this.leftBlobNearSize);
        this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
        this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
        this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
        this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
        this._activeEffect.setFloat("_Blob_Inner_Fade_", this.leftBlobInnerFade);
        this._activeEffect.setFloat("_Blob_Pulse_", this.leftBlobPulse);
        this._activeEffect.setFloat("_Blob_Fade_", this.leftBlobFade);
        // "Blob 2"
        this._activeEffect.setFloat("_Blob_Enable_2_", this.rightBlobEnable ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Blob_Near_Size_2_", this.rightBlobNearSize);
        this._activeEffect.setFloat("_Blob_Inner_Fade_2_", this.rightBlobInnerFade);
        this._activeEffect.setFloat("_Blob_Pulse_2_", this.rightBlobPulse);
        this._activeEffect.setFloat("_Blob_Fade_2_", this.rightBlobFade);
        // "Active Face"
        this._activeEffect.setVector3("_Active_Face_Dir_", this.activeFaceDir);
        this._activeEffect.setVector3("_Active_Face_Up_", this.activeFaceUp);
        // "Hololens Edge Fade"
        //define _Enable_Fade_ true;
        this._activeEffect.setFloat("_Fade_Width_", this.fadeWidth);
        this._activeEffect.setFloat("_Smooth_Active_Face_", this.smoothActiveFace ? 1.0 : 0.0);
        // "Debug"
        this._activeEffect.setFloat("_Show_Frame_", this.showFrame ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Use_Blob_Texture_", this.useBlobTexture ? 1.0 : 0.0);
        // Global inputs
        this._activeEffect.setFloat("Use_Global_Left_Index", 1.0);
        this._activeEffect.setFloat("Use_Global_Right_Index", 1.0);
        this._activeEffect.setVector4("Global_Left_Index_Tip_Position", new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(this.globalLeftIndexTipPosition.x, this.globalLeftIndexTipPosition.y, this.globalLeftIndexTipPosition.z, 1.0));
        this._activeEffect.setVector4("Global_Right_Index_Tip_Position", new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(this.globalRightIndexTipPosition.x, this.globalRightIndexTipPosition.y, this.globalRightIndexTipPosition.z, 1.0));
        this._afterBind(mesh, this._activeEffect, subMesh);
    };
    /**
     * Get the list of animatables in the material.
     * @returns the list of animatables object used in the material
     */
    FluentButtonMaterial.prototype.getAnimatables = function () {
        return [];
    };
    FluentButtonMaterial.prototype.dispose = function (forceDisposeEffect) {
        _super.prototype.dispose.call(this, forceDisposeEffect);
    };
    FluentButtonMaterial.prototype.clone = function (name) {
        var _this = this;
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Clone(function () { return new FluentButtonMaterial(name, _this.getScene()); }, this);
    };
    FluentButtonMaterial.prototype.serialize = function () {
        var serializationObject = _super.prototype.serialize.call(this);
        serializationObject.customType = "BABYLON.FluentButtonMaterial";
        return serializationObject;
    };
    FluentButtonMaterial.prototype.getClassName = function () {
        return "FluentButtonMaterial";
    };
    // Statics
    FluentButtonMaterial.Parse = function (source, scene, rootUrl) {
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return new FluentButtonMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    /**
     * URL pointing to the texture used to define the coloring for the fluent blob effect.
     */
    FluentButtonMaterial.BLOB_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/mrtk-fluent-button-blob.png";
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "edgeWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsColor4)()
    ], FluentButtonMaterial.prototype, "edgeColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "proximityMaxIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "proximityFarDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "proximityNearRadius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "proximityAnisotropy", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "selectionFuzz", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "selected", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "selectionFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "selectionFadeSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "selectedDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "selectedFadeLength", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "blobIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "blobFarSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "blobNearDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "blobFarDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "blobFadeLength", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "leftBlobEnable", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "leftBlobNearSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "leftBlobPulse", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "leftBlobFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "leftBlobInnerFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "rightBlobEnable", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "rightBlobNearSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "rightBlobPulse", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "rightBlobFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "rightBlobInnerFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsVector3)()
    ], FluentButtonMaterial.prototype, "activeFaceDir", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsVector3)()
    ], FluentButtonMaterial.prototype, "activeFaceUp", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "enableFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "fadeWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "smoothActiveFace", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "showFrame", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], FluentButtonMaterial.prototype, "useBlobTexture", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsVector3)()
    ], FluentButtonMaterial.prototype, "globalLeftIndexTipPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serializeAsVector3)()
    ], FluentButtonMaterial.prototype, "globalRightIndexTipPosition", void 0);
    return FluentButtonMaterial;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PushMaterial));
(0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.FluentButtonMaterial", FluentButtonMaterial);


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluentButton/index.ts":
/*!***************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluentButton/index.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FluentButtonMaterial: () => (/* reexport safe */ _fluentButtonMaterial__WEBPACK_IMPORTED_MODULE_0__.FluentButtonMaterial)
/* harmony export */ });
/* harmony import */ var _fluentButtonMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fluentButtonMaterial */ "../../../dev/gui/src/3D/materials/fluentButton/fluentButtonMaterial.ts");



/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.fragment.ts":
/*!***************************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.fragment.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fluentButtonPixelShader: () => (/* binding */ fluentButtonPixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "fluentButtonPixelShader";
var shader = "uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;uniform float _Edge_Width_;uniform vec4 _Edge_Color_;uniform bool _Relative_Width_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Active_Face_Dir_;uniform vec3 _Active_Face_Up_;uniform bool Enable_Fade;uniform float _Fade_Width_;uniform bool _Smooth_Active_Face_;uniform bool _Show_Frame_;uniform bool _Use_Blob_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;void Holo_Edge_Fragment_B35(\nvec4 Edges,\nfloat Edge_Width,\nout float NotEdge)\n{vec2 c=vec2(min(Edges.r,Edges.g),min(Edges.b,Edges.a));vec2 df=fwidth(c)*Edge_Width;vec2 g=clamp(c/df,0.0,1.0);NotEdge=g.x*g.y;}\nvoid Blob_Fragment_B39(\nvec2 UV,\nvec3 Blob_Info,\nsampler2D Blob_Texture,\nout vec4 Blob_Color)\n{float k=dot(UV,UV);Blob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));}\nvec2 FilterStep(vec2 Edge,vec2 X)\n{vec2 dX=max(fwidth(X),vec2(0.00001,0.00001));return clamp( (X+dX-max(Edge,X-dX))/(dX*2.0),0.0,1.0);}\nvoid Wireframe_Fragment_B59(\nvec3 Widths,\nvec2 UV,\nfloat Proximity,\nvec4 Edge_Color,\nout vec4 Wireframe)\n{vec2 c=min(UV,vec2(1.0,1.0)-UV);vec2 g=FilterStep(Widths.xy*0.5,c); \nWireframe=(1.0-min(g.x,g.y))*Proximity*Edge_Color;}\nvoid Proximity_B53(\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Proximity_Max_Intensity,\nfloat Proximity_Near_Radius,\nvec3 Position,\nvec3 Show_Selection,\nvec4 Extra1,\nfloat Dist_To_Face,\nfloat Intensity,\nout float Proximity)\n{vec2 delta1=Extra1.xy;vec2 delta2=Extra1.zw;float d2=sqrt(min(dot(delta1,delta1),dot(delta2,delta2))+Dist_To_Face*Dist_To_Face);Proximity=Intensity*Proximity_Max_Intensity*(1.0-clamp(d2/Proximity_Near_Radius,0.0,1.0))*(1.0-Show_Selection.x)+Show_Selection.x;}\nvoid To_XYZ_B46(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid main()\n{float NotEdge_Q35;\n#if ENABLE_FADE\nHolo_Edge_Fragment_B35(vColor,_Fade_Width_,NotEdge_Q35);\n#else\nNotEdge_Q35=1.0;\n#endif\nvec4 Blob_Color_Q39;float k=dot(vUV,vUV);vec2 blobTextureCoord=vec2(vec2(sqrt(k),vTangent.x).x,1.0-vec2(sqrt(k),vTangent.x).y);vec4 blobColor=mix(vec4(1.0,1.0,1.0,1.0)*step(1.0-vTangent.x,clamp(sqrt(k)+0.1,0.0,1.0)),texture(_Blob_Texture_,blobTextureCoord),float(_Use_Blob_Texture_));Blob_Color_Q39=vTangent.y*blobColor*(1.0-clamp(k,0.0,1.0));float Is_Quad_Q24;Is_Quad_Q24=vNormal.z;vec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));vec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));float X_Q46;float Y_Q46;float Z_Q46;To_XYZ_B46(vBinormal,X_Q46,Y_Q46,Z_Q46);float Proximity_Q53;Proximity_B53(Blob_Position_Q41,Blob_Position_Q42,_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vPosition,vBinormal,vExtra1,Y_Q46,Z_Q46,Proximity_Q53);vec4 Wireframe_Q59;Wireframe_Fragment_B59(vNormal,vUV,Proximity_Q53,_Edge_Color_,Wireframe_Q59);vec4 Wire_Or_Blob_Q23=mix(Wireframe_Q59,Blob_Color_Q39,Is_Quad_Q24);vec4 Result_Q22;Result_Q22=mix(Wire_Or_Blob_Q23,vec4(0.3,0.3,0.3,0.3),float(_Show_Frame_));vec4 Final_Color_Q37=NotEdge_Q35*Result_Q22;vec4 Out_Color=Final_Color_Q37;float Clip_Threshold=0.0;bool To_sRGB=false;gl_FragColor=Out_Color;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var fluentButtonPixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.vertex.ts":
/*!*************************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/fluentButton/shaders/fluentButton.vertex.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fluentButtonVertexShader: () => (/* binding */ fluentButtonVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "fluentButtonVertexShader";
var shader = "uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;attribute vec4 color;uniform float _Edge_Width_;uniform vec4 _Edge_Color_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Active_Face_Dir_;uniform vec3 _Active_Face_Up_;uniform bool _Enable_Fade_;uniform float _Fade_Width_;uniform bool _Smooth_Active_Face_;uniform bool _Show_Frame_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;void Blob_Vertex_B47(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nvec4 Vx_Color,\nvec2 UV,\nvec3 Face_Center,\nvec2 Face_Size,\nvec2 In_UV,\nfloat Blob_Fade_Length,\nfloat Selection_Fade,\nfloat Selection_Fade_Size,\nfloat Inner_Fade,\nvec3 Active_Face_Center,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nfloat Blob_Enabled,\nout vec3 Out_Position,\nout vec2 Out_UV,\nout vec3 Blob_Info)\n{float blobSize,fadeIn;vec3 Hit_Position;Blob_Info=vec3(0.0,0.0,0.0);float Hit_Distance=dot(Blob_Position-Face_Center,Normal);Hit_Position=Blob_Position-Hit_Distance*Normal;float absD=abs(Hit_Distance);float lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);fadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);float farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);float size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;blobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;Blob_Info.x=lerpVal*0.5+0.5;Blob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;Blob_Info.x*=(1.0-Blob_Pulse);vec3 delta=Hit_Position-Face_Center;vec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));vec2 quadUVin=2.0*UV-1.0; \nvec2 blobXY=blobCenterXY+quadUVin*blobSize;vec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);vec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;vec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;Out_Position=mix(Position,blobCorner,Vx_Color.rrr);Out_UV=mix(In_UV,blobUV,Vx_Color.rr);}\nvec2 ProjectProximity(\nvec3 blobPosition,\nvec3 position,\nvec3 center,\nvec3 dir,\nvec3 xdir,\nvec3 ydir,\nout float vdistance\n)\n{vec3 delta=blobPosition-position;vec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));vdistance=abs(dot(delta,dir));return xy;}\nvoid Proximity_Vertex_B66(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Active_Face_Center,\nvec3 Active_Face_Dir,\nvec3 Position,\nfloat Proximity_Far_Distance,\nfloat Relative_Scale,\nfloat Proximity_Anisotropy,\nvec3 Up,\nout vec4 Extra1,\nout float Distance_To_Face,\nout float Intensity)\n{vec3 Active_Face_Dir_X=normalize(cross(Active_Face_Dir,Up));vec3 Active_Face_Dir_Y=cross(Active_Face_Dir,Active_Face_Dir_X);float distz1,distz2;Extra1.xy=ProjectProximity(Blob_Position,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz1)/Relative_Scale;Extra1.zw=ProjectProximity(Blob_Position_2,Position,Active_Face_Center,Active_Face_Dir,Active_Face_Dir_X*Proximity_Anisotropy,Active_Face_Dir_Y,distz2)/Relative_Scale;Distance_To_Face=dot(Active_Face_Dir,Position-Active_Face_Center);Intensity=1.0-clamp(min(distz1,distz2)/Proximity_Far_Distance,0.0,1.0);}\nvoid Holo_Edge_Vertex_B44(\nvec3 Incident,\nvec3 Normal,\nvec2 UV,\nvec3 Tangent,\nvec3 Bitangent,\nbool Smooth_Active_Face,\nfloat Active,\nout vec4 Holo_Edges)\n{float NdotI=dot(Incident,Normal);vec2 flip=(UV-vec2(0.5,0.5));float udot=dot(Incident,Tangent)*flip.x*NdotI;float uval=1.0-float(udot>0.0);float vdot=-dot(Incident,Bitangent)*flip.y*NdotI;float vval=1.0-float(vdot>0.0);float Smooth_And_Active=step(1.0,float(Smooth_Active_Face && Active>0.0));uval=mix(uval,max(1.0,uval),Smooth_And_Active); \nvval=mix(vval,max(1.0,vval),Smooth_And_Active);Holo_Edges=vec4(1.0,1.0,1.0,1.0)-vec4(uval*UV.x,uval*(1.0-UV.x),vval*UV.y,vval*(1.0-UV.y));}\nvoid Object_To_World_Pos_B13(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Choose_Blob_B38(\nvec4 Vx_Color,\nvec3 Position1,\nvec3 Position2,\nbool Blob_Enable_1,\nbool Blob_Enable_2,\nfloat Near_Size_1,\nfloat Near_Size_2,\nfloat Blob_Inner_Fade_1,\nfloat Blob_Inner_Fade_2,\nfloat Blob_Pulse_1,\nfloat Blob_Pulse_2,\nfloat Blob_Fade_1,\nfloat Blob_Fade_2,\nout vec3 Position,\nout float Near_Size,\nout float Inner_Fade,\nout float Blob_Enable,\nout float Fade,\nout float Pulse)\n{Position=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;float b1=float(Blob_Enable_1);float b2=float(Blob_Enable_2);Blob_Enable=b1+(b2-b1)*Vx_Color.g;Pulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;Fade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;Near_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;Inner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;}\nvoid Wireframe_Vertex_B51(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Edge_Width,\nvec2 Face_Size,\nout vec3 Wire_Vx_Pos,\nout vec2 UV,\nout vec2 Widths)\n{Widths.xy=Edge_Width/Face_Size;float x=dot(Position,Tangent);float y=dot(Position,Bitangent);float dx=0.5-abs(x);float newx=(0.5-dx*Widths.x*2.0)*sign(x);float dy=0.5-abs(y);float newy=(0.5-dy*Widths.y*2.0)*sign(y);Wire_Vx_Pos=Normal*0.5+newx*Tangent+newy*Bitangent;UV.x=dot(Wire_Vx_Pos,Tangent)+0.5;UV.y=dot(Wire_Vx_Pos,Bitangent)+0.5;}\nvec2 ramp2(vec2 start,vec2 end,vec2 x)\n{return clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));}\nfloat computeSelection(\nvec3 blobPosition,\nvec3 normal,\nvec3 tangent,\nvec3 bitangent,\nvec3 faceCenter,\nvec2 faceSize,\nfloat selectionFuzz,\nfloat farDistance,\nfloat fadeLength\n)\n{vec3 delta=blobPosition-faceCenter;float absD=abs(dot(delta,normal));float fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);vec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));vec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;vec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);return selectPulse.x*selectPulse.y*fadeIn;}\nvoid Selection_Vertex_B48(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec2 Face_Size,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Selection_Fuzz,\nfloat Selected,\nfloat Far_Distance,\nfloat Fade_Length,\nvec3 Active_Face_Dir,\nout float Show_Selection)\n{float select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);float select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);float Active=max(0.0,dot(Active_Face_Dir,Normal));Show_Selection=mix(max(select1,select2),1.0,Selected)*Active;}\nvoid Proximity_Visibility_B54(\nfloat Selection,\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Input_Width,\nfloat Proximity_Far_Distance,\nfloat Proximity_Radius,\nvec3 Active_Face_Center,\nvec3 Active_Face_Dir,\nout float Width)\n{vec3 boxEdges=(world*vec4(vec3(0.5,0.5,0.5),0.0)).xyz;float boxMaxSize=length(boxEdges);float d1=dot(Proximity_Center-Active_Face_Center,Active_Face_Dir);vec3 blob1=Proximity_Center-d1*Active_Face_Dir;float d2=dot(Proximity_Center_2-Active_Face_Center,Active_Face_Dir);vec3 blob2=Proximity_Center_2-d2*Active_Face_Dir;vec3 delta1=blob1-Active_Face_Center;vec3 delta2=blob2-Active_Face_Center;float dist1=dot(delta1,delta1);float dist2=dot(delta2,delta2);float nearestProxDist=sqrt(min(dist1,dist2));Width=Input_Width*(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));}\nvoid Object_To_World_Dir_B67(\nvec3 Dir_Object,\nout vec3 Dir_World)\n{Dir_World=(world*vec4(Dir_Object,0.0)).xyz;}\nvoid main()\n{vec3 Active_Face_Center_Q49;Active_Face_Center_Q49=(world*vec4(_Active_Face_Dir_*0.5,1.0)).xyz;vec3 Blob_Position_Q41= mix(_Blob_Position_,Global_Left_Index_Tip_Position.xyz,float(Use_Global_Left_Index));vec3 Blob_Position_Q42= mix(_Blob_Position_2_,Global_Right_Index_Tip_Position.xyz,float(Use_Global_Right_Index));vec3 Active_Face_Dir_Q64=normalize((world*vec4(_Active_Face_Dir_,0.0)).xyz);float Relative_Scale_Q57;\n#if RELATIVE_WIDTH\nRelative_Scale_Q57=length((world*vec4(vec3(0,1,0),0.0)).xyz);\n#else\nRelative_Scale_Q57=1.0;\n#endif\nvec3 Tangent_World_Q30;Tangent_World_Q30=(world*vec4(tangent,0.0)).xyz;vec3 Binormal_World_Q31;Binormal_World_Q31=(world*vec4((cross(normal,tangent)),0.0)).xyz;vec3 Normal_World_Q60;Normal_World_Q60=(world*vec4(normal,0.0)).xyz;vec3 Result_Q18=0.5*normal;vec3 Dir_World_Q67;Object_To_World_Dir_B67(_Active_Face_Up_,Dir_World_Q67);float Product_Q56=_Edge_Width_*Relative_Scale_Q57;vec3 Normal_World_N_Q29=normalize(Normal_World_Q60);vec3 Tangent_World_N_Q28=normalize(Tangent_World_Q30);vec3 Binormal_World_N_Q32=normalize(Binormal_World_Q31);vec3 Position_Q38;float Near_Size_Q38;float Inner_Fade_Q38;float Blob_Enable_Q38;float Fade_Q38;float Pulse_Q38;Choose_Blob_B38(color,Blob_Position_Q41,Blob_Position_Q42,_Blob_Enable_,_Blob_Enable_2_,_Blob_Near_Size_,_Blob_Near_Size_2_,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q38,Near_Size_Q38,Inner_Fade_Q38,Blob_Enable_Q38,Fade_Q38,Pulse_Q38);vec3 Face_Center_Q33;Face_Center_Q33=(world*vec4(Result_Q18,1.0)).xyz;vec2 Face_Size_Q50=vec2(length(Tangent_World_Q30),length(Binormal_World_Q31));float Show_Selection_Q48;Selection_Vertex_B48(Blob_Position_Q41,Blob_Position_Q42,Face_Center_Q33,Face_Size_Q50,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,Active_Face_Dir_Q64,Show_Selection_Q48);vec3 Normalized_Q72=normalize(Dir_World_Q67);float Active_Q34=max(0.0,dot(Active_Face_Dir_Q64,Normal_World_N_Q29));float Width_Q54;Proximity_Visibility_B54(Show_Selection_Q48,Blob_Position_Q41,Blob_Position_Q42,Product_Q56,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Active_Face_Center_Q49,Active_Face_Dir_Q64,Width_Q54);vec3 Wire_Vx_Pos_Q51;vec2 UV_Q51;vec2 Widths_Q51;Wireframe_Vertex_B51(position,normal,tangent,(cross(normal,tangent)),Width_Q54,Face_Size_Q50,Wire_Vx_Pos_Q51,UV_Q51,Widths_Q51);vec3 Vec3_Q27=vec3(Widths_Q51.x,Widths_Q51.y,color.r);vec3 Pos_World_Q13;Object_To_World_Pos_B13(Wire_Vx_Pos_Q51,Pos_World_Q13);vec3 Incident_Q36=normalize(Pos_World_Q13-cameraPosition);vec3 Out_Position_Q47;vec2 Out_UV_Q47;vec3 Blob_Info_Q47;Blob_Vertex_B47(Pos_World_Q13,Normal_World_N_Q29,Tangent_World_N_Q28,Binormal_World_N_Q32,Position_Q38,_Blob_Intensity_,Near_Size_Q38,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q33,Face_Size_Q50,UV_Q51,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q38,Active_Face_Center_Q49,Pulse_Q38,Fade_Q38,Blob_Enable_Q38,Out_Position_Q47,Out_UV_Q47,Blob_Info_Q47);vec4 Extra1_Q66;float Distance_To_Face_Q66;float Intensity_Q66;Proximity_Vertex_B66(Blob_Position_Q41,Blob_Position_Q42,Active_Face_Center_Q49,Active_Face_Dir_Q64,Pos_World_Q13,_Proximity_Far_Distance_,Relative_Scale_Q57,_Proximity_Anisotropy_,Normalized_Q72,Extra1_Q66,Distance_To_Face_Q66,Intensity_Q66);vec4 Holo_Edges_Q44;Holo_Edge_Vertex_B44(Incident_Q36,Normal_World_N_Q29,uv,Tangent_World_Q30,Binormal_World_Q31,_Smooth_Active_Face_,Active_Q34,Holo_Edges_Q44);vec3 Vec3_Q19=vec3(Show_Selection_Q48,Distance_To_Face_Q66,Intensity_Q66);vec3 Position=Out_Position_Q47;vec2 UV=Out_UV_Q47;vec3 Tangent=Blob_Info_Q47;vec3 Binormal=Vec3_Q19;vec3 Normal=Vec3_Q27;vec4 Extra1=Extra1_Q66;vec4 Color=Holo_Edges_Q44;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var fluentButtonVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/handle/handleMaterial.ts":
/*!******************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/handle/handleMaterial.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HandleMaterial: () => (/* binding */ HandleMaterial)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.vector */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_handle_vertex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/handle.vertex */ "../../../dev/gui/src/3D/materials/handle/shaders/handle.vertex.ts");
/* harmony import */ var _shaders_handle_fragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/handle.fragment */ "../../../dev/gui/src/3D/materials/handle/shaders/handle.fragment.ts");






/**
 * Class used to render gizmo handles with fluent design
 */
var HandleMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(HandleMaterial, _super);
    /**
     * Creates a handle material
     * @param name Name of the material
     * @param scene Scene
     */
    function HandleMaterial(name, scene) {
        var _this = _super.call(this, name, scene, "handle", {
            attributes: ["position"],
            uniforms: ["worldViewProjection", "color", "scale", "positionOffset"],
            needAlphaBlending: false,
            needAlphaTesting: false,
        }) || this;
        _this._hover = false;
        _this._drag = false;
        _this._color = new babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0__.Color3();
        _this._scale = 1;
        _this._lastTick = -1;
        /**
         * Length of animation
         */
        _this.animationLength = 100;
        /**
         * Color of the handle when hovered
         */
        _this.hoverColor = new babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0__.Color3(0, 0.467, 0.84);
        /**
         * Color of the handle when idle
         */
        _this.baseColor = new babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0__.Color3(1, 1, 1);
        /**
         * Scale of the handle when hovered
         */
        _this.hoverScale = 0.75;
        /**
         * Scale of the handle when idle
         */
        _this.baseScale = 0.35;
        /**
         * Scale of the handle when dragged
         */
        _this.dragScale = 0.55;
        /**
         * @internal
         */
        _this._positionOffset = babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0__.Vector3.Zero();
        _this._updateInterpolationTarget();
        // Register callback for scene after render
        _this._lastTick = Date.now();
        _this._onBeforeRender = _this.getScene().onBeforeRenderObservable.add(function () {
            var tick = Date.now();
            var delta = tick - _this._lastTick;
            var scaleDiff = _this._targetScale - _this._scale;
            var colorDiff = babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0__.TmpColors.Color3[0].copyFrom(_this._targetColor).subtractToRef(_this._color, babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0__.TmpColors.Color3[0]);
            _this._scale = _this._scale + (scaleDiff * delta) / _this.animationLength;
            colorDiff.scaleToRef(delta / _this.animationLength, colorDiff);
            _this._color.addToRef(colorDiff, _this._color);
            _this.setColor3("color", _this._color);
            _this.setFloat("scale", _this._scale);
            _this.setVector3("positionOffset", _this._positionOffset);
            _this._lastTick = tick;
        });
        return _this;
    }
    Object.defineProperty(HandleMaterial.prototype, "hover", {
        /**
         * Is the material indicating hovering state
         */
        get: function () {
            return this._hover;
        },
        set: function (b) {
            this._hover = b;
            this._updateInterpolationTarget();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HandleMaterial.prototype, "drag", {
        /**
         * Is the material indicating drag state
         */
        get: function () {
            return this._drag;
        },
        set: function (b) {
            this._drag = b;
            this._updateInterpolationTarget();
        },
        enumerable: false,
        configurable: true
    });
    HandleMaterial.prototype._updateInterpolationTarget = function () {
        if (this.drag) {
            this._targetColor = this.hoverColor;
            this._targetScale = this.dragScale;
        }
        else if (this.hover) {
            this._targetColor = this.hoverColor;
            this._targetScale = this.hoverScale;
        }
        else {
            this._targetColor = this.baseColor;
            this._targetScale = this.baseScale;
        }
    };
    /**
     * Disposes the handle material
     */
    HandleMaterial.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.getScene().onBeforeRenderObservable.remove(this._onBeforeRender);
    };
    return HandleMaterial;
}(babylonjs_Materials_shaderMaterial__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial));



/***/ }),

/***/ "../../../dev/gui/src/3D/materials/handle/index.ts":
/*!*********************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/handle/index.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HandleMaterial: () => (/* reexport safe */ _handleMaterial__WEBPACK_IMPORTED_MODULE_0__.HandleMaterial)
/* harmony export */ });
/* harmony import */ var _handleMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handleMaterial */ "../../../dev/gui/src/3D/materials/handle/handleMaterial.ts");



/***/ }),

/***/ "../../../dev/gui/src/3D/materials/handle/shaders/handle.fragment.ts":
/*!***************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/handle/shaders/handle.fragment.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   handlePixelShader: () => (/* binding */ handlePixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "handlePixelShader";
var shader = "uniform vec3 color;void main(void) {gl_FragColor=vec4(color,1.0);}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var handlePixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/handle/shaders/handle.vertex.ts":
/*!*************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/handle/shaders/handle.vertex.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   handleVertexShader: () => (/* binding */ handleVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "handleVertexShader";
var shader = "precision highp float;attribute vec3 position;uniform vec3 positionOffset;uniform mat4 worldViewProjection;uniform float scale;void main(void) {vec4 vPos=vec4((vec3(position)+positionOffset)*scale,1.0);gl_Position=worldViewProjection*vPos;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var handleVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/index.ts":
/*!**************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/index.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FluentBackplateMaterial: () => (/* reexport safe */ _fluentBackplate_index__WEBPACK_IMPORTED_MODULE_2__.FluentBackplateMaterial),
/* harmony export */   FluentButtonMaterial: () => (/* reexport safe */ _fluentButton_index__WEBPACK_IMPORTED_MODULE_1__.FluentButtonMaterial),
/* harmony export */   FluentMaterial: () => (/* reexport safe */ _fluent_index__WEBPACK_IMPORTED_MODULE_0__.FluentMaterial),
/* harmony export */   FluentMaterialDefines: () => (/* reexport safe */ _fluent_index__WEBPACK_IMPORTED_MODULE_0__.FluentMaterialDefines),
/* harmony export */   HandleMaterial: () => (/* reexport safe */ _handle_index__WEBPACK_IMPORTED_MODULE_3__.HandleMaterial),
/* harmony export */   MRDLBackplateMaterial: () => (/* reexport safe */ _mrdl_index__WEBPACK_IMPORTED_MODULE_4__.MRDLBackplateMaterial),
/* harmony export */   MRDLSliderBarMaterial: () => (/* reexport safe */ _mrdl_index__WEBPACK_IMPORTED_MODULE_4__.MRDLSliderBarMaterial),
/* harmony export */   MRDLSliderThumbMaterial: () => (/* reexport safe */ _mrdl_index__WEBPACK_IMPORTED_MODULE_4__.MRDLSliderThumbMaterial)
/* harmony export */ });
/* harmony import */ var _fluent_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fluent/index */ "../../../dev/gui/src/3D/materials/fluent/index.ts");
/* harmony import */ var _fluentButton_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fluentButton/index */ "../../../dev/gui/src/3D/materials/fluentButton/index.ts");
/* harmony import */ var _fluentBackplate_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fluentBackplate/index */ "../../../dev/gui/src/3D/materials/fluentBackplate/index.ts");
/* harmony import */ var _handle_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./handle/index */ "../../../dev/gui/src/3D/materials/handle/index.ts");
/* harmony import */ var _mrdl_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mrdl/index */ "../../../dev/gui/src/3D/materials/mrdl/index.ts");
/* eslint-disable import/no-internal-modules */







/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/index.ts":
/*!*******************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/index.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MRDLBackplateMaterial: () => (/* reexport safe */ _mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_2__.MRDLBackplateMaterial),
/* harmony export */   MRDLSliderBarMaterial: () => (/* reexport safe */ _mrdlSliderBarMaterial__WEBPACK_IMPORTED_MODULE_0__.MRDLSliderBarMaterial),
/* harmony export */   MRDLSliderThumbMaterial: () => (/* reexport safe */ _mrdlSliderThumbMaterial__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderThumbMaterial)
/* harmony export */ });
/* harmony import */ var _mrdlSliderBarMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mrdlSliderBarMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlSliderBarMaterial.ts");
/* harmony import */ var _mrdlSliderThumbMaterial__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mrdlSliderThumbMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlSliderThumbMaterial.ts");
/* harmony import */ var _mrdlBackplateMaterial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mrdlBackplateMaterial */ "../../../dev/gui/src/3D/materials/mrdl/mrdlBackplateMaterial.ts");





/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/mrdlBackglowMaterial.ts":
/*!**********************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/mrdlBackglowMaterial.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MRDLBackglowMaterial: () => (/* binding */ MRDLBackglowMaterial)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Materials/materialHelper.functions */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_mrdlBackglow_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/mrdlBackglow.fragment */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.fragment.ts");
/* harmony import */ var _shaders_mrdlBackglow_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/mrdlBackglow.vertex */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.vertex.ts");













/** @hidden */
var MRDLBackglowMaterialDefines = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLBackglowMaterialDefines, _super);
    function MRDLBackglowMaterialDefines() {
        var _this = _super.call(this) || this;
        _this._needNormals = true;
        _this._needUVs = true;
        _this.rebuild();
        return _this;
    }
    return MRDLBackglowMaterialDefines;
}(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.MaterialDefines));
var MRDLBackglowMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLBackglowMaterial, _super);
    function MRDLBackglowMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Gets or sets the bevel radius on the backglow. If this value is changed, update the lineWidth to match.
         */
        _this.bevelRadius = 0.16;
        /**
         * Gets or sets the line width of the backglow.
         */
        _this.lineWidth = 0.16;
        /**
         * Gets or sets whether to use absolute sizes when calculating effects on the backglow.
         * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.
         */
        _this.absoluteSizes = false;
        /**
         * Gets or sets the tuning motion of the backglow.
         */
        _this.tuningMotion = 0.0;
        /**
         * Gets or sets the motion of the backglow.
         */
        _this.motion = 1.0;
        /**
         * Gets or sets the maximum intensity of the backglow.
         */
        _this.maxIntensity = 0.7;
        /**
         * Gets or sets the fade-in exponent of the intensity of the backglow.
         */
        _this.intensityFadeInExponent = 2.0;
        /**
         * Gets or sets the start of the outer fuzz effect on the backglow.
         */
        _this.outerFuzzStart = 0.04;
        /**
         * Gets or sets the end of the outer fuzz effect on the backglow.
         */
        _this.outerFuzzEnd = 0.04;
        /**
         * Gets or sets the color of the backglow.
         */
        _this.color = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Color4(0.682353, 0.698039, 1, 1);
        /**
         * Gets or sets the inner color of the backglow.
         */
        _this.innerColor = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Color4(0.356863, 0.392157, 0.796078, 1);
        /**
         * Gets or sets the blend exponent of the backglow.
         */
        _this.blendExponent = 1.5;
        /**
         * Gets or sets the falloff of the backglow.
         */
        _this.falloff = 2.0;
        /**
         * Gets or sets the bias of the backglow.
         */
        _this.bias = 0.5;
        _this.alphaMode = babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Constants.ALPHA_ADD;
        _this.disableDepthWrite = true;
        _this.backFaceCulling = false;
        return _this;
    }
    MRDLBackglowMaterial.prototype.needAlphaBlending = function () {
        return true;
    };
    MRDLBackglowMaterial.prototype.needAlphaTesting = function () {
        return false;
    };
    MRDLBackglowMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    // Methods
    MRDLBackglowMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh) {
        var drawWrapper = subMesh._drawWrapper;
        if (this.isFrozen) {
            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh.materialDefines) {
            subMesh.materialDefines = new MRDLBackglowMaterialDefines();
        }
        var defines = subMesh.materialDefines;
        var scene = this.getScene();
        if (this._isReadyForSubMesh(subMesh)) {
            return true;
        }
        var engine = scene.getEngine();
        // Attribs
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PrepareDefinesForAttributes)(mesh, defines, false, false);
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            // Fallbacks
            var fallbacks = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.EffectFallbacks();
            if (defines.FOG) {
                fallbacks.addFallback(1, "FOG");
            }
            (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.HandleFallbacksForShadows)(defines, fallbacks);
            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
            //Attributes
            var attribs = [babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.PositionKind];
            if (defines.NORMAL) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.NormalKind);
            }
            if (defines.UV1) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UVKind);
            }
            if (defines.UV2) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UV2Kind);
            }
            if (defines.VERTEXCOLOR) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.ColorKind);
            }
            if (defines.TANGENT) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.TangentKind);
            }
            (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PrepareAttributesForInstances)(attribs, defines);
            // Legacy browser patch
            var shaderName = "mrdlBackglow";
            var join = defines.toString();
            var uniforms = [
                "world",
                "worldView",
                "worldViewProjection",
                "view",
                "projection",
                "viewProjection",
                "cameraPosition",
                "_Bevel_Radius_",
                "_Line_Width_",
                "_Absolute_Sizes_",
                "_Tuning_Motion_",
                "_Motion_",
                "_Max_Intensity_",
                "_Intensity_Fade_In_Exponent_",
                "_Outer_Fuzz_Start_",
                "_Outer_Fuzz_End_",
                "_Color_",
                "_Inner_Color_",
                "_Blend_Exponent_",
                "_Falloff_",
                "_Bias_",
            ];
            var samplers = [];
            var uniformBuffers = [];
            (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PrepareUniformsAndSamplersList)({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: 4,
            });
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: fallbacks,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: 4 },
            }, engine), defines);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        drawWrapper._wasPreviouslyReady = true;
        return true;
    };
    MRDLBackglowMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var scene = this.getScene();
        var defines = subMesh.materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
        this._activeEffect.setVector3("cameraPosition", scene.activeCamera.position);
        // "Rounded Rectangle"
        this._activeEffect.setFloat("_Bevel_Radius_", this.bevelRadius);
        this._activeEffect.setFloat("_Line_Width_", this.lineWidth);
        this._activeEffect.setFloat("_Absolute_Sizes_", this.absoluteSizes ? 1.0 : 0.0);
        // "Animation"
        this._activeEffect.setFloat("_Tuning_Motion_", this.tuningMotion);
        this._activeEffect.setFloat("_Motion_", this.motion);
        this._activeEffect.setFloat("_Max_Intensity_", this.maxIntensity);
        this._activeEffect.setFloat("_Intensity_Fade_In_Exponent_", this.intensityFadeInExponent);
        this._activeEffect.setFloat("_Outer_Fuzz_Start_", this.outerFuzzStart);
        this._activeEffect.setFloat("_Outer_Fuzz_End_", this.outerFuzzEnd);
        // "Color"
        this._activeEffect.setDirectColor4("_Color_", this.color);
        this._activeEffect.setDirectColor4("_Inner_Color_", this.innerColor);
        this._activeEffect.setFloat("_Blend_Exponent_", this.blendExponent);
        // "Inner Transition"
        this._activeEffect.setFloat("_Falloff_", this.falloff);
        this._activeEffect.setFloat("_Bias_", this.bias);
        this._afterBind(mesh, this._activeEffect, subMesh);
    };
    /**
     * Get the list of animatables in the material.
     * @returns the list of animatables object used in the material
     */
    MRDLBackglowMaterial.prototype.getAnimatables = function () {
        return [];
    };
    MRDLBackglowMaterial.prototype.dispose = function (forceDisposeEffect) {
        _super.prototype.dispose.call(this, forceDisposeEffect);
    };
    MRDLBackglowMaterial.prototype.clone = function (name) {
        var _this = this;
        return babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Clone(function () { return new MRDLBackglowMaterial(name, _this.getScene()); }, this);
    };
    MRDLBackglowMaterial.prototype.serialize = function () {
        var serializationObject = babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Serialize(this);
        serializationObject.customType = "BABYLON.MRDLBackglowMaterial";
        return serializationObject;
    };
    MRDLBackglowMaterial.prototype.getClassName = function () {
        return "MRDLBackglowMaterial";
    };
    // Statics
    MRDLBackglowMaterial.Parse = function (source, scene, rootUrl) {
        return babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return new MRDLBackglowMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "bevelRadius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "lineWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "absoluteSizes", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "tuningMotion", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "motion", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "maxIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "intensityFadeInExponent", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "outerFuzzStart", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "outerFuzzEnd", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "color", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "innerColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "blendExponent", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "falloff", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackglowMaterial.prototype, "bias", void 0);
    return MRDLBackglowMaterial;
}(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PushMaterial));
(0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.MRDLBackglowMaterial", MRDLBackglowMaterial);


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/mrdlBackplateMaterial.ts":
/*!***********************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/mrdlBackplateMaterial.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MRDLBackplateMaterial: () => (/* binding */ MRDLBackplateMaterial)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Materials/materialHelper.functions */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_mrdlBackplate_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/mrdlBackplate.fragment */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.fragment.ts");
/* harmony import */ var _shaders_mrdlBackplate_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/mrdlBackplate.vertex */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.vertex.ts");















/** @internal */
var MRDLBackplateMaterialDefines = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLBackplateMaterialDefines, _super);
    function MRDLBackplateMaterialDefines() {
        var _this = _super.call(this) || this;
        /*
            "IRIDESCENCE_ENABLE", "SMOOTH_EDGES"
        */
        _this.IRIDESCENCE_ENABLE = true;
        _this.SMOOTH_EDGES = true;
        _this._needNormals = true;
        _this.rebuild();
        return _this;
    }
    return MRDLBackplateMaterialDefines;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.MaterialDefines));
/**
 * Class used to render backplate material with MRDL
 */
var MRDLBackplateMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLBackplateMaterial, _super);
    function MRDLBackplateMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Gets or sets the corner radius on the backplate. If this value is changed, update the lineWidth to match.
         */
        _this.radius = 0.3;
        /**
         * Gets or sets the line width of the backplate.
         */
        _this.lineWidth = 0.003;
        /**
         * Gets or sets whether to use absolute sizes when calculating effects on the backplate.
         * Since desktop and VR/AR have different relative sizes, it's usually best to keep this false.
         */
        _this.absoluteSizes = false;
        /** @internal */
        _this._filterWidth = 1;
        /**
         * Gets or sets the base color of the backplate.
         */
        _this.baseColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0, 0, 0, 1);
        /**
         * Gets or sets the line color of the backplate.
         */
        _this.lineColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.2, 0.262745, 0.4, 1);
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusTopLeft = 1.0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusTopRight = 1.0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusBottomLeft = 1.0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusBottomRight = 1.0;
        /** @internal */
        _this._rate = 0;
        /**
         * Gets or sets the color of the highlights on the backplate line.
         */
        _this.highlightColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.239216, 0.435294, 0.827451, 1);
        /**
         * Gets or sets the width of the highlights on the backplate line.
         */
        _this.highlightWidth = 0;
        /** @internal */
        _this._highlightTransform = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(1, 1, 0, 0);
        /** @internal */
        _this._highlight = 1;
        /**
         * Gets or sets the intensity of the iridescence effect.
         */
        _this.iridescenceIntensity = 0.45;
        /**
         * Gets or sets the intensity of the iridescence effect on the backplate edges.
         */
        _this.iridescenceEdgeIntensity = 1;
        /**
         * Gets or sets the Tint of the iridescence effect on the backplate.
         */
        _this.iridescenceTint = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(1, 1, 1, 1);
        /** @internal */
        _this._angle = -45;
        /**
         * Gets or sets the opacity of the backplate (0.0 - 1.0).
         */
        _this.fadeOut = 1;
        /** @internal */
        _this._reflected = true;
        /** @internal */
        _this._frequency = 1;
        /** @internal */
        _this._verticalOffset = 0;
        /**
         * Gets or sets the gradient color effect on the backplate.
         */
        _this.gradientColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.74902, 0.74902, 0.74902, 1);
        /**
         * Gets or sets the top left gradient color effect on the backplate.
         */
        _this.topLeftGradientColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.00784314, 0.294118, 0.580392, 1);
        /**
         * Gets or sets the top right gradient color effect on the backplate.
         */
        _this.topRightGradientColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.305882, 0, 1, 1);
        /**
         * Gets or sets the bottom left gradient color effect on the backplate.
         */
        _this.bottomLeftGradientColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.133333, 0.258824, 0.992157, 1);
        /**
         * Gets or sets the bottom right gradient color effect on the backplate.
         */
        _this.bottomRightGradientColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.176471, 0.176471, 0.619608, 1);
        /**
         * Gets or sets the edge width of the backplate.
         */
        _this.edgeWidth = 0.5;
        /**
         * Gets or sets the edge width of the backplate.
         */
        _this.edgePower = 1;
        /**
         * Gets or sets the edge width of the backplate.
         */
        _this.edgeLineGradientBlend = 0.5;
        _this.alphaMode = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Constants.ALPHA_DISABLE;
        _this.backFaceCulling = false;
        _this._iridescentMapTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture(MRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL, _this.getScene(), true, false, babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture.NEAREST_SAMPLINGMODE);
        return _this;
    }
    MRDLBackplateMaterial.prototype.needAlphaBlending = function () {
        return false;
    };
    MRDLBackplateMaterial.prototype.needAlphaTesting = function () {
        return false;
    };
    MRDLBackplateMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    // Methods
    MRDLBackplateMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh) {
        var drawWrapper = subMesh._drawWrapper;
        if (this.isFrozen) {
            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh.materialDefines) {
            subMesh.materialDefines = new MRDLBackplateMaterialDefines();
        }
        var defines = subMesh.materialDefines;
        var scene = this.getScene();
        if (this._isReadyForSubMesh(subMesh)) {
            return true;
        }
        var engine = scene.getEngine();
        // Attribs
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareDefinesForAttributes)(mesh, defines, false, false);
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            // Fallbacks
            var fallbacks = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.EffectFallbacks();
            if (defines.FOG) {
                fallbacks.addFallback(1, "FOG");
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.HandleFallbacksForShadows)(defines, fallbacks);
            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
            //Attributes
            var attribs = [babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.PositionKind];
            if (defines.NORMAL) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.NormalKind);
            }
            if (defines.UV1) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UVKind);
            }
            if (defines.UV2) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UV2Kind);
            }
            if (defines.VERTEXCOLOR) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.ColorKind);
            }
            if (defines.TANGENT) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.TangentKind);
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareAttributesForInstances)(attribs, defines);
            // Legacy browser patch
            var shaderName = "mrdlBackplate";
            var join = defines.toString();
            var uniforms = [
                "world",
                "viewProjection",
                "cameraPosition",
                "_Radius_",
                "_Line_Width_",
                "_Absolute_Sizes_",
                "_Filter_Width_",
                "_Base_Color_",
                "_Line_Color_",
                "_Radius_Top_Left_",
                "_Radius_Top_Right_",
                "_Radius_Bottom_Left_",
                "_Radius_Bottom_Right_",
                "_Rate_",
                "_Highlight_Color_",
                "_Highlight_Width_",
                "_Highlight_Transform_",
                "_Highlight_",
                "_Iridescence_Intensity_",
                "_Iridescence_Edge_Intensity_",
                "_Iridescence_Tint_",
                "_Iridescent_Map_",
                "_Angle_",
                "_Reflected_",
                "_Frequency_",
                "_Vertical_Offset_",
                "_Gradient_Color_",
                "_Top_Left_",
                "_Top_Right_",
                "_Bottom_Left_",
                "_Bottom_Right_",
                "_Edge_Width_",
                "_Edge_Power_",
                "_Line_Gradient_Blend_",
                "_Fade_Out_",
            ];
            var samplers = ["_Iridescent_Map_"];
            var uniformBuffers = [];
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareUniformsAndSamplersList)({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: 4,
            });
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: fallbacks,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: 4 },
            }, engine), defines);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        drawWrapper._wasPreviouslyReady = true;
        return true;
    };
    MRDLBackplateMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var defines = subMesh.materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", this.getScene().getTransformMatrix());
        this._activeEffect.setVector3("cameraPosition", this.getScene().activeCamera.position);
        // "Round Rect"
        this._activeEffect.setFloat("_Radius_", this.radius);
        this._activeEffect.setFloat("_Line_Width_", this.lineWidth);
        this._activeEffect.setFloat("_Absolute_Sizes_", this.absoluteSizes ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Filter_Width_", this._filterWidth);
        this._activeEffect.setDirectColor4("_Base_Color_", this.baseColor);
        this._activeEffect.setDirectColor4("_Line_Color_", this.lineColor);
        // "Radii Multipliers"
        this._activeEffect.setFloat("_Radius_Top_Left_", this.radiusTopLeft);
        this._activeEffect.setFloat("_Radius_Top_Right_", this.radiusTopRight);
        this._activeEffect.setFloat("_Radius_Bottom_Left_", this.radiusBottomLeft);
        this._activeEffect.setFloat("_Radius_Bottom_Right_", this.radiusBottomRight);
        // "Line Highlight"
        this._activeEffect.setFloat("_Rate_", this._rate);
        this._activeEffect.setDirectColor4("_Highlight_Color_", this.highlightColor);
        this._activeEffect.setFloat("_Highlight_Width_", this.highlightWidth);
        this._activeEffect.setVector4("_Highlight_Transform_", this._highlightTransform);
        this._activeEffect.setFloat("_Highlight_", this._highlight);
        // "Iridescence"
        //define IRIDESCENCE_ENABLE true;
        this._activeEffect.setFloat("_Iridescence_Intensity_", this.iridescenceIntensity);
        this._activeEffect.setFloat("_Iridescence_Edge_Intensity_", this.iridescenceEdgeIntensity);
        this._activeEffect.setDirectColor4("_Iridescence_Tint_", this.iridescenceTint);
        this._activeEffect.setTexture("_Iridescent_Map_", this._iridescentMapTexture);
        this._activeEffect.setFloat("_Angle_", this._angle);
        this._activeEffect.setFloat("_Reflected_", this._reflected ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Frequency_", this._frequency);
        this._activeEffect.setFloat("_Vertical_Offset_", this._verticalOffset);
        // "Gradient"
        this._activeEffect.setDirectColor4("_Gradient_Color_", this.gradientColor);
        this._activeEffect.setDirectColor4("_Top_Left_", this.topLeftGradientColor);
        this._activeEffect.setDirectColor4("_Top_Right_", this.topRightGradientColor);
        this._activeEffect.setDirectColor4("_Bottom_Left_", this.bottomLeftGradientColor);
        this._activeEffect.setDirectColor4("_Bottom_Right_", this.bottomRightGradientColor);
        //define EDGE_ONLY false;
        this._activeEffect.setFloat("_Edge_Width_", this.edgeWidth);
        this._activeEffect.setFloat("_Edge_Power_", this.edgePower);
        this._activeEffect.setFloat("_Line_Gradient_Blend_", this.edgeLineGradientBlend);
        // "Fade"
        this._activeEffect.setFloat("_Fade_Out_", this.fadeOut);
        // "Antialiasing"
        //define SMOOTH_EDGES true;
        this._afterBind(mesh, this._activeEffect, subMesh);
    };
    /**
     * Get the list of animatables in the material.
     * @returns the list of animatables object used in the material
     */
    MRDLBackplateMaterial.prototype.getAnimatables = function () {
        return [];
    };
    MRDLBackplateMaterial.prototype.dispose = function (forceDisposeEffect) {
        _super.prototype.dispose.call(this, forceDisposeEffect);
    };
    MRDLBackplateMaterial.prototype.clone = function (name) {
        var _this = this;
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Clone(function () { return new MRDLBackplateMaterial(name, _this.getScene()); }, this);
    };
    MRDLBackplateMaterial.prototype.serialize = function () {
        var serializationObject = _super.prototype.serialize.call(this);
        serializationObject.customType = "BABYLON.MRDLBackplateMaterial";
        return serializationObject;
    };
    MRDLBackplateMaterial.prototype.getClassName = function () {
        return "MRDLBackplateMaterial";
    };
    // Statics
    MRDLBackplateMaterial.Parse = function (source, scene, rootUrl) {
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return new MRDLBackplateMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    /**
     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.
     */
    MRDLBackplateMaterial.IRIDESCENT_MAP_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-backplate-iridescence.png";
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "radius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "lineWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "absoluteSizes", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "baseColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "lineColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "radiusTopLeft", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "radiusTopRight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "radiusBottomLeft", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "radiusBottomRight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "highlightColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "highlightWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "iridescenceIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "iridescenceEdgeIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "iridescenceTint", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "fadeOut", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "gradientColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "topLeftGradientColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "topRightGradientColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "bottomLeftGradientColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "bottomRightGradientColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "edgeWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "edgePower", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLBackplateMaterial.prototype, "edgeLineGradientBlend", void 0);
    return MRDLBackplateMaterial;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PushMaterial));
(0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.MRDLBackplateMaterial", MRDLBackplateMaterial);


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/mrdlFrontplateMaterial.ts":
/*!************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/mrdlFrontplateMaterial.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MRDLFrontplateMaterial: () => (/* binding */ MRDLFrontplateMaterial)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Materials/materialHelper.functions */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_mrdlFrontplate_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/mrdlFrontplate.fragment */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.fragment.ts");
/* harmony import */ var _shaders_mrdlFrontplate_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/mrdlFrontplate.vertex */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.vertex.ts");















/** @hidden */
var MRDLFrontplateMaterialDefines = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLFrontplateMaterialDefines, _super);
    function MRDLFrontplateMaterialDefines() {
        var _this = _super.call(this) || this;
        /**
         * Sets default value for "SMOOTH_EDGES"
         */
        _this.SMOOTH_EDGES = true;
        _this._needNormals = true;
        _this._needUVs = true;
        _this.rebuild();
        return _this;
    }
    return MRDLFrontplateMaterialDefines;
}(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.MaterialDefines));
var MRDLFrontplateMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLFrontplateMaterial, _super);
    function MRDLFrontplateMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Gets or sets the corner radius on the frontplate. If this value is changed, update the lineWidth to match.
         */
        _this.radius = 0.12;
        /**
         * Gets or sets the line width of the frontplate.
         */
        _this.lineWidth = 0.01;
        /**
         * Gets or sets whether the scale is relative to the frontplate height.
         */
        _this.relativeToHeight = false;
        /** @hidden */
        _this._filterWidth = 1.0;
        /**
         * Gets or sets the edge color of the frontplate.
         */
        _this.edgeColor = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Color4(0.53, 0.53, 0.53, 1);
        /**
         * Gets or sets whether to enable blob effects on the frontplate.
         */
        _this.blobEnable = true;
        /**
         * Gets or sets the blob position on the frontplate.
         */
        _this.blobPosition = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Vector3(100, 100, 100);
        /**
         * Gets or sets the blob intensity of the frontplate.
         */
        _this.blobIntensity = 0.5;
        /**
         * Gets or sets the blob near size of the frontplate.
         */
        _this.blobNearSize = 0.032;
        /**
         * Gets or sets the blob far size of the frontplate.
         */
        _this.blobFarSize = 0.048;
        /**
         * Gets or sets the blob near distance of the frontplate.
         */
        _this.blobNearDistance = 0.008;
        /**
         * Gets or sets the blob far distance of the frontplate.
         */
        _this.blobFarDistance = 0.064;
        /**
         * Gets or sets the blob fade length of the frontplate.
         */
        _this.blobFadeLength = 0.04;
        /**
         * Gets or sets the blob inner fade of the frontplate.
         */
        _this.blobInnerFade = 0.01;
        /**
         * Gets or sets the blob pulse of the frontplate.
         */
        _this.blobPulse = 0.0;
        /**
         * Gets or sets the blob fade effect on the frontplate.
         */
        _this.blobFade = 1.0;
        /**
         * Gets or sets the maximum size of the blob pulse on the frontplate.
         */
        _this.blobPulseMaxSize = 0.05;
        /**
         * Gets or sets whether to enable extra blob effects of the frontplate.
         */
        _this.blobEnable2 = true;
        /**
         * Gets or sets blob2 position of the frontplate.
         */
        _this.blobPosition2 = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Vector3(10, 10.1, -0.6);
        /**
         * Gets or sets the blob2 near size of the frontplate.
         */
        _this.blobNearSize2 = 0.008;
        /**
         * Gets or sets the blob2 inner fade of the frontplate.
         */
        _this.blobInnerFade2 = 0.1;
        /**
         * Gets or sets the blob2 pulse of the frontplate.
         */
        _this.blobPulse2 = 0.0;
        /**
         * Gets or sets the blob2 fade effect on the frontplate.
         */
        _this.blobFade2 = 1.0;
        /**
         * Gets or sets the gaze intensity of the frontplate.
         */
        _this.gazeIntensity = 0.8;
        /**
         * Gets or sets the gaze focus of the frontplate.
         */
        _this.gazeFocus = 0.0;
        /**
         * Gets or sets the selection fuzz of the frontplate.
         */
        _this.selectionFuzz = 0.5;
        /**
         * Gets or sets the fade intensity of the frontplate.
         */
        _this.selected = 1.0;
        /**
         * Gets or sets the selection fade intensity of the frontplate.
         */
        _this.selectionFade = 0.2;
        /**
         * Gets or sets the selection fade size of the frontplate.
         */
        _this.selectionFadeSize = 0.0;
        /**
         * Gets or sets the selected distance of the frontplate.
         */
        _this.selectedDistance = 0.08;
        /**
         * Gets or sets the selected fade length of the frontplate.
         */
        _this.selectedFadeLength = 0.08;
        /**
         * Gets or sets the proximity maximum intensity of the frontplate.
         */
        _this.proximityMaxIntensity = 0.45;
        /**
         * Gets or sets the proximity far distance of the frontplate.
         */
        _this.proximityFarDistance = 0.16;
        /**
         * Gets or sets the proximity near radius of the frontplate.
         */
        _this.proximityNearRadius = 0.016;
        /**
         * Gets or sets the proximity anisotropy of the frontplate.
         */
        _this.proximityAnisotropy = 1.0;
        /**
         * Gets or sets whether to use global left index on the frontplate.
         */
        _this.useGlobalLeftIndex = true;
        /**
         * Gets or sets  whether to use global right index of the frontplate.
         */
        _this.useGlobalRightIndex = true;
        /**
         * Gets or sets the opacity of the frontplate (0.0 - 1.0).
         */
        _this.fadeOut = 1.0;
        _this.alphaMode = babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Constants.ALPHA_ADD;
        _this.disableDepthWrite = true;
        _this.backFaceCulling = false;
        _this._blobTexture = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Texture(MRDLFrontplateMaterial.BLOB_TEXTURE_URL, scene, true, false, babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Texture.NEAREST_SAMPLINGMODE);
        return _this;
    }
    MRDLFrontplateMaterial.prototype.needAlphaBlending = function () {
        return true;
    };
    MRDLFrontplateMaterial.prototype.needAlphaTesting = function () {
        return false;
    };
    MRDLFrontplateMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    // Methods
    MRDLFrontplateMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh) {
        var drawWrapper = subMesh._drawWrapper;
        if (this.isFrozen) {
            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh.materialDefines) {
            subMesh.materialDefines = new MRDLFrontplateMaterialDefines();
        }
        var defines = subMesh.materialDefines;
        var scene = this.getScene();
        if (this._isReadyForSubMesh(subMesh)) {
            return true;
        }
        var engine = scene.getEngine();
        // Attribs
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PrepareDefinesForAttributes)(mesh, defines, false, false);
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            // Fallbacks
            var fallbacks = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.EffectFallbacks();
            if (defines.FOG) {
                fallbacks.addFallback(1, "FOG");
            }
            (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.HandleFallbacksForShadows)(defines, fallbacks);
            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
            //Attributes
            var attribs = [babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.PositionKind];
            if (defines.NORMAL) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.NormalKind);
            }
            if (defines.UV1) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UVKind);
            }
            if (defines.UV2) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UV2Kind);
            }
            if (defines.VERTEXCOLOR) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.ColorKind);
            }
            if (defines.TANGENT) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.TangentKind);
            }
            (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PrepareAttributesForInstances)(attribs, defines);
            // Legacy browser patch
            var shaderName = "mrdlFrontplate";
            var join = defines.toString();
            var uniforms = [
                "world",
                "worldView",
                "worldViewProjection",
                "view",
                "projection",
                "viewProjection",
                "cameraPosition",
                "_Radius_",
                "_Line_Width_",
                "_Relative_To_Height_",
                "_Filter_Width_",
                "_Edge_Color_",
                "_Fade_Out_",
                "_Smooth_Edges_",
                "_Blob_Enable_",
                "_Blob_Position_",
                "_Blob_Intensity_",
                "_Blob_Near_Size_",
                "_Blob_Far_Size_",
                "_Blob_Near_Distance_",
                "_Blob_Far_Distance_",
                "_Blob_Fade_Length_",
                "_Blob_Inner_Fade_",
                "_Blob_Pulse_",
                "_Blob_Fade_",
                "_Blob_Pulse_Max_Size_",
                "_Blob_Enable_2_",
                "_Blob_Position_2_",
                "_Blob_Near_Size_2_",
                "_Blob_Inner_Fade_2_",
                "_Blob_Pulse_2_",
                "_Blob_Fade_2_",
                "_Gaze_Intensity_",
                "_Gaze_Focus_",
                "_Blob_Texture_",
                "_Selection_Fuzz_",
                "_Selected_",
                "_Selection_Fade_",
                "_Selection_Fade_Size_",
                "_Selected_Distance_",
                "_Selected_Fade_Length_",
                "_Proximity_Max_Intensity_",
                "_Proximity_Far_Distance_",
                "_Proximity_Near_Radius_",
                "_Proximity_Anisotropy_",
                "Global_Left_Index_Tip_Position",
                "Global_Right_Index_Tip_Position",
                "_Use_Global_Left_Index_",
                "_Use_Global_Right_Index_",
            ];
            var samplers = [];
            var uniformBuffers = [];
            (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PrepareUniformsAndSamplersList)({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: 4,
            });
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: fallbacks,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: 4 },
            }, engine), defines);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        drawWrapper._wasPreviouslyReady = true;
        return true;
    };
    MRDLFrontplateMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var scene = this.getScene();
        var defines = subMesh.materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
        this._activeEffect.setVector3("cameraPosition", scene.activeCamera.position);
        // "Round Rect"
        this._activeEffect.setFloat("_Radius_", this.radius);
        this._activeEffect.setFloat("_Line_Width_", this.lineWidth);
        this._activeEffect.setFloat("_Relative_To_Height_", this.relativeToHeight ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Filter_Width_", this._filterWidth);
        this._activeEffect.setDirectColor4("_Edge_Color_", this.edgeColor);
        // "Fade"
        this._activeEffect.setFloat("_Fade_Out_", this.fadeOut);
        // "Blob"
        this._activeEffect.setFloat("_Blob_Enable_", this.blobEnable ? 1.0 : 0.0);
        this._activeEffect.setVector3("_Blob_Position_", this.blobPosition);
        this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
        this._activeEffect.setFloat("_Blob_Near_Size_", this.blobNearSize);
        this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
        this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
        this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
        this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
        this._activeEffect.setFloat("_Blob_Inner_Fade_", this.blobInnerFade);
        this._activeEffect.setFloat("_Blob_Pulse_", this.blobPulse);
        this._activeEffect.setFloat("_Blob_Fade_", this.blobFade);
        this._activeEffect.setFloat("_Blob_Pulse_Max_Size_", this.blobPulseMaxSize);
        // "Blob 2"
        this._activeEffect.setFloat("_Blob_Enable_2_", this.blobEnable2 ? 1.0 : 0.0);
        this._activeEffect.setVector3("_Blob_Position_2_", this.blobPosition2);
        this._activeEffect.setFloat("_Blob_Near_Size_2_", this.blobNearSize2);
        this._activeEffect.setFloat("_Blob_Inner_Fade_2_", this.blobInnerFade2);
        this._activeEffect.setFloat("_Blob_Pulse_2_", this.blobPulse2);
        this._activeEffect.setFloat("_Blob_Fade_2_", this.blobFade2);
        // "Gaze"
        this._activeEffect.setFloat("_Gaze_Intensity_", this.gazeIntensity);
        this._activeEffect.setFloat("_Gaze_Focus_", this.gazeFocus);
        // "Blob Texture"
        this._activeEffect.setTexture("_Blob_Texture_", this._blobTexture);
        // "Selection"
        this._activeEffect.setFloat("_Selection_Fuzz_", this.selectionFuzz);
        this._activeEffect.setFloat("_Selected_", this.selected);
        this._activeEffect.setFloat("_Selection_Fade_", this.selectionFade);
        this._activeEffect.setFloat("_Selection_Fade_Size_", this.selectionFadeSize);
        this._activeEffect.setFloat("_Selected_Distance_", this.selectedDistance);
        this._activeEffect.setFloat("_Selected_Fade_Length_", this.selectedFadeLength);
        // "Proximity"
        this._activeEffect.setFloat("_Proximity_Max_Intensity_", this.proximityMaxIntensity);
        this._activeEffect.setFloat("_Proximity_Far_Distance_", this.proximityFarDistance);
        this._activeEffect.setFloat("_Proximity_Near_Radius_", this.proximityNearRadius);
        this._activeEffect.setFloat("_Proximity_Anisotropy_", this.proximityAnisotropy);
        // "Global"
        this._activeEffect.setFloat("_Use_Global_Left_Index_", this.useGlobalLeftIndex ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Use_Global_Right_Index_", this.useGlobalRightIndex ? 1.0 : 0.0);
        // "Antialiasing"
        //define SMOOTH_EDGES true;
        this._afterBind(mesh, this._activeEffect, subMesh);
    };
    /**
     * Get the list of animatables in the material.
     * @returns the list of animatables object used in the material
     */
    MRDLFrontplateMaterial.prototype.getAnimatables = function () {
        return [];
    };
    MRDLFrontplateMaterial.prototype.dispose = function (forceDisposeEffect) {
        _super.prototype.dispose.call(this, forceDisposeEffect);
    };
    MRDLFrontplateMaterial.prototype.clone = function (name) {
        var _this = this;
        return babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Clone(function () { return new MRDLFrontplateMaterial(name, _this.getScene()); }, this);
    };
    MRDLFrontplateMaterial.prototype.serialize = function () {
        var serializationObject = babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Serialize(this);
        serializationObject.customType = "BABYLON.MRDLFrontplateMaterial";
        return serializationObject;
    };
    MRDLFrontplateMaterial.prototype.getClassName = function () {
        return "MRDLFrontplateMaterial";
    };
    // Statics
    MRDLFrontplateMaterial.Parse = function (source, scene, rootUrl) {
        return babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return new MRDLFrontplateMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    /**
     * URL pointing to the texture used to define the coloring for the BLOB.
     */
    MRDLFrontplateMaterial.BLOB_TEXTURE_URL = "";
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "radius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "lineWidth", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "relativeToHeight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "edgeColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobEnable", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobNearSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobFarSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobNearDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobFarDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobFadeLength", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobInnerFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobPulse", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobPulseMaxSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobEnable2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobPosition2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobNearSize2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobInnerFade2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobPulse2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "blobFade2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "gazeIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "gazeFocus", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "selectionFuzz", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "selected", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "selectionFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "selectionFadeSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "selectedDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "selectedFadeLength", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "proximityMaxIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "proximityFarDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "proximityNearRadius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "proximityAnisotropy", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "useGlobalLeftIndex", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLFrontplateMaterial.prototype, "useGlobalRightIndex", void 0);
    return MRDLFrontplateMaterial;
}(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PushMaterial));
(0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.MRDLFrontplateMaterial", MRDLFrontplateMaterial);


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/mrdlInnerquadMaterial.ts":
/*!***********************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/mrdlInnerquadMaterial.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MRDLInnerquadMaterial: () => (/* binding */ MRDLInnerquadMaterial)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Materials/materialHelper.functions */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_mrdlInnerquad_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/mrdlInnerquad.fragment */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.fragment.ts");
/* harmony import */ var _shaders_mrdlInnerquad_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/mrdlInnerquad.vertex */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.vertex.ts");













var MRDLInnerquadMaterialDefines = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLInnerquadMaterialDefines, _super);
    function MRDLInnerquadMaterialDefines() {
        var _this = _super.call(this) || this;
        _this._needNormals = true;
        _this._needUVs = true;
        _this.rebuild();
        return _this;
    }
    return MRDLInnerquadMaterialDefines;
}(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.MaterialDefines));
var MRDLInnerquadMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLInnerquadMaterial, _super);
    function MRDLInnerquadMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Gets or sets the color of the innerquad.
         */
        _this.color = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Color4(1, 1, 1, 0.05);
        /**
         * Gets or sets the corner radius on the innerquad. If this value is changed, update the lineWidth to match.
         */
        _this.radius = 0.12;
        /**
         * Gets or sets whether the radius of the innerquad should be fixed.
         */
        _this.fixedRadius = true;
        /** @hidden */
        _this._filterWidth = 1.0;
        /**
         * Gets or sets the glow fraction of the innerquad.
         */
        _this.glowFraction = 0.0;
        /**
         * Gets or sets the maximum glow intensity of the innerquad.
         */
        _this.glowMax = 0.5;
        /**
         * Gets or sets the glow falloff effect of the innerquad.
         */
        _this.glowFalloff = 2.0;
        _this.alphaMode = babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.Constants.ALPHA_COMBINE;
        _this.backFaceCulling = false;
        return _this;
    }
    MRDLInnerquadMaterial.prototype.needAlphaBlending = function () {
        return true;
    };
    MRDLInnerquadMaterial.prototype.needAlphaTesting = function () {
        return false;
    };
    MRDLInnerquadMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    // Methods
    MRDLInnerquadMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh) {
        var drawWrapper = subMesh._drawWrapper;
        if (this.isFrozen) {
            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh.materialDefines) {
            subMesh.materialDefines = new MRDLInnerquadMaterialDefines();
        }
        var defines = subMesh.materialDefines;
        var scene = this.getScene();
        if (this._isReadyForSubMesh(subMesh)) {
            return true;
        }
        var engine = scene.getEngine();
        // Attribs
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PrepareDefinesForAttributes)(mesh, defines, true, false);
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            // Fallbacks
            var fallbacks = new babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.EffectFallbacks();
            if (defines.FOG) {
                fallbacks.addFallback(1, "FOG");
            }
            (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.HandleFallbacksForShadows)(defines, fallbacks);
            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
            //Attributes
            var attribs = [babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.PositionKind];
            if (defines.NORMAL) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.NormalKind);
            }
            if (defines.UV1) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UVKind);
            }
            if (defines.UV2) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UV2Kind);
            }
            if (defines.VERTEXCOLOR) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.ColorKind);
            }
            if (defines.TANGENT) {
                attribs.push(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.TangentKind);
            }
            (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PrepareAttributesForInstances)(attribs, defines);
            // Legacy browser patch
            var shaderName = "mrdlInnerquad";
            var join = defines.toString();
            var uniforms = [
                "world",
                "worldView",
                "worldViewProjection",
                "view",
                "projection",
                "viewProjection",
                "cameraPosition",
                "_Color_",
                "_Radius_",
                "_Fixed_Radius_",
                "_Filter_Width_",
                "_Glow_Fraction_",
                "_Glow_Max_",
                "_Glow_Falloff_",
            ];
            var samplers = [];
            var uniformBuffers = [];
            (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PrepareUniformsAndSamplersList)({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: 4,
            });
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: fallbacks,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: 4 },
            }, engine), defines);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        drawWrapper._wasPreviouslyReady = true;
        return true;
    };
    MRDLInnerquadMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var scene = this.getScene();
        var defines = subMesh.materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", scene.getTransformMatrix());
        this._activeEffect.setVector3("cameraPosition", scene.activeCamera.position);
        // "Color"
        this._activeEffect.setDirectColor4("_Color_", this.color);
        // "Shape"
        this._activeEffect.setFloat("_Radius_", this.radius);
        this._activeEffect.setFloat("_Fixed_Radius_", this.fixedRadius ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Filter_Width_", this._filterWidth);
        // "Glow"
        this._activeEffect.setFloat("_Glow_Fraction_", this.glowFraction);
        this._activeEffect.setFloat("_Glow_Max_", this.glowMax);
        this._activeEffect.setFloat("_Glow_Falloff_", this.glowFalloff);
        this._afterBind(mesh, this._activeEffect, subMesh);
    };
    /**
     * Get the list of animatables in the material.
     * @returns the list of animatables object used in the material
     */
    MRDLInnerquadMaterial.prototype.getAnimatables = function () {
        return [];
    };
    MRDLInnerquadMaterial.prototype.dispose = function (forceDisposeEffect) {
        _super.prototype.dispose.call(this, forceDisposeEffect);
    };
    MRDLInnerquadMaterial.prototype.clone = function (name) {
        var _this = this;
        return babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Clone(function () { return new MRDLInnerquadMaterial(name, _this.getScene()); }, this);
    };
    MRDLInnerquadMaterial.prototype.serialize = function () {
        var serializationObject = babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Serialize(this);
        serializationObject.customType = "BABYLON.MRDLInnerquadMaterial";
        return serializationObject;
    };
    MRDLInnerquadMaterial.prototype.getClassName = function () {
        return "MRDLInnerquadMaterial";
    };
    // Statics
    MRDLInnerquadMaterial.Parse = function (source, scene, rootUrl) {
        return babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return new MRDLInnerquadMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLInnerquadMaterial.prototype, "color", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLInnerquadMaterial.prototype, "radius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLInnerquadMaterial.prototype, "fixedRadius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLInnerquadMaterial.prototype, "glowFraction", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLInnerquadMaterial.prototype, "glowMax", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLInnerquadMaterial.prototype, "glowFalloff", void 0);
    return MRDLInnerquadMaterial;
}(babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.PushMaterial));
(0,babylonjs_Maths_math_color__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.MRDLInnerquadMaterial", MRDLInnerquadMaterial);


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/mrdlSliderBarMaterial.ts":
/*!***********************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/mrdlSliderBarMaterial.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MRDLSliderBarMaterial: () => (/* binding */ MRDLSliderBarMaterial)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Materials/materialHelper.functions */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_mrdlSliderBar_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/mrdlSliderBar.fragment */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.ts");
/* harmony import */ var _shaders_mrdlSliderBar_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/mrdlSliderBar.vertex */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.ts");















/** @internal */
var MRDLSliderBarMaterialDefines = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLSliderBarMaterialDefines, _super);
    function MRDLSliderBarMaterialDefines() {
        var _this = _super.call(this) || this;
        /*
            "SKY_ENABLED", "BLOB_ENABLE_2", "IRIDESCENCE_ENABLED"
        */
        _this.SKY_ENABLED = true;
        _this.BLOB_ENABLE_2 = true;
        _this.IRIDESCENCE_ENABLED = true;
        _this._needNormals = true;
        _this._needUVs = true;
        _this.rebuild();
        return _this;
    }
    return MRDLSliderBarMaterialDefines;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.MaterialDefines));
/**
 * Class used to render Slider Bar material with MRDL
 */
var MRDLSliderBarMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLSliderBarMaterial, _super);
    function MRDLSliderBarMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Gets or sets the corner Radius on the slider bar.
         */
        _this.radius = 0.6;
        /**
         * Gets or sets the Bevel Front on the slider bar.
         */
        _this.bevelFront = 0.6;
        /**
         * Gets or sets the Bevel Front Stretch on the slider bar.
         */
        _this.bevelFrontStretch = 0.077;
        /**
         * Gets or sets the Bevel Back on the slider bar.
         */
        _this.bevelBack = 0;
        /**
         * Gets or sets the Bevel Back Stretch on the slider bar.
         */
        _this.bevelBackStretch = 0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusTopLeft = 1.0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusTopRight = 1.0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusBottomLeft = 1.0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusBottomRight = 1.0;
        /**
         * Gets or sets whether Bulge is enabled.
         * Default is false.
         */
        _this.bulgeEnabled = false;
        /**
         * Gets or sets the Bulge Height.
         */
        _this.bulgeHeight = -0.323;
        /**
         * Gets or sets the Bulge Radius.
         */
        _this.bulgeRadius = 0.73;
        /**
         * Gets or sets the Sun Intensity.
         */
        _this.sunIntensity = 1.102;
        /**
         * Gets or sets the Sun Theta.
         */
        _this.sunTheta = 0.76;
        /**
         * Gets or sets the Sun Phi.
         */
        _this.sunPhi = 0.526;
        /**
         * Gets or sets the Indirect Diffuse.
         */
        _this.indirectDiffuse = 0.658;
        /**
         * Gets or sets the base albedo.
         */
        _this.albedo = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.505882, 0.996078, 1);
        /**
         * Gets or sets the Specular value.
         */
        _this.specular = 0;
        /**
         * Gets or sets the Shininess value.
         */
        _this.shininess = 10;
        /**
         * Gets or sets the Sharpness value.
         */
        _this.sharpness = 0;
        /**
         * Gets or sets the Subsurface value.
         */
        _this.subsurface = 0;
        /**
         * Gets or sets the left gradient color.
         */
        _this.leftGradientColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.505882, 0.996078, 1);
        /**
         * Gets or sets the right gradient color.
         */
        _this.rightGradientColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.505882, 0.996078, 1);
        /**
         * Gets or sets the reflection value.
         */
        _this.reflection = 0.749;
        /**
         * Gets or sets the front reflect value.
         */
        _this.frontReflect = 0;
        /**
         * Gets or sets the edge reflect value.
         */
        _this.edgeReflect = 0.09;
        /**
         * Gets or sets the power value.
         */
        _this.power = 8.13;
        /**
         * Gets or sets the sky color.
         */
        _this.skyColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.964706, 0.996078, 1);
        /**
         * Gets or sets the horizon color.
         */
        _this.horizonColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.333333, 0.996078, 1);
        /**
         * Gets or sets the ground color.
         */
        _this.groundColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0, 0.254902, 0.996078, 1);
        /**
         * Gets or sets the horizon power value.
         */
        _this.horizonPower = 1;
        /**
         * Gets or sets the finger occlusion width value.
         */
        _this.width = 0.02;
        /**
         * Gets or sets the finger occlusion fuzz value.
         */
        _this.fuzz = 0.5;
        /**
         * Gets or sets the minimum finger occlusion fuzz value.
         */
        _this.minFuzz = 0.001;
        /**
         * Gets or sets the finger occlusion clip fade value.
         */
        _this.clipFade = 0.01;
        /**
         * Gets or sets the hue shift value.
         */
        _this.hueShift = 0;
        /**
         * Gets or sets the saturation shift value.
         */
        _this.saturationShift = 0;
        /**
         * Gets or sets the value shift.
         */
        _this.valueShift = 0;
        /**
         * Gets or sets the position of the hover glow effect.
         */
        _this.blobPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0.1);
        /**
         * Gets or sets the intensity of the hover glow effect.
         */
        _this.blobIntensity = 0.5;
        /**
         * Gets or sets the near size of the hover glow effect.
         */
        _this.blobNearSize = 0.01;
        /**
         * Gets or sets the far size of the hover glow effect.
         */
        _this.blobFarSize = 0.03;
        /**
         * Gets or sets the distance considered "near" to the mesh, which controls the size of the hover glow effect (see blobNearSize).
         */
        _this.blobNearDistance = 0;
        /**
         * Gets or sets the distance considered "far" from the mesh, which controls the size of the hover glow effect (see blobFarSize).
         */
        _this.blobFarDistance = 0.08;
        /**
         * Gets or sets the length of the hover glow effect fade.
         */
        _this.blobFadeLength = 0.576;
        /**
         * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).
         */
        _this.blobPulse = 0;
        /**
         * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.
         */
        _this.blobFade = 1;
        /**
         * Gets or sets the position of the hover glow effect.
         */
        _this.blobPosition2 = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0.2, 0, 0.1);
        /**
         * Gets or sets the size of the hover glow effect when the right pointer is considered "near" to the mesh (see blobNearDistance).
         */
        _this.blobNearSize2 = 0.01;
        /**
         * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).
         */
        _this.blobPulse2 = 0;
        /**
         * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.
         */
        _this.blobFade2 = 1;
        /**
         * Gets or sets the texture of the hover glow effect.
         */
        _this.blobTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture("", _this.getScene());
        /**
         * Gets or sets the finger position for left index.
         */
        _this.leftIndexPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 1);
        /**
         * Gets or sets the finger position for right index.
         */
        _this.rightIndexPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(-1, -1, -1);
        /**
         * Gets or sets the finger position for left index middle position.
         */
        _this.leftIndexMiddlePosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
        /**
         * Gets or sets the finger position for right index middle position.
         */
        _this.rightIndexMiddlePosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
        /**
         * Gets or sets the Decal Scle for XY.
         */
        _this.decalScaleXY = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector2(1.5, 1.5);
        /**
         * Gets or sets decalFrontOnly
         * Default is true
         */
        _this.decalFrontOnly = true;
        /**
         * Gets or sets the Rim Light intensity.
         */
        _this.rimIntensity = 0.287;
        /**
         * Gets or sets the Rim Light hue shift value.
         */
        _this.rimHueShift = 0;
        /**
         * Gets or sets the Rim Light saturation shift value.
         */
        _this.rimSaturationShift = 0;
        /**
         * Gets or sets the Rim Light value shift.
         */
        _this.rimValueShift = -1;
        /**
         * Gets or sets the intensity of the iridescence effect.
         */
        _this.iridescenceIntensity = 0;
        /**
         * @internal
         */
        _this.useGlobalLeftIndex = 1.0;
        /**
         * @internal
         */
        _this.useGlobalRightIndex = 1.0;
        /**
         * @internal
         */
        _this.globalLeftIndexTipProximity = 0.0;
        /**
         * @internal
         */
        _this.globalRightIndexTipProximity = 0.0;
        /**
         * @internal
         */
        _this.globalLeftIndexTipPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.5, 0.0, -0.55, 1.0);
        /**
         * @internal
         */
        _this.globaRightIndexTipPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.0, 0.0, 0.0, 1.0);
        /**
         * @internal
         */
        _this.globalLeftThumbTipPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.5, 0.0, -0.55, 1.0);
        /**
         * @internal
         */
        _this.globalRightThumbTipPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.0, 0.0, 0.0, 1.0);
        /**
         * @internal
         */
        _this.globalLeftIndexMiddlePosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.5, 0.0, -0.55, 1.0);
        /**
         * @internal
         */
        _this.globalRightIndexMiddlePosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.0, 0.0, 0.0, 1.0);
        _this.alphaMode = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Constants.ALPHA_DISABLE;
        _this.backFaceCulling = false;
        _this._blueGradientTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture(MRDLSliderBarMaterial.BLUE_GRADIENT_TEXTURE_URL, _this.getScene(), true, false, babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture.NEAREST_SAMPLINGMODE);
        _this._decalTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture("", _this.getScene());
        _this._reflectionMapTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture("", _this.getScene());
        _this._indirectEnvTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture("", _this.getScene());
        return _this;
    }
    MRDLSliderBarMaterial.prototype.needAlphaBlending = function () {
        return false;
    };
    MRDLSliderBarMaterial.prototype.needAlphaTesting = function () {
        return false;
    };
    MRDLSliderBarMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    // Methods
    MRDLSliderBarMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh) {
        var drawWrapper = subMesh._drawWrapper;
        if (this.isFrozen) {
            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh.materialDefines) {
            subMesh.materialDefines = new MRDLSliderBarMaterialDefines();
        }
        var defines = subMesh.materialDefines;
        var scene = this.getScene();
        if (this._isReadyForSubMesh(subMesh)) {
            return true;
        }
        var engine = scene.getEngine();
        // Attribs
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareDefinesForAttributes)(mesh, defines, false, false);
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            // Fallbacks
            var fallbacks = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.EffectFallbacks();
            if (defines.FOG) {
                fallbacks.addFallback(1, "FOG");
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.HandleFallbacksForShadows)(defines, fallbacks);
            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
            //Attributes
            var attribs = [babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.PositionKind];
            if (defines.NORMAL) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.NormalKind);
            }
            if (defines.UV1) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UVKind);
            }
            if (defines.UV2) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UV2Kind);
            }
            if (defines.VERTEXCOLOR) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.ColorKind);
            }
            if (defines.TANGENT) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.TangentKind);
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareAttributesForInstances)(attribs, defines);
            // Legacy browser patch
            var shaderName = "mrdlSliderBar";
            var join = defines.toString();
            var uniforms = [
                "world",
                "viewProjection",
                "cameraPosition",
                "_Radius_",
                "_Bevel_Front_",
                "_Bevel_Front_Stretch_",
                "_Bevel_Back_",
                "_Bevel_Back_Stretch_",
                "_Radius_Top_Left_",
                "_Radius_Top_Right_",
                "_Radius_Bottom_Left_",
                "_Radius_Bottom_Right_",
                "_Bulge_Enabled_",
                "_Bulge_Height_",
                "_Bulge_Radius_",
                "_Sun_Intensity_",
                "_Sun_Theta_",
                "_Sun_Phi_",
                "_Indirect_Diffuse_",
                "_Albedo_",
                "_Specular_",
                "_Shininess_",
                "_Sharpness_",
                "_Subsurface_",
                "_Left_Color_",
                "_Right_Color_",
                "_Reflection_",
                "_Front_Reflect_",
                "_Edge_Reflect_",
                "_Power_",
                "_Sky_Color_",
                "_Horizon_Color_",
                "_Ground_Color_",
                "_Horizon_Power_",
                "_Reflection_Map_",
                "_Indirect_Environment_",
                "_Width_",
                "_Fuzz_",
                "_Min_Fuzz_",
                "_Clip_Fade_",
                "_Hue_Shift_",
                "_Saturation_Shift_",
                "_Value_Shift_",
                "_Blob_Position_",
                "_Blob_Intensity_",
                "_Blob_Near_Size_",
                "_Blob_Far_Size_",
                "_Blob_Near_Distance_",
                "_Blob_Far_Distance_",
                "_Blob_Fade_Length_",
                "_Blob_Pulse_",
                "_Blob_Fade_",
                "_Blob_Texture_",
                "_Blob_Position_2_",
                "_Blob_Near_Size_2_",
                "_Blob_Pulse_2_",
                "_Blob_Fade_2_",
                "_Left_Index_Pos_",
                "_Right_Index_Pos_",
                "_Left_Index_Middle_Pos_",
                "_Right_Index_Middle_Pos_",
                "_Decal_",
                "_Decal_Scale_XY_",
                "_Decal_Front_Only_",
                "_Rim_Intensity_",
                "_Rim_Texture_",
                "_Rim_Hue_Shift_",
                "_Rim_Saturation_Shift_",
                "_Rim_Value_Shift_",
                "_Iridescence_Intensity_",
                "_Iridescence_Texture_",
                "Use_Global_Left_Index",
                "Use_Global_Right_Index",
                "Global_Left_Index_Tip_Position",
                "Global_Right_Index_Tip_Position",
                "Global_Left_Thumb_Tip_Position",
                "Global_Right_Thumb_Tip_Position",
                "Global_Left_Index_Middle_Position;",
                "Global_Right_Index_Middle_Position",
                "Global_Left_Index_Tip_Proximity",
                "Global_Right_Index_Tip_Proximity",
            ];
            var samplers = ["_Rim_Texture_", "_Iridescence_Texture_"];
            var uniformBuffers = [];
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareUniformsAndSamplersList)({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: 4,
            });
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: fallbacks,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: 4 },
            }, engine), defines, this._materialContext);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        drawWrapper._wasPreviouslyReady = true;
        return true;
    };
    MRDLSliderBarMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var defines = subMesh.materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", this.getScene().getTransformMatrix());
        this._activeEffect.setVector3("cameraPosition", this.getScene().activeCamera.position);
        // "Round Rect"
        this._activeEffect.setFloat("_Radius_", this.radius);
        this._activeEffect.setFloat("_Bevel_Front_", this.bevelFront);
        this._activeEffect.setFloat("_Bevel_Front_Stretch_", this.bevelFrontStretch);
        this._activeEffect.setFloat("_Bevel_Back_", this.bevelBack);
        this._activeEffect.setFloat("_Bevel_Back_Stretch_", this.bevelBackStretch);
        // "Radii Multipliers"
        this._activeEffect.setFloat("_Radius_Top_Left_", this.radiusTopLeft);
        this._activeEffect.setFloat("_Radius_Top_Right_", this.radiusTopRight);
        this._activeEffect.setFloat("_Radius_Bottom_Left_", this.radiusBottomLeft);
        this._activeEffect.setFloat("_Radius_Bottom_Right_", this.radiusBottomRight);
        // "Bulge"
        this._activeEffect.setFloat("_Bulge_Enabled_", this.bulgeEnabled ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Bulge_Height_", this.bulgeHeight);
        this._activeEffect.setFloat("_Bulge_Radius_", this.bulgeRadius);
        // "Sun"
        this._activeEffect.setFloat("_Sun_Intensity_", this.sunIntensity);
        this._activeEffect.setFloat("_Sun_Theta_", this.sunTheta);
        this._activeEffect.setFloat("_Sun_Phi_", this.sunPhi);
        this._activeEffect.setFloat("_Indirect_Diffuse_", this.indirectDiffuse);
        // "Diffuse And Specular"
        this._activeEffect.setDirectColor4("_Albedo_", this.albedo);
        this._activeEffect.setFloat("_Specular_", this.specular);
        this._activeEffect.setFloat("_Shininess_", this.shininess);
        this._activeEffect.setFloat("_Sharpness_", this.sharpness);
        this._activeEffect.setFloat("_Subsurface_", this.subsurface);
        // "Gradient"
        this._activeEffect.setDirectColor4("_Left_Color_", this.leftGradientColor);
        this._activeEffect.setDirectColor4("_Right_Color_", this.rightGradientColor);
        // "Reflection"
        this._activeEffect.setFloat("_Reflection_", this.reflection);
        this._activeEffect.setFloat("_Front_Reflect_", this.frontReflect);
        this._activeEffect.setFloat("_Edge_Reflect_", this.edgeReflect);
        this._activeEffect.setFloat("_Power_", this.power);
        // "Sky Environment"
        //define SKY_ENABLED true;
        this._activeEffect.setDirectColor4("_Sky_Color_", this.skyColor);
        this._activeEffect.setDirectColor4("_Horizon_Color_", this.horizonColor);
        this._activeEffect.setDirectColor4("_Ground_Color_", this.groundColor);
        this._activeEffect.setFloat("_Horizon_Power_", this.horizonPower);
        // "Mapped Environment"
        //define ENV_ENABLE false;
        this._activeEffect.setTexture("_Reflection_Map_", this._reflectionMapTexture);
        this._activeEffect.setTexture("_Indirect_Environment_", this._indirectEnvTexture);
        // "FingerOcclusion"
        //define OCCLUSION_ENABLED false;
        this._activeEffect.setFloat("_Width_", this.width);
        this._activeEffect.setFloat("_Fuzz_", this.fuzz);
        this._activeEffect.setFloat("_Min_Fuzz_", this.minFuzz);
        this._activeEffect.setFloat("_Clip_Fade_", this.clipFade);
        // "View Based Color Shift"
        this._activeEffect.setFloat("_Hue_Shift_", this.hueShift);
        this._activeEffect.setFloat("_Saturation_Shift_", this.saturationShift);
        this._activeEffect.setFloat("_Value_Shift_", this.valueShift);
        // "Blob"
        //define BLOB_ENABLE false;
        this._activeEffect.setVector3("_Blob_Position_", this.blobPosition);
        this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
        this._activeEffect.setFloat("_Blob_Near_Size_", this.blobNearSize);
        this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
        this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
        this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
        this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
        this._activeEffect.setFloat("_Blob_Pulse_", this.blobPulse);
        this._activeEffect.setFloat("_Blob_Fade_", this.blobFade);
        // "Blob Texture"
        this._activeEffect.setTexture("_Blob_Texture_", this.blobTexture);
        // "Blob 2"
        //define BLOB_ENABLE_2 true;
        this._activeEffect.setVector3("_Blob_Position_2_", this.blobPosition2);
        this._activeEffect.setFloat("_Blob_Near_Size_2_", this.blobNearSize2);
        this._activeEffect.setFloat("_Blob_Pulse_2_", this.blobPulse2);
        this._activeEffect.setFloat("_Blob_Fade_2_", this.blobFade2);
        // "Finger Positions"
        this._activeEffect.setVector3("_Left_Index_Pos_", this.leftIndexPosition);
        this._activeEffect.setVector3("_Right_Index_Pos_", this.rightIndexPosition);
        this._activeEffect.setVector3("_Left_Index_Middle_Pos_", this.leftIndexMiddlePosition);
        this._activeEffect.setVector3("_Right_Index_Middle_Pos_", this.rightIndexMiddlePosition);
        // "Decal Texture"
        //define DECAL_ENABLE false;
        this._activeEffect.setTexture("_Decal_", this._decalTexture);
        this._activeEffect.setVector2("_Decal_Scale_XY_", this.decalScaleXY);
        this._activeEffect.setFloat("_Decal_Front_Only_", this.decalFrontOnly ? 1.0 : 0.0);
        // "Rim Light"
        this._activeEffect.setFloat("_Rim_Intensity_", this.rimIntensity);
        this._activeEffect.setTexture("_Rim_Texture_", this._blueGradientTexture);
        this._activeEffect.setFloat("_Rim_Hue_Shift_", this.rimHueShift);
        this._activeEffect.setFloat("_Rim_Saturation_Shift_", this.rimSaturationShift);
        this._activeEffect.setFloat("_Rim_Value_Shift_", this.rimValueShift);
        // "Iridescence"
        //define IRIDESCENCE_ENABLED true;
        this._activeEffect.setFloat("_Iridescence_Intensity_", this.iridescenceIntensity);
        this._activeEffect.setTexture("_Iridescence_Texture_", this._blueGradientTexture);
        // Global inputs
        this._activeEffect.setFloat("Use_Global_Left_Index", this.useGlobalLeftIndex);
        this._activeEffect.setFloat("Use_Global_Right_Index", this.useGlobalRightIndex);
        this._activeEffect.setVector4("Global_Left_Index_Tip_Position", this.globalLeftIndexTipPosition);
        this._activeEffect.setVector4("Global_Right_Index_Tip_Position", this.globaRightIndexTipPosition);
        this._activeEffect.setVector4("Global_Left_Thumb_Tip_Position", this.globalLeftThumbTipPosition);
        this._activeEffect.setVector4("Global_Right_Thumb_Tip_Position", this.globalRightThumbTipPosition);
        this._activeEffect.setVector4("Global_Left_Index_Middle_Position", this.globalLeftIndexMiddlePosition);
        this._activeEffect.setVector4("Global_Right_Index_Middle_Position", this.globalRightIndexMiddlePosition);
        this._activeEffect.setFloat("Global_Left_Index_Tip_Proximity", this.globalLeftIndexTipProximity);
        this._activeEffect.setFloat("Global_Right_Index_Tip_Proximity", this.globalRightIndexTipProximity);
        this._afterBind(mesh, this._activeEffect, subMesh);
    };
    /**
     * Get the list of animatables in the material.
     * @returns the list of animatables object used in the material
     */
    MRDLSliderBarMaterial.prototype.getAnimatables = function () {
        return [];
    };
    MRDLSliderBarMaterial.prototype.dispose = function (forceDisposeEffect) {
        _super.prototype.dispose.call(this, forceDisposeEffect);
        this._reflectionMapTexture.dispose();
        this._indirectEnvTexture.dispose();
        this._blueGradientTexture.dispose();
        this._decalTexture.dispose();
    };
    MRDLSliderBarMaterial.prototype.clone = function (name) {
        var _this = this;
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Clone(function () { return new MRDLSliderBarMaterial(name, _this.getScene()); }, this);
    };
    MRDLSliderBarMaterial.prototype.serialize = function () {
        var serializationObject = _super.prototype.serialize.call(this);
        serializationObject.customType = "BABYLON.MRDLSliderBarMaterial";
        return serializationObject;
    };
    MRDLSliderBarMaterial.prototype.getClassName = function () {
        return "MRDLSliderBarMaterial";
    };
    // Statics
    MRDLSliderBarMaterial.Parse = function (source, scene, rootUrl) {
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return new MRDLSliderBarMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    /**
     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.
     */
    MRDLSliderBarMaterial.BLUE_GRADIENT_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png";
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "radius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "bevelFront", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "bevelFrontStretch", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "bevelBack", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "bevelBackStretch", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "radiusTopLeft", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "radiusTopRight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "radiusBottomLeft", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "radiusBottomRight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "bulgeEnabled", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "bulgeHeight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "bulgeRadius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "sunIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "sunTheta", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "sunPhi", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "indirectDiffuse", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "albedo", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "specular", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "shininess", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "sharpness", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "subsurface", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "leftGradientColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "rightGradientColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "reflection", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "frontReflect", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "edgeReflect", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "power", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "skyColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "horizonColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "groundColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "horizonPower", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "width", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "fuzz", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "minFuzz", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "clipFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "hueShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "saturationShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "valueShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobNearSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobFarSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobNearDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobFarDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobFadeLength", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobPulse", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobPosition2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobNearSize2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobPulse2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobFade2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "blobTexture", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "leftIndexPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "rightIndexPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "leftIndexMiddlePosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "rightIndexMiddlePosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "decalScaleXY", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "decalFrontOnly", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "rimIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "rimHueShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "rimSaturationShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "rimValueShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderBarMaterial.prototype, "iridescenceIntensity", void 0);
    return MRDLSliderBarMaterial;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PushMaterial));
(0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.MRDLSliderBarMaterial", MRDLSliderBarMaterial);


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/mrdlSliderThumbMaterial.ts":
/*!*************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/mrdlSliderThumbMaterial.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MRDLSliderThumbMaterial: () => (/* binding */ MRDLSliderThumbMaterial)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Materials/materialHelper.functions */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_mrdlSliderThumb_fragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/mrdlSliderThumb.fragment */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.ts");
/* harmony import */ var _shaders_mrdlSliderThumb_vertex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shaders/mrdlSliderThumb.vertex */ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.ts");















/** @internal */
var MRDLSliderThumbMaterialDefines = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLSliderThumbMaterialDefines, _super);
    function MRDLSliderThumbMaterialDefines() {
        var _this = _super.call(this) || this;
        /*
            "SKY_ENABLED", "BLOB_ENABLE_2", "IRIDESCENCE_ENABLED"
        */
        _this.SKY_ENABLED = true;
        _this.BLOB_ENABLE_2 = true;
        _this.IRIDESCENCE_ENABLED = true;
        _this._needNormals = true;
        _this._needUVs = true;
        _this.rebuild();
        return _this;
    }
    return MRDLSliderThumbMaterialDefines;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.MaterialDefines));
/**
 * Class used to render Slider Thumb material with MRDL
 */
var MRDLSliderThumbMaterial = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MRDLSliderThumbMaterial, _super);
    function MRDLSliderThumbMaterial(name, scene) {
        var _this = _super.call(this, name, scene) || this;
        /**
         * Gets or sets the corner Radius on the slider thumb.
         */
        _this.radius = 0.157;
        /**
         * Gets or sets the Bevel Front on the slider thumb.
         */
        _this.bevelFront = 0.065;
        /**
         * Gets or sets the Bevel Front Stretch on the slider thumb.
         */
        _this.bevelFrontStretch = 0.077;
        /**
         * Gets or sets the Bevel Back on the slider thumb.
         */
        _this.bevelBack = 0.031;
        /**
         * Gets or sets the Bevel Back Stretch on the slider thumb.
         */
        _this.bevelBackStretch = 0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusTopLeft = 1.0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusTopRight = 1.0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusBottomLeft = 1.0;
        /**
         * Gets or sets the top left Radii Multiplier.
         */
        _this.radiusBottomRight = 1.0;
        /**
         * Gets or sets whether Bulge is enabled.
         * Default is false.
         */
        _this.bulgeEnabled = false;
        /**
         * Gets or sets the Bulge Height.
         */
        _this.bulgeHeight = -0.323;
        /**
         * Gets or sets the Bulge Radius.
         */
        _this.bulgeRadius = 0.73;
        /**
         * Gets or sets the Sun Intensity.
         */
        _this.sunIntensity = 2;
        /**
         * Gets or sets the Sun Theta.
         */
        _this.sunTheta = 0.937;
        /**
         * Gets or sets the Sun Phi.
         */
        _this.sunPhi = 0.555;
        /**
         * Gets or sets the Indirect Diffuse.
         */
        _this.indirectDiffuse = 1;
        /**
         * Gets or sets the base albedo.
         */
        _this.albedo = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.505882, 0.996078, 1);
        /**
         * Gets or sets the Specular value.
         */
        _this.specular = 0;
        /**
         * Gets or sets the Shininess value.
         */
        _this.shininess = 10;
        /**
         * Gets or sets the Sharpness value.
         */
        _this.sharpness = 0;
        /**
         * Gets or sets the Subsurface value.
         */
        _this.subsurface = 0.31;
        /**
         * Gets or sets the left gradient color.
         */
        _this.leftGradientColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.505882, 0.996078, 1);
        /**
         * Gets or sets the right gradient color.
         */
        _this.rightGradientColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.505882, 0.996078, 1);
        /**
         * Gets or sets the reflection value.
         */
        _this.reflection = 0.749;
        /**
         * Gets or sets the front reflect value.
         */
        _this.frontReflect = 0;
        /**
         * Gets or sets the edge reflect value.
         */
        _this.edgeReflect = 0.09;
        /**
         * Gets or sets the power value.
         */
        _this.power = 8.1;
        /**
         * Gets or sets the sky color.
         */
        _this.skyColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.960784, 0.996078, 1);
        /**
         * Gets or sets the horizon color.
         */
        _this.horizonColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0.0117647, 0.333333, 0.996078, 1);
        /**
         * Gets or sets the ground color.
         */
        _this.groundColor = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Color4(0, 0.254902, 0.996078, 1);
        /**
         * Gets or sets the horizon power value.
         */
        _this.horizonPower = 1;
        /**
         * Gets or sets the finger occlusion width value.
         */
        _this.width = 0.02;
        /**
         * Gets or sets the finger occlusion fuzz value.
         */
        _this.fuzz = 0.5;
        /**
         * Gets or sets the minimum finger occlusion fuzz value.
         */
        _this.minFuzz = 0.001;
        /**
         * Gets or sets the finger occlusion clip fade value.
         */
        _this.clipFade = 0.01;
        /**
         * Gets or sets the hue shift value.
         */
        _this.hueShift = 0;
        /**
         * Gets or sets the saturation shift value.
         */
        _this.saturationShift = 0;
        /**
         * Gets or sets the value shift.
         */
        _this.valueShift = 0;
        /**
         * Gets or sets the position of the hover glow effect.
         */
        _this.blobPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0.1);
        /**
         * Gets or sets the intensity of the hover glow effect.
         */
        _this.blobIntensity = 0.5;
        /**
         * Gets or sets the near size of the hover glow effect.
         */
        _this.blobNearSize = 0.01;
        /**
         * Gets or sets the far size of the hover glow effect.
         */
        _this.blobFarSize = 0.03;
        /**
         * Gets or sets the distance considered "near" to the mesh, which controls the size of the hover glow effect (see blobNearSize).
         */
        _this.blobNearDistance = 0;
        /**
         * Gets or sets the distance considered "far" from the mesh, which controls the size of the hover glow effect (see blobFarSize).
         */
        _this.blobFarDistance = 0.08;
        /**
         * Gets or sets the length of the hover glow effect fade.
         */
        _this.blobFadeLength = 0.576;
        /**
         * Gets or sets the progress of the hover glow effect selection animation corresponding to the left pointer (0.0 - 1.0).
         */
        _this.blobPulse = 0;
        /**
         * Gets or sets the opacity of the hover glow effect corresponding to the left pointer (0.0 - 1.0). Default is 0.
         */
        _this.blobFade = 1;
        /**
         * Gets or sets the position of the hover glow effect.
         */
        _this.blobPosition2 = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0.2, 0, 0.1);
        /**
         * Gets or sets the size of the hover glow effect when the right pointer is considered "near" to the mesh (see blobNearDistance).
         */
        _this.blobNearSize2 = 0.01;
        /**
         * Gets or sets the progress of the hover glow effect selection animation corresponding to the right pointer (0.0 - 1.0).
         */
        _this.blobPulse2 = 0;
        /**
         * Gets or sets the opacity of the hover glow effect corresponding to the right pointer (0.0 - 1.0). Default is 1.
         */
        _this.blobFade2 = 1;
        /**
         * Gets or sets the texture of the hover glow effect.
         */
        _this.blobTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture("", _this.getScene());
        /**
         * Gets or sets the finger position for left index.
         */
        _this.leftIndexPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 1);
        /**
         * Gets or sets the finger position for right index.
         */
        _this.rightIndexPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(-1, -1, -1);
        /**
         * Gets or sets the finger position for left index middle position.
         */
        _this.leftIndexMiddlePosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
        /**
         * Gets or sets the finger position for right index middle position.
         */
        _this.rightIndexMiddlePosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
        /**
         * Gets or sets the Decal Scale for XY.
         */
        _this.decalScaleXY = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector2(1.5, 1.5);
        /**
         * Gets or sets decalFrontOnly
         * Default is true
         */
        _this.decalFrontOnly = true;
        /**
         * Gets or sets the Rim Light intensity.
         */
        _this.rimIntensity = 0.287;
        /**
         * Gets or sets the Rim Light hue shift value.
         */
        _this.rimHueShift = 0;
        /**
         * Gets or sets the Rim Light saturation shift value.
         */
        _this.rimSaturationShift = 0;
        /**
         * Gets or sets the Rim Light value shift.
         */
        _this.rimValueShift = -1;
        /**
         * Gets or sets the intensity of the iridescence effect.
         */
        _this.iridescenceIntensity = 0;
        /**
         * @internal
         */
        _this.useGlobalLeftIndex = 1.0;
        /**
         * @internal
         */
        _this.useGlobalRightIndex = 1.0;
        /**
         * @internal
         */
        _this.globalLeftIndexTipProximity = 0.0;
        /**
         * @internal
         */
        _this.globalRightIndexTipProximity = 0.0;
        /**
         * @internal
         */
        _this.globalLeftIndexTipPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.5, 0.0, -0.55, 1.0);
        /**
         * @internal
         */
        _this.globaRightIndexTipPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.0, 0.0, 0.0, 1.0);
        /**
         * @internal
         */
        _this.globalLeftThumbTipPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.5, 0.0, -0.55, 1.0);
        /**
         * @internal
         */
        _this.globalRightThumbTipPosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.0, 0.0, 0.0, 1.0);
        /**
         * @internal
         */
        _this.globalLeftIndexMiddlePosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.5, 0.0, -0.55, 1.0);
        /**
         * @internal
         */
        _this.globalRightIndexMiddlePosition = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Vector4(0.0, 0.0, 0.0, 1.0);
        _this.alphaMode = babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Constants.ALPHA_DISABLE;
        _this.backFaceCulling = false;
        _this._blueGradientTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture(MRDLSliderThumbMaterial.BLUE_GRADIENT_TEXTURE_URL, scene, true, false, babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture.NEAREST_SAMPLINGMODE);
        _this._decalTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture("", _this.getScene());
        _this._reflectionMapTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture("", _this.getScene());
        _this._indirectEnvTexture = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.Texture("", _this.getScene());
        return _this;
    }
    MRDLSliderThumbMaterial.prototype.needAlphaBlending = function () {
        return false;
    };
    MRDLSliderThumbMaterial.prototype.needAlphaTesting = function () {
        return false;
    };
    MRDLSliderThumbMaterial.prototype.getAlphaTestTexture = function () {
        return null;
    };
    // Methods
    MRDLSliderThumbMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh) {
        var drawWrapper = subMesh._drawWrapper;
        if (this.isFrozen) {
            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady) {
                return true;
            }
        }
        if (!subMesh.materialDefines) {
            subMesh.materialDefines = new MRDLSliderThumbMaterialDefines();
        }
        var defines = subMesh.materialDefines;
        var scene = this.getScene();
        if (this._isReadyForSubMesh(subMesh)) {
            return true;
        }
        var engine = scene.getEngine();
        // Attribs
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareDefinesForAttributes)(mesh, defines, false, false);
        // Get correct effect
        if (defines.isDirty) {
            defines.markAsProcessed();
            scene.resetCachedMaterial();
            // Fallbacks
            var fallbacks = new babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.EffectFallbacks();
            if (defines.FOG) {
                fallbacks.addFallback(1, "FOG");
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.HandleFallbacksForShadows)(defines, fallbacks);
            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;
            //Attributes
            var attribs = [babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.PositionKind];
            if (defines.NORMAL) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.NormalKind);
            }
            if (defines.UV1) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UVKind);
            }
            if (defines.UV2) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.UV2Kind);
            }
            if (defines.VERTEXCOLOR) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.ColorKind);
            }
            if (defines.TANGENT) {
                attribs.push(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.VertexBuffer.TangentKind);
            }
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareAttributesForInstances)(attribs, defines);
            // Legacy browser patch
            var shaderName = "mrdlSliderThumb";
            var join = defines.toString();
            var uniforms = [
                "world",
                "viewProjection",
                "cameraPosition",
                "_Radius_",
                "_Bevel_Front_",
                "_Bevel_Front_Stretch_",
                "_Bevel_Back_",
                "_Bevel_Back_Stretch_",
                "_Radius_Top_Left_",
                "_Radius_Top_Right_",
                "_Radius_Bottom_Left_",
                "_Radius_Bottom_Right_",
                "_Bulge_Enabled_",
                "_Bulge_Height_",
                "_Bulge_Radius_",
                "_Sun_Intensity_",
                "_Sun_Theta_",
                "_Sun_Phi_",
                "_Indirect_Diffuse_",
                "_Albedo_",
                "_Specular_",
                "_Shininess_",
                "_Sharpness_",
                "_Subsurface_",
                "_Left_Color_",
                "_Right_Color_",
                "_Reflection_",
                "_Front_Reflect_",
                "_Edge_Reflect_",
                "_Power_",
                "_Sky_Color_",
                "_Horizon_Color_",
                "_Ground_Color_",
                "_Horizon_Power_",
                "_Reflection_Map_",
                "_Indirect_Environment_",
                "_Width_",
                "_Fuzz_",
                "_Min_Fuzz_",
                "_Clip_Fade_",
                "_Hue_Shift_",
                "_Saturation_Shift_",
                "_Value_Shift_",
                "_Blob_Position_",
                "_Blob_Intensity_",
                "_Blob_Near_Size_",
                "_Blob_Far_Size_",
                "_Blob_Near_Distance_",
                "_Blob_Far_Distance_",
                "_Blob_Fade_Length_",
                "_Blob_Pulse_",
                "_Blob_Fade_",
                "_Blob_Texture_",
                "_Blob_Position_2_",
                "_Blob_Near_Size_2_",
                "_Blob_Pulse_2_",
                "_Blob_Fade_2_",
                "_Left_Index_Pos_",
                "_Right_Index_Pos_",
                "_Left_Index_Middle_Pos_",
                "_Right_Index_Middle_Pos_",
                "_Decal_",
                "_Decal_Scale_XY_",
                "_Decal_Front_Only_",
                "_Rim_Intensity_",
                "_Rim_Texture_",
                "_Rim_Hue_Shift_",
                "_Rim_Saturation_Shift_",
                "_Rim_Value_Shift_",
                "_Iridescence_Intensity_",
                "_Iridescence_Texture_",
                "Use_Global_Left_Index",
                "Use_Global_Right_Index",
                "Global_Left_Index_Tip_Position",
                "Global_Right_Index_Tip_Position",
                "Global_Left_Thumb_Tip_Position",
                "Global_Right_Thumb_Tip_Position",
                "Global_Left_Index_Middle_Position;",
                "Global_Right_Index_Middle_Position",
                "Global_Left_Index_Tip_Proximity",
                "Global_Right_Index_Tip_Proximity",
            ];
            var samplers = ["_Rim_Texture_", "_Iridescence_Texture_"];
            var uniformBuffers = [];
            (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PrepareUniformsAndSamplersList)({
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: defines,
                maxSimultaneousLights: 4,
            });
            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {
                attributes: attribs,
                uniformsNames: uniforms,
                uniformBuffersNames: uniformBuffers,
                samplers: samplers,
                defines: join,
                fallbacks: fallbacks,
                onCompiled: this.onCompiled,
                onError: this.onError,
                indexParameters: { maxSimultaneousLights: 4 },
            }, engine), defines);
        }
        if (!subMesh.effect || !subMesh.effect.isReady()) {
            return false;
        }
        defines._renderId = scene.getRenderId();
        drawWrapper._wasPreviouslyReady = true;
        return true;
    };
    MRDLSliderThumbMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {
        var defines = subMesh.materialDefines;
        if (!defines) {
            return;
        }
        var effect = subMesh.effect;
        if (!effect) {
            return;
        }
        this._activeEffect = effect;
        // Matrices
        this.bindOnlyWorldMatrix(world);
        this._activeEffect.setMatrix("viewProjection", this.getScene().getTransformMatrix());
        this._activeEffect.setVector3("cameraPosition", this.getScene().activeCamera.position);
        // "Round Rect"
        this._activeEffect.setFloat("_Radius_", this.radius);
        this._activeEffect.setFloat("_Bevel_Front_", this.bevelFront);
        this._activeEffect.setFloat("_Bevel_Front_Stretch_", this.bevelFrontStretch);
        this._activeEffect.setFloat("_Bevel_Back_", this.bevelBack);
        this._activeEffect.setFloat("_Bevel_Back_Stretch_", this.bevelBackStretch);
        // "Radii Multipliers"
        this._activeEffect.setFloat("_Radius_Top_Left_", this.radiusTopLeft);
        this._activeEffect.setFloat("_Radius_Top_Right_", this.radiusTopRight);
        this._activeEffect.setFloat("_Radius_Bottom_Left_", this.radiusBottomLeft);
        this._activeEffect.setFloat("_Radius_Bottom_Right_", this.radiusBottomRight);
        // "Bulge"
        this._activeEffect.setFloat("_Bulge_Enabled_", this.bulgeEnabled ? 1.0 : 0.0);
        this._activeEffect.setFloat("_Bulge_Height_", this.bulgeHeight);
        this._activeEffect.setFloat("_Bulge_Radius_", this.bulgeRadius);
        // "Sun"
        this._activeEffect.setFloat("_Sun_Intensity_", this.sunIntensity);
        this._activeEffect.setFloat("_Sun_Theta_", this.sunTheta);
        this._activeEffect.setFloat("_Sun_Phi_", this.sunPhi);
        this._activeEffect.setFloat("_Indirect_Diffuse_", this.indirectDiffuse);
        // "Diffuse And Specular"
        this._activeEffect.setDirectColor4("_Albedo_", this.albedo);
        this._activeEffect.setFloat("_Specular_", this.specular);
        this._activeEffect.setFloat("_Shininess_", this.shininess);
        this._activeEffect.setFloat("_Sharpness_", this.sharpness);
        this._activeEffect.setFloat("_Subsurface_", this.subsurface);
        // "Gradient"
        this._activeEffect.setDirectColor4("_Left_Color_", this.leftGradientColor);
        this._activeEffect.setDirectColor4("_Right_Color_", this.rightGradientColor);
        // "Reflection"
        this._activeEffect.setFloat("_Reflection_", this.reflection);
        this._activeEffect.setFloat("_Front_Reflect_", this.frontReflect);
        this._activeEffect.setFloat("_Edge_Reflect_", this.edgeReflect);
        this._activeEffect.setFloat("_Power_", this.power);
        // "Sky Environment"
        //define SKY_ENABLED true;
        this._activeEffect.setDirectColor4("_Sky_Color_", this.skyColor);
        this._activeEffect.setDirectColor4("_Horizon_Color_", this.horizonColor);
        this._activeEffect.setDirectColor4("_Ground_Color_", this.groundColor);
        this._activeEffect.setFloat("_Horizon_Power_", this.horizonPower);
        // "Mapped Environment"
        //define ENV_ENABLE false;
        this._activeEffect.setTexture("_Reflection_Map_", this._reflectionMapTexture);
        this._activeEffect.setTexture("_Indirect_Environment_", this._indirectEnvTexture);
        // "FingerOcclusion"
        //define OCCLUSION_ENABLED false;
        this._activeEffect.setFloat("_Width_", this.width);
        this._activeEffect.setFloat("_Fuzz_", this.fuzz);
        this._activeEffect.setFloat("_Min_Fuzz_", this.minFuzz);
        this._activeEffect.setFloat("_Clip_Fade_", this.clipFade);
        // "View Based Color Shift"
        this._activeEffect.setFloat("_Hue_Shift_", this.hueShift);
        this._activeEffect.setFloat("_Saturation_Shift_", this.saturationShift);
        this._activeEffect.setFloat("_Value_Shift_", this.valueShift);
        // "Blob"
        //define BLOB_ENABLE false;
        this._activeEffect.setVector3("_Blob_Position_", this.blobPosition);
        this._activeEffect.setFloat("_Blob_Intensity_", this.blobIntensity);
        this._activeEffect.setFloat("_Blob_Near_Size_", this.blobNearSize);
        this._activeEffect.setFloat("_Blob_Far_Size_", this.blobFarSize);
        this._activeEffect.setFloat("_Blob_Near_Distance_", this.blobNearDistance);
        this._activeEffect.setFloat("_Blob_Far_Distance_", this.blobFarDistance);
        this._activeEffect.setFloat("_Blob_Fade_Length_", this.blobFadeLength);
        this._activeEffect.setFloat("_Blob_Pulse_", this.blobPulse);
        this._activeEffect.setFloat("_Blob_Fade_", this.blobFade);
        // "Blob Texture"
        this._activeEffect.setTexture("_Blob_Texture_", this.blobTexture);
        // "Blob 2"
        //define BLOB_ENABLE_2 true;
        this._activeEffect.setVector3("_Blob_Position_2_", this.blobPosition2);
        this._activeEffect.setFloat("_Blob_Near_Size_2_", this.blobNearSize2);
        this._activeEffect.setFloat("_Blob_Pulse_2_", this.blobPulse2);
        this._activeEffect.setFloat("_Blob_Fade_2_", this.blobFade2);
        // "Finger Positions"
        this._activeEffect.setVector3("_Left_Index_Pos_", this.leftIndexPosition);
        this._activeEffect.setVector3("_Right_Index_Pos_", this.rightIndexPosition);
        this._activeEffect.setVector3("_Left_Index_Middle_Pos_", this.leftIndexMiddlePosition);
        this._activeEffect.setVector3("_Right_Index_Middle_Pos_", this.rightIndexMiddlePosition);
        // "Decal Texture"
        //define DECAL_ENABLE false;
        this._activeEffect.setTexture("_Decal_", this._decalTexture);
        this._activeEffect.setVector2("_Decal_Scale_XY_", this.decalScaleXY);
        this._activeEffect.setFloat("_Decal_Front_Only_", this.decalFrontOnly ? 1.0 : 0.0);
        // "Rim Light"
        this._activeEffect.setFloat("_Rim_Intensity_", this.rimIntensity);
        this._activeEffect.setTexture("_Rim_Texture_", this._blueGradientTexture);
        this._activeEffect.setFloat("_Rim_Hue_Shift_", this.rimHueShift);
        this._activeEffect.setFloat("_Rim_Saturation_Shift_", this.rimSaturationShift);
        this._activeEffect.setFloat("_Rim_Value_Shift_", this.rimValueShift);
        // "Iridescence"
        //define IRIDESCENCE_ENABLED true;
        this._activeEffect.setFloat("_Iridescence_Intensity_", this.iridescenceIntensity);
        this._activeEffect.setTexture("_Iridescence_Texture_", this._blueGradientTexture);
        // Global inputs
        this._activeEffect.setFloat("Use_Global_Left_Index", this.useGlobalLeftIndex);
        this._activeEffect.setFloat("Use_Global_Right_Index", this.useGlobalRightIndex);
        this._activeEffect.setVector4("Global_Left_Index_Tip_Position", this.globalLeftIndexTipPosition);
        this._activeEffect.setVector4("Global_Right_Index_Tip_Position", this.globaRightIndexTipPosition);
        this._activeEffect.setVector4("Global_Left_Thumb_Tip_Position", this.globalLeftThumbTipPosition);
        this._activeEffect.setVector4("Global_Right_Thumb_Tip_Position", this.globalRightThumbTipPosition);
        this._activeEffect.setVector4("Global_Left_Index_Middle_Position", this.globalLeftIndexMiddlePosition);
        this._activeEffect.setVector4("Global_Right_Index_Middle_Position", this.globalRightIndexMiddlePosition);
        this._activeEffect.setFloat("Global_Left_Index_Tip_Proximity", this.globalLeftIndexTipProximity);
        this._activeEffect.setFloat("Global_Right_Index_Tip_Proximity", this.globalRightIndexTipProximity);
        this._afterBind(mesh, this._activeEffect, subMesh);
    };
    /**
     * Get the list of animatables in the material.
     * @returns the list of animatables object used in the material
     */
    MRDLSliderThumbMaterial.prototype.getAnimatables = function () {
        return [];
    };
    MRDLSliderThumbMaterial.prototype.dispose = function (forceDisposeEffect) {
        _super.prototype.dispose.call(this, forceDisposeEffect);
        this._reflectionMapTexture.dispose();
        this._indirectEnvTexture.dispose();
        this._blueGradientTexture.dispose();
        this._decalTexture.dispose();
    };
    MRDLSliderThumbMaterial.prototype.clone = function (name) {
        var _this = this;
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Clone(function () { return new MRDLSliderThumbMaterial(name, _this.getScene()); }, this);
    };
    MRDLSliderThumbMaterial.prototype.serialize = function () {
        var serializationObject = _super.prototype.serialize.call(this);
        serializationObject.customType = "BABYLON.MRDLSliderThumbMaterial";
        return serializationObject;
    };
    MRDLSliderThumbMaterial.prototype.getClassName = function () {
        return "MRDLSliderThumbMaterial";
    };
    // Statics
    MRDLSliderThumbMaterial.Parse = function (source, scene, rootUrl) {
        return babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.SerializationHelper.Parse(function () { return new MRDLSliderThumbMaterial(source.name, scene); }, source, scene, rootUrl);
    };
    /**
     * URL pointing to the texture used to define the coloring for the Iridescent Map effect.
     */
    MRDLSliderThumbMaterial.BLUE_GRADIENT_TEXTURE_URL = "https://assets.babylonjs.com/meshes/MRTK/MRDL/mrtk-mrdl-blue-gradient.png";
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "radius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "bevelFront", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "bevelFrontStretch", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "bevelBack", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "bevelBackStretch", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "radiusTopLeft", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "radiusTopRight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "radiusBottomLeft", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "radiusBottomRight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "bulgeEnabled", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "bulgeHeight", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "bulgeRadius", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "sunIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "sunTheta", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "sunPhi", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "indirectDiffuse", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "albedo", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "specular", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "shininess", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "sharpness", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "subsurface", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "leftGradientColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "rightGradientColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "reflection", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "frontReflect", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "edgeReflect", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "power", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "skyColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "horizonColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "groundColor", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "horizonPower", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "width", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "fuzz", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "minFuzz", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "clipFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "hueShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "saturationShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "valueShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobNearSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobFarSize", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobNearDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobFarDistance", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobFadeLength", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobPulse", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobFade", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobPosition2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobNearSize2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobPulse2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobFade2", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "blobTexture", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "leftIndexPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "rightIndexPosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "leftIndexMiddlePosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "rightIndexMiddlePosition", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "decalScaleXY", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "decalFrontOnly", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "rimIntensity", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "rimHueShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "rimSaturationShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "rimValueShift", void 0);
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
        (0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.serialize)()
    ], MRDLSliderThumbMaterial.prototype, "iridescenceIntensity", void 0);
    return MRDLSliderThumbMaterial;
}(babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.PushMaterial));
(0,babylonjs_Misc_decorators__WEBPACK_IMPORTED_MODULE_0__.RegisterClass)("BABYLON.GUI.MRDLSliderThumbMaterial", MRDLSliderThumbMaterial);


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.fragment.ts":
/*!*******************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.fragment.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlBackglowPixelShader: () => (/* binding */ mrdlBackglowPixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlBackglowPixelShader";
var shader = "uniform vec3 cameraPosition;varying vec3 vNormal;varying vec2 vUV;uniform float _Bevel_Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Tuning_Motion_;uniform float _Motion_;uniform float _Max_Intensity_;uniform float _Intensity_Fade_In_Exponent_;uniform float _Outer_Fuzz_Start_;uniform float _Outer_Fuzz_End_;uniform vec4 _Color_;uniform vec4 _Inner_Color_;uniform float _Blend_Exponent_;uniform float _Falloff_;uniform float _Bias_;float BiasFunc(float b,float v) {return pow(v,log(clamp(b,0.001,0.999))/log(0.5));}\nvoid Fuzzy_Round_Rect_B33(\nfloat Size_X,\nfloat Size_Y,\nfloat Radius_X,\nfloat Radius_Y,\nfloat Line_Width,\nvec2 UV,\nfloat Outer_Fuzz,\nfloat Max_Outer_Fuzz,\nout float Rect_Distance,\nout float Inner_Distance)\n{vec2 halfSize=vec2(Size_X,Size_Y)*0.5;vec2 r=max(min(vec2(Radius_X,Radius_Y),halfSize),vec2(0.001,0.001));float radius=min(r.x,r.y)-Max_Outer_Fuzz;vec2 v=abs(UV);vec2 nearestp=min(v,halfSize-r);float d=distance(nearestp,v);Inner_Distance=clamp(1.0-(radius-d)/Line_Width,0.0,1.0);Rect_Distance=clamp(1.0-(d-radius)/Outer_Fuzz,0.0,1.0)*Inner_Distance;}\nvoid main()\n{float X_Q42;float Y_Q42;X_Q42=vNormal.x;Y_Q42=vNormal.y;float MaxAB_Q24=max(_Tuning_Motion_,_Motion_);float Sqrt_F_Q27=sqrt(MaxAB_Q24);float Power_Q43=pow(MaxAB_Q24,_Intensity_Fade_In_Exponent_);float Value_At_T_Q26=mix(_Outer_Fuzz_Start_,_Outer_Fuzz_End_,Sqrt_F_Q27);float Product_Q23=_Max_Intensity_*Power_Q43;float Rect_Distance_Q33;float Inner_Distance_Q33;Fuzzy_Round_Rect_B33(X_Q42,Y_Q42,_Bevel_Radius_,_Bevel_Radius_,_Line_Width_,vUV,Value_At_T_Q26,_Outer_Fuzz_Start_,Rect_Distance_Q33,Inner_Distance_Q33);float Power_Q44=pow(Inner_Distance_Q33,_Blend_Exponent_);float Result_Q45=pow(BiasFunc(_Bias_,Rect_Distance_Q33),_Falloff_);vec4 Color_At_T_Q25=mix(_Inner_Color_,_Color_,Power_Q44);float Product_Q22=Result_Q45*Product_Q23;vec4 Result_Q28=Product_Q22*Color_At_T_Q25;vec4 Out_Color=Result_Q28;float Clip_Threshold=0.0;gl_FragColor=Out_Color;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlBackglowPixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.vertex.ts":
/*!*****************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackglow.vertex.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlBackglowVertexShader: () => (/* binding */ mrdlBackglowVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlBackglowVertexShader";
var shader = "uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;uniform float _Bevel_Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Tuning_Motion_;uniform float _Motion_;uniform float _Max_Intensity_;uniform float _Intensity_Fade_In_Exponent_;uniform float _Outer_Fuzz_Start_;uniform float _Outer_Fuzz_End_;uniform vec4 _Color_;uniform vec4 _Inner_Color_;uniform float _Blend_Exponent_;uniform float _Falloff_;uniform float _Bias_;varying vec3 vNormal;varying vec2 vUV;void main()\n{vec3 Dir_World_Q41=(world*vec4(tangent,0.0)).xyz;vec3 Dir_World_Q40=(world*vec4((cross(normal,tangent)),0.0)).xyz;float MaxAB_Q24=max(_Tuning_Motion_,_Motion_);float Length_Q16=length(Dir_World_Q41);float Length_Q17=length(Dir_World_Q40);bool Greater_Than_Q37=MaxAB_Q24>0.0;vec3 Sizes_Q35;vec2 XY_Q35;Sizes_Q35=(_Absolute_Sizes_ ? vec3(Length_Q16,Length_Q17,0) : vec3(Length_Q16/Length_Q17,1,0));XY_Q35=(uv-vec2(0.5,0.5))*Sizes_Q35.xy;vec3 Result_Q38=Greater_Than_Q37 ? position : vec3(0,0,0);vec3 Pos_World_Q39=(world*vec4(Result_Q38,1.0)).xyz;vec3 Position=Pos_World_Q39;vec3 Normal=Sizes_Q35;vec2 UV=XY_Q35;vec3 Tangent=vec3(0,0,0);vec3 Binormal=vec3(0,0,0);vec4 Color=vec4(1,1,1,1);gl_Position=viewProjection*vec4(Position,1);vNormal=Normal;vUV=UV;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlBackglowVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.fragment.ts":
/*!********************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.fragment.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlBackplatePixelShader: () => (/* binding */ mrdlBackplatePixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlBackplatePixelShader";
var shader = "uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vExtra1;varying vec4 vExtra2;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform vec4 _Iridescence_Tint_;uniform sampler2D _Iridescent_Map_;uniform float _Angle_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform vec4 _Gradient_Color_;uniform vec4 _Top_Left_;uniform vec4 _Top_Right_;uniform vec4 _Bottom_Left_;uniform vec4 _Bottom_Right_;uniform float _Edge_Width_;uniform float _Edge_Power_;uniform float _Line_Gradient_Blend_;uniform float _Fade_Out_;void FastLinearTosRGB_B353(\nvec4 Linear,\nout vec4 sRGB)\n{sRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));sRGB.a=Linear.a;}\nvoid Round_Rect_Fragment_B332(\nfloat Radius,\nfloat Line_Width,\nvec4 Line_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Line_Visibility,\nvec4 Rect_Parms,\nvec4 Fill_Color,\nout vec4 Color)\n{float d=length(max(abs(UV)-Rect_Parms.xy,0.0));float dx=max(fwidth(d)*Filter_Width,0.00001);float g=min(Rect_Parms.z,Rect_Parms.w);float dgrad=max(fwidth(g)*Filter_Width,0.00001);float Inside_Rect=clamp(g/dgrad,0.0,1.0);float inner=clamp((d+dx*0.5-max(Radius-Line_Width,d-dx*0.5))/dx,0.0,1.0);Color=clamp(mix(Fill_Color,Line_Color,inner),0.0,1.0)*Inside_Rect;}\nvoid Iridescence_B343(\nvec3 Position,\nvec3 Normal,\nvec2 UV,\nvec3 Axis,\nvec3 Eye,\nvec4 Tint,\nsampler2D Texture,\nbool Reflected,\nfloat Frequency,\nfloat Vertical_Offset,\nout vec4 Color)\n{vec3 i=normalize(Position-Eye);vec3 r=reflect(i,Normal);float idota=dot(i,Axis);float idotr=dot(i,r);float x=Reflected ? idotr : idota;vec2 xy;xy.x=fract((x*Frequency+1.0)*0.5+UV.y*Vertical_Offset);xy.y=0.5;Color=texture(Texture,xy);Color.rgb*=Tint.rgb;}\nvoid Scale_RGB_B346(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Scale_RGB_B344(\nfloat Scalar,\nvec4 Color,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Line_Fragment_B362(\nvec4 Base_Color,\nvec4 Highlight_Color,\nfloat Highlight_Width,\nvec3 Line_Vertex,\nfloat Highlight,\nout vec4 Line_Color)\n{float k2=1.0-clamp(abs(Line_Vertex.y/Highlight_Width),0.0,1.0);Line_Color=mix(Base_Color,Highlight_Color,Highlight*k2);}\nvoid Edge_B356(\nvec4 RectParms,\nfloat Radius,\nfloat Line_Width,\nvec2 UV,\nfloat Edge_Width,\nfloat Edge_Power,\nout float Result)\n{float d=length(max(abs(UV)-RectParms.xy,0.0));float edge=1.0-clamp((1.0-d/(Radius-Line_Width))/Edge_Width,0.0,1.0);Result=pow(edge,Edge_Power);}\nvoid Gradient_B355(\nvec4 Gradient_Color,\nvec4 Top_Left,\nvec4 Top_Right,\nvec4 Bottom_Left,\nvec4 Bottom_Right,\nvec2 UV,\nout vec4 Result)\n{vec3 top=Top_Left.rgb+(Top_Right.rgb-Top_Left.rgb)*UV.x;vec3 bottom=Bottom_Left.rgb+(Bottom_Right.rgb-Bottom_Left.rgb)*UV.x;Result.rgb=Gradient_Color.rgb*(bottom+(top-bottom)*UV.y);Result.a=1.0;}\nvoid main()\n{float X_Q338;float Y_Q338;float Z_Q338;float W_Q338;X_Q338=vExtra2.x;Y_Q338=vExtra2.y;Z_Q338=vExtra2.z;W_Q338=vExtra2.w;vec4 Color_Q343;\n#if IRIDESCENCE_ENABLE\nIridescence_B343(vPosition,vNormal,vUV,vBinormal,cameraPosition,_Iridescence_Tint_,_Iridescent_Map_,_Reflected_,_Frequency_,_Vertical_Offset_,Color_Q343);\n#else\nColor_Q343=vec4(0,0,0,0);\n#endif\nvec4 Result_Q344;Scale_RGB_B344(_Iridescence_Intensity_,Color_Q343,Result_Q344);vec4 Line_Color_Q362;Line_Fragment_B362(_Line_Color_,_Highlight_Color_,_Highlight_Width_,vTangent,_Highlight_,Line_Color_Q362);float Result_Q356;\n#if EDGE_ONLY\nEdge_B356(vExtra1,Z_Q338,W_Q338,vUV,_Edge_Width_,_Edge_Power_,Result_Q356);\n#else\nResult_Q356=1.0;\n#endif\nvec2 Vec2_Q339=vec2(X_Q338,Y_Q338);vec4 Result_Q355;Gradient_B355(_Gradient_Color_,_Top_Left_,_Top_Right_,_Bottom_Left_,_Bottom_Right_,Vec2_Q339,Result_Q355);vec4 Linear_Q348;Linear_Q348.rgb=clamp(Result_Q355.rgb*Result_Q355.rgb,0.0,1.0);Linear_Q348.a=Result_Q355.a;vec4 Result_Q346;Scale_RGB_B346(Linear_Q348,Result_Q356,Result_Q346);vec4 Sum_Q345=Result_Q346+Result_Q344;vec4 Color_At_T_Q347=mix(Line_Color_Q362,Result_Q346,_Line_Gradient_Blend_);vec4 Base_And_Iridescent_Q350;Base_And_Iridescent_Q350=_Base_Color_+vec4(Sum_Q345.rgb,0.0);vec4 Sum_Q349=Color_At_T_Q347+_Iridescence_Edge_Intensity_*Color_Q343;vec4 Result_Q351=Sum_Q349; Result_Q351.a=1.0;vec4 Color_Q332;Round_Rect_Fragment_B332(Z_Q338,W_Q338,Result_Q351,_Filter_Width_,vUV,1.0,vExtra1,Base_And_Iridescent_Q350,Color_Q332);vec4 Result_Q354=_Fade_Out_*Color_Q332;vec4 sRGB_Q353;FastLinearTosRGB_B353(Result_Q354,sRGB_Q353);vec4 Out_Color=sRGB_Q353;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlBackplatePixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.vertex.ts":
/*!******************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlBackplate.vertex.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlBackplateVertexShader: () => (/* binding */ mrdlBackplateVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlBackplateVertexShader";
var shader = "uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec3 tangent;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Absolute_Sizes_;uniform float _Filter_Width_;uniform vec4 _Base_Color_;uniform vec4 _Line_Color_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform float _Rate_;uniform vec4 _Highlight_Color_;uniform float _Highlight_Width_;uniform vec4 _Highlight_Transform_;uniform float _Highlight_;uniform float _Iridescence_Intensity_;uniform float _Iridescence_Edge_Intensity_;uniform vec4 _Iridescence_Tint_;uniform sampler2D _Iridescent_Map_;uniform float _Angle_;uniform bool _Reflected_;uniform float _Frequency_;uniform float _Vertical_Offset_;uniform vec4 _Gradient_Color_;uniform vec4 _Top_Left_;uniform vec4 _Top_Right_;uniform vec4 _Bottom_Left_;uniform vec4 _Bottom_Right_;uniform float _Edge_Width_;uniform float _Edge_Power_;uniform float _Line_Gradient_Blend_;uniform float _Fade_Out_;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vExtra1;varying vec4 vExtra2;void Object_To_World_Pos_B314(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Round_Rect_Vertex_B357(\nvec2 UV,\nfloat Radius,\nfloat Margin,\nfloat Anisotropy,\nfloat Gradient1,\nfloat Gradient2,\nvec3 Normal,\nvec4 Color_Scale_Translate,\nout vec2 Rect_UV,\nout vec4 Rect_Parms,\nout vec2 Scale_XY,\nout vec2 Line_UV,\nout vec2 Color_UV_Info)\n{Scale_XY=vec2(Anisotropy,1.0);Line_UV=(UV-vec2(0.5,0.5));Rect_UV=Line_UV*Scale_XY;Rect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius)-vec2(Margin,Margin);Rect_Parms.z=Gradient1; \nRect_Parms.w=Gradient2;Color_UV_Info=(Line_UV+vec2(0.5,0.5))*Color_Scale_Translate.xy+Color_Scale_Translate.zw;}\nvoid Line_Vertex_B333(\nvec2 Scale_XY,\nvec2 UV,\nfloat Time,\nfloat Rate,\nvec4 Highlight_Transform,\nout vec3 Line_Vertex)\n{float angle2=(Rate*Time)*2.0*3.1416;float sinAngle2=sin(angle2);float cosAngle2=cos(angle2);vec2 xformUV=UV*Highlight_Transform.xy+Highlight_Transform.zw;Line_Vertex.x=0.0;Line_Vertex.y=cosAngle2*xformUV.x-sinAngle2*xformUV.y;Line_Vertex.z=0.0; }\nvoid PickDir_B334(\nfloat Degrees,\nvec3 DirX,\nvec3 DirY,\nout vec3 Dir)\n{float a=Degrees*3.14159/180.0;Dir=cos(a)*DirX+sin(a)*DirY;}\nvoid Move_Verts_B327(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);New_UV=center+r2*(UV-2.0*center+0.5);New_P=vec3(New_UV-0.5,P.z);Radial_Gradient=1.0-length(delta)*2.0;Radial_Dir=vec3(delta*r2,0.0);}\nvoid Pick_Radius_B336(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid Edge_AA_Vertex_B328(\nvec3 Position_World,\nvec3 Position_Object,\nvec3 Normal_Object,\nvec3 Eye,\nfloat Radial_Gradient,\nvec3 Radial_Dir,\nvec3 Tangent,\nout float Gradient1,\nout float Gradient2)\n{vec3 I=(Eye-Position_World);vec3 T=(vec4(Tangent,0.0)).xyz;float g=(dot(T,I)<0.0) ? 0.0 : 1.0;if (Normal_Object.z==0.0) { \nGradient1=Position_Object.z>0.0 ? g : 1.0;Gradient2=Position_Object.z>0.0 ? 1.0 : g;} else {Gradient1=g+(1.0-g)*(Radial_Gradient);Gradient2=1.0;}}\nvoid Object_To_World_Dir_B330(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid RelativeOrAbsoluteDetail_B341(\nfloat Nominal_Radius,\nfloat Nominal_LineWidth,\nbool Absolute_Measurements,\nfloat Height,\nout float Radius,\nout float Line_Width)\n{float scale=Absolute_Measurements ? 1.0/Height : 1.0;Radius=Nominal_Radius*scale;Line_Width=Nominal_LineWidth*scale;}\nvoid main()\n{vec3 Nrm_World_Q326;Nrm_World_Q326=normalize((world*vec4(normal,0.0)).xyz);vec3 Tangent_World_Q329;vec3 Tangent_World_N_Q329;float Tangent_Length_Q329;Tangent_World_Q329=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q329=length(Tangent_World_Q329);Tangent_World_N_Q329=Tangent_World_Q329/Tangent_Length_Q329;vec3 Binormal_World_Q330;vec3 Binormal_World_N_Q330;float Binormal_Length_Q330;Object_To_World_Dir_B330(vec3(0,1,0),Binormal_World_Q330,Binormal_World_N_Q330,Binormal_Length_Q330);float Radius_Q341;float Line_Width_Q341;RelativeOrAbsoluteDetail_B341(_Radius_,_Line_Width_,_Absolute_Sizes_,Binormal_Length_Q330,Radius_Q341,Line_Width_Q341);vec3 Dir_Q334;PickDir_B334(_Angle_,Tangent_World_N_Q329,Binormal_World_N_Q330,Dir_Q334);float Result_Q336;Pick_Radius_B336(Radius_Q341,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q336);float Anisotropy_Q331=Tangent_Length_Q329/Binormal_Length_Q330;vec4 Out_Color_Q337=vec4(Result_Q336,Line_Width_Q341,0,1);vec3 New_P_Q327;vec2 New_UV_Q327;float Radial_Gradient_Q327;vec3 Radial_Dir_Q327;Move_Verts_B327(Anisotropy_Q331,position,Result_Q336,New_P_Q327,New_UV_Q327,Radial_Gradient_Q327,Radial_Dir_Q327);vec3 Pos_World_Q314;Object_To_World_Pos_B314(New_P_Q327,Pos_World_Q314);float Gradient1_Q328;float Gradient2_Q328;\n#if SMOOTH_EDGES\nEdge_AA_Vertex_B328(Pos_World_Q314,position,normal,cameraPosition,Radial_Gradient_Q327,Radial_Dir_Q327,tangent,Gradient1_Q328,Gradient2_Q328);\n#else\nGradient1_Q328=1.0;Gradient2_Q328=1.0;\n#endif\nvec2 Rect_UV_Q357;vec4 Rect_Parms_Q357;vec2 Scale_XY_Q357;vec2 Line_UV_Q357;vec2 Color_UV_Info_Q357;Round_Rect_Vertex_B357(New_UV_Q327,Result_Q336,0.0,Anisotropy_Q331,Gradient1_Q328,Gradient2_Q328,normal,vec4(1,1,0,0),Rect_UV_Q357,Rect_Parms_Q357,Scale_XY_Q357,Line_UV_Q357,Color_UV_Info_Q357);vec3 Line_Vertex_Q333;Line_Vertex_B333(Scale_XY_Q357,Line_UV_Q357,(20.0),_Rate_,_Highlight_Transform_,Line_Vertex_Q333);float X_Q359;float Y_Q359;X_Q359=Color_UV_Info_Q357.x;Y_Q359=Color_UV_Info_Q357.y;vec4 Vec4_Q358=vec4(X_Q359,Y_Q359,Result_Q336,Line_Width_Q341);vec3 Position=Pos_World_Q314;vec3 Normal=Nrm_World_Q326;vec2 UV=Rect_UV_Q357;vec3 Tangent=Line_Vertex_Q333;vec3 Binormal=Dir_Q334;vec4 Color=Out_Color_Q337;vec4 Extra1=Rect_Parms_Q357;vec4 Extra2=Vec4_Q358;vec4 Extra3=vec4(0,0,0,0);gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vExtra1=Extra1;vExtra2=Extra2;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlBackplateVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.fragment.ts":
/*!*********************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.fragment.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlFrontplatePixelShader: () => (/* binding */ mrdlFrontplatePixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlFrontplatePixelShader";
var shader = "uniform vec3 cameraPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Relative_To_Height_;uniform float _Filter_Width_;uniform vec4 _Edge_Color_;uniform float _Fade_Out_;uniform bool _Smooth_Edges_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform float _Blob_Pulse_Max_Size_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Gaze_Intensity_;uniform float _Gaze_Focus_;uniform sampler2D _Blob_Texture_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;void Scale_Color_B54(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=Scalar*Color;}\nvoid Scale_RGB_B50(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Proximity_Fragment_B51(\nfloat Proximity_Max_Intensity,\nfloat Proximity_Near_Radius,\nvec4 Deltas,\nfloat Show_Selection,\nfloat Distance_Fade1,\nfloat Distance_Fade2,\nfloat Strength,\nout float Proximity)\n{float proximity1=(1.0-clamp(length(Deltas.xy)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade1;float proximity2=(1.0-clamp(length(Deltas.zw)/Proximity_Near_Radius,0.0,1.0))*Distance_Fade2;Proximity=Strength*(Proximity_Max_Intensity*max(proximity1,proximity2) *(1.0-Show_Selection)+Show_Selection);}\nvoid Blob_Fragment_B56(\nvec2 UV,\nvec3 Blob_Info,\nsampler2D Blob_Texture,\nout vec4 Blob_Color)\n{float k=dot(UV,UV);Blob_Color=Blob_Info.y*texture(Blob_Texture,vec2(vec2(sqrt(k),Blob_Info.x).x,1.0-vec2(sqrt(k),Blob_Info.x).y))*(1.0-clamp(k,0.0,1.0));}\nvoid Round_Rect_Fragment_B61(\nfloat Radius,\nvec4 Line_Color,\nfloat Filter_Width,\nfloat Line_Visibility,\nvec4 Fill_Color,\nbool Smooth_Edges,\nvec4 Rect_Parms,\nout float Inside_Rect)\n{float d=length(max(abs(Rect_Parms.zw)-Rect_Parms.xy,0.0));float dx=max(fwidth(d)*Filter_Width,0.00001);Inside_Rect=Smooth_Edges ? clamp((Radius-d)/dx,0.0,1.0) : 1.0-step(Radius,d);}\nvoid main()\n{float Is_Quad_Q53;Is_Quad_Q53=vNormal.z;vec4 Blob_Color_Q56;Blob_Fragment_B56(vUV,vTangent,_Blob_Texture_,Blob_Color_Q56);float X_Q52;float Y_Q52;float Z_Q52;float W_Q52;X_Q52=vExtra3.x;Y_Q52=vExtra3.y;Z_Q52=vExtra3.z;W_Q52=vExtra3.w;float Proximity_Q51;Proximity_Fragment_B51(_Proximity_Max_Intensity_,_Proximity_Near_Radius_,vExtra2,X_Q52,Y_Q52,Z_Q52,1.0,Proximity_Q51);float Inside_Rect_Q61;Round_Rect_Fragment_B61(W_Q52,vec4(1,1,1,1),_Filter_Width_,1.0,vec4(0,0,0,0),_Smooth_Edges_,vExtra1,Inside_Rect_Q61);vec4 Result_Q50;Scale_RGB_B50(_Edge_Color_,Proximity_Q51,Result_Q50);vec4 Result_Q47=Inside_Rect_Q61*Blob_Color_Q56;vec4 Color_At_T_Q48=mix(Result_Q50,Result_Q47,Is_Quad_Q53);vec4 Result_Q54;Scale_Color_B54(Color_At_T_Q48,_Fade_Out_,Result_Q54);vec4 Out_Color=Result_Q54;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlFrontplatePixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.vertex.ts":
/*!*******************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlFrontplate.vertex.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlFrontplateVertexShader: () => (/* binding */ mrdlFrontplateVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlFrontplateVertexShader";
var shader = "uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;attribute vec4 color;uniform float _Radius_;uniform float _Line_Width_;uniform bool _Relative_To_Height_;uniform float _Filter_Width_;uniform vec4 _Edge_Color_;uniform float _Fade_Out_;uniform bool _Smooth_Edges_;uniform bool _Blob_Enable_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Inner_Fade_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform float _Blob_Pulse_Max_Size_;uniform bool _Blob_Enable_2_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Inner_Fade_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform float _Gaze_Intensity_;uniform float _Gaze_Focus_;uniform sampler2D _Blob_Texture_;uniform float _Selection_Fuzz_;uniform float _Selected_;uniform float _Selection_Fade_;uniform float _Selection_Fade_Size_;uniform float _Selected_Distance_;uniform float _Selected_Fade_Length_;uniform float _Proximity_Max_Intensity_;uniform float _Proximity_Far_Distance_;uniform float _Proximity_Near_Radius_;uniform float _Proximity_Anisotropy_;uniform bool _Use_Global_Left_Index_;uniform bool _Use_Global_Right_Index_;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Blob_Vertex_B40(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nvec4 Vx_Color,\nvec2 UV,\nvec3 Face_Center,\nvec2 Face_Size,\nvec2 In_UV,\nfloat Blob_Fade_Length,\nfloat Selection_Fade,\nfloat Selection_Fade_Size,\nfloat Inner_Fade,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nfloat Blob_Enabled,\nfloat DistanceOffset,\nout vec3 Out_Position,\nout vec2 Out_UV,\nout vec3 Blob_Info,\nout vec2 Blob_Relative_UV)\n{float blobSize,fadeIn;vec3 Hit_Position;Blob_Info=vec3(0.0,0.0,0.0);float Hit_Distance=dot(Blob_Position-Face_Center,Normal)+DistanceOffset*Blob_Far_Distance;Hit_Position=Blob_Position-Hit_Distance*Normal;float absD=abs(Hit_Distance);float lerpVal=clamp((absD-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);fadeIn=1.0-clamp((absD-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float innerFade=1.0-clamp(-Hit_Distance/Inner_Fade,0.0,1.0);float farClip=clamp(1.0-step(Blob_Far_Distance+Blob_Fade_Length,absD),0.0,1.0);float size=mix(Blob_Near_Size,Blob_Far_Size,lerpVal)*farClip;blobSize=mix(size,Selection_Fade_Size,Selection_Fade)*innerFade*Blob_Enabled;Blob_Info.x=lerpVal*0.5+0.5;Blob_Info.y=fadeIn*Intensity*(1.0-Selection_Fade)*Blob_Fade;Blob_Info.x*=(1.0-Blob_Pulse);vec3 delta=Hit_Position-Face_Center;vec2 blobCenterXY=vec2(dot(delta,Tangent),dot(delta,Bitangent));vec2 quadUVin=2.0*UV-1.0; \nvec2 blobXY=blobCenterXY+quadUVin*blobSize;vec2 blobClipped=clamp(blobXY,-Face_Size*0.5,Face_Size*0.5);vec2 blobUV=(blobClipped-blobCenterXY)/max(blobSize,0.0001)*2.0;vec3 blobCorner=Face_Center+blobClipped.x*Tangent+blobClipped.y*Bitangent;Out_Position=mix(Position,blobCorner,Vx_Color.rrr);Out_UV=mix(In_UV,blobUV,Vx_Color.rr);Blob_Relative_UV=blobClipped/Face_Size.y;}\nvoid Round_Rect_Vertex_B36(\nvec2 UV,\nvec3 Tangent,\nvec3 Binormal,\nfloat Radius,\nfloat Anisotropy,\nvec2 Blob_Center_UV,\nout vec2 Rect_UV,\nout vec2 Scale_XY,\nout vec4 Rect_Parms)\n{Scale_XY=vec2(Anisotropy,1.0);Rect_UV=(UV-vec2(0.5,0.5))*Scale_XY;Rect_Parms.xy=Scale_XY*0.5-vec2(Radius,Radius);Rect_Parms.zw=Blob_Center_UV;}\nvec2 ProjectProximity(\nvec3 blobPosition,\nvec3 position,\nvec3 center,\nvec3 dir,\nvec3 xdir,\nvec3 ydir,\nout float vdistance\n)\n{vec3 delta=blobPosition-position;vec2 xy=vec2(dot(delta,xdir),dot(delta,ydir));vdistance=abs(dot(delta,dir));return xy;}\nvoid Proximity_Vertex_B33(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec3 Position,\nfloat Proximity_Far_Distance,\nfloat Relative_Scale,\nfloat Proximity_Anisotropy,\nvec3 Normal,\nvec3 Tangent,\nvec3 Binormal,\nout vec4 Extra,\nout float Distance_To_Face,\nout float Distance_Fade1,\nout float Distance_Fade2)\n{float distz1,distz2;Extra.xy=ProjectProximity(Blob_Position,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz1)/Relative_Scale;Extra.zw=ProjectProximity(Blob_Position_2,Position,Face_Center,Normal,Tangent*Proximity_Anisotropy,Binormal,distz2)/Relative_Scale;Distance_To_Face=dot(Normal,Position-Face_Center);Distance_Fade1=1.0-clamp(distz1/Proximity_Far_Distance,0.0,1.0);Distance_Fade2=1.0-clamp(distz2/Proximity_Far_Distance,0.0,1.0);}\nvoid Object_To_World_Pos_B12(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Choose_Blob_B27(\nvec4 Vx_Color,\nvec3 Position1,\nvec3 Position2,\nbool Blob_Enable_1,\nbool Blob_Enable_2,\nfloat Near_Size_1,\nfloat Near_Size_2,\nfloat Blob_Inner_Fade_1,\nfloat Blob_Inner_Fade_2,\nfloat Blob_Pulse_1,\nfloat Blob_Pulse_2,\nfloat Blob_Fade_1,\nfloat Blob_Fade_2,\nout vec3 Position,\nout float Near_Size,\nout float Inner_Fade,\nout float Blob_Enable,\nout float Fade,\nout float Pulse)\n{Position=Position1*(1.0-Vx_Color.g)+Vx_Color.g*Position2;float b1=Blob_Enable_1 ? 1.0 : 0.0;float b2=Blob_Enable_2 ? 1.0 : 0.0;Blob_Enable=b1+(b2-b1)*Vx_Color.g;Pulse=Blob_Pulse_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Pulse_2;Fade=Blob_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Fade_2;Near_Size=Near_Size_1*(1.0-Vx_Color.g)+Vx_Color.g*Near_Size_2;Inner_Fade=Blob_Inner_Fade_1*(1.0-Vx_Color.g)+Vx_Color.g*Blob_Inner_Fade_2;}\nvoid Move_Verts_B32(\nvec2 UV,\nfloat Radius,\nfloat Anisotropy,\nfloat Line_Width,\nfloat Visible,\nout vec3 New_P,\nout vec2 New_UV)\n{vec2 xy=2.0*UV-vec2(0.5,0.5);vec2 center=clamp(xy,0.0,1.0);vec2 delta=2.0*(xy-center);float deltaLength=length(delta);vec2 aniso=vec2(1.0/Anisotropy,1.0);center=(center-vec2(0.5,0.5))*(1.0-2.0*Radius*aniso);New_UV=vec2((2.0-2.0*deltaLength)*Visible,0.0);float deltaRadius= (Radius-Line_Width*New_UV.x);New_P.xy=(center+deltaRadius/deltaLength *aniso*delta);New_P.z=0.0;}\nvoid Object_To_World_Dir_B14(\nvec3 Dir_Object,\nout vec3 Binormal_World)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;}\nvoid Proximity_Visibility_B55(\nfloat Selection,\nvec3 Proximity_Center,\nvec3 Proximity_Center_2,\nfloat Proximity_Far_Distance,\nfloat Proximity_Radius,\nvec3 Face_Center,\nvec3 Normal,\nvec2 Face_Size,\nfloat Gaze,\nout float Width)\n{float boxMaxSize=length(Face_Size)*0.5;float d1=dot(Proximity_Center-Face_Center,Normal);vec3 blob1=Proximity_Center-d1*Normal;float d2=dot(Proximity_Center_2-Face_Center,Normal);vec3 blob2=Proximity_Center_2-d2*Normal;vec3 delta1=blob1-Face_Center;vec3 delta2=blob2-Face_Center;float dist1=dot(delta1,delta1);float dist2=dot(delta2,delta2);float nearestProxDist=sqrt(min(dist1,dist2));Width=(1.0-step(boxMaxSize+Proximity_Radius,nearestProxDist))*(1.0-step(Proximity_Far_Distance,min(d1,d2))*(1.0-step(0.0001,Selection)));Width=max(Gaze,Width);}\nvec2 ramp2(vec2 start,vec2 end,vec2 x)\n{return clamp((x-start)/(end-start),vec2(0.0,0.0),vec2(1.0,1.0));}\nfloat computeSelection(\nvec3 blobPosition,\nvec3 normal,\nvec3 tangent,\nvec3 bitangent,\nvec3 faceCenter,\nvec2 faceSize,\nfloat selectionFuzz,\nfloat farDistance,\nfloat fadeLength\n)\n{vec3 delta=blobPosition-faceCenter;float absD=abs(dot(delta,normal));float fadeIn=1.0-clamp((absD-farDistance)/fadeLength,0.0,1.0);vec2 blobCenterXY=vec2(dot(delta,tangent),dot(delta,bitangent));vec2 innerFace=faceSize*(1.0-selectionFuzz)*0.5;vec2 selectPulse=ramp2(-faceSize*0.5,-innerFace,blobCenterXY)-ramp2(innerFace,faceSize*0.5,blobCenterXY);return selectPulse.x*selectPulse.y*fadeIn;}\nvoid Selection_Vertex_B31(\nvec3 Blob_Position,\nvec3 Blob_Position_2,\nvec3 Face_Center,\nvec2 Face_Size,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nfloat Selection_Fuzz,\nfloat Selected,\nfloat Far_Distance,\nfloat Fade_Length,\nvec3 Active_Face_Dir,\nout float Show_Selection)\n{float select1=computeSelection(Blob_Position,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);float select2=computeSelection(Blob_Position_2,Normal,Tangent,Bitangent,Face_Center,Face_Size,Selection_Fuzz,Far_Distance,Fade_Length);Show_Selection=mix(max(select1,select2),1.0,Selected);}\nvoid main()\n{vec3 Vec3_Q29=vec3(vec2(0,0).x,vec2(0,0).y,color.r);vec3 Nrm_World_Q24;Nrm_World_Q24=normalize((world*vec4(normal,0.0)).xyz);vec3 Face_Center_Q30;Face_Center_Q30=(world*vec4(vec3(0,0,0),1.0)).xyz;vec3 Tangent_World_Q13;Tangent_World_Q13=(world*vec4(tangent,0.0)).xyz;vec3 Result_Q42;Result_Q42=_Use_Global_Left_Index_ ? Global_Left_Index_Tip_Position.xyz : _Blob_Position_;vec3 Result_Q43;Result_Q43=_Use_Global_Right_Index_ ? Global_Right_Index_Tip_Position.xyz : _Blob_Position_2_;float Value_At_T_Q58=mix(_Blob_Near_Size_,_Blob_Pulse_Max_Size_,_Blob_Pulse_);float Value_At_T_Q59=mix(_Blob_Near_Size_2_,_Blob_Pulse_Max_Size_,_Blob_Pulse_2_);vec3 Cross_Q70=cross(normal,tangent);float Product_Q45=_Gaze_Intensity_*_Gaze_Focus_;float Step_Q46=step(0.0001,Product_Q45);vec3 Tangent_World_N_Q15=normalize(Tangent_World_Q13);vec3 Position_Q27;float Near_Size_Q27;float Inner_Fade_Q27;float Blob_Enable_Q27;float Fade_Q27;float Pulse_Q27;Choose_Blob_B27(color,Result_Q42,Result_Q43,_Blob_Enable_,_Blob_Enable_2_,Value_At_T_Q58,Value_At_T_Q59,_Blob_Inner_Fade_,_Blob_Inner_Fade_2_,_Blob_Pulse_,_Blob_Pulse_2_,_Blob_Fade_,_Blob_Fade_2_,Position_Q27,Near_Size_Q27,Inner_Fade_Q27,Blob_Enable_Q27,Fade_Q27,Pulse_Q27);vec3 Binormal_World_Q14;Object_To_World_Dir_B14(Cross_Q70,Binormal_World_Q14);float Anisotropy_Q21=length(Tangent_World_Q13)/length(Binormal_World_Q14);vec3 Binormal_World_N_Q16=normalize(Binormal_World_Q14);vec2 Face_Size_Q35;float ScaleY_Q35;Face_Size_Q35=vec2(length(Tangent_World_Q13),length(Binormal_World_Q14));ScaleY_Q35=Face_Size_Q35.y;float Out_Radius_Q38;float Out_Line_Width_Q38;Out_Radius_Q38=_Relative_To_Height_ ? _Radius_ : _Radius_/ScaleY_Q35;Out_Line_Width_Q38=_Relative_To_Height_ ? _Line_Width_ : _Line_Width_/ScaleY_Q35;float Show_Selection_Q31;Selection_Vertex_B31(Result_Q42,Result_Q43,Face_Center_Q30,Face_Size_Q35,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,_Selection_Fuzz_,_Selected_,_Selected_Distance_,_Selected_Fade_Length_,vec3(0,0,-1),Show_Selection_Q31);float MaxAB_Q41=max(Show_Selection_Q31,Product_Q45);float Width_Q55;Proximity_Visibility_B55(Show_Selection_Q31,Result_Q42,Result_Q43,_Proximity_Far_Distance_,_Proximity_Near_Radius_,Face_Center_Q30,Nrm_World_Q24,Face_Size_Q35,Step_Q46,Width_Q55);vec3 New_P_Q32;vec2 New_UV_Q32;Move_Verts_B32(uv,Out_Radius_Q38,Anisotropy_Q21,Out_Line_Width_Q38,Width_Q55,New_P_Q32,New_UV_Q32);vec3 Pos_World_Q12;Object_To_World_Pos_B12(New_P_Q32,Pos_World_Q12);vec3 Out_Position_Q40;vec2 Out_UV_Q40;vec3 Blob_Info_Q40;vec2 Blob_Relative_UV_Q40;Blob_Vertex_B40(Pos_World_Q12,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Position_Q27,_Blob_Intensity_,Near_Size_Q27,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,color,uv,Face_Center_Q30,Face_Size_Q35,New_UV_Q32,_Blob_Fade_Length_,_Selection_Fade_,_Selection_Fade_Size_,Inner_Fade_Q27,Pulse_Q27,Fade_Q27,Blob_Enable_Q27,0.0,Out_Position_Q40,Out_UV_Q40,Blob_Info_Q40,Blob_Relative_UV_Q40);vec2 Rect_UV_Q36;vec2 Scale_XY_Q36;vec4 Rect_Parms_Q36;Round_Rect_Vertex_B36(New_UV_Q32,Tangent_World_Q13,Binormal_World_Q14,Out_Radius_Q38,Anisotropy_Q21,Blob_Relative_UV_Q40,Rect_UV_Q36,Scale_XY_Q36,Rect_Parms_Q36);vec4 Extra_Q33;float Distance_To_Face_Q33;float Distance_Fade1_Q33;float Distance_Fade2_Q33;Proximity_Vertex_B33(Result_Q42,Result_Q43,Face_Center_Q30,Pos_World_Q12,_Proximity_Far_Distance_,1.0,_Proximity_Anisotropy_,Nrm_World_Q24,Tangent_World_N_Q15,Binormal_World_N_Q16,Extra_Q33,Distance_To_Face_Q33,Distance_Fade1_Q33,Distance_Fade2_Q33);vec4 Vec4_Q37=vec4(MaxAB_Q41,Distance_Fade1_Q33,Distance_Fade2_Q33,Out_Radius_Q38);vec3 Position=Out_Position_Q40;vec3 Normal=Vec3_Q29;vec2 UV=Out_UV_Q40;vec3 Tangent=Blob_Info_Q40;vec3 Binormal=vec3(0,0,0);vec4 Color=vec4(1,1,1,1);vec4 Extra1=Rect_Parms_Q36;vec4 Extra2=Extra_Q33;vec4 Extra3=Vec4_Q37;gl_Position=viewProjection*vec4(Position,1);vNormal=Normal;vUV=UV;vTangent=Tangent;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlFrontplateVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.fragment.ts":
/*!********************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.fragment.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlInnerquadPixelShader: () => (/* binding */ mrdlInnerquadPixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlInnerquadPixelShader";
var shader = "uniform vec3 cameraPosition;varying vec2 vUV;varying vec3 vTangent;uniform vec4 _Color_;uniform float _Radius_;uniform bool _Fixed_Radius_;uniform float _Filter_Width_;uniform float _Glow_Fraction_;uniform float _Glow_Max_;uniform float _Glow_Falloff_;float FilterStep_Bid194(float edge,float x,float filterWidth)\n{float dx=max(1.0E-5,fwidth(x)*filterWidth);return max((x+dx*0.5-max(edge,x-dx*0.5))/dx,0.0);}\nvoid Round_Rect_B194(\nfloat Size_X,\nfloat Size_Y,\nfloat Radius,\nvec4 Rect_Color,\nfloat Filter_Width,\nvec2 UV,\nfloat Glow_Fraction,\nfloat Glow_Max,\nfloat Glow_Falloff,\nout vec4 Color)\n{vec2 halfSize=vec2(Size_X,Size_Y)*0.5;vec2 r=max(min(vec2(Radius,Radius),halfSize),vec2(0.01,0.01));vec2 v=abs(UV);vec2 nearestp=min(v,halfSize-r);vec2 delta=(v-nearestp)/max(vec2(0.01,0.01),r);float Distance=length(delta);float insideRect=1.0-FilterStep_Bid194(1.0-Glow_Fraction,Distance,Filter_Width);float glow=clamp((1.0-Distance)/Glow_Fraction,0.0,1.0);glow=pow(glow,Glow_Falloff);Color=Rect_Color*max(insideRect,glow*Glow_Max);}\nvoid main()\n{float X_Q192;float Y_Q192;float Z_Q192;X_Q192=vTangent.x;Y_Q192=vTangent.y;Z_Q192=vTangent.z;vec4 Color_Q194;Round_Rect_B194(X_Q192,1.0,Y_Q192,_Color_,_Filter_Width_,vUV,_Glow_Fraction_,_Glow_Max_,_Glow_Falloff_,Color_Q194);vec4 Out_Color=Color_Q194;float Clip_Threshold=0.0;gl_FragColor=Out_Color;}\n";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlInnerquadPixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.vertex.ts":
/*!******************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlInnerquad.vertex.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlInnerquadVertexShader: () => (/* binding */ mrdlInnerquadVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlInnerquadVertexShader";
var shader = "uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;attribute vec3 tangent;attribute vec4 color;uniform vec4 _Color_;uniform float _Radius_;uniform bool _Fixed_Radius_;uniform float _Filter_Width_;uniform float _Glow_Fraction_;uniform float _Glow_Max_;uniform float _Glow_Falloff_;varying vec2 vUV;varying vec3 vTangent;void main()\n{vec3 Pos_World_Q189;Pos_World_Q189=(world*vec4(position,1.0)).xyz;vec3 Dir_World_Q190;Dir_World_Q190=(world*vec4(tangent,0.0)).xyz;vec3 Dir_World_Q191;Dir_World_Q191=(world*vec4((cross(normal,tangent)),0.0)).xyz;float Length_Q180=length(Dir_World_Q190);float Length_Q181=length(Dir_World_Q191);float Quotient_Q184=Length_Q180/Length_Q181;float Quotient_Q195=_Radius_/Length_Q181;vec2 Result_Q193;Result_Q193=vec2((uv.x-0.5)*Length_Q180/Length_Q181,(uv.y-0.5));float Result_Q198=_Fixed_Radius_ ? Quotient_Q195 : _Radius_;vec3 Vec3_Q183=vec3(Quotient_Q184,Result_Q198,0);vec3 Position=Pos_World_Q189;vec3 Normal=vec3(0,0,0);vec2 UV=Result_Q193;vec3 Tangent=Vec3_Q183;vec3 Binormal=vec3(0,0,0);vec4 Color=color;gl_Position=viewProjection*vec4(Position,1);vUV=UV;vTangent=Tangent;}\n";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlInnerquadVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.ts":
/*!********************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.fragment.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlSliderBarPixelShader: () => (/* binding */ mrdlSliderBarPixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlSliderBarPixelShader";
var shader = "uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform vec4 Global_Left_Index_Middle_Position;uniform vec4 Global_Right_Index_Middle_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;void Blob_Fragment_B30(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{float k1=dot(Blob_Info1.xy,Blob_Info1.xy);float k2=dot(Blob_Info2.xy,Blob_Info2.xy);vec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);Blob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);}\nvoid FastLinearTosRGB_B42(\nvec4 Linear,\nout vec4 sRGB)\n{sRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));sRGB.a=Linear.a;}\nvoid Scale_RGB_B59(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Fragment_Main_B121(\nfloat Sun_Intensity,\nfloat Sun_Theta,\nfloat Sun_Phi,\nvec3 Normal,\nvec4 Albedo,\nfloat Fresnel_Reflect,\nfloat Shininess,\nvec3 Incident,\nvec4 Horizon_Color,\nvec4 Sky_Color,\nvec4 Ground_Color,\nfloat Indirect_Diffuse,\nfloat Specular,\nfloat Horizon_Power,\nfloat Reflection,\nvec4 Reflection_Sample,\nvec4 Indirect_Sample,\nfloat Sharpness,\nfloat SSS,\nfloat Subsurface,\nvec4 Translucence,\nvec4 Rim_Light,\nvec4 Iridescence,\nout vec4 Result)\n{float theta=Sun_Theta*2.0*3.14159;float phi=Sun_Phi*3.14159;vec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));float NdotL=max(dot(lightDir,Normal),0.0);vec3 R=reflect(Incident,Normal);float RdotL=max(0.0,dot(R,lightDir));float specular=pow(RdotL,Shininess);specular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);vec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);Result=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;}\nvoid Bulge_B79(\nbool Enabled,\nvec3 Normal,\nvec3 Tangent,\nfloat Bulge_Height,\nvec4 UV,\nfloat Bulge_Radius,\nvec3 ButtonN,\nout vec3 New_Normal)\n{vec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));vec3 B=(cross(Normal,Tangent));float k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;k=sin(k*3.14159*0.5);k*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));New_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;New_Normal=Enabled ? New_Normal : Normal;}\nvoid SSS_B77(\nvec3 ButtonN,\nvec3 Normal,\nvec3 Incident,\nout float Result)\n{float NdotI=abs(dot(Normal,Incident));float BdotI=abs(dot(ButtonN,Incident));Result=(abs(NdotI-BdotI)); }\nvoid FingerOcclusion_B67(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid FingerOcclusion_B68(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid Scale_Color_B91(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=Scalar*Color;}\nvoid From_HSV_B73(\nfloat Hue,\nfloat Saturation,\nfloat Value,\nfloat Alpha,\nout vec4 Color)\n{vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);Color.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);Color.a=Alpha;}\nvoid Fast_Fresnel_B122(\nfloat Front_Reflect,\nfloat Edge_Reflect,\nfloat Power,\nvec3 Normal,\nvec3 Incident,\nout float Transmit,\nout float Reflect)\n{float d=max(-dot(Incident,Normal),0.0);Reflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(.01-d,Power);Transmit=1.0-Reflect;}\nvoid Mapped_Environment_B51(\nsampler2D Reflected_Environment,\nsampler2D Indirect_Environment,\nvec3 Dir,\nout vec4 Reflected_Color,\nout vec4 Indirect_Diffuse)\n{Reflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));Indirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));}\nvec4 SampleEnv_Bid50(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\n{float k=pow(abs(D.y),exponent);vec4 C;if (D.y>0.0) {C=mix(H,S,k);} else {C=mix(H,G,k); }\nreturn C;}\nvoid Sky_Environment_B50(\nvec3 Normal,\nvec3 Reflected,\nvec4 Sky_Color,\nvec4 Horizon_Color,\nvec4 Ground_Color,\nfloat Horizon_Power,\nout vec4 Reflected_Color,\nout vec4 Indirect_Color)\n{Reflected_Color=SampleEnv_Bid50(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);Indirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);}\nvoid Min_Segment_Distance_B65(\nvec3 P0,\nvec3 P1,\nvec3 Q0,\nvec3 Q1,\nout vec3 NearP,\nout vec3 NearQ,\nout float Distance)\n{vec3 u=P1-P0;vec3 v=Q1-Q0;vec3 w=P0-Q0;float a=dot(u,u);float b=dot(u,v);float c=dot(v,v);float d=dot(u,w);float e=dot(v,w);float D=a*c-b*b;float sD=D;float tD=D;float sc,sN,tc,tN;if (D<0.00001) {sN=0.0;sD=1.0;tN=e;tD=c;} else {sN=(b*e-c*d);tN=(a*e-b*d);if (sN<0.0) {sN=0.0;tN=e;tD=c;} else if (sN>sD) {sN=sD;tN=e+b;tD=c;}}\nif (tN<0.0) {tN=0.0;if (-d<0.0) {sN=0.0;} else if (-d>a) {sN=sD;} else {sN=-d;sD=a;}} else if (tN>tD) {tN=tD;if ((-d+b)<0.0) {sN=0.0;} else if ((-d+b)>a) {sN=sD;} else {sN=(-d+b);sD=a;}}\nsc=abs(sN)<0.000001 ? 0.0 : sN/sD;tc=abs(tN)<0.000001 ? 0.0 : tN/tD;NearP=P0+sc*u;NearQ=Q0+tc*v;Distance=distance(NearP,NearQ);}\nvoid To_XYZ_B74(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Finger_Positions_B64(\nvec3 Left_Index_Pos,\nvec3 Right_Index_Pos,\nvec3 Left_Index_Middle_Pos,\nvec3 Right_Index_Middle_Pos,\nout vec3 Left_Index,\nout vec3 Right_Index,\nout vec3 Left_Index_Middle,\nout vec3 Right_Index_Middle)\n{Left_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);Right_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);Left_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);Right_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);}\nvoid VaryHSV_B108(\nvec3 HSV_In,\nfloat Hue_Shift,\nfloat Saturation_Shift,\nfloat Value_Shift,\nout vec3 HSV_Out)\n{HSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));}\nvoid Remap_Range_B114(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid To_HSV_B75(\nvec4 Color,\nout float Hue,\nout float Saturation,\nout float Value,\nout float Alpha,\nout vec3 HSV)\n{vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);vec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);float d=q.x-min(q.w,q.y);float e=1.0e-10;Hue=abs(q.z+(q.w-q.y)/(6.0*d+e));Saturation=d/(q.x+e);Value=q.x;Alpha=Color.a;HSV=vec3(Hue,Saturation,Value);}\nvoid Code_B110(\nfloat X,\nout float Result)\n{Result=(acos(X)/3.14159-0.5)*2.0;}\nvoid Rim_Light_B132(\nvec3 Front,\nvec3 Normal,\nvec3 Incident,\nfloat Rim_Intensity,\nsampler2D Texture,\nout vec4 Result)\n{vec3 R=reflect(Incident,Normal);float RdotF=dot(R,Front);float RdotL=sqrt(1.0-RdotF*RdotF);vec2 UV=vec2(R.y*0.5+0.5,0.5);vec4 Color=texture(Texture,UV);Result=Color;}\nvoid main()\n{vec4 Blob_Color_Q30;\n#if BLOB_ENABLE\nBlob_Fragment_B30(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q30);\n#else\nBlob_Color_Q30=vec4(0,0,0,0);\n#endif\nvec3 Incident_Q39=normalize(vPosition-cameraPosition);vec3 Normalized_Q38=normalize(vNormal);vec3 Normalized_Q71=normalize(vTangent);vec4 Color_Q83;\n#if DECAL_ENABLE\nColor_Q83=texture(_Decal_,vUV);\n#else\nColor_Q83=vec4(0,0,0,0);\n#endif\nfloat X_Q90;float Y_Q90;float Z_Q90;float W_Q90;X_Q90=vExtra1.x;Y_Q90=vExtra1.y;Z_Q90=vExtra1.z;W_Q90=vExtra1.w;vec4 Linear_Q43;Linear_Q43.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);Linear_Q43.a=_Sky_Color_.a;vec4 Linear_Q44;Linear_Q44.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);Linear_Q44.a=_Horizon_Color_.a;vec4 Linear_Q45;Linear_Q45.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);Linear_Q45.a=_Ground_Color_.a;vec3 Left_Index_Q64;vec3 Right_Index_Q64;vec3 Left_Index_Middle_Q64;vec3 Right_Index_Middle_Q64;Finger_Positions_B64(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q64,Right_Index_Q64,Left_Index_Middle_Q64,Right_Index_Middle_Q64);vec4 Linear_Q46;Linear_Q46.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);Linear_Q46.a=_Albedo_.a;vec3 Normalized_Q107=normalize(vBinormal);vec3 Incident_Q70=normalize(vPosition-cameraPosition);vec3 New_Normal_Q79;Bulge_B79(_Bulge_Enabled_,Normalized_Q38,Normalized_Q71,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q79);float Result_Q77;SSS_B77(vBinormal,New_Normal_Q79,Incident_Q39,Result_Q77);vec4 Result_Q91;Scale_Color_B91(Color_Q83,X_Q90,Result_Q91);float Transmit_Q122;float Reflect_Q122;Fast_Fresnel_B122(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q79,Incident_Q39,Transmit_Q122,Reflect_Q122);float Product_Q125=Y_Q90*Y_Q90;vec3 NearP_Q65;vec3 NearQ_Q65;float Distance_Q65;Min_Segment_Distance_B65(Left_Index_Q64,Left_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q65,NearQ_Q65,Distance_Q65);vec3 NearP_Q63;vec3 NearQ_Q63;float Distance_Q63;Min_Segment_Distance_B65(Right_Index_Q64,Right_Index_Middle_Q64,vPosition,cameraPosition,NearP_Q63,NearQ_Q63,Distance_Q63);vec3 Reflected_Q47=reflect(Incident_Q39,New_Normal_Q79);vec4 Product_Q103=Linear_Q46*vec4(1,1,1,1);vec4 Result_Q132;Rim_Light_B132(Normalized_Q107,Normalized_Q38,Incident_Q70,_Rim_Intensity_,_Rim_Texture_,Result_Q132);float Dot_Q72=dot(Incident_Q70, Normalized_Q71);float MaxAB_Q123=max(Reflect_Q122,Product_Q125);float NotInShadow_Q67;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B67(_Width_,Distance_Q65,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q65,_Clip_Fade_,NotInShadow_Q67);\n#else\nNotInShadow_Q67=1.0;\n#endif\nfloat NotInShadow_Q68;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B68(_Width_,Distance_Q63,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q63,_Clip_Fade_,NotInShadow_Q68);\n#else\nNotInShadow_Q68=1.0;\n#endif\nvec4 Reflected_Color_Q51;vec4 Indirect_Diffuse_Q51;\n#if ENV_ENABLE\nMapped_Environment_B51(_Reflection_Map_,_Indirect_Environment_,Reflected_Q47,Reflected_Color_Q51,Indirect_Diffuse_Q51);\n#else\nReflected_Color_Q51=vec4(0,0,0,1);Indirect_Diffuse_Q51=vec4(0,0,0,1);\n#endif\nvec4 Reflected_Color_Q50;vec4 Indirect_Color_Q50;\n#if SKY_ENABLED\nSky_Environment_B50(New_Normal_Q79,Reflected_Q47,Linear_Q43,Linear_Q44,Linear_Q45,_Horizon_Power_,Reflected_Color_Q50,Indirect_Color_Q50);\n#else\nReflected_Color_Q50=vec4(0,0,0,1);Indirect_Color_Q50=vec4(0,0,0,1);\n#endif\nfloat Hue_Q75;float Saturation_Q75;float Value_Q75;float Alpha_Q75;vec3 HSV_Q75;To_HSV_B75(Product_Q103,Hue_Q75,Saturation_Q75,Value_Q75,Alpha_Q75,HSV_Q75);float Hue_Q127;float Saturation_Q127;float Value_Q127;float Alpha_Q127;vec3 HSV_Q127;To_HSV_B75(Result_Q132,Hue_Q127,Saturation_Q127,Value_Q127,Alpha_Q127,HSV_Q127);float Result_Q110;Code_B110(Dot_Q72,Result_Q110);float AbsA_Q76=abs(Result_Q110);float MinAB_Q58=min(NotInShadow_Q67,NotInShadow_Q68);vec4 Sum_Q48=Reflected_Color_Q51+Reflected_Color_Q50;vec4 Sum_Q49=Indirect_Diffuse_Q51+Indirect_Color_Q50;vec3 HSV_Out_Q126;VaryHSV_B108(HSV_Q127,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q126);float Out_Q114;Remap_Range_B114(-1.0,1.0,0.0,1.0,Result_Q110,Out_Q114);float Product_Q106;Product_Q106=AbsA_Q76*_Hue_Shift_;float X_Q128;float Y_Q128;float Z_Q128;To_XYZ_B74(HSV_Out_Q126,X_Q128,Y_Q128,Z_Q128);vec2 Vec2_Q112=vec2(Out_Q114,0.5);vec3 HSV_Out_Q108;VaryHSV_B108(HSV_Q75,Product_Q106,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q108);vec4 Color_Q129;From_HSV_B73(X_Q128,Y_Q128,Z_Q128,0.0,Color_Q129);vec4 Color_Q111;\n#if IRIDESCENCE_ENABLED\nColor_Q111=texture(_Iridescence_Texture_,Vec2_Q112);\n#else\nColor_Q111=vec4(0,0,0,0);\n#endif\nfloat X_Q74;float Y_Q74;float Z_Q74;To_XYZ_B74(HSV_Out_Q108,X_Q74,Y_Q74,Z_Q74);vec4 Result_Q131=_Rim_Intensity_*Color_Q129;vec4 Result_Q113=_Iridescence_Intensity_*Color_Q111;vec4 Color_Q73;From_HSV_B73(X_Q74,Y_Q74,Z_Q74,0.0,Color_Q73);vec4 Result_Q84=Result_Q91+(1.0-Result_Q91.a)*Color_Q73;vec4 Result_Q121;Fragment_Main_B121(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q79,Result_Q84,MaxAB_Q123,_Shininess_,Incident_Q39,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q48,Sum_Q49,_Sharpness_,Result_Q77,_Subsurface_,vec4(0,0,0,0),Result_Q131,Result_Q113,Result_Q121);vec4 Result_Q59;Scale_RGB_B59(Result_Q121,MinAB_Q58,Result_Q59);vec4 sRGB_Q42;FastLinearTosRGB_B42(Result_Q59,sRGB_Q42);vec4 Result_Q31=Blob_Color_Q30+(1.0-Blob_Color_Q30.a)*sRGB_Q42;vec4 Result_Q40=Result_Q31; Result_Q40.a=1.0;vec4 Out_Color=Result_Q40;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlSliderBarPixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.ts":
/*!******************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderBar.vertex.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlSliderBarVertexShader: () => (/* binding */ mrdlSliderBarVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlSliderBarVertexShader";
var shader = "uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Object_To_World_Pos_B12(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Object_To_World_Normal_B32(\nvec3 Nrm_Object,\nout vec3 Nrm_World)\n{Nrm_World=(vec4(Nrm_Object,0.0)).xyz;}\nvoid Blob_Vertex_B23(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Blob_Vertex_B24(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Move_Verts_B130(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nfloat Bevel,\nvec3 Normal_Object,\nfloat ScaleZ,\nfloat Stretch,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir,\nout vec3 New_Normal)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;float deltad=(length(delta)*2.0);float f=(Bevel+(Radius-Bevel)*Stretch)/Radius;float innerd=clamp(deltad*2.0,0.0,1.0);float outerd=clamp(deltad*2.0-1.0,0.0,1.0);float bevelAngle=outerd*3.14159*0.5;float sinb=sin(bevelAngle);float cosb=cos(bevelAngle);float beveld=(1.0-f)*innerd+f*sinb;float br=outerd;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);float dir=P.z<0.0001 ? 1.0 : -1.0;New_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);New_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);Radial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);Radial_Dir=vec3(delta*r2,0.0);vec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);New_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;}\nvoid Object_To_World_Dir_B60(\nvec3 Dir_Object,\nout vec3 Normal_World,\nout vec3 Normal_World_N,\nout float Normal_Length)\n{Normal_World=(world*vec4(Dir_Object,0.0)).xyz;Normal_Length=length(Normal_World);Normal_World_N=Normal_World/Normal_Length;}\nvoid To_XYZ_B78(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Conditional_Float_B93(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Object_To_World_Dir_B28(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid Pick_Radius_B69(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid Conditional_Float_B36(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Greater_Than_B37(\nfloat Left,\nfloat Right,\nout bool Not_Greater_Than,\nout bool Greater_Than)\n{Greater_Than=Left>Right;Not_Greater_Than=!Greater_Than;}\nvoid Remap_Range_B105(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid main()\n{vec2 XY_Q85;XY_Q85=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);vec3 Tangent_World_Q27;vec3 Tangent_World_N_Q27;float Tangent_Length_Q27;Tangent_World_Q27=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q27=length(Tangent_World_Q27);Tangent_World_N_Q27=Tangent_World_Q27/Tangent_Length_Q27;vec3 Normal_World_Q60;vec3 Normal_World_N_Q60;float Normal_Length_Q60;Object_To_World_Dir_B60(vec3(0,0,1),Normal_World_Q60,Normal_World_N_Q60,Normal_Length_Q60);float X_Q78;float Y_Q78;float Z_Q78;To_XYZ_B78(position,X_Q78,Y_Q78,Z_Q78);vec3 Nrm_World_Q26;Nrm_World_Q26=normalize((world*vec4(normal,0.0)).xyz);vec3 Binormal_World_Q28;vec3 Binormal_World_N_Q28;float Binormal_Length_Q28;Object_To_World_Dir_B28(vec3(0,1,0),Binormal_World_Q28,Binormal_World_N_Q28,Binormal_Length_Q28);float Anisotropy_Q29=Tangent_Length_Q27/Binormal_Length_Q28;float Result_Q69;Pick_Radius_B69(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q69);float Anisotropy_Q53=Binormal_Length_Q28/Normal_Length_Q60;bool Not_Greater_Than_Q37;bool Greater_Than_Q37;Greater_Than_B37(Z_Q78,0.0,Not_Greater_Than_Q37,Greater_Than_Q37);vec4 Linear_Q101;Linear_Q101.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);Linear_Q101.a=_Left_Color_.a;vec4 Linear_Q102;Linear_Q102.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);Linear_Q102.a=_Right_Color_.a;vec3 Difference_Q61=vec3(0,0,0)-Normal_World_N_Q60;vec4 Out_Color_Q34=vec4(X_Q78,Y_Q78,Z_Q78,1);float Result_Q36;Conditional_Float_B36(Greater_Than_Q37,_Bevel_Back_,_Bevel_Front_,Result_Q36);float Result_Q94;Conditional_Float_B36(Greater_Than_Q37,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q94);vec3 New_P_Q130;vec2 New_UV_Q130;float Radial_Gradient_Q130;vec3 Radial_Dir_Q130;vec3 New_Normal_Q130;Move_Verts_B130(Anisotropy_Q29,position,Result_Q69,Result_Q36,normal,Anisotropy_Q53,Result_Q94,New_P_Q130,New_UV_Q130,Radial_Gradient_Q130,Radial_Dir_Q130,New_Normal_Q130);float X_Q98;float Y_Q98;X_Q98=New_UV_Q130.x;Y_Q98=New_UV_Q130.y;vec3 Pos_World_Q12;Object_To_World_Pos_B12(New_P_Q130,Pos_World_Q12);vec3 Nrm_World_Q32;Object_To_World_Normal_B32(New_Normal_Q130,Nrm_World_Q32);vec4 Blob_Info_Q23;\n#if BLOB_ENABLE\nBlob_Vertex_B23(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q23);\n#else\nBlob_Info_Q23=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q24;\n#if BLOB_ENABLE_2\nBlob_Vertex_B24(Pos_World_Q12,Nrm_World_Q26,Tangent_World_N_Q27,Binormal_World_N_Q28,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q24);\n#else\nBlob_Info_Q24=vec4(0,0,0,0);\n#endif\nfloat Out_Q105;Remap_Range_B105(0.0,1.0,0.0,1.0,X_Q98,Out_Q105);float X_Q86;float Y_Q86;float Z_Q86;To_XYZ_B78(Nrm_World_Q32,X_Q86,Y_Q86,Z_Q86);vec4 Color_At_T_Q97=mix(Linear_Q101,Linear_Q102,Out_Q105);float Minus_F_Q87=-Z_Q86;float R_Q99;float G_Q99;float B_Q99;float A_Q99;R_Q99=Color_At_T_Q97.r; G_Q99=Color_At_T_Q97.g; B_Q99=Color_At_T_Q97.b; A_Q99=Color_At_T_Q97.a;float ClampF_Q88=clamp(0.0,Minus_F_Q87,1.0);float Result_Q93;Conditional_Float_B93(_Decal_Front_Only_,ClampF_Q88,1.0,Result_Q93);vec4 Vec4_Q89=vec4(Result_Q93,Radial_Gradient_Q130,G_Q99,B_Q99);vec3 Position=Pos_World_Q12;vec3 Normal=Nrm_World_Q32;vec2 UV=XY_Q85;vec3 Tangent=Tangent_World_N_Q27;vec3 Binormal=Difference_Q61;vec4 Color=Out_Color_Q34;vec4 Extra1=Vec4_Q89;vec4 Extra2=Blob_Info_Q23;vec4 Extra3=Blob_Info_Q24;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlSliderBarVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.ts":
/*!**********************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.fragment.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlSliderThumbPixelShader: () => (/* binding */ mrdlSliderThumbPixelShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlSliderThumbPixelShader";
var shader = "uniform vec3 cameraPosition;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;uniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform vec4 Global_Left_Index_Middle_Position;uniform vec4 Global_Right_Index_Middle_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;void Blob_Fragment_B180(\nsampler2D Blob_Texture,\nvec4 Blob_Info1,\nvec4 Blob_Info2,\nout vec4 Blob_Color)\n{float k1=dot(Blob_Info1.xy,Blob_Info1.xy);float k2=dot(Blob_Info2.xy,Blob_Info2.xy);vec3 closer=k1<k2 ? vec3(k1,Blob_Info1.z,Blob_Info1.w) : vec3(k2,Blob_Info2.z,Blob_Info2.w);Blob_Color=closer.z*texture(Blob_Texture,vec2(vec2(sqrt(closer.x),closer.y).x,1.0-vec2(sqrt(closer.x),closer.y).y))*clamp(1.0-closer.x,0.0,1.0);}\nvoid FastLinearTosRGB_B192(\nvec4 Linear,\nout vec4 sRGB)\n{sRGB.rgb=sqrt(clamp(Linear.rgb,0.0,1.0));sRGB.a=Linear.a;}\nvoid Scale_RGB_B209(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=vec4(Scalar,Scalar,Scalar,1)*Color;}\nvoid Fragment_Main_B271(\nfloat Sun_Intensity,\nfloat Sun_Theta,\nfloat Sun_Phi,\nvec3 Normal,\nvec4 Albedo,\nfloat Fresnel_Reflect,\nfloat Shininess,\nvec3 Incident,\nvec4 Horizon_Color,\nvec4 Sky_Color,\nvec4 Ground_Color,\nfloat Indirect_Diffuse,\nfloat Specular,\nfloat Horizon_Power,\nfloat Reflection,\nvec4 Reflection_Sample,\nvec4 Indirect_Sample,\nfloat Sharpness,\nfloat SSS,\nfloat Subsurface,\nvec4 Translucence,\nvec4 Rim_Light,\nvec4 Iridescence,\nout vec4 Result)\n{float theta=Sun_Theta*2.0*3.14159;float phi=Sun_Phi*3.14159;vec3 lightDir= vec3(cos(phi)*cos(theta),sin(phi),cos(phi)*sin(theta));float NdotL=max(dot(lightDir,Normal),0.0);vec3 R=reflect(Incident,Normal);float RdotL=max(0.0,dot(R,lightDir));float specular=pow(RdotL,Shininess);specular=mix(specular,smoothstep(0.495*Sharpness,1.0-0.495*Sharpness,specular),Sharpness);vec4 gi=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);Result=((Sun_Intensity*NdotL+Indirect_Sample*Indirect_Diffuse+Translucence)*(1.0+SSS*Subsurface))*Albedo*(1.0-Fresnel_Reflect)+(Sun_Intensity*specular*Specular+Fresnel_Reflect*Reflection*Reflection_Sample)+Fresnel_Reflect*Rim_Light+Iridescence;}\nvoid Bulge_B229(\nbool Enabled,\nvec3 Normal,\nvec3 Tangent,\nfloat Bulge_Height,\nvec4 UV,\nfloat Bulge_Radius,\nvec3 ButtonN,\nout vec3 New_Normal)\n{vec2 xy=clamp(UV.xy*2.0,vec2(-1,-1),vec2(1,1));vec3 B=(cross(Normal,Tangent));float k=-clamp(1.0-length(xy)/Bulge_Radius,0.0,1.0)*Bulge_Height;k=sin(k*3.14159*0.5);k*=smoothstep(0.9998,0.9999,abs(dot(ButtonN,Normal)));New_Normal=Normal*sqrt(1.0-k*k)+(xy.x*Tangent+xy.y*B)*k;New_Normal=Enabled ? New_Normal : Normal;}\nvoid SSS_B227(\nvec3 ButtonN,\nvec3 Normal,\nvec3 Incident,\nout float Result)\n{float NdotI=abs(dot(Normal,Incident));float BdotI=abs(dot(ButtonN,Incident));Result=(abs(NdotI-BdotI)); }\nvoid FingerOcclusion_B217(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid FingerOcclusion_B218(\nfloat Width,\nfloat DistToCenter,\nfloat Fuzz,\nfloat Min_Fuzz,\nvec3 Position,\nvec3 Forward,\nvec3 Nearest,\nfloat Fade_Out,\nout float NotInShadow)\n{float d=dot((Nearest-Position),Forward);float sh=smoothstep(Width*0.5,Width*0.5+Fuzz*max(d,0.0)+Min_Fuzz,DistToCenter);NotInShadow=1.0-(1.0-sh)*smoothstep(-Fade_Out,0.0,d);}\nvoid Scale_Color_B241(\nvec4 Color,\nfloat Scalar,\nout vec4 Result)\n{Result=Scalar*Color;}\nvoid From_HSV_B223(\nfloat Hue,\nfloat Saturation,\nfloat Value,\nfloat Alpha,\nout vec4 Color)\n{vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(vec3(Hue,Hue,Hue)+K.xyz)*6.0-K.www);Color.rgb=Value*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),Saturation);Color.a=Alpha;}\nvoid Fast_Fresnel_B272(\nfloat Front_Reflect,\nfloat Edge_Reflect,\nfloat Power,\nvec3 Normal,\nvec3 Incident,\nout float Transmit,\nout float Reflect)\n{float d=max(-dot(Incident,Normal),0.0);Reflect=Front_Reflect+(Edge_Reflect-Front_Reflect)*pow(1.0-d,Power);Transmit=1.0-Reflect;}\nvoid Mapped_Environment_B201(\nsampler2D Reflected_Environment,\nsampler2D Indirect_Environment,\nvec3 Dir,\nout vec4 Reflected_Color,\nout vec4 Indirect_Diffuse)\n{Reflected_Color=texture(Reflected_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));Indirect_Diffuse=texture(Indirect_Environment,vec2(atan(Dir.z,Dir.x)/3.14159*0.5,asin(Dir.y)/3.14159+0.5));}\nvec4 SampleEnv_Bid200(vec3 D,vec4 S,vec4 H,vec4 G,float exponent)\n{float k=pow(abs(D.y),exponent);vec4 C;if (D.y>0.0) {C=mix(H,S,k);} else {C=mix(H,G,k); }\nreturn C;}\nvoid Sky_Environment_B200(\nvec3 Normal,\nvec3 Reflected,\nvec4 Sky_Color,\nvec4 Horizon_Color,\nvec4 Ground_Color,\nfloat Horizon_Power,\nout vec4 Reflected_Color,\nout vec4 Indirect_Color)\n{Reflected_Color=SampleEnv_Bid200(Reflected,Sky_Color,Horizon_Color,Ground_Color,Horizon_Power);Indirect_Color=mix(Ground_Color,Sky_Color,Normal.y*0.5+0.5);}\nvoid Min_Segment_Distance_B215(\nvec3 P0,\nvec3 P1,\nvec3 Q0,\nvec3 Q1,\nout vec3 NearP,\nout vec3 NearQ,\nout float Distance)\n{vec3 u=P1-P0;vec3 v=Q1-Q0;vec3 w=P0-Q0;float a=dot(u,u);float b=dot(u,v);float c=dot(v,v);float d=dot(u,w);float e=dot(v,w);float D=a*c-b*b;float sD=D;float tD=D;float sc,sN,tc,tN;if (D<0.00001) {sN=0.0;sD=1.0;tN=e;tD=c;} else {sN=(b*e-c*d);tN=(a*e-b*d);if (sN<0.0) {sN=0.0;tN=e;tD=c;} else if (sN>sD) {sN=sD;tN=e+b;tD=c;}}\nif (tN<0.0) {tN=0.0;if (-d<0.0) {sN=0.0;} else if (-d>a) {sN=sD;} else {sN=-d;sD=a;}} else if (tN>tD) {tN=tD;if ((-d+b)<0.0) {sN=0.0;} else if ((-d+b)>a) {sN=sD;} else {sN=(-d+b);sD=a;}}\nsc=abs(sN)<0.000001 ? 0.0 : sN/sD;tc=abs(tN)<0.000001 ? 0.0 : tN/tD;NearP=P0+sc*u;NearQ=Q0+tc*v;Distance=distance(NearP,NearQ);}\nvoid To_XYZ_B224(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Finger_Positions_B214(\nvec3 Left_Index_Pos,\nvec3 Right_Index_Pos,\nvec3 Left_Index_Middle_Pos,\nvec3 Right_Index_Middle_Pos,\nout vec3 Left_Index,\nout vec3 Right_Index,\nout vec3 Left_Index_Middle,\nout vec3 Right_Index_Middle)\n{Left_Index= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Left_Index_Pos);Right_Index= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Right_Index_Pos);Left_Index_Middle= (Use_Global_Left_Index ? Global_Left_Index_Middle_Position.xyz : Left_Index_Middle_Pos);Right_Index_Middle= (Use_Global_Right_Index ? Global_Right_Index_Middle_Position.xyz : Right_Index_Middle_Pos);}\nvoid VaryHSV_B258(\nvec3 HSV_In,\nfloat Hue_Shift,\nfloat Saturation_Shift,\nfloat Value_Shift,\nout vec3 HSV_Out)\n{HSV_Out=vec3(fract(HSV_In.x+Hue_Shift),clamp(HSV_In.y+Saturation_Shift,0.0,1.0),clamp(HSV_In.z+Value_Shift,0.0,1.0));}\nvoid Remap_Range_B264(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid To_HSV_B225(\nvec4 Color,\nout float Hue,\nout float Saturation,\nout float Value,\nout float Alpha,\nout vec3 HSV)\n{vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=Color.g<Color.b ? vec4(Color.bg,K.wz) : vec4(Color.gb,K.xy);vec4 q=Color.r<p.x ? vec4(p.xyw,Color.r) : vec4(Color.r,p.yzx);float d=q.x-min(q.w,q.y);float e=1.0e-10;Hue=abs(q.z+(q.w-q.y)/(6.0*d+e));Saturation=d/(q.x+e);Value=q.x;Alpha=Color.a;HSV=vec3(Hue,Saturation,Value);}\nvoid Code_B260(\nfloat X,\nout float Result)\n{Result=(acos(X)/3.14159-0.5)*2.0;}\nvoid Rim_Light_B282(\nvec3 Front,\nvec3 Normal,\nvec3 Incident,\nfloat Rim_Intensity,\nsampler2D Texture,\nout vec4 Result)\n{vec3 R=reflect(Incident,Normal);float RdotF=dot(R,Front);float RdotL=sqrt(1.0-RdotF*RdotF);vec2 UV=vec2(R.y*0.5+0.5,0.5);vec4 Color=texture(Texture,UV);Result=Color;}\nvoid main()\n{vec4 Blob_Color_Q180;\n#if BLOB_ENABLE\nBlob_Fragment_B180(_Blob_Texture_,vExtra2,vExtra3,Blob_Color_Q180);\n#else\nBlob_Color_Q180=vec4(0,0,0,0);\n#endif\nvec3 Incident_Q189=normalize(vPosition-cameraPosition);vec3 Normalized_Q188=normalize(vNormal);vec3 Normalized_Q221=normalize(vTangent);vec4 Color_Q233;\n#if DECAL_ENABLE\nColor_Q233=texture(_Decal_,vUV);\n#else\nColor_Q233=vec4(0,0,0,0);\n#endif\nfloat X_Q240;float Y_Q240;float Z_Q240;float W_Q240;X_Q240=vExtra1.x;Y_Q240=vExtra1.y;Z_Q240=vExtra1.z;W_Q240=vExtra1.w;vec4 Linear_Q193;Linear_Q193.rgb=clamp(_Sky_Color_.rgb*_Sky_Color_.rgb,0.0,1.0);Linear_Q193.a=_Sky_Color_.a;vec4 Linear_Q194;Linear_Q194.rgb=clamp(_Horizon_Color_.rgb*_Horizon_Color_.rgb,0.0,1.0);Linear_Q194.a=_Horizon_Color_.a;vec4 Linear_Q195;Linear_Q195.rgb=clamp(_Ground_Color_.rgb*_Ground_Color_.rgb,0.0,1.0);Linear_Q195.a=_Ground_Color_.a;vec3 Left_Index_Q214;vec3 Right_Index_Q214;vec3 Left_Index_Middle_Q214;vec3 Right_Index_Middle_Q214;Finger_Positions_B214(_Left_Index_Pos_,_Right_Index_Pos_,_Left_Index_Middle_Pos_,_Right_Index_Middle_Pos_,Left_Index_Q214,Right_Index_Q214,Left_Index_Middle_Q214,Right_Index_Middle_Q214);vec4 Linear_Q196;Linear_Q196.rgb=clamp(_Albedo_.rgb*_Albedo_.rgb,0.0,1.0);Linear_Q196.a=_Albedo_.a;vec3 Normalized_Q257=normalize(vBinormal);vec3 Incident_Q220=normalize(vPosition-cameraPosition);vec3 New_Normal_Q229;Bulge_B229(_Bulge_Enabled_,Normalized_Q188,Normalized_Q221,_Bulge_Height_,vColor,_Bulge_Radius_,vBinormal,New_Normal_Q229);float Result_Q227;SSS_B227(vBinormal,New_Normal_Q229,Incident_Q189,Result_Q227);vec4 Result_Q241;Scale_Color_B241(Color_Q233,X_Q240,Result_Q241);float Transmit_Q272;float Reflect_Q272;Fast_Fresnel_B272(_Front_Reflect_,_Edge_Reflect_,_Power_,New_Normal_Q229,Incident_Q189,Transmit_Q272,Reflect_Q272);float Product_Q275=Y_Q240*Y_Q240;vec3 NearP_Q215;vec3 NearQ_Q215;float Distance_Q215;Min_Segment_Distance_B215(Left_Index_Q214,Left_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q215,NearQ_Q215,Distance_Q215);vec3 NearP_Q213;vec3 NearQ_Q213;float Distance_Q213;Min_Segment_Distance_B215(Right_Index_Q214,Right_Index_Middle_Q214,vPosition,cameraPosition,NearP_Q213,NearQ_Q213,Distance_Q213);vec3 Reflected_Q197=reflect(Incident_Q189,New_Normal_Q229);vec4 Product_Q253=Linear_Q196*vec4(1,1,1,1);vec4 Result_Q282;Rim_Light_B282(Normalized_Q257,Normalized_Q188,Incident_Q220,_Rim_Intensity_,_Rim_Texture_,Result_Q282);float Dot_Q222=dot(Incident_Q220, Normalized_Q221);float MaxAB_Q273=max(Reflect_Q272,Product_Q275);float NotInShadow_Q217;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B217(_Width_,Distance_Q215,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q215,_Clip_Fade_,NotInShadow_Q217);\n#else\nNotInShadow_Q217=1.0;\n#endif\nfloat NotInShadow_Q218;\n#if OCCLUSION_ENABLED\nFingerOcclusion_B218(_Width_,Distance_Q213,_Fuzz_,_Min_Fuzz_,vPosition,vBinormal,NearP_Q213,_Clip_Fade_,NotInShadow_Q218);\n#else\nNotInShadow_Q218=1.0;\n#endif\nvec4 Reflected_Color_Q201;vec4 Indirect_Diffuse_Q201;\n#if ENV_ENABLE\nMapped_Environment_B201(_Reflection_Map_,_Indirect_Environment_,Reflected_Q197,Reflected_Color_Q201,Indirect_Diffuse_Q201);\n#else\nReflected_Color_Q201=vec4(0,0,0,1);Indirect_Diffuse_Q201=vec4(0,0,0,1);\n#endif\nvec4 Reflected_Color_Q200;vec4 Indirect_Color_Q200;\n#if SKY_ENABLED\nSky_Environment_B200(New_Normal_Q229,Reflected_Q197,Linear_Q193,Linear_Q194,Linear_Q195,_Horizon_Power_,Reflected_Color_Q200,Indirect_Color_Q200);\n#else\nReflected_Color_Q200=vec4(0,0,0,1);Indirect_Color_Q200=vec4(0,0,0,1);\n#endif\nfloat Hue_Q225;float Saturation_Q225;float Value_Q225;float Alpha_Q225;vec3 HSV_Q225;To_HSV_B225(Product_Q253,Hue_Q225,Saturation_Q225,Value_Q225,Alpha_Q225,HSV_Q225);float Hue_Q277;float Saturation_Q277;float Value_Q277;float Alpha_Q277;vec3 HSV_Q277;To_HSV_B225(Result_Q282,Hue_Q277,Saturation_Q277,Value_Q277,Alpha_Q277,HSV_Q277);float Result_Q260;Code_B260(Dot_Q222,Result_Q260);float AbsA_Q226=abs(Result_Q260);float MinAB_Q208=min(NotInShadow_Q217,NotInShadow_Q218);vec4 Sum_Q198=Reflected_Color_Q201+Reflected_Color_Q200;vec4 Sum_Q199=Indirect_Diffuse_Q201+Indirect_Color_Q200;vec3 HSV_Out_Q276;VaryHSV_B258(HSV_Q277,_Rim_Hue_Shift_,_Rim_Saturation_Shift_,_Rim_Value_Shift_,HSV_Out_Q276);float Out_Q264;Remap_Range_B264(-1.0,1.0,0.0,1.0,Result_Q260,Out_Q264);float Product_Q256;Product_Q256=AbsA_Q226*_Hue_Shift_;float X_Q278;float Y_Q278;float Z_Q278;To_XYZ_B224(HSV_Out_Q276,X_Q278,Y_Q278,Z_Q278);vec2 Vec2_Q262=vec2(Out_Q264,0.5);vec3 HSV_Out_Q258;VaryHSV_B258(HSV_Q225,Product_Q256,_Saturation_Shift_,_Value_Shift_,HSV_Out_Q258);vec4 Color_Q279;From_HSV_B223(X_Q278,Y_Q278,Z_Q278,0.0,Color_Q279);vec4 Color_Q261;\n#if IRIDESCENCE_ENABLED\nColor_Q261=texture(_Iridescence_Texture_,Vec2_Q262);\n#else\nColor_Q261=vec4(0,0,0,0);\n#endif\nfloat X_Q224;float Y_Q224;float Z_Q224;To_XYZ_B224(HSV_Out_Q258,X_Q224,Y_Q224,Z_Q224);vec4 Result_Q281=_Rim_Intensity_*Color_Q279;vec4 Result_Q263=_Iridescence_Intensity_*Color_Q261;vec4 Color_Q223;From_HSV_B223(X_Q224,Y_Q224,Z_Q224,0.0,Color_Q223);vec4 Result_Q234=Result_Q241+(1.0-Result_Q241.a)*Color_Q223;vec4 Result_Q271;Fragment_Main_B271(_Sun_Intensity_,_Sun_Theta_,_Sun_Phi_,New_Normal_Q229,Result_Q234,MaxAB_Q273,_Shininess_,Incident_Q189,_Horizon_Color_,_Sky_Color_,_Ground_Color_,_Indirect_Diffuse_,_Specular_,_Horizon_Power_,_Reflection_,Sum_Q198,Sum_Q199,_Sharpness_,Result_Q227,_Subsurface_,vec4(0,0,0,0),Result_Q281,Result_Q263,Result_Q271);vec4 Result_Q209;Scale_RGB_B209(Result_Q271,MinAB_Q208,Result_Q209);vec4 sRGB_Q192;FastLinearTosRGB_B192(Result_Q209,sRGB_Q192);vec4 Result_Q181=Blob_Color_Q180+(1.0-Blob_Color_Q180.a)*sRGB_Q192;vec4 Result_Q190=Result_Q181; Result_Q190.a=1.0;vec4 Out_Color=Result_Q190;float Clip_Threshold=0.001;bool To_sRGB=false;gl_FragColor=Out_Color;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlSliderThumbPixelShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.ts":
/*!********************************************************************************!*\
  !*** ../../../dev/gui/src/3D/materials/mrdl/shaders/mrdlSliderThumb.vertex.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mrdlSliderThumbVertexShader: () => (/* binding */ mrdlSliderThumbVertexShader)
/* harmony export */ });
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Engines/shaderStore */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__);
// Do not edit.

var name = "mrdlSliderThumbVertexShader";
var shader = "uniform mat4 world;uniform mat4 viewProjection;uniform vec3 cameraPosition;attribute vec3 position;attribute vec3 normal;attribute vec2 uv;\n#ifdef TANGENT\nattribute vec3 tangent;\n#else\nconst vec3 tangent=vec3(0.);\n#endif\nuniform float _Radius_;uniform float _Bevel_Front_;uniform float _Bevel_Front_Stretch_;uniform float _Bevel_Back_;uniform float _Bevel_Back_Stretch_;uniform float _Radius_Top_Left_;uniform float _Radius_Top_Right_;uniform float _Radius_Bottom_Left_;uniform float _Radius_Bottom_Right_;uniform bool _Bulge_Enabled_;uniform float _Bulge_Height_;uniform float _Bulge_Radius_;uniform float _Sun_Intensity_;uniform float _Sun_Theta_;uniform float _Sun_Phi_;uniform float _Indirect_Diffuse_;uniform vec4 _Albedo_;uniform float _Specular_;uniform float _Shininess_;uniform float _Sharpness_;uniform float _Subsurface_;uniform vec4 _Left_Color_;uniform vec4 _Right_Color_;uniform float _Reflection_;uniform float _Front_Reflect_;uniform float _Edge_Reflect_;uniform float _Power_;uniform vec4 _Sky_Color_;uniform vec4 _Horizon_Color_;uniform vec4 _Ground_Color_;uniform float _Horizon_Power_;uniform sampler2D _Reflection_Map_;uniform sampler2D _Indirect_Environment_;uniform float _Width_;uniform float _Fuzz_;uniform float _Min_Fuzz_;uniform float _Clip_Fade_;uniform float _Hue_Shift_;uniform float _Saturation_Shift_;uniform float _Value_Shift_;uniform vec3 _Blob_Position_;uniform float _Blob_Intensity_;uniform float _Blob_Near_Size_;uniform float _Blob_Far_Size_;uniform float _Blob_Near_Distance_;uniform float _Blob_Far_Distance_;uniform float _Blob_Fade_Length_;uniform float _Blob_Pulse_;uniform float _Blob_Fade_;uniform sampler2D _Blob_Texture_;uniform vec3 _Blob_Position_2_;uniform float _Blob_Near_Size_2_;uniform float _Blob_Pulse_2_;uniform float _Blob_Fade_2_;uniform vec3 _Left_Index_Pos_;uniform vec3 _Right_Index_Pos_;uniform vec3 _Left_Index_Middle_Pos_;uniform vec3 _Right_Index_Middle_Pos_;uniform sampler2D _Decal_;uniform vec2 _Decal_Scale_XY_;uniform bool _Decal_Front_Only_;uniform float _Rim_Intensity_;uniform sampler2D _Rim_Texture_;uniform float _Rim_Hue_Shift_;uniform float _Rim_Saturation_Shift_;uniform float _Rim_Value_Shift_;uniform float _Iridescence_Intensity_;uniform sampler2D _Iridescence_Texture_;uniform bool Use_Global_Left_Index;uniform bool Use_Global_Right_Index;uniform vec4 Global_Left_Index_Tip_Position;uniform vec4 Global_Right_Index_Tip_Position;uniform vec4 Global_Left_Thumb_Tip_Position;uniform vec4 Global_Right_Thumb_Tip_Position;uniform float Global_Left_Index_Tip_Proximity;uniform float Global_Right_Index_Tip_Proximity;varying vec3 vPosition;varying vec3 vNormal;varying vec2 vUV;varying vec3 vTangent;varying vec3 vBinormal;varying vec4 vColor;varying vec4 vExtra1;varying vec4 vExtra2;varying vec4 vExtra3;void Object_To_World_Pos_B162(\nvec3 Pos_Object,\nout vec3 Pos_World)\n{Pos_World=(world*vec4(Pos_Object,1.0)).xyz;}\nvoid Object_To_World_Normal_B182(\nvec3 Nrm_Object,\nout vec3 Nrm_World)\n{Nrm_World=(vec4(Nrm_Object,0.0)).xyz;}\nvoid Blob_Vertex_B173(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Left_Index ? Global_Left_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Blob_Vertex_B174(\nvec3 Position,\nvec3 Normal,\nvec3 Tangent,\nvec3 Bitangent,\nvec3 Blob_Position,\nfloat Intensity,\nfloat Blob_Near_Size,\nfloat Blob_Far_Size,\nfloat Blob_Near_Distance,\nfloat Blob_Far_Distance,\nfloat Blob_Fade_Length,\nfloat Blob_Pulse,\nfloat Blob_Fade,\nout vec4 Blob_Info)\n{vec3 blob= (Use_Global_Right_Index ? Global_Right_Index_Tip_Position.xyz : Blob_Position);vec3 delta=blob-Position;float dist=dot(Normal,delta);float lerpValue=clamp((abs(dist)-Blob_Near_Distance)/(Blob_Far_Distance-Blob_Near_Distance),0.0,1.0);float fadeValue=1.0-clamp((abs(dist)-Blob_Far_Distance)/Blob_Fade_Length,0.0,1.0);float size=Blob_Near_Size+(Blob_Far_Size-Blob_Near_Size)*lerpValue;vec2 blobXY=vec2(dot(delta,Tangent),dot(delta,Bitangent))/(0.0001+size);float Fade=fadeValue*Intensity*Blob_Fade;float Distance=(lerpValue*0.5+0.5)*(1.0-Blob_Pulse);Blob_Info=vec4(blobXY.x,blobXY.y,Distance,Fade);}\nvoid Move_Verts_B280(\nfloat Anisotropy,\nvec3 P,\nfloat Radius,\nfloat Bevel,\nvec3 Normal_Object,\nfloat ScaleZ,\nfloat Stretch,\nout vec3 New_P,\nout vec2 New_UV,\nout float Radial_Gradient,\nout vec3 Radial_Dir,\nout vec3 New_Normal)\n{vec2 UV=P.xy*2.0+0.5;vec2 center=clamp(UV,0.0,1.0);vec2 delta=UV-center;float deltad=(length(delta)*2.0);float f=(Bevel+(Radius-Bevel)*Stretch)/Radius;float innerd=clamp(deltad*2.0,0.0,1.0);float outerd=clamp(deltad*2.0-1.0,0.0,1.0);float bevelAngle=outerd*3.14159*0.5;float sinb=sin(bevelAngle);float cosb=cos(bevelAngle);float beveld=(1.0-f)*innerd+f*sinb;float br=outerd;vec2 r2=2.0*vec2(Radius/Anisotropy,Radius);float dir=P.z<0.0001 ? 1.0 : -1.0;New_UV=center+r2*((0.5-center)+normalize(delta+vec2(0.0,0.000001))*beveld*0.5);New_P=vec3(New_UV-0.5,P.z+dir*(1.0-cosb)*Bevel*ScaleZ);Radial_Gradient=clamp((deltad-0.5)*2.0,0.0,1.0);Radial_Dir=vec3(delta*r2,0.0);vec3 beveledNormal=cosb*Normal_Object+sinb*vec3(delta.x,delta.y,0.0);New_Normal=Normal_Object.z==0.0 ? Normal_Object : beveledNormal;}\nvoid Object_To_World_Dir_B210(\nvec3 Dir_Object,\nout vec3 Normal_World,\nout vec3 Normal_World_N,\nout float Normal_Length)\n{Normal_World=(world*vec4(Dir_Object,0.0)).xyz;Normal_Length=length(Normal_World);Normal_World_N=Normal_World/Normal_Length;}\nvoid To_XYZ_B228(\nvec3 Vec3,\nout float X,\nout float Y,\nout float Z)\n{X=Vec3.x;Y=Vec3.y;Z=Vec3.z;}\nvoid Conditional_Float_B243(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Object_To_World_Dir_B178(\nvec3 Dir_Object,\nout vec3 Binormal_World,\nout vec3 Binormal_World_N,\nout float Binormal_Length)\n{Binormal_World=(world*vec4(Dir_Object,0.0)).xyz;Binormal_Length=length(Binormal_World);Binormal_World_N=Binormal_World/Binormal_Length;}\nvoid Pick_Radius_B219(\nfloat Radius,\nfloat Radius_Top_Left,\nfloat Radius_Top_Right,\nfloat Radius_Bottom_Left,\nfloat Radius_Bottom_Right,\nvec3 Position,\nout float Result)\n{bool whichY=Position.y>0.0;Result=Position.x<0.0 ? (whichY ? Radius_Top_Left : Radius_Bottom_Left) : (whichY ? Radius_Top_Right : Radius_Bottom_Right);Result*=Radius;}\nvoid Conditional_Float_B186(\nbool Which,\nfloat If_True,\nfloat If_False,\nout float Result)\n{Result=Which ? If_True : If_False;}\nvoid Greater_Than_B187(\nfloat Left,\nfloat Right,\nout bool Not_Greater_Than,\nout bool Greater_Than)\n{Greater_Than=Left>Right;Not_Greater_Than=!Greater_Than;}\nvoid Remap_Range_B255(\nfloat In_Min,\nfloat In_Max,\nfloat Out_Min,\nfloat Out_Max,\nfloat In,\nout float Out)\n{Out=mix(Out_Min,Out_Max,clamp((In-In_Min)/(In_Max-In_Min),0.0,1.0));}\nvoid main()\n{vec2 XY_Q235;XY_Q235=(uv-vec2(0.5,0.5))*_Decal_Scale_XY_+vec2(0.5,0.5);vec3 Tangent_World_Q177;vec3 Tangent_World_N_Q177;float Tangent_Length_Q177;Tangent_World_Q177=(world*vec4(vec3(1,0,0),0.0)).xyz;Tangent_Length_Q177=length(Tangent_World_Q177);Tangent_World_N_Q177=Tangent_World_Q177/Tangent_Length_Q177;vec3 Normal_World_Q210;vec3 Normal_World_N_Q210;float Normal_Length_Q210;Object_To_World_Dir_B210(vec3(0,0,1),Normal_World_Q210,Normal_World_N_Q210,Normal_Length_Q210);float X_Q228;float Y_Q228;float Z_Q228;To_XYZ_B228(position,X_Q228,Y_Q228,Z_Q228);vec3 Nrm_World_Q176;Nrm_World_Q176=normalize((world*vec4(normal,0.0)).xyz);vec3 Binormal_World_Q178;vec3 Binormal_World_N_Q178;float Binormal_Length_Q178;Object_To_World_Dir_B178(vec3(0,1,0),Binormal_World_Q178,Binormal_World_N_Q178,Binormal_Length_Q178);float Anisotropy_Q179=Tangent_Length_Q177/Binormal_Length_Q178;float Result_Q219;Pick_Radius_B219(_Radius_,_Radius_Top_Left_,_Radius_Top_Right_,_Radius_Bottom_Left_,_Radius_Bottom_Right_,position,Result_Q219);float Anisotropy_Q203=Binormal_Length_Q178/Normal_Length_Q210;bool Not_Greater_Than_Q187;bool Greater_Than_Q187;Greater_Than_B187(Z_Q228,0.0,Not_Greater_Than_Q187,Greater_Than_Q187);vec4 Linear_Q251;Linear_Q251.rgb=clamp(_Left_Color_.rgb*_Left_Color_.rgb,0.0,1.0);Linear_Q251.a=_Left_Color_.a;vec4 Linear_Q252;Linear_Q252.rgb=clamp(_Right_Color_.rgb*_Right_Color_.rgb,0.0,1.0);Linear_Q252.a=_Right_Color_.a;vec3 Difference_Q211=vec3(0,0,0)-Normal_World_N_Q210;vec4 Out_Color_Q184=vec4(X_Q228,Y_Q228,Z_Q228,1);float Result_Q186;Conditional_Float_B186(Greater_Than_Q187,_Bevel_Back_,_Bevel_Front_,Result_Q186);float Result_Q244;Conditional_Float_B186(Greater_Than_Q187,_Bevel_Back_Stretch_,_Bevel_Front_Stretch_,Result_Q244);vec3 New_P_Q280;vec2 New_UV_Q280;float Radial_Gradient_Q280;vec3 Radial_Dir_Q280;vec3 New_Normal_Q280;Move_Verts_B280(Anisotropy_Q179,position,Result_Q219,Result_Q186,normal,Anisotropy_Q203,Result_Q244,New_P_Q280,New_UV_Q280,Radial_Gradient_Q280,Radial_Dir_Q280,New_Normal_Q280);float X_Q248;float Y_Q248;X_Q248=New_UV_Q280.x;Y_Q248=New_UV_Q280.y;vec3 Pos_World_Q162;Object_To_World_Pos_B162(New_P_Q280,Pos_World_Q162);vec3 Nrm_World_Q182;Object_To_World_Normal_B182(New_Normal_Q280,Nrm_World_Q182);vec4 Blob_Info_Q173;\n#if BLOB_ENABLE\nBlob_Vertex_B173(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_,_Blob_Intensity_,_Blob_Near_Size_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_,_Blob_Fade_,Blob_Info_Q173);\n#else\nBlob_Info_Q173=vec4(0,0,0,0);\n#endif\nvec4 Blob_Info_Q174;\n#if BLOB_ENABLE_2\nBlob_Vertex_B174(Pos_World_Q162,Nrm_World_Q176,Tangent_World_N_Q177,Binormal_World_N_Q178,_Blob_Position_2_,_Blob_Intensity_,_Blob_Near_Size_2_,_Blob_Far_Size_,_Blob_Near_Distance_,_Blob_Far_Distance_,_Blob_Fade_Length_,_Blob_Pulse_2_,_Blob_Fade_2_,Blob_Info_Q174);\n#else\nBlob_Info_Q174=vec4(0,0,0,0);\n#endif\nfloat Out_Q255;Remap_Range_B255(0.0,1.0,0.0,1.0,X_Q248,Out_Q255);float X_Q236;float Y_Q236;float Z_Q236;To_XYZ_B228(Nrm_World_Q182,X_Q236,Y_Q236,Z_Q236);vec4 Color_At_T_Q247=mix(Linear_Q251,Linear_Q252,Out_Q255);float Minus_F_Q237=-Z_Q236;float R_Q249;float G_Q249;float B_Q249;float A_Q249;R_Q249=Color_At_T_Q247.r; G_Q249=Color_At_T_Q247.g; B_Q249=Color_At_T_Q247.b; A_Q249=Color_At_T_Q247.a;float ClampF_Q238=clamp(0.0,Minus_F_Q237,1.0);float Result_Q243;Conditional_Float_B243(_Decal_Front_Only_,ClampF_Q238,1.0,Result_Q243);vec4 Vec4_Q239=vec4(Result_Q243,Radial_Gradient_Q280,G_Q249,B_Q249);vec3 Position=Pos_World_Q162;vec3 Normal=Nrm_World_Q182;vec2 UV=XY_Q235;vec3 Tangent=Tangent_World_N_Q177;vec3 Binormal=Difference_Q211;vec4 Color=Out_Color_Q184;vec4 Extra1=Vec4_Q239;vec4 Extra2=Blob_Info_Q173;vec4 Extra3=Blob_Info_Q174;gl_Position=viewProjection*vec4(Position,1);vPosition=Position;vNormal=Normal;vUV=UV;vTangent=Tangent;vBinormal=Binormal;vColor=Color;vExtra1=Extra1;vExtra2=Extra2;vExtra3=Extra3;}";
// Sideeffect
babylonjs_Engines_shaderStore__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
/** @internal */
var mrdlSliderThumbVertexShader = { name: name, shader: shader };


/***/ }),

/***/ "../../../dev/gui/src/3D/vector3WithInfo.ts":
/*!**************************************************!*\
  !*** ../../../dev/gui/src/3D/vector3WithInfo.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector3WithInfo: () => (/* binding */ Vector3WithInfo)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "../../../../node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babylonjs/Maths/math.vector */ "babylonjs/Misc/perfCounter");
/* harmony import */ var babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__);


/**
 * Class used to transport Vector3 information for pointer events
 */
var Vector3WithInfo = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(Vector3WithInfo, _super);
    /**
     * Creates a new Vector3WithInfo
     * @param source defines the vector3 data to transport
     * @param buttonIndex defines the current mouse button index
     */
    function Vector3WithInfo(source, 
    /** defines the current mouse button index */
    buttonIndex) {
        if (buttonIndex === void 0) { buttonIndex = 0; }
        var _this = _super.call(this, source.x, source.y, source.z) || this;
        _this.buttonIndex = buttonIndex;
        return _this;
    }
    return Vector3WithInfo;
}(babylonjs_Maths_math_vector__WEBPACK_IMPORTED_MODULE_0__.Vector3));



/***/ }),

/***/ "../../../dev/gui/src/index.ts":
/*!*************************************!*\
  !*** ../../../dev/gui/src/index.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractButton3D: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.AbstractButton3D),
/* harmony export */   AdvancedDynamicTexture: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTexture),
/* harmony export */   AdvancedDynamicTextureInstrumentation: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTextureInstrumentation),
/* harmony export */   BaseGradient: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.BaseGradient),
/* harmony export */   BaseSlider: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.BaseSlider),
/* harmony export */   Button: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Button),
/* harmony export */   Button3D: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.Button3D),
/* harmony export */   Checkbox: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Checkbox),
/* harmony export */   CheckboxGroup: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.CheckboxGroup),
/* harmony export */   ColorPicker: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.ColorPicker),
/* harmony export */   Container: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Container),
/* harmony export */   Container3D: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.Container3D),
/* harmony export */   Control: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Control),
/* harmony export */   Control3D: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.Control3D),
/* harmony export */   CornerHandle: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.CornerHandle),
/* harmony export */   CylinderPanel: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.CylinderPanel),
/* harmony export */   DisplayGrid: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.DisplayGrid),
/* harmony export */   Ellipse: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Ellipse),
/* harmony export */   FluentBackplateMaterial: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.FluentBackplateMaterial),
/* harmony export */   FluentButtonMaterial: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.FluentButtonMaterial),
/* harmony export */   FluentMaterial: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.FluentMaterial),
/* harmony export */   FluentMaterialDefines: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.FluentMaterialDefines),
/* harmony export */   FocusableButton: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.FocusableButton),
/* harmony export */   GUI3DManager: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.GUI3DManager),
/* harmony export */   GizmoHandle: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.GizmoHandle),
/* harmony export */   Grid: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Grid),
/* harmony export */   HandMenu: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.HandMenu),
/* harmony export */   HandleMaterial: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.HandleMaterial),
/* harmony export */   HandleState: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.HandleState),
/* harmony export */   HolographicBackplate: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.HolographicBackplate),
/* harmony export */   HolographicButton: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.HolographicButton),
/* harmony export */   HolographicSlate: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.HolographicSlate),
/* harmony export */   Image: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Image),
/* harmony export */   ImageBasedSlider: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.ImageBasedSlider),
/* harmony export */   ImageScrollBar: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.ImageScrollBar),
/* harmony export */   InputPassword: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.InputPassword),
/* harmony export */   InputText: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.InputText),
/* harmony export */   InputTextArea: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.InputTextArea),
/* harmony export */   KeyPropertySet: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.KeyPropertySet),
/* harmony export */   Line: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Line),
/* harmony export */   LinearGradient: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.LinearGradient),
/* harmony export */   MRDLBackplateMaterial: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.MRDLBackplateMaterial),
/* harmony export */   MRDLSliderBarMaterial: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderBarMaterial),
/* harmony export */   MRDLSliderThumbMaterial: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.MRDLSliderThumbMaterial),
/* harmony export */   MathTools: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.MathTools),
/* harmony export */   Matrix2D: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Matrix2D),
/* harmony export */   Measure: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Measure),
/* harmony export */   MeshButton3D: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.MeshButton3D),
/* harmony export */   MultiLine: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.MultiLine),
/* harmony export */   MultiLinePoint: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.MultiLinePoint),
/* harmony export */   NearMenu: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.NearMenu),
/* harmony export */   PlanePanel: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.PlanePanel),
/* harmony export */   RadialGradient: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.RadialGradient),
/* harmony export */   RadioButton: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.RadioButton),
/* harmony export */   RadioGroup: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.RadioGroup),
/* harmony export */   Rectangle: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Rectangle),
/* harmony export */   ScatterPanel: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.ScatterPanel),
/* harmony export */   ScrollBar: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.ScrollBar),
/* harmony export */   ScrollViewer: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.ScrollViewer),
/* harmony export */   SelectionPanel: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.SelectionPanel),
/* harmony export */   SelectorGroup: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.SelectorGroup),
/* harmony export */   SideHandle: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.SideHandle),
/* harmony export */   SlateGizmo: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.SlateGizmo),
/* harmony export */   Slider: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Slider),
/* harmony export */   Slider3D: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.Slider3D),
/* harmony export */   SliderGroup: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.SliderGroup),
/* harmony export */   SpherePanel: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.SpherePanel),
/* harmony export */   StackPanel: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.StackPanel),
/* harmony export */   StackPanel3D: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.StackPanel3D),
/* harmony export */   Style: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Style),
/* harmony export */   TextBlock: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.TextBlock),
/* harmony export */   TextWrapper: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapper),
/* harmony export */   TextWrapping: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapping),
/* harmony export */   ToggleButton: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.ToggleButton),
/* harmony export */   TouchButton3D: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchButton3D),
/* harmony export */   TouchHolographicButton: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicButton),
/* harmony export */   TouchHolographicButtonV3: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicButtonV3),
/* harmony export */   TouchHolographicMenu: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchHolographicMenu),
/* harmony export */   TouchMeshButton3D: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.TouchMeshButton3D),
/* harmony export */   ValueAndUnit: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.ValueAndUnit),
/* harmony export */   Vector2WithInfo: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.Vector2WithInfo),
/* harmony export */   Vector3WithInfo: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.Vector3WithInfo),
/* harmony export */   VirtualKeyboard: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.VirtualKeyboard),
/* harmony export */   VolumeBasedPanel: () => (/* reexport safe */ _3D_index__WEBPACK_IMPORTED_MODULE_1__.VolumeBasedPanel),
/* harmony export */   XmlLoader: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.XmlLoader),
/* harmony export */   name: () => (/* reexport safe */ _2D_index__WEBPACK_IMPORTED_MODULE_0__.name)
/* harmony export */ });
/* harmony import */ var _2D_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./2D/index */ "../../../dev/gui/src/2D/index.ts");
/* harmony import */ var _3D_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./3D/index */ "../../../dev/gui/src/3D/index.ts");
/* eslint-disable import/no-internal-modules */




/***/ }),

/***/ "../../../lts/gui/src/legacy/legacy.ts":
/*!*********************************************!*\
  !*** ../../../lts/gui/src/legacy/legacy.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractButton3D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.AbstractButton3D),
/* harmony export */   AdvancedDynamicTexture: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTexture),
/* harmony export */   AdvancedDynamicTextureInstrumentation: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.AdvancedDynamicTextureInstrumentation),
/* harmony export */   BaseGradient: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.BaseGradient),
/* harmony export */   BaseSlider: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.BaseSlider),
/* harmony export */   Button: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Button),
/* harmony export */   Button3D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Button3D),
/* harmony export */   Checkbox: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Checkbox),
/* harmony export */   CheckboxGroup: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.CheckboxGroup),
/* harmony export */   ColorPicker: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.ColorPicker),
/* harmony export */   Container: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Container),
/* harmony export */   Container3D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Container3D),
/* harmony export */   Control: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Control),
/* harmony export */   Control3D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Control3D),
/* harmony export */   CornerHandle: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.CornerHandle),
/* harmony export */   CylinderPanel: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.CylinderPanel),
/* harmony export */   DisplayGrid: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.DisplayGrid),
/* harmony export */   Ellipse: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Ellipse),
/* harmony export */   FluentBackplateMaterial: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.FluentBackplateMaterial),
/* harmony export */   FluentButtonMaterial: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.FluentButtonMaterial),
/* harmony export */   FluentMaterial: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.FluentMaterial),
/* harmony export */   FluentMaterialDefines: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.FluentMaterialDefines),
/* harmony export */   FocusableButton: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.FocusableButton),
/* harmony export */   GUI3DManager: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.GUI3DManager),
/* harmony export */   GizmoHandle: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.GizmoHandle),
/* harmony export */   Grid: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Grid),
/* harmony export */   HandMenu: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.HandMenu),
/* harmony export */   HandleMaterial: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.HandleMaterial),
/* harmony export */   HandleState: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.HandleState),
/* harmony export */   HolographicBackplate: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.HolographicBackplate),
/* harmony export */   HolographicButton: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.HolographicButton),
/* harmony export */   HolographicSlate: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.HolographicSlate),
/* harmony export */   Image: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Image),
/* harmony export */   ImageBasedSlider: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.ImageBasedSlider),
/* harmony export */   ImageScrollBar: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.ImageScrollBar),
/* harmony export */   InputPassword: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.InputPassword),
/* harmony export */   InputText: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.InputText),
/* harmony export */   InputTextArea: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.InputTextArea),
/* harmony export */   KeyPropertySet: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.KeyPropertySet),
/* harmony export */   Line: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Line),
/* harmony export */   LinearGradient: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.LinearGradient),
/* harmony export */   MRDLBackplateMaterial: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.MRDLBackplateMaterial),
/* harmony export */   MRDLSliderBarMaterial: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.MRDLSliderBarMaterial),
/* harmony export */   MRDLSliderThumbMaterial: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.MRDLSliderThumbMaterial),
/* harmony export */   MathTools: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.MathTools),
/* harmony export */   Matrix2D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Matrix2D),
/* harmony export */   Measure: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Measure),
/* harmony export */   MeshButton3D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.MeshButton3D),
/* harmony export */   MultiLine: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.MultiLine),
/* harmony export */   MultiLinePoint: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.MultiLinePoint),
/* harmony export */   NearMenu: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.NearMenu),
/* harmony export */   PlanePanel: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.PlanePanel),
/* harmony export */   RadialGradient: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.RadialGradient),
/* harmony export */   RadioButton: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.RadioButton),
/* harmony export */   RadioGroup: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.RadioGroup),
/* harmony export */   Rectangle: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Rectangle),
/* harmony export */   ScatterPanel: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.ScatterPanel),
/* harmony export */   ScrollBar: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.ScrollBar),
/* harmony export */   ScrollViewer: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.ScrollViewer),
/* harmony export */   SelectionPanel: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.SelectionPanel),
/* harmony export */   SelectorGroup: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.SelectorGroup),
/* harmony export */   SideHandle: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.SideHandle),
/* harmony export */   SlateGizmo: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.SlateGizmo),
/* harmony export */   Slider: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Slider),
/* harmony export */   Slider3D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Slider3D),
/* harmony export */   SliderGroup: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.SliderGroup),
/* harmony export */   SpherePanel: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.SpherePanel),
/* harmony export */   StackPanel: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.StackPanel),
/* harmony export */   StackPanel3D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.StackPanel3D),
/* harmony export */   Style: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Style),
/* harmony export */   TextBlock: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.TextBlock),
/* harmony export */   TextWrapper: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapper),
/* harmony export */   TextWrapping: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.TextWrapping),
/* harmony export */   ToggleButton: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.ToggleButton),
/* harmony export */   TouchButton3D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.TouchButton3D),
/* harmony export */   TouchHolographicButton: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicButton),
/* harmony export */   TouchHolographicButtonV3: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicButtonV3),
/* harmony export */   TouchHolographicMenu: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.TouchHolographicMenu),
/* harmony export */   TouchMeshButton3D: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.TouchMeshButton3D),
/* harmony export */   ValueAndUnit: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.ValueAndUnit),
/* harmony export */   Vector2WithInfo: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Vector2WithInfo),
/* harmony export */   Vector3WithInfo: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.Vector3WithInfo),
/* harmony export */   VirtualKeyboard: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.VirtualKeyboard),
/* harmony export */   VolumeBasedPanel: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.VolumeBasedPanel),
/* harmony export */   XmlLoader: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.XmlLoader),
/* harmony export */   name: () => (/* reexport safe */ gui_index__WEBPACK_IMPORTED_MODULE_0__.name)
/* harmony export */ });
/* harmony import */ var gui_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gui/index */ "../../../dev/gui/src/index.ts");
/* eslint-disable import/no-internal-modules */

/**
 * Legacy support, defining window.BABYLON.GUI (global variable).
 *
 * This is the entry point for the UMD module.
 * The entry point for a future ESM package should be index.ts
 */
var globalObject = typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof window !== "undefined" ? window : undefined;
if (typeof globalObject !== "undefined") {
    globalObject.BABYLON = globalObject.BABYLON || {};
    if (!globalObject.BABYLON.GUI) {
        globalObject.BABYLON.GUI = gui_index__WEBPACK_IMPORTED_MODULE_0__;
    }
}



/***/ }),

/***/ "babylonjs/Misc/perfCounter":
/*!****************************************************************************************************!*\
  !*** external {"root":"BABYLON","commonjs":"babylonjs","commonjs2":"babylonjs","amd":"babylonjs"} ***!
  \****************************************************************************************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE_babylonjs_Misc_perfCounter__;

/***/ }),

/***/ "../../../../node_modules/tslib/tslib.es6.mjs":
/*!****************************************************!*\
  !*** ../../../../node_modules/tslib/tslib.es6.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
/* harmony export */   __await: () => (/* binding */ __await),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   __createBinding: () => (/* binding */ __createBinding),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),
/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),
/* harmony export */   __exportStar: () => (/* binding */ __exportStar),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __importDefault: () => (/* binding */ __importDefault),
/* harmony export */   __importStar: () => (/* binding */ __importStar),
/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
/* harmony export */   __metadata: () => (/* binding */ __metadata),
/* harmony export */   __param: () => (/* binding */ __param),
/* harmony export */   __propKey: () => (/* binding */ __propKey),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),
/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),
/* harmony export */   __spread: () => (/* binding */ __spread),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
/* harmony export */   __values: () => (/* binding */ __values),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
      }
      catch (e) {
          fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   gui: () => (/* reexport module object */ _lts_gui_legacy_legacy__WEBPACK_IMPORTED_MODULE_0__)
/* harmony export */ });
/* harmony import */ var _lts_gui_legacy_legacy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lts/gui/legacy/legacy */ "../../../lts/gui/src/legacy/legacy.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_lts_gui_legacy_legacy__WEBPACK_IMPORTED_MODULE_0__);

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFieWxvbi5ndWkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ1JBO0FBS0E7O0FBRUE7QUFDQTtBQXdGQTs7OztBQUlBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQUE7QUFoR0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdUZBO0FBaEZBO0FBTEE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQXZCQTtBQTRCQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUF2QkE7QUFvQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0hBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFLQTs7O0FBR0E7QUFDQTtBQUFBO0FBaVdBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBaldBO0FBQ0E7QUFFQTtBQVlBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUNBO0FBTUE7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQTJOQTs7OztBQUlBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBMkZBO0FBYUE7QUFDQTtBQThRQTtBQXdQQTtBQXFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEwU0E7Ozs7OztBQU1BO0FBQ0E7QUFsOUJBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBbFdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFzREE7QUFKQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUEE7QUFTQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVBBO0FBYUE7QUFMQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFjQTtBQUxBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFSQTtBQWFBO0FBSkE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFhQTtBQUpBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFQQTtBQWFBO0FBSkE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFJQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWkE7QUFnQkE7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFIQTtBQW1GQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQUpBO0FBUUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBdEJBO0FBQUE7QUFBQTtBQXVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE2QkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFXQTs7Ozs7OztBQU9BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQUE7QUFDQTtBQUNBOzs7O0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7OztBQU9BO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7O0FBQUE7QUFDQTtBQUNBOzs7O0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVlBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQWxrREE7QUFDQTtBQUVBO0FBQ0E7QUErakRBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdm1EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7O0FBRUE7QUFDQTtBQUFBO0FBa0NBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUE1Q0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFNQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQW9DQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVUQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTs7QUFFQTtBQUNBO0FBQUE7QUEyRUE7OztBQUdBO0FBQ0E7QUFBQTtBQUFBO0FBOUVBO0FBQ0E7QUFDQTtBQUNBO0FBaUJBOztBQUVBO0FBQ0E7QUF5REE7O0FBQ0E7QUExRUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWtCQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBWEE7QUFlQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBYUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7OztBQVhBO0FBc0JBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQTdLQTtBQURBO0FBR0E7QUFrQkE7QUFEQTtBQUdBO0FBZUE7QUFEQTtBQUdBO0FBYUE7QUFEQTtBQUdBO0FBd0hBO0FBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JNQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBb0lBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQXBJQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7O0FBRUE7QUFDQTtBQXVTQTtBQUNBO0FBckxBO0FBQ0E7QUFDQTs7QUFDQTtBQWxIQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUExQ0E7QUFpREE7QUFMQTs7O0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZkE7QUFzQkE7QUFMQTs7O0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFoQkE7QUFvQkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBSkE7QUFpQkE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7Ozs7O0FBY0E7QUFDQTtBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF6OUNBO0FBMEJBO0FBREE7QUFHQTtBQWlEQTtBQURBO0FBR0E7QUFzQkE7QUFEQTtBQUdBO0FBb0JBO0FBREE7QUFHQTtBQTYxQ0E7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOStDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFBQTtBQXNJQTs7O0FBR0E7QUFDQTtBQUFBO0FBQUE7QUF6SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUVBO0FBZUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBRUE7QUF1TkE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUE0TkE7QUFDQTs7QUE5VkE7QUFsSEE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFQQTtBQXNCQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQWRBO0FBa0JBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBZEE7QUFrQkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWFBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFXQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7OztBQVJBO0FBa0JBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFZQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBU0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBS0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBVUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBNXJCQTtBQURBO0FBQ0E7QUFJQTtBQURBO0FBR0E7QUFrQkE7QUFEQTtBQUNBO0FBSUE7QUFEQTtBQUdBO0FBa0JBO0FBREE7QUFHQTtBQWtCQTtBQURBO0FBR0E7QUFhQTtBQURBO0FBR0E7QUF3bUJBO0FBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3R1QkE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBU0E7OztBQUdBO0FBQ0E7QUFzMUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUF4MUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTs7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBNkJBOztBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7Ozs7OztBQU1BO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFjQTtBQWNBOztBQUVBO0FBRUE7QUFJQTtBQWdCQTtBQWdCQTtBQUNBO0FBa0JBO0FBZ0JBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQThCQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBa0VBOztBQUVBO0FBRUE7QUFnSkE7QUFxQkE7QUErcEJBOztBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBV0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTR5QkE7QUF2dUJBO0FBeHVDQTtBQUpBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBSkE7QUFTQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQTZCQTtBQUtBO0FBQ0E7QUFDQTtBQVhBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFZQTtBQUtBO0FBQ0E7QUFDQTtBQVhBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFrQkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWNBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFlQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7O0FBWEE7QUFnQkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQXVCQTtBQUhBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFLQTtBQUNBO0FBQ0E7QUFYQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFnRkE7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFJQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFKQTtBQVFBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFUQTtBQWNBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFjQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBb0JBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFlQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBVkE7QUFnQkE7QUFKQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQVZBO0FBZ0JBO0FBSkE7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFWQTtBQWdCQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBVkE7QUFnQkE7QUFKQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQVZBO0FBaUJBO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBZ0JBO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBWUE7QUFTQTs7Ozs7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQWxCQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBQUE7QUFjQTtBQVFBOzs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQWdCQTtBQUxBOzs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWkE7QUFrQkE7QUFKQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFlQTtBQUxBOzs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWkE7QUFrQkE7QUFKQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFXQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBWUE7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVlBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFnQkE7QUFMQTs7O0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBbkJBO0FBc0JBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFQQTtBQVVBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVhBO0FBZUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWFBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFaQTtBQWdCQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBYUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7OztBQVhBO0FBY0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQU9BO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBZ0JBO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBTkE7QUFZQTtBQUpBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUEE7QUFVQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQU9BO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBTkE7QUFZQTtBQUpBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUEE7QUFVQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQU9BO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBTkE7QUFZQTtBQUpBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUEE7QUFVQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQU9BO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBTkE7QUFZQTtBQUpBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUEE7QUFVQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQU9BO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBTkE7QUFZQTtBQUpBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUEE7QUFjQTtBQUxBOzs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQU5BO0FBWUE7QUFKQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVBBO0FBY0E7QUFMQTs7O0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFOQTtBQVlBO0FBSkE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFQQTtBQWNBO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBTkE7QUFZQTtBQUpBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUEE7QUFVQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBSUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUExQkE7QUE2QkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVlBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFxQ0E7QUFKQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUhBO0FBdUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQU1BO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQVNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7Ozs7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBWUE7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBSUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBRUE7QUFFQTtBQUNBO0FBSUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE1d0ZBOztBQUVBO0FBQ0E7QUFpa0VBO0FBdWxCQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQWdDQTtBQStDQTtBQXhtRkE7QUFEQTtBQUNBO0FBSUE7QUFEQTtBQUNBO0FBU0E7QUFEQTtBQUNBO0FBR0E7QUFEQTtBQUNBO0FBWUE7QUFEQTtBQUdBO0FBWUE7QUFEQTtBQUdBO0FBTUE7QUFEQTtBQUNBO0FBT0E7QUFEQTtBQUdBO0FBY0E7QUFEQTtBQUdBO0FBZUE7QUFEQTtBQUdBO0FBZ0JBO0FBREE7QUFHQTtBQWFBO0FBREE7QUFDQTtBQW1IQTtBQURBO0FBR0E7QUFRQTtBQURBO0FBR0E7QUErQ0E7QUFEQTtBQUNBO0FBc0JBO0FBREE7QUFHQTtBQWdCQTtBQURBO0FBR0E7QUFnQkE7QUFEQTtBQUdBO0FBZ0JBO0FBREE7QUFHQTtBQWdCQTtBQURBO0FBR0E7QUFpQkE7QUFEQTtBQUdBO0FBZ0JBO0FBREE7QUFHQTtBQTRCQTtBQURBO0FBR0E7QUFnQkE7QUFEQTtBQUdBO0FBT0E7QUFEQTtBQUdBO0FBbUNBO0FBREE7QUFHQTtBQTZFQTtBQURBO0FBR0E7QUE4REE7QUFEQTtBQUdBO0FBYUE7QUFEQTtBQUdBO0FBYUE7QUFEQTtBQUdBO0FBZ0JBO0FBREE7QUFHQTtBQWFBO0FBREE7QUFHQTtBQThCQTtBQURBO0FBR0E7QUFnQkE7QUFEQTtBQUdBO0FBcUNBO0FBREE7QUFHQTtBQXFDQTtBQURBO0FBR0E7QUFxQ0E7QUFEQTtBQUdBO0FBcUNBO0FBREE7QUFHQTtBQTRCQTtBQURBO0FBR0E7QUE0QkE7QUFEQTtBQUdBO0FBNEJBO0FBREE7QUFHQTtBQW1DQTtBQURBO0FBR0E7QUE2QkE7QUFEQTtBQUdBO0FBWUE7QUFEQTtBQUdBO0FBa0JBO0FBREE7QUFDQTtBQUtBO0FBREE7QUFDQTtBQXloREE7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ256RkE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBa0pBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQXJKQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTs7QUF5SUE7QUFySUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWFBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBYUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOzs7QUFOQTtBQVVBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTs7O0FBTkE7QUFVQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7OztBQU5BO0FBVUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOzs7QUFOQTtBQVVBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTs7O0FBTkE7QUFVQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7OztBQU5BO0FBVUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOzs7QUFOQTtBQWdCQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBOU1BO0FBREE7QUFHQTtBQWFBO0FBREE7QUFHQTtBQWFBO0FBREE7QUFHQTtBQWFBO0FBREE7QUFHQTtBQVVBO0FBREE7QUFHQTtBQVVBO0FBREE7QUFHQTtBQVVBO0FBREE7QUFHQTtBQVVBO0FBREE7QUFHQTtBQVVBO0FBREE7QUFHQTtBQVVBO0FBREE7QUFHQTtBQXdGQTtBQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pPQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQW1DQTs7O0FBR0E7QUFDQTtBQUFBO0FBQUE7QUF0Q0E7QUFpQkE7O0FBdUJBO0FBcENBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFlQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBbUJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQVNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVNBO0FBQ0E7QUFFQTtBQUNBO0FBUUE7QUFDQTtBQXJIQTtBQURBO0FBR0E7QUFlQTtBQURBO0FBR0E7QUFtR0E7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xJQTtBQUVBO0FBSUE7OztBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUdBOztBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBRS9CQTs7QUFFQTtBQWtCQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBdUZBO0FBL0VBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEhBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFBQTtBQU1BOzs7Ozs7QUFNQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckZBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFBQTtBQVFBOzs7Ozs7OztBQVFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4R0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBbVhBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQXRYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBbVhBO0FBN1dBO0FBVUE7QUFDQTtBQUNBO0FBaEJBOzs7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQVdBO0FBU0E7QUFDQTtBQUNBO0FBZkE7OztBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBU0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7Ozs7QUFNQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsa0JBO0FBREE7QUFHQTtBQWlrQkE7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3ptQkE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBZ3ZCQTs7OztBQUlBO0FBQ0E7QUFFQTtBQUZBO0FBQ0E7QUFodkJBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFPQTtBQUlBO0FBVUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFvc0JBOztBQUNBO0FBMXJCQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQU9BO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFSQTtBQWNBO0FBSkE7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTs7O0FBVkE7QUFnQkE7QUFKQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFWQTtBQWdCQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7OztBQVZBO0FBZ0JBO0FBSkE7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTs7O0FBVkE7QUFnQkE7QUFKQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFWQTtBQWdCQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7OztBQVZBO0FBZ0JBO0FBSkE7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTs7O0FBVkE7QUFnQkE7QUFKQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFWQTtBQWVBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFNQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFaQTtBQWVBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFPQTtBQUxBOzs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWkE7QUFnQkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFWQTtBQVlBOztBQUVBO0FBQ0E7O0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFLQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQWNBO0FBQ0E7QUFDQTtBQW5CQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQU1BO0FBSkE7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUEyQkE7O0FBRUE7QUFDQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUF0R0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQStFQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVJBO0FBZUE7QUFMQTs7O0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBUkE7QUFlQTtBQUxBOzs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFSQTtBQXVCQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV0E7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBeDlCQTs7QUFFQTtBQUNBO0FBdTlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBLzdCQTtBQURBO0FBR0E7QUFjQTtBQURBO0FBR0E7QUFnQkE7QUFEQTtBQUdBO0FBZ0JBO0FBREE7QUFHQTtBQWdCQTtBQURBO0FBR0E7QUFnQkE7QUFEQTtBQUdBO0FBZ0JBO0FBREE7QUFHQTtBQWdCQTtBQURBO0FBR0E7QUFnQkE7QUFEQTtBQUdBO0FBOEJBO0FBREE7QUFHQTtBQTZCQTtBQURBO0FBR0E7QUFnQkE7QUFEQTtBQUdBO0FBc01BO0FBREE7QUFHQTtBQTJNQTtBQURBO0FBR0E7QUFlQTtBQURBO0FBR0E7QUFlQTtBQURBO0FBR0E7QUF3U0E7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3aENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNqQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQUE7O0FBY0E7QUFiQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEJBO0FBR0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFJQTs7QUFFQTtBQUNBO0FBQUE7QUEwV0E7Ozs7QUFJQTtBQUNBO0FBRUE7QUFGQTtBQUNBO0FBOVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBRUE7QUFDQTtBQUVBO0FBZ0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQStSQTtBQUNBO0FBQ0E7O0FBQ0E7QUF4VUE7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFSQTtBQWFBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUF5QkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQWZBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFjQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVJBO0FBV0E7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWFBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFZQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZkE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQWNBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBYUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVlBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBQUE7QUFJQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBYUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWFBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFZQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFKQTtBQU9BO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUEE7QUFVQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFKQTtBQU9BO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQUpBO0FBUUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWRBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFaQTtBQThCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBOztBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQU1BO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQVFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE5aUNBO0FBREE7QUFDQTtBQUdBO0FBREE7QUFDQTtBQStDQTtBQURBO0FBR0E7QUFtQkE7QUFEQTtBQUdBO0FBV0E7QUFEQTtBQUdBO0FBYUE7QUFEQTtBQUdBO0FBWUE7QUFEQTtBQUdBO0FBbUJBO0FBREE7QUFHQTtBQWFBO0FBREE7QUFHQTtBQWFBO0FBREE7QUFHQTtBQXVCQTtBQURBO0FBR0E7QUFhQTtBQURBO0FBR0E7QUFhQTtBQURBO0FBR0E7QUFZQTtBQURBO0FBR0E7QUFzQ0E7QUFEQTtBQUdBO0FBK0JBO0FBREE7QUFHQTtBQTJ2QkE7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDNW1DQTtBQUdBO0FBQ0E7QUFFQTtBQUVBO0FBS0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFtRkE7Ozs7QUFJQTtBQUNBO0FBRUE7QUFGQTtBQUNBO0FBeEZBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFRQTs7QUFFQTtBQUNBO0FBMkVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQTdFQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBV0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQUE7QUFHQTtBQUFBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQWZBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUE0Q0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQTdCQTtBQUFBO0FBOEJBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQU1BO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQXhvQ0E7QUFEQTtBQUdBO0FBMEJBO0FBREE7QUFHQTtBQTJtQ0E7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvckNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQXVKQTs7O0FBR0E7QUFDQTtBQUFBO0FBQUE7QUExSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFvSkE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFuSkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVlBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQWxCQTtBQXNCQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBVkE7QUFjQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBVkE7QUFjQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBVkE7QUFjQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBVkE7QUFjQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBWUE7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFnQkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXhPQTtBQURBO0FBR0E7QUFvQ0E7QUFEQTtBQUdBO0FBY0E7QUFEQTtBQUdBO0FBY0E7QUFEQTtBQUdBO0FBY0E7QUFEQTtBQUdBO0FBY0E7QUFEQTtBQUdBO0FBaUlBO0FBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdlFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFHQTs7QUFFQTtBQUNBO0FBQUE7QUFVQTs7O0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFiQTtBQXFEQTtBQUNBO0FBQ0E7QUFDQTtBQXhDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBQ0E7QUFJQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBV0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQU9BOzs7O0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBV0E7QUFBQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUF0UEE7QUFEQTtBQUdBO0FBcVBBO0FBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2pTQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTs7QUFFQTtBQUNBO0FBQUE7QUE4RkE7OztBQUdBO0FBQ0E7QUFBQTtBQUFBO0FBakdBO0FBQ0E7QUFDQTtBQUNBO0FBaUJBO0FBRUE7QUFFQTtBQUNBO0FBMkVBOztBQUNBO0FBOUZBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFvQkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVhBO0FBZUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWFBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQTVCQTtBQXdDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUE5TUE7QUFEQTtBQUdBO0FBYUE7QUFEQTtBQUNBO0FBT0E7QUFEQTtBQUdBO0FBZUE7QUFEQTtBQUdBO0FBYUE7QUFEQTtBQUdBO0FBdUpBO0FBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0T0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBMkZBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQTlGQTtBQUNBO0FBQ0E7O0FBOEZBO0FBMUZBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQWJBO0FBaUJBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVBBO0FBV0E7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUEE7QUFXQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFQQTtBQVdBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVBBO0FBaUJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBTUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXBOQTtBQURBO0FBR0E7QUFhQTtBQURBO0FBR0E7QUFpQkE7QUFEQTtBQUdBO0FBV0E7QUFEQTtBQUdBO0FBV0E7QUFEQTtBQUdBO0FBV0E7QUFEQTtBQUdBO0FBMElBO0FBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2pPQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBb0pBOzs7O0FBSUE7QUFDQTtBQUFBO0FBMUlBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMEZBO0FBQ0E7QUFvQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBeExBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBTEE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBSkE7QUFPQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFOQTtBQVdBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFOQTtBQWdGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFPQTtBQUxBOzs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBaEJBO0FBb0JBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFZQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBVkE7QUFhQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVpBO0FBZUE7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQVZBO0FBYUE7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQVZBO0FBY0E7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFoQkE7QUFtQkE7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWxCQTtBQXFCQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBbEJBO0FBcUJBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFsQkE7QUFxQkE7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBaEJBO0FBbUJBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWhCQTtBQW9CQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBYkE7QUFnQkE7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFSQTtBQVdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFOQTtBQVNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFOQTtBQVFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXphQTtBQURBO0FBR0E7QUFvQkE7QUFEQTtBQUdBO0FBWUE7QUFEQTtBQUdBO0FBNkRBO0FBREE7QUFHQTtBQW1JQTtBQURBO0FBR0E7QUFnTUE7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsc0JBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7OztBQUdBO0FBQ0E7QUFBQTtBQWtLQTs7O0FBR0E7QUFDQTtBQUFBO0FBbEtBO0FBOENBO0FBQ0E7QUFDQTs7QUFvSEE7QUEvSkE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFyQ0E7QUE0Q0E7QUFBQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFLQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQVZBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFSQTtBQVVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFBQTs7QUE4REE7QUE3REE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQWtFQTtBQWhFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUFBOztBQXFGQTtBQXBGQTs7Ozs7Ozs7O0FBU0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBWUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUpBO0FBRUE7QUFFQTtBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVJBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlwQkE7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQW9MQTs7O0FBR0E7QUFDQTtBQUFBO0FBQUE7QUF2TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBU0E7QUFDQTtBQW9QQTtBQUNBO0FBbEZBOztBQUNBO0FBaEtBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBYUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQWZBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFjQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBZkE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQWNBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOzs7QUFYQTtBQWVBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOzs7QUFYQTtBQWVBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQVpBO0FBZ0JBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBcUJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQTlTQTtBQURBO0FBR0E7QUFhQTtBQURBO0FBR0E7QUFhQTtBQURBO0FBR0E7QUFtQkE7QUFEQTtBQUdBO0FBbUJBO0FBREE7QUFHQTtBQWVBO0FBREE7QUFHQTtBQWVBO0FBREE7QUFHQTtBQWdCQTtBQURBO0FBR0E7QUFhQTtBQURBO0FBR0E7QUFrS0E7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3ZWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7O0FBRUE7QUFDQTtBQUFBO0FBbUZBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQW5GQTs7QUFxRkE7QUFsRkE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFjQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBZEE7QUFtQkE7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQWRBO0FBbUJBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFkQTtBQXdCQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWxMQTtBQURBO0FBR0E7QUFpTEE7QUFBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyTUE7QUFHQTtBQUVBO0FBR0E7O0FBRUE7QUFDQTtBQUFBO0FBZ0tBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQS9KQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTs7QUF5SkE7QUFySkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBSkE7QUFTQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQW5DQTtBQXdDQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQW5DQTtBQXdDQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7OztBQVZBO0FBZUE7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFWQTtBQWVBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTs7O0FBVkE7QUFvQkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFNQTtBQUFBO0FBQ0E7QUFNQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQU1BOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFuUkE7QUFEQTtBQUNBO0FBSUE7QUFEQTtBQUdBO0FBOFFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVTQTtBQUVBO0FBRUE7QUFLQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBNkRBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQWhFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQThEQTtBQTFEQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBYUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVlBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFKQTtBQWNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQU1BOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF4TEE7QUFEQTtBQUdBO0FBYUE7QUFEQTtBQUdBO0FBMkJBO0FBREE7QUFHQTtBQTJJQTtBQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbk5BO0FBQ0E7QUFDQTtBQUtBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBaUdBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQXBHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBaUdBO0FBN0ZBO0FBRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBYUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVlBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFhQTtBQUZBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBYUE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQW1CQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE1UUE7QUFEQTtBQUdBO0FBYUE7QUFEQTtBQUdBO0FBYUE7QUFEQTtBQUdBO0FBMkJBO0FBREE7QUFHQTtBQWFBO0FBREE7QUFHQTtBQWlNQTtBQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BTQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBMkZBOzs7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQTlGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFFQTs7QUFzRkE7QUFsRkE7QUFGQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWVBO0FBSkE7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFnQkE7QUFjQTtBQUNBO0FBQ0E7QUFyQkE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFXQTtBQWNBO0FBQ0E7QUFDQTtBQXJCQTs7O0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQWNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFyUEE7QUFEQTtBQUNBO0FBSUE7QUFEQTtBQUdBO0FBZUE7QUFEQTtBQUdBO0FBZ0JBO0FBREE7QUFhQTtBQVdBO0FBREE7QUFhQTtBQTRLQTtBQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlRQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUVBO0FBRUE7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdERBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFnVEE7Ozs7QUFJQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBTEE7QUFJQTtBQXhUQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBY0E7O0FBRUE7QUFDQTtBQXdaQTtBQWlDQTtBQXJLQTs7QUFDQTtBQWhSQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQU9BO0FBTEE7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBbEJBO0FBd0JBO0FBSkE7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFYQTtBQWlCQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFiQTtBQW1CQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBWkE7QUFrQkE7QUFKQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVpBO0FBa0JBO0FBTUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFmQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBYUE7QUFKQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVhBO0FBaUJBO0FBSkE7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFYQTtBQWlCQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWEE7QUFpQkE7QUFKQTs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFSQTtBQWNBO0FBSkE7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFYQTtBQWlCQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWEE7QUFtQkE7QUFOQTs7OztBQUlBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVJBO0FBMkJBO0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTs7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQTlvQkE7QUFEQTtBQUdBO0FBd0JBO0FBREE7QUFHQTtBQWlCQTtBQURBO0FBR0E7QUFtQkE7QUFEQTtBQUdBO0FBa0JBO0FBREE7QUFHQTtBQWtCQTtBQURBO0FBS0E7QUFhQTtBQURBO0FBR0E7QUFpQkE7QUFEQTtBQUdBO0FBaUJBO0FBREE7QUFHQTtBQWlCQTtBQURBO0FBR0E7QUFjQTtBQURBO0FBR0E7QUFpQkE7QUFEQTtBQUdBO0FBbUJBO0FBREE7QUFHQTtBQWlhQTtBQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbnZCQTtBQUNBO0FBQUE7QUF3RkE7QUFwRkE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBTEE7QUFPQTtBQUFBO0FBQ0E7QUFDQTs7O0FBQUE7QUFFQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hGQTtBQUdBO0FBRUE7QUFHQTs7O0FBR0E7QUFDQTtBQUFBO0FBK0dBOzs7O0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUF4RUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFlQTtBQXVEQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBekhBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQVBBO0FBV0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUF2Q0E7QUE0R0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM1RBO0FBRUE7QUFDQTtBQUlBO0FBRUE7QUFHQTs7QUFFQTtBQUNBO0FBQUE7QUFpQkE7QUFBQTtBQUFBOztBQVFBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFtR0E7QUFDQTtBQUNBOztBQTBLQTtBQTdRQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBTEE7QUFBQTtBQUFBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzVkE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1RBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFIQTtBQUdBOztBQUdBO0FBQ0E7QUFBQTs7QUFFQTtBQUNBO0FBSUE7Ozs7Ozs7O0FBUUE7QUFDQTtBQVpBO0FBQ0E7QUFZQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBVUE7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBOEJBO0FBQUE7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFrQkE7QUFUQTs7Ozs7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBaEJBOzs7OztBQUtBO0FBQ0E7QUFXQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3hRQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkpBO0FBQ0E7QUFLQTtBQUdBOzs7QUFHQTtBQUNBO0FBY0E7OztBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQVZBO0FBYUE7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQVZBO0FBYUE7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQXBCQTtBQXVCQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQWxCQTtBQW9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0pBO0FBR0E7QUFFQTs7O0FBR0E7QUFDQTtBQWNBOzs7QUFHQTtBQUNBO0FBakJBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBT0E7QUFDQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFWQTtBQWVBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFjQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBWUE7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEdBO0FBR0E7O0FBRUE7QUFDQTtBQWdCQTs7Ozs7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUVBO0FBQUE7QUExQkE7QUFDQTtBQUdBOzs7QUFHQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQU1BO0FBSkE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBUkE7QUFXQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVJBO0FBVUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFRQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBYkE7QUFDQTtBQUNBO0FBQ0E7QUFXQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDck9BO0FBR0E7QUFFQTs7QUFFQTtBQUNBO0FBdUJBOzs7QUFHQTtBQUNBO0FBQUE7QUExQkE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoWUE7QUFDQTtBQUtBO0FBS0E7Ozs7QUFJQTtBQUNBO0FBUUE7O0FBRUE7QUFDQTtBQXVDQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFuREE7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQWlCQTs7QUFFQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUEyVkE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFBQTtBQXRVQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBVUE7QUFPQTtBQUNBO0FBd09BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUE3UUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBV0E7QUFDQTtBQUNBO0FBaEJBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBUUE7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFNQTtBQWlEQTs7QUFDQTtBQUNBO0FBdkRBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQVNBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFjQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBY0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWNBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQXVFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdi9CQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQWkrQkE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1aENBO0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hCQTtBQUdBO0FBRUE7QUFHQTtBQUVBO0FBc0JBOztBQUVBO0FBQ0E7QUFBQTtBQVFBOzs7O0FBSUE7QUFDQTtBQUFBO0FBR0E7QUFPQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pKQTtBQUdBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBbUNBOzs7QUFHQTtBQUNBO0FBQUE7QUF0Q0E7QUFFQTs7QUFFQTtBQUNBOztBQW1DQTtBQTlCQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQU1BO0FBSkE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFaQTtBQXNCQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUpBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUNBOztBQStFQTtBQXpFQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7OztBQTNCQTtBQTZCQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0ZBO0FBQ0E7QUFDQTtBQUVBO0FBS0E7QUFLQTs7QUFFQTtBQUNBO0FBd0xBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBNUxBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQThDQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFPQTtBQUNBO0FBa0dBO0FBakxBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQVJBO0FBV0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQThEQTtBQUpBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFiQTtBQTJCQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDamZBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBc0RBO0FBakRBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWkE7QUFjQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvREE7QUFDQTtBQUdBOzs7QUFHQTtBQUNBO0FBQUE7QUFrQkE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQXhCQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFnQkE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsREE7QUFFQTtBQUNBO0FBQ0E7QUFHQTs7O0FBR0E7QUFDQTtBQUFBO0FBcUNBOzs7O0FBSUE7QUFDQTtBQUVBO0FBRkE7QUFFQTs7QUFHQTtBQS9CQTtBQUdBO0FBQ0E7QUFDQTtBQVJBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQVFBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFjQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7O0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBN0dBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBdUdBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1SEE7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQTBLQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUFBO0FBektBO0FBNEtBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUE5S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBU0E7QUFDQTtBQUNBO0FBZEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQVFBO0FBaURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXpEQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBWUE7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWNBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFjQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQTRCQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25YQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUtBOzs7QUFHQTtBQUNBO0FBQUE7QUFxSUE7OztBQUdBO0FBQ0E7QUFBQTtBQXpIQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFRQTtBQXdCQTtBQTRCQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQTZDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQXZHQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQWlCQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQW5CQTtBQWtDQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFIQTtBQVFBO0FBTUE7QUFDQTtBQUNBO0FBWEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBUUE7QUFNQTtBQUNBO0FBQ0E7QUFYQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFzQkE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBbGRBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBO0FBc2NBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEJBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBSUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFFQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuRUE7QUFDQTtBQUNBO0FBS0E7OztBQUdBO0FBQ0E7QUFBQTtBQWtHQTs7O0FBR0E7QUFDQTtBQUFBO0FBM0VBO0FBOEVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUF4RkE7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFNQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBaEJBO0FBa0JBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBaUJBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQXhIQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQWtIQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6SUE7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQUE7O0FBMEJBO0FBekJBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuQ0E7QUFDQTtBQUdBO0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBdUdBO0FBbEdBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWkE7QUFjQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2pIQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUE2QkE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFSQTtBQUNBO0FBU0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUFBO0FBR0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQVlBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBVEE7QUFZQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFSQTtBQVdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWkE7QUFjQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQUE7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBOzs7QUFBQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF4U0E7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFpU0E7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDblVBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBd0RBO0FBbkRBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBWkE7QUFjQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JFQTtBQUNBO0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUEyQkE7OztBQUdBO0FBQ0E7QUFBQTtBQUFBO0FBOUJBO0FBcUJBOztBQUVBO0FBQ0E7QUFTQTs7QUFDQTtBQTdCQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQVpBO0FBNkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0dBOztBQUVBO0FBRUE7QUFJQTtBQUVBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBbUJBOzs7O0FBSUE7QUFDQTtBQUFBO0FBbkJBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQVVBO0FBRUE7QUFDQTtBQUNBOztBQUNBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFNQTtBQWFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBOUJBOzs7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQXFCQTtBQUpBOzs7QUFHQTtBQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQU1BO0FBa0JBO0FBQ0E7QUFDQTtBQXhCQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFTQTtBQUtBO0FBQ0E7QUFDQTtBQVhBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUFBO0FBK01BOzs7O0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFyTUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBOExBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFoT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBU0E7QUFDQTtBQUNBO0FBZEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQVFBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFpREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBekRBOztBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFZQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQVRBO0FBY0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUFUQTtBQWNBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUFBO0FBd0RBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBOztBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBeGNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBa2NBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2plQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFJQTs7QUFFQTtBQUNBO0FBQUE7QUErR0E7OztBQUdBO0FBQ0E7QUFBQTtBQTNHQTs7QUE2R0E7QUFqR0E7QUFKQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBWkE7QUFjQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFVQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQTFKQTs7QUFFQTtBQUNBO0FBQ0E7QUF1SkE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcExBO0FBRUE7OztBQUdBO0FBQ0E7QUFBQTtBQUlBOzs7O0FBSUE7QUFDQTtBQUFBO0FBR0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hFQTtBQUNBO0FBR0E7QUFHQTs7QUFFQTtBQUNBO0FBQUE7QUFtRkE7OztBQUdBO0FBQ0E7QUFBQTtBQXRGQTtBQUNBO0FBQ0E7QUFFQTtBQUtBOztBQUVBO0FBQ0E7O0FBNEVBO0FBaEVBO0FBVkE7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQVpBO0FBa0JBO0FBSkE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBYkE7QUFtQkE7QUFKQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFiQTtBQXVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvTEE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBOztBQUVBO0FBQ0E7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQTJEQTs7OztBQUlBO0FBQ0E7QUE5REE7QUFDQTtBQThEQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXhEQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQU9BO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQUE7QUFJQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQXNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFTQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUFBOztBQWtCQTtBQWpCQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFBQTs7QUF1QkE7QUF0QkE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlOQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFNQTtBQVNBOztBQUVBO0FBQ0E7QUFBQTtBQXFFQTtBQUFBO0FBcEVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQXFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBekNBO0FBeUJBO0FBQ0E7QUFDQTtBQTlCQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFvQkE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hjQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUlBOzs7QUFHQTtBQUNBO0FBMkVBOzs7QUFHQTtBQUNBO0FBQUE7QUF4RUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUlBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQWdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE3RUE7QUFEQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBaEJBO0FBbUJBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBTEE7QUE4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBclFBO0FBc1FBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM1NBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0pBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFNQTtBQUFBO0FBTEE7QUFDQTtBQUNBO0FBQ0E7QUFJQTs7QUFDQTtBQUNBO0FBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBNkVBOzs7O0FBSUE7QUFDQTtBQUFBO0FBakZBOztBQUVBO0FBR0E7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBR0E7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUdBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBOztBQWdCQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBN1JBO0FBRkE7QUFDQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBT0E7QUFGQTtBQUNBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFPQTtBQUZBO0FBQ0E7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUlBO0FBREE7QUFDQTtBQXlOQTtBQUFBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDNVVBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQ0E7QUFFQTtBQUNBO0FBK0JBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3RDQTtBQUNBO0FBRUE7QUFDQTtBQThCQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFNQTtBQUFBO0FBTEE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQW1MQTtBQUFBO0FBcktBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7OztBQUdBO0FBRUE7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBRUE7QUFDQTtBQUlBO0FBQ0E7QUFFQTtBQUNBOztBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQWxlQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQVNBO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU9BO0FBREE7QUFDQTtBQVNBO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQVNBO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQVlBO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQVNBO0FBREE7QUFDQTtBQWVBO0FBREE7QUFDQTtBQU9BO0FBREE7QUFDQTtBQW9UQTtBQUFBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUNqaEJBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQ0E7QUFFQTtBQUNBO0FBa0RBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3pEQTtBQUNBO0FBRUE7QUFDQTtBQXFIQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMUhBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFJQTtBQUFBO0FBSEE7QUFDQTtBQUlBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTs7O0FBR0E7QUFDQTtBQUFBO0FBc09BO0FBQUE7QUFoT0E7OztBQUdBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7O0FBR0E7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7O0FBR0E7QUFFQTtBQUVBOzs7QUFHQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7OztBQUdBO0FBRUE7QUFFQTs7O0FBR0E7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBTUE7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFLQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUF0aEJBOztBQUVBO0FBQ0E7QUFPQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFPQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFPQTtBQURBO0FBQ0E7QUFPQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFPQTtBQURBO0FBQ0E7QUFPQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFzVEE7QUFBQTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7O0FDcmtCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBO0FBRUE7QUFDQTtBQStDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0REE7QUFDQTtBQUVBO0FBQ0E7QUF3SkE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9KQTtBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBdUVBOzs7O0FBSUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWpGQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBNEJBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFlQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFDQTtBQTVGQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7OztBQU5BO0FBV0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOzs7QUFOQTtBQStFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDNUlBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUkE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0xBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBc0ZBO0FBQUE7QUFyRkE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7O0FBR0E7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBSUE7QUFDQTtBQUNBOztBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBcFRBO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU9BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQXNPQTtBQUFBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVWQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBT0E7QUFBQTtBQU5BOztBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBMEtBO0FBQUE7QUFuS0E7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7O0FBR0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFJQTtBQUNBO0FBRUE7O0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQXBiQTs7QUFFQTtBQUNBO0FBT0E7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBT0E7QUFEQTtBQUNBO0FBU0E7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBU0E7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBWUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBU0E7QUFEQTtBQUNBO0FBZUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBTUE7QUFEQTtBQUNBO0FBOFFBO0FBQUE7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDemRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFNQTtBQUFBO0FBTEE7O0FBRUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUFBO0FBd09BO0FBQUE7QUF2T0E7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQU9BOztBQUVBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQWxUQTs7QUFFQTtBQUNBO0FBMU5BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQVNBO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQXFUQTtBQUFBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2pqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFBQTtBQXVDQTtBQUFBO0FBdENBOztBQUVBO0FBRUE7QUFDQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFJQTtBQUNBOztBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBcFBBO0FBREE7QUFDQTtBQUtBO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQVNBO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQXFOQTtBQUFBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzNSQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBUUE7QUFBQTtBQVBBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFBQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQXViQTtBQUFBO0FBN2FBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOzs7QUFHQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUNBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7O0FBR0E7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFwMEJBOztBQUVBO0FBQ0E7QUFVQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFPQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFLQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFPQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFNQTtBQURBO0FBQ0E7QUFtY0E7QUFBQTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwM0JBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFRQTtBQUFBO0FBUEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBd2JBO0FBQUE7QUE5YUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7OztBQUdBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOzs7QUFHQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUVBO0FBRUE7O0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQXAwQkE7O0FBRUE7QUFDQTtBQVVBO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU9BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU9BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQU1BO0FBREE7QUFDQTtBQWtjQTtBQUFBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdDNCQTtBQUNBO0FBRUE7QUFDQTtBQWVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3RCQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ1RBO0FBQ0E7QUFFQTtBQUNBO0FBOEVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3JGQTtBQUNBO0FBRUE7QUFDQTtBQXNGQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3RkE7QUFDQTtBQUVBO0FBQ0E7QUFzQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0NBO0FBQ0E7QUFFQTtBQUNBO0FBb0pBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQzNKQTtBQUNBO0FBRUE7QUFDQTtBQWlCQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4QkE7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNWQTtBQUNBO0FBRUE7QUFDQTtBQWtPQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6T0E7QUFDQTtBQUVBO0FBQ0E7QUErSEE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdElBO0FBQ0E7QUFFQTtBQUNBO0FBa09BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3pPQTtBQUNBO0FBRUE7QUFDQTtBQStIQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3RJQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUhBO0FBR0E7O0FBR0E7QUFDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEJBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNGQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7OztBQ2pCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNwWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ1BBOzs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQ05BO0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0JBQllMT04uR1VJL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9hZHRJbnN0cnVtZW50YXRpb24udHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvYWR2YW5jZWREeW5hbWljVGV4dHVyZS50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9idXR0b24udHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvY2hlY2tib3gudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvY29sb3JwaWNrZXIudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvY29udGFpbmVyLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL2NvbnRyb2xzL2NvbnRyb2wudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvZGlzcGxheUdyaWQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvZWxsaXBzZS50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9mb2N1c2FibGVCdXR0b24udHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvZm9jdXNhYmxlQ29udHJvbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9ncmFkaWVudC9CYXNlR3JhZGllbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvZ3JhZGllbnQvTGluZWFyR3JhZGllbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvZ3JhZGllbnQvUmFkaWFsR3JhZGllbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvZ3JpZC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9pbWFnZS50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9pbmRleC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9pbnB1dFBhc3N3b3JkLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL2NvbnRyb2xzL2lucHV0VGV4dC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9pbnB1dFRleHRBcmVhLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL2NvbnRyb2xzL2xpbmUudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvbXVsdGlMaW5lLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL2NvbnRyb2xzL3JhZGlvQnV0dG9uLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL2NvbnRyb2xzL3JlY3RhbmdsZS50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9zY3JvbGxWaWV3ZXJzL3Njcm9sbFZpZXdlci50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9zY3JvbGxWaWV3ZXJzL3Njcm9sbFZpZXdlcldpbmRvdy50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9zZWxlY3Rvci50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9zbGlkZXJzL2Jhc2VTbGlkZXIudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvc2xpZGVycy9pbWFnZUJhc2VkU2xpZGVyLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL2NvbnRyb2xzL3NsaWRlcnMvaW1hZ2VTY3JvbGxCYXIudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvc2xpZGVycy9zY3JvbGxCYXIudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvc2xpZGVycy9zbGlkZXIudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvc3RhY2tQYW5lbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy9zdGF0aWNzLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL2NvbnRyb2xzL3RleHRCbG9jay50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy90ZXh0V3JhcHBlci50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9jb250cm9scy90b2dnbGVCdXR0b24udHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvMkQvY29udHJvbHMvdmlydHVhbEtleWJvYXJkLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL2luZGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL21hdGgyRC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC9tZWFzdXJlLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL211bHRpTGluZVBvaW50LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL3N0eWxlLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzJEL3ZhbHVlQW5kVW5pdC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8yRC94bWxMb2FkZXIudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvYmVoYXZpb3JzL2RlZmF1bHRCZWhhdmlvci50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9NUlRLMy90b3VjaEhvbG9ncmFwaGljQnV0dG9uLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL2NvbnRyb2xzL2Fic3RyYWN0QnV0dG9uM0QudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvY29udHJvbHMvYnV0dG9uM0QudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvY29udHJvbHMvY29udGFpbmVyM0QudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvY29udHJvbHMvY29udGVudERpc3BsYXkzRC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9jb250cm9sM0QudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvY29udHJvbHMvY3lsaW5kZXJQYW5lbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9oYW5kTWVudS50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9ob2xvZ3JhcGhpY0JhY2twbGF0ZS50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9ob2xvZ3JhcGhpY0J1dHRvbi50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9ob2xvZ3JhcGhpY1NsYXRlLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL2NvbnRyb2xzL2luZGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL2NvbnRyb2xzL21lc2hCdXR0b24zRC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9uZWFyTWVudS50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9wbGFuZVBhbmVsLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL2NvbnRyb2xzL3NjYXR0ZXJQYW5lbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9zbGlkZXIzRC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9zcGhlcmVQYW5lbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy9zdGFja1BhbmVsM0QudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvY29udHJvbHMvdG91Y2hCdXR0b24zRC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9jb250cm9scy90b3VjaEhvbG9ncmFwaGljQnV0dG9uLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL2NvbnRyb2xzL3RvdWNoSG9sb2dyYXBoaWNNZW51LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL2NvbnRyb2xzL3RvdWNoTWVzaEJ1dHRvbjNELnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL2NvbnRyb2xzL3ZvbHVtZUJhc2VkUGFuZWwudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvZ2l6bW9zL2dpem1vSGFuZGxlLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL2dpem1vcy9pbmRleC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9naXptb3Mvc2xhdGVHaXptby50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9ndWkzRE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL2ZsdWVudC9mbHVlbnRNYXRlcmlhbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9tYXRlcmlhbHMvZmx1ZW50L2luZGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9mbHVlbnQvc2hhZGVycy9mbHVlbnQuZnJhZ21lbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL2ZsdWVudC9zaGFkZXJzL2ZsdWVudC52ZXJ0ZXgudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL2ZsdWVudEJhY2twbGF0ZS9mbHVlbnRCYWNrcGxhdGVNYXRlcmlhbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9tYXRlcmlhbHMvZmx1ZW50QmFja3BsYXRlL2luZGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9mbHVlbnRCYWNrcGxhdGUvc2hhZGVycy9mbHVlbnRCYWNrcGxhdGUuZnJhZ21lbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL2ZsdWVudEJhY2twbGF0ZS9zaGFkZXJzL2ZsdWVudEJhY2twbGF0ZS52ZXJ0ZXgudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL2ZsdWVudEJ1dHRvbi9mbHVlbnRCdXR0b25NYXRlcmlhbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9tYXRlcmlhbHMvZmx1ZW50QnV0dG9uL2luZGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9mbHVlbnRCdXR0b24vc2hhZGVycy9mbHVlbnRCdXR0b24uZnJhZ21lbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL2ZsdWVudEJ1dHRvbi9zaGFkZXJzL2ZsdWVudEJ1dHRvbi52ZXJ0ZXgudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL2hhbmRsZS9oYW5kbGVNYXRlcmlhbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9tYXRlcmlhbHMvaGFuZGxlL2luZGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9oYW5kbGUvc2hhZGVycy9oYW5kbGUuZnJhZ21lbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL2hhbmRsZS9zaGFkZXJzL2hhbmRsZS52ZXJ0ZXgudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL2luZGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9tcmRsL2luZGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9tcmRsL21yZGxCYWNrZ2xvd01hdGVyaWFsLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9tcmRsL21yZGxCYWNrcGxhdGVNYXRlcmlhbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9tYXRlcmlhbHMvbXJkbC9tcmRsRnJvbnRwbGF0ZU1hdGVyaWFsLnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9tcmRsL21yZGxJbm5lcnF1YWRNYXRlcmlhbC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9tYXRlcmlhbHMvbXJkbC9tcmRsU2xpZGVyQmFyTWF0ZXJpYWwudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL21yZGwvbXJkbFNsaWRlclRodW1iTWF0ZXJpYWwudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL21yZGwvc2hhZGVycy9tcmRsQmFja2dsb3cuZnJhZ21lbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL21yZGwvc2hhZGVycy9tcmRsQmFja2dsb3cudmVydGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9tcmRsL3NoYWRlcnMvbXJkbEJhY2twbGF0ZS5mcmFnbWVudC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy8zRC9tYXRlcmlhbHMvbXJkbC9zaGFkZXJzL21yZGxCYWNrcGxhdGUudmVydGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9tcmRsL3NoYWRlcnMvbXJkbEZyb250cGxhdGUuZnJhZ21lbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL21yZGwvc2hhZGVycy9tcmRsRnJvbnRwbGF0ZS52ZXJ0ZXgudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL21yZGwvc2hhZGVycy9tcmRsSW5uZXJxdWFkLmZyYWdtZW50LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9tcmRsL3NoYWRlcnMvbXJkbElubmVycXVhZC52ZXJ0ZXgudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL21yZGwvc2hhZGVycy9tcmRsU2xpZGVyQmFyLmZyYWdtZW50LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL21hdGVyaWFscy9tcmRsL3NoYWRlcnMvbXJkbFNsaWRlckJhci52ZXJ0ZXgudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL21yZGwvc2hhZGVycy9tcmRsU2xpZGVyVGh1bWIuZnJhZ21lbnQudHMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vZGV2L2d1aS9zcmMvM0QvbWF0ZXJpYWxzL21yZGwvc2hhZGVycy9tcmRsU2xpZGVyVGh1bWIudmVydGV4LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJLy4uLy4uLy4uL2Rldi9ndWkvc3JjLzNEL3ZlY3RvcjNXaXRoSW5mby50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9kZXYvZ3VpL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS8uLi8uLi8uLi9sdHMvZ3VpL3NyYy9sZWdhY3kvbGVnYWN5LnRzIiwid2VicGFjazovL0JBQllMT04uR1VJL2V4dGVybmFsIHVtZCB7XCJyb290XCI6XCJCQUJZTE9OXCIsXCJjb21tb25qc1wiOlwiYmFieWxvbmpzXCIsXCJjb21tb25qczJcIjpcImJhYnlsb25qc1wiLFwiYW1kXCI6XCJiYWJ5bG9uanNcIn0iLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5tanMiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0JBQllMT04uR1VJL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vQkFCWUxPTi5HVUkvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9CQUJZTE9OLkdVSS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0JBQllMT04uR1VJLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImJhYnlsb25qc1wiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcImJhYnlsb25qcy1ndWlcIiwgW1wiYmFieWxvbmpzXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImJhYnlsb25qcy1ndWlcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJiYWJ5bG9uanNcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkJBQllMT05cIl0gPSByb290W1wiQkFCWUxPTlwiXSB8fCB7fSwgcm9vdFtcIkJBQllMT05cIl1bXCJHVUlcIl0gPSBmYWN0b3J5KHJvb3RbXCJCQUJZTE9OXCJdKTtcbn0pKCh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdGhpcyksIChfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2JhYnlsb25qc19NaXNjX3BlcmZDb3VudGVyX18pID0+IHtcbnJldHVybiAiLCJpbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUgeyBPYnNlcnZlciB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBQZXJmQ291bnRlciB9IGZyb20gXCJjb3JlL01pc2MvcGVyZkNvdW50ZXJcIjtcclxuaW1wb3J0IHR5cGUgeyBJRGlzcG9zYWJsZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcblxyXG5pbXBvcnQgdHlwZSB7IEFkdmFuY2VkRHluYW1pY1RleHR1cmUgfSBmcm9tIFwiLi9hZHZhbmNlZER5bmFtaWNUZXh0dXJlXCI7XHJcblxyXG4vKipcclxuICogVGhpcyBjbGFzcyBjYW4gYmUgdXNlZCB0byBnZXQgaW5zdHJ1bWVudGF0aW9uIGRhdGEgZnJvbSBhIEFkdmFuY2VkRHluYW1pY1RleHR1cmUgb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQWR2YW5jZWREeW5hbWljVGV4dHVyZUluc3RydW1lbnRhdGlvbiBpbXBsZW1lbnRzIElEaXNwb3NhYmxlIHtcclxuICAgIHByaXZhdGUgX2NhcHR1cmVSZW5kZXJUaW1lID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9yZW5kZXJUaW1lID0gbmV3IFBlcmZDb3VudGVyKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfY2FwdHVyZUxheW91dFRpbWUgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2xheW91dFRpbWUgPSBuZXcgUGVyZkNvdW50ZXIoKTtcclxuXHJcbiAgICAvLyBPYnNlcnZlcnNcclxuICAgIHByaXZhdGUgX29uQmVnaW5SZW5kZXJPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8QWR2YW5jZWREeW5hbWljVGV4dHVyZT4+ID0gbnVsbDtcclxuICAgIHByaXZhdGUgX29uRW5kUmVuZGVyT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPEFkdmFuY2VkRHluYW1pY1RleHR1cmU+PiA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9vbkJlZ2luTGF5b3V0T2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPEFkdmFuY2VkRHluYW1pY1RleHR1cmU+PiA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9vbkVuZExheW91dE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxBZHZhbmNlZER5bmFtaWNUZXh0dXJlPj4gPSBudWxsO1xyXG5cclxuICAgIC8vIFByb3BlcnRpZXNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHBlcmYgY291bnRlciB1c2VkIHRvIGNhcHR1cmUgcmVuZGVyIHRpbWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCByZW5kZXJUaW1lQ291bnRlcigpOiBQZXJmQ291bnRlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlclRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBwZXJmIGNvdW50ZXIgdXNlZCB0byBjYXB0dXJlIGxheW91dCB0aW1lXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbGF5b3V0VGltZUNvdW50ZXIoKTogUGVyZkNvdW50ZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sYXlvdXRUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5hYmxlIG9yIGRpc2FibGUgdGhlIHJlbmRlciB0aW1lIGNhcHR1cmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBjYXB0dXJlUmVuZGVyVGltZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2FwdHVyZVJlbmRlclRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBjYXB0dXJlUmVuZGVyVGltZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5fY2FwdHVyZVJlbmRlclRpbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY2FwdHVyZVJlbmRlclRpbWUgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQmVnaW5SZW5kZXJPYnNlcnZlciA9IHRoaXMudGV4dHVyZS5vbkJlZ2luUmVuZGVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyVGltZS5iZWdpbk1vbml0b3JpbmcoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9vbkVuZFJlbmRlck9ic2VydmVyID0gdGhpcy50ZXh0dXJlLm9uRW5kUmVuZGVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyVGltZS5lbmRNb25pdG9yaW5nKHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnRleHR1cmUub25CZWdpblJlbmRlck9ic2VydmFibGUucmVtb3ZlKHRoaXMuX29uQmVnaW5SZW5kZXJPYnNlcnZlcik7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQmVnaW5SZW5kZXJPYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZS5vbkVuZFJlbmRlck9ic2VydmFibGUucmVtb3ZlKHRoaXMuX29uRW5kUmVuZGVyT2JzZXJ2ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9vbkVuZFJlbmRlck9ic2VydmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgbGF5b3V0IHRpbWUgY2FwdHVyZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGNhcHR1cmVMYXlvdXRUaW1lKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jYXB0dXJlTGF5b3V0VGltZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGNhcHR1cmVMYXlvdXRUaW1lKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzLl9jYXB0dXJlTGF5b3V0VGltZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jYXB0dXJlTGF5b3V0VGltZSA9IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fb25CZWdpbkxheW91dE9ic2VydmVyID0gdGhpcy50ZXh0dXJlLm9uQmVnaW5MYXlvdXRPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRUaW1lLmJlZ2luTW9uaXRvcmluZygpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX29uRW5kTGF5b3V0T2JzZXJ2ZXIgPSB0aGlzLnRleHR1cmUub25FbmRMYXlvdXRPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRUaW1lLmVuZE1vbml0b3JpbmcodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZS5vbkJlZ2luTGF5b3V0T2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fb25CZWdpbkxheW91dE9ic2VydmVyKTtcclxuICAgICAgICAgICAgdGhpcy5fb25CZWdpbkxheW91dE9ic2VydmVyID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy50ZXh0dXJlLm9uRW5kTGF5b3V0T2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fb25FbmRMYXlvdXRPYnNlcnZlcik7XHJcbiAgICAgICAgICAgIHRoaXMuX29uRW5kTGF5b3V0T2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFudGlhdGVzIGEgbmV3IGFkdmFuY2VkIGR5bmFtaWMgdGV4dHVyZSBpbnN0cnVtZW50YXRpb24uXHJcbiAgICAgKiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIHRvIGdldCBpbnN0cnVtZW50YXRpb24gZGF0YSBmcm9tIGFuIEFkdmFuY2VkRHluYW1pY1RleHR1cmUgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gdGV4dHVyZSBEZWZpbmVzIHRoZSBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIHRvIGluc3RydW1lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlZmluZSB0aGUgaW5zdHJ1bWVudGVkIEFkdmFuY2VkRHluYW1pY1RleHR1cmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHRleHR1cmU6IEFkdmFuY2VkRHluYW1pY1RleHR1cmVcclxuICAgICkge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIERpc3Bvc2UgYW5kIHJlbGVhc2UgYXNzb2NpYXRlZCByZXNvdXJjZXMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMudGV4dHVyZS5vbkJlZ2luUmVuZGVyT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fb25CZWdpblJlbmRlck9ic2VydmVyKTtcclxuICAgICAgICB0aGlzLl9vbkJlZ2luUmVuZGVyT2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGV4dHVyZS5vbkVuZFJlbmRlck9ic2VydmFibGUucmVtb3ZlKHRoaXMuX29uRW5kUmVuZGVyT2JzZXJ2ZXIpO1xyXG4gICAgICAgIHRoaXMuX29uRW5kUmVuZGVyT2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGV4dHVyZS5vbkJlZ2luTGF5b3V0T2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fb25CZWdpbkxheW91dE9ic2VydmVyKTtcclxuICAgICAgICB0aGlzLl9vbkJlZ2luTGF5b3V0T2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGV4dHVyZS5vbkVuZExheW91dE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX29uRW5kTGF5b3V0T2JzZXJ2ZXIpO1xyXG4gICAgICAgIHRoaXMuX29uRW5kTGF5b3V0T2JzZXJ2ZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAoPGFueT50aGlzLnRleHR1cmUpID0gbnVsbDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUgeyBPYnNlcnZlciB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB0eXBlIHsgTWF0cml4IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiwgVmVjdG9yMywgVG1wVmVjdG9ycyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB7IFRvb2xzIH0gZnJvbSBcImNvcmUvTWlzYy90b29sc1wiO1xyXG5pbXBvcnQgdHlwZSB7IFBvaW50ZXJJbmZvUHJlLCBQb2ludGVySW5mbywgUG9pbnRlckluZm9CYXNlIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHsgUG9pbnRlckV2ZW50VHlwZXMgfSBmcm9tIFwiY29yZS9FdmVudHMvcG9pbnRlckV2ZW50c1wiO1xyXG5pbXBvcnQgeyBDbGlwYm9hcmRFdmVudFR5cGVzLCBDbGlwYm9hcmRJbmZvIH0gZnJvbSBcImNvcmUvRXZlbnRzL2NsaXBib2FyZEV2ZW50c1wiO1xyXG5pbXBvcnQgdHlwZSB7IEtleWJvYXJkSW5mb1ByZSB9IGZyb20gXCJjb3JlL0V2ZW50cy9rZXlib2FyZEV2ZW50c1wiO1xyXG5pbXBvcnQgeyBLZXlib2FyZEV2ZW50VHlwZXMgfSBmcm9tIFwiY29yZS9FdmVudHMva2V5Ym9hcmRFdmVudHNcIjtcclxuaW1wb3J0IHR5cGUgeyBDYW1lcmEgfSBmcm9tIFwiY29yZS9DYW1lcmFzL2NhbWVyYVwiO1xyXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL1RleHR1cmVzL3RleHR1cmVcIjtcclxuaW1wb3J0IHsgRHluYW1pY1RleHR1cmUgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvVGV4dHVyZXMvZHluYW1pY1RleHR1cmVcIjtcclxuaW1wb3J0IHR5cGUgeyBBYnN0cmFjdE1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvYWJzdHJhY3RNZXNoXCI7XHJcbmltcG9ydCB7IExheWVyIH0gZnJvbSBcImNvcmUvTGF5ZXJzL2xheWVyXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5cclxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIi4vY29udHJvbHMvY29udGFpbmVyXCI7XHJcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9scy9jb250cm9sXCI7XHJcbmltcG9ydCB7IFN0eWxlIH0gZnJvbSBcIi4vc3R5bGVcIjtcclxuaW1wb3J0IHsgTWVhc3VyZSB9IGZyb20gXCIuL21lYXN1cmVcIjtcclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcImNvcmUvRW5naW5lcy9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgVmlld3BvcnQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZpZXdwb3J0XCI7XHJcbmltcG9ydCB7IENvbG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguY29sb3JcIjtcclxuaW1wb3J0IHsgV2ViUmVxdWVzdCB9IGZyb20gXCJjb3JlL01pc2Mvd2ViUmVxdWVzdFwiO1xyXG5pbXBvcnQgdHlwZSB7IElQb2ludGVyRXZlbnQsIElXaGVlbEV2ZW50IH0gZnJvbSBcImNvcmUvRXZlbnRzL2RldmljZUlucHV0RXZlbnRzXCI7XHJcbmltcG9ydCB7IFJhbmRvbUdVSUQgfSBmcm9tIFwiY29yZS9NaXNjL2d1aWRcIjtcclxuaW1wb3J0IHsgR2V0Q2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBEZWNvZGVCYXNlNjRUb0JpbmFyeSB9IGZyb20gXCJjb3JlL01pc2Mvc3RyaW5nVG9vbHNcIjtcclxuXHJcbmltcG9ydCB0eXBlIHsgU3RhbmRhcmRNYXRlcmlhbCB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9zdGFuZGFyZE1hdGVyaWFsXCI7XHJcbmltcG9ydCB0eXBlIHsgQWJzdHJhY3RFbmdpbmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL2Fic3RyYWN0RW5naW5lXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBjcmVhdGUgdGV4dHVyZSB0byBzdXBwb3J0IDJEIEdVSSBlbGVtZW50c1xyXG4gKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQWR2YW5jZWREeW5hbWljVGV4dHVyZSBleHRlbmRzIER5bmFtaWNUZXh0dXJlIHtcclxuICAgIC8qKiBEZWZpbmUgdGhlIHVybCB0byBsb2FkIHNuaXBwZXRzICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFNuaXBwZXRVcmwgPSBDb25zdGFudHMuU25pcHBldFVybDtcclxuXHJcbiAgICAvKiogSW5kaWNhdGVzIGlmIHNvbWUgb3B0aW1pemF0aW9ucyBjYW4gYmUgcGVyZm9ybWVkIGluIEdVSSBHUFUgbWFuYWdlbWVudCAodGhlIGRvd25zaWRlIGlzIGFkZGl0aW9uYWwgbWVtb3J5L0dQVSB0ZXh0dXJlIG1lbW9yeSB1c2VkKSAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBBbGxvd0dQVU9wdGltaXphdGlvbnMgPSB0cnVlO1xyXG5cclxuICAgIC8qKiBTbmlwcGV0IElEIGlmIHRoZSBjb250ZW50IHdhcyBjcmVhdGVkIGZyb20gdGhlIHNuaXBwZXQgc2VydmVyICovXHJcbiAgICBwdWJsaWMgc25pcHBldElkOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqIE9ic2VydmFibGUgdGhhdCBmaXJlcyB3aGVuIHRoZSBHVUkgaXMgcmVhZHkgKi9cclxuICAgIHB1YmxpYyBvbkd1aVJlYWR5T2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPEFkdmFuY2VkRHluYW1pY1RleHR1cmU+KCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfaXNEaXJ0eSA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfcmVuZGVyT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPENhbWVyYT4+O1xyXG4gICAgcHJpdmF0ZSBfcmVzaXplT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPEFic3RyYWN0RW5naW5lPj47XHJcbiAgICBwcml2YXRlIF9wcmVLZXlib2FyZE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxLZXlib2FyZEluZm9QcmU+PjtcclxuICAgIHByaXZhdGUgX3ByZVBvaW50ZXJPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8UG9pbnRlckluZm9QcmU+PjtcclxuICAgIHByaXZhdGUgX3NjZW5lUmVuZGVyT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPFNjZW5lPj47XHJcbiAgICBwcml2YXRlIF9wb2ludGVyT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPFBvaW50ZXJJbmZvPj47XHJcbiAgICBwcml2YXRlIF9jYW52YXNQb2ludGVyT3V0T2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPFBvaW50ZXJFdmVudD4+O1xyXG4gICAgcHJpdmF0ZSBfY2FudmFzQmx1ck9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxBYnN0cmFjdEVuZ2luZT4+O1xyXG4gICAgcHJpdmF0ZSBfY29udHJvbEFkZGVkT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPE51bGxhYmxlPENvbnRyb2w+Pj47XHJcbiAgICBwcml2YXRlIF9jb250cm9sUmVtb3ZlZE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxOdWxsYWJsZTxDb250cm9sPj4+O1xyXG4gICAgcHJpdmF0ZSBfYmFja2dyb3VuZDogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9yb290Q29udGFpbmVyID0gbmV3IENvbnRhaW5lcihcInJvb3RcIik7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2xhc3RQaWNrZWRDb250cm9sOiBDb250cm9sO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9sYXN0Q29udHJvbE92ZXI6IHsgW3BvaW50ZXJJZDogbnVtYmVyXTogQ29udHJvbCB9ID0ge307XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2xhc3RDb250cm9sRG93bjogeyBbcG9pbnRlcklkOiBudW1iZXJdOiBDb250cm9sIH0gPSB7fTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfY2FwdHVyaW5nQ29udHJvbDogeyBbcG9pbnRlcklkOiBudW1iZXJdOiBDb250cm9sIH0gPSB7fTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfc2hvdWxkQmxvY2tQb2ludGVyOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9sYXllclRvRGlzcG9zZTogTnVsbGFibGU8TGF5ZXI+O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9saW5rZWRDb250cm9scyA9IG5ldyBBcnJheTxDb250cm9sPigpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9pc0Z1bGxzY3JlZW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2Z1bGxzY3JlZW5WaWV3cG9ydCA9IG5ldyBWaWV3cG9ydCgwLCAwLCAxLCAxKTtcclxuICAgIHByaXZhdGUgX2lkZWFsV2lkdGggPSAwO1xyXG4gICAgcHJpdmF0ZSBfaWRlYWxIZWlnaHQgPSAwO1xyXG4gICAgcHJpdmF0ZSBfdXNlU21hbGxlc3RJZGVhbDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfcmVuZGVyQXRJZGVhbFNpemUgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2ZvY3VzZWRDb250cm9sOiBOdWxsYWJsZTxDb250cm9sPjtcclxuICAgIHByaXZhdGUgX2Jsb2NrTmV4dEZvY3VzQ2hlY2sgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX3JlbmRlclNjYWxlID0gMTtcclxuICAgIHByaXZhdGUgX3Jvb3RFbGVtZW50OiBOdWxsYWJsZTxIVE1MRWxlbWVudD47XHJcbiAgICBwcml2YXRlIF9jdXJzb3JDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9kZWZhdWx0TW91c2VQb2ludGVySWQgPSAwO1xyXG4gICAgcHJpdmF0ZSBfcm9vdENoaWxkcmVuSGF2ZUNoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2NhcHR1cmVkUG9pbnRlcklkcyA9IG5ldyBTZXQ8bnVtYmVyPigpO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfbnVtTGF5b3V0Q2FsbHMgPSAwO1xyXG4gICAgLyoqIEdldHMgdGhlIG51bWJlciBvZiBsYXlvdXQgY2FsbHMgbWFkZSB0aGUgbGFzdCB0aW1lIHRoZSBBRFQgaGFzIGJlZW4gcmVuZGVyZWQgKi9cclxuICAgIHB1YmxpYyBnZXQgbnVtTGF5b3V0Q2FsbHMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbnVtTGF5b3V0Q2FsbHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9udW1SZW5kZXJDYWxscyA9IDA7XHJcbiAgICAvKiogR2V0cyB0aGUgbnVtYmVyIG9mIHJlbmRlciBjYWxscyBtYWRlIHRoZSBsYXN0IHRpbWUgdGhlIEFEVCBoYXMgYmVlbiByZW5kZXJlZCAqL1xyXG4gICAgcHVibGljIGdldCBudW1SZW5kZXJDYWxscygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udW1SZW5kZXJDYWxscztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmluZSB0eXBlIHRvIHN0cmluZyB0byBlbnN1cmUgY29tcGF0aWJpbGl0eSBhY3Jvc3MgYnJvd3NlcnNcclxuICAgICAqIFNhZmFyaSBkb2Vzbid0IHN1cHBvcnQgRGF0YVRyYW5zZmVyIGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2NsaXBib2FyZERhdGE6IHN0cmluZyA9IFwiXCI7XHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmFibGUgZXZlbnQgdHJpZ2dlcmVkIGVhY2ggdGltZSBhbiBjbGlwYm9hcmQgZXZlbnQgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgcmVuZGVyaW5nIGNhbnZhc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25DbGlwYm9hcmRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8Q2xpcGJvYXJkSW5mbz4oKTtcclxuICAgIC8qKlxyXG4gICAgICogT2JzZXJ2YWJsZSBldmVudCB0cmlnZ2VyZWQgZWFjaCB0aW1lIGEgcG9pbnRlciBkb3duIGlzIGludGVyY2VwdGVkIGJ5IGEgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Db250cm9sUGlja2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPENvbnRyb2w+KCk7XHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmFibGUgZXZlbnQgdHJpZ2dlcmVkIGJlZm9yZSBsYXlvdXQgaXMgZXZhbHVhdGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkJlZ2luTGF5b3V0T2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPEFkdmFuY2VkRHluYW1pY1RleHR1cmU+KCk7XHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmFibGUgZXZlbnQgdHJpZ2dlcmVkIGFmdGVyIHRoZSBsYXlvdXQgd2FzIGV2YWx1YXRlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25FbmRMYXlvdXRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8QWR2YW5jZWREeW5hbWljVGV4dHVyZT4oKTtcclxuICAgIC8qKlxyXG4gICAgICogT2JzZXJ2YWJsZSBldmVudCB0cmlnZ2VyZWQgYmVmb3JlIHRoZSB0ZXh0dXJlIGlzIHJlbmRlcmVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkJlZ2luUmVuZGVyT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPEFkdmFuY2VkRHluYW1pY1RleHR1cmU+KCk7XHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmFibGUgZXZlbnQgdHJpZ2dlcmVkIGFmdGVyIHRoZSB0ZXh0dXJlIHdhcyByZW5kZXJlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25FbmRSZW5kZXJPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8QWR2YW5jZWREeW5hbWljVGV4dHVyZT4oKTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBkZWZpbmluZyBpZiBhbHBoYSBpcyBzdG9yZWQgYXMgcHJlbXVsdGlwbGllZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcHJlbXVsQWxwaGEgPSBmYWxzZTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGhlIGNhbnZhcyBtdXN0IGJlIHJldmVydGVkIG9uIFkgd2hlbiB1cGRhdGluZyB0aGUgdGV4dHVyZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXBwbHlZSW52ZXJzaW9uT25VcGRhdGUgPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhlIGVsZW1lbnRzIGNhbiBiZSBuYXZpZ2F0ZWQgdG8gdXNpbmcgdGhlIHRhYiBrZXkuXHJcbiAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRpc2FibGVUYWJOYXZpZ2F0aW9uID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIFBPSU5URVJUQVAgZXZlbnQgdHlwZSB3aWxsIGJlIHVzZWQgZm9yIFwiY2xpY2tcIiwgaW5zdGVhZCBvZiBQT0lOVEVSVVBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVzZVBvaW50ZXJUYXBGb3JDbGlja0V2ZW50ID0gZmFsc2U7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIG51bWJlciB1c2VkIHRvIHNjYWxlIHJlbmRlcmluZyBzaXplICgyIG1lYW5zIHRoYXQgdGhlIHRleHR1cmUgd2lsbCBiZSB0d2ljZSBiaWdnZXIpLlxyXG4gICAgICogVXNlZnVsIHdoZW4geW91IHdhbnQgbW9yZSBhbnRpYWxpYXNpbmdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCByZW5kZXJTY2FsZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJTY2FsZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgcmVuZGVyU2NhbGUodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5fcmVuZGVyU2NhbGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9yZW5kZXJTY2FsZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX29uUmVzaXplKCk7XHJcbiAgICB9XHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBiYWNrZ3JvdW5kIGNvbG9yICovXHJcbiAgICBwdWJsaWMgZ2V0IGJhY2tncm91bmQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja2dyb3VuZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgYmFja2dyb3VuZCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tncm91bmQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBpZGVhbCB3aWR0aCB1c2VkIHRvIGRlc2lnbiBjb250cm9scy5cclxuICAgICAqIFRoZSBHVUkgd2lsbCB0aGVuIHJlc2NhbGUgZXZlcnl0aGluZyBhY2NvcmRpbmdseVxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNhZGFwdGl2ZS1zY2FsaW5nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaWRlYWxXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZGVhbFdpZHRoO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCBpZGVhbFdpZHRoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5faWRlYWxXaWR0aCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9pZGVhbFdpZHRoID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIuX21hcmtBbGxBc0RpcnR5KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaWRlYWwgaGVpZ2h0IHVzZWQgdG8gZGVzaWduIGNvbnRyb2xzLlxyXG4gICAgICogVGhlIEdVSSB3aWxsIHRoZW4gcmVzY2FsZSBldmVyeXRoaW5nIGFjY29yZGluZ2x5XHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI2FkYXB0aXZlLXNjYWxpbmdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBpZGVhbEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZGVhbEhlaWdodDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgaWRlYWxIZWlnaHQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9pZGVhbEhlaWdodCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9pZGVhbEhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcclxuICAgICAgICB0aGlzLl9yb290Q29udGFpbmVyLl9tYXJrQWxsQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHNtYWxsZXN0IGlkZWFsIHZhbHVlIG11c3QgYmUgdXNlZCBpZiBpZGVhbFdpZHRoIGFuZCBpZGVhbEhlaWdodCBhcmUgYm90aCBzZXRcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjYWRhcHRpdmUtc2NhbGluZ1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHVzZVNtYWxsZXN0SWRlYWwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZVNtYWxsZXN0SWRlYWw7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHVzZVNtYWxsZXN0SWRlYWwodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fdXNlU21hbGxlc3RJZGVhbCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91c2VTbWFsbGVzdElkZWFsID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIuX21hcmtBbGxBc0RpcnR5KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBhZGFwdGl2ZSBzY2FsaW5nIG11c3QgYmUgdXNlZFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNhZGFwdGl2ZS1zY2FsaW5nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgcmVuZGVyQXRJZGVhbFNpemUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlckF0SWRlYWxTaXplO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCByZW5kZXJBdElkZWFsU2l6ZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJBdElkZWFsU2l6ZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9yZW5kZXJBdElkZWFsU2l6ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX29uUmVzaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSByYXRpbyB1c2VkIHdoZW4gaW4gXCJpZGVhbCBtb2RlXCJcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjYWRhcHRpdmUtc2NhbGluZ1xyXG4gICAgICogKi9cclxuICAgIHB1YmxpYyBnZXQgaWRlYWxSYXRpbygpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCByd2lkdGg6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IHJoZWlnaHQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pZGVhbFdpZHRoKSB7XHJcbiAgICAgICAgICAgIHJ3aWR0aCA9IHRoaXMuZ2V0U2l6ZSgpLndpZHRoIC8gdGhpcy5faWRlYWxXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pZGVhbEhlaWdodCkge1xyXG4gICAgICAgICAgICByaGVpZ2h0ID0gdGhpcy5nZXRTaXplKCkuaGVpZ2h0IC8gdGhpcy5faWRlYWxIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdXNlU21hbGxlc3RJZGVhbCAmJiB0aGlzLl9pZGVhbFdpZHRoICYmIHRoaXMuX2lkZWFsSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA8IHdpbmRvdy5pbm5lckhlaWdodCA/IHJ3aWR0aCA6IHJoZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faWRlYWxXaWR0aCkge1xyXG4gICAgICAgICAgICAvLyBob3Jpem9udGFsXHJcbiAgICAgICAgICAgIHJldHVybiByd2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faWRlYWxIZWlnaHQpIHtcclxuICAgICAgICAgICAgLy8gdmVydGljYWxcclxuICAgICAgICAgICAgcmV0dXJuIHJoZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHVuZGVybHlpbmcgbGF5ZXIgdXNlZCB0byByZW5kZXIgdGhlIHRleHR1cmUgd2hlbiBpbiBmdWxsc2NyZWVuIG1vZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBsYXllcigpOiBOdWxsYWJsZTxMYXllcj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sYXllclRvRGlzcG9zZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgcm9vdCBjb250YWluZXIgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHJvb3RDb250YWluZXIoKTogQ29udGFpbmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcm9vdENvbnRhaW5lcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSByb290IGNvbnRhaW5lci5cclxuICAgICAqIFRoaXMgaXMgbW9zdGx5IHVzZWQgdG8gbGV0IHRoZSBJbnNwZWN0b3IgaW50cm9zcGVjdHMgdGhlIEFEVFxyXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgcm9vdENvbnRhaW5lclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Q2hpbGRyZW4oKTogQXJyYXk8Q29udGFpbmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLl9yb290Q29udGFpbmVyXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV2lsbCByZXR1cm4gYWxsIGNvbnRyb2xzIHRoYXQgYXJlIGluc2lkZSB0aGlzIHRleHR1cmVcclxuICAgICAqIEBwYXJhbSBkaXJlY3REZXNjZW5kYW50c09ubHkgZGVmaW5lcyBpZiB0cnVlIG9ubHkgZGlyZWN0IGRlc2NlbmRhbnRzIG9mICd0aGlzJyB3aWxsIGJlIGNvbnNpZGVyZWQsIGlmIGZhbHNlIGRpcmVjdCBhbmQgYWxzbyBpbmRpcmVjdCAoY2hpbGRyZW4gb2YgY2hpbGRyZW4sIGFuIHNvIG9uIGluIGEgcmVjdXJzaXZlIG1hbm5lcikgZGVzY2VuZGFudHMgb2YgJ3RoaXMnIHdpbGwgYmUgY29uc2lkZXJlZFxyXG4gICAgICogQHBhcmFtIHByZWRpY2F0ZSBkZWZpbmVzIGFuIG9wdGlvbmFsIHByZWRpY2F0ZSB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uIGV2ZXJ5IGV2YWx1YXRlZCBjaGlsZCwgdGhlIHByZWRpY2F0ZSBtdXN0IHJldHVybiB0cnVlIGZvciBhIGdpdmVuIGNoaWxkIHRvIGJlIHBhcnQgb2YgdGhlIHJlc3VsdCwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgaWdub3JlZFxyXG4gICAgICogQHJldHVybnMgYWxsIGNoaWxkIGNvbnRyb2xzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXREZXNjZW5kYW50cyhkaXJlY3REZXNjZW5kYW50c09ubHk/OiBib29sZWFuLCBwcmVkaWNhdGU/OiAoY29udHJvbDogQ29udHJvbCkgPT4gYm9vbGVhbik6IENvbnRyb2xbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3RDb250YWluZXIuZ2V0RGVzY2VuZGFudHMoZGlyZWN0RGVzY2VuZGFudHNPbmx5LCBwcmVkaWNhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2lsbCByZXR1cm4gYWxsIGNvbnRyb2xzIHdpdGggdGhlIGdpdmVuIHR5cGUgbmFtZVxyXG4gICAgICogQHBhcmFtIHR5cGVOYW1lIGRlZmluZXMgdGhlIHR5cGUgbmFtZSB0byBzZWFyY2ggZm9yXHJcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBvZiBhbGwgY29udHJvbHMgZm91bmRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENvbnRyb2xzQnlUeXBlKHR5cGVOYW1lOiBzdHJpbmcpOiBDb250cm9sW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yb290Q29udGFpbmVyLmdldERlc2NlbmRhbnRzKGZhbHNlLCAoY29udHJvbCkgPT4gY29udHJvbC50eXBlTmFtZSA9PT0gdHlwZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2lsbCByZXR1cm4gdGhlIGZpcnN0IGNvbnRyb2wgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgbmFtZSB0byBzZWFyY2ggZm9yXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgZmlyc3QgY29udHJvbCBmb3VuZCBvciBudWxsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRDb250cm9sQnlOYW1lKG5hbWU6IHN0cmluZyk6IE51bGxhYmxlPENvbnRyb2w+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29udHJvbEJ5S2V5KFwibmFtZVwiLCBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9nZXRDb250cm9sQnlLZXkoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBOdWxsYWJsZTxDb250cm9sPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3RDb250YWluZXIuZ2V0RGVzY2VuZGFudHMoKS5maW5kKChjb250cm9sKSA9PiBjb250cm9sW2tleSBhcyBrZXlvZiBDb250cm9sXSA9PT0gdmFsdWUpIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGN1cnJlbnQgZm9jdXNlZCBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgZm9jdXNlZENvbnRyb2woKTogTnVsbGFibGU8Q29udHJvbD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb2N1c2VkQ29udHJvbDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgZm9jdXNlZENvbnRyb2woY29udHJvbDogTnVsbGFibGU8Q29udHJvbD4pIHtcclxuICAgICAgICBpZiAodGhpcy5fZm9jdXNlZENvbnRyb2wgPT0gY29udHJvbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9mb2N1c2VkQ29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9mb2N1c2VkQ29udHJvbC5vbkJsdXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgY29udHJvbC5vbkZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2ZvY3VzZWRDb250cm9sID0gY29udHJvbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSB0ZXh0dXJlIG11c3QgYmUgcmVuZGVyZWQgaW4gYmFja2dyb3VuZCBvciBmb3JlZ3JvdW5kIHdoZW4gaW4gZnVsbHNjcmVlbiBtb2RlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNGb3JlZ3JvdW5kKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5sYXllcikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmxheWVyLmlzQmFja2dyb3VuZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgaXNGb3JlZ3JvdW5kKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmxheWVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubGF5ZXIuaXNCYWNrZ3JvdW5kID09PSAhdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxheWVyLmlzQmFja2dyb3VuZCA9ICF2YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXQgaW5mb3JtYXRpb24gYWJvdXQgY2xpcGJvYXJkRGF0YVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGNsaXBib2FyZERhdGEoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpcGJvYXJkRGF0YTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgY2xpcGJvYXJkRGF0YSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fY2xpcGJvYXJkRGF0YSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWYgdGhpcyBpcyBzZXQsIGV2ZW4gd2hlbiBhIGNvbnRyb2wgaXMgcG9pbnRlciBibG9ja2VyLCBzb21lIGV2ZW50cyBjYW4gc3RpbGwgYmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIHNjZW5lLlxyXG4gICAgICogT3B0aW9ucyBmcm9tIHZhbHVlcyBhcmUgUG9pbnRlckV2ZW50VHlwZXNcclxuICAgICAqIFBPSU5URVJET1dOLCBQT0lOVEVSVVAsIFBPSU5URVJNT1ZFLCBQT0lOVEVSV0hFRUwsIFBPSU5URVJQSUNLLCBQT0lOVEVSVEFQLCBQT0lOVEVSRE9VQkxFVEFQXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBza2lwQmxvY2tFdmVudHMgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWYgc2V0IHRvIHRydWUsIGV2ZXJ5IHNjZW5lIHJlbmRlciB3aWxsIHRyaWdnZXIgYSBwb2ludGVyIGV2ZW50IGZvciB0aGUgR1VJXHJcbiAgICAgKiBpZiBpdCBpcyBsaW5rZWQgdG8gYSBtZXNoIG9yIGhhcyBjb250cm9scyBsaW5rZWQgdG8gYSBtZXNoLiBUaGlzIHdpbGwgYWxsb3dcclxuICAgICAqIHlvdSB0byBjYXRjaCB0aGUgcG9pbnRlciBtb3ZpbmcgYXJvdW5kIHRoZSBHVUkgZHVlIHRvIGNhbWVyYSBvciBtZXNoIG1vdmVtZW50cyxcclxuICAgICAqIGJ1dCBpdCBoYXMgYSBwZXJmb3JtYW5jZSBjb3N0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2hlY2tQb2ludGVyRXZlcnlGcmFtZSA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEFkdmFuY2VkRHluYW1pY1RleHR1cmVcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIG5hbWUgb2YgdGhlIHRleHR1cmVcclxuICAgICAqIEBwYXJhbSB3aWR0aCBkZWZpbmVzIHRoZSB3aWR0aCBvZiB0aGUgdGV4dHVyZVxyXG4gICAgICogQHBhcmFtIGhlaWdodCBkZWZpbmVzIHRoZSBoZWlnaHQgb2YgdGhlIHRleHR1cmVcclxuICAgICAqIEBwYXJhbSBzY2VuZSBkZWZpbmVzIHRoZSBob3N0aW5nIHNjZW5lXHJcbiAgICAgKiBAcGFyYW0gZ2VuZXJhdGVNaXBNYXBzIGRlZmluZXMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgbWlwbWFwcyBtdXN0IGJlIGdlbmVyYXRlZCAoZmFsc2UgYnkgZGVmYXVsdClcclxuICAgICAqIEBwYXJhbSBzYW1wbGluZ01vZGUgZGVmaW5lcyB0aGUgdGV4dHVyZSBzYW1wbGluZyBtb2RlIChUZXh0dXJlLk5FQVJFU1RfU0FNUExJTkdNT0RFIGJ5IGRlZmF1bHQpXHJcbiAgICAgKiBAcGFyYW0gaW52ZXJ0WSBkZWZpbmVzIGlmIHRoZSB0ZXh0dXJlIG5lZWRzIHRvIGJlIGludmVydGVkIG9uIHRoZSB5IGF4aXMgZHVyaW5nIGxvYWRpbmcgKHRydWUgYnkgZGVmYXVsdClcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB3aWR0aCA9IDAsIGhlaWdodCA9IDAsIHNjZW5lPzogTnVsbGFibGU8U2NlbmU+LCBnZW5lcmF0ZU1pcE1hcHMgPSBmYWxzZSwgc2FtcGxpbmdNb2RlID0gVGV4dHVyZS5ORUFSRVNUX1NBTVBMSU5HTU9ERSwgaW52ZXJ0WSA9IHRydWUpIHtcclxuICAgICAgICBzdXBlcihuYW1lLCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSwgc2NlbmUsIGdlbmVyYXRlTWlwTWFwcywgc2FtcGxpbmdNb2RlLCBDb25zdGFudHMuVEVYVFVSRUZPUk1BVF9SR0JBLCBpbnZlcnRZKTtcclxuICAgICAgICBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuICAgICAgICBpZiAoIXNjZW5lIHx8ICF0aGlzLl90ZXh0dXJlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hcHBseVlJbnZlcnNpb25PblVwZGF0ZSA9IGludmVydFk7XHJcbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQgPSBzY2VuZS5nZXRFbmdpbmUoKS5nZXRJbnB1dEVsZW1lbnQoKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJPYnNlcnZlciA9IHNjZW5lLm9uQmVmb3JlQ2FtZXJhUmVuZGVyT2JzZXJ2YWJsZS5hZGQoKGNhbWVyYTogQ2FtZXJhKSA9PiB0aGlzLl9jaGVja1VwZGF0ZShjYW1lcmEpKTtcclxuXHJcbiAgICAgICAgLyoqIFdoZW5ldmVyIGEgY29udHJvbCBpcyBhZGRlZCBvciByZW1vdmVkIHRvIHRoZSByb290LCB3ZSBoYXZlIHRvIHJlY2hlY2sgdGhlIGNhbWVyYSBwcm9qZWN0aW9uIGFzIGl0IGNhbiBoYXZlIGNoYW5nZWQgICovXHJcbiAgICAgICAgdGhpcy5fY29udHJvbEFkZGVkT2JzZXJ2ZXIgPSB0aGlzLl9yb290Q29udGFpbmVyLm9uQ29udHJvbEFkZGVkT2JzZXJ2YWJsZS5hZGQoKGNvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RDaGlsZHJlbkhhdmVDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2NvbnRyb2xSZW1vdmVkT2JzZXJ2ZXIgPSB0aGlzLl9yb290Q29udGFpbmVyLm9uQ29udHJvbFJlbW92ZWRPYnNlcnZhYmxlLmFkZCgoY29udHJvbCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcm9vdENoaWxkcmVuSGF2ZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fcHJlS2V5Ym9hcmRPYnNlcnZlciA9IHNjZW5lLm9uUHJlS2V5Ym9hcmRPYnNlcnZhYmxlLmFkZCgoaW5mbykgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0YWIgaXMgcHJlc3NlZFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZVRhYk5hdmlnYXRpb24gJiYgaW5mby50eXBlID09PSBLZXlib2FyZEV2ZW50VHlwZXMuS0VZRE9XTiAmJiBpbmZvLmV2ZW50LmNvZGUgPT09IFwiVGFiXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcndhcmQgPSAhaW5mby5ldmVudC5zaGlmdEtleTtcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAoZm9yd2FyZCAmJiB0aGlzLl9mb2N1c1Byb3BlcnRpZXMuaW5kZXggPT09IHRoaXMuX2ZvY3VzUHJvcGVydGllcy50b3RhbCAtIDEpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKCFmb3J3YXJkICYmIHRoaXMuX2ZvY3VzUHJvcGVydGllcy5pbmRleCA9PT0gMCAmJiB0aGlzLl9mb2N1c1Byb3BlcnRpZXMudG90YWwgPiAwKVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkQ29udHJvbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNQcm9wZXJ0aWVzLmluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c1Byb3BlcnRpZXMudG90YWwgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c05leHRFbGVtZW50KGZvcndhcmQpO1xyXG4gICAgICAgICAgICAgICAgaW5mby5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fZm9jdXNlZENvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW5mby50eXBlID09PSBLZXlib2FyZEV2ZW50VHlwZXMuS0VZRE9XTikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNlZENvbnRyb2wucHJvY2Vzc0tleWJvYXJkKGluZm8uZXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluZm8uc2tpcE9uUG9pbnRlck9ic2VydmFibGUgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIuX2xpbmsodGhpcyk7XHJcbiAgICAgICAgdGhpcy5oYXNBbHBoYSA9IHRydWU7XHJcbiAgICAgICAgaWYgKCF3aWR0aCB8fCAhaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZU9ic2VydmVyID0gc2NlbmUuZ2V0RW5naW5lKCkub25SZXNpemVPYnNlcnZhYmxlLmFkZCgoKSA9PiB0aGlzLl9vblJlc2l6ZSgpKTtcclxuICAgICAgICAgICAgdGhpcy5fb25SZXNpemUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdGV4dHVyZS5pc1JlYWR5ID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNsYXNzIG5hbWUgb2YgdGhlIHRleHR1cmUgdXNlZnVsIGZvciBzZXJpYWxpemF0aW9uIG9yIGR5bmFtaWMgY29kaW5nLlxyXG4gICAgICogQHJldHVybnMgXCJBZHZhbmNlZER5bmFtaWNUZXh0dXJlXCJcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkFkdmFuY2VkRHluYW1pY1RleHR1cmVcIjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBleGVjdXRlIGEgZnVuY3Rpb24gb24gYWxsIGNvbnRyb2xzXHJcbiAgICAgKiBAcGFyYW0gZnVuYyBkZWZpbmVzIHRoZSBmdW5jdGlvbiB0byBleGVjdXRlXHJcbiAgICAgKiBAcGFyYW0gY29udGFpbmVyIGRlZmluZXMgdGhlIGNvbnRhaW5lciB3aGVyZSBjb250cm9scyBiZWxvbmcuIElmIG51bGwgdGhlIHJvb3QgY29udGFpbmVyIHdpbGwgYmUgdXNlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXhlY3V0ZU9uQWxsQ29udHJvbHMoZnVuYzogKGNvbnRyb2w6IENvbnRyb2wpID0+IHZvaWQsIGNvbnRhaW5lcj86IENvbnRhaW5lcikge1xyXG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMuX3Jvb3RDb250YWluZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmMoY29udGFpbmVyKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNvbnRhaW5lci5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoKDxhbnk+Y2hpbGQpLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGVPbkFsbENvbnRyb2xzKGZ1bmMsIDxDb250YWluZXI+Y2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuYyhjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3VzZUludmFsaWRhdGVSZWN0T3B0aW1pemF0aW9uID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgSW52YWxpZGF0ZVJlY3Qgb3B0aW1pemF0aW9uIHNob3VsZCBiZSB0dXJuZWQgb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB1c2VJbnZhbGlkYXRlUmVjdE9wdGltaXphdGlvbigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlSW52YWxpZGF0ZVJlY3RPcHRpbWl6YXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB1c2VJbnZhbGlkYXRlUmVjdE9wdGltaXphdGlvbih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3VzZUludmFsaWRhdGVSZWN0T3B0aW1pemF0aW9uID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW52YWxpZGF0ZWQgcmVjdGFuZ2xlIHdoaWNoIGlzIHRoZSBjb21iaW5hdGlvbiBvZiBhbGwgaW52YWxpZGF0ZWQgY29udHJvbHMgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gcm90YXRlZCBpbnRvIGFic29sdXRlIHBvc2l0aW9uXHJcbiAgICBwcml2YXRlIF9pbnZhbGlkYXRlZFJlY3RhbmdsZTogTnVsbGFibGU8TWVhc3VyZT4gPSBudWxsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZhbGlkYXRlcyBhIHJlY3RhbmdsZSBhcmVhIG9uIHRoZSBndWkgdGV4dHVyZVxyXG4gICAgICogQHBhcmFtIGludmFsaWRNaW5YIGxlZnQgbW9zdCBwb3NpdGlvbiBvZiB0aGUgcmVjdGFuZ2xlIHRvIGludmFsaWRhdGUgaW4gdGhlIHRleHR1cmVcclxuICAgICAqIEBwYXJhbSBpbnZhbGlkTWluWSB0b3AgbW9zdCBwb3NpdGlvbiBvZiB0aGUgcmVjdGFuZ2xlIHRvIGludmFsaWRhdGUgaW4gdGhlIHRleHR1cmVcclxuICAgICAqIEBwYXJhbSBpbnZhbGlkTWF4WCByaWdodCBtb3N0IHBvc2l0aW9uIG9mIHRoZSByZWN0YW5nbGUgdG8gaW52YWxpZGF0ZSBpbiB0aGUgdGV4dHVyZVxyXG4gICAgICogQHBhcmFtIGludmFsaWRNYXhZIGJvdHRvbSBtb3N0IHBvc2l0aW9uIG9mIHRoZSByZWN0YW5nbGUgdG8gaW52YWxpZGF0ZSBpbiB0aGUgdGV4dHVyZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW52YWxpZGF0ZVJlY3QoaW52YWxpZE1pblg6IG51bWJlciwgaW52YWxpZE1pblk6IG51bWJlciwgaW52YWxpZE1heFg6IG51bWJlciwgaW52YWxpZE1heFk6IG51bWJlcikge1xyXG4gICAgICAgIGlmICghdGhpcy5fdXNlSW52YWxpZGF0ZVJlY3RPcHRpbWl6YXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuX2ludmFsaWRhdGVkUmVjdGFuZ2xlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludmFsaWRhdGVkUmVjdGFuZ2xlID0gbmV3IE1lYXN1cmUoaW52YWxpZE1pblgsIGludmFsaWRNaW5ZLCBpbnZhbGlkTWF4WCAtIGludmFsaWRNaW5YICsgMSwgaW52YWxpZE1heFkgLSBpbnZhbGlkTWluWSArIDEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIENvbXB1dGUgaW50ZXJzZWN0aW9uXHJcbiAgICAgICAgICAgIGNvbnN0IG1heFggPSBNYXRoLmNlaWwoTWF0aC5tYXgodGhpcy5faW52YWxpZGF0ZWRSZWN0YW5nbGUubGVmdCArIHRoaXMuX2ludmFsaWRhdGVkUmVjdGFuZ2xlLndpZHRoIC0gMSwgaW52YWxpZE1heFgpKTtcclxuICAgICAgICAgICAgY29uc3QgbWF4WSA9IE1hdGguY2VpbChNYXRoLm1heCh0aGlzLl9pbnZhbGlkYXRlZFJlY3RhbmdsZS50b3AgKyB0aGlzLl9pbnZhbGlkYXRlZFJlY3RhbmdsZS5oZWlnaHQgLSAxLCBpbnZhbGlkTWF4WSkpO1xyXG4gICAgICAgICAgICB0aGlzLl9pbnZhbGlkYXRlZFJlY3RhbmdsZS5sZWZ0ID0gTWF0aC5mbG9vcihNYXRoLm1pbih0aGlzLl9pbnZhbGlkYXRlZFJlY3RhbmdsZS5sZWZ0LCBpbnZhbGlkTWluWCkpO1xyXG4gICAgICAgICAgICB0aGlzLl9pbnZhbGlkYXRlZFJlY3RhbmdsZS50b3AgPSBNYXRoLmZsb29yKE1hdGgubWluKHRoaXMuX2ludmFsaWRhdGVkUmVjdGFuZ2xlLnRvcCwgaW52YWxpZE1pblkpKTtcclxuICAgICAgICAgICAgdGhpcy5faW52YWxpZGF0ZWRSZWN0YW5nbGUud2lkdGggPSBtYXhYIC0gdGhpcy5faW52YWxpZGF0ZWRSZWN0YW5nbGUubGVmdCArIDE7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludmFsaWRhdGVkUmVjdGFuZ2xlLmhlaWdodCA9IG1heFkgLSB0aGlzLl9pbnZhbGlkYXRlZFJlY3RhbmdsZS50b3AgKyAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWFya3MgdGhlIHRleHR1cmUgYXMgZGlydHkgZm9yY2luZyBhIGNvbXBsZXRlIHVwZGF0ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWFya0FzRGlydHkoKSB7XHJcbiAgICAgICAgdGhpcy5faXNEaXJ0eSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB1c2VkIHRvIGNyZWF0ZSBhIG5ldyBzdHlsZVxyXG4gICAgICogQHJldHVybnMgYSBuZXcgc3R5bGVcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjc3R5bGVzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjcmVhdGVTdHlsZSgpOiBTdHlsZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdHlsZSh0aGlzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyBjb250cm9sIHRvIHRoZSByb290IGNvbnRhaW5lclxyXG4gICAgICogQHBhcmFtIGNvbnRyb2wgZGVmaW5lcyB0aGUgY29udHJvbCB0byBhZGRcclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHRleHR1cmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkZENvbnRyb2woY29udHJvbDogQ29udHJvbCk6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUge1xyXG4gICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIuYWRkQ29udHJvbChjb250cm9sKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhIGNvbnRyb2wgZnJvbSB0aGUgcm9vdCBjb250YWluZXJcclxuICAgICAqIEBwYXJhbSBjb250cm9sIGRlZmluZXMgdGhlIGNvbnRyb2wgdG8gcmVtb3ZlXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB0ZXh0dXJlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW1vdmVDb250cm9sKGNvbnRyb2w6IENvbnRyb2wpOiBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIHtcclxuICAgICAgICB0aGlzLl9yb290Q29udGFpbmVyLnJlbW92ZUNvbnRyb2woY29udHJvbCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1vdmVzIG92ZXJsYXBwZWQgY29udHJvbHMgdG93YXJkcyBhIHBvc2l0aW9uIHdoZXJlIGl0IGlzIG5vdCBvdmVybGFwcGluZyBhbnltb3JlLlxyXG4gICAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGlzIG1ldGhvZCBhbHRlcnMgbGlua09mZnNldFhJblBpeGVscyBhbmQgbGlua09mZnNldFlJblBpeGVscy5cclxuICAgICAqIEBwYXJhbSBvdmVybGFwR3JvdXAgdGhlIG92ZXJsYXAgZ3JvdXAgd2hpY2ggd2lsbCBiZSBwcm9jZXNzZWQgb3IgdW5kZWZpbmVkIHRvIHByb2Nlc3MgYWxsIG92ZXJsYXAgZ3JvdXBzXHJcbiAgICAgKiBAcGFyYW0gZGVsdGFTdGVwIHRoZSBzdGVwIHNpemUgKHNwZWVkKSB0byByZWFjaCB0aGUgdGFyZ2V0IG5vbiBvdmVybGFwcGluZyBwb3NpdGlvbiAoZGVmYXVsdCAwLjEpXHJcbiAgICAgKiBAcGFyYW0gcmVwZWxGYWN0b3IgaG93IG11Y2ggaXMgdGhlIGNvbnRyb2wgcmVwZWxsZWQgYnkgb3RoZXIgY29udHJvbHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1vdmVUb05vbk92ZXJsYXBwZWRQb3NpdGlvbihvdmVybGFwR3JvdXA/OiBudW1iZXIgfCBDb250cm9sW10sIGRlbHRhU3RlcCA9IDEsIHJlcGVsRmFjdG9yID0gMSkge1xyXG4gICAgICAgIGxldCBjb250cm9sc0Zvckdyb3VwOiBDb250cm9sW107XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3ZlcmxhcEdyb3VwKSkge1xyXG4gICAgICAgICAgICBjb250cm9sc0Zvckdyb3VwID0gb3ZlcmxhcEdyb3VwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2NlbmRhbnRzID0gdGhpcy5nZXREZXNjZW5kYW50cyh0cnVlKTtcclxuICAgICAgICAgICAgLy8gZ2V0IG9ubHkgdGhlIGNvbnRyb2xzIHdpdGggYW4gb3ZlcmxhcEdyb3VwIHByb3BlcnR5IHNldFxyXG4gICAgICAgICAgICAvLyBpZiB0aGUgb3ZlcmxhcEdyb3VwIHBhcmFtZXRlciBpcyBzZXQsIGZpbHRlciB0aGUgY29udHJvbHMgYW5kIGdldCBvbmx5IHRoZSBjb250cm9scyBiZWxvbmdpbmcgdG8gdGhhdCBvdmVybGFwR3JvdXBcclxuICAgICAgICAgICAgY29udHJvbHNGb3JHcm91cCA9IG92ZXJsYXBHcm91cCA9PT0gdW5kZWZpbmVkID8gZGVzY2VuZGFudHMuZmlsdGVyKChjKSA9PiBjLm92ZXJsYXBHcm91cCAhPT0gdW5kZWZpbmVkKSA6IGRlc2NlbmRhbnRzLmZpbHRlcigoYykgPT4gYy5vdmVybGFwR3JvdXAgPT09IG92ZXJsYXBHcm91cCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250cm9sc0Zvckdyb3VwLmZvckVhY2goKGNvbnRyb2wxKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB2ZWxvY2l0eSA9IFZlY3RvcjIuWmVybygpO1xyXG4gICAgICAgICAgICBjb25zdCBjZW50ZXIgPSBuZXcgVmVjdG9yMihjb250cm9sMS5jZW50ZXJYLCBjb250cm9sMS5jZW50ZXJZKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRyb2xzRm9yR3JvdXAuZm9yRWFjaCgoY29udHJvbDIpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sMSAhPT0gY29udHJvbDIgJiYgQWR2YW5jZWREeW5hbWljVGV4dHVyZS5fT3ZlcmxhcHMoY29udHJvbDEsIGNvbnRyb2wyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB0d28gY29udHJvbHMgb3ZlcmxhcHMgZ2V0IGEgZGlyZWN0aW9uIHZlY3RvciBmcm9tIG9uZSBjb250cm9sJ3MgY2VudGVyIHRvIGFub3RoZXIgY29udHJvbCdzIGNlbnRlclxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBjZW50ZXIuc3VidHJhY3QobmV3IFZlY3RvcjIoY29udHJvbDIuY2VudGVyWCwgY29udHJvbDIuY2VudGVyWSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZmZMZW5ndGggPSBkaWZmLmxlbmd0aCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlmZkxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSB2ZWxvY2l0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eSA9IHZlbG9jaXR5LmFkZChkaWZmLm5vcm1hbGl6ZSgpLnNjYWxlKHJlcGVsRmFjdG9yIC8gZGlmZkxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodmVsb2NpdHkubGVuZ3RoKCkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBtb3ZlIHRoZSBjb250cm9sIGFsb25nIHRoZSBkaXJlY3Rpb24gdmVjdG9yIGF3YXkgZnJvbSB0aGUgb3ZlcmxhcHBpbmcgY29udHJvbFxyXG4gICAgICAgICAgICAgICAgdmVsb2NpdHkgPSB2ZWxvY2l0eS5ub3JtYWxpemUoKS5zY2FsZShkZWx0YVN0ZXAgKiAoY29udHJvbDEub3ZlcmxhcERlbHRhTXVsdGlwbGllciA/PyAxKSk7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sMS5saW5rT2Zmc2V0WEluUGl4ZWxzICs9IHZlbG9jaXR5Lng7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sMS5saW5rT2Zmc2V0WUluUGl4ZWxzICs9IHZlbG9jaXR5Lnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVsZWFzZSBhbGwgcmVzb3VyY2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5nZXRTY2VuZSgpO1xyXG4gICAgICAgIGlmICghc2NlbmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9yb290RWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgc2NlbmUub25CZWZvcmVDYW1lcmFSZW5kZXJPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9yZW5kZXJPYnNlcnZlcik7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Jlc2l6ZU9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHNjZW5lLmdldEVuZ2luZSgpLm9uUmVzaXplT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fcmVzaXplT2JzZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fcHJlUG9pbnRlck9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHNjZW5lLm9uUHJlUG9pbnRlck9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3ByZVBvaW50ZXJPYnNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9zY2VuZVJlbmRlck9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHNjZW5lLm9uQmVmb3JlUmVuZGVyT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fc2NlbmVSZW5kZXJPYnNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9wb2ludGVyT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgc2NlbmUub25Qb2ludGVyT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fcG9pbnRlck9ic2VydmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3ByZUtleWJvYXJkT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgc2NlbmUub25QcmVLZXlib2FyZE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3ByZUtleWJvYXJkT2JzZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fY2FudmFzUG9pbnRlck91dE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHNjZW5lLmdldEVuZ2luZSgpLm9uQ2FudmFzUG9pbnRlck91dE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX2NhbnZhc1BvaW50ZXJPdXRPYnNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9jYW52YXNCbHVyT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgc2NlbmUuZ2V0RW5naW5lKCkub25DYW52YXNCbHVyT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fY2FudmFzQmx1ck9ic2VydmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2xBZGRlZE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIub25Db250cm9sQWRkZWRPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9jb250cm9sQWRkZWRPYnNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9jb250cm9sUmVtb3ZlZE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIub25Db250cm9sUmVtb3ZlZE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX2NvbnRyb2xSZW1vdmVkT2JzZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fbGF5ZXJUb0Rpc3Bvc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5fbGF5ZXJUb0Rpc3Bvc2UudGV4dHVyZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2xheWVyVG9EaXNwb3NlLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5fbGF5ZXJUb0Rpc3Bvc2UgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9yb290Q29udGFpbmVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLm9uQ2xpcGJvYXJkT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMub25Db250cm9sUGlja2VkT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMub25CZWdpblJlbmRlck9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uRW5kUmVuZGVyT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMub25CZWdpbkxheW91dE9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uRW5kTGF5b3V0T2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMub25HdWlSZWFkeU9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9vblJlc2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuICAgICAgICBpZiAoIXNjZW5lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ2hlY2sgc2l6ZVxyXG4gICAgICAgIGNvbnN0IGVuZ2luZSA9IHNjZW5lLmdldEVuZ2luZSgpO1xyXG4gICAgICAgIGNvbnN0IHRleHR1cmVTaXplID0gdGhpcy5nZXRTaXplKCk7XHJcbiAgICAgICAgbGV0IHJlbmRlcldpZHRoID0gZW5naW5lLmdldFJlbmRlcldpZHRoKCkgKiB0aGlzLl9yZW5kZXJTY2FsZTtcclxuICAgICAgICBsZXQgcmVuZGVySGVpZ2h0ID0gZW5naW5lLmdldFJlbmRlckhlaWdodCgpICogdGhpcy5fcmVuZGVyU2NhbGU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJBdElkZWFsU2l6ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faWRlYWxXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySGVpZ2h0ID0gKHJlbmRlckhlaWdodCAqIHRoaXMuX2lkZWFsV2lkdGgpIC8gcmVuZGVyV2lkdGg7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJXaWR0aCA9IHRoaXMuX2lkZWFsV2lkdGg7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5faWRlYWxIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlcldpZHRoID0gKHJlbmRlcldpZHRoICogdGhpcy5faWRlYWxIZWlnaHQpIC8gcmVuZGVySGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySGVpZ2h0ID0gdGhpcy5faWRlYWxIZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRleHR1cmVTaXplLndpZHRoICE9PSByZW5kZXJXaWR0aCB8fCB0ZXh0dXJlU2l6ZS5oZWlnaHQgIT09IHJlbmRlckhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlVG8ocmVuZGVyV2lkdGgsIHJlbmRlckhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lkZWFsV2lkdGggfHwgdGhpcy5faWRlYWxIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIuX21hcmtBbGxBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlUmVjdCgwLCAwLCB0ZXh0dXJlU2l6ZS53aWR0aCAtIDEsIHRleHR1cmVTaXplLmhlaWdodCAtIDEpO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9nZXRHbG9iYWxWaWV3cG9ydCgpOiBWaWV3cG9ydCB7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xyXG4gICAgICAgIGNvbnN0IGdsb2JhbFZpZXdQb3J0ID0gdGhpcy5fZnVsbHNjcmVlblZpZXdwb3J0LnRvR2xvYmFsKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgY29uc3QgdGFyZ2V0WCA9IE1hdGgucm91bmQoZ2xvYmFsVmlld1BvcnQud2lkdGggKiAoMSAvIHRoaXMucm9vdENvbnRhaW5lci5zY2FsZVgpKTtcclxuICAgICAgICBjb25zdCB0YXJnZXRZID0gTWF0aC5yb3VuZChnbG9iYWxWaWV3UG9ydC5oZWlnaHQgKiAoMSAvIHRoaXMucm9vdENvbnRhaW5lci5zY2FsZVkpKTtcclxuXHJcbiAgICAgICAgZ2xvYmFsVmlld1BvcnQueCArPSAoZ2xvYmFsVmlld1BvcnQud2lkdGggLSB0YXJnZXRYKSAvIDI7XHJcbiAgICAgICAgZ2xvYmFsVmlld1BvcnQueSArPSAoZ2xvYmFsVmlld1BvcnQuaGVpZ2h0IC0gdGFyZ2V0WSkgLyAyO1xyXG5cclxuICAgICAgICBnbG9iYWxWaWV3UG9ydC53aWR0aCA9IHRhcmdldFg7XHJcbiAgICAgICAgZ2xvYmFsVmlld1BvcnQuaGVpZ2h0ID0gdGFyZ2V0WTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbFZpZXdQb3J0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgc2NyZWVuIGNvb3JkaW5hdGVzIGZvciBhIHZlY3RvcjNcclxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBkZWZpbmVzIHRoZSBwb3NpdGlvbiB0byBwcm9qZWN0XHJcbiAgICAgKiBAcGFyYW0gd29ybGRNYXRyaXggZGVmaW5lcyB0aGUgd29ybGQgbWF0cml4IHRvIHVzZVxyXG4gICAgICogQHJldHVybnMgdGhlIHByb2plY3RlZCBwb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0UHJvamVjdGVkUG9zaXRpb24ocG9zaXRpb246IFZlY3RvcjMsIHdvcmxkTWF0cml4OiBNYXRyaXgpOiBWZWN0b3IyIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdldFByb2plY3RlZFBvc2l0aW9uV2l0aFoocG9zaXRpb24sIHdvcmxkTWF0cml4KTtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIocmVzdWx0LngsIHJlc3VsdC55KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBzY3JlZW4gY29vcmRpbmF0ZXMgZm9yIGEgdmVjdG9yM1xyXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIGRlZmluZXMgdGhlIHBvc2l0aW9uIHRvIHByb2plY3RcclxuICAgICAqIEBwYXJhbSB3b3JsZE1hdHJpeCBkZWZpbmVzIHRoZSB3b3JsZCBtYXRyaXggdG8gdXNlXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgcHJvamVjdGVkIHBvc2l0aW9uIHdpdGggWlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0UHJvamVjdGVkUG9zaXRpb25XaXRoWihwb3NpdGlvbjogVmVjdG9yMywgd29ybGRNYXRyaXg6IE1hdHJpeCk6IFZlY3RvcjMge1xyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5nZXRTY2VuZSgpO1xyXG4gICAgICAgIGlmICghc2NlbmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjMuWmVybygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBnbG9iYWxWaWV3cG9ydCA9IHRoaXMuX2dldEdsb2JhbFZpZXdwb3J0KCk7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdGVkUG9zaXRpb24gPSBWZWN0b3IzLlByb2plY3QocG9zaXRpb24sIHdvcmxkTWF0cml4LCBzY2VuZS5nZXRUcmFuc2Zvcm1NYXRyaXgoKSwgZ2xvYmFsVmlld3BvcnQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhwcm9qZWN0ZWRQb3NpdGlvbi54LCBwcm9qZWN0ZWRQb3NpdGlvbi55LCBwcm9qZWN0ZWRQb3NpdGlvbi56KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jaGVja1VwZGF0ZShjYW1lcmE6IENhbWVyYSwgc2tpcFVwZGF0ZT86IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fbGF5ZXJUb0Rpc3Bvc2UpIHtcclxuICAgICAgICAgICAgaWYgKChjYW1lcmEubGF5ZXJNYXNrICYgdGhpcy5fbGF5ZXJUb0Rpc3Bvc2UubGF5ZXJNYXNrKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9pc0Z1bGxzY3JlZW4gJiYgdGhpcy5fbGlua2VkQ29udHJvbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5nZXRTY2VuZSgpO1xyXG4gICAgICAgICAgICBpZiAoIXNjZW5lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZ2xvYmFsVmlld3BvcnQgPSB0aGlzLl9nZXRHbG9iYWxWaWV3cG9ydCgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRyb2wgb2YgdGhpcy5fbGlua2VkQ29udHJvbHMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY29udHJvbC5pc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc2ggPSBjb250cm9sLl9saW5rZWRNZXNoIGFzIEFic3RyYWN0TWVzaDtcclxuICAgICAgICAgICAgICAgIGlmICghbWVzaCB8fCBtZXNoLmlzRGlzcG9zZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFRvb2xzLlNldEltbWVkaWF0ZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wubGlua1dpdGhNZXNoKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBtZXNoLmdldEJvdW5kaW5nSW5mbyA/IG1lc2guZ2V0Qm91bmRpbmdJbmZvKCkuYm91bmRpbmdTcGhlcmUuY2VudGVyIDogKFZlY3RvcjMuWmVyb1JlYWRPbmx5IGFzIFZlY3RvcjMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdGVkUG9zaXRpb24gPSBWZWN0b3IzLlByb2plY3QocG9zaXRpb24sIG1lc2guZ2V0V29ybGRNYXRyaXgoKSwgc2NlbmUuZ2V0VHJhbnNmb3JtTWF0cml4KCksIGdsb2JhbFZpZXdwb3J0KTtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9qZWN0ZWRQb3NpdGlvbi56IDwgMCB8fCBwcm9qZWN0ZWRQb3NpdGlvbi56ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2wubm90UmVuZGVyYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLm5vdFJlbmRlcmFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZUludmFsaWRhdGVSZWN0T3B0aW1pemF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbC5pbnZhbGlkYXRlUmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRyb2wuX21vdmVUb1Byb2plY3RlZFBvc2l0aW9uKHByb2plY3RlZFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuX2lzRGlydHkgJiYgIXRoaXMuX3Jvb3RDb250YWluZXIuaXNEaXJ0eSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2lzRGlydHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9yZW5kZXIoc2tpcFVwZGF0ZSk7XHJcbiAgICAgICAgaWYgKCFza2lwVXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMuYXBwbHlZSW52ZXJzaW9uT25VcGRhdGUsIHRoaXMucHJlbXVsQWxwaGEsIEFkdmFuY2VkRHluYW1pY1RleHR1cmUuQWxsb3dHUFVPcHRpbWl6YXRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY2xlYXJNZWFzdXJlID0gbmV3IE1lYXN1cmUoMCwgMCwgMCwgMCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVuZGVyKHNraXBSZW5kZXI/OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdGV4dHVyZVNpemUgPSB0aGlzLmdldFNpemUoKTtcclxuICAgICAgICBjb25zdCByZW5kZXJXaWR0aCA9IHRleHR1cmVTaXplLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IHJlbmRlckhlaWdodCA9IHRleHR1cmVTaXplLmhlaWdodDtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dCgpO1xyXG4gICAgICAgIGNvbnRleHQuZm9udCA9IFwiMThweCBBcmlhbFwiO1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBcIndoaXRlXCI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9uR3VpUmVhZHlPYnNlcnZhYmxlLmhhc09ic2VydmVycygpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrR3VpSXNSZWFkeSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqIFdlIGhhdmUgdG8gcmVjaGVjayB0aGUgY2FtZXJhIHByb2plY3Rpb24gaW4gdGhlIGNhc2UgdGhlIHJvb3QgY29udHJvbCdzIGNoaWxkcmVuIGhhdmUgY2hhbmdlZCAgKi9cclxuICAgICAgICBpZiAodGhpcy5fcm9vdENoaWxkcmVuSGF2ZUNoYW5nZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgY2FtZXJhID0gdGhpcy5nZXRTY2VuZSgpPy5hY3RpdmVDYW1lcmE7XHJcbiAgICAgICAgICAgIGlmIChjYW1lcmEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RDaGlsZHJlbkhhdmVDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1VwZGF0ZShjYW1lcmEsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMYXlvdXRcclxuICAgICAgICB0aGlzLm9uQmVnaW5MYXlvdXRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgICAgICBjb25zdCBtZWFzdXJlID0gbmV3IE1lYXN1cmUoMCwgMCwgcmVuZGVyV2lkdGgsIHJlbmRlckhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5fbnVtTGF5b3V0Q2FsbHMgPSAwO1xyXG4gICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIuX2xheW91dChtZWFzdXJlLCBjb250ZXh0KTtcclxuICAgICAgICB0aGlzLm9uRW5kTGF5b3V0T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XHJcbiAgICAgICAgdGhpcy5faXNEaXJ0eSA9IGZhbHNlOyAvLyBSZXN0b3JpbmcgdGhlIGRpcnR5IHN0YXRlIHRoYXQgY291bGQgaGF2ZSBiZWVuIHNldCBieSBjb250cm9scyBkdXJpbmcgbGF5b3V0IHByb2Nlc3NpbmdcclxuXHJcbiAgICAgICAgaWYgKHNraXBSZW5kZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2xlYXJcclxuICAgICAgICBpZiAodGhpcy5faW52YWxpZGF0ZWRSZWN0YW5nbGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2xlYXJNZWFzdXJlLmNvcHlGcm9tKHRoaXMuX2ludmFsaWRhdGVkUmVjdGFuZ2xlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jbGVhck1lYXN1cmUuY29weUZyb21GbG9hdHMoMCwgMCwgcmVuZGVyV2lkdGgsIHJlbmRlckhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KHRoaXMuX2NsZWFyTWVhc3VyZS5sZWZ0LCB0aGlzLl9jbGVhck1lYXN1cmUudG9wLCB0aGlzLl9jbGVhck1lYXN1cmUud2lkdGgsIHRoaXMuX2NsZWFyTWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgIGlmICh0aGlzLl9iYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX2JhY2tncm91bmQ7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QodGhpcy5fY2xlYXJNZWFzdXJlLmxlZnQsIHRoaXMuX2NsZWFyTWVhc3VyZS50b3AsIHRoaXMuX2NsZWFyTWVhc3VyZS53aWR0aCwgdGhpcy5fY2xlYXJNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVuZGVyXHJcbiAgICAgICAgdGhpcy5vbkJlZ2luUmVuZGVyT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XHJcbiAgICAgICAgdGhpcy5fbnVtUmVuZGVyQ2FsbHMgPSAwO1xyXG4gICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIuX3JlbmRlcihjb250ZXh0LCB0aGlzLl9pbnZhbGlkYXRlZFJlY3RhbmdsZSk7XHJcbiAgICAgICAgdGhpcy5vbkVuZFJlbmRlck9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVkUmVjdGFuZ2xlID0gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfY2hhbmdlQ3Vyc29yKGN1cnNvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Jvb3RFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50LnN0eWxlLmN1cnNvciA9IGN1cnNvcjtcclxuICAgICAgICAgICAgdGhpcy5fY3Vyc29yQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9yZWdpc3Rlckxhc3RDb250cm9sRG93bihjb250cm9sOiBDb250cm9sLCBwb2ludGVySWQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2xhc3RDb250cm9sRG93bltwb2ludGVySWRdID0gY29udHJvbDtcclxuICAgICAgICB0aGlzLm9uQ29udHJvbFBpY2tlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGNvbnRyb2wpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBfZG9QaWNraW5nKHg6IG51bWJlciwgeTogbnVtYmVyLCBwaTogTnVsbGFibGU8UG9pbnRlckluZm9CYXNlPiwgdHlwZTogbnVtYmVyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgZGVsdGFYPzogbnVtYmVyLCBkZWx0YVk/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuICAgICAgICBpZiAoIXNjZW5lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZW5naW5lID0gc2NlbmUuZ2V0RW5naW5lKCk7XHJcbiAgICAgICAgY29uc3QgdGV4dHVyZVNpemUgPSB0aGlzLmdldFNpemUoKTtcclxuICAgICAgICBpZiAodGhpcy5faXNGdWxsc2NyZWVuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhbWVyYSA9IHNjZW5lLmNhbWVyYVRvVXNlRm9yUG9pbnRlcnMgfHwgc2NlbmUuYWN0aXZlQ2FtZXJhO1xyXG4gICAgICAgICAgICBpZiAoIWNhbWVyYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZXdwb3J0ID0gY2FtZXJhLnZpZXdwb3J0O1xyXG4gICAgICAgICAgICB4ID0geCAqICh0ZXh0dXJlU2l6ZS53aWR0aCAvIChlbmdpbmUuZ2V0UmVuZGVyV2lkdGgoKSAqIHZpZXdwb3J0LndpZHRoKSk7XHJcbiAgICAgICAgICAgIHkgPSB5ICogKHRleHR1cmVTaXplLmhlaWdodCAvIChlbmdpbmUuZ2V0UmVuZGVySGVpZ2h0KCkgKiB2aWV3cG9ydC5oZWlnaHQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2NhcHR1cmluZ0NvbnRyb2xbcG9pbnRlcklkXSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY2FwdHVyaW5nQ29udHJvbFtwb2ludGVySWRdLmlzUG9pbnRlckJsb2NrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3VsZEJsb2NrUG9pbnRlciA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fY2FwdHVyaW5nQ29udHJvbFtwb2ludGVySWRdLl9wcm9jZXNzT2JzZXJ2YWJsZXModHlwZSwgeCwgeSwgcGksIHBvaW50ZXJJZCwgYnV0dG9uSW5kZXgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jdXJzb3JDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9yb290Q29udGFpbmVyLl9wcm9jZXNzUGlja2luZyh4LCB5LCBwaSwgdHlwZSwgcG9pbnRlcklkLCBidXR0b25JbmRleCwgZGVsdGFYLCBkZWx0YVkpKSB7XHJcbiAgICAgICAgICAgIGlmICghc2NlbmUuZG9Ob3RIYW5kbGVDdXJzb3JzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VDdXJzb3IoXCJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJNT1ZFKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0Q29udHJvbE92ZXJbcG9pbnRlcklkXS5fb25Qb2ludGVyT3V0KHRoaXMuX2xhc3RDb250cm9sT3Zlcltwb2ludGVySWRdLCBwaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RDb250cm9sT3Zlcltwb2ludGVySWRdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX2N1cnNvckNoYW5nZWQgJiYgIXNjZW5lLmRvTm90SGFuZGxlQ3Vyc29ycykge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VDdXJzb3IoXCJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX21hbmFnZUZvY3VzKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX2NsZWFuQ29udHJvbEFmdGVyUmVtb3ZhbEZyb21MaXN0KGxpc3Q6IHsgW3BvaW50ZXJJZDogbnVtYmVyXTogQ29udHJvbCB9LCBjb250cm9sOiBDb250cm9sKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBwb2ludGVySWQgaW4gbGlzdCkge1xyXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChsaXN0LCBwb2ludGVySWQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBsYXN0Q29udHJvbE92ZXIgPSBsaXN0W3BvaW50ZXJJZF07XHJcbiAgICAgICAgICAgIGlmIChsYXN0Q29udHJvbE92ZXIgPT09IGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBsaXN0W3BvaW50ZXJJZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX2NsZWFuQ29udHJvbEFmdGVyUmVtb3ZhbChjb250cm9sOiBDb250cm9sKSB7XHJcbiAgICAgICAgdGhpcy5fY2xlYW5Db250cm9sQWZ0ZXJSZW1vdmFsRnJvbUxpc3QodGhpcy5fbGFzdENvbnRyb2xEb3duLCBjb250cm9sKTtcclxuICAgICAgICB0aGlzLl9jbGVhbkNvbnRyb2xBZnRlclJlbW92YWxGcm9tTGlzdCh0aGlzLl9sYXN0Q29udHJvbE92ZXIsIGNvbnRyb2wpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHJ1biBhIHBvaW50ZXIgZXZlbnQgb24gdGhpcyBBRFQgYW5kIHdpbGwgdHJpZ2dlciBhbnkgcG9pbnRlciBldmVudHMgb24gYW55IGNvbnRyb2xzXHJcbiAgICAgKiBUaGlzIHdpbGwgd29yayBvbiBhIGZ1bGxzY3JlZW4gQURUIG9ubHkuIEZvciBtZXNoIGJhc2VkIEFEVCwgc2ltdWxhdGUgcG9pbnRlciBldmVudHMgdXNpbmcgdGhlIHNjZW5lIGRpcmVjdGx5LlxyXG4gICAgICogQHBhcmFtIHggcG9pbnRlciBYIG9uIHRoZSBjYW52YXMgZm9yIHRoZSBwaWNraW5nXHJcbiAgICAgKiBAcGFyYW0geSBwb2ludGVyIFkgb24gdGhlIGNhbnZhcyBmb3IgdGhlIHBpY2tpbmdcclxuICAgICAqIEBwYXJhbSBwaSBvcHRpb25hbCBwb2ludGVyIGluZm9ybWF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwaWNrKHg6IG51bWJlciwgeTogbnVtYmVyLCBwaTogTnVsbGFibGU8UG9pbnRlckluZm9QcmU+ID0gbnVsbCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0Z1bGxzY3JlZW4gJiYgdGhpcy5fc2NlbmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJhbnNsYXRlVG9QaWNraW5nKHRoaXMuX3NjZW5lLCBuZXcgVmlld3BvcnQoMCwgMCwgMCwgMCksIHBpLCB4LCB5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdHJhbnNsYXRlVG9QaWNraW5nKHNjZW5lOiBTY2VuZSwgdGVtcFZpZXdwb3J0OiBWaWV3cG9ydCwgcGk6IE51bGxhYmxlPFBvaW50ZXJJbmZvUHJlPiwgeDogbnVtYmVyID0gc2NlbmUucG9pbnRlclgsIHk6IG51bWJlciA9IHNjZW5lLnBvaW50ZXJZKSB7XHJcbiAgICAgICAgY29uc3QgY2FtZXJhID0gc2NlbmUuY2FtZXJhVG9Vc2VGb3JQb2ludGVycyB8fCBzY2VuZS5hY3RpdmVDYW1lcmE7XHJcbiAgICAgICAgY29uc3QgZW5naW5lID0gc2NlbmUuZ2V0RW5naW5lKCk7XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxDYW1lcmFUb1VzZUZvclBvaW50ZXJzID0gc2NlbmUuY2FtZXJhVG9Vc2VGb3JQb2ludGVycztcclxuXHJcbiAgICAgICAgaWYgKCFjYW1lcmEpIHtcclxuICAgICAgICAgICAgdGVtcFZpZXdwb3J0LnggPSAwO1xyXG4gICAgICAgICAgICB0ZW1wVmlld3BvcnQueSA9IDA7XHJcbiAgICAgICAgICAgIHRlbXBWaWV3cG9ydC53aWR0aCA9IGVuZ2luZS5nZXRSZW5kZXJXaWR0aCgpO1xyXG4gICAgICAgICAgICB0ZW1wVmlld3BvcnQuaGVpZ2h0ID0gZW5naW5lLmdldFJlbmRlckhlaWdodCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjYW1lcmEucmlnQ2FtZXJhcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJpZyBjYW1lcmEgLSB3ZSBuZWVkIHRvIGZpbmQgdGhlIGNhbWVyYSB0byB1c2UgZm9yIHRoaXMgZXZlbnRcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ1ZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KDAsIDAsIDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgY2FtZXJhLnJpZ0NhbWVyYXMuZm9yRWFjaCgocmlnQ2FtZXJhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIHZpZXdwb3J0IG9mIHRoaXMgY2FtZXJhXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnQ2FtZXJhLnZpZXdwb3J0LnRvR2xvYmFsVG9SZWYoZW5naW5lLmdldFJlbmRlcldpZHRoKCksIGVuZ2luZS5nZXRSZW5kZXJIZWlnaHQoKSwgcmlnVmlld3BvcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkWCA9IHggLyBlbmdpbmUuZ2V0SGFyZHdhcmVTY2FsaW5nTGV2ZWwoKSAtIHJpZ1ZpZXdwb3J0Lng7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRZID0geSAvIGVuZ2luZS5nZXRIYXJkd2FyZVNjYWxpbmdMZXZlbCgpIC0gKGVuZ2luZS5nZXRSZW5kZXJIZWlnaHQoKSAtIHJpZ1ZpZXdwb3J0LnkgLSByaWdWaWV3cG9ydC5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBwb2ludGVyIGlzIGluIHRoZSBjYW1lcmEncyB2aWV3cG9ydFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZFggPCAwIHx8IHRyYW5zZm9ybWVkWSA8IDAgfHwgeCA+IHJpZ1ZpZXdwb3J0LndpZHRoIHx8IHkgPiByaWdWaWV3cG9ydC5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3V0IG9mIHZpZXdwb3J0IC0gZG9uJ3QgdXNlIHRoaXMgY2FtZXJhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBjYW1lcmEgdG8gdXNlIGZvciBwb2ludGVycyB1bnRpbCB0aGlzIHBvaW50ZXIgbG9vcCBpcyBvdmVyXHJcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUuY2FtZXJhVG9Vc2VGb3JQb2ludGVycyA9IHJpZ0NhbWVyYTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIHZpZXdwb3J0XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcFZpZXdwb3J0LnggPSByaWdWaWV3cG9ydC54O1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBWaWV3cG9ydC55ID0gcmlnVmlld3BvcnQueTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wVmlld3BvcnQud2lkdGggPSByaWdWaWV3cG9ydC53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wVmlld3BvcnQuaGVpZ2h0ID0gcmlnVmlld3BvcnQuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYW1lcmEudmlld3BvcnQudG9HbG9iYWxUb1JlZihlbmdpbmUuZ2V0UmVuZGVyV2lkdGgoKSwgZW5naW5lLmdldFJlbmRlckhlaWdodCgpLCB0ZW1wVmlld3BvcnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZFggPSB4IC8gZW5naW5lLmdldEhhcmR3YXJlU2NhbGluZ0xldmVsKCkgLSB0ZW1wVmlld3BvcnQueDtcclxuICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZFkgPSB5IC8gZW5naW5lLmdldEhhcmR3YXJlU2NhbGluZ0xldmVsKCkgLSAoZW5naW5lLmdldFJlbmRlckhlaWdodCgpIC0gdGVtcFZpZXdwb3J0LnkgLSB0ZW1wVmlld3BvcnQuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLl9zaG91bGRCbG9ja1BvaW50ZXIgPSBmYWxzZTtcclxuICAgICAgICAvLyBEbyBwaWNraW5nIG1vZGlmaWVzIF9zaG91bGRCbG9ja1BvaW50ZXJcclxuICAgICAgICBpZiAocGkpIHtcclxuICAgICAgICAgICAgY29uc3QgcG9pbnRlcklkID0gKHBpLmV2ZW50IGFzIElQb2ludGVyRXZlbnQpLnBvaW50ZXJJZCB8fCB0aGlzLl9kZWZhdWx0TW91c2VQb2ludGVySWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2RvUGlja2luZyh0cmFuc2Zvcm1lZFgsIHRyYW5zZm9ybWVkWSwgcGksIHBpLnR5cGUsIHBvaW50ZXJJZCwgcGkuZXZlbnQuYnV0dG9uLCAoPElXaGVlbEV2ZW50PnBpLmV2ZW50KS5kZWx0YVgsICg8SVdoZWVsRXZlbnQ+cGkuZXZlbnQpLmRlbHRhWSk7XHJcbiAgICAgICAgICAgIC8vIEF2b2lkIG92ZXJ3cml0aW5nIGEgdHJ1ZSBza2lwT25Qb2ludGVyT2JzZXJ2YWJsZSB0byBmYWxzZVxyXG4gICAgICAgICAgICBpZiAoKHRoaXMuX3Nob3VsZEJsb2NrUG9pbnRlciAmJiAhKHBpLnR5cGUgJiB0aGlzLnNraXBCbG9ja0V2ZW50cykpIHx8IHRoaXMuX2NhcHR1cmluZ0NvbnRyb2xbcG9pbnRlcklkXSkge1xyXG4gICAgICAgICAgICAgICAgcGkuc2tpcE9uUG9pbnRlck9ic2VydmFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZG9QaWNraW5nKHRyYW5zZm9ybWVkWCwgdHJhbnNmb3JtZWRZLCBudWxsLCBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSTU9WRSwgdGhpcy5fZGVmYXVsdE1vdXNlUG9pbnRlcklkLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgb3ZlcnJpZGRlbiBieSBhIHJpZyBjYW1lcmEgLSByZXNldCBiYWNrIHRvIHRoZSBvcmlnaW5hbCB2YWx1ZVxyXG4gICAgICAgIHNjZW5lLmNhbWVyYVRvVXNlRm9yUG9pbnRlcnMgPSBvcmlnaW5hbENhbWVyYVRvVXNlRm9yUG9pbnRlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEF0dGFjaCB0byBhbGwgc2NlbmUgZXZlbnRzIHJlcXVpcmVkIHRvIHN1cHBvcnQgcG9pbnRlciBldmVudHMgKi9cclxuICAgIHB1YmxpYyBhdHRhY2goKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgc2NlbmUgPSB0aGlzLmdldFNjZW5lKCk7XHJcbiAgICAgICAgaWYgKCFzY2VuZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0ZW1wVmlld3BvcnQgPSBuZXcgVmlld3BvcnQoMCwgMCwgMCwgMCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3ByZVBvaW50ZXJPYnNlcnZlciA9IHNjZW5lLm9uUHJlUG9pbnRlck9ic2VydmFibGUuYWRkKChwaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBzY2VuZS5pc1BvaW50ZXJDYXB0dXJlZCgoPElQb2ludGVyRXZlbnQ+cGkuZXZlbnQpLnBvaW50ZXJJZCkgJiZcclxuICAgICAgICAgICAgICAgIHBpLnR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJVUCAmJlxyXG4gICAgICAgICAgICAgICAgIXRoaXMuX2NhcHR1cmVkUG9pbnRlcklkcy5oYXMoKHBpLmV2ZW50IGFzIElQb2ludGVyRXZlbnQpLnBvaW50ZXJJZClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgcGkudHlwZSAhPT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUk1PVkUgJiZcclxuICAgICAgICAgICAgICAgIHBpLnR5cGUgIT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJVUCAmJlxyXG4gICAgICAgICAgICAgICAgcGkudHlwZSAhPT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUkRPV04gJiZcclxuICAgICAgICAgICAgICAgIHBpLnR5cGUgIT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJXSEVFTCAmJlxyXG4gICAgICAgICAgICAgICAgcGkudHlwZSAhPT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUlRBUFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHBpLnR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJNT1ZFKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBwb2ludGVyTW92ZSBldmVudHMgZmlyaW5nIHdoaWxlIHRoZSBwb2ludGVyIGlzIGNhcHR1cmVkIGJ5IHRoZSBzY2VuZVxyXG4gICAgICAgICAgICAgICAgaWYgKHNjZW5lLmlzUG9pbnRlckNhcHR1cmVkKCg8SVBvaW50ZXJFdmVudD5waS5ldmVudCkucG9pbnRlcklkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocGkuZXZlbnQgYXMgSVBvaW50ZXJFdmVudCkucG9pbnRlcklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVmYXVsdE1vdXNlUG9pbnRlcklkID0gKHBpLmV2ZW50IGFzIElQb2ludGVyRXZlbnQpLnBvaW50ZXJJZDsgLy8gVGhpcyBpcyByZXF1aXJlZCB0byBtYWtlIHN1cmUgd2UgaGF2ZSB0aGUgY29ycmVjdCBwb2ludGVyIElEIGZvciB3aGVlbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZVRvUGlja2luZyhzY2VuZSwgdGVtcFZpZXdwb3J0LCBwaSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fYXR0YWNoUGlja2luZ1RvU2NlbmVSZW5kZXIoc2NlbmUsICgpID0+IHRoaXMuX3RyYW5zbGF0ZVRvUGlja2luZyhzY2VuZSwgdGVtcFZpZXdwb3J0LCBudWxsKSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuX2F0dGFjaFRvT25Qb2ludGVyT3V0KHNjZW5lKTtcclxuICAgICAgICB0aGlzLl9hdHRhY2hUb09uQmx1cihzY2VuZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZm9jdXNQcm9wZXJ0aWVzOiB7IGluZGV4OiBudW1iZXI7IHRvdGFsOiBudW1iZXIgfSA9IHsgaW5kZXg6IDAsIHRvdGFsOiAtMSB9O1xyXG5cclxuICAgIHByaXZhdGUgX2ZvY3VzTmV4dEVsZW1lbnQoZm9yd2FyZDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcclxuICAgICAgICAvLyBnZW5lcmF0ZSB0aGUgb3JkZXIgb2YgdGFiLWFibGUgY29udHJvbHNcclxuICAgICAgICBjb25zdCBzb3J0ZWRUYWJiYWJsZUNvbnRyb2xzOiBDb250cm9sW10gPSBbXTtcclxuICAgICAgICB0aGlzLmV4ZWN1dGVPbkFsbENvbnRyb2xzKChjb250cm9sKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjb250cm9sLmlzRm9jdXNJbnZpc2libGUgfHwgIWNvbnRyb2wuaXNWaXNpYmxlIHx8IGNvbnRyb2wudGFiSW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc29ydGVkVGFiYmFibGVDb250cm9scy5wdXNoKGNvbnRyb2wpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGlmIG5vIGNvbnRyb2wgaXMgdGFiLWFibGUsIHJldHVyblxyXG4gICAgICAgIGlmIChzb3J0ZWRUYWJiYWJsZUNvbnRyb2xzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNvcnRlZFRhYmJhYmxlQ29udHJvbHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAvLyBpZiB0YWJJbmRleCBpcyAwLCBwdXQgaXQgaW4gdGhlIGVuZCBvZiB0aGUgbGlzdCwgb3RoZXJ3aXNlIHNvcnQgYnkgdGFiSW5kZXhcclxuICAgICAgICAgICAgcmV0dXJuIGEudGFiSW5kZXggPT09IDAgPyAxIDogYi50YWJJbmRleCA9PT0gMCA/IC0xIDogYS50YWJJbmRleCAtIGIudGFiSW5kZXg7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fZm9jdXNQcm9wZXJ0aWVzLnRvdGFsID0gc29ydGVkVGFiYmFibGVDb250cm9scy5sZW5ndGg7XHJcbiAgICAgICAgLy8gaWYgbm8gY29udHJvbCBpcyBmb2N1c2VkLCBmb2N1cyB0aGUgZmlyc3Qgb25lXHJcbiAgICAgICAgbGV0IG5leHRJbmRleCA9IC0xO1xyXG4gICAgICAgIGlmICghdGhpcy5fZm9jdXNlZENvbnRyb2wpIHtcclxuICAgICAgICAgICAgbmV4dEluZGV4ID0gZm9yd2FyZCA/IDAgOiBzb3J0ZWRUYWJiYWJsZUNvbnRyb2xzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gc29ydGVkVGFiYmFibGVDb250cm9scy5pbmRleE9mKHRoaXMuX2ZvY3VzZWRDb250cm9sKTtcclxuICAgICAgICAgICAgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsgKGZvcndhcmQgPyAxIDogLTEpO1xyXG4gICAgICAgICAgICBpZiAobmV4dEluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgbmV4dEluZGV4ID0gc29ydGVkVGFiYmFibGVDb250cm9scy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRJbmRleCA+PSBzb3J0ZWRUYWJiYWJsZUNvbnRyb2xzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgbmV4dEluZGV4ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzb3J0ZWRUYWJiYWJsZUNvbnRyb2xzW25leHRJbmRleF0uZm9jdXMoKTtcclxuICAgICAgICB0aGlzLl9mb2N1c1Byb3BlcnRpZXMuaW5kZXggPSBuZXh0SW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfb25DbGlwYm9hcmRDb3B5ID0gKHJhd0V2dDogRXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBldnQgPSByYXdFdnQgYXMgQ2xpcGJvYXJkRXZlbnQ7XHJcbiAgICAgICAgY29uc3QgZXYgPSBuZXcgQ2xpcGJvYXJkSW5mbyhDbGlwYm9hcmRFdmVudFR5cGVzLkNPUFksIGV2dCk7XHJcbiAgICAgICAgdGhpcy5vbkNsaXBib2FyZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGV2KTtcclxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9vbkNsaXBib2FyZEN1dCA9IChyYXdFdnQ6IEV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXZ0ID0gcmF3RXZ0IGFzIENsaXBib2FyZEV2ZW50O1xyXG4gICAgICAgIGNvbnN0IGV2ID0gbmV3IENsaXBib2FyZEluZm8oQ2xpcGJvYXJkRXZlbnRUeXBlcy5DVVQsIGV2dCk7XHJcbiAgICAgICAgdGhpcy5vbkNsaXBib2FyZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGV2KTtcclxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9vbkNsaXBib2FyZFBhc3RlID0gKHJhd0V2dDogRXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBldnQgPSByYXdFdnQgYXMgQ2xpcGJvYXJkRXZlbnQ7XHJcbiAgICAgICAgY29uc3QgZXYgPSBuZXcgQ2xpcGJvYXJkSW5mbyhDbGlwYm9hcmRFdmVudFR5cGVzLlBBU1RFLCBldnQpO1xyXG4gICAgICAgIHRoaXMub25DbGlwYm9hcmRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhldik7XHJcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciB0aGUgY2xpcGJvYXJkIEV2ZW50cyBvbnRvIHRoZSBjYW52YXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlZ2lzdGVyQ2xpcGJvYXJkRXZlbnRzKCk6IHZvaWQge1xyXG4gICAgICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgdGhpcy5fb25DbGlwYm9hcmRDb3B5LCBmYWxzZSk7XHJcbiAgICAgICAgc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiY3V0XCIsIHRoaXMuX29uQ2xpcGJvYXJkQ3V0LCBmYWxzZSk7XHJcbiAgICAgICAgc2VsZi5hZGRFdmVudExpc3RlbmVyKFwicGFzdGVcIiwgdGhpcy5fb25DbGlwYm9hcmRQYXN0ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnJlZ2lzdGVyIHRoZSBjbGlwYm9hcmQgRXZlbnRzIGZyb20gdGhlIGNhbnZhc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdW5SZWdpc3RlckNsaXBib2FyZEV2ZW50cygpOiB2b2lkIHtcclxuICAgICAgICBzZWxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb3B5XCIsIHRoaXMuX29uQ2xpcGJvYXJkQ29weSk7XHJcbiAgICAgICAgc2VsZi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY3V0XCIsIHRoaXMuX29uQ2xpcGJvYXJkQ3V0KTtcclxuICAgICAgICBzZWxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYXN0ZVwiLCB0aGlzLl9vbkNsaXBib2FyZFBhc3RlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zZm9ybSB1dnMgZnJvbSBtZXNoIHNwYWNlIHRvIHRleHR1cmUgc3BhY2UsIHRha2luZyB0aGUgdGV4dHVyZSBpbnRvIGFjY291bnRcclxuICAgICAqIEBwYXJhbSB1diB0aGUgdXZzIGluIG1lc2ggc3BhY2VcclxuICAgICAqIEByZXR1cm5zIHRoZSB1dnMgaW4gdGV4dHVyZSBzcGFjZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF90cmFuc2Zvcm1VdnModXY6IFZlY3RvcjIpOiBWZWN0b3IyIHtcclxuICAgICAgICBjb25zdCB0ZXh0dXJlTWF0cml4ID0gdGhpcy5nZXRUZXh0dXJlTWF0cml4KCk7XHJcbiAgICAgICAgbGV0IHJlc3VsdDtcclxuICAgICAgICBpZiAodGV4dHVyZU1hdHJpeC5pc0lkZW50aXR5QXMzeDIoKSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB1djtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBob21vZ2VuZW91c1RleHR1cmVNYXRyaXggPSBUbXBWZWN0b3JzLk1hdHJpeFswXTtcclxuXHJcbiAgICAgICAgICAgIHRleHR1cmVNYXRyaXguZ2V0Um93VG9SZWYoMCwgVG1wVmVjdG9ycy5WZWN0b3I0WzBdKTtcclxuICAgICAgICAgICAgdGV4dHVyZU1hdHJpeC5nZXRSb3dUb1JlZigxLCBUbXBWZWN0b3JzLlZlY3RvcjRbMV0pO1xyXG4gICAgICAgICAgICB0ZXh0dXJlTWF0cml4LmdldFJvd1RvUmVmKDIsIFRtcFZlY3RvcnMuVmVjdG9yNFsyXSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByMCA9IFRtcFZlY3RvcnMuVmVjdG9yNFswXTtcclxuICAgICAgICAgICAgY29uc3QgcjEgPSBUbXBWZWN0b3JzLlZlY3RvcjRbMV07XHJcbiAgICAgICAgICAgIGNvbnN0IHIyID0gVG1wVmVjdG9ycy5WZWN0b3I0WzJdO1xyXG5cclxuICAgICAgICAgICAgaG9tb2dlbmVvdXNUZXh0dXJlTWF0cml4LnNldFJvd0Zyb21GbG9hdHMoMCwgcjAueCwgcjAueSwgMCwgMCk7XHJcbiAgICAgICAgICAgIGhvbW9nZW5lb3VzVGV4dHVyZU1hdHJpeC5zZXRSb3dGcm9tRmxvYXRzKDEsIHIxLngsIHIxLnksIDAsIDApO1xyXG4gICAgICAgICAgICBob21vZ2VuZW91c1RleHR1cmVNYXRyaXguc2V0Um93RnJvbUZsb2F0cygyLCAwLCAwLCAxLCAwKTtcclxuICAgICAgICAgICAgaG9tb2dlbmVvdXNUZXh0dXJlTWF0cml4LnNldFJvd0Zyb21GbG9hdHMoMywgcjIueCwgcjIueSwgMCwgMSk7XHJcblxyXG4gICAgICAgICAgICByZXN1bHQgPSBUbXBWZWN0b3JzLlZlY3RvcjJbMF07XHJcbiAgICAgICAgICAgIFZlY3RvcjIuVHJhbnNmb3JtVG9SZWYodXYsIGhvbW9nZW5lb3VzVGV4dHVyZU1hdHJpeCwgcmVzdWx0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluIHdyYXAgYW5kIG1pcnJvciBtb2RlLCB0aGUgdGV4dHVyZSBjb29yZGluYXRlIGZvciBjb29yZGluYXRlcyBtb3JlIHRoYW4gMSBpcyB0aGUgZnJhY3Rpb25hbCBwYXJ0IG9mIHRoZSBjb29yZGluYXRlXHJcbiAgICAgICAgaWYgKHRoaXMud3JhcFUgPT09IFRleHR1cmUuV1JBUF9BRERSRVNTTU9ERSB8fCB0aGlzLndyYXBVID09PSBUZXh0dXJlLk1JUlJPUl9BRERSRVNTTU9ERSkge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LnggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZlggPSByZXN1bHQueCAtIE1hdGgudHJ1bmMocmVzdWx0LngpO1xyXG4gICAgICAgICAgICAgICAgLy8gSW4gbWlycm9yIG1vZGUsIHRoZSBzaWduIG9mIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGUgZGVwZW5kcyBvbiB0aGUgaW50ZWdlciBwYXJ0IC1cclxuICAgICAgICAgICAgICAgIC8vIG9kZCBpbnRlZ2VycyBtZWFucyBpdCBpcyBtaXJyb3JlZCBmcm9tIHRoZSBvcmlnaW5hbCBjb29yZGluYXRlXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53cmFwVSA9PT0gVGV4dHVyZS5NSVJST1JfQUREUkVTU01PREUgJiYgTWF0aC50cnVuYyhyZXN1bHQueCkgJSAyID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZlggPSAxIC0gZlg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHQueCA9IGZYO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLndyYXBWID09PSBUZXh0dXJlLldSQVBfQUREUkVTU01PREUgfHwgdGhpcy53cmFwViA9PT0gVGV4dHVyZS5NSVJST1JfQUREUkVTU01PREUpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC55ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZZID0gcmVzdWx0LnkgLSBNYXRoLnRydW5jKHJlc3VsdC55KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLndyYXBWID09PSBUZXh0dXJlLk1JUlJPUl9BRERSRVNTTU9ERSAmJiBNYXRoLnRydW5jKHJlc3VsdC54KSAlIDIgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBmWSA9IDEgLSBmWTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdC55ID0gZlk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29ubmVjdCB0aGUgdGV4dHVyZSB0byBhIGhvc3RpbmcgbWVzaCB0byBlbmFibGUgaW50ZXJhY3Rpb25zXHJcbiAgICAgKiBAcGFyYW0gbWVzaCBkZWZpbmVzIHRoZSBtZXNoIHRvIGF0dGFjaCB0b1xyXG4gICAgICogQHBhcmFtIHN1cHBvcnRQb2ludGVyTW92ZSBkZWZpbmVzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHBvaW50ZXIgbW92ZSBldmVudHMgbXVzdCBiZSBjYXRjaGVkIGFzIHdlbGxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGF0dGFjaFRvTWVzaChtZXNoOiBBYnN0cmFjdE1lc2gsIHN1cHBvcnRQb2ludGVyTW92ZSA9IHRydWUpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuICAgICAgICBpZiAoIXNjZW5lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9wb2ludGVyT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgc2NlbmUub25Qb2ludGVyT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fcG9pbnRlck9ic2VydmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJPYnNlcnZlciA9IHNjZW5lLm9uUG9pbnRlck9ic2VydmFibGUuYWRkKChwaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBwaS50eXBlICE9PSBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSTU9WRSAmJlxyXG4gICAgICAgICAgICAgICAgcGkudHlwZSAhPT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUlVQICYmXHJcbiAgICAgICAgICAgICAgICBwaS50eXBlICE9PSBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSRE9XTiAmJlxyXG4gICAgICAgICAgICAgICAgcGkudHlwZSAhPT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUldIRUVMXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocGkudHlwZSA9PT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUk1PVkUgJiYgKHBpLmV2ZW50IGFzIElQb2ludGVyRXZlbnQpLnBvaW50ZXJJZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmYXVsdE1vdXNlUG9pbnRlcklkID0gKHBpLmV2ZW50IGFzIElQb2ludGVyRXZlbnQpLnBvaW50ZXJJZDsgLy8gVGhpcyBpcyByZXF1aXJlZCB0byBtYWtlIHN1cmUgd2UgaGF2ZSB0aGUgY29ycmVjdCBwb2ludGVyIElEIGZvciB3aGVlbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwb2ludGVySWQgPSAocGkuZXZlbnQgYXMgSVBvaW50ZXJFdmVudCkucG9pbnRlcklkIHx8IHRoaXMuX2RlZmF1bHRNb3VzZVBvaW50ZXJJZDtcclxuICAgICAgICAgICAgaWYgKHBpLnBpY2tJbmZvICYmIHBpLnBpY2tJbmZvLmhpdCAmJiBwaS5waWNrSW5mby5waWNrZWRNZXNoID09PSBtZXNoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdXYgPSBwaS5waWNrSW5mby5nZXRUZXh0dXJlQ29vcmRpbmF0ZXMoKTtcclxuICAgICAgICAgICAgICAgIGlmICh1dikge1xyXG4gICAgICAgICAgICAgICAgICAgIHV2ID0gdGhpcy5fdHJhbnNmb3JtVXZzKHV2KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5nZXRTaXplKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9QaWNraW5nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1di54ICogc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYXBwbHlZSW52ZXJzaW9uT25VcGRhdGUgPyAxLjAgLSB1di55IDogdXYueSkgKiBzaXplLmhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpLnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXJJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGkuZXZlbnQuYnV0dG9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPElXaGVlbEV2ZW50PnBpLmV2ZW50KS5kZWx0YVgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg8SVdoZWVsRXZlbnQ+cGkuZXZlbnQpLmRlbHRhWVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGkudHlwZSA9PT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUlVQKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGFzdENvbnRyb2xEb3duW3BvaW50ZXJJZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0Q29udHJvbERvd25bcG9pbnRlcklkXS5fZm9yY2VQb2ludGVyVXAocG9pbnRlcklkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9sYXN0Q29udHJvbERvd25bcG9pbnRlcklkXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzZWRDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJpZW5kbHlDb250cm9scyA9IHRoaXMuZm9jdXNlZENvbnRyb2wua2VlcHNGb2N1c1dpdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2FuTW92ZUZvY3VzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJpZW5kbHlDb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRyb2wgb2YgZnJpZW5kbHlDb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FtZSBob3N0LCBubyBuZWVkIHRvIGtlZXAgdGhlIGZvY3VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyA9PT0gY29udHJvbC5faG9zdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlmZmVyZW50IGhvc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvdGhlckhvc3QgPSBjb250cm9sLl9ob3N0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVySG9zdC5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF0gJiYgb3RoZXJIb3N0Ll9sYXN0Q29udHJvbE92ZXJbcG9pbnRlcklkXS5pc0FzY2VuZGFudChjb250cm9sKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbk1vdmVGb2N1cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5Nb3ZlRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkQ29udHJvbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBpLnR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJNT1ZFKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0Q29udHJvbE92ZXJbcG9pbnRlcklkXS5fb25Qb2ludGVyT3V0KHRoaXMuX2xhc3RDb250cm9sT3Zlcltwb2ludGVySWRdLCBwaSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBtZXNoLmVuYWJsZVBvaW50ZXJNb3ZlRXZlbnRzID0gc3VwcG9ydFBvaW50ZXJNb3ZlO1xyXG4gICAgICAgIHRoaXMuX2F0dGFjaFBpY2tpbmdUb1NjZW5lUmVuZGVyKFxyXG4gICAgICAgICAgICBzY2VuZSxcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnRlcklkID0gdGhpcy5fZGVmYXVsdE1vdXNlUG9pbnRlcklkO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGljayA9IHNjZW5lPy5waWNrKHNjZW5lLnBvaW50ZXJYLCBzY2VuZS5wb2ludGVyWSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGljayAmJiBwaWNrLmhpdCAmJiBwaWNrLnBpY2tlZE1lc2ggPT09IG1lc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdXYgPSBwaWNrLmdldFRleHR1cmVDb29yZGluYXRlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1dikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1diA9IHRoaXMuX3RyYW5zZm9ybVV2cyh1dik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmdldFNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9QaWNraW5nKHV2LnggKiBzaXplLndpZHRoLCAodGhpcy5hcHBseVlJbnZlcnNpb25PblVwZGF0ZSA/IDEuMCAtIHV2LnkgOiB1di55KSAqIHNpemUuaGVpZ2h0LCBudWxsLCBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSTU9WRSwgcG9pbnRlcklkLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0Q29udHJvbE92ZXJbcG9pbnRlcklkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0Q29udHJvbE92ZXJbcG9pbnRlcklkXS5fb25Qb2ludGVyT3V0KHRoaXMuX2xhc3RDb250cm9sT3Zlcltwb2ludGVySWRdLCBudWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RDb250cm9sT3Zlcltwb2ludGVySWRdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLl9hdHRhY2hUb09uUG9pbnRlck91dChzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5fYXR0YWNoVG9PbkJsdXIoc2NlbmUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNb3ZlIHRoZSBmb2N1cyB0byBhIHNwZWNpZmljIGNvbnRyb2xcclxuICAgICAqIEBwYXJhbSBjb250cm9sIGRlZmluZXMgdGhlIGNvbnRyb2wgd2hpY2ggd2lsbCByZWNlaXZlIHRoZSBmb2N1c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbW92ZUZvY3VzVG9Db250cm9sKGNvbnRyb2w6IENvbnRyb2wpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZvY3VzZWRDb250cm9sID0gY29udHJvbDtcclxuICAgICAgICB0aGlzLl9sYXN0UGlja2VkQ29udHJvbCA9IDxhbnk+Y29udHJvbDtcclxuICAgICAgICB0aGlzLl9ibG9ja05leHRGb2N1c0NoZWNrID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgX21hbmFnZUZvY3VzKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9ibG9ja05leHRGb2N1c0NoZWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Jsb2NrTmV4dEZvY3VzQ2hlY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdFBpY2tlZENvbnRyb2wgPSA8YW55PnRoaXMuX2ZvY3VzZWRDb250cm9sO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZvY3VzIG1hbmFnZW1lbnRcclxuICAgICAgICBpZiAodGhpcy5fZm9jdXNlZENvbnRyb2wpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZvY3VzZWRDb250cm9sICE9PSA8YW55PnRoaXMuX2xhc3RQaWNrZWRDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGFzdFBpY2tlZENvbnRyb2wuaXNGb2N1c0ludmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNlZENvbnRyb2wgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBfYXR0YWNoUGlja2luZ1RvU2NlbmVSZW5kZXIoc2NlbmU6IFNjZW5lLCBwaWNrRnVuY3Rpb246ICgpID0+IHZvaWQsIGZvcmNlUGlja2luZzogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3NjZW5lUmVuZGVyT2JzZXJ2ZXIgPSBzY2VuZS5vbkJlZm9yZVJlbmRlck9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrUG9pbnRlckV2ZXJ5RnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGlua2VkQ29udHJvbHMubGVuZ3RoID4gMCB8fCBmb3JjZVBpY2tpbmcpIHtcclxuICAgICAgICAgICAgICAgIHBpY2tGdW5jdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9hdHRhY2hUb09uUG9pbnRlck91dChzY2VuZTogU2NlbmUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9jYW52YXNQb2ludGVyT3V0T2JzZXJ2ZXIgPSBzY2VuZS5nZXRFbmdpbmUoKS5vbkNhbnZhc1BvaW50ZXJPdXRPYnNlcnZhYmxlLmFkZCgocG9pbnRlckV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0Q29udHJvbE92ZXJbcG9pbnRlckV2ZW50LnBvaW50ZXJJZF0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RDb250cm9sT3Zlcltwb2ludGVyRXZlbnQucG9pbnRlcklkXS5fb25Qb2ludGVyT3V0KHRoaXMuX2xhc3RDb250cm9sT3Zlcltwb2ludGVyRXZlbnQucG9pbnRlcklkXSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RDb250cm9sT3Zlcltwb2ludGVyRXZlbnQucG9pbnRlcklkXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xhc3RDb250cm9sRG93bltwb2ludGVyRXZlbnQucG9pbnRlcklkXSAmJiB0aGlzLl9sYXN0Q29udHJvbERvd25bcG9pbnRlckV2ZW50LnBvaW50ZXJJZF0gIT09IHRoaXMuX2NhcHR1cmluZ0NvbnRyb2xbcG9pbnRlckV2ZW50LnBvaW50ZXJJZF0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RDb250cm9sRG93bltwb2ludGVyRXZlbnQucG9pbnRlcklkXS5fZm9yY2VQb2ludGVyVXAocG9pbnRlckV2ZW50LnBvaW50ZXJJZCk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fbGFzdENvbnRyb2xEb3duW3BvaW50ZXJFdmVudC5wb2ludGVySWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9hdHRhY2hUb09uQmx1cihzY2VuZTogU2NlbmUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9jYW52YXNCbHVyT2JzZXJ2ZXIgPSBzY2VuZS5nZXRFbmdpbmUoKS5vbkNhbnZhc0JsdXJPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuX2xhc3RDb250cm9sRG93bikuZm9yRWFjaCgoWywgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5fb25DYW52YXNCbHVyKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmZvY3VzZWRDb250cm9sID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdENvbnRyb2xEb3duID0ge307XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXJpYWxpemVzIHRoZSBlbnRpcmUgR1VJIHN5c3RlbVxyXG4gICAgICogQHJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIEpTT04gc2VyaWFsaXplZCBkYXRhXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXJpYWxpemVDb250ZW50KCk6IGFueSB7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xyXG4gICAgICAgIGNvbnN0IHNlcmlhbGl6YXRpb25PYmplY3QgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IHt9LFxyXG4gICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLl9yb290Q29udGFpbmVyLnNlcmlhbGl6ZShzZXJpYWxpemF0aW9uT2JqZWN0LnJvb3QpO1xyXG5cclxuICAgICAgICByZXR1cm4gc2VyaWFsaXphdGlvbk9iamVjdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlY3JlYXRlIHRoZSBjb250ZW50IG9mIHRoZSBBRFQgZnJvbSBhIEpTT04gb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gc2VyaWFsaXplZE9iamVjdCBkZWZpbmUgdGhlIEpTT04gc2VyaWFsaXplZCBvYmplY3QgdG8gcmVzdG9yZSBmcm9tXHJcbiAgICAgKiBAcGFyYW0gc2NhbGVUb1NpemUgZGVmaW5lcyB3aGV0aGVyIHRvIHNjYWxlIHRvIHRleHR1cmUgdG8gdGhlIHNhdmVkIHNpemVcclxuICAgICAqIEBwYXJhbSB1cmxSZXdyaXRlciBkZWZpbmVzIGFuIHVybCByZXdyaXRlciB0byB1cGRhdGUgdXJscyBiZWZvcmUgc2VuZGluZyB0aGVtIHRvIHRoZSBjb250cm9sc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGFyc2VTZXJpYWxpemVkT2JqZWN0KHNlcmlhbGl6ZWRPYmplY3Q6IGFueSwgc2NhbGVUb1NpemU/OiBib29sZWFuLCB1cmxSZXdyaXRlcj86ICh1cmw6IHN0cmluZykgPT4gc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fcm9vdENvbnRhaW5lciA9IENvbnRyb2wuUGFyc2Uoc2VyaWFsaXplZE9iamVjdC5yb290LCB0aGlzLCB1cmxSZXdyaXRlcikgYXMgQ29udGFpbmVyO1xyXG4gICAgICAgIGlmIChzY2FsZVRvU2l6ZSkge1xyXG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHNlcmlhbGl6ZWRPYmplY3Qud2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHNlcmlhbGl6ZWRPYmplY3QuaGVpZ2h0O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpZHRoID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBoZWlnaHQgPT09IFwibnVtYmVyXCIgJiYgd2lkdGggPj0gMCAmJiBoZWlnaHQgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZVRvKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc2NhbGVzIHRoZSBHVUkgdG8gYSBkZWZhdWx0IHNpemUgaWYgbm9uZSB3YXMgYXZhaWxhYmxlIGluIHRoZSBzZXJpYWxpemVkIGNvbnRlbnRcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGVUbygxOTIwLCAxMDgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsb25lcyB0aGUgQURULiBJZiBubyBtZXNoIGlzIGRlZmluZWQsIHRoZSBHVUkgd2lsbCBiZSBjb25zaWRlcmVkIGFzIGEgZnVsbHNjcmVlbiBHVUlcclxuICAgICAqIEBwYXJhbSBuZXdOYW1lIGRlZmluZXMgdGhlIG5hbWUgb2YgdGhlIG5ldyBBRFRcclxuICAgICAqIEBwYXJhbSBhdHRhY2hUb01lc2ggZGVmaW5lcyBpZiB0aGUgbmV3IEFEVCBzaG91bGQgYmUgYXR0YWNoZWQgdG8gYSBtZXNoXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY2xvbmUgb2YgdGhlIEFEVFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgY2xvbmUobmV3TmFtZT86IHN0cmluZywgYXR0YWNoVG9NZXNoPzogQWJzdHJhY3RNZXNoKTogQWR2YW5jZWREeW5hbWljVGV4dHVyZSB7XHJcbiAgICAgICAgY29uc3Qgc2NlbmUgPSB0aGlzLmdldFNjZW5lKCk7XHJcblxyXG4gICAgICAgIGlmICghc2NlbmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmdldFNpemUoKTtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5zZXJpYWxpemVDb250ZW50KCk7XHJcbiAgICAgICAgbGV0IGNsb25lO1xyXG4gICAgICAgIGlmICghdGhpcy5faXNGdWxsc2NyZWVuKSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRhY2hUb01lc2gpIHtcclxuICAgICAgICAgICAgICAgIGNsb25lID0gQWR2YW5jZWREeW5hbWljVGV4dHVyZS5DcmVhdGVGb3JNZXNoKGF0dGFjaFRvTWVzaCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2xvbmUgPSBuZXcgQWR2YW5jZWREeW5hbWljVGV4dHVyZShuZXdOYW1lID8/IFwiQ2xvbmUgb2YgXCIgKyB0aGlzLm5hbWUsIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0LCBzY2VuZSwgIXRoaXMubm9NaXBtYXAsIHRoaXMuc2FtcGxpbmdNb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNsb25lID0gQWR2YW5jZWREeW5hbWljVGV4dHVyZS5DcmVhdGVGdWxsc2NyZWVuVUkobmV3TmFtZSA/PyBcIkNsb25lIG9mIFwiICsgdGhpcy5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2xvbmUucGFyc2VTZXJpYWxpemVkT2JqZWN0KGRhdGEpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWNyZWF0ZSB0aGUgY29udGVudCBvZiB0aGUgQURUIGZyb20gYSBKU09OIG9iamVjdFxyXG4gICAgICogQHBhcmFtIHNlcmlhbGl6ZWRPYmplY3QgZGVmaW5lIHRoZSBKU09OIHNlcmlhbGl6ZWQgb2JqZWN0IHRvIHJlc3RvcmUgZnJvbVxyXG4gICAgICogQHBhcmFtIHNjYWxlVG9TaXplIGRlZmluZXMgd2hldGhlciB0byBzY2FsZSB0byB0ZXh0dXJlIHRvIHRoZSBzYXZlZCBzaXplXHJcbiAgICAgKiBAcGFyYW0gdXJsUmV3cml0ZXIgZGVmaW5lcyBhbiB1cmwgcmV3cml0ZXIgdG8gdXBkYXRlIHVybHMgYmVmb3JlIHNlbmRpbmcgdGhlbSB0byB0aGUgY29udHJvbHNcclxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgcGFyc2VTZXJpYWxpemVkT2JqZWN0IGluc3RlYWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhcnNlQ29udGVudCA9IHRoaXMucGFyc2VTZXJpYWxpemVkT2JqZWN0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVjcmVhdGUgdGhlIGNvbnRlbnQgb2YgdGhlIEFEVCBmcm9tIGEgc25pcHBldCBzYXZlZCBieSB0aGUgR1VJIGVkaXRvclxyXG4gICAgICogQHBhcmFtIHNuaXBwZXRJZCBkZWZpbmVzIHRoZSBzbmlwcGV0IHRvIGxvYWRcclxuICAgICAqIEBwYXJhbSBzY2FsZVRvU2l6ZSBkZWZpbmVzIHdoZXRoZXIgdG8gc2NhbGUgdG8gdGV4dHVyZSB0byB0aGUgc2F2ZWQgc2l6ZVxyXG4gICAgICogQHBhcmFtIGFwcGVuZFRvQWR0IGlmIHByb3ZpZGVkIHRoZSBzbmlwcGV0IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGFkdC4gT3RoZXJ3aXNlIGEgZnVsbHNjcmVlbiBBRFQgd2lsbCBiZSBjcmVhdGVkLlxyXG4gICAgICogQHBhcmFtIHVybFJld3JpdGVyIGRlZmluZXMgYW4gdXJsIHJld3JpdGVyIHRvIHVwZGF0ZSB1cmxzIGJlZm9yZSBzZW5kaW5nIHRoZW0gdG8gdGhlIGNvbnRyb2xzXHJcbiAgICAgKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgb24gc3VjY2Vzc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIFBhcnNlRnJvbVNuaXBwZXRBc3luYyhcclxuICAgICAgICBzbmlwcGV0SWQ6IHN0cmluZyxcclxuICAgICAgICBzY2FsZVRvU2l6ZT86IGJvb2xlYW4sXHJcbiAgICAgICAgYXBwZW5kVG9BZHQ/OiBBZHZhbmNlZER5bmFtaWNUZXh0dXJlLFxyXG4gICAgICAgIHVybFJld3JpdGVyPzogKHVybDogc3RyaW5nKSA9PiBzdHJpbmdcclxuICAgICk6IFByb21pc2U8QWR2YW5jZWREeW5hbWljVGV4dHVyZT4ge1xyXG4gICAgICAgIGNvbnN0IGFkdCA9IGFwcGVuZFRvQWR0ID8/IEFkdmFuY2VkRHluYW1pY1RleHR1cmUuQ3JlYXRlRnVsbHNjcmVlblVJKFwiQURUIGZyb20gc25pcHBldFwiKTtcclxuICAgICAgICBpZiAoc25pcHBldElkID09PSBcIl9CTEFOS1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhZHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gYXdhaXQgQWR2YW5jZWREeW5hbWljVGV4dHVyZS5fTG9hZFVSTENvbnRlbnRBc3luYyhBZHZhbmNlZER5bmFtaWNUZXh0dXJlLlNuaXBwZXRVcmwgKyBcIi9cIiArIHNuaXBwZXRJZC5yZXBsYWNlKC8jL2csIFwiL1wiKSwgdHJ1ZSk7XHJcbiAgICAgICAgYWR0LnBhcnNlU2VyaWFsaXplZE9iamVjdChzZXJpYWxpemVkLCBzY2FsZVRvU2l6ZSwgdXJsUmV3cml0ZXIpO1xyXG4gICAgICAgIHJldHVybiBhZHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWNyZWF0ZSB0aGUgY29udGVudCBvZiB0aGUgQURUIGZyb20gYSBzbmlwcGV0IHNhdmVkIGJ5IHRoZSBHVUkgZWRpdG9yXHJcbiAgICAgKiBAcGFyYW0gc25pcHBldElkIGRlZmluZXMgdGhlIHNuaXBwZXQgdG8gbG9hZFxyXG4gICAgICogQHBhcmFtIHNjYWxlVG9TaXplIGRlZmluZXMgd2hldGhlciB0byBzY2FsZSB0byB0ZXh0dXJlIHRvIHRoZSBzYXZlZCBzaXplXHJcbiAgICAgKiBAcGFyYW0gdXJsUmV3cml0ZXIgZGVmaW5lcyBhbiB1cmwgcmV3cml0ZXIgdG8gdXBkYXRlIHVybHMgYmVmb3JlIHNlbmRpbmcgdGhlbSB0byB0aGUgY29udHJvbHNcclxuICAgICAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbiBzdWNjZXNzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwYXJzZUZyb21TbmlwcGV0QXN5bmMoc25pcHBldElkOiBzdHJpbmcsIHNjYWxlVG9TaXplPzogYm9vbGVhbiwgdXJsUmV3cml0ZXI/OiAodXJsOiBzdHJpbmcpID0+IHN0cmluZyk6IFByb21pc2U8QWR2YW5jZWREeW5hbWljVGV4dHVyZT4ge1xyXG4gICAgICAgIHJldHVybiBBZHZhbmNlZER5bmFtaWNUZXh0dXJlLlBhcnNlRnJvbVNuaXBwZXRBc3luYyhzbmlwcGV0SWQsIHNjYWxlVG9TaXplLCB0aGlzLCB1cmxSZXdyaXRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWNyZWF0ZSB0aGUgY29udGVudCBvZiB0aGUgQURUIGZyb20gYSB1cmwganNvblxyXG4gICAgICogQHBhcmFtIHVybCBkZWZpbmVzIHRoZSB1cmwgdG8gbG9hZFxyXG4gICAgICogQHBhcmFtIHNjYWxlVG9TaXplIGRlZmluZXMgd2hldGhlciB0byBzY2FsZSB0byB0ZXh0dXJlIHRvIHRoZSBzYXZlZCBzaXplXHJcbiAgICAgKiBAcGFyYW0gYXBwZW5kVG9BZHQgaWYgcHJvdmlkZWQgdGhlIHNuaXBwZXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgYWR0LiBPdGhlcndpc2UgYSBmdWxsc2NyZWVuIEFEVCB3aWxsIGJlIGNyZWF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gdXJsUmV3cml0ZXIgZGVmaW5lcyBhbiB1cmwgcmV3cml0ZXIgdG8gdXBkYXRlIHVybHMgYmVmb3JlIHNlbmRpbmcgdGhlbSB0byB0aGUgY29udHJvbHNcclxuICAgICAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbiBzdWNjZXNzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgUGFyc2VGcm9tRmlsZUFzeW5jKFxyXG4gICAgICAgIHVybDogc3RyaW5nLFxyXG4gICAgICAgIHNjYWxlVG9TaXplPzogYm9vbGVhbixcclxuICAgICAgICBhcHBlbmRUb0FkdD86IEFkdmFuY2VkRHluYW1pY1RleHR1cmUsXHJcbiAgICAgICAgdXJsUmV3cml0ZXI/OiAodXJsOiBzdHJpbmcpID0+IHN0cmluZ1xyXG4gICAgKTogUHJvbWlzZTxBZHZhbmNlZER5bmFtaWNUZXh0dXJlPiB7XHJcbiAgICAgICAgY29uc3QgYWR0ID0gYXBwZW5kVG9BZHQgPz8gQWR2YW5jZWREeW5hbWljVGV4dHVyZS5DcmVhdGVGdWxsc2NyZWVuVUkoXCJBRFQgZnJvbSBVUkxcIik7XHJcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IGF3YWl0IEFkdmFuY2VkRHluYW1pY1RleHR1cmUuX0xvYWRVUkxDb250ZW50QXN5bmModXJsKTtcclxuICAgICAgICBhZHQucGFyc2VTZXJpYWxpemVkT2JqZWN0KHNlcmlhbGl6ZWQsIHNjYWxlVG9TaXplLCB1cmxSZXdyaXRlcik7XHJcbiAgICAgICAgcmV0dXJuIGFkdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlY3JlYXRlIHRoZSBjb250ZW50IG9mIHRoZSBBRFQgZnJvbSBhIHVybCBqc29uXHJcbiAgICAgKiBAcGFyYW0gdXJsIGRlZmluZXMgdGhlIHVybCB0byBsb2FkXHJcbiAgICAgKiBAcGFyYW0gc2NhbGVUb1NpemUgZGVmaW5lcyB3aGV0aGVyIHRvIHNjYWxlIHRvIHRleHR1cmUgdG8gdGhlIHNhdmVkIHNpemVcclxuICAgICAqIEBwYXJhbSB1cmxSZXdyaXRlciBkZWZpbmVzIGFuIHVybCByZXdyaXRlciB0byB1cGRhdGUgdXJscyBiZWZvcmUgc2VuZGluZyB0aGVtIHRvIHRoZSBjb250cm9sc1xyXG4gICAgICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9uIHN1Y2Nlc3NcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhcnNlRnJvbVVSTEFzeW5jKHVybDogc3RyaW5nLCBzY2FsZVRvU2l6ZT86IGJvb2xlYW4sIHVybFJld3JpdGVyPzogKHVybDogc3RyaW5nKSA9PiBzdHJpbmcpOiBQcm9taXNlPEFkdmFuY2VkRHluYW1pY1RleHR1cmU+IHtcclxuICAgICAgICByZXR1cm4gQWR2YW5jZWREeW5hbWljVGV4dHVyZS5QYXJzZUZyb21GaWxlQXN5bmModXJsLCBzY2FsZVRvU2l6ZSwgdGhpcywgdXJsUmV3cml0ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIF9Mb2FkVVJMQ29udGVudEFzeW5jKHVybDogc3RyaW5nLCBzbmlwcGV0OiBib29sZWFuID0gZmFsc2UpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGlmICh1cmwgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiTm8gVVJMIHByb3ZpZGVkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBXZWJSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ3VpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc25pcHBldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04ucGFyc2UoSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCkuanNvblBheWxvYWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VpID0gcGF5bG9hZC5lbmNvZGVkR3VpID8gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIikuZGVjb2RlKERlY29kZUJhc2U2NFRvQmluYXJ5KHBheWxvYWQuZW5jb2RlZEd1aSkpIDogcGF5bG9hZC5ndWk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWkgPSByZXF1ZXN0LnJlc3BvbnNlVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXJpYWxpemF0aW9uT2JqZWN0ID0gSlNPTi5wYXJzZShndWkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNlcmlhbGl6YXRpb25PYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIlVuYWJsZSB0byBsb2FkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3Qub3BlbihcIkdFVFwiLCB1cmwpO1xyXG4gICAgICAgICAgICByZXF1ZXN0LnNlbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdGF0aWNzXHJcbiAgICAvKipcclxuICAgICAqIENvbXBhcmVzIHR3byByZWN0YW5nbGUgYmFzZWQgY29udHJvbHMgZm9yIHBpeGVsIG92ZXJsYXBcclxuICAgICAqIEBwYXJhbSBjb250cm9sMSBUaGUgZmlyc3QgY29udHJvbCB0byBjb21wYXJlXHJcbiAgICAgKiBAcGFyYW0gY29udHJvbDIgVGhlIHNlY29uZCBjb250cm9sIHRvIGNvbXBhcmVcclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgb3ZlcmxhcHMsIG90aGVyd2lzZSBmYWxzZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfT3ZlcmxhcHMoY29udHJvbDE6IENvbnRyb2wsIGNvbnRyb2wyOiBDb250cm9sKSB7XHJcbiAgICAgICAgcmV0dXJuICEoXHJcbiAgICAgICAgICAgIGNvbnRyb2wxLmNlbnRlclggPiBjb250cm9sMi5jZW50ZXJYICsgY29udHJvbDIud2lkdGhJblBpeGVscyB8fFxyXG4gICAgICAgICAgICBjb250cm9sMS5jZW50ZXJYICsgY29udHJvbDEud2lkdGhJblBpeGVscyA8IGNvbnRyb2wyLmNlbnRlclggfHxcclxuICAgICAgICAgICAgY29udHJvbDEuY2VudGVyWSArIGNvbnRyb2wxLmhlaWdodEluUGl4ZWxzIDwgY29udHJvbDIuY2VudGVyWSB8fFxyXG4gICAgICAgICAgICBjb250cm9sMS5jZW50ZXJZID4gY29udHJvbDIuY2VudGVyWSArIGNvbnRyb2wyLmhlaWdodEluUGl4ZWxzXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgQWR2YW5jZWREeW5hbWljVGV4dHVyZSBpbiBwcm9qZWN0ZWQgbW9kZSAoaWUuIGF0dGFjaGVkIHRvIGEgbWVzaClcclxuICAgICAqIEBwYXJhbSBtZXNoIGRlZmluZXMgdGhlIG1lc2ggd2hpY2ggd2lsbCByZWNlaXZlIHRoZSB0ZXh0dXJlXHJcbiAgICAgKiBAcGFyYW0gd2lkdGggZGVmaW5lcyB0aGUgdGV4dHVyZSB3aWR0aCAoMTAyNCBieSBkZWZhdWx0KVxyXG4gICAgICogQHBhcmFtIGhlaWdodCBkZWZpbmVzIHRoZSB0ZXh0dXJlIGhlaWdodCAoMTAyNCBieSBkZWZhdWx0KVxyXG4gICAgICogQHBhcmFtIHN1cHBvcnRQb2ludGVyTW92ZSBkZWZpbmVzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSB0ZXh0dXJlIG11c3QgY2FwdHVyZSBtb3ZlIGV2ZW50cyAodHJ1ZSBieSBkZWZhdWx0KVxyXG4gICAgICogQHBhcmFtIG9ubHlBbHBoYVRlc3RpbmcgZGVmaW5lcyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IGFscGhhIGJsZW5kaW5nIHdpbGwgbm90IGJlIHVzZWQgKG9ubHkgYWxwaGEgdGVzdGluZykgKGZhbHNlIGJ5IGRlZmF1bHQpXHJcbiAgICAgKiBAcGFyYW0gaW52ZXJ0WSBkZWZpbmVzIGlmIHRoZSB0ZXh0dXJlIG5lZWRzIHRvIGJlIGludmVydGVkIG9uIHRoZSB5IGF4aXMgZHVyaW5nIGxvYWRpbmcgKHRydWUgYnkgZGVmYXVsdClcclxuICAgICAqIEBwYXJhbSBtYXRlcmlhbFNldHVwQ2FsbGJhY2sgZGVmaW5lcyBhIGN1c3RvbSB3YXkgb2YgY3JlYXRpbmcgYW5kIHNldHRpbmcgdXAgdGhlIG1hdGVyaWFsIG9uIHRoZSBtZXNoXHJcbiAgICAgKiBAcGFyYW0gc2FtcGxpbmcgZGVmaW5lcyB0aGUgdGV4dHVyZSBzYW1wbGluZyBtb2RlIChUZXh0dXJlLlRSSUxJTkVBUl9TQU1QTElOR01PREUgYnkgZGVmYXVsdClcclxuICAgICAqIEByZXR1cm5zIGEgbmV3IEFkdmFuY2VkRHluYW1pY1RleHR1cmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBDcmVhdGVGb3JNZXNoKFxyXG4gICAgICAgIG1lc2g6IEFic3RyYWN0TWVzaCxcclxuICAgICAgICB3aWR0aCA9IDEwMjQsXHJcbiAgICAgICAgaGVpZ2h0ID0gMTAyNCxcclxuICAgICAgICBzdXBwb3J0UG9pbnRlck1vdmUgPSB0cnVlLFxyXG4gICAgICAgIG9ubHlBbHBoYVRlc3RpbmcgPSBmYWxzZSxcclxuICAgICAgICBpbnZlcnRZPzogYm9vbGVhbixcclxuICAgICAgICBtYXRlcmlhbFNldHVwQ2FsbGJhY2s6IChtZXNoOiBBYnN0cmFjdE1lc2gsIHVuaXF1ZUlkOiBzdHJpbmcsIHRleHR1cmU6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUsIG9ubHlBbHBoYVRlc3Rpbmc6IGJvb2xlYW4pID0+IHZvaWQgPSB0aGlzLl9DcmVhdGVNYXRlcmlhbCxcclxuICAgICAgICBzYW1wbGluZyA9IFRleHR1cmUuVFJJTElORUFSX1NBTVBMSU5HTU9ERVxyXG4gICAgKTogQWR2YW5jZWREeW5hbWljVGV4dHVyZSB7XHJcbiAgICAgICAgLy8gdXNlIGEgdW5pcXVlIElEIGluIG5hbWUgc28gc2VyaWFsaXphdGlvbiB3aWxsIHdvcmsgZXZlbiBpZiB5b3UgY3JlYXRlIHR3byBBRFRzIGZvciBhIHNpbmdsZSBtZXNoXHJcbiAgICAgICAgY29uc3QgdW5pcXVlSWQgPSBSYW5kb21HVUlEKCk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFkdmFuY2VkRHluYW1pY1RleHR1cmUoYEFkdmFuY2VkRHluYW1pY1RleHR1cmUgZm9yICR7bWVzaC5uYW1lfSBbJHt1bmlxdWVJZH1dYCwgd2lkdGgsIGhlaWdodCwgbWVzaC5nZXRTY2VuZSgpLCB0cnVlLCBzYW1wbGluZywgaW52ZXJ0WSk7XHJcblxyXG4gICAgICAgIG1hdGVyaWFsU2V0dXBDYWxsYmFjayhtZXNoLCB1bmlxdWVJZCwgcmVzdWx0LCBvbmx5QWxwaGFUZXN0aW5nKTtcclxuXHJcbiAgICAgICAgcmVzdWx0LmF0dGFjaFRvTWVzaChtZXNoLCBzdXBwb3J0UG9pbnRlck1vdmUpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX0NyZWF0ZU1hdGVyaWFsKG1lc2g6IEFic3RyYWN0TWVzaCwgdW5pcXVlSWQ6IHN0cmluZywgdGV4dHVyZTogQWR2YW5jZWREeW5hbWljVGV4dHVyZSwgb25seUFscGhhVGVzdGluZzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGludGVybmFsQ2xhc3NUeXBlID0gR2V0Q2xhc3MoXCJCQUJZTE9OLlN0YW5kYXJkTWF0ZXJpYWxcIik7XHJcbiAgICAgICAgaWYgKCFpbnRlcm5hbENsYXNzVHlwZSkge1xyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxyXG4gICAgICAgICAgICB0aHJvdyBcIlN0YW5kYXJkTWF0ZXJpYWwgbmVlZHMgdG8gYmUgaW1wb3J0ZWQgYmVmb3JlIGFzIGl0IGNvbnRhaW5zIGEgc2lkZS1lZmZlY3QgcmVxdWlyZWQgYnkgeW91ciBjb2RlLlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbWF0ZXJpYWw6IFN0YW5kYXJkTWF0ZXJpYWwgPSBuZXcgaW50ZXJuYWxDbGFzc1R5cGUoYEFkdmFuY2VkRHluYW1pY1RleHR1cmVNYXRlcmlhbCBmb3IgJHttZXNoLm5hbWV9IFske3VuaXF1ZUlkfV1gLCBtZXNoLmdldFNjZW5lKCkpO1xyXG4gICAgICAgIG1hdGVyaWFsLmJhY2tGYWNlQ3VsbGluZyA9IGZhbHNlO1xyXG4gICAgICAgIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IENvbG9yMy5CbGFjaygpO1xyXG4gICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBDb2xvcjMuQmxhY2soKTtcclxuICAgICAgICBpZiAob25seUFscGhhVGVzdGluZykge1xyXG4gICAgICAgICAgICBtYXRlcmlhbC5kaWZmdXNlVGV4dHVyZSA9IHRleHR1cmU7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmVtaXNzaXZlVGV4dHVyZSA9IHRleHR1cmU7XHJcbiAgICAgICAgICAgIHRleHR1cmUuaGFzQWxwaGEgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLmVtaXNzaXZlVGV4dHVyZSA9IHRleHR1cmU7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHlUZXh0dXJlID0gdGV4dHVyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWVzaC5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIGluIHByb2plY3RlZCBtb2RlIChpZS4gYXR0YWNoZWQgdG8gYSBtZXNoKSBCVVQgZG8gbm90IGNyZWF0ZSBhIG5ldyBtYXRlcmlhbCBmb3IgdGhlIG1lc2guIFlvdSB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciBjb25uZWN0aW5nIHRoZSB0ZXh0dXJlXHJcbiAgICAgKiBAcGFyYW0gbWVzaCBkZWZpbmVzIHRoZSBtZXNoIHdoaWNoIHdpbGwgcmVjZWl2ZSB0aGUgdGV4dHVyZVxyXG4gICAgICogQHBhcmFtIHdpZHRoIGRlZmluZXMgdGhlIHRleHR1cmUgd2lkdGggKDEwMjQgYnkgZGVmYXVsdClcclxuICAgICAqIEBwYXJhbSBoZWlnaHQgZGVmaW5lcyB0aGUgdGV4dHVyZSBoZWlnaHQgKDEwMjQgYnkgZGVmYXVsdClcclxuICAgICAqIEBwYXJhbSBzdXBwb3J0UG9pbnRlck1vdmUgZGVmaW5lcyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgdGV4dHVyZSBtdXN0IGNhcHR1cmUgbW92ZSBldmVudHMgKHRydWUgYnkgZGVmYXVsdClcclxuICAgICAqIEBwYXJhbSBpbnZlcnRZIGRlZmluZXMgaWYgdGhlIHRleHR1cmUgbmVlZHMgdG8gYmUgaW52ZXJ0ZWQgb24gdGhlIHkgYXhpcyBkdXJpbmcgbG9hZGluZyAodHJ1ZSBieSBkZWZhdWx0KVxyXG4gICAgICogQHBhcmFtIHNhbXBsaW5nIGRlZmluZXMgdGhlIHRleHR1cmUgc2FtcGxpbmcgbW9kZSAoVGV4dHVyZS5UUklMSU5FQVJfU0FNUExJTkdNT0RFIGJ5IGRlZmF1bHQpXHJcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQ3JlYXRlRm9yTWVzaFRleHR1cmUoXHJcbiAgICAgICAgbWVzaDogQWJzdHJhY3RNZXNoLFxyXG4gICAgICAgIHdpZHRoID0gMTAyNCxcclxuICAgICAgICBoZWlnaHQgPSAxMDI0LFxyXG4gICAgICAgIHN1cHBvcnRQb2ludGVyTW92ZSA9IHRydWUsXHJcbiAgICAgICAgaW52ZXJ0WT86IGJvb2xlYW4sXHJcbiAgICAgICAgc2FtcGxpbmcgPSBUZXh0dXJlLlRSSUxJTkVBUl9TQU1QTElOR01PREVcclxuICAgICk6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlKG1lc2gubmFtZSArIFwiIEFkdmFuY2VkRHluYW1pY1RleHR1cmVcIiwgd2lkdGgsIGhlaWdodCwgbWVzaC5nZXRTY2VuZSgpLCB0cnVlLCBzYW1wbGluZywgaW52ZXJ0WSk7XHJcbiAgICAgICAgcmVzdWx0LmF0dGFjaFRvTWVzaChtZXNoLCBzdXBwb3J0UG9pbnRlck1vdmUpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgQWR2YW5jZWREeW5hbWljVGV4dHVyZSBpbiBmdWxsc2NyZWVuIG1vZGUuXHJcbiAgICAgKiBJbiB0aGlzIG1vZGUgdGhlIHRleHR1cmUgd2lsbCByZWx5IG9uIGEgbGF5ZXIgZm9yIGl0cyByZW5kZXJpbmcuXHJcbiAgICAgKiBUaGlzIGFsbG93cyBpdCB0byBiZSB0cmVhdGVkIGxpa2UgYW55IG90aGVyIGxheWVyLlxyXG4gICAgICogQXMgc3VjaCwgaWYgeW91IGhhdmUgYSBtdWx0aSBjYW1lcmEgc2V0dXAsIHlvdSBjYW4gc2V0IHRoZSBsYXllck1hc2sgb24gdGhlIEdVSSBhcyB3ZWxsLlxyXG4gICAgICogTGF5ZXJNYXNrIGlzIHNldCB0aHJvdWdoIGFkdmFuY2VkVGV4dHVyZS5sYXllci5sYXllck1hc2tcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgbmFtZSBmb3IgdGhlIHRleHR1cmVcclxuICAgICAqIEBwYXJhbSBmb3JlZ3JvdW5kIGRlZmluZXMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHRleHR1cmUgbXVzdCBiZSByZW5kZXJlZCBpbiBmb3JlZ3JvdW5kIChkZWZhdWx0IGlzIHRydWUpXHJcbiAgICAgKiBAcGFyYW0gc2NlbmUgZGVmaW5lcyB0aGUgaG9zdGluZyBzY2VuZVxyXG4gICAgICogQHBhcmFtIHNhbXBsaW5nIGRlZmluZXMgdGhlIHRleHR1cmUgc2FtcGxpbmcgbW9kZSAoVGV4dHVyZS5CSUxJTkVBUl9TQU1QTElOR01PREUgYnkgZGVmYXVsdClcclxuICAgICAqIEBwYXJhbSBhZGFwdGl2ZVNjYWxpbmcgZGVmaW5lcyB3aGV0aGVyIHRvIGF1dG9tYXRpY2FsbHkgc2NhbGUgcm9vdCB0byBtYXRjaCBoYXJkd2FyZXNjYWxpbmcgKGZhbHNlIGJ5IGRlZmF1bHQpXHJcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQ3JlYXRlRnVsbHNjcmVlblVJKFxyXG4gICAgICAgIG5hbWU6IHN0cmluZyxcclxuICAgICAgICBmb3JlZ3JvdW5kOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICAgICBzY2VuZTogTnVsbGFibGU8U2NlbmU+ID0gbnVsbCxcclxuICAgICAgICBzYW1wbGluZyA9IFRleHR1cmUuQklMSU5FQVJfU0FNUExJTkdNT0RFLFxyXG4gICAgICAgIGFkYXB0aXZlU2NhbGluZzogYm9vbGVhbiA9IGZhbHNlXHJcbiAgICApOiBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQWR2YW5jZWREeW5hbWljVGV4dHVyZShuYW1lLCAwLCAwLCBzY2VuZSwgZmFsc2UsIHNhbXBsaW5nKTtcclxuICAgICAgICAvLyBEaXNwbGF5XHJcbiAgICAgICAgY29uc3QgcmVzdWx0U2NlbmUgPSByZXN1bHQuZ2V0U2NlbmUoKTtcclxuICAgICAgICBjb25zdCBsYXllciA9IG5ldyBMYXllcihuYW1lICsgXCJfbGF5ZXJcIiwgbnVsbCwgcmVzdWx0U2NlbmUsICFmb3JlZ3JvdW5kKTtcclxuICAgICAgICBsYXllci50ZXh0dXJlID0gcmVzdWx0O1xyXG4gICAgICAgIHJlc3VsdC5fbGF5ZXJUb0Rpc3Bvc2UgPSBsYXllcjtcclxuICAgICAgICByZXN1bHQuX2lzRnVsbHNjcmVlbiA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmIChhZGFwdGl2ZVNjYWxpbmcgJiYgcmVzdWx0U2NlbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3U2NhbGUgPSAxIC8gcmVzdWx0U2NlbmUuZ2V0RW5naW5lKCkuZ2V0SGFyZHdhcmVTY2FsaW5nTGV2ZWwoKTtcclxuICAgICAgICAgICAgcmVzdWx0Ll9yb290Q29udGFpbmVyLnNjYWxlWCA9IG5ld1NjYWxlO1xyXG4gICAgICAgICAgICByZXN1bHQuX3Jvb3RDb250YWluZXIuc2NhbGVZID0gbmV3U2NhbGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBdHRhY2hcclxuICAgICAgICByZXN1bHQuYXR0YWNoKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlcyB0aGUgdGV4dHVyZVxyXG4gICAgICogQHBhcmFtIHJhdGlvIHRoZSBzY2FsZSBmYWN0b3IgdG8gYXBwbHkgdG8gYm90aCB3aWR0aCBhbmQgaGVpZ2h0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzY2FsZShyYXRpbzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuc2NhbGUocmF0aW8pO1xyXG4gICAgICAgIHRoaXMubWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc2l6ZXMgdGhlIHRleHR1cmVcclxuICAgICAqIEBwYXJhbSB3aWR0aCB0aGUgbmV3IHdpZHRoXHJcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IHRoZSBuZXcgaGVpZ2h0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzY2FsZVRvKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuc2NhbGVUbyh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLm1hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY2hlY2tHdWlJc1JlYWR5KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmd1aUlzUmVhZHkoKSkge1xyXG4gICAgICAgICAgICB0aGlzLm9uR3VpUmVhZHlPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub25HdWlSZWFkeU9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGFsbCB0aGUgR1VJIGNvbXBvbmVudHMgYXJlIHJlYWR5IHRvIHJlbmRlclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ3VpSXNSZWFkeSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcm9vdENvbnRhaW5lci5pc1JlYWR5KCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgVmVjdG9yMiB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcblxyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi9yZWN0YW5nbGVcIjtcclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgVGV4dEJsb2NrIH0gZnJvbSBcIi4vdGV4dEJsb2NrXCI7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSBcIi4vaW1hZ2VcIjtcclxuaW1wb3J0IHsgUmVnaXN0ZXJDbGFzcyB9IGZyb20gXCJjb3JlL01pc2MvdHlwZVN0b3JlXCI7XHJcbmltcG9ydCB0eXBlIHsgUG9pbnRlckluZm9CYXNlIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHR5cGUgeyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIH0gZnJvbSBcIi4uL2FkdmFuY2VkRHluYW1pY1RleHR1cmVcIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIDJEIGJ1dHRvbnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBSZWN0YW5nbGUge1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gZ2VuZXJhdGUgYSBwb2ludGVyIGVudGVyIGFuaW1hdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcG9pbnRlckVudGVyQW5pbWF0aW9uOiAoKSA9PiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gZ2VuZXJhdGUgYSBwb2ludGVyIG91dCBhbmltYXRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIHBvaW50ZXJPdXRBbmltYXRpb246ICgpID0+IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIGNhbGxlZCB0byBnZW5lcmF0ZSBhIHBvaW50ZXIgZG93biBhbmltYXRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIHBvaW50ZXJEb3duQW5pbWF0aW9uOiAoKSA9PiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gZ2VuZXJhdGUgYSBwb2ludGVyIHVwIGFuaW1hdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcG9pbnRlclVwQW5pbWF0aW9uOiAoKSA9PiB2b2lkO1xyXG5cclxuICAgIHByaXZhdGUgX2ltYWdlOiBOdWxsYWJsZTxJbWFnZT47XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGltYWdlIHBhcnQgb2YgdGhlIGJ1dHRvbiAoaWYgYW55KVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGltYWdlKCk6IE51bGxhYmxlPEltYWdlPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3RleHRCbG9jazogTnVsbGFibGU8VGV4dEJsb2NrPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgVGV4dEJsb2NrIHBhcnQgb2YgdGhlIGJ1dHRvbiAoaWYgYW55KVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHRleHRCbG9jaygpOiBOdWxsYWJsZTxUZXh0QmxvY2s+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dEJsb2NrO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBCdXR0b25cclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIG5hbWUgb2YgdGhlIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgb3ZlcnJpZGUgbmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLnRoaWNrbmVzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pc1BvaW50ZXJCbG9ja2VyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IGFscGhhU3RvcmU6IE51bGxhYmxlPG51bWJlcj4gPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJFbnRlckFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgYWxwaGFTdG9yZSA9IHRoaXMuYWxwaGE7XHJcbiAgICAgICAgICAgIHRoaXMuYWxwaGEgLT0gMC4xO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlck91dEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGFscGhhU3RvcmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWxwaGEgPSBhbHBoYVN0b3JlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wb2ludGVyRG93bkFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVggLT0gMC4wNTtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVkgLT0gMC4wNTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJVcEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVggKz0gMC4wNTtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVkgKz0gMC4wNTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJCdXR0b25cIjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBXaGlsZSBiZWluZyBhIGNvbnRhaW5lciwgdGhlIGJ1dHRvbiBiZWhhdmVzIGxpa2UgYSBjb250cm9sLlxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9wcm9jZXNzUGlja2luZyh4OiBudW1iZXIsIHk6IG51bWJlciwgcGk6IFBvaW50ZXJJbmZvQmFzZSwgdHlwZTogbnVtYmVyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgZGVsdGFYPzogbnVtYmVyLCBkZWx0YVk/OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCB8fCAhdGhpcy5pc0hpdFRlc3RWaXNpYmxlIHx8ICF0aGlzLmlzVmlzaWJsZSB8fCB0aGlzLm5vdFJlbmRlcmFibGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdXBlci5jb250YWlucyh4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5kZWxlZ2F0ZVBpY2tpbmdUb0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250YWlucyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IHRoaXMuX2NoaWxkcmVuLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5fY2hpbGRyZW5baW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmlzRW5hYmxlZCAmJiBjaGlsZC5pc0hpdFRlc3RWaXNpYmxlICYmIGNoaWxkLmlzVmlzaWJsZSAmJiAhY2hpbGQubm90UmVuZGVyYWJsZSAmJiBjaGlsZC5jb250YWlucyh4LCB5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFjb250YWlucykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9wcm9jZXNzT2JzZXJ2YWJsZXModHlwZSwgeCwgeSwgcGksIHBvaW50ZXJJZCwgYnV0dG9uSW5kZXgsIGRlbHRhWCwgZGVsdGFZKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJFbnRlcih0YXJnZXQ6IENvbnRyb2wsIHBpOiBQb2ludGVySW5mb0Jhc2UpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN1cGVyLl9vblBvaW50ZXJFbnRlcih0YXJnZXQsIHBpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaXNSZWFkT25seSAmJiB0aGlzLnBvaW50ZXJFbnRlckFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJFbnRlckFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJPdXQodGFyZ2V0OiBDb250cm9sLCBwaTogUG9pbnRlckluZm9CYXNlLCBmb3JjZSA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVhZE9ubHkgJiYgdGhpcy5wb2ludGVyT3V0QW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9pbnRlck91dEFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIuX29uUG9pbnRlck91dCh0YXJnZXQsIHBpLCBmb3JjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJEb3duKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBidXR0b25JbmRleDogbnVtYmVyLCBwaTogUG9pbnRlckluZm9CYXNlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdXBlci5fb25Qb2ludGVyRG93bih0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBwaSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVhZE9ubHkgJiYgdGhpcy5wb2ludGVyRG93bkFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFJlY3RhbmdsZUZpbGwoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJhY2tncm91bmRDb2xvcihjb250ZXh0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWRDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJVcCh0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgbm90aWZ5Q2xpY2s6IGJvb2xlYW4sIHBpOiBQb2ludGVySW5mb0Jhc2UpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNSZWFkT25seSAmJiB0aGlzLnBvaW50ZXJVcEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJVcEFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIuX29uUG9pbnRlclVwKHRhcmdldCwgY29vcmRpbmF0ZXMsIHBvaW50ZXJJZCwgYnV0dG9uSW5kZXgsIG5vdGlmeUNsaWNrLCBwaSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXJpYWxpemVzIHRoZSBjdXJyZW50IGJ1dHRvblxyXG4gICAgICogQHBhcmFtIHNlcmlhbGl6YXRpb25PYmplY3QgZGVmaW5lcyB0aGUgSlNPTiBzZXJpYWxpemVkIG9iamVjdFxyXG4gICAgICogQHBhcmFtIGZvcmNlIGZvcmNlIHNlcmlhbGl6YXRpb24gZXZlbiBpZiBpc1NlcmlhbGl6YWJsZSA9PT0gZmFsc2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIHNlcmlhbGl6ZShzZXJpYWxpemF0aW9uT2JqZWN0OiBhbnksIGZvcmNlOiBib29sZWFuKSB7XHJcbiAgICAgICAgc3VwZXIuc2VyaWFsaXplKHNlcmlhbGl6YXRpb25PYmplY3QsIGZvcmNlKTtcclxuICAgICAgICBpZiAoIXRoaXMuaXNTZXJpYWxpemFibGUgJiYgIWZvcmNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90ZXh0QmxvY2spIHtcclxuICAgICAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC50ZXh0QmxvY2tOYW1lID0gdGhpcy5fdGV4dEJsb2NrLm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9pbWFnZSkge1xyXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmltYWdlTmFtZSA9IHRoaXMuX2ltYWdlLm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfcGFyc2VGcm9tQ29udGVudChzZXJpYWxpemVkT2JqZWN0OiBhbnksIGhvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUpIHtcclxuICAgICAgICBzdXBlci5fcGFyc2VGcm9tQ29udGVudChzZXJpYWxpemVkT2JqZWN0LCBob3N0KTtcclxuXHJcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWRPYmplY3QudGV4dEJsb2NrTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0QmxvY2sgPSB0aGlzLmdldENoaWxkQnlOYW1lKHNlcmlhbGl6ZWRPYmplY3QudGV4dEJsb2NrTmFtZSkgYXMgTnVsbGFibGU8VGV4dEJsb2NrPjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzZXJpYWxpemVkT2JqZWN0LmltYWdlTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbWFnZSA9IHRoaXMuZ2V0Q2hpbGRCeU5hbWUoc2VyaWFsaXplZE9iamVjdC5pbWFnZU5hbWUpIGFzIE51bGxhYmxlPEltYWdlPjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhdGljc1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGJ1dHRvbiBtYWRlIHdpdGggYW4gaW1hZ2UgYW5kIGEgdGV4dFxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgbmFtZSBvZiB0aGUgYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBkZWZpbmVzIHRoZSB0ZXh0IG9mIHRoZSBidXR0b25cclxuICAgICAqIEBwYXJhbSBpbWFnZVVybCBkZWZpbmVzIHRoZSB1cmwgb2YgdGhlIGltYWdlXHJcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBCdXR0b25cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBDcmVhdGVJbWFnZUJ1dHRvbihuYW1lOiBzdHJpbmcsIHRleHQ6IHN0cmluZywgaW1hZ2VVcmw6IHN0cmluZyk6IEJ1dHRvbiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IHRoaXMobmFtZSk7XHJcblxyXG4gICAgICAgIC8vIEFkZGluZyB0ZXh0XHJcbiAgICAgICAgY29uc3QgdGV4dEJsb2NrID0gbmV3IFRleHRCbG9jayhuYW1lICsgXCJfYnV0dG9uXCIsIHRleHQpO1xyXG4gICAgICAgIHRleHRCbG9jay50ZXh0V3JhcHBpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRleHRCbG9jay50ZXh0SG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG4gICAgICAgIHRleHRCbG9jay5wYWRkaW5nTGVmdCA9IFwiMjAlXCI7XHJcbiAgICAgICAgcmVzdWx0LmFkZENvbnRyb2wodGV4dEJsb2NrKTtcclxuXHJcbiAgICAgICAgLy8gQWRkaW5nIGltYWdlXHJcbiAgICAgICAgY29uc3QgaWNvbkltYWdlID0gbmV3IEltYWdlKG5hbWUgKyBcIl9pY29uXCIsIGltYWdlVXJsKTtcclxuICAgICAgICBpY29uSW1hZ2Uud2lkdGggPSBcIjIwJVwiO1xyXG4gICAgICAgIGljb25JbWFnZS5zdHJldGNoID0gSW1hZ2UuU1RSRVRDSF9VTklGT1JNO1xyXG4gICAgICAgIGljb25JbWFnZS5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIHJlc3VsdC5hZGRDb250cm9sKGljb25JbWFnZSk7XHJcblxyXG4gICAgICAgIC8vIFN0b3JlXHJcbiAgICAgICAgcmVzdWx0Ll9pbWFnZSA9IGljb25JbWFnZTtcclxuICAgICAgICByZXN1bHQuX3RleHRCbG9jayA9IHRleHRCbG9jaztcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgYnV0dG9uIG1hZGUgd2l0aCBhbiBpbWFnZVxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgbmFtZSBvZiB0aGUgYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gaW1hZ2VVcmwgZGVmaW5lcyB0aGUgdXJsIG9mIHRoZSBpbWFnZVxyXG4gICAgICogQHJldHVybnMgYSBuZXcgQnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQ3JlYXRlSW1hZ2VPbmx5QnV0dG9uKG5hbWU6IHN0cmluZywgaW1hZ2VVcmw6IHN0cmluZyk6IEJ1dHRvbiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IHRoaXMobmFtZSk7XHJcblxyXG4gICAgICAgIC8vIEFkZGluZyBpbWFnZVxyXG4gICAgICAgIGNvbnN0IGljb25JbWFnZSA9IG5ldyBJbWFnZShuYW1lICsgXCJfaWNvblwiLCBpbWFnZVVybCk7XHJcbiAgICAgICAgaWNvbkltYWdlLnN0cmV0Y2ggPSBJbWFnZS5TVFJFVENIX0ZJTEw7XHJcbiAgICAgICAgaWNvbkltYWdlLmhvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ7XHJcbiAgICAgICAgcmVzdWx0LmFkZENvbnRyb2woaWNvbkltYWdlKTtcclxuXHJcbiAgICAgICAgLy8gU3RvcmVcclxuICAgICAgICByZXN1bHQuX2ltYWdlID0gaWNvbkltYWdlO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBidXR0b24gbWFkZSB3aXRoIGEgdGV4dFxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgbmFtZSBvZiB0aGUgYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBkZWZpbmVzIHRoZSB0ZXh0IG9mIHRoZSBidXR0b25cclxuICAgICAqIEByZXR1cm5zIGEgbmV3IEJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIENyZWF0ZVNpbXBsZUJ1dHRvbihuYW1lOiBzdHJpbmcsIHRleHQ6IHN0cmluZyk6IEJ1dHRvbiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IHRoaXMobmFtZSk7XHJcblxyXG4gICAgICAgIC8vIEFkZGluZyB0ZXh0XHJcbiAgICAgICAgY29uc3QgdGV4dEJsb2NrID0gbmV3IFRleHRCbG9jayhuYW1lICsgXCJfYnV0dG9uXCIsIHRleHQpO1xyXG4gICAgICAgIHRleHRCbG9jay50ZXh0V3JhcHBpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRleHRCbG9jay50ZXh0SG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG4gICAgICAgIHJlc3VsdC5hZGRDb250cm9sKHRleHRCbG9jayk7XHJcblxyXG4gICAgICAgIC8vIFN0b3JlXHJcbiAgICAgICAgcmVzdWx0Ll90ZXh0QmxvY2sgPSB0ZXh0QmxvY2s7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGJ1dHRvbiBtYWRlIHdpdGggYW4gaW1hZ2UgYW5kIGEgY2VudGVyZWQgdGV4dFxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgbmFtZSBvZiB0aGUgYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBkZWZpbmVzIHRoZSB0ZXh0IG9mIHRoZSBidXR0b25cclxuICAgICAqIEBwYXJhbSBpbWFnZVVybCBkZWZpbmVzIHRoZSB1cmwgb2YgdGhlIGltYWdlXHJcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBCdXR0b25cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBDcmVhdGVJbWFnZVdpdGhDZW50ZXJUZXh0QnV0dG9uKG5hbWU6IHN0cmluZywgdGV4dDogc3RyaW5nLCBpbWFnZVVybDogc3RyaW5nKTogQnV0dG9uIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgdGhpcyhuYW1lKTtcclxuXHJcbiAgICAgICAgLy8gQWRkaW5nIGltYWdlXHJcbiAgICAgICAgY29uc3QgaWNvbkltYWdlID0gbmV3IEltYWdlKG5hbWUgKyBcIl9pY29uXCIsIGltYWdlVXJsKTtcclxuICAgICAgICBpY29uSW1hZ2Uuc3RyZXRjaCA9IEltYWdlLlNUUkVUQ0hfRklMTDtcclxuICAgICAgICByZXN1bHQuYWRkQ29udHJvbChpY29uSW1hZ2UpO1xyXG5cclxuICAgICAgICAvLyBBZGRpbmcgdGV4dFxyXG4gICAgICAgIGNvbnN0IHRleHRCbG9jayA9IG5ldyBUZXh0QmxvY2sobmFtZSArIFwiX2J1dHRvblwiLCB0ZXh0KTtcclxuICAgICAgICB0ZXh0QmxvY2sudGV4dFdyYXBwaW5nID0gdHJ1ZTtcclxuICAgICAgICB0ZXh0QmxvY2sudGV4dEhvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuICAgICAgICByZXN1bHQuYWRkQ29udHJvbCh0ZXh0QmxvY2spO1xyXG5cclxuICAgICAgICAvLyBTdG9yZVxyXG4gICAgICAgIHJlc3VsdC5faW1hZ2UgPSBpY29uSW1hZ2U7XHJcbiAgICAgICAgcmVzdWx0Ll90ZXh0QmxvY2sgPSB0ZXh0QmxvY2s7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLkJ1dHRvblwiLCBCdXR0b24pO1xyXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB0eXBlIHsgVmVjdG9yMiB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgeyBTdGFja1BhbmVsIH0gZnJvbSBcIi4vc3RhY2tQYW5lbFwiO1xyXG5pbXBvcnQgeyBUZXh0QmxvY2sgfSBmcm9tIFwiLi90ZXh0QmxvY2tcIjtcclxuaW1wb3J0IHsgUmVnaXN0ZXJDbGFzcyB9IGZyb20gXCJjb3JlL01pc2MvdHlwZVN0b3JlXCI7XHJcbmltcG9ydCB0eXBlIHsgUG9pbnRlckluZm9CYXNlIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB0eXBlIHsgSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQgfSBmcm9tIFwiY29yZS9FbmdpbmVzL0lDYW52YXNcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIHJlcHJlc2VudCBhIDJEIGNoZWNrYm94XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3ggZXh0ZW5kcyBDb250cm9sIHtcclxuICAgIHByaXZhdGUgX2lzQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfYmFja2dyb3VuZCA9IFwiYmxhY2tcIjtcclxuICAgIHByaXZhdGUgX2NoZWNrU2l6ZVJhdGlvID0gMC44O1xyXG4gICAgcHJpdmF0ZSBfdGhpY2tuZXNzID0gMTtcclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGJvcmRlciB0aGlja25lc3MgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgdGhpY2tuZXNzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoaWNrbmVzcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRoaWNrbmVzcyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RoaWNrbmVzcyA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdGhpY2tuZXNzID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmFibGUgcmFpc2VkIHdoZW4gaXNDaGVja2VkIHByb3BlcnR5IGNoYW5nZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uSXNDaGVja2VkQ2hhbmdlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxib29sZWFuPigpO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSByYXRpbyBiZXR3ZWVuIG92ZXJhbGwgc2l6ZSBhbmQgY2hlY2sgc2l6ZSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGNoZWNrU2l6ZVJhdGlvKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrU2l6ZVJhdGlvO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgY2hlY2tTaXplUmF0aW8odmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4oMSwgdmFsdWUpLCAwKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NoZWNrU2l6ZVJhdGlvID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jaGVja1NpemVSYXRpbyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBiYWNrZ3JvdW5kIGNvbG9yICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYmFja2dyb3VuZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYmFja2dyb3VuZCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tncm91bmQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGNoZWNrYm94IGlzIGNoZWNrZWQgb3Igbm90ICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgaXNDaGVja2VkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0NoZWNrZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBpc0NoZWNrZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5faXNDaGVja2VkID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pc0NoZWNrZWQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG5cclxuICAgICAgICB0aGlzLm9uSXNDaGVja2VkQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ2hlY2tCb3hcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIGNvbnRyb2wgbmFtZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgb3ZlcnJpZGUgbmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgICAgIHRoaXMuaXNQb2ludGVyQmxvY2tlciA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkNoZWNrYm94XCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9kcmF3KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FwcGx5U3RhdGVzKGNvbnRleHQpO1xyXG4gICAgICAgIGNvbnN0IGFjdHVhbFdpZHRoID0gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLSB0aGlzLl90aGlja25lc3M7XHJcbiAgICAgICAgY29uc3QgYWN0dWFsSGVpZ2h0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC0gdGhpcy5fdGhpY2tuZXNzO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zaGFkb3dCbHVyIHx8IHRoaXMuc2hhZG93T2Zmc2V0WCB8fCB0aGlzLnNoYWRvd09mZnNldFkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dDb2xvciA9IHRoaXMuc2hhZG93Q29sb3I7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Qmx1ciA9IHRoaXMuc2hhZG93Qmx1cjtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRYID0gdGhpcy5zaGFkb3dPZmZzZXRYO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSB0aGlzLnNoYWRvd09mZnNldFk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX2lzRW5hYmxlZCA/IHRoaXMuX2JhY2tncm91bmQgOiB0aGlzLl9kaXNhYmxlZENvbG9yO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX3RoaWNrbmVzcyAvIDIsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCArIHRoaXMuX3RoaWNrbmVzcyAvIDIsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zaGFkb3dCbHVyIHx8IHRoaXMuc2hhZG93T2Zmc2V0WCB8fCB0aGlzLnNoYWRvd09mZnNldFkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gMDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRYID0gMDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgLy8gQ29sb3IgaXMgd2hpdGUgaWYgbm90IHNldFxyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX2lzRW5hYmxlZCA/ICh0aGlzLmNvbG9yID8gdGhpcy5jb2xvciA6IFwiI2ZmZmZmZlwiKSA6IHRoaXMuX2Rpc2FibGVkQ29sb3JJdGVtO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRXaWR0aCA9IGFjdHVhbFdpZHRoICogdGhpcy5fY2hlY2tTaXplUmF0aW87XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldEhlaWdodCA9IGFjdHVhbEhlaWdodCAqIHRoaXMuX2NoZWNrU2l6ZVJhdGlvO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKyB0aGlzLl90aGlja25lc3MgLyAyICsgKGFjdHVhbFdpZHRoIC0gb2Zmc2V0V2lkdGgpIC8gMixcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCArIHRoaXMuX3RoaWNrbmVzcyAvIDIgKyAoYWN0dWFsSGVpZ2h0IC0gb2Zmc2V0SGVpZ2h0KSAvIDIsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXRXaWR0aCxcclxuICAgICAgICAgICAgICAgIG9mZnNldEhlaWdodFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSB0aGlzLl90aGlja25lc3M7XHJcblxyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdCh0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgdGhpcy5fdGhpY2tuZXNzIC8gMiwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGhpcy5fdGhpY2tuZXNzIC8gMiwgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCk7XHJcblxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEV2ZW50c1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfb25Qb2ludGVyRG93bih0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgcGk6IFBvaW50ZXJJbmZvQmFzZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghc3VwZXIuX29uUG9pbnRlckRvd24odGFyZ2V0LCBjb29yZGluYXRlcywgcG9pbnRlcklkLCBidXR0b25JbmRleCwgcGkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDaGVja2VkID0gIXRoaXMuaXNDaGVja2VkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGVhc2lseSBjcmVhdGUgYSBjaGVja2JveCB3aXRoIGEgaGVhZGVyXHJcbiAgICAgKiBAcGFyYW0gdGl0bGUgZGVmaW5lcyB0aGUgbGFiZWwgdG8gdXNlIGZvciB0aGUgaGVhZGVyXHJcbiAgICAgKiBAcGFyYW0gb25WYWx1ZUNoYW5nZWQgZGVmaW5lcyB0aGUgY2FsbGJhY2sgdG8gY2FsbCB3aGVuIHZhbHVlIGNoYW5nZXNcclxuICAgICAqIEByZXR1cm5zIGEgU3RhY2tQYW5lbCBjb250YWluaW5nIHRoZSBjaGVja2JveCBhbmQgYSB0ZXh0QmxvY2tcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBBZGRDaGVja0JveFdpdGhIZWFkZXIodGl0bGU6IHN0cmluZywgb25WYWx1ZUNoYW5nZWQ6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZCk6IFN0YWNrUGFuZWwge1xyXG4gICAgICAgIGNvbnN0IHBhbmVsID0gbmV3IFN0YWNrUGFuZWwoKTtcclxuICAgICAgICBwYW5lbC5pc1ZlcnRpY2FsID0gZmFsc2U7XHJcbiAgICAgICAgcGFuZWwuaGVpZ2h0ID0gXCIzMHB4XCI7XHJcblxyXG4gICAgICAgIGNvbnN0IGNoZWNrYm94ID0gbmV3IENoZWNrYm94KCk7XHJcbiAgICAgICAgY2hlY2tib3gud2lkdGggPSBcIjIwcHhcIjtcclxuICAgICAgICBjaGVja2JveC5oZWlnaHQgPSBcIjIwcHhcIjtcclxuICAgICAgICBjaGVja2JveC5pc0NoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIGNoZWNrYm94LmNvbG9yID0gXCJncmVlblwiO1xyXG4gICAgICAgIGNoZWNrYm94Lm9uSXNDaGVja2VkQ2hhbmdlZE9ic2VydmFibGUuYWRkKG9uVmFsdWVDaGFuZ2VkKTtcclxuICAgICAgICBwYW5lbC5hZGRDb250cm9sKGNoZWNrYm94KTtcclxuXHJcbiAgICAgICAgY29uc3QgaGVhZGVyID0gbmV3IFRleHRCbG9jaygpO1xyXG4gICAgICAgIGhlYWRlci50ZXh0ID0gdGl0bGU7XHJcbiAgICAgICAgaGVhZGVyLndpZHRoID0gXCIxODBweFwiO1xyXG4gICAgICAgIGhlYWRlci5wYWRkaW5nTGVmdCA9IFwiNXB4XCI7XHJcbiAgICAgICAgaGVhZGVyLnRleHRIb3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIGhlYWRlci5jb2xvciA9IFwid2hpdGVcIjtcclxuICAgICAgICBwYW5lbC5hZGRDb250cm9sKGhlYWRlcik7XHJcblxyXG4gICAgICAgIHJldHVybiBwYW5lbDtcclxuICAgIH1cclxufVxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuQ2hlY2tib3hcIiwgQ2hlY2tib3gpO1xyXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB0eXBlIHsgVmVjdG9yMiB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgdHlwZSB7IE1lYXN1cmUgfSBmcm9tIFwiLi4vbWVhc3VyZVwiO1xyXG5pbXBvcnQgeyBJbnB1dFRleHQgfSBmcm9tIFwiLi9pbnB1dFRleHRcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4vcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuL2J1dHRvblwiO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSBcIi4vZ3JpZFwiO1xyXG5pbXBvcnQgdHlwZSB7IEFkdmFuY2VkRHluYW1pY1RleHR1cmUgfSBmcm9tIFwiLi4vYWR2YW5jZWREeW5hbWljVGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBUZXh0QmxvY2sgfSBmcm9tIFwiLi4vY29udHJvbHMvdGV4dEJsb2NrXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBDb2xvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbG9yXCI7XHJcbmltcG9ydCB0eXBlIHsgUG9pbnRlckluZm9CYXNlIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB0eXBlIHsgSUNhbnZhcywgSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQgfSBmcm9tIFwiY29yZS9FbmdpbmVzL0lDYW52YXNcIjtcclxuaW1wb3J0IHsgRW5naW5lU3RvcmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL2VuZ2luZVN0b3JlXCI7XHJcblxyXG4vKiogQ2xhc3MgdXNlZCB0byBjcmVhdGUgY29sb3IgcGlja2VycyAqL1xyXG5leHBvcnQgY2xhc3MgQ29sb3JQaWNrZXIgZXh0ZW5kcyBDb250cm9sIHtcclxuICAgIHByaXZhdGUgc3RhdGljIF9FcHNpbG9uID0gMC4wMDAwMDE7XHJcbiAgICBwcml2YXRlIF9jb2xvcldoZWVsQ2FudmFzOiBJQ2FudmFzO1xyXG5cclxuICAgIHByaXZhdGUgX3ZhbHVlOiBDb2xvcjMgPSBDb2xvcjMuUmVkKCk7XHJcbiAgICBwcml2YXRlIF90bXBDb2xvciA9IG5ldyBDb2xvcjMoKTtcclxuXHJcbiAgICBwcml2YXRlIF9wb2ludGVyU3RhcnRlZE9uU3F1YXJlID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9wb2ludGVyU3RhcnRlZE9uV2hlZWwgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIF9zcXVhcmVMZWZ0ID0gMDtcclxuICAgIHByaXZhdGUgX3NxdWFyZVRvcCA9IDA7XHJcbiAgICBwcml2YXRlIF9zcXVhcmVTaXplID0gMDtcclxuXHJcbiAgICBwcml2YXRlIF9oID0gMzYwO1xyXG4gICAgcHJpdmF0ZSBfcyA9IDE7XHJcbiAgICBwcml2YXRlIF92ID0gMTtcclxuXHJcbiAgICBwcml2YXRlIF9sYXN0UG9pbnRlckRvd25JZCA9IC0xO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2JzZXJ2YWJsZSByYWlzZWQgd2hlbiB0aGUgdmFsdWUgY2hhbmdlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25WYWx1ZUNoYW5nZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8Q29sb3IzPigpO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGNvbG9yIG9mIHRoZSBjb2xvciBwaWNrZXIgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCB2YWx1ZSgpOiBDb2xvcjMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBDb2xvcjMpIHtcclxuICAgICAgICBpZiAodGhpcy5fdmFsdWUuZXF1YWxzKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZS5jb3B5RnJvbSh2YWx1ZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlLnRvSFNWVG9SZWYodGhpcy5fdG1wQ29sb3IpO1xyXG5cclxuICAgICAgICB0aGlzLl9oID0gdGhpcy5fdG1wQ29sb3IucjtcclxuICAgICAgICB0aGlzLl9zID0gTWF0aC5tYXgodGhpcy5fdG1wQ29sb3IuZywgMC4wMDAwMSk7XHJcbiAgICAgICAgdGhpcy5fdiA9IE1hdGgubWF4KHRoaXMuX3RtcENvbG9yLmIsIDAuMDAwMDEpO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fdmFsdWUuciA8PSBDb2xvclBpY2tlci5fRXBzaWxvbikge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZS5yID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl92YWx1ZS5nIDw9IENvbG9yUGlja2VyLl9FcHNpbG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlLmcgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlLmIgPD0gQ29sb3JQaWNrZXIuX0Vwc2lsb24pIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUuYiA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdmFsdWUuciA+PSAxLjAgLSBDb2xvclBpY2tlci5fRXBzaWxvbikge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZS5yID0gMS4wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlLmcgPj0gMS4wIC0gQ29sb3JQaWNrZXIuX0Vwc2lsb24pIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUuZyA9IDEuMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl92YWx1ZS5iID49IDEuMCAtIENvbG9yUGlja2VyLl9FcHNpbG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlLmIgPSAxLjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9uVmFsdWVDaGFuZ2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcy5fdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGNvbnRyb2wgd2lkdGhcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjcG9zaXRpb24tYW5kLXNpemVcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0IHdpZHRoKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXQgd2lkdGgodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl93aWR0aC50b1N0cmluZyh0aGlzLl9ob3N0KSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3dpZHRoLmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl93aWR0aC5nZXRWYWx1ZSh0aGlzLl9ob3N0KSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBcIjFweFwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2lkdGguZnJvbVN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5faGVpZ2h0LmZyb21TdHJpbmcodmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBjb250cm9sIGhlaWdodFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNwb3NpdGlvbi1hbmQtc2l6ZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXQgaGVpZ2h0KCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodC50b1N0cmluZyh0aGlzLl9ob3N0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGNvbnRyb2wgaGVpZ2h0ICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2V0IGhlaWdodCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hlaWdodC50b1N0cmluZyh0aGlzLl9ob3N0KSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hlaWdodC5mcm9tU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faGVpZ2h0LmdldFZhbHVlKHRoaXMuX2hvc3QpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiMXB4XCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oZWlnaHQuZnJvbVN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fd2lkdGguZnJvbVN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgY29udHJvbCBzaXplICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgc2l6ZSgpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2l6ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvclBpY2tlclxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBvdmVycmlkZSBuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ldyBDb2xvcjMoMC44OCwgMC4xLCAwLjEpO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IFwiMjAwcHhcIjtcclxuICAgICAgICB0aGlzLmlzUG9pbnRlckJsb2NrZXIgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJDb2xvclBpY2tlclwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfcHJlTWVhc3VyZShwYXJlbnRNZWFzdXJlOiBNZWFzdXJlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHBhcmVudE1lYXN1cmUud2lkdGggPCBwYXJlbnRNZWFzdXJlLmhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgPSBwYXJlbnRNZWFzdXJlLndpZHRoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoID0gcGFyZW50TWVhc3VyZS5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3VwZGF0ZVNxdWFyZVByb3BzKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IE1hdGgubWluKHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpICogMC41O1xyXG4gICAgICAgIGNvbnN0IHdoZWVsVGhpY2tuZXNzID0gcmFkaXVzICogMC4yO1xyXG4gICAgICAgIGNvbnN0IGlubmVyRGlhbWV0ZXIgPSAocmFkaXVzIC0gd2hlZWxUaGlja25lc3MpICogMjtcclxuICAgICAgICBjb25zdCBzcXVhcmVTaXplID0gaW5uZXJEaWFtZXRlciAvIE1hdGguc3FydCgyKTtcclxuICAgICAgICBjb25zdCBvZmZzZXQgPSByYWRpdXMgLSBzcXVhcmVTaXplICogMC41O1xyXG5cclxuICAgICAgICB0aGlzLl9zcXVhcmVMZWZ0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIG9mZnNldDtcclxuICAgICAgICB0aGlzLl9zcXVhcmVUb3AgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyBvZmZzZXQ7XHJcbiAgICAgICAgdGhpcy5fc3F1YXJlU2l6ZSA9IHNxdWFyZVNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZHJhd0dyYWRpZW50U3F1YXJlKGh1ZVZhbHVlOiBudW1iZXIsIGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCkge1xyXG4gICAgICAgIGNvbnN0IGxnaCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQobGVmdCwgdG9wLCB3aWR0aCArIGxlZnQsIHRvcCk7XHJcbiAgICAgICAgbGdoLmFkZENvbG9yU3RvcCgwLCBcIiNmZmZcIik7XHJcbiAgICAgICAgbGdoLmFkZENvbG9yU3RvcCgxLCBcImhzbChcIiArIGh1ZVZhbHVlICsgXCIsIDEwMCUsIDUwJSlcIik7XHJcblxyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gbGdoO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgY29uc3QgbGd2ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudChsZWZ0LCB0b3AsIGxlZnQsIGhlaWdodCArIHRvcCk7XHJcbiAgICAgICAgbGd2LmFkZENvbG9yU3RvcCgwLCBcInJnYmEoMCwwLDAsMClcIik7XHJcbiAgICAgICAgbGd2LmFkZENvbG9yU3RvcCgxLCBcIiMwMDBcIik7XHJcblxyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gbGd2O1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9kcmF3Q2lyY2xlKGNlbnRlclg6IG51bWJlciwgY2VudGVyWTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuYXJjKGNlbnRlclgsIGNlbnRlclksIHJhZGl1cyArIDEsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSAzO1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBcIiMzMzMzMzNcIjtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMztcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gXCIjZmZmZmZmXCI7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jcmVhdGVDb2xvcldoZWVsQ2FudmFzKHJhZGl1czogbnVtYmVyLCB0aGlja25lc3M6IG51bWJlcik6IElDYW52YXMge1xyXG4gICAgICAgIC8vIFNob3VkbCBhYnN0cmFjdCBwbGF0Zm9ybSBpbnN0ZWFkIG9mIHVzaW5nIExhc3RDcmVhdGVkRW5naW5lXHJcbiAgICAgICAgY29uc3QgZW5naW5lID0gRW5naW5lU3RvcmUuTGFzdENyZWF0ZWRFbmdpbmU7XHJcbiAgICAgICAgaWYgKCFlbmdpbmUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBlbmdpbmUuIFVuYWJsZSB0byBjcmVhdGUgYSBjYW52YXMuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjYW52YXMgPSBlbmdpbmUuY3JlYXRlQ2FudmFzKHJhZGl1cyAqIDIsIHJhZGl1cyAqIDIpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnN0IGltYWdlID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgcmFkaXVzICogMiwgcmFkaXVzICogMik7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGltYWdlLmRhdGE7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5fdG1wQ29sb3I7XHJcbiAgICAgICAgY29uc3QgbWF4RGlzdFNxID0gcmFkaXVzICogcmFkaXVzO1xyXG4gICAgICAgIGNvbnN0IGlubmVyUmFkaXVzID0gcmFkaXVzIC0gdGhpY2tuZXNzO1xyXG4gICAgICAgIGNvbnN0IG1pbkRpc3RTcSA9IGlubmVyUmFkaXVzICogaW5uZXJSYWRpdXM7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHggPSAtcmFkaXVzOyB4IDwgcmFkaXVzOyB4KyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgeSA9IC1yYWRpdXM7IHkgPCByYWRpdXM7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdFNxID0geCAqIHggKyB5ICogeTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzdFNxID4gbWF4RGlzdFNxIHx8IGRpc3RTcSA8IG1pbkRpc3RTcSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3QgPSBNYXRoLnNxcnQoZGlzdFNxKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFuZyA9IE1hdGguYXRhbjIoeSwgeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgQ29sb3IzLkhTVnRvUkdCVG9SZWYoKGFuZyAqIDE4MCkgLyBNYXRoLlBJICsgMTgwLCBkaXN0IC8gcmFkaXVzLCAxLCBjb2xvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSAoeCArIHJhZGl1cyArICh5ICsgcmFkaXVzKSAqIDIgKiByYWRpdXMpICogNDtcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhW2luZGV4XSA9IGNvbG9yLnIgKiAyNTU7XHJcbiAgICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgMV0gPSBjb2xvci5nICogMjU1O1xyXG4gICAgICAgICAgICAgICAgZGF0YVtpbmRleCArIDJdID0gY29sb3IuYiAqIDI1NTtcclxuICAgICAgICAgICAgICAgIGxldCBhbHBoYVJhdGlvID0gKGRpc3QgLSBpbm5lclJhZGl1cykgLyAocmFkaXVzIC0gaW5uZXJSYWRpdXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vYXBwbHkgbGVzcyBhbHBoYSB0byBiaWdnZXIgY29sb3IgcGlja2Vyc1xyXG4gICAgICAgICAgICAgICAgbGV0IGFscGhhQW1vdW50ID0gMC4yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4QWxwaGEgPSAwLjI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5BbHBoYSA9IDAuMDQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsb3dlclJhZGl1cyA9IDUwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXBwZXJSYWRpdXMgPSAxNTA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJhZGl1cyA8IGxvd2VyUmFkaXVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxwaGFBbW91bnQgPSBtYXhBbHBoYTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmFkaXVzID4gdXBwZXJSYWRpdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbHBoYUFtb3VudCA9IG1pbkFscGhhO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbHBoYUFtb3VudCA9ICgobWluQWxwaGEgLSBtYXhBbHBoYSkgKiAocmFkaXVzIC0gbG93ZXJSYWRpdXMpKSAvICh1cHBlclJhZGl1cyAtIGxvd2VyUmFkaXVzKSArIG1heEFscGhhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGFscGhhUmF0aW8gPSAoZGlzdCAtIGlubmVyUmFkaXVzKSAvIChyYWRpdXMgLSBpbm5lclJhZGl1cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFscGhhUmF0aW8gPCBhbHBoYUFtb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbaW5kZXggKyAzXSA9IDI1NSAqIChhbHBoYVJhdGlvIC8gYWxwaGFBbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbHBoYVJhdGlvID4gMSAtIGFscGhhQW1vdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtpbmRleCArIDNdID0gMjU1ICogKDEuMCAtIChhbHBoYVJhdGlvIC0gKDEgLSBhbHBoYUFtb3VudCkpIC8gYWxwaGFBbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgM10gPSAyNTU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlLCAwLCAwKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNhbnZhcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2RyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYXBwbHlTdGF0ZXMoY29udGV4dCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IE1hdGgubWluKHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpICogMC41O1xyXG4gICAgICAgIGNvbnN0IHdoZWVsVGhpY2tuZXNzID0gcmFkaXVzICogMC4yO1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHRvcCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9jb2xvcldoZWVsQ2FudmFzIHx8IHRoaXMuX2NvbG9yV2hlZWxDYW52YXMud2lkdGggIT0gcmFkaXVzICogMikge1xyXG4gICAgICAgICAgICB0aGlzLl9jb2xvcldoZWVsQ2FudmFzID0gdGhpcy5fY3JlYXRlQ29sb3JXaGVlbENhbnZhcyhyYWRpdXMsIHdoZWVsVGhpY2tuZXNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVNxdWFyZVByb3BzKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gdGhpcy5zaGFkb3dDb2xvcjtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gdGhpcy5zaGFkb3dCbHVyO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IHRoaXMuc2hhZG93T2Zmc2V0WTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QodGhpcy5fc3F1YXJlTGVmdCwgdGhpcy5fc3F1YXJlVG9wLCB0aGlzLl9zcXVhcmVTaXplLCB0aGlzLl9zcXVhcmVTaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMuX2NvbG9yV2hlZWxDYW52YXMsIGxlZnQsIHRvcCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSAwO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSAwO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZHJhd0dyYWRpZW50U3F1YXJlKHRoaXMuX2gsIHRoaXMuX3NxdWFyZUxlZnQsIHRoaXMuX3NxdWFyZVRvcCwgdGhpcy5fc3F1YXJlU2l6ZSwgdGhpcy5fc3F1YXJlU2l6ZSwgY29udGV4dCk7XHJcblxyXG4gICAgICAgIGxldCBjeCA9IHRoaXMuX3NxdWFyZUxlZnQgKyB0aGlzLl9zcXVhcmVTaXplICogdGhpcy5fcztcclxuICAgICAgICBsZXQgY3kgPSB0aGlzLl9zcXVhcmVUb3AgKyB0aGlzLl9zcXVhcmVTaXplICogKDEgLSB0aGlzLl92KTtcclxuXHJcbiAgICAgICAgdGhpcy5fZHJhd0NpcmNsZShjeCwgY3ksIHJhZGl1cyAqIDAuMDQsIGNvbnRleHQpO1xyXG5cclxuICAgICAgICBjb25zdCBkaXN0ID0gcmFkaXVzIC0gd2hlZWxUaGlja25lc3MgKiAwLjU7XHJcbiAgICAgICAgY3ggPSBsZWZ0ICsgcmFkaXVzICsgTWF0aC5jb3MoKCh0aGlzLl9oIC0gMTgwKSAqIE1hdGguUEkpIC8gMTgwKSAqIGRpc3Q7XHJcbiAgICAgICAgY3kgPSB0b3AgKyByYWRpdXMgKyBNYXRoLnNpbigoKHRoaXMuX2ggLSAxODApICogTWF0aC5QSSkgLyAxODApICogZGlzdDtcclxuICAgICAgICB0aGlzLl9kcmF3Q2lyY2xlKGN4LCBjeSwgd2hlZWxUaGlja25lc3MgKiAwLjM1LCBjb250ZXh0KTtcclxuXHJcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRXZlbnRzXHJcbiAgICBwcml2YXRlIF9wb2ludGVySXNEb3duID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlVmFsdWVGcm9tUG9pbnRlcih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9wb2ludGVyU3RhcnRlZE9uV2hlZWwpIHtcclxuICAgICAgICAgICAgY29uc3QgcmFkaXVzID0gTWF0aC5taW4odGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCkgKiAwLjU7XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlclggPSByYWRpdXMgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0O1xyXG4gICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gcmFkaXVzICsgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wO1xyXG4gICAgICAgICAgICB0aGlzLl9oID0gKE1hdGguYXRhbjIoeSAtIGNlbnRlclksIHggLSBjZW50ZXJYKSAqIDE4MCkgLyBNYXRoLlBJICsgMTgwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fcG9pbnRlclN0YXJ0ZWRPblNxdWFyZSkge1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTcXVhcmVQcm9wcygpO1xyXG4gICAgICAgICAgICB0aGlzLl9zID0gKHggLSB0aGlzLl9zcXVhcmVMZWZ0KSAvIHRoaXMuX3NxdWFyZVNpemU7XHJcbiAgICAgICAgICAgIHRoaXMuX3YgPSAxIC0gKHkgLSB0aGlzLl9zcXVhcmVUb3ApIC8gdGhpcy5fc3F1YXJlU2l6ZTtcclxuICAgICAgICAgICAgdGhpcy5fcyA9IE1hdGgubWluKHRoaXMuX3MsIDEpO1xyXG4gICAgICAgICAgICB0aGlzLl9zID0gTWF0aC5tYXgodGhpcy5fcywgQ29sb3JQaWNrZXIuX0Vwc2lsb24pO1xyXG4gICAgICAgICAgICB0aGlzLl92ID0gTWF0aC5taW4odGhpcy5fdiwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3YgPSBNYXRoLm1heCh0aGlzLl92LCBDb2xvclBpY2tlci5fRXBzaWxvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBDb2xvcjMuSFNWdG9SR0JUb1JlZih0aGlzLl9oLCB0aGlzLl9zLCB0aGlzLl92LCB0aGlzLl90bXBDb2xvcik7XHJcblxyXG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLl90bXBDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pc1BvaW50T25TcXVhcmUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICB0aGlzLl91cGRhdGVTcXVhcmVQcm9wcygpO1xyXG5cclxuICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5fc3F1YXJlTGVmdDtcclxuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLl9zcXVhcmVUb3A7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NxdWFyZVNpemU7XHJcblxyXG4gICAgICAgIGlmICh4ID49IGxlZnQgJiYgeCA8PSBsZWZ0ICsgc2l6ZSAmJiB5ID49IHRvcCAmJiB5IDw9IHRvcCArIHNpemUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaXNQb2ludE9uV2hlZWwoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCByYWRpdXMgPSBNYXRoLm1pbih0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KSAqIDAuNTtcclxuICAgICAgICBjb25zdCBjZW50ZXJYID0gcmFkaXVzICsgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdDtcclxuICAgICAgICBjb25zdCBjZW50ZXJZID0gcmFkaXVzICsgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wO1xyXG4gICAgICAgIGNvbnN0IHdoZWVsVGhpY2tuZXNzID0gcmFkaXVzICogMC4yO1xyXG4gICAgICAgIGNvbnN0IGlubmVyUmFkaXVzID0gcmFkaXVzIC0gd2hlZWxUaGlja25lc3M7XHJcbiAgICAgICAgY29uc3QgcmFkaXVzU3EgPSByYWRpdXMgKiByYWRpdXM7XHJcbiAgICAgICAgY29uc3QgaW5uZXJSYWRpdXNTcSA9IGlubmVyUmFkaXVzICogaW5uZXJSYWRpdXM7XHJcblxyXG4gICAgICAgIGNvbnN0IGR4ID0geCAtIGNlbnRlclg7XHJcbiAgICAgICAgY29uc3QgZHkgPSB5IC0gY2VudGVyWTtcclxuXHJcbiAgICAgICAgY29uc3QgZGlzdFNxID0gZHggKiBkeCArIGR5ICogZHk7XHJcblxyXG4gICAgICAgIGlmIChkaXN0U3EgPD0gcmFkaXVzU3EgJiYgZGlzdFNxID49IGlubmVyUmFkaXVzU3EpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJEb3duKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBidXR0b25JbmRleDogbnVtYmVyLCBwaTogUG9pbnRlckluZm9CYXNlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdXBlci5fb25Qb2ludGVyRG93bih0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBwaSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZWFkT25seSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJJc0Rvd24gPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLl9wb2ludGVyU3RhcnRlZE9uU3F1YXJlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fcG9pbnRlclN0YXJ0ZWRPbldoZWVsID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIEludmVydCB0cmFuc2Zvcm1cclxuICAgICAgICB0aGlzLl9pbnZlcnRUcmFuc2Zvcm1NYXRyaXgudHJhbnNmb3JtQ29vcmRpbmF0ZXMoY29vcmRpbmF0ZXMueCwgY29vcmRpbmF0ZXMueSwgdGhpcy5fdHJhbnNmb3JtZWRQb3NpdGlvbik7XHJcblxyXG4gICAgICAgIGNvbnN0IHggPSB0aGlzLl90cmFuc2Zvcm1lZFBvc2l0aW9uLng7XHJcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuX3RyYW5zZm9ybWVkUG9zaXRpb24ueTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUG9pbnRPblNxdWFyZSh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLl9wb2ludGVyU3RhcnRlZE9uU3F1YXJlID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2lzUG9pbnRPbldoZWVsKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvaW50ZXJTdGFydGVkT25XaGVlbCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl91cGRhdGVWYWx1ZUZyb21Qb2ludGVyKHgsIHkpO1xyXG4gICAgICAgIHRoaXMuX2hvc3QuX2NhcHR1cmluZ0NvbnRyb2xbcG9pbnRlcklkXSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fbGFzdFBvaW50ZXJEb3duSWQgPSBwb2ludGVySWQ7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJNb3ZlKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBwaTogUG9pbnRlckluZm9CYXNlKTogdm9pZCB7XHJcbiAgICAgICAgLy8gT25seSBsaXN0ZW4gdG8gcG9pbnRlciBtb3ZlIGV2ZW50cyBjb21pbmcgZnJvbSB0aGUgbGFzdCBwb2ludGVyIHRvIGNsaWNrIG9uIHRoZSBlbGVtZW50IChUbyBzdXBwb3J0IGR1YWwgdnIgY29udHJvbGxlciBpbnRlcmFjdGlvbilcclxuICAgICAgICBpZiAocG9pbnRlcklkICE9IHRoaXMuX2xhc3RQb2ludGVyRG93bklkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIC8vIEludmVydCB0cmFuc2Zvcm1cclxuICAgICAgICAgICAgdGhpcy5faW52ZXJ0VHJhbnNmb3JtTWF0cml4LnRyYW5zZm9ybUNvb3JkaW5hdGVzKGNvb3JkaW5hdGVzLngsIGNvb3JkaW5hdGVzLnksIHRoaXMuX3RyYW5zZm9ybWVkUG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMuX3RyYW5zZm9ybWVkUG9zaXRpb24ueDtcclxuICAgICAgICAgICAgY29uc3QgeSA9IHRoaXMuX3RyYW5zZm9ybWVkUG9zaXRpb24ueTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wb2ludGVySXNEb3duKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVWYWx1ZUZyb21Qb2ludGVyKHgsIHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5fb25Qb2ludGVyTW92ZSh0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIHBpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX29uUG9pbnRlclVwKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBidXR0b25JbmRleDogbnVtYmVyLCBub3RpZnlDbGljazogYm9vbGVhbiwgcGk6IFBvaW50ZXJJbmZvQmFzZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJJc0Rvd24gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2hvc3QuX2NhcHR1cmluZ0NvbnRyb2xbcG9pbnRlcklkXTtcclxuICAgICAgICBzdXBlci5fb25Qb2ludGVyVXAodGFyZ2V0LCBjb29yZGluYXRlcywgcG9pbnRlcklkLCBidXR0b25JbmRleCwgbm90aWZ5Q2xpY2ssIHBpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX29uQ2FudmFzQmx1cigpIHtcclxuICAgICAgICB0aGlzLl9mb3JjZVBvaW50ZXJVcCgpO1xyXG4gICAgICAgIHN1cGVyLl9vbkNhbnZhc0JsdXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gZXhwYW5kcyB0aGUgY29sb3IgcGlja2VyIGJ5IGNyZWF0aW5nIGEgY29sb3IgcGlja2VyIGRpYWxvZyB3aXRoIG1hbnVhbFxyXG4gICAgICogY29sb3IgdmFsdWUgaW5wdXQgYW5kIHRoZSBhYmlsaXR5IHRvIHNhdmUgY29sb3JzIGludG8gYW4gYXJyYXkgdG8gYmUgdXNlZCBsYXRlciBpblxyXG4gICAgICogc3Vic2VxdWVudCBsYXVuY2hlcyBvZiB0aGUgZGlhbG9ndWUuXHJcbiAgICAgKiBAcGFyYW0gYWR2YW5jZWRUZXh0dXJlIGRlZmluZXMgdGhlIEFkdmFuY2VkRHluYW1pY1RleHR1cmUgdGhlIGRpYWxvZyBpcyBhc3NpZ25lZCB0b1xyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgZGVmaW5lcyBzaXplIGZvciBkaWFsb2cgYW5kIG9wdGlvbnMgZm9yIHNhdmVkIGNvbG9ycy4gQWxzbyBhY2NlcHRzIGxhc3QgY29sb3IgcGlja2VkIGFzIGhleCBzdHJpbmcgYW5kIHNhdmVkIGNvbG9ycyBhcnJheSBhcyBoZXggc3RyaW5ncy5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zLnBpY2tlcldpZHRoXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5waWNrZXJIZWlnaHRcclxuICAgICAqIEBwYXJhbSBvcHRpb25zLmhlYWRlckhlaWdodFxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMubGFzdENvbG9yXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5zd2F0Y2hMaW1pdFxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMubnVtU3dhdGNoZXNQZXJMaW5lXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5zYXZlZENvbG9yc1xyXG4gICAgICogQHJldHVybnMgcGlja2VkIGNvbG9yIGFzIGEgaGV4IHN0cmluZyBhbmQgdGhlIHNhdmVkIGNvbG9ycyBhcnJheSBhcyBoZXggc3RyaW5ncy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBTaG93UGlja2VyRGlhbG9nQXN5bmMoXHJcbiAgICAgICAgYWR2YW5jZWRUZXh0dXJlOiBBZHZhbmNlZER5bmFtaWNUZXh0dXJlLFxyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgcGlja2VyV2lkdGg/OiBzdHJpbmc7XHJcbiAgICAgICAgICAgIHBpY2tlckhlaWdodD86IHN0cmluZztcclxuICAgICAgICAgICAgaGVhZGVySGVpZ2h0Pzogc3RyaW5nO1xyXG4gICAgICAgICAgICBsYXN0Q29sb3I/OiBzdHJpbmc7XHJcbiAgICAgICAgICAgIHN3YXRjaExpbWl0PzogbnVtYmVyO1xyXG4gICAgICAgICAgICBudW1Td2F0Y2hlc1BlckxpbmU/OiBudW1iZXI7XHJcbiAgICAgICAgICAgIHNhdmVkQ29sb3JzPzogQXJyYXk8c3RyaW5nPjtcclxuICAgICAgICB9XHJcbiAgICApOiBQcm9taXNlPHtcclxuICAgICAgICBzYXZlZENvbG9ycz86IHN0cmluZ1tdO1xyXG4gICAgICAgIHBpY2tlZENvbG9yOiBzdHJpbmc7XHJcbiAgICB9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQgb3B0aW9uc1xyXG4gICAgICAgICAgICBvcHRpb25zLnBpY2tlcldpZHRoID0gb3B0aW9ucy5waWNrZXJXaWR0aCB8fCBcIjY0MHB4XCI7XHJcbiAgICAgICAgICAgIG9wdGlvbnMucGlja2VySGVpZ2h0ID0gb3B0aW9ucy5waWNrZXJIZWlnaHQgfHwgXCI0MDBweFwiO1xyXG4gICAgICAgICAgICBvcHRpb25zLmhlYWRlckhlaWdodCA9IG9wdGlvbnMuaGVhZGVySGVpZ2h0IHx8IFwiMzVweFwiO1xyXG4gICAgICAgICAgICBvcHRpb25zLmxhc3RDb2xvciA9IG9wdGlvbnMubGFzdENvbG9yIHx8IFwiIzAwMDAwMFwiO1xyXG4gICAgICAgICAgICBvcHRpb25zLnN3YXRjaExpbWl0ID0gb3B0aW9ucy5zd2F0Y2hMaW1pdCB8fCAyMDtcclxuICAgICAgICAgICAgb3B0aW9ucy5udW1Td2F0Y2hlc1BlckxpbmUgPSBvcHRpb25zLm51bVN3YXRjaGVzUGVyTGluZSB8fCAxMDtcclxuXHJcbiAgICAgICAgICAgIC8vIFdpbmRvdyBzaXplIHNldHRpbmdzXHJcbiAgICAgICAgICAgIGNvbnN0IGRyYXdlck1heFJvd3M6IG51bWJlciA9IG9wdGlvbnMuc3dhdGNoTGltaXQgLyBvcHRpb25zLm51bVN3YXRjaGVzUGVyTGluZTtcclxuICAgICAgICAgICAgY29uc3QgcmF3U3dhdGNoU2l6ZTogbnVtYmVyID0gcGFyc2VGbG9hdCg8c3RyaW5nPm9wdGlvbnMucGlja2VyV2lkdGgpIC8gb3B0aW9ucy5udW1Td2F0Y2hlc1BlckxpbmU7XHJcbiAgICAgICAgICAgIGNvbnN0IGd1dHRlclNpemU6IG51bWJlciA9IE1hdGguZmxvb3IocmF3U3dhdGNoU2l6ZSAqIDAuMjUpO1xyXG4gICAgICAgICAgICBjb25zdCBjb2xHdXR0ZXJzOiBudW1iZXIgPSBndXR0ZXJTaXplICogKG9wdGlvbnMubnVtU3dhdGNoZXNQZXJMaW5lICsgMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN3YXRjaFNpemU6IG51bWJlciA9IE1hdGguZmxvb3IoKHBhcnNlRmxvYXQoPHN0cmluZz5vcHRpb25zLnBpY2tlcldpZHRoKSAtIGNvbEd1dHRlcnMpIC8gb3B0aW9ucy5udW1Td2F0Y2hlc1BlckxpbmUpO1xyXG4gICAgICAgICAgICBjb25zdCBkcmF3ZXJNYXhTaXplOiBudW1iZXIgPSBzd2F0Y2hTaXplICogZHJhd2VyTWF4Um93cyArIGd1dHRlclNpemUgKiAoZHJhd2VyTWF4Um93cyArIDEpO1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJTaXplOiBzdHJpbmcgPSAocGFyc2VJbnQob3B0aW9ucy5waWNrZXJIZWlnaHQpICsgZHJhd2VyTWF4U2l6ZSArIE1hdGguZmxvb3Ioc3dhdGNoU2l6ZSAqIDAuMjUpKS50b1N0cmluZygpICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgLy8gQnV0dG9uIENvbG9yc1xyXG4gICAgICAgICAgICBjb25zdCBidXR0b25Db2xvcjogc3RyaW5nID0gXCIjYzBjMGMwXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkJhY2tncm91bmRDb2xvcjogc3RyaW5nID0gXCIjNTM1MzUzXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkJhY2tncm91bmRIb3ZlckNvbG9yOiBzdHJpbmcgPSBcIiM0MTQxNDFcIjtcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uQmFja2dyb3VuZENsaWNrQ29sb3I6IHN0cmluZyA9IFwiNTE1MTUxXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkRpc2FibGVkQ29sb3I6IHN0cmluZyA9IFwiIzU1NTU1NVwiO1xyXG4gICAgICAgICAgICBjb25zdCBidXR0b25EaXNhYmxlZEJhY2tncm91bmRDb2xvcjogc3RyaW5nID0gXCIjNDU0NTQ1XCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTd2F0Y2hlc091dGxpbmVDb2xvcjogc3RyaW5nID0gXCIjNDA0MDQwXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGx1bWluYW5jZUxpbWl0Q29sb3I6IENvbG9yMyA9IENvbG9yMy5Gcm9tSGV4U3RyaW5nKFwiI2RkZGRkZFwiKTtcclxuICAgICAgICAgICAgY29uc3QgbHVtaW5hbmNlTGltaXQ6IG51bWJlciA9IGx1bWluYW5jZUxpbWl0Q29sb3IuciArIGx1bWluYW5jZUxpbWl0Q29sb3IuZyArIGx1bWluYW5jZUxpbWl0Q29sb3IuYjtcclxuICAgICAgICAgICAgY29uc3QgaWNvbkNvbG9yRGFyazogc3RyaW5nID0gXCIjYWFhYWFhXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGljb25Db2xvckxpZ2h0OiBzdHJpbmcgPSBcIiNmZmZmZmZcIjtcclxuXHJcbiAgICAgICAgICAgIC8vIEJ1dHRvbiBzZXR0aW5nc1xyXG4gICAgICAgICAgICBsZXQgYnV0dG9uRm9udFNpemU6IG51bWJlcjtcclxuICAgICAgICAgICAgbGV0IGJ1dEVkaXQ6IEJ1dHRvbjtcclxuXHJcbiAgICAgICAgICAgIC8vIElucHV0IFRleHQgQ29sb3JzXHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RmllbGRMYWJlbHM6IHN0cmluZ1tdID0gW1wiUlwiLCBcIkdcIiwgXCJCXCJdO1xyXG4gICAgICAgICAgICBjb25zdCBpbnB1dFRleHRCYWNrZ3JvdW5kQ29sb3I6IHN0cmluZyA9IFwiIzQ1NDU0NVwiO1xyXG4gICAgICAgICAgICBjb25zdCBpbnB1dFRleHRDb2xvcjogc3RyaW5nID0gXCIjZjBmMGYwXCI7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGlzIGludCBpcyB1c2VkIGZvciBuYW1pbmcgc3dhdGNoZXMgYW5kIHNlcnZlcyBhcyB0aGUgaW5kZXggZm9yIGNhbGxpbmcgdGhlbSBmcm9tIHRoZSBsaXN0XHJcbiAgICAgICAgICAgIGxldCBzd2F0Y2hOdW1iZXI6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgIC8vIE1lbnUgUGFuZWwgb3B0aW9ucy4gV2UgbmVlZCB0byBrbm93IGlmIHRoZSBzd2F0Y2hEcmF3ZXIgZXhpc3RzIHNvIHdlIGNhbiBjcmVhdGUgaXQgaWYgbmVlZGVkLlxyXG4gICAgICAgICAgICBsZXQgc3dhdGNoRHJhd2VyOiBHcmlkO1xyXG4gICAgICAgICAgICBsZXQgZWRpdFN3YXRjaE1vZGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbG9yIElucHV0VGV4dCBmaWVsZHMgdGhhdCB3aWxsIGJlIHVwZGF0ZWQgdXBvbiB2YWx1ZSBjaGFuZ2VcclxuICAgICAgICAgICAgbGV0IGJ1dFNhdmU6IEJ1dHRvbjtcclxuICAgICAgICAgICAgbGV0IGxhc3RWYWw6IHN0cmluZztcclxuICAgICAgICAgICAgbGV0IGFjdGl2ZUZpZWxkOiBzdHJpbmc7XHJcblxyXG4gICAgICAgICAgICAvLyBEaWFsb2cgbWVudSBjb250YWluZXIgd2hpY2ggd2lsbCBjb250YWluIGJvdGggdGhlIG1haW4gZGlhbG9ndWUgd2luZG93IGFuZCB0aGUgc3dhdGNoIGRyYXdlciB3aGljaCBvcGVucyBvbmNlIGEgY29sb3IgaXMgc2F2ZWQuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZ0NvbnRhaW5lcjogR3JpZCA9IG5ldyBHcmlkKCk7XHJcbiAgICAgICAgICAgIGRpYWxvZ0NvbnRhaW5lci5uYW1lID0gXCJEaWFsb2cgQ29udGFpbmVyXCI7XHJcbiAgICAgICAgICAgIGRpYWxvZ0NvbnRhaW5lci53aWR0aCA9IG9wdGlvbnMucGlja2VyV2lkdGg7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVkQ29sb3JzKSB7XHJcbiAgICAgICAgICAgICAgICBkaWFsb2dDb250YWluZXIuaGVpZ2h0ID0gY29udGFpbmVyU2l6ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvcFJvdzogbnVtYmVyID0gcGFyc2VJbnQob3B0aW9ucy5waWNrZXJIZWlnaHQpIC8gcGFyc2VJbnQoY29udGFpbmVyU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBkaWFsb2dDb250YWluZXIuYWRkUm93RGVmaW5pdGlvbih0b3BSb3csIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGRpYWxvZ0NvbnRhaW5lci5hZGRSb3dEZWZpbml0aW9uKDEuMCAtIHRvcFJvdywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGlhbG9nQ29udGFpbmVyLmhlaWdodCA9IG9wdGlvbnMucGlja2VySGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgZGlhbG9nQ29udGFpbmVyLmFkZFJvd0RlZmluaXRpb24oMS4wLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWR2YW5jZWRUZXh0dXJlLmFkZENvbnRyb2woZGlhbG9nQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN3YXRjaCBkcmF3ZXIgd2hpY2ggY29udGFpbnMgYWxsIHNhdmVkIGNvbG9yIGJ1dHRvbnNcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZWRDb2xvcnMpIHtcclxuICAgICAgICAgICAgICAgIHN3YXRjaERyYXdlciA9IG5ldyBHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICBzd2F0Y2hEcmF3ZXIubmFtZSA9IFwiU3dhdGNoIERyYXdlclwiO1xyXG4gICAgICAgICAgICAgICAgc3dhdGNoRHJhd2VyLnZlcnRpY2FsQWxpZ25tZW50ID0gQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfVE9QO1xyXG4gICAgICAgICAgICAgICAgc3dhdGNoRHJhd2VyLmJhY2tncm91bmQgPSBidXR0b25CYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgICAgICBzd2F0Y2hEcmF3ZXIud2lkdGggPSBvcHRpb25zLnBpY2tlcldpZHRoITtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxSb3dzOiBudW1iZXIgPSBvcHRpb25zLnNhdmVkQ29sb3JzLmxlbmd0aCAvIG9wdGlvbnMubnVtU3dhdGNoZXNQZXJMaW5lO1xyXG4gICAgICAgICAgICAgICAgbGV0IGd1dHRlckNvdW50OiBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFJvd3MgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGd1dHRlckNvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3V0dGVyQ291bnQgPSBpbml0aWFsUm93cyArIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzd2F0Y2hEcmF3ZXIuaGVpZ2h0ID0gKHN3YXRjaFNpemUgKiBpbml0aWFsUm93cyArIGd1dHRlckNvdW50ICogZ3V0dGVyU2l6ZSkudG9TdHJpbmcoKSArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgIHN3YXRjaERyYXdlci50b3AgPSBNYXRoLmZsb29yKHN3YXRjaFNpemUgKiAwLjI1KS50b1N0cmluZygpICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLmNlaWwob3B0aW9ucy5zYXZlZENvbG9ycy5sZW5ndGggLyBvcHRpb25zLm51bVN3YXRjaGVzUGVyTGluZSkgKiAyICsgMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgJSAyICE9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dhdGNoRHJhd2VyLmFkZFJvd0RlZmluaXRpb24oc3dhdGNoU2l6ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dhdGNoRHJhd2VyLmFkZFJvd0RlZmluaXRpb24oZ3V0dGVyU2l6ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLm51bVN3YXRjaGVzUGVyTGluZSEgKiAyICsgMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgJSAyICE9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dhdGNoRHJhd2VyLmFkZENvbHVtbkRlZmluaXRpb24oc3dhdGNoU2l6ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dhdGNoRHJhd2VyLmFkZENvbHVtbkRlZmluaXRpb24oZ3V0dGVyU2l6ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGlhbG9nQ29udGFpbmVyLmFkZENvbnRyb2woc3dhdGNoRHJhd2VyLCAxLCAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUGlja2VyIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBjb25zdCBwaWNrZXJQYW5lbDogR3JpZCA9IG5ldyBHcmlkKCk7XHJcbiAgICAgICAgICAgIHBpY2tlclBhbmVsLm5hbWUgPSBcIlBpY2tlciBQYW5lbFwiO1xyXG4gICAgICAgICAgICBwaWNrZXJQYW5lbC5oZWlnaHQgPSBvcHRpb25zLnBpY2tlckhlaWdodDtcclxuICAgICAgICAgICAgY29uc3QgcGFuZWxIZWFkOiBudW1iZXIgPSBwYXJzZUludChvcHRpb25zLmhlYWRlckhlaWdodCkgLyBwYXJzZUludChvcHRpb25zLnBpY2tlckhlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBpY2tlclBhbmVsUm93czogbnVtYmVyW10gPSBbcGFuZWxIZWFkLCAxLjAgLSBwYW5lbEhlYWRdO1xyXG4gICAgICAgICAgICBwaWNrZXJQYW5lbC5hZGRSb3dEZWZpbml0aW9uKHBpY2tlclBhbmVsUm93c1swXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBwaWNrZXJQYW5lbC5hZGRSb3dEZWZpbml0aW9uKHBpY2tlclBhbmVsUm93c1sxXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBkaWFsb2dDb250YWluZXIuYWRkQ29udHJvbChwaWNrZXJQYW5lbCwgMCwgMCk7XHJcblxyXG4gICAgICAgICAgICAvLyBQaWNrZXIgY29udGFpbmVyIGhlYWRlclxyXG4gICAgICAgICAgICBjb25zdCBoZWFkZXI6IFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoKTtcclxuICAgICAgICAgICAgaGVhZGVyLm5hbWUgPSBcIkRpYWxvZ3VlIEhlYWRlciBCYXJcIjtcclxuICAgICAgICAgICAgaGVhZGVyLmJhY2tncm91bmQgPSBcIiNjY2NjY2NcIjtcclxuICAgICAgICAgICAgaGVhZGVyLnRoaWNrbmVzcyA9IDA7XHJcbiAgICAgICAgICAgIHBpY2tlclBhbmVsLmFkZENvbnRyb2woaGVhZGVyLCAwLCAwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEhlYWRlciBjbG9zZSBidXR0b25cclxuICAgICAgICAgICAgY29uc3QgY2xvc2VCdXR0b246IEJ1dHRvbiA9IEJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJjbG9zZUJ1dHRvblwiLCBcImFcIik7XHJcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uLmZvbnRGYW1pbHkgPSBcImNvcmVnbHlwaHNcIjtcclxuICAgICAgICAgICAgY29uc3QgaGVhZGVyQ29sb3IzOiBDb2xvcjMgPSBDb2xvcjMuRnJvbUhleFN0cmluZyhoZWFkZXIuYmFja2dyb3VuZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsb3NlSWNvbkNvbG9yID0gbmV3IENvbG9yMygxLjAgLSBoZWFkZXJDb2xvcjMuciwgMS4wIC0gaGVhZGVyQ29sb3IzLmcsIDEuMCAtIGhlYWRlckNvbG9yMy5iKTtcclxuICAgICAgICAgICAgY2xvc2VCdXR0b24uY29sb3IgPSBjbG9zZUljb25Db2xvci50b0hleFN0cmluZygpO1xyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbi5mb250U2l6ZSA9IE1hdGguZmxvb3IocGFyc2VJbnQob3B0aW9ucy5oZWFkZXJIZWlnaHQhKSAqIDAuNik7XHJcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uLnRleHRCbG9jayEudGV4dFZlcnRpY2FsQWxpZ25tZW50ID0gQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbi5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9SSUdIVDtcclxuICAgICAgICAgICAgY2xvc2VCdXR0b24uaGVpZ2h0ID0gY2xvc2VCdXR0b24ud2lkdGggPSBvcHRpb25zLmhlYWRlckhlaWdodDtcclxuICAgICAgICAgICAgY2xvc2VCdXR0b24uYmFja2dyb3VuZCA9IGhlYWRlci5iYWNrZ3JvdW5kO1xyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbi50aGlja25lc3MgPSAwO1xyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbi5wb2ludGVyRG93bkFuaW1hdGlvbiA9ICgpID0+IHt9O1xyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbi5wb2ludGVyVXBBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjbG9zZUJ1dHRvbi5iYWNrZ3JvdW5kID0gaGVhZGVyLmJhY2tncm91bmQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uLnBvaW50ZXJFbnRlckFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNsb3NlQnV0dG9uLmNvbG9yID0gaGVhZGVyLmJhY2tncm91bmQ7XHJcbiAgICAgICAgICAgICAgICBjbG9zZUJ1dHRvbi5iYWNrZ3JvdW5kID0gXCJyZWRcIjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2xvc2VCdXR0b24ucG9pbnRlck91dEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNsb3NlQnV0dG9uLmNvbG9yID0gY2xvc2VJY29uQ29sb3IudG9IZXhTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGNsb3NlQnV0dG9uLmJhY2tncm91bmQgPSBoZWFkZXIuYmFja2dyb3VuZDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2xvc2VCdXR0b24ub25Qb2ludGVyQ2xpY2tPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjbG9zZVBpY2tlcihjdXJyZW50U3dhdGNoLmJhY2tncm91bmQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcGlja2VyUGFuZWwuYWRkQ29udHJvbChjbG9zZUJ1dHRvbiwgMCwgMCk7XHJcblxyXG4gICAgICAgICAgICAvLyBEaWFsb2cgY29udGFpbmVyIGJvZHlcclxuICAgICAgICAgICAgY29uc3QgZGlhbG9nQm9keTogR3JpZCA9IG5ldyBHcmlkKCk7XHJcbiAgICAgICAgICAgIGRpYWxvZ0JvZHkubmFtZSA9IFwiRGlhbG9ndWUgQm9keVwiO1xyXG4gICAgICAgICAgICBkaWFsb2dCb2R5LmJhY2tncm91bmQgPSBidXR0b25CYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZ0JvZHlDb2xzOiBudW1iZXJbXSA9IFswLjQzNzUsIDAuNTYyNV07XHJcbiAgICAgICAgICAgIGRpYWxvZ0JvZHkuYWRkUm93RGVmaW5pdGlvbigxLjAsIGZhbHNlKTtcclxuICAgICAgICAgICAgZGlhbG9nQm9keS5hZGRDb2x1bW5EZWZpbml0aW9uKGRpYWxvZ0JvZHlDb2xzWzBdLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGRpYWxvZ0JvZHkuYWRkQ29sdW1uRGVmaW5pdGlvbihkaWFsb2dCb2R5Q29sc1sxXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBwaWNrZXJQYW5lbC5hZGRDb250cm9sKGRpYWxvZ0JvZHksIDEsIDApO1xyXG5cclxuICAgICAgICAgICAgLy8gUGlja2VyIGdyaWRcclxuICAgICAgICAgICAgY29uc3QgcGlja2VyR3JpZDogR3JpZCA9IG5ldyBHcmlkKCk7XHJcbiAgICAgICAgICAgIHBpY2tlckdyaWQubmFtZSA9IFwiUGlja2VyIEdyaWRcIjtcclxuICAgICAgICAgICAgcGlja2VyR3JpZC5hZGRSb3dEZWZpbml0aW9uKDAuODUsIGZhbHNlKTtcclxuICAgICAgICAgICAgcGlja2VyR3JpZC5hZGRSb3dEZWZpbml0aW9uKDAuMTUsIGZhbHNlKTtcclxuICAgICAgICAgICAgZGlhbG9nQm9keS5hZGRDb250cm9sKHBpY2tlckdyaWQsIDAsIDApO1xyXG5cclxuICAgICAgICAgICAgLy8gIFBpY2tlciBjb250cm9sXHJcbiAgICAgICAgICAgIGNvbnN0IHBpY2tlciA9IG5ldyBDb2xvclBpY2tlcigpO1xyXG4gICAgICAgICAgICBwaWNrZXIubmFtZSA9IFwiR1VJIENvbG9yIFBpY2tlclwiO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waWNrZXJIZWlnaHQgPCBvcHRpb25zLnBpY2tlcldpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICBwaWNrZXIud2lkdGggPSAwLjg5O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGlja2VyLmhlaWdodCA9IDAuODk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGlja2VyLnZhbHVlID0gQ29sb3IzLkZyb21IZXhTdHJpbmcob3B0aW9ucy5sYXN0Q29sb3IpO1xyXG4gICAgICAgICAgICBwaWNrZXIuaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG4gICAgICAgICAgICBwaWNrZXIudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcbiAgICAgICAgICAgIHBpY2tlci5vblBvaW50ZXJEb3duT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRmllbGQgPSBwaWNrZXIubmFtZSE7XHJcbiAgICAgICAgICAgICAgICBsYXN0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGVkaXRTd2F0Y2hlcyhmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwaWNrZXIub25WYWx1ZUNoYW5nZWRPYnNlcnZhYmxlLmFkZChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHZhbHVlIGlzIGEgY29sb3IzXHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmllbGQgPT0gcGlja2VyLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZXModmFsdWUsIHBpY2tlci5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHBpY2tlckdyaWQuYWRkQ29udHJvbChwaWNrZXIsIDAsIDApO1xyXG5cclxuICAgICAgICAgICAgLy8gUGlja2VyIGJvZHkgcmlnaHQgcXVhcmFudFxyXG4gICAgICAgICAgICBjb25zdCBwaWNrZXJCb2R5UmlnaHQ6IEdyaWQgPSBuZXcgR3JpZCgpO1xyXG4gICAgICAgICAgICBwaWNrZXJCb2R5UmlnaHQubmFtZSA9IFwiRGlhbG9ndWUgUmlnaHQgSGFsZlwiO1xyXG4gICAgICAgICAgICBwaWNrZXJCb2R5UmlnaHQuaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgICAgICAgICAgY29uc3QgcGlja2VyQm9keVJpZ2h0Um93czogbnVtYmVyW10gPSBbMC41MTQsIDAuNDg2XTtcclxuICAgICAgICAgICAgcGlja2VyQm9keVJpZ2h0LmFkZFJvd0RlZmluaXRpb24ocGlja2VyQm9keVJpZ2h0Um93c1swXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBwaWNrZXJCb2R5UmlnaHQuYWRkUm93RGVmaW5pdGlvbihwaWNrZXJCb2R5UmlnaHRSb3dzWzFdLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGRpYWxvZ0JvZHkuYWRkQ29udHJvbChwaWNrZXJCb2R5UmlnaHQsIDEsIDEpO1xyXG5cclxuICAgICAgICAgICAgLy8gUGlja2VyIGNvbnRhaW5lciBzd2F0Y2hlcyBhbmQgYnV0dG9uc1xyXG4gICAgICAgICAgICBjb25zdCBwaWNrZXJTd2F0Y2hlc0J1dHRvbnM6IEdyaWQgPSBuZXcgR3JpZCgpO1xyXG4gICAgICAgICAgICBwaWNrZXJTd2F0Y2hlc0J1dHRvbnMubmFtZSA9IFwiU3dhdGNoZXMgYW5kIEJ1dHRvbnNcIjtcclxuICAgICAgICAgICAgY29uc3QgcGlja2VyQnV0dG9uc0NvbDogbnVtYmVyW10gPSBbMC40MTcsIDAuNTgzXTtcclxuICAgICAgICAgICAgcGlja2VyU3dhdGNoZXNCdXR0b25zLmFkZFJvd0RlZmluaXRpb24oMS4wLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHBpY2tlclN3YXRjaGVzQnV0dG9ucy5hZGRDb2x1bW5EZWZpbml0aW9uKHBpY2tlckJ1dHRvbnNDb2xbMF0sIGZhbHNlKTtcclxuICAgICAgICAgICAgcGlja2VyU3dhdGNoZXNCdXR0b25zLmFkZENvbHVtbkRlZmluaXRpb24ocGlja2VyQnV0dG9uc0NvbFsxXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBwaWNrZXJCb2R5UmlnaHQuYWRkQ29udHJvbChwaWNrZXJTd2F0Y2hlc0J1dHRvbnMsIDAsIDApO1xyXG5cclxuICAgICAgICAgICAgLy8gUGlja2VyIFN3YXRjaGVzIHF1YWRyYW50XHJcbiAgICAgICAgICAgIGNvbnN0IHBpY2tlclN3YXRjaGVzOiBHcmlkID0gbmV3IEdyaWQoKTtcclxuICAgICAgICAgICAgcGlja2VyU3dhdGNoZXMubmFtZSA9IFwiTmV3IGFuZCBDdXJyZW50IFN3YXRjaGVzXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IHBpY2tlU3dhdGNoZXNSb3dzOiBudW1iZXJbXSA9IFswLjA0LCAwLjE2LCAwLjY0LCAwLjE2XTtcclxuICAgICAgICAgICAgcGlja2VyU3dhdGNoZXMuYWRkUm93RGVmaW5pdGlvbihwaWNrZVN3YXRjaGVzUm93c1swXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBwaWNrZXJTd2F0Y2hlcy5hZGRSb3dEZWZpbml0aW9uKHBpY2tlU3dhdGNoZXNSb3dzWzFdLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHBpY2tlclN3YXRjaGVzLmFkZFJvd0RlZmluaXRpb24ocGlja2VTd2F0Y2hlc1Jvd3NbMl0sIGZhbHNlKTtcclxuICAgICAgICAgICAgcGlja2VyU3dhdGNoZXMuYWRkUm93RGVmaW5pdGlvbihwaWNrZVN3YXRjaGVzUm93c1szXSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBwaWNrZXJTd2F0Y2hlc0J1dHRvbnMuYWRkQ29udHJvbChwaWNrZXJTd2F0Y2hlcywgMCwgMCk7XHJcblxyXG4gICAgICAgICAgICAvLyBBY3RpdmUgc3dhdGNoZXNcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlU3dhdGNoZXM6IEdyaWQgPSBuZXcgR3JpZCgpO1xyXG4gICAgICAgICAgICBhY3RpdmVTd2F0Y2hlcy5uYW1lID0gXCJBY3RpdmUgU3dhdGNoZXNcIjtcclxuICAgICAgICAgICAgYWN0aXZlU3dhdGNoZXMud2lkdGggPSAwLjY3O1xyXG4gICAgICAgICAgICBhY3RpdmVTd2F0Y2hlcy5hZGRSb3dEZWZpbml0aW9uKDAuNSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBhY3RpdmVTd2F0Y2hlcy5hZGRSb3dEZWZpbml0aW9uKDAuNSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBwaWNrZXJTd2F0Y2hlcy5hZGRDb250cm9sKGFjdGl2ZVN3YXRjaGVzLCAyLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsV2lkdGg6IG51bWJlciA9IE1hdGguZmxvb3IocGFyc2VJbnQob3B0aW9ucy5waWNrZXJXaWR0aCkgKiBkaWFsb2dCb2R5Q29sc1sxXSAqIHBpY2tlckJ1dHRvbnNDb2xbMF0gKiAwLjExKTtcclxuICAgICAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQ6IG51bWJlciA9IE1hdGguZmxvb3IocGFyc2VJbnQob3B0aW9ucy5waWNrZXJIZWlnaHQpICogcGlja2VyUGFuZWxSb3dzWzFdICogcGlja2VyQm9keVJpZ2h0Um93c1swXSAqIHBpY2tlU3dhdGNoZXNSb3dzWzFdICogMC41KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBsYWJlbFRleHRTaXplOiBudW1iZXI7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBpY2tlcldpZHRoID4gb3B0aW9ucy5waWNrZXJIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsVGV4dFNpemUgPSBsYWJlbEhlaWdodDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsVGV4dFNpemUgPSBsYWJlbFdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE5ldyBjb2xvciBzd2F0Y2ggYW5kIHByZXZpb3VzIGNvbG9yIGJ1dHRvblxyXG4gICAgICAgICAgICBjb25zdCBuZXdUZXh0OiBUZXh0QmxvY2sgPSBuZXcgVGV4dEJsb2NrKCk7XHJcbiAgICAgICAgICAgIG5ld1RleHQudGV4dCA9IFwibmV3XCI7XHJcbiAgICAgICAgICAgIG5ld1RleHQubmFtZSA9IFwiTmV3IENvbG9yIExhYmVsXCI7XHJcbiAgICAgICAgICAgIG5ld1RleHQuY29sb3IgPSBidXR0b25Db2xvcjtcclxuICAgICAgICAgICAgbmV3VGV4dC5mb250U2l6ZSA9IGxhYmVsVGV4dFNpemU7XHJcbiAgICAgICAgICAgIHBpY2tlclN3YXRjaGVzLmFkZENvbnRyb2wobmV3VGV4dCwgMSwgMCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBuZXdTd2F0Y2ggPSBuZXcgUmVjdGFuZ2xlKCk7XHJcbiAgICAgICAgICAgIG5ld1N3YXRjaC5uYW1lID0gXCJOZXcgQ29sb3IgU3dhdGNoXCI7XHJcbiAgICAgICAgICAgIG5ld1N3YXRjaC5iYWNrZ3JvdW5kID0gb3B0aW9ucy5sYXN0Q29sb3I7XHJcbiAgICAgICAgICAgIG5ld1N3YXRjaC50aGlja25lc3MgPSAwO1xyXG4gICAgICAgICAgICBhY3RpdmVTd2F0Y2hlcy5hZGRDb250cm9sKG5ld1N3YXRjaCwgMCwgMCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U3dhdGNoOiBCdXR0b24gPSBCdXR0b24uQ3JlYXRlU2ltcGxlQnV0dG9uKFwiY3VycmVudFN3YXRjaFwiLCBcIlwiKTtcclxuICAgICAgICAgICAgY3VycmVudFN3YXRjaC5iYWNrZ3JvdW5kID0gb3B0aW9ucy5sYXN0Q29sb3I7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTd2F0Y2gudGhpY2tuZXNzID0gMDtcclxuICAgICAgICAgICAgY3VycmVudFN3YXRjaC5vblBvaW50ZXJDbGlja09ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJldmVydENvbG9yID0gQ29sb3IzLkZyb21IZXhTdHJpbmcoY3VycmVudFN3YXRjaC5iYWNrZ3JvdW5kKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlcyhyZXZlcnRDb2xvciwgY3VycmVudFN3YXRjaC5uYW1lISk7XHJcbiAgICAgICAgICAgICAgICBlZGl0U3dhdGNoZXMoZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY3VycmVudFN3YXRjaC5wb2ludGVyRG93bkFuaW1hdGlvbiA9ICgpID0+IHt9O1xyXG4gICAgICAgICAgICBjdXJyZW50U3dhdGNoLnBvaW50ZXJVcEFuaW1hdGlvbiA9ICgpID0+IHt9O1xyXG4gICAgICAgICAgICBjdXJyZW50U3dhdGNoLnBvaW50ZXJFbnRlckFuaW1hdGlvbiA9ICgpID0+IHt9O1xyXG4gICAgICAgICAgICBjdXJyZW50U3dhdGNoLnBvaW50ZXJPdXRBbmltYXRpb24gPSAoKSA9PiB7fTtcclxuICAgICAgICAgICAgYWN0aXZlU3dhdGNoZXMuYWRkQ29udHJvbChjdXJyZW50U3dhdGNoLCAxLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHN3YXRjaE91dGxpbmU6IFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoKTtcclxuICAgICAgICAgICAgc3dhdGNoT3V0bGluZS5uYW1lID0gXCJTd2F0Y2ggT3V0bGluZVwiO1xyXG4gICAgICAgICAgICBzd2F0Y2hPdXRsaW5lLndpZHRoID0gMC42NztcclxuICAgICAgICAgICAgc3dhdGNoT3V0bGluZS50aGlja25lc3MgPSAyO1xyXG4gICAgICAgICAgICBzd2F0Y2hPdXRsaW5lLmNvbG9yID0gY3VycmVudFN3YXRjaGVzT3V0bGluZUNvbG9yO1xyXG4gICAgICAgICAgICBzd2F0Y2hPdXRsaW5lLmlzSGl0VGVzdFZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgcGlja2VyU3dhdGNoZXMuYWRkQ29udHJvbChzd2F0Y2hPdXRsaW5lLCAyLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUZXh0OiBUZXh0QmxvY2sgPSBuZXcgVGV4dEJsb2NrKCk7XHJcbiAgICAgICAgICAgIGN1cnJlbnRUZXh0Lm5hbWUgPSBcIkN1cnJlbnQgQ29sb3IgTGFiZWxcIjtcclxuICAgICAgICAgICAgY3VycmVudFRleHQudGV4dCA9IFwiY3VycmVudFwiO1xyXG4gICAgICAgICAgICBjdXJyZW50VGV4dC5jb2xvciA9IGJ1dHRvbkNvbG9yO1xyXG4gICAgICAgICAgICBjdXJyZW50VGV4dC5mb250U2l6ZSA9IGxhYmVsVGV4dFNpemU7XHJcbiAgICAgICAgICAgIHBpY2tlclN3YXRjaGVzLmFkZENvbnRyb2woY3VycmVudFRleHQsIDMsIDApO1xyXG5cclxuICAgICAgICAgICAgLy8gQnV0dG9ucyBncmlkXHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkdyaWQ6IEdyaWQgPSBuZXcgR3JpZCgpO1xyXG4gICAgICAgICAgICBidXR0b25HcmlkLm5hbWUgPSBcIkJ1dHRvbiBHcmlkXCI7XHJcbiAgICAgICAgICAgIGJ1dHRvbkdyaWQuaGVpZ2h0ID0gMC44O1xyXG4gICAgICAgICAgICBjb25zdCBidXR0b25HcmlkUm93czogbnVtYmVyID0gMSAvIDM7XHJcbiAgICAgICAgICAgIGJ1dHRvbkdyaWQuYWRkUm93RGVmaW5pdGlvbihidXR0b25HcmlkUm93cywgZmFsc2UpO1xyXG4gICAgICAgICAgICBidXR0b25HcmlkLmFkZFJvd0RlZmluaXRpb24oYnV0dG9uR3JpZFJvd3MsIGZhbHNlKTtcclxuICAgICAgICAgICAgYnV0dG9uR3JpZC5hZGRSb3dEZWZpbml0aW9uKGJ1dHRvbkdyaWRSb3dzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHBpY2tlclN3YXRjaGVzQnV0dG9ucy5hZGRDb250cm9sKGJ1dHRvbkdyaWQsIDAsIDEpO1xyXG5cclxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHBpeGVsIHdpZHRoIGFuZCBoZWlnaHQgZm9yIGFsbCBidXR0b25zIGZyb20gb3ZlcmFsbCBwYW5lbCBkaW1lbnNpb25zXHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbldpZHRoID0gTWF0aC5mbG9vcihwYXJzZUludChvcHRpb25zLnBpY2tlcldpZHRoKSAqIGRpYWxvZ0JvZHlDb2xzWzFdICogcGlja2VyQnV0dG9uc0NvbFsxXSAqIDAuNjcpLnRvU3RyaW5nKCkgKyBcInB4XCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkhlaWdodCA9XHJcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KG9wdGlvbnMucGlja2VySGVpZ2h0KSAqIHBpY2tlclBhbmVsUm93c1sxXSAqIHBpY2tlckJvZHlSaWdodFJvd3NbMF0gKiAocGFyc2VGbG9hdChidXR0b25HcmlkLmhlaWdodC50b1N0cmluZygpKSAvIDEwMCkgKiBidXR0b25HcmlkUm93cyAqIDAuN1xyXG4gICAgICAgICAgICAgICAgKS50b1N0cmluZygpICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGJ1dHRvbiB0eXBlIHNpemVcclxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQoYnV0dG9uV2lkdGgpID4gcGFyc2VGbG9hdChidXR0b25IZWlnaHQpKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25Gb250U2l6ZSA9IE1hdGguZmxvb3IocGFyc2VGbG9hdChidXR0b25IZWlnaHQpICogMC40NSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25Gb250U2l6ZSA9IE1hdGguZmxvb3IocGFyc2VGbG9hdChidXR0b25XaWR0aCkgKiAwLjExKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUGFuZWwgQnV0dG9uc1xyXG4gICAgICAgICAgICBjb25zdCBidXRPSzogQnV0dG9uID0gQnV0dG9uLkNyZWF0ZVNpbXBsZUJ1dHRvbihcImJ1dE9LXCIsIFwiT0tcIik7XHJcbiAgICAgICAgICAgIGJ1dE9LLndpZHRoID0gYnV0dG9uV2lkdGg7XHJcbiAgICAgICAgICAgIGJ1dE9LLmhlaWdodCA9IGJ1dHRvbkhlaWdodDtcclxuICAgICAgICAgICAgYnV0T0sudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcbiAgICAgICAgICAgIGJ1dE9LLnRoaWNrbmVzcyA9IDI7XHJcbiAgICAgICAgICAgIGJ1dE9LLmNvbG9yID0gYnV0dG9uQ29sb3I7XHJcbiAgICAgICAgICAgIGJ1dE9LLmZvbnRTaXplID0gYnV0dG9uRm9udFNpemU7XHJcbiAgICAgICAgICAgIGJ1dE9LLmJhY2tncm91bmQgPSBidXR0b25CYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgIGJ1dE9LLm9uUG9pbnRlckVudGVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYnV0T0suYmFja2dyb3VuZCA9IGJ1dHRvbkJhY2tncm91bmRIb3ZlckNvbG9yO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnV0T0sub25Qb2ludGVyT3V0T2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYnV0T0suYmFja2dyb3VuZCA9IGJ1dHRvbkJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJ1dE9LLnBvaW50ZXJEb3duQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYnV0T0suYmFja2dyb3VuZCA9IGJ1dHRvbkJhY2tncm91bmRDbGlja0NvbG9yO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBidXRPSy5wb2ludGVyVXBBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBidXRPSy5iYWNrZ3JvdW5kID0gYnV0dG9uQmFja2dyb3VuZEhvdmVyQ29sb3I7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJ1dE9LLm9uUG9pbnRlckNsaWNrT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWRpdFN3YXRjaGVzKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGNsb3NlUGlja2VyKG5ld1N3YXRjaC5iYWNrZ3JvdW5kKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJ1dHRvbkdyaWQuYWRkQ29udHJvbChidXRPSywgMCwgMCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBidXRDYW5jZWw6IEJ1dHRvbiA9IEJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJidXRDYW5jZWxcIiwgXCJDYW5jZWxcIik7XHJcbiAgICAgICAgICAgIGJ1dENhbmNlbC53aWR0aCA9IGJ1dHRvbldpZHRoO1xyXG4gICAgICAgICAgICBidXRDYW5jZWwuaGVpZ2h0ID0gYnV0dG9uSGVpZ2h0O1xyXG4gICAgICAgICAgICBidXRDYW5jZWwudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcbiAgICAgICAgICAgIGJ1dENhbmNlbC50aGlja25lc3MgPSAyO1xyXG4gICAgICAgICAgICBidXRDYW5jZWwuY29sb3IgPSBidXR0b25Db2xvcjtcclxuICAgICAgICAgICAgYnV0Q2FuY2VsLmZvbnRTaXplID0gYnV0dG9uRm9udFNpemU7XHJcbiAgICAgICAgICAgIGJ1dENhbmNlbC5iYWNrZ3JvdW5kID0gYnV0dG9uQmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgICBidXRDYW5jZWwub25Qb2ludGVyRW50ZXJPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBidXRDYW5jZWwuYmFja2dyb3VuZCA9IGJ1dHRvbkJhY2tncm91bmRIb3ZlckNvbG9yO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnV0Q2FuY2VsLm9uUG9pbnRlck91dE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1dENhbmNlbC5iYWNrZ3JvdW5kID0gYnV0dG9uQmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnV0Q2FuY2VsLnBvaW50ZXJEb3duQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYnV0Q2FuY2VsLmJhY2tncm91bmQgPSBidXR0b25CYWNrZ3JvdW5kQ2xpY2tDb2xvcjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYnV0Q2FuY2VsLnBvaW50ZXJVcEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1dENhbmNlbC5iYWNrZ3JvdW5kID0gYnV0dG9uQmFja2dyb3VuZEhvdmVyQ29sb3I7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJ1dENhbmNlbC5vblBvaW50ZXJDbGlja09ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGVkaXRTd2F0Y2hlcyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBjbG9zZVBpY2tlcihjdXJyZW50U3dhdGNoLmJhY2tncm91bmQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnV0dG9uR3JpZC5hZGRDb250cm9sKGJ1dENhbmNlbCwgMSwgMCk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycykge1xyXG4gICAgICAgICAgICAgICAgYnV0U2F2ZSA9IEJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJidXRTYXZlXCIsIFwiU2F2ZVwiKTtcclxuICAgICAgICAgICAgICAgIGJ1dFNhdmUud2lkdGggPSBidXR0b25XaWR0aDtcclxuICAgICAgICAgICAgICAgIGJ1dFNhdmUuaGVpZ2h0ID0gYnV0dG9uSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYnV0U2F2ZS52ZXJ0aWNhbEFsaWdubWVudCA9IENvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuICAgICAgICAgICAgICAgIGJ1dFNhdmUudGhpY2tuZXNzID0gMjtcclxuICAgICAgICAgICAgICAgIGJ1dFNhdmUuZm9udFNpemUgPSBidXR0b25Gb250U2l6ZTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVkQ29sb3JzLmxlbmd0aCA8IG9wdGlvbnMuc3dhdGNoTGltaXQhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0U2F2ZS5jb2xvciA9IGJ1dHRvbkNvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dFNhdmUuYmFja2dyb3VuZCA9IGJ1dHRvbkJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUJ1dHRvbihidXRTYXZlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJ1dFNhdmUub25Qb2ludGVyRW50ZXJPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZWRDb2xvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZWRDb2xvcnMubGVuZ3RoIDwgb3B0aW9ucy5zd2F0Y2hMaW1pdCEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dFNhdmUuYmFja2dyb3VuZCA9IGJ1dHRvbkJhY2tncm91bmRIb3ZlckNvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBidXRTYXZlLm9uUG9pbnRlck91dE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycy5sZW5ndGggPCBvcHRpb25zLnN3YXRjaExpbWl0ISkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0U2F2ZS5iYWNrZ3JvdW5kID0gYnV0dG9uQmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBidXRTYXZlLnBvaW50ZXJEb3duQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVkQ29sb3JzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVkQ29sb3JzLmxlbmd0aCA8IG9wdGlvbnMuc3dhdGNoTGltaXQhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXRTYXZlLmJhY2tncm91bmQgPSBidXR0b25CYWNrZ3JvdW5kQ2xpY2tDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBidXRTYXZlLnBvaW50ZXJVcEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycy5sZW5ndGggPCBvcHRpb25zLnN3YXRjaExpbWl0ISkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0U2F2ZS5iYWNrZ3JvdW5kID0gYnV0dG9uQmFja2dyb3VuZEhvdmVyQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnV0U2F2ZS5vblBvaW50ZXJDbGlja09ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RWRpdEJ1dHRvblZpc2liaWxpdHkodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZWRDb2xvcnMubGVuZ3RoIDwgb3B0aW9ucy5zd2F0Y2hMaW1pdCEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVN3YXRjaGVzKG5ld1N3YXRjaC5iYWNrZ3JvdW5kLCBidXRTYXZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0U3dhdGNoZXMoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZWRDb2xvcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEVkaXRCdXR0b25WaXNpYmlsaXR5KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnV0dG9uR3JpZC5hZGRDb250cm9sKGJ1dFNhdmUsIDIsIDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBQaWNrZXIgY29sb3IgdmFsdWVzIGlucHV0XHJcbiAgICAgICAgICAgIGNvbnN0IHBpY2tlckNvbG9yVmFsdWVzOiBHcmlkID0gbmV3IEdyaWQoKTtcclxuICAgICAgICAgICAgcGlja2VyQ29sb3JWYWx1ZXMubmFtZSA9IFwiRGlhbG9nIExvd2VyIFJpZ2h0XCI7XHJcbiAgICAgICAgICAgIHBpY2tlckNvbG9yVmFsdWVzLmFkZFJvd0RlZmluaXRpb24oMC4wMiwgZmFsc2UpO1xyXG4gICAgICAgICAgICBwaWNrZXJDb2xvclZhbHVlcy5hZGRSb3dEZWZpbml0aW9uKDAuNjMsIGZhbHNlKTtcclxuICAgICAgICAgICAgcGlja2VyQ29sb3JWYWx1ZXMuYWRkUm93RGVmaW5pdGlvbigwLjIxLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHBpY2tlckNvbG9yVmFsdWVzLmFkZFJvd0RlZmluaXRpb24oMC4xNCwgZmFsc2UpO1xyXG4gICAgICAgICAgICBwaWNrZXJCb2R5UmlnaHQuYWRkQ29udHJvbChwaWNrZXJDb2xvclZhbHVlcywgMSwgMCk7XHJcblxyXG4gICAgICAgICAgICAvLyBSR0IgdmFsdWVzIHRleHQgYm94ZXNcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbG9yID0gQ29sb3IzLkZyb21IZXhTdHJpbmcob3B0aW9ucy5sYXN0Q29sb3IpO1xyXG4gICAgICAgICAgICBjb25zdCByZ2JWYWx1ZXNRdWFkcmFudDogR3JpZCA9IG5ldyBHcmlkKCk7XHJcbiAgICAgICAgICAgIHJnYlZhbHVlc1F1YWRyYW50Lm5hbWUgPSBcIlJHQiBWYWx1ZXNcIjtcclxuICAgICAgICAgICAgcmdiVmFsdWVzUXVhZHJhbnQud2lkdGggPSAwLjgyO1xyXG4gICAgICAgICAgICByZ2JWYWx1ZXNRdWFkcmFudC52ZXJ0aWNhbEFsaWdubWVudCA9IENvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuICAgICAgICAgICAgcmdiVmFsdWVzUXVhZHJhbnQuYWRkUm93RGVmaW5pdGlvbigxIC8gMywgZmFsc2UpO1xyXG4gICAgICAgICAgICByZ2JWYWx1ZXNRdWFkcmFudC5hZGRSb3dEZWZpbml0aW9uKDEgLyAzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHJnYlZhbHVlc1F1YWRyYW50LmFkZFJvd0RlZmluaXRpb24oMSAvIDMsIGZhbHNlKTtcclxuICAgICAgICAgICAgcmdiVmFsdWVzUXVhZHJhbnQuYWRkQ29sdW1uRGVmaW5pdGlvbigwLjEsIGZhbHNlKTtcclxuICAgICAgICAgICAgcmdiVmFsdWVzUXVhZHJhbnQuYWRkQ29sdW1uRGVmaW5pdGlvbigwLjIsIGZhbHNlKTtcclxuICAgICAgICAgICAgcmdiVmFsdWVzUXVhZHJhbnQuYWRkQ29sdW1uRGVmaW5pdGlvbigwLjcsIGZhbHNlKTtcclxuICAgICAgICAgICAgcGlja2VyQ29sb3JWYWx1ZXMuYWRkQ29udHJvbChyZ2JWYWx1ZXNRdWFkcmFudCwgMSwgMCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0RmllbGRMYWJlbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsVGV4dDogVGV4dEJsb2NrID0gbmV3IFRleHRCbG9jaygpO1xyXG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0LnRleHQgPSBpbnB1dEZpZWxkTGFiZWxzW2ldO1xyXG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0LmNvbG9yID0gYnV0dG9uQ29sb3I7XHJcbiAgICAgICAgICAgICAgICBsYWJlbFRleHQuZm9udFNpemUgPSBidXR0b25Gb250U2l6ZTtcclxuICAgICAgICAgICAgICAgIHJnYlZhbHVlc1F1YWRyYW50LmFkZENvbnRyb2wobGFiZWxUZXh0LCBpLCAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5wdXQgZmllbGRzIGZvciBSR0IgdmFsdWVzXHJcbiAgICAgICAgICAgIGNvbnN0IHJWYWxJbnQgPSBuZXcgSW5wdXRUZXh0KCk7XHJcbiAgICAgICAgICAgIHJWYWxJbnQud2lkdGggPSAwLjgzO1xyXG4gICAgICAgICAgICByVmFsSW50LmhlaWdodCA9IDAuNzI7XHJcbiAgICAgICAgICAgIHJWYWxJbnQubmFtZSA9IFwickludEZpZWxkXCI7XHJcbiAgICAgICAgICAgIHJWYWxJbnQuZm9udFNpemUgPSBidXR0b25Gb250U2l6ZTtcclxuICAgICAgICAgICAgclZhbEludC50ZXh0ID0gKGN1cnJlbnRDb2xvci5yICogMjU1KS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICByVmFsSW50LmNvbG9yID0gaW5wdXRUZXh0Q29sb3I7XHJcbiAgICAgICAgICAgIHJWYWxJbnQuYmFja2dyb3VuZCA9IGlucHV0VGV4dEJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICAgICAgclZhbEludC5vbkZvY3VzT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRmllbGQgPSByVmFsSW50Lm5hbWUhO1xyXG4gICAgICAgICAgICAgICAgbGFzdFZhbCA9IHJWYWxJbnQudGV4dDtcclxuICAgICAgICAgICAgICAgIGVkaXRTd2F0Y2hlcyhmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByVmFsSW50Lm9uQmx1ck9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyVmFsSW50LnRleHQgPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJWYWxJbnQudGV4dCA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlSW50KHJWYWxJbnQsIFwiclwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVGaWVsZCA9PSByVmFsSW50Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVGaWVsZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByVmFsSW50Lm9uVGV4dENoYW5nZWRPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmllbGQgPT0gclZhbEludC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSW50KHJWYWxJbnQsIFwiclwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJnYlZhbHVlc1F1YWRyYW50LmFkZENvbnRyb2woclZhbEludCwgMCwgMSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBnVmFsSW50ID0gbmV3IElucHV0VGV4dCgpO1xyXG4gICAgICAgICAgICBnVmFsSW50LndpZHRoID0gMC44MztcclxuICAgICAgICAgICAgZ1ZhbEludC5oZWlnaHQgPSAwLjcyO1xyXG4gICAgICAgICAgICBnVmFsSW50Lm5hbWUgPSBcImdJbnRGaWVsZFwiO1xyXG4gICAgICAgICAgICBnVmFsSW50LmZvbnRTaXplID0gYnV0dG9uRm9udFNpemU7XHJcbiAgICAgICAgICAgIGdWYWxJbnQudGV4dCA9IChjdXJyZW50Q29sb3IuZyAqIDI1NSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgZ1ZhbEludC5jb2xvciA9IGlucHV0VGV4dENvbG9yO1xyXG4gICAgICAgICAgICBnVmFsSW50LmJhY2tncm91bmQgPSBpbnB1dFRleHRCYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgIGdWYWxJbnQub25Gb2N1c09ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUZpZWxkID0gZ1ZhbEludC5uYW1lITtcclxuICAgICAgICAgICAgICAgIGxhc3RWYWwgPSBnVmFsSW50LnRleHQ7XHJcbiAgICAgICAgICAgICAgICBlZGl0U3dhdGNoZXMoZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZ1ZhbEludC5vbkJsdXJPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ1ZhbEludC50ZXh0ID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBnVmFsSW50LnRleHQgPSBcIjBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUludChnVmFsSW50LCBcImdcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmllbGQgPT0gZ1ZhbEludC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlRmllbGQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZ1ZhbEludC5vblRleHRDaGFuZ2VkT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUZpZWxkID09IGdWYWxJbnQubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUludChnVmFsSW50LCBcImdcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZ2JWYWx1ZXNRdWFkcmFudC5hZGRDb250cm9sKGdWYWxJbnQsIDEsIDEpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYlZhbEludCA9IG5ldyBJbnB1dFRleHQoKTtcclxuICAgICAgICAgICAgYlZhbEludC53aWR0aCA9IDAuODM7XHJcbiAgICAgICAgICAgIGJWYWxJbnQuaGVpZ2h0ID0gMC43MjtcclxuICAgICAgICAgICAgYlZhbEludC5uYW1lID0gXCJiSW50RmllbGRcIjtcclxuICAgICAgICAgICAgYlZhbEludC5mb250U2l6ZSA9IGJ1dHRvbkZvbnRTaXplO1xyXG4gICAgICAgICAgICBiVmFsSW50LnRleHQgPSAoY3VycmVudENvbG9yLmIgKiAyNTUpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGJWYWxJbnQuY29sb3IgPSBpbnB1dFRleHRDb2xvcjtcclxuICAgICAgICAgICAgYlZhbEludC5iYWNrZ3JvdW5kID0gaW5wdXRUZXh0QmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgICBiVmFsSW50Lm9uRm9jdXNPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVGaWVsZCA9IGJWYWxJbnQubmFtZSE7XHJcbiAgICAgICAgICAgICAgICBsYXN0VmFsID0gYlZhbEludC50ZXh0O1xyXG4gICAgICAgICAgICAgICAgZWRpdFN3YXRjaGVzKGZhbHNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJWYWxJbnQub25CbHVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJWYWxJbnQudGV4dCA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYlZhbEludC50ZXh0ID0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVJbnQoYlZhbEludCwgXCJiXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUZpZWxkID09IGJWYWxJbnQubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUZpZWxkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJWYWxJbnQub25UZXh0Q2hhbmdlZE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVGaWVsZCA9PSBiVmFsSW50Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVJbnQoYlZhbEludCwgXCJiXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmdiVmFsdWVzUXVhZHJhbnQuYWRkQ29udHJvbChiVmFsSW50LCAyLCAxKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJWYWxEZWMgPSBuZXcgSW5wdXRUZXh0KCk7XHJcbiAgICAgICAgICAgIHJWYWxEZWMud2lkdGggPSAwLjk1O1xyXG4gICAgICAgICAgICByVmFsRGVjLmhlaWdodCA9IDAuNzI7XHJcbiAgICAgICAgICAgIHJWYWxEZWMubmFtZSA9IFwickRlY0ZpZWxkXCI7XHJcbiAgICAgICAgICAgIHJWYWxEZWMuZm9udFNpemUgPSBidXR0b25Gb250U2l6ZTtcclxuICAgICAgICAgICAgclZhbERlYy50ZXh0ID0gY3VycmVudENvbG9yLnIudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgclZhbERlYy5jb2xvciA9IGlucHV0VGV4dENvbG9yO1xyXG4gICAgICAgICAgICByVmFsRGVjLmJhY2tncm91bmQgPSBpbnB1dFRleHRCYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgIHJWYWxEZWMub25Gb2N1c09ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUZpZWxkID0gclZhbERlYy5uYW1lITtcclxuICAgICAgICAgICAgICAgIGxhc3RWYWwgPSByVmFsRGVjLnRleHQ7XHJcbiAgICAgICAgICAgICAgICBlZGl0U3dhdGNoZXMoZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgclZhbERlYy5vbkJsdXJPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChyVmFsRGVjLnRleHQpID09IDAgfHwgclZhbERlYy50ZXh0ID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByVmFsRGVjLnRleHQgPSBcIjBcIjtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVGbG9hdChyVmFsRGVjLCBcInJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmllbGQgPT0gclZhbERlYy5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlRmllbGQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgclZhbERlYy5vblRleHRDaGFuZ2VkT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUZpZWxkID09IHJWYWxEZWMubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUZsb2F0KHJWYWxEZWMsIFwiclwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJnYlZhbHVlc1F1YWRyYW50LmFkZENvbnRyb2woclZhbERlYywgMCwgMik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBnVmFsRGVjID0gbmV3IElucHV0VGV4dCgpO1xyXG4gICAgICAgICAgICBnVmFsRGVjLndpZHRoID0gMC45NTtcclxuICAgICAgICAgICAgZ1ZhbERlYy5oZWlnaHQgPSAwLjcyO1xyXG4gICAgICAgICAgICBnVmFsRGVjLm5hbWUgPSBcImdEZWNGaWVsZFwiO1xyXG4gICAgICAgICAgICBnVmFsRGVjLmZvbnRTaXplID0gYnV0dG9uRm9udFNpemU7XHJcbiAgICAgICAgICAgIGdWYWxEZWMudGV4dCA9IGN1cnJlbnRDb2xvci5nLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGdWYWxEZWMuY29sb3IgPSBpbnB1dFRleHRDb2xvcjtcclxuICAgICAgICAgICAgZ1ZhbERlYy5iYWNrZ3JvdW5kID0gaW5wdXRUZXh0QmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgICBnVmFsRGVjLm9uRm9jdXNPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVGaWVsZCA9IGdWYWxEZWMubmFtZSE7XHJcbiAgICAgICAgICAgICAgICBsYXN0VmFsID0gZ1ZhbERlYy50ZXh0O1xyXG4gICAgICAgICAgICAgICAgZWRpdFN3YXRjaGVzKGZhbHNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGdWYWxEZWMub25CbHVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQoZ1ZhbERlYy50ZXh0KSA9PSAwIHx8IGdWYWxEZWMudGV4dCA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ1ZhbERlYy50ZXh0ID0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmxvYXQoZ1ZhbERlYywgXCJnXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUZpZWxkID09IGdWYWxEZWMubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUZpZWxkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGdWYWxEZWMub25UZXh0Q2hhbmdlZE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVGaWVsZCA9PSBnVmFsRGVjLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVGbG9hdChnVmFsRGVjLCBcImdcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZ2JWYWx1ZXNRdWFkcmFudC5hZGRDb250cm9sKGdWYWxEZWMsIDEsIDIpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYlZhbERlYyA9IG5ldyBJbnB1dFRleHQoKTtcclxuICAgICAgICAgICAgYlZhbERlYy53aWR0aCA9IDAuOTU7XHJcbiAgICAgICAgICAgIGJWYWxEZWMuaGVpZ2h0ID0gMC43MjtcclxuICAgICAgICAgICAgYlZhbERlYy5uYW1lID0gXCJiRGVjRmllbGRcIjtcclxuICAgICAgICAgICAgYlZhbERlYy5mb250U2l6ZSA9IGJ1dHRvbkZvbnRTaXplO1xyXG4gICAgICAgICAgICBiVmFsRGVjLnRleHQgPSBjdXJyZW50Q29sb3IuYi50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBiVmFsRGVjLmNvbG9yID0gaW5wdXRUZXh0Q29sb3I7XHJcbiAgICAgICAgICAgIGJWYWxEZWMuYmFja2dyb3VuZCA9IGlucHV0VGV4dEJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICAgICAgYlZhbERlYy5vbkZvY3VzT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRmllbGQgPSBiVmFsRGVjLm5hbWUhO1xyXG4gICAgICAgICAgICAgICAgbGFzdFZhbCA9IGJWYWxEZWMudGV4dDtcclxuICAgICAgICAgICAgICAgIGVkaXRTd2F0Y2hlcyhmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBiVmFsRGVjLm9uQmx1ck9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KGJWYWxEZWMudGV4dCkgPT0gMCB8fCBiVmFsRGVjLnRleHQgPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGJWYWxEZWMudGV4dCA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUZsb2F0KGJWYWxEZWMsIFwiYlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVGaWVsZCA9PSBiVmFsRGVjLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVGaWVsZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBiVmFsRGVjLm9uVGV4dENoYW5nZWRPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmllbGQgPT0gYlZhbERlYy5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmxvYXQoYlZhbERlYywgXCJiXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmdiVmFsdWVzUXVhZHJhbnQuYWRkQ29udHJvbChiVmFsRGVjLCAyLCAyKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEhleCB2YWx1ZSBpbnB1dFxyXG4gICAgICAgICAgICBjb25zdCBoZXhWYWx1ZVF1YWRyYW50OiBHcmlkID0gbmV3IEdyaWQoKTtcclxuICAgICAgICAgICAgaGV4VmFsdWVRdWFkcmFudC5uYW1lID0gXCJIZXggVmFsdWVcIjtcclxuICAgICAgICAgICAgaGV4VmFsdWVRdWFkcmFudC53aWR0aCA9IDAuODI7XHJcbiAgICAgICAgICAgIGhleFZhbHVlUXVhZHJhbnQuYWRkUm93RGVmaW5pdGlvbigxLjAsIGZhbHNlKTtcclxuICAgICAgICAgICAgaGV4VmFsdWVRdWFkcmFudC5hZGRDb2x1bW5EZWZpbml0aW9uKDAuMSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBoZXhWYWx1ZVF1YWRyYW50LmFkZENvbHVtbkRlZmluaXRpb24oMC45LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHBpY2tlckNvbG9yVmFsdWVzLmFkZENvbnRyb2woaGV4VmFsdWVRdWFkcmFudCwgMiwgMCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsYWJlbFRleHQ6IFRleHRCbG9jayA9IG5ldyBUZXh0QmxvY2soKTtcclxuICAgICAgICAgICAgbGFiZWxUZXh0LnRleHQgPSBcIiNcIjtcclxuICAgICAgICAgICAgbGFiZWxUZXh0LmNvbG9yID0gYnV0dG9uQ29sb3I7XHJcbiAgICAgICAgICAgIGxhYmVsVGV4dC5mb250U2l6ZSA9IGJ1dHRvbkZvbnRTaXplO1xyXG4gICAgICAgICAgICBoZXhWYWx1ZVF1YWRyYW50LmFkZENvbnRyb2wobGFiZWxUZXh0LCAwLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGhleFZhbCA9IG5ldyBJbnB1dFRleHQoKTtcclxuICAgICAgICAgICAgaGV4VmFsLndpZHRoID0gMC45NjtcclxuICAgICAgICAgICAgaGV4VmFsLmhlaWdodCA9IDAuNzI7XHJcbiAgICAgICAgICAgIGhleFZhbC5uYW1lID0gXCJoZXhGaWVsZFwiO1xyXG4gICAgICAgICAgICBoZXhWYWwuaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG4gICAgICAgICAgICBoZXhWYWwuZm9udFNpemUgPSBidXR0b25Gb250U2l6ZTtcclxuICAgICAgICAgICAgY29uc3QgbWludXNQb3VuZCA9IG9wdGlvbnMubGFzdENvbG9yLnNwbGl0KFwiI1wiKTtcclxuICAgICAgICAgICAgaGV4VmFsLnRleHQgPSBtaW51c1BvdW5kWzFdO1xyXG4gICAgICAgICAgICBoZXhWYWwuY29sb3IgPSBpbnB1dFRleHRDb2xvcjtcclxuICAgICAgICAgICAgaGV4VmFsLmJhY2tncm91bmQgPSBpbnB1dFRleHRCYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgIGhleFZhbC5vbkZvY3VzT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRmllbGQgPSBoZXhWYWwubmFtZSE7XHJcbiAgICAgICAgICAgICAgICBsYXN0VmFsID0gaGV4VmFsLnRleHQ7XHJcbiAgICAgICAgICAgICAgICBlZGl0U3dhdGNoZXMoZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaGV4VmFsLm9uQmx1ck9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChoZXhWYWwudGV4dC5sZW5ndGggPT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGhleFZhbC50ZXh0LnNwbGl0KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhleFZhbC50ZXh0ID0gdmFsWzBdICsgdmFsWzBdICsgdmFsWzFdICsgdmFsWzFdICsgdmFsWzJdICsgdmFsWzJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGhleFZhbC50ZXh0ID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZXhWYWwudGV4dCA9IFwiMDAwMDAwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmFsdWVzKENvbG9yMy5Gcm9tSGV4U3RyaW5nKGhleFZhbC50ZXh0KSwgXCJiXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUZpZWxkID09IGhleFZhbC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlRmllbGQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaGV4VmFsLm9uVGV4dENoYW5nZWRPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3SGV4VmFsdWU6IHN0cmluZyA9IGhleFZhbC50ZXh0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tIZXg6IGJvb2xlYW4gPSAvW14wLTlBLUZdL2kudGVzdChuZXdIZXhWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGhleFZhbC50ZXh0Lmxlbmd0aCA+IDYgfHwgY2hlY2tIZXgpICYmIGFjdGl2ZUZpZWxkID09IGhleFZhbC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGV4VmFsLnRleHQgPSBsYXN0VmFsO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGV4VmFsLnRleHQubGVuZ3RoIDwgNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWFkaW5nWmVybzogbnVtYmVyID0gNiAtIGhleFZhbC50ZXh0Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZWFkaW5nWmVybzsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdIZXhWYWx1ZSA9IFwiMFwiICsgbmV3SGV4VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhleFZhbC50ZXh0Lmxlbmd0aCA9PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbDogc3RyaW5nW10gPSBoZXhWYWwudGV4dC5zcGxpdChcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SGV4VmFsdWUgPSB2YWxbMF0gKyB2YWxbMF0gKyB2YWxbMV0gKyB2YWxbMV0gKyB2YWxbMl0gKyB2YWxbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0hleFZhbHVlID0gXCIjXCIgKyBuZXdIZXhWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmllbGQgPT0gaGV4VmFsLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFZhbCA9IGhleFZhbC50ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZXMoQ29sb3IzLkZyb21IZXhTdHJpbmcobmV3SGV4VmFsdWUpLCBoZXhWYWwubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaGV4VmFsdWVRdWFkcmFudC5hZGRDb250cm9sKGhleFZhbCwgMCwgMSk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycyAmJiBvcHRpb25zLnNhdmVkQ29sb3JzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVN3YXRjaGVzKFwiXCIsIGJ1dFNhdmUhKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFdpbGwgdXBkYXRlIGFsbCB2YWx1ZXMgZm9yIElucHV0VGV4dCBhbmQgQ29sb3JQaWNrZXIgY29udHJvbHMgYmFzZWQgb24gdGhlIEJBQllMT04uQ29sb3IzIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uLlxyXG4gICAgICAgICAgICAgKiBFYWNoIElucHV0VGV4dCBjb250cm9sIGFuZCB0aGUgQ29sb3JQaWNrZXIgY29udHJvbCB3aWxsIGJlIHRlc3RlZCB0byBzZWUgaWYgdGhleSBhcmUgdGhlIGFjdGl2ZUZpZWxkIGFuZCBpZiB0aGV5XHJcbiAgICAgICAgICAgICAqIGFyZSB3aWxsIHJlY2VpdmUgbm8gdXBkYXRlLiBUaGlzIGlzIHRvIHByZXZlbnQgdGhlIGlucHV0IGZyb20gdGhlIHVzZXIgYmVpbmcgb3ZlcndyaXR0ZW4uXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gaW5wdXRGaWVsZFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlVmFsdWVzKHZhbHVlOiBDb2xvcjMsIGlucHV0RmllbGQ6IHN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRmllbGQgPSBpbnB1dEZpZWxkO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGlja2VkQ29sb3I6IHN0cmluZyA9IHZhbHVlLnRvSGV4U3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBuZXdTd2F0Y2guYmFja2dyb3VuZCA9IHBpY2tlZENvbG9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJWYWxJbnQubmFtZSAhPSBhY3RpdmVGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJWYWxJbnQudGV4dCA9IE1hdGguZmxvb3IodmFsdWUuciAqIDI1NSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChnVmFsSW50Lm5hbWUgIT0gYWN0aXZlRmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBnVmFsSW50LnRleHQgPSBNYXRoLmZsb29yKHZhbHVlLmcgKiAyNTUpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYlZhbEludC5uYW1lICE9IGFjdGl2ZUZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYlZhbEludC50ZXh0ID0gTWF0aC5mbG9vcih2YWx1ZS5iICogMjU1KS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJWYWxEZWMubmFtZSAhPSBhY3RpdmVGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJWYWxEZWMudGV4dCA9IHZhbHVlLnIudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChnVmFsRGVjLm5hbWUgIT0gYWN0aXZlRmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBnVmFsRGVjLnRleHQgPSB2YWx1ZS5nLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYlZhbERlYy5uYW1lICE9IGFjdGl2ZUZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYlZhbERlYy50ZXh0ID0gdmFsdWUuYi50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGhleFZhbC5uYW1lICE9IGFjdGl2ZUZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWludXNQb3VuZDogc3RyaW5nW10gPSBwaWNrZWRDb2xvci5zcGxpdChcIiNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaGV4VmFsLnRleHQgPSBtaW51c1BvdW5kWzFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHBpY2tlci5uYW1lICE9IGFjdGl2ZUZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGlja2VyLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIHVzZXIgZW50ZXJzIGFuIGludGVnZXIgZm9yIFIsIEcsIG9yIEIgd2UgY2hlY2sgdG8gbWFrZSBzdXJlIGl0IGlzIGEgdmFsaWQgbnVtYmVyIGFuZCByZXBsYWNlIGlmIG5vdC5cclxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlSW50KGZpZWxkOiBJbnB1dFRleHQsIGNoYW5uZWw6IHN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5ld1ZhbHVlOiBzdHJpbmcgPSBmaWVsZC50ZXh0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tWYWw6IGJvb2xlYW4gPSAvW14wLTldL2cudGVzdChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZC50ZXh0ID0gbGFzdFZhbDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKHBhcnNlSW50KG5ld1ZhbHVlKSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguZmxvb3IocGFyc2VJbnQobmV3VmFsdWUpKSA+IDI1NSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBcIjI1NVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTmFOKHBhcnNlSW50KG5ld1ZhbHVlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUZpZWxkID09IGZpZWxkLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFZhbCA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBwYXJzZUludChuZXdWYWx1ZSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZC50ZXh0ID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U3dhdGNoUkdCOiBDb2xvcjMgPSBDb2xvcjMuRnJvbUhleFN0cmluZyhuZXdTd2F0Y2guYmFja2dyb3VuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUZpZWxkID09IGZpZWxkLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWwgPT0gXCJyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlcyhuZXcgQ29sb3IzKHBhcnNlSW50KG5ld1ZhbHVlKSAvIDI1NSwgbmV3U3dhdGNoUkdCLmcsIG5ld1N3YXRjaFJHQi5iKSwgZmllbGQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbCA9PSBcImdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmFsdWVzKG5ldyBDb2xvcjMobmV3U3dhdGNoUkdCLnIsIHBhcnNlSW50KG5ld1ZhbHVlKSAvIDI1NSwgbmV3U3dhdGNoUkdCLmIpLCBmaWVsZC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlcyhuZXcgQ29sb3IzKG5ld1N3YXRjaFJHQi5yLCBuZXdTd2F0Y2hSR0IuZywgcGFyc2VJbnQobmV3VmFsdWUpIC8gMjU1KSwgZmllbGQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIHVzZXIgZW50ZXJzIGEgZmxvYXQgZm9yIFIsIEcsIG9yIEIgd2UgY2hlY2sgdG8gbWFrZSBzdXJlIGl0IGlzIGEgdmFsaWQgbnVtYmVyIGFuZCByZXBsYWNlIGlmIG5vdC5cclxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlRmxvYXQoZmllbGQ6IElucHV0VGV4dCwgY2hhbm5lbDogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3VmFsdWU6IHN0cmluZyA9IGZpZWxkLnRleHQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja1ZhbDogYm9vbGVhbiA9IC9bXjAtOS5dL2cudGVzdChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZC50ZXh0ID0gbGFzdFZhbDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPSBcIlwiICYmIG5ld1ZhbHVlICE9IFwiLlwiICYmIHBhcnNlRmxvYXQobmV3VmFsdWUpICE9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobmV3VmFsdWUpIDwgMC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IFwiMC4wXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VGbG9hdChuZXdWYWx1ZSkgPiAxLjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gXCIxLjBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTihwYXJzZUZsb2F0KG5ld1ZhbHVlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gXCIwLjBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmllbGQgPT0gZmllbGQubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0VmFsID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9IFwiXCIgJiYgbmV3VmFsdWUgIT0gXCIuXCIgJiYgcGFyc2VGbG9hdChuZXdWYWx1ZSkgIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gcGFyc2VGbG9hdChuZXdWYWx1ZSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZC50ZXh0ID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gXCIwLjBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1N3YXRjaFJHQiA9IENvbG9yMy5Gcm9tSGV4U3RyaW5nKG5ld1N3YXRjaC5iYWNrZ3JvdW5kKTtcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVGaWVsZCA9PSBmaWVsZC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWwgPT0gXCJyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmFsdWVzKG5ldyBDb2xvcjMocGFyc2VGbG9hdChuZXdWYWx1ZSksIG5ld1N3YXRjaFJHQi5nLCBuZXdTd2F0Y2hSR0IuYiksIGZpZWxkLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbCA9PSBcImdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZXMobmV3IENvbG9yMyhuZXdTd2F0Y2hSR0IuciwgcGFyc2VGbG9hdChuZXdWYWx1ZSksIG5ld1N3YXRjaFJHQi5iKSwgZmllbGQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmFsdWVzKG5ldyBDb2xvcjMobmV3U3dhdGNoUkdCLnIsIG5ld1N3YXRjaFJHQi5nLCBwYXJzZUZsb2F0KG5ld1ZhbHVlKSksIGZpZWxkLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlcyB0aGUgY3VycmVudCBpbmRleCBmcm9tIHRoZSBzYXZlZENvbG9ycyBhcnJheS4gRHJhd2VyIGNhbiB0aGVuIGJlIHJlZ2VuZXJhdGVkLlxyXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVTd2F0Y2goaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZWRDb2xvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNhdmVkQ29sb3JzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycyAmJiBvcHRpb25zLnNhdmVkQ29sb3JzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0RWRpdEJ1dHRvblZpc2liaWxpdHkoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRTd2F0Y2hNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZXMgYW5kIHN0eWxlcyBhbiBpbmRpdmlkdWFsIHN3YXRjaCB3aGVuIHVwZGF0ZVN3YXRjaGVzIGlzIGNhbGxlZC5cclxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlU3dhdGNoKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZWRDb2xvcnMgJiYgb3B0aW9ucy5zYXZlZENvbG9yc1tzd2F0Y2hOdW1iZXJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGljb246IHN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWRpdFN3YXRjaE1vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbiA9IFwiYlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb24gPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzd2F0Y2g6IEJ1dHRvbiA9IEJ1dHRvbi5DcmVhdGVTaW1wbGVCdXR0b24oXCJTd2F0Y2hfXCIgKyBzd2F0Y2hOdW1iZXIsIGljb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXRjaC5mb250RmFtaWx5ID0gXCJjb3JlZ2x5cGhzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3dhdGNoQ29sb3I6IENvbG9yMyA9IENvbG9yMy5Gcm9tSGV4U3RyaW5nKG9wdGlvbnMuc2F2ZWRDb2xvcnNbc3dhdGNoTnVtYmVyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3dhdGNoTHVtaW5lbmNlOiBudW1iZXIgPSBzd2F0Y2hDb2xvci5yICsgc3dhdGNoQ29sb3IuZyArIHN3YXRjaENvbG9yLmI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBjb2xvciBvZiBvdXRsaW5lIGFuZCB0ZXh0QmxvY2sgYmFzZWQgb24gbHVtaW5hbmNlIG9mIHRoZSBjb2xvciBzd2F0Y2ggc28gZmVlZGJhY2sgYWx3YXlzIHZpc2libGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3dhdGNoTHVtaW5lbmNlID4gbHVtaW5hbmNlTGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dhdGNoLmNvbG9yID0gaWNvbkNvbG9yRGFyaztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2F0Y2guY29sb3IgPSBpY29uQ29sb3JMaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhdGNoLmZvbnRTaXplID0gTWF0aC5mbG9vcihzd2F0Y2hTaXplICogMC43KTtcclxuICAgICAgICAgICAgICAgICAgICBzd2F0Y2gudGV4dEJsb2NrIS52ZXJ0aWNhbEFsaWdubWVudCA9IENvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuICAgICAgICAgICAgICAgICAgICBzd2F0Y2guaGVpZ2h0ID0gc3dhdGNoLndpZHRoID0gc3dhdGNoU2l6ZS50b1N0cmluZygpICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXRjaC5iYWNrZ3JvdW5kID0gb3B0aW9ucy5zYXZlZENvbG9yc1tzd2F0Y2hOdW1iZXJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXRjaC50aGlja25lc3MgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gc3dhdGNoTnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXRjaC5wb2ludGVyRG93bkFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dhdGNoLnRoaWNrbmVzcyA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBzd2F0Y2gucG9pbnRlclVwQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2F0Y2gudGhpY2tuZXNzID0gMztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXRjaC5wb2ludGVyRW50ZXJBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3YXRjaC50aGlja25lc3MgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhdGNoLnBvaW50ZXJPdXRBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3YXRjaC50aGlja25lc3MgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgc3dhdGNoLm9uUG9pbnRlckNsaWNrT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVkaXRTd2F0Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlcyhDb2xvcjMuRnJvbUhleFN0cmluZyhvcHRpb25zLnNhdmVkQ29sb3JzW21ldGFkYXRhXSksIHN3YXRjaC5uYW1lISk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVTd2F0Y2gobWV0YWRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3dhdGNoZXMoXCJcIiwgYnV0U2F2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3dhdGNoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gTW9kZSBzd2l0Y2ggdG8gcmVuZGVyIGJ1dHRvbiB0ZXh0IGFuZCBjbG9zZSBzeW1ib2xzIG9uIHN3YXRjaCBjb250cm9sc1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBlZGl0U3dhdGNoZXMobW9kZT86IGJvb2xlYW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChtb2RlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0U3dhdGNoTW9kZSA9IG1vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgdGhpc0J1dHRvbjogQnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVkaXRTd2F0Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2F0Y2hEcmF3ZXIuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0J1dHRvbiA9IHN3YXRjaERyYXdlci5jaGlsZHJlbltpXSBhcyBCdXR0b247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCdXR0b24udGV4dEJsb2NrIS50ZXh0ID0gXCJiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXRFZGl0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0RWRpdC50ZXh0QmxvY2shLnRleHQgPSBcIkRvbmVcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dhdGNoRHJhd2VyLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCdXR0b24gPSBzd2F0Y2hEcmF3ZXIuY2hpbGRyZW5baV0gYXMgQnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQnV0dG9uLnRleHRCbG9jayEudGV4dCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidXRFZGl0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0RWRpdC50ZXh0QmxvY2shLnRleHQgPSBcIkVkaXRcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBXaGVuIFNhdmUgQ29sb3IgYnV0dG9uIGlzIHByZXNzZWQgdGhpcyBmdW5jdGlvbiB3aWxsIGZpcnN0IGNyZWF0ZSBhIHN3YXRjaCBkcmF3ZXIgaWYgb25lIGlzIG5vdCBhbHJlYWR5XHJcbiAgICAgICAgICAgICAqIG1hZGUuIFRoZW4gYWxsIGNvbnRyb2xzIGFyZSByZW1vdmVkIGZyb20gdGhlIGRyYXdlciBhbmQgd2Ugc3RlcCB0aHJvdWdoIHRoZSBzYXZlZENvbG9ycyBhcnJheSBhbmRcclxuICAgICAgICAgICAgICogY3JlYXRlcyBvbmUgc3dhdGNoIHBlciBjb2xvci4gSXQgd2lsbCBhbHNvIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBkcmF3ZXIgY29udHJvbCBiYXNlZCBvbiBob3cgbWFueVxyXG4gICAgICAgICAgICAgKiBzYXZlZCBjb2xvcnMgdGhlcmUgYXJlIGFuZCBob3cgbWFueSBjYW4gYmUgc3RvcmVkIHBlciByb3cuXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBjb2xvclxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gYnV0dG9uXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVTd2F0Y2hlcyhjb2xvcjogc3RyaW5nLCBidXR0b246IEJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2F2ZWRDb2xvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3IgIT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNhdmVkQ29sb3JzLnB1c2goY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzd2F0Y2hOdW1iZXIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3YXRjaERyYXdlci5jbGVhckNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93Q291bnQ6IG51bWJlciA9IE1hdGguY2VpbChvcHRpb25zLnNhdmVkQ29sb3JzLmxlbmd0aCAvIG9wdGlvbnMubnVtU3dhdGNoZXNQZXJMaW5lISk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGd1dHRlckNvdW50OiBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd0NvdW50ID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3V0dGVyQ291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGd1dHRlckNvdW50ID0gcm93Q291bnQgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3dhdGNoRHJhd2VyLnJvd0NvdW50ICE9IHJvd0NvdW50ICsgZ3V0dGVyQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFJvd3M6IG51bWJlciA9IHN3YXRjaERyYXdlci5yb3dDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50Um93czsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2F0Y2hEcmF3ZXIucmVtb3ZlUm93RGVmaW5pdGlvbigwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd0NvdW50ICsgZ3V0dGVyQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgJSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dhdGNoRHJhd2VyLmFkZFJvd0RlZmluaXRpb24oc3dhdGNoU2l6ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3YXRjaERyYXdlci5hZGRSb3dEZWZpbml0aW9uKGd1dHRlclNpemUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHN3YXRjaERyYXdlci5oZWlnaHQgPSAoc3dhdGNoU2l6ZSAqIHJvd0NvdW50ICsgZ3V0dGVyQ291bnQgKiBndXR0ZXJTaXplKS50b1N0cmluZygpICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB5ID0gMSwgdGhpc1JvdyA9IDE7IHkgPCByb3dDb3VudCArIGd1dHRlckNvdW50OyB5ICs9IDIsIHRoaXNSb3crKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgbnVtYmVyIG9mIGJ1dHRvbnMgdG8gY3JlYXRlIHBlciByb3cgYmFzZWQgb24gdGhlIGJ1dHRvbiBsaW1pdCBwZXIgcm93IGFuZCBudW1iZXIgb2Ygc2F2ZWQgY29sb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b3RhbEJ1dHRvbnNUaGlzUm93OiBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVkQ29sb3JzLmxlbmd0aCA+IHRoaXNSb3cgKiBvcHRpb25zLm51bVN3YXRjaGVzUGVyTGluZSEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQnV0dG9uc1RoaXNSb3cgPSBvcHRpb25zLm51bVN3YXRjaGVzUGVyTGluZSE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEJ1dHRvbnNUaGlzUm93ID0gb3B0aW9ucy5zYXZlZENvbG9ycy5sZW5ndGggLSAodGhpc1JvdyAtIDEpICogb3B0aW9ucy5udW1Td2F0Y2hlc1BlckxpbmUhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkl0ZXJhdGlvbnM6IG51bWJlciA9IE1hdGgubWluKE1hdGgubWF4KHRvdGFsQnV0dG9uc1RoaXNSb3csIDApLCBvcHRpb25zLm51bVN3YXRjaGVzUGVyTGluZSEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB4ID0gMCwgdyA9IDE7IHggPCBidXR0b25JdGVyYXRpb25zOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4ID4gb3B0aW9ucy5udW1Td2F0Y2hlc1BlckxpbmUhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzd2F0Y2g6IEJ1dHRvbiB8IG51bGwgPSBjcmVhdGVTd2F0Y2goKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzd2F0Y2ggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3YXRjaERyYXdlci5hZGRDb250cm9sKHN3YXRjaCwgeSwgdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdyArPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3YXRjaE51bWJlcisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zYXZlZENvbG9ycy5sZW5ndGggPj0gb3B0aW9ucy5zd2F0Y2hMaW1pdCEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUJ1dHRvbihidXR0b24sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVCdXR0b24oYnV0dG9uLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBTaG93cyBvciBoaWRlcyBlZGl0IHN3YXRjaGVzIGJ1dHRvbiBkZXBlbmRpbmcgb24gaWYgdGhlcmUgYXJlIHNhdmVkIHN3YXRjaGVzXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldEVkaXRCdXR0b25WaXNpYmlsaXR5KGVuYWJsZUJ1dHRvbjogYm9vbGVhbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVuYWJsZUJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQgPSBCdXR0b24uQ3JlYXRlU2ltcGxlQnV0dG9uKFwiYnV0RWRpdFwiLCBcIkVkaXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0RWRpdC53aWR0aCA9IGJ1dHRvbldpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQuaGVpZ2h0ID0gYnV0dG9uSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQubGVmdCA9IE1hdGguZmxvb3IocGFyc2VJbnQoYnV0dG9uV2lkdGgpICogMC4xKS50b1N0cmluZygpICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQudG9wID0gKHBhcnNlRmxvYXQoYnV0RWRpdC5sZWZ0KSAqIC0xKS50b1N0cmluZygpICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9CT1RUT007XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0RWRpdC5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQudGhpY2tuZXNzID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBidXRFZGl0LmNvbG9yID0gYnV0dG9uQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0RWRpdC5mb250U2l6ZSA9IGJ1dHRvbkZvbnRTaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQuYmFja2dyb3VuZCA9IGJ1dHRvbkJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICBidXRFZGl0Lm9uUG9pbnRlckVudGVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXRFZGl0LmJhY2tncm91bmQgPSBidXR0b25CYWNrZ3JvdW5kSG92ZXJDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBidXRFZGl0Lm9uUG9pbnRlck91dE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0RWRpdC5iYWNrZ3JvdW5kID0gYnV0dG9uQmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQucG9pbnRlckRvd25BbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQuYmFja2dyb3VuZCA9IGJ1dHRvbkJhY2tncm91bmRDbGlja0NvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0RWRpdC5wb2ludGVyVXBBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dEVkaXQuYmFja2dyb3VuZCA9IGJ1dHRvbkJhY2tncm91bmRIb3ZlckNvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0RWRpdC5vblBvaW50ZXJDbGlja09ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVkaXRTd2F0Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0U3dhdGNoTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdFN3YXRjaE1vZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRTd2F0Y2hlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBpY2tlckdyaWQuYWRkQ29udHJvbChidXRFZGl0LCAxLCAwKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGlja2VyR3JpZC5yZW1vdmVDb250cm9sKGJ1dEVkaXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDYWxsZWQgd2hlbiB0aGUgdXNlciBoaXRzIHRoZSBsaW1pdCBvZiBzYXZlZCBjb2xvcnMgaW4gdGhlIGRyYXdlci5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZGlzYWJsZUJ1dHRvbihidXR0b246IEJ1dHRvbiwgZGlzYWJsZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jb2xvciA9IGJ1dHRvbkRpc2FibGVkQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmJhY2tncm91bmQgPSBidXR0b25EaXNhYmxlZEJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNvbG9yID0gYnV0dG9uQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmJhY2tncm91bmQgPSBidXR0b25CYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFBhc3NlcyBsYXN0IGNob3NlbiBjb2xvciBiYWNrIHRvIHNjZW5lIGFuZCBraWxscyBkaWFsb2cgYnkgcmVtb3ZpbmcgZnJvbSBBZHZhbmNlZER5bmFtaWNUZXh0dXJlXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb3NlUGlja2VyKGNvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNhdmVkQ29sb3JzICYmIG9wdGlvbnMuc2F2ZWRDb2xvcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlZENvbG9yczogb3B0aW9ucy5zYXZlZENvbG9ycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGlja2VkQ29sb3I6IGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGlja2VkQ29sb3I6IGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYWR2YW5jZWRUZXh0dXJlLnJlbW92ZUNvbnRyb2woZGlhbG9nQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblJlZ2lzdGVyQ2xhc3MoXCJCQUJZTE9OLkdVSS5Db2xvclBpY2tlclwiLCBDb2xvclBpY2tlcik7XHJcbiIsImltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiY29yZS9NaXNjL2xvZ2dlclwiO1xyXG5cclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgTWVhc3VyZSB9IGZyb20gXCIuLi9tZWFzdXJlXCI7XHJcbmltcG9ydCB0eXBlIHsgQWR2YW5jZWREeW5hbWljVGV4dHVyZSB9IGZyb20gXCIuLi9hZHZhbmNlZER5bmFtaWNUZXh0dXJlXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgdHlwZSB7IFBvaW50ZXJJbmZvQmFzZSB9IGZyb20gXCJjb3JlL0V2ZW50cy9wb2ludGVyRXZlbnRzXCI7XHJcbmltcG9ydCB7IHNlcmlhbGl6ZSB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9yc1wiO1xyXG5pbXBvcnQgdHlwZSB7IElDYW52YXNSZW5kZXJpbmdDb250ZXh0IH0gZnJvbSBcImNvcmUvRW5naW5lcy9JQ2FudmFzXCI7XHJcbmltcG9ydCB7IER5bmFtaWNUZXh0dXJlIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL1RleHR1cmVzL2R5bmFtaWNUZXh0dXJlXCI7XHJcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvVGV4dHVyZXMvdGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiY29yZS9FbmdpbmVzL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB0eXBlIHsgQmFzZUdyYWRpZW50IH0gZnJvbSBcIi4vZ3JhZGllbnQvQmFzZUdyYWRpZW50XCI7XHJcbmltcG9ydCB7IFRvb2xzIH0gZnJvbSBcImNvcmUvTWlzYy90b29sc1wiO1xyXG5pbXBvcnQgeyBNYXRyaXgyRCB9IGZyb20gXCIuLi9tYXRoMkRcIjtcclxuXHJcbi8qKlxyXG4gKiBSb290IGNsYXNzIGZvciAyRCBjb250YWluZXJzXHJcbiAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjY29udGFpbmVyc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbnRhaW5lciBleHRlbmRzIENvbnRyb2wge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9jaGlsZHJlbiA9IG5ldyBBcnJheTxDb250cm9sPigpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9tZWFzdXJlRm9yQ2hpbGRyZW4gPSBNZWFzdXJlLkVtcHR5KCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgX2JhY2tncm91bmQgPSBcIlwiO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9iYWNrZ3JvdW5kR3JhZGllbnQ6IE51bGxhYmxlPEJhc2VHcmFkaWVudD4gPSBudWxsO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9hZGFwdFdpZHRoVG9DaGlsZHJlbiA9IGZhbHNlO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9hZGFwdEhlaWdodFRvQ2hpbGRyZW4gPSBmYWxzZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByb3RlY3RlZCBfcmVuZGVyVG9JbnRlcm1lZGlhdGVUZXh0dXJlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgX2ludGVybWVkaWF0ZVRleHR1cmU6IE51bGxhYmxlPER5bmFtaWNUZXh0dXJlPiA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgdGhhdCB0aGUgY29udGFpbmVyIHdpbGwgbGV0IGludGVybmFsIGNvbnRyb2xzIGhhbmRsZSBwaWNraW5nIGluc3RlYWQgb2YgZG9pbmcgaXQgZGlyZWN0bHkgdXNpbmcgaXRzIGJvdW5kaW5nIGluZm9cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZGVsZWdhdGVQaWNraW5nVG9DaGlsZHJlbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIGNoaWxkcmVuIHNob3VsZCBiZSByZW5kZXJlZCB0byBhbiBpbnRlcm1lZGlhdGUgdGV4dHVyZSByYXRoZXIgdGhhbiBkaXJlY3RseSB0byBob3N0LCB1c2VmdWwgZm9yIGFscGhhIGJsZW5kaW5nICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgcmVuZGVyVG9JbnRlcm1lZGlhdGVUZXh0dXJlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJUb0ludGVybWVkaWF0ZVRleHR1cmU7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHJlbmRlclRvSW50ZXJtZWRpYXRlVGV4dHVyZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJUb0ludGVybWVkaWF0ZVRleHR1cmUgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyVG9JbnRlcm1lZGlhdGVUZXh0dXJlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IGxheW91dCBjeWNsZSBlcnJvcnMgc2hvdWxkIGJlIGRpc3BsYXllZCBvbiB0aGUgY29uc29sZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbG9nTGF5b3V0Q3ljbGVFcnJvcnMgPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgbnVtYmVyIG9mIGxheW91dCBjeWNsZXMgKGEgY2hhbmdlIGludm9sdmVkIGJ5IGEgY29udHJvbCB3aGlsZSBldmFsdWF0aW5nIHRoZSBsYXlvdXQpIGFsbG93ZWRcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgbWF4TGF5b3V0Q3ljbGUgPSAzO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGNvbnRhaW5lciBzaG91bGQgdHJ5IHRvIGFkYXB0IHRvIGl0cyBjaGlsZHJlbiBoZWlnaHQgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBhZGFwdEhlaWdodFRvQ2hpbGRyZW4oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkYXB0SGVpZ2h0VG9DaGlsZHJlbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGFkYXB0SGVpZ2h0VG9DaGlsZHJlbih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9hZGFwdEhlaWdodFRvQ2hpbGRyZW4gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2FkYXB0SGVpZ2h0VG9DaGlsZHJlbiA9IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBcIjEwMCVcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgY29udGFpbmVyIHNob3VsZCB0cnkgdG8gYWRhcHQgdG8gaXRzIGNoaWxkcmVuIHdpZHRoICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYWRhcHRXaWR0aFRvQ2hpbGRyZW4oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkYXB0V2lkdGhUb0NoaWxkcmVuO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYWRhcHRXaWR0aFRvQ2hpbGRyZW4odmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fYWRhcHRXaWR0aFRvQ2hpbGRyZW4gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2FkYXB0V2lkdGhUb0NoaWxkcmVuID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gXCIxMDAlXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYmFja2dyb3VuZCBjb2xvciAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGJhY2tncm91bmQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja2dyb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJhY2tncm91bmQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9iYWNrZ3JvdW5kID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGJhY2tncm91bmQgZ3JhZGllbnQgY29sb3IuIFRha2VzIHByZWNlZGVuY2Ugb3ZlciBiYWNrZ3JvdW5kICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYmFja2dyb3VuZEdyYWRpZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kR3JhZGllbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBiYWNrZ3JvdW5kR3JhZGllbnQodmFsdWU6IE51bGxhYmxlPEJhc2VHcmFkaWVudD4pIHtcclxuICAgICAgICBpZiAodGhpcy5fYmFja2dyb3VuZEdyYWRpZW50ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRHcmFkaWVudCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgdGhlIGxpc3Qgb2YgY2hpbGRyZW4gKi9cclxuICAgIHB1YmxpYyBnZXQgY2hpbGRyZW4oKTogQ29udHJvbFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW47XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldCBpc1JlYWRPbmx5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1JlYWRPbmx5O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXQgaXNSZWFkT25seSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2lzUmVhZE9ubHkgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLl9jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjaGlsZC5pc1JlYWRPbmx5ID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb250YWluZXJcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIG5hbWUgb2YgdGhlIGNvbnRhaW5lclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgb3ZlcnJpZGUgbmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJDb250YWluZXJcIjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2ZsYWdEZXNjZW5kYW50c0FzTWF0cml4RGlydHkoKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNoaWxkLl9pc0NsaXBwZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY2hpbGQuX21hcmtNYXRyaXhBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIGNoaWxkIHVzaW5nIGl0cyBuYW1lXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjaGlsZCBuYW1lIHRvIGxvb2sgZm9yXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY2hpbGQgY29udHJvbCBpZiBmb3VuZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Q2hpbGRCeU5hbWUobmFtZTogc3RyaW5nKTogTnVsbGFibGU8Q29udHJvbD4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQubmFtZSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgYSBjaGlsZCB1c2luZyBpdHMgdHlwZSBhbmQgaXRzIG5hbWVcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIGNoaWxkIG5hbWUgdG8gbG9vayBmb3JcclxuICAgICAqIEBwYXJhbSB0eXBlIGRlZmluZXMgdGhlIGNoaWxkIHR5cGUgdG8gbG9vayBmb3JcclxuICAgICAqIEByZXR1cm5zIHRoZSBjaGlsZCBjb250cm9sIGlmIGZvdW5kXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRDaGlsZEJ5VHlwZShuYW1lOiBzdHJpbmcsIHR5cGU6IHN0cmluZyk6IE51bGxhYmxlPENvbnRyb2w+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGVOYW1lID09PSB0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VhcmNoIGZvciBhIHNwZWNpZmljIGNvbnRyb2wgaW4gY2hpbGRyZW5cclxuICAgICAqIEBwYXJhbSBjb250cm9sIGRlZmluZXMgdGhlIGNvbnRyb2wgdG8gbG9vayBmb3JcclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGNvbnRyb2wgaXMgaW4gY2hpbGQgbGlzdFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29udGFpbnNDb250cm9sKGNvbnRyb2w6IENvbnRyb2wpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGNvbnRyb2wpICE9PSAtMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBuZXcgY29udHJvbCB0byB0aGUgY3VycmVudCBjb250YWluZXJcclxuICAgICAqIEBwYXJhbSBjb250cm9sIGRlZmluZXMgdGhlIGNvbnRyb2wgdG8gYWRkXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBjb250YWluZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkZENvbnRyb2woY29udHJvbDogTnVsbGFibGU8Q29udHJvbD4pOiBDb250YWluZXIge1xyXG4gICAgICAgIGlmICghY29udHJvbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fY2hpbGRyZW4uaW5kZXhPZihjb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udHJvbC5fbGluayh0aGlzLl9ob3N0KTtcclxuXHJcbiAgICAgICAgY29udHJvbC5fbWFya0FsbEFzRGlydHkoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVPcmRlckNvbnRyb2woY29udHJvbCk7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcblxyXG4gICAgICAgIHRoaXMub25Db250cm9sQWRkZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhjb250cm9sKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGFsbCBjb250cm9scyBmcm9tIHRoZSBjdXJyZW50IGNvbnRhaW5lclxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgY29udGFpbmVyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjbGVhckNvbnRyb2xzKCk6IENvbnRhaW5lciB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLnNsaWNlKCk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDb250cm9sKGNoaWxkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhIGNvbnRyb2wgZnJvbSB0aGUgY3VycmVudCBjb250YWluZXJcclxuICAgICAqIEBwYXJhbSBjb250cm9sIGRlZmluZXMgdGhlIGNvbnRyb2wgdG8gcmVtb3ZlXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBjb250YWluZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZUNvbnRyb2woY29udHJvbDogQ29udHJvbCk6IENvbnRhaW5lciB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9jaGlsZHJlbi5pbmRleE9mKGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgICAgICAgICBjb250cm9sLnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250cm9sLmxpbmtXaXRoTWVzaChudWxsKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5faG9zdC5fY2xlYW5Db250cm9sQWZ0ZXJSZW1vdmFsKGNvbnRyb2wpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuXHJcbiAgICAgICAgdGhpcy5vbkNvbnRyb2xSZW1vdmVkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoY29udHJvbCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiBhbnkgY29udHJvbCBpcyBhZGRlZCB0byB0aGlzIGNvbnRhaW5lci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uQ29udHJvbEFkZGVkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPE51bGxhYmxlPENvbnRyb2w+PigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gZXZlbnQgdHJpZ2dlcmVkIHdoZW4gYW55IGNvbnRyb2wgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgY29udGFpbmVyLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Db250cm9sUmVtb3ZlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxOdWxsYWJsZTxDb250cm9sPj4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX3JlT3JkZXJDb250cm9sKGNvbnRyb2w6IENvbnRyb2wpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBsaW5rZWRNZXNoID0gY29udHJvbC5saW5rZWRNZXNoO1xyXG5cclxuICAgICAgICB0aGlzLnJlbW92ZUNvbnRyb2woY29udHJvbCk7XHJcblxyXG4gICAgICAgIGxldCB3YXNBZGRlZCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9jaGlsZHJlbi5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NoaWxkcmVuW2luZGV4XS56SW5kZXggPiBjb250cm9sLnpJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCBjb250cm9sKTtcclxuICAgICAgICAgICAgICAgIHdhc0FkZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXdhc0FkZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goY29udHJvbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250cm9sLnBhcmVudCA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChsaW5rZWRNZXNoKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wubGlua1dpdGhNZXNoKGxpbmtlZE1lc2gpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX29mZnNldExlZnQob2Zmc2V0OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlci5fb2Zmc2V0TGVmdChvZmZzZXQpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuX2NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNoaWxkLl9vZmZzZXRMZWZ0KG9mZnNldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfb2Zmc2V0VG9wKG9mZnNldDogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIuX29mZnNldFRvcChvZmZzZXQpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuX2NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNoaWxkLl9vZmZzZXRUb3Aob2Zmc2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9tYXJrQWxsQXNEaXJ0eSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5fbWFya0FsbEFzRGlydHkoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2NoaWxkcmVuLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZHJlbltpbmRleF0uX21hcmtBbGxBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfZ2V0QmFja2dyb3VuZENvbG9yKGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tncm91bmRHcmFkaWVudCA/IHRoaXMuX2JhY2tncm91bmRHcmFkaWVudC5nZXRDYW52YXNHcmFkaWVudChjb250ZXh0KSA6IHRoaXMuX2JhY2tncm91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9sb2NhbERyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fYmFja2dyb3VuZCB8fCB0aGlzLl9iYWNrZ3JvdW5kR3JhZGllbnQpIHtcclxuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zaGFkb3dDb2xvciA9IHRoaXMuc2hhZG93Q29sb3I7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSB0aGlzLnNoYWRvd0JsdXI7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSB0aGlzLnNoYWRvd09mZnNldFk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5fZ2V0QmFja2dyb3VuZENvbG9yKGNvbnRleHQpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdCh0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0LCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9saW5rKGhvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5fbGluayhob3N0KTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLl9jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjaGlsZC5fbGluayhob3N0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9iZWZvcmVMYXlvdXQoKSB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfcHJvY2Vzc01lYXN1cmVzKHBhcmVudE1lYXN1cmU6IE1lYXN1cmUsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlydHkgfHwgIXRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUuaXNFcXVhbHNUbyhwYXJlbnRNZWFzdXJlKSkge1xyXG4gICAgICAgICAgICBzdXBlci5fcHJvY2Vzc01lYXN1cmVzKHBhcmVudE1lYXN1cmUsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB0aGlzLl9ldmFsdWF0ZUNsaXBwaW5nU3RhdGUocGFyZW50TWVhc3VyZSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW5kZXJUb0ludGVybWVkaWF0ZVRleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbnRlcm1lZGlhdGVUZXh0dXJlICYmIHRoaXMuX2hvc3QuZ2V0U2NlbmUoKSAhPSB0aGlzLl9pbnRlcm1lZGlhdGVUZXh0dXJlLmdldFNjZW5lKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm1lZGlhdGVUZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm1lZGlhdGVUZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faW50ZXJtZWRpYXRlVGV4dHVyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybWVkaWF0ZVRleHR1cmUgPSBuZXcgRHluYW1pY1RleHR1cmUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgd2lkdGg6IHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoLCBoZWlnaHQ6IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ob3N0LmdldFNjZW5lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBUZXh0dXJlLk5FQVJFU1RfU0FNUExJTkdNT0RFLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDb25zdGFudHMuVEVYVFVSRUZPUk1BVF9SR0JBLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50ZXJtZWRpYXRlVGV4dHVyZS5oYXNBbHBoYSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybWVkaWF0ZVRleHR1cmUuc2NhbGVUbyh0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2xheW91dChwYXJlbnRNZWFzdXJlOiBNZWFzdXJlLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0RpcnR5ICYmICghdGhpcy5pc1Zpc2libGUgfHwgdGhpcy5ub3RSZW5kZXJhYmxlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmhvc3QuX251bUxheW91dENhbGxzKys7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRyYW5zZm9ybVRvUmVmKHRoaXMuX3RyYW5zZm9ybU1hdHJpeCwgdGhpcy5fcHJldkN1cnJlbnRNZWFzdXJlVHJhbnNmb3JtZWRJbnRvR2xvYmFsU3BhY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlYnVpbGRDb3VudCA9IDA7XHJcblxyXG4gICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLl9hcHBseVN0YXRlcyhjb250ZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYmVmb3JlTGF5b3V0KCk7XHJcblxyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgbGV0IGNvbXB1dGVkV2lkdGggPSAtMTtcclxuICAgICAgICAgICAgbGV0IGNvbXB1dGVkSGVpZ2h0ID0gLTE7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlYnVpbGRMYXlvdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc01lYXN1cmVzKHBhcmVudE1lYXN1cmUsIGNvbnRleHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc0NsaXBwZWQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC5fdGVtcFBhcmVudE1lYXN1cmUuY29weUZyb20odGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLl9sYXlvdXQodGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLCBjb250ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuaXNWaXNpYmxlICYmICFjaGlsZC5ub3RSZW5kZXJhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hZGFwdFdpZHRoVG9DaGlsZHJlbiAmJiBjaGlsZC5fd2lkdGguaXNQaXhlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkV2lkdGggPSBNYXRoLm1heChjb21wdXRlZFdpZHRoLCBjaGlsZC5fY3VycmVudE1lYXN1cmUud2lkdGggKyBjaGlsZC5fcGFkZGluZ0xlZnRJblBpeGVscyArIGNoaWxkLl9wYWRkaW5nUmlnaHRJblBpeGVscyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hZGFwdEhlaWdodFRvQ2hpbGRyZW4gJiYgY2hpbGQuX2hlaWdodC5pc1BpeGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWRIZWlnaHQgPSBNYXRoLm1heChjb21wdXRlZEhlaWdodCwgY2hpbGQuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCArIGNoaWxkLl9wYWRkaW5nVG9wSW5QaXhlbHMgKyBjaGlsZC5fcGFkZGluZ0JvdHRvbUluUGl4ZWxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hZGFwdFdpZHRoVG9DaGlsZHJlbiAmJiBjb21wdXRlZFdpZHRoID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wdXRlZFdpZHRoICs9IHRoaXMucGFkZGluZ0xlZnRJblBpeGVscyArIHRoaXMucGFkZGluZ1JpZ2h0SW5QaXhlbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2lkdGggIT09IGNvbXB1dGVkV2lkdGggKyBcInB4XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQ/Ll9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gY29tcHV0ZWRXaWR0aCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2lkdGguaWdub3JlQWRhcHRpdmVTY2FsaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVidWlsZExheW91dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWRhcHRIZWlnaHRUb0NoaWxkcmVuICYmIGNvbXB1dGVkSGVpZ2h0ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wdXRlZEhlaWdodCArPSB0aGlzLnBhZGRpbmdUb3BJblBpeGVscyArIHRoaXMucGFkZGluZ0JvdHRvbUluUGl4ZWxzO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhlaWdodCAhPT0gY29tcHV0ZWRIZWlnaHQgKyBcInB4XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQ/Ll9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IGNvbXB1dGVkSGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWlnaHQuaWdub3JlQWRhcHRpdmVTY2FsaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVidWlsZExheW91dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc3RNZWFzdXJlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVidWlsZENvdW50Kys7XHJcbiAgICAgICAgfSB3aGlsZSAodGhpcy5fcmVidWlsZExheW91dCAmJiByZWJ1aWxkQ291bnQgPCB0aGlzLm1heExheW91dEN5Y2xlKTtcclxuXHJcbiAgICAgICAgaWYgKHJlYnVpbGRDb3VudCA+PSAzICYmIHRoaXMubG9nTGF5b3V0Q3ljbGVFcnJvcnMpIHtcclxuICAgICAgICAgICAgTG9nZ2VyLkVycm9yKGBMYXlvdXQgY3ljbGUgZGV0ZWN0ZWQgaW4gR1VJIChDb250YWluZXIgbmFtZT0ke3RoaXMubmFtZX0sIHVuaXF1ZUlkPSR7dGhpcy51bmlxdWVJZH0pYCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlydHkpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlUmVjdCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faXNEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9wb3N0TWVhc3VyZSgpIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGJ5IGRlZmF1bHRcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pbnZlcnNlVHJhbnNmb3JtTWF0cml4ID0gTWF0cml4MkQuSWRlbnRpdHkoKTtcclxuICAgIHByaXZhdGUgX2ludmVyc2VNZWFzdXJlID0gbmV3IE1lYXN1cmUoMCwgMCwgMCwgMCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9kcmF3KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0LCBpbnZhbGlkYXRlZFJlY3RhbmdsZT86IE1lYXN1cmUpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCByZW5kZXJUb0ludGVybWVkaWF0ZVRleHR1cmVUaGlzRHJhdyA9IHRoaXMuX3JlbmRlclRvSW50ZXJtZWRpYXRlVGV4dHVyZSAmJiB0aGlzLl9pbnRlcm1lZGlhdGVUZXh0dXJlO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHRUb0RyYXdUbyA9IHJlbmRlclRvSW50ZXJtZWRpYXRlVGV4dHVyZVRoaXNEcmF3ID8gKDxEeW5hbWljVGV4dHVyZT50aGlzLl9pbnRlcm1lZGlhdGVUZXh0dXJlKS5nZXRDb250ZXh0KCkgOiBjb250ZXh0O1xyXG5cclxuICAgICAgICBpZiAocmVuZGVyVG9JbnRlcm1lZGlhdGVUZXh0dXJlVGhpc0RyYXcpIHtcclxuICAgICAgICAgICAgY29udGV4dFRvRHJhd1RvLnNhdmUoKTtcclxuICAgICAgICAgICAgY29udGV4dFRvRHJhd1RvLnRyYW5zbGF0ZSgtdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgLXRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCk7XHJcbiAgICAgICAgICAgIGlmIChpbnZhbGlkYXRlZFJlY3RhbmdsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4LmludmVydFRvUmVmKHRoaXMuX2ludmVyc2VUcmFuc2Zvcm1NYXRyaXgpO1xyXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0ZWRSZWN0YW5nbGUudHJhbnNmb3JtVG9SZWYodGhpcy5faW52ZXJzZVRyYW5zZm9ybU1hdHJpeCwgdGhpcy5faW52ZXJzZU1lYXN1cmUpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFRvRHJhd1RvLmNsZWFyUmVjdCh0aGlzLl9pbnZlcnNlTWVhc3VyZS5sZWZ0LCB0aGlzLl9pbnZlcnNlTWVhc3VyZS50b3AsIHRoaXMuX2ludmVyc2VNZWFzdXJlLndpZHRoLCB0aGlzLl9pbnZlcnNlTWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFRvRHJhd1RvLmNsZWFyUmVjdCh0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0LCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9sb2NhbERyYXcoY29udGV4dFRvRHJhd1RvKTtcclxuXHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNsaXBDaGlsZHJlbikge1xyXG4gICAgICAgICAgICB0aGlzLl9jbGlwRm9yQ2hpbGRyZW4oY29udGV4dFRvRHJhd1RvKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgLy8gT25seSByZWRyYXcgcGFydHMgb2YgdGhlIHNjcmVlbiB0aGF0IGFyZSBpbnZhbGlkYXRlZFxyXG4gICAgICAgICAgICBpZiAoaW52YWxpZGF0ZWRSZWN0YW5nbGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY2hpbGQuX2ludGVyc2VjdHNSZWN0KGludmFsaWRhdGVkUmVjdGFuZ2xlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNoaWxkLl9yZW5kZXIoY29udGV4dFRvRHJhd1RvLCBpbnZhbGlkYXRlZFJlY3RhbmdsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVuZGVyVG9JbnRlcm1lZGlhdGVUZXh0dXJlVGhpc0RyYXcpIHtcclxuICAgICAgICAgICAgY29udGV4dFRvRHJhd1RvLnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSB0aGlzLmFscGhhO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShjb250ZXh0VG9EcmF3VG8uY2FudmFzLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0LCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3ApO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXREZXNjZW5kYW50c1RvUmVmKHJlc3VsdHM6IENvbnRyb2xbXSwgZGlyZWN0RGVzY2VuZGFudHNPbmx5OiBib29sZWFuID0gZmFsc2UsIHByZWRpY2F0ZT86IChjb250cm9sOiBDb250cm9sKSA9PiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5jaGlsZHJlbltpbmRleF07XHJcblxyXG4gICAgICAgICAgICBpZiAoIXByZWRpY2F0ZSB8fCBwcmVkaWNhdGUoaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFkaXJlY3REZXNjZW5kYW50c09ubHkpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uZ2V0RGVzY2VuZGFudHNUb1JlZihyZXN1bHRzLCBmYWxzZSwgcHJlZGljYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX3Byb2Nlc3NQaWNraW5nKFxyXG4gICAgICAgIHg6IG51bWJlcixcclxuICAgICAgICB5OiBudW1iZXIsXHJcbiAgICAgICAgcGk6IE51bGxhYmxlPFBvaW50ZXJJbmZvQmFzZT4sXHJcbiAgICAgICAgdHlwZTogbnVtYmVyLFxyXG4gICAgICAgIHBvaW50ZXJJZDogbnVtYmVyLFxyXG4gICAgICAgIGJ1dHRvbkluZGV4OiBudW1iZXIsXHJcbiAgICAgICAgZGVsdGFYPzogbnVtYmVyLFxyXG4gICAgICAgIGRlbHRhWT86IG51bWJlclxyXG4gICAgKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQgfHwgIXRoaXMuaXNWaXNpYmxlIHx8IHRoaXMubm90UmVuZGVyYWJsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjaGVja3MgaWYgdGhlIHBpY2tpbmcgcG9zaXRpb24gaXMgd2l0aGluIHRoZSBjb250YWluZXJcclxuICAgICAgICBjb25zdCBjb250YWlucyA9IHN1cGVyLmNvbnRhaW5zKHgsIHkpO1xyXG5cclxuICAgICAgICAvLyBpZiBjbGlwQ2hpbGRyZW4gaXMgb2ZmLCB3ZSBzaG91bGQgc3RpbGwgcGFzcyBwaWNraW5nIGV2ZW50cyB0byBjaGlsZHJlbiBldmVuIGlmIHdlIGRvbid0IGNvbnRhaW4gdGhlIHBvaW50ZXJcclxuICAgICAgICBpZiAoIWNvbnRhaW5zICYmIHRoaXMuY2xpcENoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRlbGVnYXRlUGlja2luZ1RvQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgbGV0IGNvbnRhaW5zID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5fY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLl9jaGlsZHJlbltpbmRleF07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuaXNFbmFibGVkICYmIGNoaWxkLmlzSGl0VGVzdFZpc2libGUgJiYgY2hpbGQuaXNWaXNpYmxlICYmICFjaGlsZC5ub3RSZW5kZXJhYmxlICYmIGNoaWxkLmNvbnRhaW5zKHgsIHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNvbnRhaW5zKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGJhY2t3YXJkcyB0byBwaWNrIGNsb3Nlc3QgZmlyc3RcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IHRoaXMuX2NoaWxkcmVuLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLl9jaGlsZHJlbltpbmRleF07XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5fcHJvY2Vzc1BpY2tpbmcoeCwgeSwgcGksIHR5cGUsIHBvaW50ZXJJZCwgYnV0dG9uSW5kZXgsIGRlbHRhWCwgZGVsdGFZKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmhvdmVyQ3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faG9zdC5fY2hhbmdlQ3Vyc29yKGNoaWxkLmhvdmVyQ3Vyc29yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbnRhaW5zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pc0hpdFRlc3RWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzT2JzZXJ2YWJsZXModHlwZSwgeCwgeSwgcGksIHBvaW50ZXJJZCwgYnV0dG9uSW5kZXgsIGRlbHRhWCwgZGVsdGFZKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FkZGl0aW9uYWxQcm9jZXNzaW5nKHBhcmVudE1lYXN1cmU6IE1lYXN1cmUsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuX2FkZGl0aW9uYWxQcm9jZXNzaW5nKHBhcmVudE1lYXN1cmUsIGNvbnRleHQpO1xyXG5cclxuICAgICAgICB0aGlzLl9tZWFzdXJlRm9yQ2hpbGRyZW4uY29weUZyb20odGhpcy5fY3VycmVudE1lYXN1cmUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfZ2V0QWRhcHREaW1UbyhkaW06IFwid2lkdGhcIiB8IFwiaGVpZ2h0XCIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoZGltID09PSBcIndpZHRoXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRXaWR0aFRvQ2hpbGRyZW47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRIZWlnaHRUb0NoaWxkcmVuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgaXNEaW1lbnNpb25GdWxseURlZmluZWQoZGltOiBcIndpZHRoXCIgfCBcImhlaWdodFwiKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dldEFkYXB0RGltVG8oZGltKSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmICghY2hpbGQuaXNEaW1lbnNpb25GdWxseURlZmluZWQoZGltKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmlzRGltZW5zaW9uRnVsbHlEZWZpbmVkKGRpbSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXJpYWxpemVzIHRoZSBjdXJyZW50IGNvbnRyb2xcclxuICAgICAqIEBwYXJhbSBzZXJpYWxpemF0aW9uT2JqZWN0IGRlZmluZWQgdGhlIEpTT04gc2VyaWFsaXplZCBvYmplY3RcclxuICAgICAqIEBwYXJhbSBmb3JjZSBmb3JjZSBzZXJpYWxpemF0aW9uIGV2ZW4gaWYgaXNTZXJpYWxpemFibGUgPT09IGZhbHNlXHJcbiAgICAgKiBAcGFyYW0gYWxsb3dDYW52YXMgZGVmaW5lcyBpZiB0aGUgY29udHJvbCBpcyBhbGxvd2VkIHRvIHVzZSBhIENhbnZhczJEIG9iamVjdCB0byBzZXJpYWxpemUgKHRydWUgYnkgZGVmYXVsdClcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIHNlcmlhbGl6ZShzZXJpYWxpemF0aW9uT2JqZWN0OiBhbnksIGZvcmNlOiBib29sZWFuID0gZmFsc2UsIGFsbG93Q2FudmFzOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIHN1cGVyLnNlcmlhbGl6ZShzZXJpYWxpemF0aW9uT2JqZWN0LCBmb3JjZSwgYWxsb3dDYW52YXMpO1xyXG4gICAgICAgIGlmICghdGhpcy5pc1NlcmlhbGl6YWJsZSAmJiAhZm9yY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYmFja2dyb3VuZEdyYWRpZW50KSB7XHJcbiAgICAgICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QuYmFja2dyb3VuZEdyYWRpZW50ID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEdyYWRpZW50LnNlcmlhbGl6ZShzZXJpYWxpemF0aW9uT2JqZWN0LmJhY2tncm91bmRHcmFkaWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QuY2hpbGRyZW4gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5pc1NlcmlhbGl6YWJsZSB8fCBmb3JjZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRTZXJpYWxpemF0aW9uT2JqZWN0ID0ge307XHJcbiAgICAgICAgICAgICAgICBjaGlsZC5zZXJpYWxpemUoY2hpbGRTZXJpYWxpemF0aW9uT2JqZWN0LCBmb3JjZSwgYWxsb3dDYW52YXMpO1xyXG4gICAgICAgICAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5jaGlsZHJlbi5wdXNoKGNoaWxkU2VyaWFsaXphdGlvbk9iamVjdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFJlbGVhc2VzIGFzc29jaWF0ZWQgcmVzb3VyY2VzICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpIHtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baW5kZXhdLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faW50ZXJtZWRpYXRlVGV4dHVyZT8uZGlzcG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfcGFyc2VGcm9tQ29udGVudChzZXJpYWxpemVkT2JqZWN0OiBhbnksIGhvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUsIHVybFJld3JpdGVyPzogKHVybDogc3RyaW5nKSA9PiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlci5fcGFyc2VGcm9tQ29udGVudChzZXJpYWxpemVkT2JqZWN0LCBob3N0LCB1cmxSZXdyaXRlcik7XHJcbiAgICAgICAgdGhpcy5fbGluayhob3N0KTtcclxuXHJcbiAgICAgICAgLy8gR3JhZGllbnRcclxuICAgICAgICBpZiAoc2VyaWFsaXplZE9iamVjdC5iYWNrZ3JvdW5kR3JhZGllbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gVG9vbHMuSW5zdGFudGlhdGUoXCJCQUJZTE9OLkdVSS5cIiArIHNlcmlhbGl6ZWRPYmplY3QuYmFja2dyb3VuZEdyYWRpZW50LmNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tncm91bmRHcmFkaWVudCA9IG5ldyBjbGFzc05hbWUoKTtcclxuICAgICAgICAgICAgdGhpcy5fYmFja2dyb3VuZEdyYWRpZW50Py5wYXJzZShzZXJpYWxpemVkT2JqZWN0LmJhY2tncm91bmRHcmFkaWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXNlcmlhbGl6ZWRPYmplY3QuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZERhdGEgb2Ygc2VyaWFsaXplZE9iamVjdC5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICB0aGlzLmFkZENvbnRyb2woQ29udHJvbC5QYXJzZShjaGlsZERhdGEsIGhvc3QsIHVybFJld3JpdGVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBpc1JlYWR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoIWNoaWxkLmlzUmVhZHkoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuQ29udGFpbmVyXCIsIENvbnRhaW5lcik7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgT2JzZXJ2ZXIgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyLCBWZWN0b3IzLCBNYXRyaXggfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IFBvaW50ZXJJbmZvQmFzZSB9IGZyb20gXCJjb3JlL0V2ZW50cy9wb2ludGVyRXZlbnRzXCI7XHJcbmltcG9ydCB7IFBvaW50ZXJFdmVudFR5cGVzIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcImNvcmUvTWlzYy9sb2dnZXJcIjtcclxuaW1wb3J0IHsgVG9vbHMgfSBmcm9tIFwiY29yZS9NaXNjL3Rvb2xzXCI7XHJcbmltcG9ydCB0eXBlIHsgVHJhbnNmb3JtTm9kZSB9IGZyb20gXCJjb3JlL01lc2hlcy90cmFuc2Zvcm1Ob2RlXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5cclxuaW1wb3J0IHR5cGUgeyBDb250YWluZXIgfSBmcm9tIFwiLi9jb250YWluZXJcIjtcclxuaW1wb3J0IHR5cGUgeyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIH0gZnJvbSBcIi4uL2FkdmFuY2VkRHluYW1pY1RleHR1cmVcIjtcclxuaW1wb3J0IHsgVmFsdWVBbmRVbml0IH0gZnJvbSBcIi4uL3ZhbHVlQW5kVW5pdFwiO1xyXG5pbXBvcnQgeyBNZWFzdXJlIH0gZnJvbSBcIi4uL21lYXN1cmVcIjtcclxuaW1wb3J0IHR5cGUgeyBTdHlsZSB9IGZyb20gXCIuLi9zdHlsZVwiO1xyXG5pbXBvcnQgeyBNYXRyaXgyRCwgVmVjdG9yMldpdGhJbmZvIH0gZnJvbSBcIi4uL21hdGgyRFwiO1xyXG5pbXBvcnQgeyBHZXRDbGFzcywgUmVnaXN0ZXJDbGFzcyB9IGZyb20gXCJjb3JlL01pc2MvdHlwZVN0b3JlXCI7XHJcbmltcG9ydCB7IHNlcmlhbGl6ZSB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9yc1wiO1xyXG5pbXBvcnQgeyBTZXJpYWxpemF0aW9uSGVscGVyIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzLnNlcmlhbGl6YXRpb25cIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzR3JhZGllbnQsIElDYW52YXNSZW5kZXJpbmdDb250ZXh0IH0gZnJvbSBcImNvcmUvRW5naW5lcy9JQ2FudmFzXCI7XHJcbmltcG9ydCB7IEVuZ2luZVN0b3JlIH0gZnJvbSBcImNvcmUvRW5naW5lcy9lbmdpbmVTdG9yZVwiO1xyXG5pbXBvcnQgdHlwZSB7IElBY2Nlc3NpYmlsaXR5VGFnIH0gZnJvbSBcImNvcmUvSUFjY2Vzc2liaWxpdHlUYWdcIjtcclxuaW1wb3J0IHR5cGUgeyBJS2V5Ym9hcmRFdmVudCwgSVBvaW50ZXJFdmVudCB9IGZyb20gXCJjb3JlL0V2ZW50cy9kZXZpY2VJbnB1dEV2ZW50c1wiO1xyXG5pbXBvcnQgdHlwZSB7IElBbmltYXRhYmxlIH0gZnJvbSBcImNvcmUvQW5pbWF0aW9ucy9hbmltYXRhYmxlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgdHlwZSB7IEFuaW1hdGlvbiB9IGZyb20gXCJjb3JlL0FuaW1hdGlvbnMvYW5pbWF0aW9uXCI7XHJcbmltcG9ydCB0eXBlIHsgQmFzZUdyYWRpZW50IH0gZnJvbSBcIi4vZ3JhZGllbnQvQmFzZUdyYWRpZW50XCI7XHJcbmltcG9ydCB0eXBlIHsgQWJzdHJhY3RFbmdpbmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL2Fic3RyYWN0RW5naW5lXCI7XHJcbmltcG9ydCB0eXBlIHsgSUZvY3VzYWJsZUNvbnRyb2wgfSBmcm9tIFwiLi9mb2N1c2FibGVDb250cm9sXCI7XHJcblxyXG4vKipcclxuICogUm9vdCBjbGFzcyB1c2VkIGZvciBhbGwgMkQgY29udHJvbHNcclxuICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNjb250cm9sc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbnRyb2wgaW1wbGVtZW50cyBJQW5pbWF0YWJsZSwgSUZvY3VzYWJsZUNvbnRyb2wge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgYWxwaGEgbXVzdCBiZSBhbiBpbmhlcml0ZWQgdmFsdWUgKGZhbHNlIGJ5IGRlZmF1bHQpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQWxsb3dBbHBoYUluaGVyaXRhbmNlID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBfYWxwaGEgPSAxO1xyXG4gICAgcHJpdmF0ZSBfYWxwaGFTZXQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX3pJbmRleCA9IDA7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2hvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmU7XHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBjb250cm9sIHBhcmVudCAqL1xyXG4gICAgcHVibGljIHBhcmVudDogTnVsbGFibGU8Q29udGFpbmVyPjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfY3VycmVudE1lYXN1cmUgPSBNZWFzdXJlLkVtcHR5KCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3RlbXBQYWRkaW5nTWVhc3VyZSA9IE1lYXN1cmUuRW1wdHkoKTtcclxuICAgIHByaXZhdGUgX2ZvbnRGYW1pbHkgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBfZm9udFN0eWxlID0gXCJcIjtcclxuICAgIHByaXZhdGUgX2ZvbnRXZWlnaHQgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBfZm9udFNpemUgPSBuZXcgVmFsdWVBbmRVbml0KDE4LCBWYWx1ZUFuZFVuaXQuVU5JVE1PREVfUElYRUwsIGZhbHNlKTtcclxuICAgIHByaXZhdGUgX2ZvbnQ6IHN0cmluZztcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfd2lkdGggPSBuZXcgVmFsdWVBbmRVbml0KDEsIFZhbHVlQW5kVW5pdC5VTklUTU9ERV9QRVJDRU5UQUdFLCBmYWxzZSk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2hlaWdodCA9IG5ldyBWYWx1ZUFuZFVuaXQoMSwgVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BFUkNFTlRBR0UsIGZhbHNlKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByb3RlY3RlZCBfZm9udE9mZnNldDogeyBhc2NlbnQ6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXI7IGRlc2NlbnQ6IG51bWJlciB9O1xyXG4gICAgcHJpdmF0ZSBfY29sb3IgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBfc3R5bGU6IE51bGxhYmxlPFN0eWxlPiA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9zdHlsZU9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxTdHlsZT4+O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgX3ZlcnRpY2FsQWxpZ25tZW50ID0gQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9pc0RpcnR5ID0gdHJ1ZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByb3RlY3RlZCBfd2FzRGlydHkgPSBmYWxzZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfdGVtcFBhcmVudE1lYXN1cmUgPSBNZWFzdXJlLkVtcHR5KCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3ByZXZDdXJyZW50TWVhc3VyZVRyYW5zZm9ybWVkSW50b0dsb2JhbFNwYWNlID0gTWVhc3VyZS5FbXB0eSgpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9jYWNoZWRQYXJlbnRNZWFzdXJlID0gTWVhc3VyZS5FbXB0eSgpO1xyXG4gICAgcHJpdmF0ZSBfZGVzY2VuZGFudHNPbmx5UGFkZGluZyA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfcGFkZGluZ0xlZnQgPSBuZXcgVmFsdWVBbmRVbml0KDApO1xyXG4gICAgcHJpdmF0ZSBfcGFkZGluZ1JpZ2h0ID0gbmV3IFZhbHVlQW5kVW5pdCgwKTtcclxuICAgIHByaXZhdGUgX3BhZGRpbmdUb3AgPSBuZXcgVmFsdWVBbmRVbml0KDApO1xyXG4gICAgcHJpdmF0ZSBfcGFkZGluZ0JvdHRvbSA9IG5ldyBWYWx1ZUFuZFVuaXQoMCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2xlZnQgPSBuZXcgVmFsdWVBbmRVbml0KDApO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF90b3AgPSBuZXcgVmFsdWVBbmRVbml0KDApO1xyXG4gICAgcHJpdmF0ZSBfc2NhbGVYID0gMS4wO1xyXG4gICAgcHJpdmF0ZSBfc2NhbGVZID0gMS4wO1xyXG4gICAgcHJpdmF0ZSBfcm90YXRpb24gPSAwO1xyXG4gICAgcHJpdmF0ZSBfdHJhbnNmb3JtQ2VudGVyWCA9IDAuNTtcclxuICAgIHByaXZhdGUgX3RyYW5zZm9ybUNlbnRlclkgPSAwLjU7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3RyYW5zZm9ybU1hdHJpeCA9IE1hdHJpeDJELklkZW50aXR5KCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgX2ludmVydFRyYW5zZm9ybU1hdHJpeCA9IE1hdHJpeDJELklkZW50aXR5KCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgX3RyYW5zZm9ybWVkUG9zaXRpb24gPSBWZWN0b3IyLlplcm8oKTtcclxuICAgIHByaXZhdGUgX2lzTWF0cml4RGlydHkgPSB0cnVlO1xyXG4gICAgcHJpdmF0ZSBfY2FjaGVkT2Zmc2V0WDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfY2FjaGVkT2Zmc2V0WTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfaXNWaXNpYmxlID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX2lzSGlnaGxpZ2h0ZWQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2hpZ2hsaWdodENvbG9yID0gXCIjNGFmZmZmXCI7XHJcbiAgICBwcm90ZWN0ZWQgX2hpZ2hsaWdodExpbmVXaWR0aCA9IDI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2xpbmtlZE1lc2g6IE51bGxhYmxlPFRyYW5zZm9ybU5vZGU+O1xyXG4gICAgcHJpdmF0ZSBfZm9udFNldCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfZHVtbXlWZWN0b3IyID0gVmVjdG9yMi5aZXJvKCk7XHJcbiAgICBwcml2YXRlIF9kb3duQ291bnQgPSAwO1xyXG4gICAgcHJpdmF0ZSBfZW50ZXJDb3VudCA9IC0xO1xyXG4gICAgcHJpdmF0ZSBfZG9Ob3RSZW5kZXIgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2Rvd25Qb2ludGVySWRzOiB7IFtpZDogbnVtYmVyXTogYm9vbGVhbiB9ID0ge307XHJcbiAgICBwcml2YXRlIF9ldmFsdWF0ZWRNZWFzdXJlID0gbmV3IE1lYXN1cmUoMCwgMCwgMCwgMCk7XHJcbiAgICBwcml2YXRlIF9ldmFsdWF0ZWRQYXJlbnRNZWFzdXJlID0gbmV3IE1lYXN1cmUoMCwgMCwgMCwgMCk7XHJcbiAgICBwcm90ZWN0ZWQgX2lzRW5hYmxlZCA9IHRydWU7XHJcbiAgICBwcm90ZWN0ZWQgX2Rpc2FibGVkQ29sb3IgPSBcIiM5YTlhOWFcIjtcclxuICAgIHByb3RlY3RlZCBfZGlzYWJsZWRDb2xvckl0ZW0gPSBcIiM2YTZhNmFcIjtcclxuICAgIHByb3RlY3RlZCBfaXNSZWFkT25seSA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfZ3JhZGllbnQ6IE51bGxhYmxlPEJhc2VHcmFkaWVudD4gPSBudWxsO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9yZWJ1aWxkTGF5b3V0ID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF91cmxSZXdyaXRlcj86ICh1cmw6IHN0cmluZykgPT4gc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2JzZXJ2YWJsZSB0aGF0IGZpcmVzIHdoZW4gdGhlIGNvbnRyb2wncyBlbmFibGVkIHN0YXRlIGNoYW5nZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uRW5hYmxlZFN0YXRlQ2hhbmdlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxib29sZWFuPigpO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfY3VzdG9tRGF0YTogYW55ID0ge307XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9pc0NsaXBwZWQgPSBmYWxzZTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2F1dG9tYXRpY1NpemUgPSBmYWxzZTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3RhZzogYW55O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSB1bmlxdWUgaWQgb2YgdGhlIG5vZGUuIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBudW1iZXIgd2lsbCBiZSB1cGRhdGVkIHdoZW4gdGhlIGNvbnRyb2wgaXMgYWRkZWQgdG8gYSBjb250YWluZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVuaXF1ZUlkOiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGNvbnRyb2wgaXMgcmVhZG9ubHkgKGRlZmF1bHQ6IGZhbHNlKS5cclxuICAgICAqIEEgcmVhZG9ubHkgY29udHJvbCB3aWxsIHN0aWxsIHJhaXNlIHBvaW50ZXIgZXZlbnRzIGJ1dCB3aWxsIG5vdCByZWFjdCB0byB0aGVtXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNSZWFkT25seSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNSZWFkT25seTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGlzUmVhZE9ubHkodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9pc1JlYWRPbmx5ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSB0cmFuc2Zvcm1lZCBtZWFzdXJlLCB0aGF0IGlzIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIGNvbnRyb2wgYWZ0ZXIgYXBwbHlpbmcgYWxsIHRyYW5zZm9ybWF0aW9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHRyYW5zZm9ybWVkTWVhc3VyZSgpOiBNZWFzdXJlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZXZhbHVhdGVkTWVhc3VyZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhbiBvYmplY3QgdXNlZCB0byBzdG9yZSB1c2VyIGRlZmluZWQgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIG1ldGFkYXRhOiBhbnkgPSBudWxsO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGNvbnRyb2wgY2FuIGJlIGhpdCB3aXRoIHBvaW50ZXIgZXZlbnRzICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBpc0hpdFRlc3RWaXNpYmxlID0gdHJ1ZTtcclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGNvbnRyb2wgY2FuIGJsb2NrIHBvaW50ZXIgZXZlbnRzLiBGYWxzZSBieSBkZWZhdWx0IGV4Y2VwdCBvbiB0aGUgZm9sbG93aW5nIGNvbnRyb2xzOlxyXG4gICAgICogKiBCdXR0b24gY29udHJvbHMgKEJ1dHRvbiwgUmFkaW9CdXR0b24sIFRvZ2dsZUJ1dHRvbilcclxuICAgICAqICogQ2hlY2tib3hcclxuICAgICAqICogQ29sb3JQaWNrZXJcclxuICAgICAqICogSW5wdXRUZXh0XHJcbiAgICAgKiAqIFNsaWRlclxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBpc1BvaW50ZXJCbG9ja2VyID0gZmFsc2U7XHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBjb250cm9sIGNhbiBiZSBmb2N1c2FibGUgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGlzRm9jdXNJbnZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX2NsaXBDaGlsZHJlbiA9IHRydWU7XHJcbiAgICAvKipcclxuICAgICAqIFNldHMvR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgY2hpbGRyZW4gYXJlIGNsaXBwZWQgdG8gdGhlIGN1cnJlbnQgY29udHJvbCBib3VuZHMuXHJcbiAgICAgKiBQbGVhc2Ugbm90ZSB0aGF0IG5vdCBjbGlwcGluZyBjaGlsZHJlbiBtYXkgZ2VuZXJhdGUgaXNzdWVzIHdpdGggYWR0LnVzZUludmFsaWRhdGVSZWN0T3B0aW1pemF0aW9uIHNvIGl0IGlzIHJlY29tbWVuZGVkIHRvIHR1cm4gdGhpcyBvcHRpbWl6YXRpb24gb2ZmIGlmIHlvdSB3YW50IHRvIHVzZSB1bmNsaXBwZWQgY2hpbGRyZW5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCBjbGlwQ2hpbGRyZW4odmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9jbGlwQ2hpbGRyZW4gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgY2xpcENoaWxkcmVuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbGlwQ2hpbGRyZW47XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9jbGlwQ29udGVudCA9IHRydWU7XHJcbiAgICAvKipcclxuICAgICAqIFNldHMvR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IGNvbnRyb2wgY29udGVudCBtdXN0IGJlIGNsaXBwZWRcclxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgbm90IGNsaXBwaW5nIGNvbnRlbnQgbWF5IGdlbmVyYXRlIGlzc3VlcyB3aXRoIGFkdC51c2VJbnZhbGlkYXRlUmVjdE9wdGltaXphdGlvbiBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB0dXJuIHRoaXMgb3B0aW1pemF0aW9uIG9mZiBpZiB5b3Ugd2FudCB0byB1c2UgdW5jbGlwcGVkIGNoaWxkcmVuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgY2xpcENvbnRlbnQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9jbGlwQ29udGVudCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBjbGlwQ29udGVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpcENvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgdGhhdCB0aGUgY3VycmVudCBjb250cm9sIHNob3VsZCBjYWNoZSBpdHMgcmVuZGVyaW5nICh1c2VmdWwgd2hlbiB0aGUgY29udHJvbCBkb2VzIG5vdCBjaGFuZ2Ugb2Z0ZW4pXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHVzZUJpdG1hcENhY2hlID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBfY2FjaGVEYXRhOiBOdWxsYWJsZTxJbWFnZURhdGE+O1xyXG5cclxuICAgIHByaXZhdGUgX3NoYWRvd09mZnNldFggPSAwO1xyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIG9mZnNldCB0byBhcHBseSBvbiBYIGF4aXMgdG8gcmVuZGVyIHRoZSBzaGFkb3cgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBzaGFkb3dPZmZzZXRYKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFkb3dPZmZzZXRYO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2hhZG93T2Zmc2V0WCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NoYWRvd09mZnNldFggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NoYWRvd09mZnNldFggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NoYWRvd09mZnNldFkgPSAwO1xyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIG9mZnNldCB0byBhcHBseSBvbiBZIGF4aXMgdG8gcmVuZGVyIHRoZSBzaGFkb3cgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBzaGFkb3dPZmZzZXRZKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFkb3dPZmZzZXRZO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2hhZG93T2Zmc2V0WSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NoYWRvd09mZnNldFkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NoYWRvd09mZnNldFkgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NoYWRvd0JsdXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfcHJldmlvdXNTaGFkb3dCbHVyID0gMDtcclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBhbW91bnQgb2YgYmx1ciB0byB1c2UgdG8gcmVuZGVyIHRoZSBzaGFkb3cgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBzaGFkb3dCbHVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFkb3dCbHVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2hhZG93Qmx1cih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NoYWRvd0JsdXIgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ByZXZpb3VzU2hhZG93Qmx1ciA9IHRoaXMuX3NoYWRvd0JsdXI7XHJcblxyXG4gICAgICAgIHRoaXMuX3NoYWRvd0JsdXIgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NoYWRvd0NvbG9yID0gXCJibGFja1wiO1xyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIGNvbG9yIG9mIHRoZSBzaGFkb3cgKGJsYWNrIGJ5IGRlZmF1bHQgaWUuIFwiIzAwMFwiKSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHNoYWRvd0NvbG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFkb3dDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHNoYWRvd0NvbG9yKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2hhZG93Q29sb3IgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NoYWRvd0NvbG9yID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBjdXJzb3IgdG8gdXNlIHdoZW4gdGhlIGNvbnRyb2wgaXMgaG92ZXJlZCAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaG92ZXJDdXJzb3IgPSBcIlwiO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByb3RlY3RlZCBfbGlua09mZnNldFggPSBuZXcgVmFsdWVBbmRVbml0KDApO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9saW5rT2Zmc2V0WSA9IG5ldyBWYWx1ZUFuZFVuaXQoMCk7XHJcblxyXG4gICAgLy8gUHJvcGVydGllc1xyXG5cclxuICAgIC8qKiBHZXRzIHRoZSBjb250cm9sIHR5cGUgbmFtZSAqL1xyXG4gICAgcHVibGljIGdldCB0eXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUeXBlTmFtZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNsYXNzIG5hbWUgb2YgdGhlIGNvbnRyb2wuXHJcbiAgICAgKiBAcmV0dXJucyBjdXJyZW50IGNsYXNzIG5hbWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUeXBlTmFtZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBhY2Nlc3NpYmlsaXR5IHRhZyB0byBkZXNjcmliZSB0aGUgY29udHJvbCBmb3IgYWNjZXNzaWJpbGl0eSBwdXJwb3NlLlxyXG4gICAgICogQnkgZGVmYXVsdCwgR1VJIGNvbnRyb2xzIGFscmVhZHkgaW5kaWNhdGUgYWNjZXNzaWJpbGl0eSBpbmZvLCBidXQgb25lIGNhbiBvdmVycmlkZSB0aGUgaW5mbyB1c2luZyB0aGlzIHRhZy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCBhY2Nlc3NpYmlsaXR5VGFnKHZhbHVlOiBOdWxsYWJsZTxJQWNjZXNzaWJpbGl0eVRhZz4pIHtcclxuICAgICAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5VGFnID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5vbkFjY2Vzc2liaWxpdHlUYWdDaGFuZ2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgYWNjZXNzaWJpbGl0eVRhZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWNjZXNzaWJpbGl0eVRhZztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2FjY2Vzc2liaWxpdHlUYWc6IE51bGxhYmxlPElBY2Nlc3NpYmlsaXR5VGFnPiA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPYnNlcnZhYmxlIHRoYXQgZmlyZXMgd2hlbmV2ZXIgdGhlIGFjY2Vzc2liaWxpdHkgZXZlbnQgb2YgdGhlIGNvbnRyb2wgaGFzIGNoYW5nZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uQWNjZXNzaWJpbGl0eVRhZ0NoYW5nZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8TnVsbGFibGU8SUFjY2Vzc2liaWxpdHlUYWc+PigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gZXZlbnQgdHJpZ2dlcmVkIHdoZW4gcG9pbnRlciB3aGVlbCBpcyBzY3JvbGxlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25XaGVlbE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxWZWN0b3IyPigpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiB0aGUgcG9pbnRlciBtb3ZlcyBvdmVyIHRoZSBjb250cm9sLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Qb2ludGVyTW92ZU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxWZWN0b3IyPigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gZXZlbnQgdHJpZ2dlcmVkIHdoZW4gdGhlIHBvaW50ZXIgbW92ZXMgb3V0IG9mIHRoZSBjb250cm9sLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Qb2ludGVyT3V0T2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPENvbnRyb2w+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiB0aGUgcG9pbnRlciB0YXBzIHRoZSBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblBvaW50ZXJEb3duT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFZlY3RvcjJXaXRoSW5mbz4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGV2ZW50IHRyaWdnZXJlZCB3aGVuIHBvaW50ZXIgdXBcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uUG9pbnRlclVwT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFZlY3RvcjJXaXRoSW5mbz4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGV2ZW50IHRyaWdnZXJlZCB3aGVuIGEgY29udHJvbCBpcyBjbGlja2VkIG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblBvaW50ZXJDbGlja09ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxWZWN0b3IyV2l0aEluZm8+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiBhIGNvbnRyb2wgcmVjZWl2ZXMgYW4gRU5URVIga2V5IGRvd24gZXZlbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uRW50ZXJQcmVzc2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPENvbnRyb2w+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiBwb2ludGVyIGVudGVycyB0aGUgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Qb2ludGVyRW50ZXJPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8Q29udHJvbD4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGV2ZW50IHRyaWdnZXJlZCB3aGVuIHRoZSBjb250cm9sIGlzIG1hcmtlZCBhcyBkaXJ0eVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25EaXJ0eU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxDb250cm9sPigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gZXZlbnQgdHJpZ2dlcmVkIGJlZm9yZSBkcmF3aW5nIHRoZSBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkJlZm9yZURyYXdPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8Q29udHJvbD4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGV2ZW50IHRyaWdnZXJlZCBhZnRlciB0aGUgY29udHJvbCB3YXMgZHJhd25cclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uQWZ0ZXJEcmF3T2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPENvbnRyb2w+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiB0aGUgY29udHJvbCBoYXMgYmVlbiBkaXNwb3NlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25EaXNwb3NlT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPENvbnRyb2w+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiB0aGUgY29udHJvbCBpc1Zpc2libGUgaXMgY2hhbmdlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Jc1Zpc2libGVDaGFuZ2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPGJvb2xlYW4+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGhvc3RpbmcgQWR2YW5jZWREeW5hbWljVGV4dHVyZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGhvc3QoKTogQWR2YW5jZWREeW5hbWljVGV4dHVyZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hvc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0IGluZm9ybWF0aW9uIGFib3V0IGZvbnQgb2Zmc2V0cyAodXNlZCB0byByZW5kZXIgYW5kIGFsaWduIHRleHQpICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgZm9udE9mZnNldCgpOiB7IGFzY2VudDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcjsgZGVzY2VudDogbnVtYmVyIH0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb250T2Zmc2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZm9udE9mZnNldChvZmZzZXQ6IHsgYXNjZW50OiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyBkZXNjZW50OiBudW1iZXIgfSkge1xyXG4gICAgICAgIHRoaXMuX2ZvbnRPZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhbHBoYSB2YWx1ZSBmb3IgdGhlIGNvbnRyb2wgKDEgbWVhbnMgb3BhcXVlIGFuZCAwIG1lYW5zIGVudGlyZWx5IHRyYW5zcGFyZW50KSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGFscGhhKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FscGhhO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYWxwaGEodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9hbHBoYSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9hbHBoYVNldCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fYWxwaGEgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgbnVtYmVyIGluZGljYXRpbmcgc2l6ZSBvZiBzdHJva2Ugd2Ugd2FudCB0byBoaWdobGlnaHQgdGhlIGNvbnRyb2wgd2l0aCAobW9zdGx5IGZvciBkZWJ1Z2dpbmcgcHVycG9zZSlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBoaWdobGlnaHRMaW5lV2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGlnaGxpZ2h0TGluZVdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaGlnaGxpZ2h0TGluZVdpZHRoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5faGlnaGxpZ2h0TGluZVdpZHRoID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9oaWdobGlnaHRMaW5lV2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgd2Ugd2FudCB0byBoaWdobGlnaHQgdGhlIGNvbnRyb2wgKG1vc3RseSBmb3IgZGVidWdnaW5nIHB1cnBvc2UpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNIaWdobGlnaHRlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNIaWdobGlnaHRlZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGlzSGlnaGxpZ2h0ZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5faXNIaWdobGlnaHRlZCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faXNIaWdobGlnaHRlZCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGNvbnRyb2wgc2hvdWxkIGJlIHNlcmlhbGl6ZWQuIERlZmF1bHRzIHRvIHRydWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGlzU2VyaWFsaXphYmxlOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIHN0cmluZyBkZWZpbmluZyB0aGUgY29sb3IgdG8gdXNlIGZvciBoaWdobGlnaHRpbmcgdGhpcyBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaGlnaGxpZ2h0Q29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGlnaGxpZ2h0Q29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBoaWdobGlnaHRDb2xvcih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hpZ2hsaWdodENvbG9yID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9oaWdobGlnaHRDb2xvciA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHNjYWxlIGZhY3RvciBvbiBYIGF4aXMgKDEgYnkgZGVmYXVsdClcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjcm90YXRpb24tYW5kLXNjYWxpbmdcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHNjYWxlWCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zY2FsZVg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzY2FsZVgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9zY2FsZVggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NjYWxlWCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgdGhpcy5fbWFya01hdHJpeEFzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgc2NhbGUgZmFjdG9yIG9uIFkgYXhpcyAoMSBieSBkZWZhdWx0KVxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNyb3RhdGlvbi1hbmQtc2NhbGluZ1xyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgc2NhbGVZKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjYWxlWTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHNjYWxlWSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NjYWxlWSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc2NhbGVZID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB0aGlzLl9tYXJrTWF0cml4QXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIHJvdGF0aW9uIGFuZ2xlICgwIGJ5IGRlZmF1bHQpXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3JvdGF0aW9uLWFuZC1zY2FsaW5nXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCByb3RhdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yb3RhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHJvdGF0aW9uKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fcm90YXRpb24gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3JvdGF0aW9uID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB0aGlzLl9tYXJrTWF0cml4QXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIHRyYW5zZm9ybWF0aW9uIGNlbnRlciBvbiBZIGF4aXMgKDAgYnkgZGVmYXVsdClcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjcm90YXRpb24tYW5kLXNjYWxpbmdcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHRyYW5zZm9ybUNlbnRlclkoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNmb3JtQ2VudGVyWTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRyYW5zZm9ybUNlbnRlclkodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl90cmFuc2Zvcm1DZW50ZXJZID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90cmFuc2Zvcm1DZW50ZXJZID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB0aGlzLl9tYXJrTWF0cml4QXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIHRyYW5zZm9ybWF0aW9uIGNlbnRlciBvbiBYIGF4aXMgKDAgYnkgZGVmYXVsdClcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjcm90YXRpb24tYW5kLXNjYWxpbmdcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHRyYW5zZm9ybUNlbnRlclgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNmb3JtQ2VudGVyWDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRyYW5zZm9ybUNlbnRlclgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl90cmFuc2Zvcm1DZW50ZXJYID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90cmFuc2Zvcm1DZW50ZXJYID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB0aGlzLl9tYXJrTWF0cml4QXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBob3Jpem9udGFsIGFsaWdubWVudFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNhbGlnbm1lbnRzXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBob3Jpem9udGFsQWxpZ25tZW50KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hvcml6b250YWxBbGlnbm1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBob3Jpem9udGFsQWxpZ25tZW50KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5faG9yaXpvbnRhbEFsaWdubWVudCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faG9yaXpvbnRhbEFsaWdubWVudCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHZlcnRpY2FsIGFsaWdubWVudFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNhbGlnbm1lbnRzXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCB2ZXJ0aWNhbEFsaWdubWVudCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJ0aWNhbEFsaWdubWVudDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHZlcnRpY2FsQWxpZ25tZW50KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fdmVydGljYWxBbGlnbm1lbnQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2FsQWxpZ25tZW50ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9maXhlZFJhdGlvID0gMDtcclxuICAgIHB1YmxpYyBzZXQgZml4ZWRSYXRpbyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZpeGVkUmF0aW8gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2ZpeGVkUmF0aW8gPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgZml4ZWQgcmF0aW8gZm9yIHRoaXMgY29udHJvbC5cclxuICAgICAqIFdoZW4gZGlmZmVyZW50IGZyb20gMCwgdGhlIHJhdGlvIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGUgXCJzZWNvbmRcIiBkaW1lbnNpb24uXHJcbiAgICAgKiBUaGUgZmlyc3QgZGltZW5zaW9uIHVzZWQgaW4gdGhlIGNvbXB1dGF0aW9uIGlzIHRoZSBsYXN0IG9uZSBzZXQgKGJ5IHNldHRpbmcgd2lkdGggLyB3aWR0aEluUGl4ZWxzIG9yIGhlaWdodCAvIGhlaWdodEluUGl4ZWxzKSwgYW5kIHRoZVxyXG4gICAgICogc2Vjb25kIGRpbWVuc2lvbiBpcyBjb21wdXRlZCBhcyBmaXJzdCBkaW1lbnNpb24gKiBmaXhlZFJhdGlvXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBmaXhlZFJhdGlvKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpeGVkUmF0aW87XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZml4ZWRSYXRpb01hc3RlcklzV2lkdGggPSB0cnVlO1xyXG4gICAgc2V0IGZpeGVkUmF0aW9NYXN0ZXJJc1dpZHRoKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZpeGVkUmF0aW9NYXN0ZXJJc1dpZHRoID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2ZpeGVkUmF0aW9NYXN0ZXJJc1dpZHRoID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IHRoZSBmaXhlZCByYXRpbyBpcyBzZXQgb24gdGhlIHdpZHRoIGluc3RlYWQgb2YgdGhlIGhlaWdodC4gVHJ1ZSBieSBkZWZhdWx0LlxyXG4gICAgICogV2hlbiB0aGUgaGVpZ2h0IG9mIGEgY29udHJvbCBpcyBzZXQsIHRoaXMgcHJvcGVydHkgaXMgY2hhbmdlZCB0byBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBnZXQgZml4ZWRSYXRpb01hc3RlcklzV2lkdGgoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpeGVkUmF0aW9NYXN0ZXJJc1dpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGNvbnRyb2wgd2lkdGhcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjcG9zaXRpb24tYW5kLXNpemVcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHdpZHRoKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgd2lkdGgodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2ZpeGVkUmF0aW9NYXN0ZXJJc1dpZHRoID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3dpZHRoLnRvU3RyaW5nKHRoaXMuX2hvc3QpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fd2lkdGguZnJvbVN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGNvbnRyb2wgd2lkdGggaW4gcGl4ZWxcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjcG9zaXRpb24tYW5kLXNpemVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB3aWR0aEluUGl4ZWxzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoLmdldFZhbHVlSW5QaXhlbCh0aGlzLl9ob3N0LCB0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLndpZHRoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHdpZHRoSW5QaXhlbHModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9maXhlZFJhdGlvTWFzdGVySXNXaWR0aCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHZhbHVlICsgXCJweFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGNvbnRyb2wgaGVpZ2h0XHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3Bvc2l0aW9uLWFuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBoZWlnaHQoKTogc3RyaW5nIHwgbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0LnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaGVpZ2h0KHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9maXhlZFJhdGlvTWFzdGVySXNXaWR0aCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faGVpZ2h0LnRvU3RyaW5nKHRoaXMuX2hvc3QpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faGVpZ2h0LmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGNvbnRyb2wgaGVpZ2h0IGluIHBpeGVsXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3Bvc2l0aW9uLWFuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaGVpZ2h0SW5QaXhlbHMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0LmdldFZhbHVlSW5QaXhlbCh0aGlzLl9ob3N0LCB0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBoZWlnaHRJblBpeGVscyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2ZpeGVkUmF0aW9NYXN0ZXJJc1dpZHRoID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB2YWx1ZSArIFwicHhcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXQgZm9udCBmYW1pbHkgKi9cclxuICAgIHB1YmxpYyBnZXQgZm9udEZhbWlseSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb250RmFtaWx5O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZm9udEZhbWlseSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnRGYW1pbHkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvbnRGYW1pbHkgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9yZXNldEZvbnRDYWNoZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZm9udCBzdHlsZSAqL1xyXG4gICAgcHVibGljIGdldCBmb250U3R5bGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZm9udFN0eWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZm9udFN0eWxlKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fZm9udFN0eWxlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9mb250U3R5bGUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9yZXNldEZvbnRDYWNoZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZm9udCB3ZWlnaHQgKi9cclxuICAgIHB1YmxpYyBnZXQgZm9udFdlaWdodCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb250V2VpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZm9udFdlaWdodCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnRXZWlnaHQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvbnRXZWlnaHQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9yZXNldEZvbnRDYWNoZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHN0eWxlXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3N0eWxlc1xyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgc3R5bGUoKTogTnVsbGFibGU8U3R5bGU+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3R5bGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzdHlsZSh2YWx1ZTogTnVsbGFibGU8U3R5bGU+KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N0eWxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlLm9uQ2hhbmdlZE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3N0eWxlT2JzZXJ2ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdHlsZU9ic2VydmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3N0eWxlID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zdHlsZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdHlsZU9ic2VydmVyID0gdGhpcy5fc3R5bGUub25DaGFuZ2VkT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0Rm9udENhY2hlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB0aGlzLl9yZXNldEZvbnRDYWNoZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBnZXQgX2lzRm9udFNpemVJblBlcmNlbnRhZ2UoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRTaXplLmlzUGVyY2VudGFnZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGZvbnQgc2l6ZSBpbiBwaXhlbHMgKi9cclxuICAgIHB1YmxpYyBnZXQgZm9udFNpemVJblBpeGVscygpOiBudW1iZXIge1xyXG4gICAgICAgIGNvbnN0IGZvbnRTaXplVG9Vc2UgPSB0aGlzLl9zdHlsZSA/IHRoaXMuX3N0eWxlLl9mb250U2l6ZSA6IHRoaXMuX2ZvbnRTaXplO1xyXG5cclxuICAgICAgICBpZiAoZm9udFNpemVUb1VzZS5pc1BpeGVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmb250U2l6ZVRvVXNlLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZvbnRTaXplVG9Vc2UuZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX3RlbXBQYXJlbnRNZWFzdXJlLmhlaWdodCB8fCB0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBmb250U2l6ZUluUGl4ZWxzKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mb250U2l6ZSA9IHZhbHVlICsgXCJweFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZm9udCBzaXplICovXHJcbiAgICBwdWJsaWMgZ2V0IGZvbnRTaXplKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRTaXplLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZm9udFNpemUodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9mb250U2l6ZS50b1N0cmluZyh0aGlzLl9ob3N0KSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnRTaXplLmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0Rm9udENhY2hlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZm9yZWdyb3VuZCBjb2xvciAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGNvbG9yKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgY29sb3IodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb2xvciA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29sb3IgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZ3JhZGllbnQuIFNldHRpbmcgYSBncmFkaWVudCB3aWxsIG92ZXJyaWRlIHRoZSBjb2xvciAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGdyYWRpZW50KCk6IE51bGxhYmxlPEJhc2VHcmFkaWVudD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ncmFkaWVudDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGdyYWRpZW50KHZhbHVlOiBOdWxsYWJsZTxCYXNlR3JhZGllbnQ+KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyYWRpZW50ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9ncmFkaWVudCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB6IGluZGV4IHdoaWNoIGlzIHVzZWQgdG8gcmVvcmRlciBjb250cm9scyBvbiB0aGUgeiBheGlzICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgekluZGV4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3pJbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHpJbmRleCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuekluZGV4ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl96SW5kZXggPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Ll9yZU9yZGVyQ29udHJvbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgY29udHJvbCBjYW4gYmUgcmVuZGVyZWQgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBub3RSZW5kZXJhYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kb05vdFJlbmRlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IG5vdFJlbmRlcmFibGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fZG9Ob3RSZW5kZXIgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2RvTm90UmVuZGVyID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBjb250cm9sIGlzIHZpc2libGUgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBpc1Zpc2libGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmlzaWJsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGlzVmlzaWJsZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1Zpc2libGUgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzVmlzaWJsZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KHRydWUpO1xyXG5cclxuICAgICAgICB0aGlzLm9uSXNWaXNpYmxlQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IHRoZSBjb250cm9sIG5lZWRzIHRvIHVwZGF0ZSBpdHMgcmVuZGVyaW5nICovXHJcbiAgICBwdWJsaWMgZ2V0IGlzRGlydHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRGlydHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGxpbmtlZCBtZXNoIChvciBudWxsIGlmIG5vbmUpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbGlua2VkTWVzaCgpOiBOdWxsYWJsZTxUcmFuc2Zvcm1Ob2RlPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmtlZE1lc2g7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBwYWRkaW5nIHNob3VsZCB3b3JrIGxpa2UgaW4gQ1NTLlxyXG4gICAgICogQmFzaWNhbGx5LCBpdCB3aWxsIGFkZCB0aGUgcGFkZGluZyBhbW91bnQgb24gZWFjaCBzaWRlIG9mIHRoZSBwYXJlbnQgY29udHJvbCBmb3IgaXRzIGNoaWxkcmVuLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgZGVzY2VuZGFudHNPbmx5UGFkZGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVzY2VuZGFudHNPbmx5UGFkZGluZztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGRlc2NlbmRhbnRzT25seVBhZGRpbmcodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVzY2VuZGFudHNPbmx5UGFkZGluZyA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZGVzY2VuZGFudHNPbmx5UGFkZGluZyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBwYWRkaW5nIHRvIHVzZSBvbiB0aGUgbGVmdCBvZiB0aGUgY29udHJvbFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNwb3NpdGlvbi1hbmQtc2l6ZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgcGFkZGluZ0xlZnQoKTogc3RyaW5nIHwgbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGFkZGluZ0xlZnQudG9TdHJpbmcodGhpcy5faG9zdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBwYWRkaW5nTGVmdCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BhZGRpbmdMZWZ0LmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgcGFkZGluZyBpbiBwaXhlbHMgdG8gdXNlIG9uIHRoZSBsZWZ0IG9mIHRoZSBjb250cm9sXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3Bvc2l0aW9uLWFuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgcGFkZGluZ0xlZnRJblBpeGVscygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYWRkaW5nTGVmdC5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS53aWR0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBwYWRkaW5nTGVmdEluUGl4ZWxzKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IHZhbHVlICsgXCJweFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBnZXQgX3BhZGRpbmdMZWZ0SW5QaXhlbHMoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVzY2VuZGFudHNPbmx5UGFkZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnBhZGRpbmdMZWZ0SW5QaXhlbHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBwYWRkaW5nIHRvIHVzZSBvbiB0aGUgcmlnaHQgb2YgdGhlIGNvbnRyb2xcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjcG9zaXRpb24tYW5kLXNpemVcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHBhZGRpbmdSaWdodCgpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYWRkaW5nUmlnaHQudG9TdHJpbmcodGhpcy5faG9zdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBwYWRkaW5nUmlnaHQodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9wYWRkaW5nUmlnaHQuZnJvbVN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBwYWRkaW5nIGluIHBpeGVscyB0byB1c2Ugb24gdGhlIHJpZ2h0IG9mIHRoZSBjb250cm9sXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3Bvc2l0aW9uLWFuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgcGFkZGluZ1JpZ2h0SW5QaXhlbHMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGFkZGluZ1JpZ2h0LmdldFZhbHVlSW5QaXhlbCh0aGlzLl9ob3N0LCB0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLndpZHRoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHBhZGRpbmdSaWdodEluUGl4ZWxzKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSB2YWx1ZSArIFwicHhcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgZ2V0IF9wYWRkaW5nUmlnaHRJblBpeGVscygpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLl9kZXNjZW5kYW50c09ubHlQYWRkaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFkZGluZ1JpZ2h0SW5QaXhlbHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBwYWRkaW5nIHRvIHVzZSBvbiB0aGUgdG9wIG9mIHRoZSBjb250cm9sXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3Bvc2l0aW9uLWFuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBwYWRkaW5nVG9wKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhZGRpbmdUb3AudG9TdHJpbmcodGhpcy5faG9zdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBwYWRkaW5nVG9wKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fcGFkZGluZ1RvcC5mcm9tU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHBhZGRpbmcgaW4gcGl4ZWxzIHRvIHVzZSBvbiB0aGUgdG9wIG9mIHRoZSBjb250cm9sXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3Bvc2l0aW9uLWFuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgcGFkZGluZ1RvcEluUGl4ZWxzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhZGRpbmdUb3AuZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHBhZGRpbmdUb3BJblBpeGVscyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHZhbHVlICsgXCJweFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBnZXQgX3BhZGRpbmdUb3BJblBpeGVscygpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLl9kZXNjZW5kYW50c09ubHlQYWRkaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFkZGluZ1RvcEluUGl4ZWxzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgcGFkZGluZyB0byB1c2Ugb24gdGhlIGJvdHRvbSBvZiB0aGUgY29udHJvbFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNwb3NpdGlvbi1hbmQtc2l6ZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgcGFkZGluZ0JvdHRvbSgpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYWRkaW5nQm90dG9tLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgcGFkZGluZ0JvdHRvbSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BhZGRpbmdCb3R0b20uZnJvbVN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBwYWRkaW5nIGluIHBpeGVscyB0byB1c2Ugb24gdGhlIGJvdHRvbSBvZiB0aGUgY29udHJvbFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNwb3NpdGlvbi1hbmQtc2l6ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHBhZGRpbmdCb3R0b21JblBpeGVscygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYWRkaW5nQm90dG9tLmdldFZhbHVlSW5QaXhlbCh0aGlzLl9ob3N0LCB0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBwYWRkaW5nQm90dG9tSW5QaXhlbHModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSB2YWx1ZSArIFwicHhcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgZ2V0IF9wYWRkaW5nQm90dG9tSW5QaXhlbHMoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVzY2VuZGFudHNPbmx5UGFkZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnBhZGRpbmdCb3R0b21JblBpeGVscztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIGxlZnQgY29vcmRpbmF0ZSBvZiB0aGUgY29udHJvbFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNwb3NpdGlvbi1hbmQtc2l6ZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgbGVmdCgpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sZWZ0LnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbGVmdCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2xlZnQuZnJvbVN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBsZWZ0IGNvb3JkaW5hdGUgaW4gcGl4ZWxzIG9mIHRoZSBjb250cm9sXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3Bvc2l0aW9uLWFuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbGVmdEluUGl4ZWxzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlZnQuZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUud2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbGVmdEluUGl4ZWxzKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gdmFsdWUgKyBcInB4XCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0b3AgY29vcmRpbmF0ZSBvZiB0aGUgY29udHJvbFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNwb3NpdGlvbi1hbmQtc2l6ZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgdG9wKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvcC50b1N0cmluZyh0aGlzLl9ob3N0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRvcCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RvcC5mcm9tU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHRvcCBjb29yZGluYXRlIGluIHBpeGVscyBvZiB0aGUgY29udHJvbFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNwb3NpdGlvbi1hbmQtc2l6ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHRvcEluUGl4ZWxzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvcC5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgdG9wSW5QaXhlbHModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRvcCA9IHZhbHVlICsgXCJweFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgb2Zmc2V0IG9uIFggYXhpcyB0byB0aGUgbGlua2VkIG1lc2hcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjdHJhY2tpbmctcG9zaXRpb25zXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBsaW5rT2Zmc2V0WCgpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5rT2Zmc2V0WC50b1N0cmluZyh0aGlzLl9ob3N0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGxpbmtPZmZzZXRYKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fbGlua09mZnNldFguZnJvbVN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBvZmZzZXQgaW4gcGl4ZWxzIG9uIFggYXhpcyB0byB0aGUgbGlua2VkIG1lc2hcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjdHJhY2tpbmctcG9zaXRpb25zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbGlua09mZnNldFhJblBpeGVscygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5rT2Zmc2V0WC5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS53aWR0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBsaW5rT2Zmc2V0WEluUGl4ZWxzKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5saW5rT2Zmc2V0WCA9IHZhbHVlICsgXCJweFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgb2Zmc2V0IG9uIFkgYXhpcyB0byB0aGUgbGlua2VkIG1lc2hcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjdHJhY2tpbmctcG9zaXRpb25zXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBsaW5rT2Zmc2V0WSgpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5rT2Zmc2V0WS50b1N0cmluZyh0aGlzLl9ob3N0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGxpbmtPZmZzZXRZKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fbGlua09mZnNldFkuZnJvbVN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBvZmZzZXQgaW4gcGl4ZWxzIG9uIFkgYXhpcyB0byB0aGUgbGlua2VkIG1lc2hcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjdHJhY2tpbmctcG9zaXRpb25zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbGlua09mZnNldFlJblBpeGVscygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5rT2Zmc2V0WS5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbGlua09mZnNldFlJblBpeGVscyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGlua09mZnNldFkgPSB2YWx1ZSArIFwicHhcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyB0aGUgY2VudGVyIGNvb3JkaW5hdGUgb24gWCBheGlzICovXHJcbiAgICBwdWJsaWMgZ2V0IGNlbnRlclgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoIC8gMjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyB0aGUgY2VudGVyIGNvb3JkaW5hdGUgb24gWSBheGlzICovXHJcbiAgICBwdWJsaWMgZ2V0IGNlbnRlclkoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC8gMjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGlmIGNvbnRyb2wgaXMgRW5hYmxlZCAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGlzRW5hYmxlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNFbmFibGVkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaXNFbmFibGVkKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzRW5hYmxlZCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAvLyBpZiB0aGlzIGNvbnRyb2wgb3IgYW55IG9mIGl0J3MgZGVzY2VuZGFudHMgYXJlIHVuZGVyIGEgcG9pbnRlciwgd2UgbmVlZCB0byBmaXJlIGEgcG9pbnRlck91dCBldmVudFxyXG4gICAgICAgIGNvbnN0IHJlY3Vyc2l2ZWx5RmlyZVBvaW50ZXJPdXQgPSAoY29udHJvbDogQ29udHJvbCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWNvbnRyb2wuaG9zdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcG9pbnRlciBpbiBjb250cm9sLmhvc3QuX2xhc3RDb250cm9sT3Zlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2wgPT09IHRoaXMuaG9zdC5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbC5fb25Qb2ludGVyT3V0KGNvbnRyb2wsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb250cm9sLmhvc3QuX2xhc3RDb250cm9sT3Zlcltwb2ludGVyXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKGNvbnRyb2wgYXMgQ29udGFpbmVyKS5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAoY29udHJvbCBhcyBDb250YWluZXIpLmNoaWxkcmVuLmZvckVhY2gocmVjdXJzaXZlbHlGaXJlUG9pbnRlck91dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlY3Vyc2l2ZWx5RmlyZVBvaW50ZXJPdXQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbkVuYWJsZWRTdGF0ZUNoYW5nZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGJhY2tncm91bmQgY29sb3Igb2YgY29udHJvbCBpZiBpdCdzIGRpc2FibGVkLiBPbmx5IGFwcGxpZXMgdG8gQnV0dG9uIGNsYXNzLiAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGRpc2FibGVkQ29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWRDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGRpc2FibGVkQ29sb3IodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXNhYmxlZENvbG9yID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9kaXNhYmxlZENvbG9yID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZnJvbnQgY29sb3Igb2YgY29udHJvbCBpZiBpdCdzIGRpc2FibGVkLiBPbmx5IGFwcGxpZXMgdG8gQ2hlY2tib3ggY2xhc3MuICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgZGlzYWJsZWRDb2xvckl0ZW0oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWRDb2xvckl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBkaXNhYmxlZENvbG9ySXRlbSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc2FibGVkQ29sb3JJdGVtID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9kaXNhYmxlZENvbG9ySXRlbSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzL3NldHMgdGhlIG92ZXJsYXAgZ3JvdXAgb2YgdGhlIGNvbnRyb2wuXHJcbiAgICAgKiBDb250cm9scyB3aXRoIG92ZXJsYXBHcm91cCBzZXQgdG8gYSBudW1iZXIgY2FuIGJlIGRlb3ZlcmxhcHBlZC5cclxuICAgICAqIENvbnRyb2xzIHdpdGggb3ZlcmxhcEdyb3VwIHNldCB0byB1bmRlZmluZWQgYXJlIG5vdCBkZW92ZXJsYXBwZWQuXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI2Rlb3ZlcmxhcHBpbmdcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgb3ZlcmxhcEdyb3VwPzogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzL3NldHMgdGhlIGRlb3ZlcmxhcCBtb3ZlbWVudCBtdWx0aXBsaWVyXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIG92ZXJsYXBEZWx0YU11bHRpcGxpZXI/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcnJheSBvZiBhbmltYXRpb25zXHJcbiAgICAgKi9cclxuICAgIGFuaW1hdGlvbnM6IE51bGxhYmxlPEFuaW1hdGlvbltdPiA9IG51bGw7XHJcblxyXG4gICAgLy8gRm9jdXMgZnVuY3Rpb25hbGl0eVxyXG5cclxuICAgIHByb3RlY3RlZCBfZm9jdXNlZENvbG9yOiBOdWxsYWJsZTxzdHJpbmc+ID0gbnVsbDtcclxuICAgIC8qKlxyXG4gICAgICogQm9yZGVyIGNvbG9yIHdoZW4gY29udHJvbCBpcyBmb2N1c2VkXHJcbiAgICAgKiBXaGVuIG5vdCBkZWZpbmVkIHRoZSBBRFQgY29sb3Igd2lsbCBiZSB1c2VkLiBJZiBubyBBRFQgY29sb3IgaXMgZGVmaW5lZCwgZm9jdXNlZCBzdGF0ZSB3b24ndCBoYXZlIGFueSBib3JkZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBmb2N1c2VkQ29sb3IoKTogTnVsbGFibGU8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvY3VzZWRDb2xvcjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgZm9jdXNlZENvbG9yKHZhbHVlOiBOdWxsYWJsZTxzdHJpbmc+KSB7XHJcbiAgICAgICAgdGhpcy5fZm9jdXNlZENvbG9yID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0YWIgaW5kZXggb2YgdGhpcyBjb250cm9sLiAtMSBpbmRpY2F0ZXMgdGhpcyBjb250cm9sIGlzIG5vdCBwYXJ0IG9mIHRoZSB0YWIgbmF2aWdhdGlvbi5cclxuICAgICAqIEEgcG9zaXRpdmUgdmFsdWUgaW5kaWNhdGVzIHRoZSBvcmRlciBvZiB0aGUgY29udHJvbCBpbiB0aGUgdGFiIG5hdmlnYXRpb24uXHJcbiAgICAgKiBBIHZhbHVlIG9mIDAgaW5kaWNhdGVkIHRoZSBjb250cm9sIHdpbGwgYmUgZm9jdXNlZCBhZnRlciBhbGwgY29udHJvbHMgd2l0aCBhIHBvc2l0aXZlIGluZGV4LlxyXG4gICAgICogTW9yZSB0aGFuIG9uZSBjb250cm9sIGNhbiBoYXZlIHRoZSBzYW1lIHRhYiBpbmRleCBhbmQgdGhlIG5hdmlnYXRpb24gd291bGQgdGhlbiBnbyB0aHJvdWdoIGFsbCBjb250cm9scyB3aXRoIHRoZSBzYW1lIHZhbHVlIGluIGFuIG9yZGVyIGRlZmluZWQgYnkgdGhlIGxheW91dCBvciB0aGUgaGllcmFyY2h5LlxyXG4gICAgICogVGhlIHZhbHVlIGNhbiBiZSBjaGFuZ2VkIGF0IGFueSB0aW1lLlxyXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL3RhYmluZGV4XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0YWJJbmRleDogbnVtYmVyID0gLTE7XHJcbiAgICBwcm90ZWN0ZWQgX2lzRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgcHJvdGVjdGVkIF91bmZvY3VzZWRDb2xvcjogTnVsbGFibGU8c3RyaW5nPiA9IG51bGw7XHJcblxyXG4gICAgLyoqIE9ic2VydmFibGUgcmFpc2VkIHdoZW4gdGhlIGNvbnRyb2wgZ2V0cyB0aGUgZm9jdXMgKi9cclxuICAgIHB1YmxpYyBvbkZvY3VzT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPENvbnRyb2w+KCk7XHJcbiAgICAvKiogT2JzZXJ2YWJsZSByYWlzZWQgd2hlbiB0aGUgY29udHJvbCBsb3NlcyB0aGUgZm9jdXMgKi9cclxuICAgIHB1YmxpYyBvbkJsdXJPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8Q29udHJvbD4oKTtcclxuICAgIC8qKiBPYnNlcnZhYmxlIHJhaXNlZCB3aGVuIGEga2V5IGV2ZW50IHdhcyBwcm9jZXNzZWQgKi9cclxuICAgIHB1YmxpYyBvbktleWJvYXJkRXZlbnRQcm9jZXNzZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SUtleWJvYXJkRXZlbnQ+KCk7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIG9uQmx1cigpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5faXNGb2N1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mb2N1c2VkQ29sb3IgJiYgdGhpcy5fdW5mb2N1c2VkQ29sb3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gU2V0IGNvbG9yIGJhY2sgdG8gc2F2ZWQgdW5mb2N1c2VkIGNvbG9yXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID0gdGhpcy5fdW5mb2N1c2VkQ29sb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vbkJsdXJPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIG9uRm9jdXMoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5faXNGb2N1c2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNlZENvbG9yKSB7XHJcbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIHVuZm9jdXNlZCBjb2xvclxyXG4gICAgICAgICAgICB0aGlzLl91bmZvY3VzZWRDb2xvciA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSB0aGlzLmZvY3VzZWRDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vbkZvY3VzT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gZ2V0IHRoZSBsaXN0IG9mIGNvbnRyb2xzIHRoYXQgc2hvdWxkIG5vdCBzdGVhbCB0aGUgZm9jdXMgZnJvbSB0aGlzIGNvbnRyb2xcclxuICAgICAqIEByZXR1cm5zIGFuIGFycmF5IG9mIGNvbnRyb2xzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBrZWVwc0ZvY3VzV2l0aCgpOiBOdWxsYWJsZTxDb250cm9sW10+IHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHRvIGZvY3VzIGEgYnV0dG9uIHByb2dyYW1tYXRpY2FsbHlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZvY3VzKCkge1xyXG4gICAgICAgIHRoaXMuX2hvc3QubW92ZUZvY3VzVG9Db250cm9sKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gdG8gdW5mb2N1cyBhIGJ1dHRvbiBwcm9ncmFtbWF0aWNhbGx5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBibHVyKCkge1xyXG4gICAgICAgIHRoaXMuX2hvc3QuZm9jdXNlZENvbnRyb2wgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB0aGUga2V5Ym9hcmQgZXZlbnRcclxuICAgICAqIEBwYXJhbSBldnQgRGVmaW5lcyB0aGUgS2V5Ym9hcmRFdmVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcHJvY2Vzc0tleWJvYXJkKGV2dDogSUtleWJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICAvLyBpZiBlbnRlciwgdHJpZ2dlciB0aGUgbmV3IG9ic2VydmFibGVcclxuICAgICAgICBpZiAoZXZ0LmtleSA9PT0gXCJFbnRlclwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25FbnRlclByZXNzZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vbktleWJvYXJkRXZlbnRQcm9jZXNzZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhldnQsIC0xLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGdW5jdGlvbnNcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29udHJvbFxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgbmFtZSBvZiB0aGUgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAvKiogZGVmaW5lcyB0aGUgbmFtZSBvZiB0aGUgY29udHJvbCAqL1xyXG4gICAgICAgIHB1YmxpYyBuYW1lPzogc3RyaW5nXHJcbiAgICApIHt9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkNvbnRyb2xcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGZpcnN0IGFzY2VuZGFudCBpbiB0aGUgaGllcmFyY2h5IG9mIHRoZSBnaXZlbiB0eXBlXHJcbiAgICAgKiBAcGFyYW0gY2xhc3NOYW1lIGRlZmluZXMgdGhlIHJlcXVpcmVkIHR5cGVcclxuICAgICAqIEByZXR1cm5zIHRoZSBhc2NlbmRhbnQgb3IgbnVsbCBpZiBub3QgZm91bmRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEFzY2VuZGFudE9mQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiBOdWxsYWJsZTxDb250cm9sPiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhcmVudC5nZXRDbGFzc05hbWUoKSA9PT0gY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXRBc2NlbmRhbnRPZkNsYXNzKGNsYXNzTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXJrIGNvbnRyb2wgZWxlbWVudCBhcyBkaXJ0eVxyXG4gICAgICogQHBhcmFtIGZvcmNlIGZvcmNlIG5vbiB2aXNpYmxlIGVsZW1lbnRzIHRvIGJlIG1hcmtlZCB0b29cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hcmtBc0RpcnR5KGZvcmNlID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eShmb3JjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXJrIHRoZSBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4gYXMgZGlydHlcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hcmtBbGxBc0RpcnR5KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX21hcmtBbGxBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9yZXNldEZvbnRDYWNoZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9mb250U2V0ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIGNvbnRhaW5lciBpcyBhbiBhc2NlbmRhbnQgb2YgdGhlIGN1cnJlbnQgY29udHJvbFxyXG4gICAgICogQHBhcmFtIGNvbnRhaW5lciBkZWZpbmVzIHRoZSBjb250YWluZXIgdG8gbG9vayBmb3JcclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGNvbnRhaW5lciBpcyBvbmUgb2YgdGhlIGFzY2VuZGFudCBvZiB0aGUgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNBc2NlbmRhbnQoY29udGFpbmVyOiBDb250cm9sKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT09IGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5pc0FzY2VuZGFudChjb250YWluZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBjb29yZGluYXRlcyBpbiBsb2NhbCBjb250cm9sIHNwYWNlXHJcbiAgICAgKiBAcGFyYW0gZ2xvYmFsQ29vcmRpbmF0ZXMgZGVmaW5lcyB0aGUgY29vcmRpbmF0ZXMgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IGNvb3JkaW5hdGVzIGluIGxvY2FsIHNwYWNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRMb2NhbENvb3JkaW5hdGVzKGdsb2JhbENvb3JkaW5hdGVzOiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gVmVjdG9yMi5aZXJvKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZ2V0TG9jYWxDb29yZGluYXRlc1RvUmVmKGdsb2JhbENvb3JkaW5hdGVzLCByZXN1bHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBjb29yZGluYXRlcyBpbiBsb2NhbCBjb250cm9sIHNwYWNlXHJcbiAgICAgKiBAcGFyYW0gZ2xvYmFsQ29vcmRpbmF0ZXMgZGVmaW5lcyB0aGUgY29vcmRpbmF0ZXMgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0gcmVzdWx0IGRlZmluZXMgdGhlIHRhcmdldCB2ZWN0b3IyIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IGNvbnRyb2xcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldExvY2FsQ29vcmRpbmF0ZXNUb1JlZihnbG9iYWxDb29yZGluYXRlczogVmVjdG9yMiwgcmVzdWx0OiBWZWN0b3IyKTogQ29udHJvbCB7XHJcbiAgICAgICAgcmVzdWx0LnggPSBnbG9iYWxDb29yZGluYXRlcy54IC0gdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdDtcclxuICAgICAgICByZXN1bHQueSA9IGdsb2JhbENvb3JkaW5hdGVzLnkgLSB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3A7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGNvb3JkaW5hdGVzIGluIHBhcmVudCBsb2NhbCBjb250cm9sIHNwYWNlXHJcbiAgICAgKiBAcGFyYW0gZ2xvYmFsQ29vcmRpbmF0ZXMgZGVmaW5lcyB0aGUgY29vcmRpbmF0ZXMgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IGNvb3JkaW5hdGVzIGluIHBhcmVudCBsb2NhbCBzcGFjZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0UGFyZW50TG9jYWxDb29yZGluYXRlcyhnbG9iYWxDb29yZGluYXRlczogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFZlY3RvcjIuWmVybygpO1xyXG5cclxuICAgICAgICByZXN1bHQueCA9IGdsb2JhbENvb3JkaW5hdGVzLnggLSB0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLmxlZnQ7XHJcbiAgICAgICAgcmVzdWx0LnkgPSBnbG9iYWxDb29yZGluYXRlcy55IC0gdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS50b3A7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNb3ZlIHRoZSBjdXJyZW50IGNvbnRyb2wgdG8gYSB2ZWN0b3IzIHBvc2l0aW9uIHByb2plY3RlZCBvbnRvIHRoZSBzY3JlZW4uXHJcbiAgICAgKiBAcGFyYW0gcG9zaXRpb24gZGVmaW5lcyB0aGUgdGFyZ2V0IHBvc2l0aW9uXHJcbiAgICAgKiBAcGFyYW0gc2NlbmUgZGVmaW5lcyB0aGUgaG9zdGluZyBzY2VuZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbW92ZVRvVmVjdG9yMyhwb3NpdGlvbjogVmVjdG9yMywgc2NlbmU6IFNjZW5lKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9ob3N0IHx8IHRoaXMucGFyZW50ICE9PSB0aGlzLl9ob3N0Ll9yb290Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIFRvb2xzLkVycm9yKFwiQ2Fubm90IG1vdmUgYSBjb250cm9sIHRvIGEgdmVjdG9yMyBpZiB0aGUgY29udHJvbCBpcyBub3QgYXQgcm9vdCBsZXZlbFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIHRoaXMudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9UT1A7XHJcblxyXG4gICAgICAgIGNvbnN0IGdsb2JhbFZpZXdwb3J0ID0gdGhpcy5faG9zdC5fZ2V0R2xvYmFsVmlld3BvcnQoKTtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ZWRQb3NpdGlvbiA9IFZlY3RvcjMuUHJvamVjdChwb3NpdGlvbiwgTWF0cml4LklkZW50aXR5UmVhZE9ubHksIHNjZW5lLmdldFRyYW5zZm9ybU1hdHJpeCgpLCBnbG9iYWxWaWV3cG9ydCk7XHJcblxyXG4gICAgICAgIHRoaXMuX21vdmVUb1Byb2plY3RlZFBvc2l0aW9uKHByb2plY3RlZFBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgaWYgKHByb2plY3RlZFBvc2l0aW9uLnogPCAwIHx8IHByb2plY3RlZFBvc2l0aW9uLnogPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90UmVuZGVyYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ub3RSZW5kZXJhYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHN0b3JlIGFsbCBjb250cm9scyB0aGF0IGhhdmUgdGhpcyBjb250cm9sIGFzIGFzY2VuZGFudCBpbiBhIGdpdmVuIGFycmF5XHJcbiAgICAgKiBAcGFyYW0gcmVzdWx0cyBkZWZpbmVzIHRoZSBhcnJheSB3aGVyZSB0byBzdG9yZSB0aGUgZGVzY2VuZGFudHNcclxuICAgICAqIEBwYXJhbSBkaXJlY3REZXNjZW5kYW50c09ubHkgZGVmaW5lcyBpZiB0cnVlIG9ubHkgZGlyZWN0IGRlc2NlbmRhbnRzIG9mICd0aGlzJyB3aWxsIGJlIGNvbnNpZGVyZWQsIGlmIGZhbHNlIGRpcmVjdCBhbmQgYWxzbyBpbmRpcmVjdCAoY2hpbGRyZW4gb2YgY2hpbGRyZW4sIGFuIHNvIG9uIGluIGEgcmVjdXJzaXZlIG1hbm5lcikgZGVzY2VuZGFudHMgb2YgJ3RoaXMnIHdpbGwgYmUgY29uc2lkZXJlZFxyXG4gICAgICogQHBhcmFtIHByZWRpY2F0ZSBkZWZpbmVzIGFuIG9wdGlvbmFsIHByZWRpY2F0ZSB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uIGV2ZXJ5IGV2YWx1YXRlZCBjaGlsZCwgdGhlIHByZWRpY2F0ZSBtdXN0IHJldHVybiB0cnVlIGZvciBhIGdpdmVuIGNoaWxkIHRvIGJlIHBhcnQgb2YgdGhlIHJlc3VsdCwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgaWdub3JlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RGVzY2VuZGFudHNUb1JlZihyZXN1bHRzOiBDb250cm9sW10sIGRpcmVjdERlc2NlbmRhbnRzT25seTogYm9vbGVhbiA9IGZhbHNlLCBwcmVkaWNhdGU/OiAoY29udHJvbDogQ29udHJvbCkgPT4gYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgYnkgZGVmYXVsdFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2lsbCByZXR1cm4gYWxsIGNvbnRyb2xzIHRoYXQgaGF2ZSB0aGlzIGNvbnRyb2wgYXMgYXNjZW5kYW50XHJcbiAgICAgKiBAcGFyYW0gZGlyZWN0RGVzY2VuZGFudHNPbmx5IGRlZmluZXMgaWYgdHJ1ZSBvbmx5IGRpcmVjdCBkZXNjZW5kYW50cyBvZiAndGhpcycgd2lsbCBiZSBjb25zaWRlcmVkLCBpZiBmYWxzZSBkaXJlY3QgYW5kIGFsc28gaW5kaXJlY3QgKGNoaWxkcmVuIG9mIGNoaWxkcmVuLCBhbiBzbyBvbiBpbiBhIHJlY3Vyc2l2ZSBtYW5uZXIpIGRlc2NlbmRhbnRzIG9mICd0aGlzJyB3aWxsIGJlIGNvbnNpZGVyZWRcclxuICAgICAqIEBwYXJhbSBwcmVkaWNhdGUgZGVmaW5lcyBhbiBvcHRpb25hbCBwcmVkaWNhdGUgdGhhdCB3aWxsIGJlIGNhbGxlZCBvbiBldmVyeSBldmFsdWF0ZWQgY2hpbGQsIHRoZSBwcmVkaWNhdGUgbXVzdCByZXR1cm4gdHJ1ZSBmb3IgYSBnaXZlbiBjaGlsZCB0byBiZSBwYXJ0IG9mIHRoZSByZXN1bHQsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGlnbm9yZWRcclxuICAgICAqIEByZXR1cm5zIGFsbCBjaGlsZCBjb250cm9sc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RGVzY2VuZGFudHMoZGlyZWN0RGVzY2VuZGFudHNPbmx5PzogYm9vbGVhbiwgcHJlZGljYXRlPzogKGNvbnRyb2w6IENvbnRyb2wpID0+IGJvb2xlYW4pOiBDb250cm9sW10ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdHM6IENvbnRyb2xbXSA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmdldERlc2NlbmRhbnRzVG9SZWYocmVzdWx0cywgZGlyZWN0RGVzY2VuZGFudHNPbmx5LCBwcmVkaWNhdGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExpbmsgY3VycmVudCBjb250cm9sIHdpdGggYSB0YXJnZXQgbWVzaFxyXG4gICAgICogQHBhcmFtIG1lc2ggZGVmaW5lcyB0aGUgbWVzaCB0byBsaW5rIHdpdGhcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjdHJhY2tpbmctcG9zaXRpb25zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBsaW5rV2l0aE1lc2gobWVzaDogTnVsbGFibGU8VHJhbnNmb3JtTm9kZT4pOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2hvc3QgfHwgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50ICE9PSB0aGlzLl9ob3N0Ll9yb290Q29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICBpZiAobWVzaCkge1xyXG4gICAgICAgICAgICAgICAgVG9vbHMuRXJyb3IoXCJDYW5ub3QgbGluayBhIGNvbnRyb2wgdG8gYSBtZXNoIGlmIHRoZSBjb250cm9sIGlzIG5vdCBhdCByb290IGxldmVsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5faG9zdC5fbGlua2VkQ29udHJvbHMuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpbmtlZE1lc2ggPSBtZXNoO1xyXG4gICAgICAgICAgICBpZiAoIW1lc2gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3QuX2xpbmtlZENvbnRyb2xzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIW1lc2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIHRoaXMudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9UT1A7XHJcbiAgICAgICAgdGhpcy5fbGlua2VkTWVzaCA9IG1lc2g7XHJcbiAgICAgICAgdGhpcy5faG9zdC5fbGlua2VkQ29udHJvbHMucHVzaCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0aGFuZCBmdW5jdGlvbiB0byBzZXQgdGhlIHRvcCwgcmlnaHQsIGJvdHRvbSwgYW5kIGxlZnQgcGFkZGluZyB2YWx1ZXMgb24gdGhlIGNvbnRyb2wuXHJcbiAgICAgKiBAcGFyYW0geyBzdHJpbmcgfCBudW1iZXJ9IHBhZGRpbmdUb3AgLSBUaGUgdmFsdWUgb2YgdGhlIHRvcCBwYWRkaW5nLlxyXG4gICAgICogQHBhcmFtIHsgc3RyaW5nIHwgbnVtYmVyfSBwYWRkaW5nUmlnaHQgLSBUaGUgdmFsdWUgb2YgdGhlIHJpZ2h0IHBhZGRpbmcuIElmIG9taXR0ZWQsIHRvcCBpcyB1c2VkLlxyXG4gICAgICogQHBhcmFtIHsgc3RyaW5nIHwgbnVtYmVyfSBwYWRkaW5nQm90dG9tIC0gVGhlIHZhbHVlIG9mIHRoZSBib3R0b20gcGFkZGluZy4gSWYgb21pdHRlZCwgdG9wIGlzIHVzZWQuXHJcbiAgICAgKiBAcGFyYW0geyBzdHJpbmcgfCBudW1iZXJ9IHBhZGRpbmdMZWZ0IC0gVGhlIHZhbHVlIG9mIHRoZSBsZWZ0IHBhZGRpbmcuIElmIG9taXR0ZWQsIHJpZ2h0IGlzIHVzZWQuXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3Bvc2l0aW9uLWFuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRQYWRkaW5nKHBhZGRpbmdUb3A6IHN0cmluZyB8IG51bWJlciwgcGFkZGluZ1JpZ2h0Pzogc3RyaW5nIHwgbnVtYmVyLCBwYWRkaW5nQm90dG9tPzogc3RyaW5nIHwgbnVtYmVyLCBwYWRkaW5nTGVmdD86IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IHRvcCA9IHBhZGRpbmdUb3A7XHJcbiAgICAgICAgY29uc3QgcmlnaHQgPSBwYWRkaW5nUmlnaHQgPz8gdG9wO1xyXG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHBhZGRpbmdCb3R0b20gPz8gdG9wO1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSBwYWRkaW5nTGVmdCA/PyByaWdodDtcclxuXHJcbiAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gdG9wO1xyXG4gICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gcmlnaHQ7XHJcbiAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gYm90dG9tO1xyXG4gICAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSBsZWZ0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRoYW5kIGZ1bnRpb24gdG8gc2V0IHRoZSB0b3AsIHJpZ2h0LCBib3R0b20sIGFuZCBsZWZ0IHBhZGRpbmcgdmFsdWVzIGluIHBpeGVscyBvbiB0aGUgY29udHJvbC5cclxuICAgICAqIEBwYXJhbSB7IG51bWJlcn0gcGFkZGluZ1RvcCAtIFRoZSB2YWx1ZSBpbiBwaXhlbHMgb2YgdGhlIHRvcCBwYWRkaW5nLlxyXG4gICAgICogQHBhcmFtIHsgbnVtYmVyfSBwYWRkaW5nUmlnaHQgLSBUaGUgdmFsdWUgaW4gcGl4ZWxzIG9mIHRoZSByaWdodCBwYWRkaW5nLiBJZiBvbWl0dGVkLCB0b3AgaXMgdXNlZC5cclxuICAgICAqIEBwYXJhbSB7IG51bWJlcn0gcGFkZGluZ0JvdHRvbSAtIFRoZSB2YWx1ZSBpbiBwaXhlbHMgb2YgdGhlIGJvdHRvbSBwYWRkaW5nLiBJZiBvbWl0dGVkLCB0b3AgaXMgdXNlZC5cclxuICAgICAqIEBwYXJhbSB7IG51bWJlcn0gcGFkZGluZ0xlZnQgLSBUaGUgdmFsdWUgaW4gcGl4ZWxzIG9mIHRoZSBsZWZ0IHBhZGRpbmcuIElmIG9taXR0ZWQsIHJpZ2h0IGlzIHVzZWQuXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9ndWkvZ3VpI3Bvc2l0aW9uLWFuZC1zaXplXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRQYWRkaW5nSW5QaXhlbHMocGFkZGluZ1RvcDogbnVtYmVyLCBwYWRkaW5nUmlnaHQ/OiBudW1iZXIsIHBhZGRpbmdCb3R0b20/OiBudW1iZXIsIHBhZGRpbmdMZWZ0PzogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgdG9wID0gcGFkZGluZ1RvcDtcclxuICAgICAgICBjb25zdCByaWdodCA9IHBhZGRpbmdSaWdodCA/PyB0b3A7XHJcbiAgICAgICAgY29uc3QgYm90dG9tID0gcGFkZGluZ0JvdHRvbSA/PyB0b3A7XHJcbiAgICAgICAgY29uc3QgbGVmdCA9IHBhZGRpbmdMZWZ0ID8/IHJpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLnBhZGRpbmdUb3BJblBpeGVscyA9IHRvcDtcclxuICAgICAgICB0aGlzLnBhZGRpbmdSaWdodEluUGl4ZWxzID0gcmlnaHQ7XHJcbiAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tSW5QaXhlbHMgPSBib3R0b207XHJcbiAgICAgICAgdGhpcy5wYWRkaW5nTGVmdEluUGl4ZWxzID0gbGVmdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX21vdmVUb1Byb2plY3RlZFBvc2l0aW9uKHByb2plY3RlZFBvc2l0aW9uOiBWZWN0b3IzKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgb2xkTGVmdCA9IHRoaXMuX2xlZnQuZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICAgICAgY29uc3Qgb2xkVG9wID0gdGhpcy5fdG9wLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG5cclxuICAgICAgICBjb25zdCBwYXJlbnRNZWFzdXJlID0gdGhpcy5wYXJlbnQ/Ll9jdXJyZW50TWVhc3VyZTtcclxuICAgICAgICBpZiAocGFyZW50TWVhc3VyZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzTWVhc3VyZXMocGFyZW50TWVhc3VyZSwgdGhpcy5faG9zdC5nZXRDb250ZXh0KCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG5ld0xlZnQgPSBwcm9qZWN0ZWRQb3NpdGlvbi54ICsgdGhpcy5fbGlua09mZnNldFguZ2V0VmFsdWUodGhpcy5faG9zdCkgLSB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAvIDI7XHJcbiAgICAgICAgbGV0IG5ld1RvcCA9IHByb2plY3RlZFBvc2l0aW9uLnkgKyB0aGlzLl9saW5rT2Zmc2V0WS5nZXRWYWx1ZSh0aGlzLl9ob3N0KSAtIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAvIDI7XHJcblxyXG4gICAgICAgIGNvbnN0IGxlZnRBbmRUb3BJZ25vcmVBZGFwdGl2ZVNjYWxpbmcgPSB0aGlzLl9sZWZ0Lmlnbm9yZUFkYXB0aXZlU2NhbGluZyAmJiB0aGlzLl90b3AuaWdub3JlQWRhcHRpdmVTY2FsaW5nO1xyXG4gICAgICAgIGlmIChsZWZ0QW5kVG9wSWdub3JlQWRhcHRpdmVTY2FsaW5nKSB7XHJcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhuZXdMZWZ0IC0gb2xkTGVmdCkgPCAwLjUpIHtcclxuICAgICAgICAgICAgICAgIG5ld0xlZnQgPSBvbGRMZWZ0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMobmV3VG9wIC0gb2xkVG9wKSA8IDAuNSkge1xyXG4gICAgICAgICAgICAgICAgbmV3VG9wID0gb2xkVG9wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWxlZnRBbmRUb3BJZ25vcmVBZGFwdGl2ZVNjYWxpbmcgJiYgb2xkTGVmdCA9PT0gbmV3TGVmdCAmJiBvbGRUb3AgPT09IG5ld1RvcCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxlZnQgPSBuZXdMZWZ0ICsgXCJweFwiO1xyXG4gICAgICAgIHRoaXMudG9wID0gbmV3VG9wICsgXCJweFwiO1xyXG5cclxuICAgICAgICB0aGlzLl9sZWZ0Lmlnbm9yZUFkYXB0aXZlU2NhbGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fdG9wLmlnbm9yZUFkYXB0aXZlU2NhbGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX29mZnNldExlZnQob2Zmc2V0OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9pc0RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICs9IG9mZnNldDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX29mZnNldFRvcChvZmZzZXQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2lzRGlydHkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCArPSBvZmZzZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9tYXJrTWF0cml4QXNEaXJ0eSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9pc01hdHJpeERpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9mbGFnRGVzY2VuZGFudHNBc01hdHJpeERpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9mbGFnRGVzY2VuZGFudHNBc01hdHJpeERpcnR5KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIE5vIGNoaWxkXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9pbnRlcnNlY3RzUmVjdChyZWN0OiBNZWFzdXJlLCBjb250ZXh0PzogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICAvLyBtYWtlIHN1cmUgd2UgYXJlIHRyYW5zZm9ybWVkIGNvcnJlY3RseSBiZWZvcmUgY2hlY2tpbmcgaW50ZXJzZWN0aW9ucy4gbm8tb3AgaWYgbm90aGluZyBpcyBkaXJ0eS5cclxuICAgICAgICB0aGlzLl90cmFuc2Zvcm0oY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2V2YWx1YXRlZE1lYXN1cmUubGVmdCA+PSByZWN0LmxlZnQgKyByZWN0LndpZHRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlLnRvcCA+PSByZWN0LnRvcCArIHJlY3QuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlLmxlZnQgKyB0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlLndpZHRoIDw9IHJlY3QubGVmdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fZXZhbHVhdGVkTWVhc3VyZS50b3AgKyB0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlLmhlaWdodCA8PSByZWN0LnRvcCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgX2NvbXB1dGVBZGRpdGlvbmFsT2Zmc2V0WCgpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgX2NvbXB1dGVBZGRpdGlvbmFsT2Zmc2V0WSgpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXHJcbiAgICBwdWJsaWMgaW52YWxpZGF0ZVJlY3QoKSB7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9zdCAmJiB0aGlzLmhvc3QudXNlSW52YWxpZGF0ZVJlY3RPcHRpbWl6YXRpb24pIHtcclxuICAgICAgICAgICAgLy8gUm90YXRlIGJ5IHRyYW5zZm9ybSB0byBnZXQgdGhlIG1lYXN1cmUgdHJhbnNmb3JtZWQgdG8gZ2xvYmFsIHNwYWNlXHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRyYW5zZm9ybVRvUmVmKHRoaXMuX3RyYW5zZm9ybU1hdHJpeCwgdGhpcy5fdG1wTWVhc3VyZUEpO1xyXG4gICAgICAgICAgICAvLyBnZXQgdGhlIGJvdWRuaW5nIGJveCBvZiB0aGUgY3VycmVudCBtZWFzdXJlIGFuZCBsYXN0IGZyYW1lcyBtZWFzdXJlIGluIGdsb2JhbCBzcGFjZSBhbmQgaW52YWxpZGF0ZSBpdFxyXG4gICAgICAgICAgICAvLyB0aGUgcHJldmlvdXMgbWVhc3VyZSBpcyB1c2VkIHRvIHByb3Blcmx5IGNsZWFyIGEgY29udHJvbCB0aGF0IGlzIHNjYWxlZCBkb3duXHJcbiAgICAgICAgICAgIE1lYXN1cmUuQ29tYmluZVRvUmVmKHRoaXMuX3RtcE1lYXN1cmVBLCB0aGlzLl9wcmV2Q3VycmVudE1lYXN1cmVUcmFuc2Zvcm1lZEludG9HbG9iYWxTcGFjZSwgdGhpcy5fdG1wTWVhc3VyZUEpO1xyXG5cclxuICAgICAgICAgICAgLy8gRXhwYW5kIHJlY3QgYmFzZWQgb24gc2hhZG93c1xyXG4gICAgICAgICAgICBjb25zdCBzaGFkb3dPZmZzZXRYID0gdGhpcy5zaGFkb3dPZmZzZXRYO1xyXG4gICAgICAgICAgICBjb25zdCBzaGFkb3dPZmZzZXRZID0gdGhpcy5zaGFkb3dPZmZzZXRZO1xyXG4gICAgICAgICAgICBjb25zdCBzaGFkb3dCbHVyID0gTWF0aC5tYXgodGhpcy5fcHJldmlvdXNTaGFkb3dCbHVyLCB0aGlzLnNoYWRvd0JsdXIpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbGVmdFNoYWRvd09mZnNldCA9IE1hdGgubWluKE1hdGgubWluKHNoYWRvd09mZnNldFgsIDApIC0gc2hhZG93Qmx1ciAqIDIsIDApO1xyXG4gICAgICAgICAgICBjb25zdCByaWdodFNoYWRvd09mZnNldCA9IE1hdGgubWF4KE1hdGgubWF4KHNoYWRvd09mZnNldFgsIDApICsgc2hhZG93Qmx1ciAqIDIsIDApO1xyXG4gICAgICAgICAgICBjb25zdCB0b3BTaGFkb3dPZmZzZXQgPSBNYXRoLm1pbihNYXRoLm1pbihzaGFkb3dPZmZzZXRZLCAwKSAtIHNoYWRvd0JsdXIgKiAyLCAwKTtcclxuICAgICAgICAgICAgY29uc3QgYm90dG9tU2hhZG93T2Zmc2V0ID0gTWF0aC5tYXgoTWF0aC5tYXgoc2hhZG93T2Zmc2V0WSwgMCkgKyBzaGFkb3dCbHVyICogMiwgMCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gdGhpcy5fY29tcHV0ZUFkZGl0aW9uYWxPZmZzZXRYKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSB0aGlzLl9jb21wdXRlQWRkaXRpb25hbE9mZnNldFkoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5pbnZhbGlkYXRlUmVjdChcclxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IodGhpcy5fdG1wTWVhc3VyZUEubGVmdCArIGxlZnRTaGFkb3dPZmZzZXQgLSBvZmZzZXRYKSxcclxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IodGhpcy5fdG1wTWVhc3VyZUEudG9wICsgdG9wU2hhZG93T2Zmc2V0IC0gb2Zmc2V0WSksXHJcbiAgICAgICAgICAgICAgICBNYXRoLmNlaWwodGhpcy5fdG1wTWVhc3VyZUEubGVmdCArIHRoaXMuX3RtcE1lYXN1cmVBLndpZHRoICsgcmlnaHRTaGFkb3dPZmZzZXQgKyBvZmZzZXRYKSxcclxuICAgICAgICAgICAgICAgIE1hdGguY2VpbCh0aGlzLl90bXBNZWFzdXJlQS50b3AgKyB0aGlzLl90bXBNZWFzdXJlQS5oZWlnaHQgKyBib3R0b21TaGFkb3dPZmZzZXQgKyBvZmZzZXRZKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX21hcmtBc0RpcnR5KGZvcmNlID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSAmJiAhZm9yY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faXNEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbWFya01hdHJpeEFzRGlydHkoKTtcclxuXHJcbiAgICAgICAgLy8gUmVkcmF3IG9ubHkgdGhpcyByZWN0YW5nbGVcclxuICAgICAgICBpZiAodGhpcy5faG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLl9ob3N0Lm1hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfbWFya0FsbEFzRGlydHkoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcHJlcGFyZUZvbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9saW5rKGhvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9ob3N0ID0gaG9zdDtcclxuICAgICAgICBpZiAodGhpcy5faG9zdCkge1xyXG4gICAgICAgICAgICB0aGlzLnVuaXF1ZUlkID0gdGhpcy5faG9zdC5nZXRTY2VuZSgpIS5nZXRVbmlxdWVJZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX3RyYW5zZm9ybShjb250ZXh0PzogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzTWF0cml4RGlydHkgJiYgdGhpcy5fc2NhbGVYID09PSAxICYmIHRoaXMuX3NjYWxlWSA9PT0gMSAmJiB0aGlzLl9yb3RhdGlvbiA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwb3N0VHJhbnNsYXRlXHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoICogdGhpcy5fdHJhbnNmb3JtQ2VudGVyWCArIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQ7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAqIHRoaXMuX3RyYW5zZm9ybUNlbnRlclkgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3A7XHJcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUob2Zmc2V0WCwgb2Zmc2V0WSk7XHJcblxyXG4gICAgICAgICAgICAvLyByb3RhdGVcclxuICAgICAgICAgICAgY29udGV4dC5yb3RhdGUodGhpcy5fcm90YXRpb24pO1xyXG5cclxuICAgICAgICAgICAgLy8gc2NhbGVcclxuICAgICAgICAgICAgY29udGV4dC5zY2FsZSh0aGlzLl9zY2FsZVgsIHRoaXMuX3NjYWxlWSk7XHJcblxyXG4gICAgICAgICAgICAvLyBwcmVUcmFuc2xhdGVcclxuICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoLW9mZnNldFgsIC1vZmZzZXRZKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTmVlZCB0byB1cGRhdGUgbWF0cmljZXM/XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzTWF0cml4RGlydHkgfHwgdGhpcy5fY2FjaGVkT2Zmc2V0WCAhPT0gb2Zmc2V0WCB8fCB0aGlzLl9jYWNoZWRPZmZzZXRZICE9PSBvZmZzZXRZKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZE9mZnNldFggPSBvZmZzZXRYO1xyXG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRPZmZzZXRZID0gb2Zmc2V0WTtcclxuICAgICAgICAgICAgdGhpcy5faXNNYXRyaXhEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9mbGFnRGVzY2VuZGFudHNBc01hdHJpeERpcnR5KCk7XHJcblxyXG4gICAgICAgICAgICBNYXRyaXgyRC5Db21wb3NlVG9SZWYoLW9mZnNldFgsIC1vZmZzZXRZLCB0aGlzLl9yb3RhdGlvbiwgdGhpcy5fc2NhbGVYLCB0aGlzLl9zY2FsZVksIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuX3RyYW5zZm9ybU1hdHJpeCA6IG51bGwsIHRoaXMuX3RyYW5zZm9ybU1hdHJpeCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1NYXRyaXguaW52ZXJ0VG9SZWYodGhpcy5faW52ZXJ0VHJhbnNmb3JtTWF0cml4KTtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudHJhbnNmb3JtVG9SZWYodGhpcy5fdHJhbnNmb3JtTWF0cml4LCB0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9yZW5kZXJIaWdobGlnaHQoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNIaWdobGlnaHRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5faGlnaGxpZ2h0Q29sb3I7XHJcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSB0aGlzLl9oaWdobGlnaHRMaW5lV2lkdGg7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbmRlckhpZ2hsaWdodFNwZWNpZmljKGNvbnRleHQpO1xyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfcmVuZGVySGlnaGxpZ2h0U3BlY2lmaWMoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVJlY3QodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2dldENvbG9yKGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogc3RyaW5nIHwgSUNhbnZhc0dyYWRpZW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ncmFkaWVudCA/IHRoaXMuZ3JhZGllbnQuZ2V0Q2FudmFzR3JhZGllbnQoY29udGV4dCkgOiB0aGlzLmNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfYXBwbHlTdGF0ZXMoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5faXNGb250U2l6ZUluUGVyY2VudGFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9mb250U2V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9ob3N0ICYmIHRoaXMuX2hvc3QudXNlU21hbGxlc3RJZGVhbCAmJiAhdGhpcy5fZm9udCkge1xyXG4gICAgICAgICAgICB0aGlzLl9mb250U2V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9mb250U2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ByZXBhcmVGb250KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZvbnRTZXQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9mb250KSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZm9udCA9IHRoaXMuX2ZvbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29sb3IgfHwgdGhpcy5ncmFkaWVudCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX2dldENvbG9yKGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKENvbnRyb2wuQWxsb3dBbHBoYUluaGVyaXRhbmNlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgKj0gdGhpcy5fYWxwaGE7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9hbHBoYVNldCkge1xyXG4gICAgICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gdGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50LnJlbmRlclRvSW50ZXJtZWRpYXRlVGV4dHVyZSA/IHRoaXMucGFyZW50LmFscGhhICogdGhpcy5fYWxwaGEgOiB0aGlzLl9hbHBoYTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9sYXlvdXQocGFyZW50TWVhc3VyZTogTWVhc3VyZSwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNEaXJ0eSAmJiAoIXRoaXMuaXNWaXNpYmxlIHx8IHRoaXMubm90UmVuZGVyYWJsZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlydHkgfHwgIXRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUuaXNFcXVhbHNUbyhwYXJlbnRNZWFzdXJlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuX251bUxheW91dENhbGxzKys7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5hZGRBbmRUcmFuc2Zvcm1Ub1JlZihcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybU1hdHJpeCxcclxuICAgICAgICAgICAgICAgIC10aGlzLl9wYWRkaW5nTGVmdEluUGl4ZWxzIHwgMCxcclxuICAgICAgICAgICAgICAgIC10aGlzLl9wYWRkaW5nVG9wSW5QaXhlbHMgfCAwLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFkZGluZ1JpZ2h0SW5QaXhlbHMgfCAwLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFkZGluZ0JvdHRvbUluUGl4ZWxzIHwgMCxcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZDdXJyZW50TWVhc3VyZVRyYW5zZm9ybWVkSW50b0dsb2JhbFNwYWNlXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5U3RhdGVzKGNvbnRleHQpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlYnVpbGRDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYnVpbGRMYXlvdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NNZWFzdXJlcyhwYXJlbnRNZWFzdXJlLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIHJlYnVpbGRDb3VudCsrO1xyXG4gICAgICAgICAgICB9IHdoaWxlICh0aGlzLl9yZWJ1aWxkTGF5b3V0ICYmIHJlYnVpbGRDb3VudCA8IDMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlYnVpbGRDb3VudCA+PSAzKSB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoYExheW91dCBjeWNsZSBkZXRlY3RlZCBpbiBHVUkgKENvbnRyb2wgbmFtZT0ke3RoaXMubmFtZX0sIHVuaXF1ZUlkPSR7dGhpcy51bmlxdWVJZH0pYCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGVSZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2V2YWx1YXRlQ2xpcHBpbmdTdGF0ZShwYXJlbnRNZWFzdXJlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3dhc0RpcnR5ID0gdGhpcy5faXNEaXJ0eTtcclxuICAgICAgICB0aGlzLl9pc0RpcnR5ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfcHJvY2Vzc01lYXN1cmVzKHBhcmVudE1lYXN1cmU6IE1lYXN1cmUsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGVtcFBhZGRpbmdNZWFzdXJlLmNvcHlGcm9tKHBhcmVudE1lYXN1cmUpO1xyXG5cclxuICAgICAgICAvLyBBcHBseSBwYWRkaW5nIGlmIGluIGNvcnJlY3QgbW9kZVxyXG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5kZXNjZW5kYW50c09ubHlQYWRkaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RlbXBQYWRkaW5nTWVhc3VyZS5sZWZ0ICs9IHRoaXMucGFyZW50LnBhZGRpbmdMZWZ0SW5QaXhlbHM7XHJcbiAgICAgICAgICAgIHRoaXMuX3RlbXBQYWRkaW5nTWVhc3VyZS50b3AgKz0gdGhpcy5wYXJlbnQucGFkZGluZ1RvcEluUGl4ZWxzO1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wUGFkZGluZ01lYXN1cmUud2lkdGggLT0gdGhpcy5wYXJlbnQucGFkZGluZ0xlZnRJblBpeGVscyArIHRoaXMucGFyZW50LnBhZGRpbmdSaWdodEluUGl4ZWxzO1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wUGFkZGluZ01lYXN1cmUuaGVpZ2h0IC09IHRoaXMucGFyZW50LnBhZGRpbmdUb3BJblBpeGVscyArIHRoaXMucGFyZW50LnBhZGRpbmdCb3R0b21JblBpeGVscztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmNvcHlGcm9tKHRoaXMuX3RlbXBQYWRkaW5nTWVhc3VyZSk7XHJcblxyXG4gICAgICAgIC8vIExldCBjaGlsZHJlbiB0YWtlIHNvbWUgcHJlLW1lYXN1cmVtZW50IGFjdGlvbnNcclxuICAgICAgICB0aGlzLl9wcmVNZWFzdXJlKHRoaXMuX3RlbXBQYWRkaW5nTWVhc3VyZSwgY29udGV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMuX21lYXN1cmUoKTtcclxuXHJcbiAgICAgICAgLy8gTGV0IGNoaWxkcmVuIHRha2Ugc29tZSBwb3N0LW1lYXN1cmVtZW50IGFjdGlvbnNcclxuICAgICAgICB0aGlzLl9wb3N0TWVhc3VyZSh0aGlzLl90ZW1wUGFkZGluZ01lYXN1cmUsIGNvbnRleHQpO1xyXG5cclxuICAgICAgICB0aGlzLl9jb21wdXRlQWxpZ25tZW50KHRoaXMuX3RlbXBQYWRkaW5nTWVhc3VyZSwgY29udGV4dCk7XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgdG8gaW50IHZhbHVlc1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0IHwgMDtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgfCAwO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoID0gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggfCAwO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCB8IDA7XHJcblxyXG4gICAgICAgIC8vIExldCBjaGlsZHJlbiBhZGQgbW9yZSBmZWF0dXJlc1xyXG4gICAgICAgIHRoaXMuX2FkZGl0aW9uYWxQcm9jZXNzaW5nKHRoaXMuX3RlbXBQYWRkaW5nTWVhc3VyZSwgY29udGV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUuY29weUZyb20odGhpcy5fdGVtcFBhZGRpbmdNZWFzdXJlKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudHJhbnNmb3JtVG9SZWYodGhpcy5fdHJhbnNmb3JtTWF0cml4LCB0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlKTtcclxuICAgICAgICBpZiAodGhpcy5vbkRpcnR5T2JzZXJ2YWJsZS5oYXNPYnNlcnZlcnMoKSkge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGlydHlPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9ldmFsdWF0ZUNsaXBwaW5nU3RhdGUocGFyZW50TWVhc3VyZTogTWVhc3VyZSkge1xyXG4gICAgICAgIC8vIFNpbmNlIHRyYW5zZm9ybU1hdHJpeCBpcyB1c2VkIGhlcmUsIHdlIG5lZWQgdG8gaGF2ZSBpdCBmcmVzaGx5IGNvbXB1dGVkXHJcbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtKCk7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudHJhbnNmb3JtVG9SZWYodGhpcy5fdHJhbnNmb3JtTWF0cml4LCB0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlKTtcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuY2xpcENoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHBhcmVudE1lYXN1cmUudHJhbnNmb3JtVG9SZWYodGhpcy5wYXJlbnQuX3RyYW5zZm9ybU1hdHJpeCwgdGhpcy5fZXZhbHVhdGVkUGFyZW50TWVhc3VyZSk7XHJcbiAgICAgICAgICAgIC8vIEVhcmx5IGNsaXBcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2V2YWx1YXRlZE1lYXN1cmUubGVmdCA+IHRoaXMuX2V2YWx1YXRlZFBhcmVudE1lYXN1cmUubGVmdCArIHRoaXMuX2V2YWx1YXRlZFBhcmVudE1lYXN1cmUud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzQ2xpcHBlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlLmxlZnQgKyB0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlLndpZHRoIDwgdGhpcy5fZXZhbHVhdGVkUGFyZW50TWVhc3VyZS5sZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0NsaXBwZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZXZhbHVhdGVkTWVhc3VyZS50b3AgPiB0aGlzLl9ldmFsdWF0ZWRQYXJlbnRNZWFzdXJlLnRvcCArIHRoaXMuX2V2YWx1YXRlZFBhcmVudE1lYXN1cmUuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0NsaXBwZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZXZhbHVhdGVkTWVhc3VyZS50b3AgKyB0aGlzLl9ldmFsdWF0ZWRNZWFzdXJlLmhlaWdodCA8IHRoaXMuX2V2YWx1YXRlZFBhcmVudE1lYXN1cmUudG9wKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0NsaXBwZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pc0NsaXBwZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX21lYXN1cmUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gV2lkdGggLyBIZWlnaHRcclxuICAgICAgICBpZiAodGhpcy5fd2lkdGguaXNQaXhlbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCA9IHRoaXMuX3dpZHRoLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoICo9IHRoaXMuX3dpZHRoLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hlaWdodC5pc1BpeGVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCA9IHRoaXMuX2hlaWdodC5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgKj0gdGhpcy5faGVpZ2h0LmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2ZpeGVkUmF0aW8gIT09IDApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZpeGVkUmF0aW9NYXN0ZXJJc1dpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAqIHRoaXMuX2ZpeGVkUmF0aW87XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAqIHRoaXMuX2ZpeGVkUmF0aW87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9jb21wdXRlQWxpZ25tZW50KHBhcmVudE1lYXN1cmU6IE1lYXN1cmUsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aDtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmVudFdpZHRoID0gcGFyZW50TWVhc3VyZS53aWR0aDtcclxuICAgICAgICBjb25zdCBwYXJlbnRIZWlnaHQgPSBwYXJlbnRNZWFzdXJlLmhlaWdodDtcclxuXHJcbiAgICAgICAgLy8gTGVmdCAvIHRvcFxyXG4gICAgICAgIGxldCB4ID0gMDtcclxuICAgICAgICBsZXQgeSA9IDA7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5ob3Jpem9udGFsQWxpZ25tZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUOlxyXG4gICAgICAgICAgICAgICAgeCA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX1JJR0hUOlxyXG4gICAgICAgICAgICAgICAgeCA9IHBhcmVudFdpZHRoIC0gd2lkdGg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUjpcclxuICAgICAgICAgICAgICAgIHggPSAocGFyZW50V2lkdGggLSB3aWR0aCkgLyAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMudmVydGljYWxBbGlnbm1lbnQpIHtcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9UT1A6XHJcbiAgICAgICAgICAgICAgICB5ID0gMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0JPVFRPTTpcclxuICAgICAgICAgICAgICAgIHkgPSBwYXJlbnRIZWlnaHQgLSBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI6XHJcbiAgICAgICAgICAgICAgICB5ID0gKHBhcmVudEhlaWdodCAtIGhlaWdodCkgLyAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuZGVzY2VuZGFudHNPbmx5UGFkZGluZykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcGFkZGluZ0xlZnQuaXNQaXhlbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArPSB0aGlzLl9wYWRkaW5nTGVmdC5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoIC09IHRoaXMuX3BhZGRpbmdMZWZ0LmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArPSBwYXJlbnRXaWR0aCAqIHRoaXMuX3BhZGRpbmdMZWZ0LmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLT0gcGFyZW50V2lkdGggKiB0aGlzLl9wYWRkaW5nTGVmdC5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BhZGRpbmdSaWdodC5pc1BpeGVsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAtPSB0aGlzLl9wYWRkaW5nUmlnaHQuZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAtPSBwYXJlbnRXaWR0aCAqIHRoaXMuX3BhZGRpbmdSaWdodC5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BhZGRpbmdUb3AuaXNQaXhlbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICs9IHRoaXMuX3BhZGRpbmdUb3AuZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLT0gdGhpcy5fcGFkZGluZ1RvcC5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCArPSBwYXJlbnRIZWlnaHQgKiB0aGlzLl9wYWRkaW5nVG9wLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC09IHBhcmVudEhlaWdodCAqIHRoaXMuX3BhZGRpbmdUb3AuZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wYWRkaW5nQm90dG9tLmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAtPSB0aGlzLl9wYWRkaW5nQm90dG9tLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC09IHBhcmVudEhlaWdodCAqIHRoaXMuX3BhZGRpbmdCb3R0b20uZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9sZWZ0LmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArPSB0aGlzLl9sZWZ0LmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKz0gcGFyZW50V2lkdGggKiB0aGlzLl9sZWZ0LmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3RvcC5pc1BpeGVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCArPSB0aGlzLl90b3AuZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICs9IHBhcmVudEhlaWdodCAqIHRoaXMuX3RvcC5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKz0geDtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKz0geTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX3ByZU1lYXN1cmUocGFyZW50TWVhc3VyZTogTWVhc3VyZSwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9wb3N0TWVhc3VyZShwYXJlbnRNZWFzdXJlOiBNZWFzdXJlLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmdcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX2FkZGl0aW9uYWxQcm9jZXNzaW5nKHBhcmVudE1lYXN1cmU6IE1lYXN1cmUsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfY2xpcEZvckNoaWxkcmVuKGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgLy8gRE8gbm90aGluZ1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIF9DbGlwTWVhc3VyZSA9IG5ldyBNZWFzdXJlKDAsIDAsIDAsIDApO1xyXG4gICAgcHJpdmF0ZSBfdG1wTWVhc3VyZUEgPSBuZXcgTWVhc3VyZSgwLCAwLCAwLCAwKTtcclxuICAgIHByaXZhdGUgX2NsaXAoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQsIGludmFsaWRhdGVkUmVjdGFuZ2xlPzogTnVsbGFibGU8TWVhc3VyZT4pIHtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIENvbnRyb2wuX0NsaXBNZWFzdXJlLmNvcHlGcm9tKHRoaXMuX2N1cnJlbnRNZWFzdXJlKTtcclxuICAgICAgICBpZiAoaW52YWxpZGF0ZWRSZWN0YW5nbGUpIHtcclxuICAgICAgICAgICAgLy8gUm90YXRlIHRoZSBpbnZhbGlkYXRlZCByZWN0IGludG8gdGhlIGNvbnRyb2wncyBzcGFjZVxyXG4gICAgICAgICAgICBpbnZhbGlkYXRlZFJlY3RhbmdsZS50cmFuc2Zvcm1Ub1JlZih0aGlzLl9pbnZlcnRUcmFuc2Zvcm1NYXRyaXgsIHRoaXMuX3RtcE1lYXN1cmVBKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSByZWN0IGluIGNvbnRleHQgc3BhY2UgYW5kIHRoZSBjdXJyZW50IGNvbnRleHRcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gbmV3IE1lYXN1cmUoMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIGludGVyc2VjdGlvbi5sZWZ0ID0gTWF0aC5tYXgodGhpcy5fdG1wTWVhc3VyZUEubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCk7XHJcbiAgICAgICAgICAgIGludGVyc2VjdGlvbi50b3AgPSBNYXRoLm1heCh0aGlzLl90bXBNZWFzdXJlQS50b3AsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCk7XHJcbiAgICAgICAgICAgIGludGVyc2VjdGlvbi53aWR0aCA9IE1hdGgubWluKHRoaXMuX3RtcE1lYXN1cmVBLmxlZnQgKyB0aGlzLl90bXBNZWFzdXJlQS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoKSAtIGludGVyc2VjdGlvbi5sZWZ0O1xyXG4gICAgICAgICAgICBpbnRlcnNlY3Rpb24uaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5fdG1wTWVhc3VyZUEudG9wICsgdGhpcy5fdG1wTWVhc3VyZUEuaGVpZ2h0LCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpIC0gaW50ZXJzZWN0aW9uLnRvcDtcclxuICAgICAgICAgICAgQ29udHJvbC5fQ2xpcE1lYXN1cmUuY29weUZyb20oaW50ZXJzZWN0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb25zdCBzaGFkb3dPZmZzZXRYID0gdGhpcy5zaGFkb3dPZmZzZXRYO1xyXG4gICAgICAgICAgICBjb25zdCBzaGFkb3dPZmZzZXRZID0gdGhpcy5zaGFkb3dPZmZzZXRZO1xyXG4gICAgICAgICAgICBjb25zdCBzaGFkb3dCbHVyID0gdGhpcy5zaGFkb3dCbHVyO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbGVmdFNoYWRvd09mZnNldCA9IE1hdGgubWluKE1hdGgubWluKHNoYWRvd09mZnNldFgsIDApIC0gc2hhZG93Qmx1ciAqIDIsIDApO1xyXG4gICAgICAgICAgICBjb25zdCByaWdodFNoYWRvd09mZnNldCA9IE1hdGgubWF4KE1hdGgubWF4KHNoYWRvd09mZnNldFgsIDApICsgc2hhZG93Qmx1ciAqIDIsIDApO1xyXG4gICAgICAgICAgICBjb25zdCB0b3BTaGFkb3dPZmZzZXQgPSBNYXRoLm1pbihNYXRoLm1pbihzaGFkb3dPZmZzZXRZLCAwKSAtIHNoYWRvd0JsdXIgKiAyLCAwKTtcclxuICAgICAgICAgICAgY29uc3QgYm90dG9tU2hhZG93T2Zmc2V0ID0gTWF0aC5tYXgoTWF0aC5tYXgoc2hhZG93T2Zmc2V0WSwgMCkgKyBzaGFkb3dCbHVyICogMiwgMCk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LnJlY3QoXHJcbiAgICAgICAgICAgICAgICBDb250cm9sLl9DbGlwTWVhc3VyZS5sZWZ0ICsgbGVmdFNoYWRvd09mZnNldCxcclxuICAgICAgICAgICAgICAgIENvbnRyb2wuX0NsaXBNZWFzdXJlLnRvcCArIHRvcFNoYWRvd09mZnNldCxcclxuICAgICAgICAgICAgICAgIENvbnRyb2wuX0NsaXBNZWFzdXJlLndpZHRoICsgcmlnaHRTaGFkb3dPZmZzZXQgLSBsZWZ0U2hhZG93T2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgQ29udHJvbC5fQ2xpcE1lYXN1cmUuaGVpZ2h0ICsgYm90dG9tU2hhZG93T2Zmc2V0IC0gdG9wU2hhZG93T2Zmc2V0XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGV4dC5yZWN0KENvbnRyb2wuX0NsaXBNZWFzdXJlLmxlZnQsIENvbnRyb2wuX0NsaXBNZWFzdXJlLnRvcCwgQ29udHJvbC5fQ2xpcE1lYXN1cmUud2lkdGgsIENvbnRyb2wuX0NsaXBNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LmNsaXAoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX3JlbmRlcihjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCwgaW52YWxpZGF0ZWRSZWN0YW5nbGU/OiBOdWxsYWJsZTxNZWFzdXJlPik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUgfHwgdGhpcy5ub3RSZW5kZXJhYmxlIHx8IHRoaXMuX2lzQ2xpcHBlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pc0RpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaG9zdC5fbnVtUmVuZGVyQ2FsbHMrKztcclxuXHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FwcGx5U3RhdGVzKGNvbnRleHQpO1xyXG5cclxuICAgICAgICAvLyBUcmFuc2Zvcm1cclxuICAgICAgICB0aGlzLl90cmFuc2Zvcm0oY29udGV4dCk7XHJcblxyXG4gICAgICAgIC8vIENsaXBcclxuICAgICAgICBpZiAodGhpcy5jbGlwQ29udGVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jbGlwKGNvbnRleHQsIGludmFsaWRhdGVkUmVjdGFuZ2xlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9uQmVmb3JlRHJhd09ic2VydmFibGUuaGFzT2JzZXJ2ZXJzKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkJlZm9yZURyYXdPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnVzZUJpdG1hcENhY2hlICYmICF0aGlzLl93YXNEaXJ0eSAmJiB0aGlzLl9jYWNoZURhdGEpIHtcclxuICAgICAgICAgICAgY29udGV4dC5wdXRJbWFnZURhdGEodGhpcy5fY2FjaGVEYXRhLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0LCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3ApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYXcoY29udGV4dCwgaW52YWxpZGF0ZWRSZWN0YW5nbGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMudXNlQml0bWFwQ2FjaGUgJiYgdGhpcy5fd2FzRGlydHkpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2FjaGVEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbmRlckhpZ2hsaWdodChjb250ZXh0KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMub25BZnRlckRyYXdPYnNlcnZhYmxlLmhhc09ic2VydmVycygpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25BZnRlckRyYXdPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX2RyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQsIGludmFsaWRhdGVkUmVjdGFuZ2xlPzogTnVsbGFibGU8TWVhc3VyZT4pOiB2b2lkIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiBhIGdpdmVuIGNvb3JkaW5hdGVzIGJlbG9uZyB0byB0aGUgY3VycmVudCBjb250cm9sXHJcbiAgICAgKiBAcGFyYW0geCBkZWZpbmVzIHggY29vcmRpbmF0ZSB0byB0ZXN0XHJcbiAgICAgKiBAcGFyYW0geSBkZWZpbmVzIHkgY29vcmRpbmF0ZSB0byB0ZXN0XHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBjb29yZGluYXRlcyBhcmUgaW5zaWRlIHRoZSBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb250YWlucyh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIEludmVydCB0cmFuc2Zvcm1cclxuICAgICAgICB0aGlzLl9pbnZlcnRUcmFuc2Zvcm1NYXRyaXgudHJhbnNmb3JtQ29vcmRpbmF0ZXMoeCwgeSwgdGhpcy5fdHJhbnNmb3JtZWRQb3NpdGlvbik7XHJcblxyXG4gICAgICAgIHggPSB0aGlzLl90cmFuc2Zvcm1lZFBvc2l0aW9uLng7XHJcbiAgICAgICAgeSA9IHRoaXMuX3RyYW5zZm9ybWVkUG9zaXRpb24ueTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tcclxuICAgICAgICBpZiAoeCA8IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHggPiB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHkgPCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHkgPiB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNQb2ludGVyQmxvY2tlcikge1xyXG4gICAgICAgICAgICB0aGlzLl9ob3N0Ll9zaG91bGRCbG9ja1BvaW50ZXIgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX3Byb2Nlc3NQaWNraW5nKHg6IG51bWJlciwgeTogbnVtYmVyLCBwaTogTnVsbGFibGU8UG9pbnRlckluZm9CYXNlPiwgdHlwZTogbnVtYmVyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgZGVsdGFYPzogbnVtYmVyLCBkZWx0YVk/OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc0hpdFRlc3RWaXNpYmxlIHx8ICF0aGlzLmlzVmlzaWJsZSB8fCB0aGlzLl9kb05vdFJlbmRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY29udGFpbnMoeCwgeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcHJvY2Vzc09ic2VydmFibGVzKHR5cGUsIHgsIHksIHBpLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBkZWx0YVgsIGRlbHRhWSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfb25Qb2ludGVyTW92ZSh0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgcGk6IE51bGxhYmxlPFBvaW50ZXJJbmZvQmFzZT4pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjYW5Ob3RpZnk6IGJvb2xlYW4gPSB0aGlzLm9uUG9pbnRlck1vdmVPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhjb29yZGluYXRlcywgLTEsIHRhcmdldCwgdGhpcywgcGkpO1xyXG5cclxuICAgICAgICBpZiAoY2FuTm90aWZ5ICYmIHRoaXMucGFyZW50ICE9IG51bGwgJiYgIXRoaXMuaXNQb2ludGVyQmxvY2tlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5fb25Qb2ludGVyTW92ZSh0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIHBpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9vblBvaW50ZXJFbnRlcih0YXJnZXQ6IENvbnRyb2wsIHBpOiBOdWxsYWJsZTxQb2ludGVySW5mb0Jhc2U+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fZW50ZXJDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2VudGVyQ291bnQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIC8vIC0xIGlzIGZvciB0b3VjaCBpbnB1dCwgd2UgYXJlIG5vdyBzdXJlIHdlIGFyZSB3aXRoIGEgbW91c2Ugb3IgcGVuY2lsXHJcbiAgICAgICAgICAgIHRoaXMuX2VudGVyQ291bnQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9lbnRlckNvdW50Kys7XHJcblxyXG4gICAgICAgIGNvbnN0IGNhbk5vdGlmeTogYm9vbGVhbiA9IHRoaXMub25Qb2ludGVyRW50ZXJPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzLCAtMSwgdGFyZ2V0LCB0aGlzLCBwaSk7XHJcblxyXG4gICAgICAgIGlmIChjYW5Ob3RpZnkgJiYgdGhpcy5wYXJlbnQgIT0gbnVsbCAmJiAhdGhpcy5pc1BvaW50ZXJCbG9ja2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Ll9vblBvaW50ZXJFbnRlcih0YXJnZXQsIHBpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfb25Qb2ludGVyT3V0KHRhcmdldDogQ29udHJvbCwgcGk6IE51bGxhYmxlPFBvaW50ZXJJbmZvQmFzZT4sIGZvcmNlID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWZvcmNlICYmICF0aGlzLl9pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9lbnRlckNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgbGV0IGNhbk5vdGlmeTogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmICghdGFyZ2V0LmlzQXNjZW5kYW50KHRoaXMpKSB7XHJcbiAgICAgICAgICAgIGNhbk5vdGlmeSA9IHRoaXMub25Qb2ludGVyT3V0T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcywgLTEsIHRhcmdldCwgdGhpcywgcGkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNhbk5vdGlmeSAmJiB0aGlzLnBhcmVudCAhPSBudWxsICYmICF0aGlzLmlzUG9pbnRlckJsb2NrZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuX29uUG9pbnRlck91dCh0YXJnZXQsIHBpLCBmb3JjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfb25Qb2ludGVyRG93bih0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgcGk6IE51bGxhYmxlPFBvaW50ZXJJbmZvQmFzZT4pOiBib29sZWFuIHtcclxuICAgICAgICAvLyBQcmV2ZW50IHBvaW50ZXJvdXQgdG8gbG9zZSBjb250cm9sIGNvbnRleHQuXHJcbiAgICAgICAgLy8gRXZlbnQgcmVkdW5kYW5jeSBpcyBjaGVja2VkIGluc2lkZSB0aGUgZnVuY3Rpb24uXHJcbiAgICAgICAgdGhpcy5fb25Qb2ludGVyRW50ZXIodGhpcywgcGkpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50YWJJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmZvY3VzZWRDb250cm9sID0gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9kb3duQ291bnQgIT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZG93bkNvdW50Kys7XHJcblxyXG4gICAgICAgIHRoaXMuX2Rvd25Qb2ludGVySWRzW3BvaW50ZXJJZF0gPSB0cnVlO1xyXG5cclxuICAgICAgICBjb25zdCBjYW5Ob3RpZnk6IGJvb2xlYW4gPSB0aGlzLm9uUG9pbnRlckRvd25PYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhuZXcgVmVjdG9yMldpdGhJbmZvKGNvb3JkaW5hdGVzLCBidXR0b25JbmRleCksIC0xLCB0YXJnZXQsIHRoaXMsIHBpKTtcclxuXHJcbiAgICAgICAgaWYgKGNhbk5vdGlmeSAmJiB0aGlzLnBhcmVudCAhPSBudWxsICYmICF0aGlzLmlzUG9pbnRlckJsb2NrZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuX29uUG9pbnRlckRvd24odGFyZ2V0LCBjb29yZGluYXRlcywgcG9pbnRlcklkLCBidXR0b25JbmRleCwgcGkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBpICYmIHRoaXMudW5pcXVlSWQgIT09IHRoaXMuX2hvc3Qucm9vdENvbnRhaW5lci51bmlxdWVJZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9ob3N0Ll9jYXB0dXJlZFBvaW50ZXJJZHMuYWRkKChwaS5ldmVudCBhcyBJUG9pbnRlckV2ZW50KS5wb2ludGVySWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9vblBvaW50ZXJVcCh0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgbm90aWZ5Q2xpY2s6IGJvb2xlYW4sIHBpPzogTnVsbGFibGU8UG9pbnRlckluZm9CYXNlPik6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZG93bkNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2Rvd25Qb2ludGVySWRzW3BvaW50ZXJJZF07XHJcblxyXG4gICAgICAgIGxldCBjYW5Ob3RpZnlDbGljazogYm9vbGVhbiA9IG5vdGlmeUNsaWNrO1xyXG4gICAgICAgIGlmIChub3RpZnlDbGljayAmJiAodGhpcy5fZW50ZXJDb3VudCA+IDAgfHwgdGhpcy5fZW50ZXJDb3VudCA9PT0gLTEpKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faG9zdC51c2VQb2ludGVyVGFwRm9yQ2xpY2tFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgY2FuTm90aWZ5Q2xpY2sgPSB0aGlzLm9uUG9pbnRlckNsaWNrT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMobmV3IFZlY3RvcjJXaXRoSW5mbyhjb29yZGluYXRlcywgYnV0dG9uSW5kZXgpLCAtMSwgdGFyZ2V0LCB0aGlzLCBwaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2FuTm90aWZ5OiBib29sZWFuID0gdGhpcy5vblBvaW50ZXJVcE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKG5ldyBWZWN0b3IyV2l0aEluZm8oY29vcmRpbmF0ZXMsIGJ1dHRvbkluZGV4KSwgLTEsIHRhcmdldCwgdGhpcywgcGkpO1xyXG5cclxuICAgICAgICBpZiAoY2FuTm90aWZ5ICYmIHRoaXMucGFyZW50ICE9IG51bGwgJiYgIXRoaXMuaXNQb2ludGVyQmxvY2tlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5fb25Qb2ludGVyVXAodGFyZ2V0LCBjb29yZGluYXRlcywgcG9pbnRlcklkLCBidXR0b25JbmRleCwgY2FuTm90aWZ5Q2xpY2ssIHBpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwaSAmJiB0aGlzLnVuaXF1ZUlkICE9PSB0aGlzLl9ob3N0LnJvb3RDb250YWluZXIudW5pcXVlSWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faG9zdC5fY2FwdHVyZWRQb2ludGVySWRzLmRlbGV0ZSgocGkuZXZlbnQgYXMgSVBvaW50ZXJFdmVudCkucG9pbnRlcklkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIF9vblBvaW50ZXJQaWNrKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBidXR0b25JbmRleDogbnVtYmVyLCBub3RpZnlDbGljazogYm9vbGVhbiwgcGk6IE51bGxhYmxlPFBvaW50ZXJJbmZvQmFzZT4pOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2hvc3QudXNlUG9pbnRlclRhcEZvckNsaWNrRXZlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNhbk5vdGlmeUNsaWNrOiBib29sZWFuID0gbm90aWZ5Q2xpY2s7XHJcbiAgICAgICAgaWYgKG5vdGlmeUNsaWNrICYmICh0aGlzLl9lbnRlckNvdW50ID4gMCB8fCB0aGlzLl9lbnRlckNvdW50ID09PSAtMSkpIHtcclxuICAgICAgICAgICAgY2FuTm90aWZ5Q2xpY2sgPSB0aGlzLm9uUG9pbnRlckNsaWNrT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMobmV3IFZlY3RvcjJXaXRoSW5mbyhjb29yZGluYXRlcywgYnV0dG9uSW5kZXgpLCAtMSwgdGFyZ2V0LCB0aGlzLCBwaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNhbk5vdGlmeTogYm9vbGVhbiA9IHRoaXMub25Qb2ludGVyVXBPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhuZXcgVmVjdG9yMldpdGhJbmZvKGNvb3JkaW5hdGVzLCBidXR0b25JbmRleCksIC0xLCB0YXJnZXQsIHRoaXMsIHBpKTtcclxuXHJcbiAgICAgICAgaWYgKGNhbk5vdGlmeSAmJiB0aGlzLnBhcmVudCAhPSBudWxsICYmICF0aGlzLmlzUG9pbnRlckJsb2NrZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuX29uUG9pbnRlclBpY2sodGFyZ2V0LCBjb29yZGluYXRlcywgcG9pbnRlcklkLCBidXR0b25JbmRleCwgY2FuTm90aWZ5Q2xpY2ssIHBpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9mb3JjZVBvaW50ZXJVcChwb2ludGVySWQ6IE51bGxhYmxlPG51bWJlcj4gPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKHBvaW50ZXJJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9vblBvaW50ZXJVcCh0aGlzLCBWZWN0b3IyLlplcm8oKSwgcG9pbnRlcklkLCAwLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9kb3duUG9pbnRlcklkcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25Qb2ludGVyVXAodGhpcywgVmVjdG9yMi5aZXJvKCksICtrZXkgYXMgbnVtYmVyLCAwLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX29uV2hlZWxTY3JvbGwoZGVsdGFYPzogbnVtYmVyLCBkZWx0YVk/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNhbk5vdGlmeTogYm9vbGVhbiA9IHRoaXMub25XaGVlbE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKG5ldyBWZWN0b3IyKGRlbHRhWCwgZGVsdGFZKSk7XHJcblxyXG4gICAgICAgIGlmIChjYW5Ob3RpZnkgJiYgdGhpcy5wYXJlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5fb25XaGVlbFNjcm9sbChkZWx0YVgsIGRlbHRhWSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfb25DYW52YXNCbHVyKCk6IHZvaWQge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX3Byb2Nlc3NPYnNlcnZhYmxlcyhcclxuICAgICAgICB0eXBlOiBudW1iZXIsXHJcbiAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgIHk6IG51bWJlcixcclxuICAgICAgICBwaTogTnVsbGFibGU8UG9pbnRlckluZm9CYXNlPixcclxuICAgICAgICBwb2ludGVySWQ6IG51bWJlcixcclxuICAgICAgICBidXR0b25JbmRleDogbnVtYmVyLFxyXG4gICAgICAgIGRlbHRhWD86IG51bWJlcixcclxuICAgICAgICBkZWx0YVk/OiBudW1iZXJcclxuICAgICk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZHVtbXlWZWN0b3IyLmNvcHlGcm9tRmxvYXRzKHgsIHkpO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSTU9WRSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vblBvaW50ZXJNb3ZlKHRoaXMsIHRoaXMuX2R1bW15VmVjdG9yMiwgcG9pbnRlcklkLCBwaSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c0NvbnRyb2xPdmVyID0gdGhpcy5faG9zdC5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF07XHJcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0NvbnRyb2xPdmVyICYmIHByZXZpb3VzQ29udHJvbE92ZXIgIT09IHRoaXMpIHtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzQ29udHJvbE92ZXIuX29uUG9pbnRlck91dCh0aGlzLCBwaSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0NvbnRyb2xPdmVyICE9PSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vblBvaW50ZXJFbnRlcih0aGlzLCBwaSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2hvc3QuX2xhc3RDb250cm9sT3Zlcltwb2ludGVySWRdID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSRE9XTikge1xyXG4gICAgICAgICAgICB0aGlzLl9vblBvaW50ZXJEb3duKHRoaXMsIHRoaXMuX2R1bW15VmVjdG9yMiwgcG9pbnRlcklkLCBidXR0b25JbmRleCwgcGkpO1xyXG4gICAgICAgICAgICB0aGlzLl9ob3N0Ll9yZWdpc3Rlckxhc3RDb250cm9sRG93bih0aGlzLCBwb2ludGVySWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9ob3N0Ll9sYXN0UGlja2VkQ29udHJvbCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUlVQKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ob3N0Ll9sYXN0Q29udHJvbERvd25bcG9pbnRlcklkXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faG9zdC5fbGFzdENvbnRyb2xEb3duW3BvaW50ZXJJZF0uX29uUG9pbnRlclVwKHRoaXMsIHRoaXMuX2R1bW15VmVjdG9yMiwgcG9pbnRlcklkLCBidXR0b25JbmRleCwgdHJ1ZSwgcGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faG9zdC51c2VQb2ludGVyVGFwRm9yQ2xpY2tFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2hvc3QuX2xhc3RDb250cm9sRG93bltwb2ludGVySWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUldIRUVMKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ob3N0Ll9sYXN0Q29udHJvbE92ZXJbcG9pbnRlcklkXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faG9zdC5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF0uX29uV2hlZWxTY3JvbGwoZGVsdGFYLCBkZWx0YVkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJUQVApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2hvc3QuX2xhc3RDb250cm9sRG93bltwb2ludGVySWRdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3N0Ll9sYXN0Q29udHJvbERvd25bcG9pbnRlcklkXS5fb25Qb2ludGVyUGljayh0aGlzLCB0aGlzLl9kdW1teVZlY3RvcjIsIHBvaW50ZXJJZCwgYnV0dG9uSW5kZXgsIHRydWUsIHBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faG9zdC5fbGFzdENvbnRyb2xEb3duW3BvaW50ZXJJZF07XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2dldFN0eWxlUHJvcGVydHkocHJvcE5hbWU6IFwiZm9udFN0eWxlXCIgfCBcImZvbnRXZWlnaHRcIiB8IFwiZm9udEZhbWlseVwiLCBkZWZhdWx0VmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgcHJvcCA9ICh0aGlzLl9zdHlsZSAmJiB0aGlzLl9zdHlsZVtwcm9wTmFtZV0pID8/IHRoaXNbcHJvcE5hbWVdO1xyXG4gICAgICAgIGlmICghcHJvcCAmJiB0aGlzLnBhcmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuX2dldFN0eWxlUHJvcGVydHkocHJvcE5hbWUsIGRlZmF1bHRWYWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvcDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcHJlcGFyZUZvbnQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9mb250ICYmICF0aGlzLl9mb250U2V0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvbnQgPVxyXG4gICAgICAgICAgICB0aGlzLl9nZXRTdHlsZVByb3BlcnR5KFwiZm9udFN0eWxlXCIsIFwiXCIpICtcclxuICAgICAgICAgICAgXCIgXCIgK1xyXG4gICAgICAgICAgICB0aGlzLl9nZXRTdHlsZVByb3BlcnR5KFwiZm9udFdlaWdodFwiLCBcIlwiKSArXHJcbiAgICAgICAgICAgIFwiIFwiICtcclxuICAgICAgICAgICAgdGhpcy5mb250U2l6ZUluUGl4ZWxzICtcclxuICAgICAgICAgICAgXCJweCBcIiArXHJcbiAgICAgICAgICAgIHRoaXMuX2dldFN0eWxlUHJvcGVydHkoXCJmb250RmFtaWx5XCIsIFwiQXJpYWxcIik7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvbnRPZmZzZXQgPSBDb250cm9sLl9HZXRGb250T2Zmc2V0KHRoaXMuX2ZvbnQsIHRoaXMuX2hvc3Q/LmdldFNjZW5lKCk/LmdldEVuZ2luZSgpKTtcclxuXHJcbiAgICAgICAgLy9jaGlsZHJlbiBuZWVkIHRvIGJlIHJlZnJlc2hlZFxyXG4gICAgICAgIHRoaXMuZ2V0RGVzY2VuZGFudHMoKS5mb3JFYWNoKChjaGlsZCkgPT4gY2hpbGQuX21hcmtBbGxBc0RpcnR5KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBjb250cm9sIGhhcyBhIGRpbWVuc2lvbiBmdWxseSBkZWZpbmVkIGlmIHRoYXQgZGltZW5zaW9uIGRvZXNuJ3QgZGVwZW5kIG9uIHRoZSBwYXJlbnQncyBkaW1lbnNpb24uXHJcbiAgICAgKiBBcyBhbiBleGFtcGxlLCBhIGNvbnRyb2wgdGhhdCBoYXMgZGltZW5zaW9ucyBpbiBwaXhlbHMgaXMgZnVsbHkgZGVmaW5lZCwgd2hpbGUgaW4gcGVyY2VudGFnZSBpcyBub3QgZnVsbHkgZGVmaW5lZC5cclxuICAgICAqIEBwYXJhbSBkaW0gdGhlIGRpbWVuc2lvbiB0byBjaGVjayAod2lkdGggb3IgaGVpZ2h0KVxyXG4gICAgICogQHJldHVybnMgaWYgdGhlIGRpbWVuc2lvbiBpcyBmdWxseSBkZWZpbmVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0RpbWVuc2lvbkZ1bGx5RGVmaW5lZChkaW06IFwid2lkdGhcIiB8IFwiaGVpZ2h0XCIpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXREaW1lbnNpb24oZGltKS5pc1BpeGVsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgZGltZW5zaW9uIG9mIHRoZSBjb250cm9sIGFsb25nIGEgc3BlY2lmaWVkIGF4aXNcclxuICAgICAqIEBwYXJhbSBkaW0gdGhlIGRpbWVuc2lvbiB0byByZXRyaWV2ZSAod2lkdGggb3IgaGVpZ2h0KVxyXG4gICAgICogQHJldHVybnMgdGhlIGRpbWVuc2lvbiB2YWx1ZSBhbG9uZyB0aGUgc3BlY2lmaWVkIGF4aXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldERpbWVuc2lvbihkaW06IFwid2lkdGhcIiB8IFwiaGVpZ2h0XCIpOiBWYWx1ZUFuZFVuaXQge1xyXG4gICAgICAgIGlmIChkaW0gPT09IFwid2lkdGhcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9uZXMgYSBjb250cm9sIGFuZCBpdHMgZGVzY2VuZGFudHNcclxuICAgICAqIEBwYXJhbSBob3N0IHRoZSB0ZXh0dXJlIHdoZXJlIHRoZSBjb250cm9sIHdpbGwgYmUgaW5zdGFudGlhdGVkLiBDYW4gYmUgZW1wdHksIGluIHdoaWNoIGNhc2UgdGhlIGNvbnRyb2wgd2lsbCBiZSBjcmVhdGVkIG9uIHRoZSBzYW1lIHRleHR1cmVcclxuICAgICAqIEByZXR1cm5zIHRoZSBjbG9uZWQgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xvbmUoaG9zdD86IEFkdmFuY2VkRHluYW1pY1RleHR1cmUpOiBDb250cm9sIHtcclxuICAgICAgICBjb25zdCBzZXJpYWxpemF0aW9uOiBhbnkgPSB7fTtcclxuICAgICAgICB0aGlzLnNlcmlhbGl6ZShzZXJpYWxpemF0aW9uLCB0cnVlKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udHJvbFR5cGUgPSBUb29scy5JbnN0YW50aWF0ZShcIkJBQllMT04uR1VJLlwiICsgc2VyaWFsaXphdGlvbi5jbGFzc05hbWUpO1xyXG4gICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBjb250cm9sVHlwZSgpO1xyXG4gICAgICAgIGNsb25lZC5wYXJzZShzZXJpYWxpemF0aW9uLCBob3N0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNsb25lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBhIHNlcmlhbGl6ZWQgb2JqZWN0IGludG8gdGhpcyBjb250cm9sXHJcbiAgICAgKiBAcGFyYW0gc2VyaWFsaXplZE9iamVjdCB0aGUgb2JqZWN0IHdpdGggdGhlIHNlcmlhbGl6ZWQgcHJvcGVydGllc1xyXG4gICAgICogQHBhcmFtIGhvc3QgdGhlIHRleHR1cmUgd2hlcmUgdGhlIGNvbnRyb2wgd2lsbCBiZSBpbnN0YW50aWF0ZWQuIENhbiBiZSBlbXB0eSwgaW4gd2hpY2ggY2FzZSB0aGUgY29udHJvbCB3aWxsIGJlIGNyZWF0ZWQgb24gdGhlIHNhbWUgdGV4dHVyZVxyXG4gICAgICogQHBhcmFtIHVybFJld3JpdGVyIGRlZmluZXMgYW4gdXJsIHJld3JpdGVyIHRvIHVwZGF0ZSB1cmxzIGJlZm9yZSBzZW5kaW5nIHRoZW0gdG8gdGhlIGNvbnRyb2xzXHJcbiAgICAgKiBAcmV0dXJucyB0aGlzIGNvbnRyb2xcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhcnNlKHNlcmlhbGl6ZWRPYmplY3Q6IGFueSwgaG9zdD86IEFkdmFuY2VkRHluYW1pY1RleHR1cmUsIHVybFJld3JpdGVyPzogKHVybDogc3RyaW5nKSA9PiBzdHJpbmcpOiBDb250cm9sIHtcclxuICAgICAgICB0aGlzLl91cmxSZXdyaXRlciA9IHVybFJld3JpdGVyO1xyXG4gICAgICAgIFNlcmlhbGl6YXRpb25IZWxwZXIuUGFyc2UoKCkgPT4gdGhpcywgc2VyaWFsaXplZE9iamVjdCwgbnVsbCk7XHJcblxyXG4gICAgICAgIHRoaXMubmFtZSA9IHNlcmlhbGl6ZWRPYmplY3QubmFtZTtcclxuXHJcbiAgICAgICAgdGhpcy5fcGFyc2VGcm9tQ29udGVudChzZXJpYWxpemVkT2JqZWN0LCBob3N0ID8/IHRoaXMuX2hvc3QpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGN1cnJlbnQgY29udHJvbFxyXG4gICAgICogQHBhcmFtIHNlcmlhbGl6YXRpb25PYmplY3QgZGVmaW5lZCB0aGUgSlNPTiBzZXJpYWxpemVkIG9iamVjdFxyXG4gICAgICogQHBhcmFtIGZvcmNlIGlmIHRoZSBjb250cm9sIHNob3VsZCBiZSBzZXJpYWxpemVkIGV2ZW4gaWYgdGhlIGlzU2VyaWFsaXphYmxlIGZsYWcgaXMgc2V0IHRvIGZhbHNlIChkZWZhdWx0IGZhbHNlKVxyXG4gICAgICogQHBhcmFtIGFsbG93Q2FudmFzIGRlZmluZXMgaWYgdGhlIGNvbnRyb2wgaXMgYWxsb3dlZCB0byB1c2UgYSBDYW52YXMyRCBvYmplY3QgdG8gc2VyaWFsaXplICh0cnVlIGJ5IGRlZmF1bHQpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXJpYWxpemUoc2VyaWFsaXphdGlvbk9iamVjdDogYW55LCBmb3JjZTogYm9vbGVhbiA9IGZhbHNlLCBhbGxvd0NhbnZhczogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNTZXJpYWxpemFibGUgJiYgIWZvcmNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgU2VyaWFsaXphdGlvbkhlbHBlci5TZXJpYWxpemUodGhpcywgc2VyaWFsaXphdGlvbk9iamVjdCk7XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5uYW1lID0gdGhpcy5uYW1lO1xyXG4gICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QuY2xhc3NOYW1lID0gdGhpcy5nZXRDbGFzc05hbWUoKTtcclxuXHJcbiAgICAgICAgLy8gQ2FsbCBwcmVwYXJlRm9udCB0byBndWFyYW50ZWUgdGhlIGZvbnQgaXMgcHJvcGVybHkgc2V0IGJlZm9yZSBzZXJpYWxpemluZ1xyXG4gICAgICAgIGlmIChhbGxvd0NhbnZhcykge1xyXG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlRm9udCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fZm9udEZhbWlseSkge1xyXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmZvbnRGYW1pbHkgPSB0aGlzLl9mb250RmFtaWx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5mb250U2l6ZSkge1xyXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmZvbnRTaXplID0gdGhpcy5mb250U2l6ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZm9udFdlaWdodCkge1xyXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmZvbnRXZWlnaHQgPSB0aGlzLmZvbnRXZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmZvbnRTdHlsZSkge1xyXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmZvbnRTdHlsZSA9IHRoaXMuZm9udFN0eWxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2dyYWRpZW50KSB7XHJcbiAgICAgICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QuZ3JhZGllbnQgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5fZ3JhZGllbnQuc2VyaWFsaXplKHNlcmlhbGl6YXRpb25PYmplY3QuZ3JhZGllbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQW5pbWF0aW9uc1xyXG4gICAgICAgIFNlcmlhbGl6YXRpb25IZWxwZXIuQXBwZW5kU2VyaWFsaXplZEFuaW1hdGlvbnModGhpcywgc2VyaWFsaXphdGlvbk9iamVjdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9wYXJzZUZyb21Db250ZW50KHNlcmlhbGl6ZWRPYmplY3Q6IGFueSwgaG9zdDogQWR2YW5jZWREeW5hbWljVGV4dHVyZSwgdXJsUmV3cml0ZXI/OiAodXJsOiBzdHJpbmcpID0+IHN0cmluZykge1xyXG4gICAgICAgIGlmIChzZXJpYWxpemVkT2JqZWN0LmZvbnRGYW1pbHkpIHtcclxuICAgICAgICAgICAgdGhpcy5mb250RmFtaWx5ID0gc2VyaWFsaXplZE9iamVjdC5mb250RmFtaWx5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWRPYmplY3QuZm9udFNpemUpIHtcclxuICAgICAgICAgICAgdGhpcy5mb250U2l6ZSA9IHNlcmlhbGl6ZWRPYmplY3QuZm9udFNpemU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2VyaWFsaXplZE9iamVjdC5mb250V2VpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9udFdlaWdodCA9IHNlcmlhbGl6ZWRPYmplY3QuZm9udFdlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzZXJpYWxpemVkT2JqZWN0LmZvbnRTdHlsZSkge1xyXG4gICAgICAgICAgICB0aGlzLmZvbnRTdHlsZSA9IHNlcmlhbGl6ZWRPYmplY3QuZm9udFN0eWxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gR3JhZGllbnRcclxuICAgICAgICBpZiAoc2VyaWFsaXplZE9iamVjdC5ncmFkaWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBUb29scy5JbnN0YW50aWF0ZShcIkJBQllMT04uR1VJLlwiICsgc2VyaWFsaXplZE9iamVjdC5ncmFkaWVudC5jbGFzc05hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9ncmFkaWVudCA9IG5ldyBjbGFzc05hbWUoKTtcclxuICAgICAgICAgICAgdGhpcy5fZ3JhZGllbnQ/LnBhcnNlKHNlcmlhbGl6ZWRPYmplY3QuZ3JhZGllbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQW5pbWF0aW9uc1xyXG4gICAgICAgIGlmIChzZXJpYWxpemVkT2JqZWN0LmFuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGFuaW1hdGlvbkluZGV4ID0gMDsgYW5pbWF0aW9uSW5kZXggPCBzZXJpYWxpemVkT2JqZWN0LmFuaW1hdGlvbnMubGVuZ3RoOyBhbmltYXRpb25JbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRBbmltYXRpb24gPSBzZXJpYWxpemVkT2JqZWN0LmFuaW1hdGlvbnNbYW5pbWF0aW9uSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJuYWxDbGFzcyA9IEdldENsYXNzKFwiQkFCWUxPTi5BbmltYXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJuYWxDbGFzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKGludGVybmFsQ2xhc3MuUGFyc2UocGFyc2VkQW5pbWF0aW9uKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChzZXJpYWxpemVkT2JqZWN0LmF1dG9BbmltYXRlICYmIHRoaXMuX2hvc3QgJiYgdGhpcy5faG9zdC5nZXRTY2VuZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3N0XHJcbiAgICAgICAgICAgICAgICAgICAgLmdldFNjZW5lKCkhXHJcbiAgICAgICAgICAgICAgICAgICAgLmJlZ2luQW5pbWF0aW9uKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVkT2JqZWN0LmF1dG9BbmltYXRlRnJvbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplZE9iamVjdC5hdXRvQW5pbWF0ZVRvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVkT2JqZWN0LmF1dG9BbmltYXRlTG9vcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplZE9iamVjdC5hdXRvQW5pbWF0ZVNwZWVkIHx8IDEuMFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZml4ZWRSYXRpb01hc3RlcklzV2lkdGggPSBzZXJpYWxpemVkT2JqZWN0LmZpeGVkUmF0aW9NYXN0ZXJJc1dpZHRoID8/IHRoaXMuZml4ZWRSYXRpb01hc3RlcklzV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFJlbGVhc2VzIGFzc29jaWF0ZWQgcmVzb3VyY2VzICovXHJcbiAgICBwdWJsaWMgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLm9uRGlydHlPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vbkJlZm9yZURyYXdPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vbkFmdGVyRHJhd09ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uUG9pbnRlckRvd25PYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJFbnRlck9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uUG9pbnRlck1vdmVPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJPdXRPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJVcE9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uUG9pbnRlckNsaWNrT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMub25XaGVlbE9ic2VydmFibGUuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgLy8gZm9jdXNcclxuICAgICAgICB0aGlzLm9uQmx1ck9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uRm9jdXNPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vbktleWJvYXJkRXZlbnRQcm9jZXNzZWRPYnNlcnZhYmxlLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zdHlsZU9ic2VydmVyICYmIHRoaXMuX3N0eWxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlLm9uQ2hhbmdlZE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3N0eWxlT2JzZXJ2ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdHlsZU9ic2VydmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDb250cm9sKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faG9zdCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2hvc3QuX2xpbmtlZENvbnRyb2xzLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmtXaXRoTWVzaChudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2FsbGJhY2tcclxuICAgICAgICB0aGlzLm9uRGlzcG9zZU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25EaXNwb3NlT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0YXRpY3NcclxuICAgIHByaXZhdGUgc3RhdGljIF9IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUID0gMDtcclxuICAgIHByaXZhdGUgc3RhdGljIF9IT1JJWk9OVEFMX0FMSUdOTUVOVF9SSUdIVCA9IDE7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSID0gMjtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfVkVSVElDQUxfQUxJR05NRU5UX1RPUCA9IDA7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfVkVSVElDQUxfQUxJR05NRU5UX0JPVFRPTSA9IDE7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUiA9IDI7XHJcblxyXG4gICAgLyoqIEhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IEhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbC5fSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogSE9SSVpPTlRBTF9BTElHTk1FTlRfUklHSFQgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IEhPUklaT05UQUxfQUxJR05NRU5UX1JJR0hUKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2wuX0hPUklaT05UQUxfQUxJR05NRU5UX1JJR0hUO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBIT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVIgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IEhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sLl9IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFZFUlRJQ0FMX0FMSUdOTUVOVF9UT1AgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IFZFUlRJQ0FMX0FMSUdOTUVOVF9UT1AoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbC5fVkVSVElDQUxfQUxJR05NRU5UX1RPUDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogVkVSVElDQUxfQUxJR05NRU5UX0JPVFRPTSAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgVkVSVElDQUxfQUxJR05NRU5UX0JPVFRPTSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sLl9WRVJUSUNBTF9BTElHTk1FTlRfQk9UVE9NO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBWRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBWRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2wuX1ZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX0ZvbnRIZWlnaHRTaXplczogeyBba2V5OiBzdHJpbmddOiB7IGFzY2VudDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcjsgZGVzY2VudDogbnVtYmVyIH0gfSA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgX0dldEZvbnRPZmZzZXQoZm9udDogc3RyaW5nLCBlbmdpbmVUb1VzZT86IEFic3RyYWN0RW5naW5lKTogeyBhc2NlbnQ6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXI7IGRlc2NlbnQ6IG51bWJlciB9IHtcclxuICAgICAgICBpZiAoQ29udHJvbC5fRm9udEhlaWdodFNpemVzW2ZvbnRdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDb250cm9sLl9Gb250SGVpZ2h0U2l6ZXNbZm9udF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBlbmdpbmVUb1VzZSB8fCBFbmdpbmVTdG9yZS5MYXN0Q3JlYXRlZEVuZ2luZTtcclxuICAgICAgICBpZiAoIWVuZ2luZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGVuZ2luZS4gVW5hYmxlIHRvIGNyZWF0ZSBhIGNhbnZhcy5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBlbmdpbmUuZ2V0Rm9udE9mZnNldChmb250KTtcclxuICAgICAgICBDb250cm9sLl9Gb250SGVpZ2h0U2l6ZXNbZm9udF0gPSByZXN1bHQ7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgQ29udHJvbCBmcm9tIHBhcnNlZCBkYXRhXHJcbiAgICAgKiBAcGFyYW0gc2VyaWFsaXplZE9iamVjdCBkZWZpbmVzIHBhcnNlZCBkYXRhXHJcbiAgICAgKiBAcGFyYW0gaG9zdCBkZWZpbmVzIHRoZSBob3N0aW5nIEFkdmFuY2VkRHluYW1pY1RleHR1cmVcclxuICAgICAqIEBwYXJhbSB1cmxSZXdyaXRlciBkZWZpbmVzIGFuIHVybCByZXdyaXRlciB0byB1cGRhdGUgdXJscyBiZWZvcmUgc2VuZGluZyB0aGVtIHRvIHRoZSBjb250cm9sc1xyXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFBhcnNlKHNlcmlhbGl6ZWRPYmplY3Q6IGFueSwgaG9zdDogQWR2YW5jZWREeW5hbWljVGV4dHVyZSwgdXJsUmV3cml0ZXI/OiAodXJsOiBzdHJpbmcpID0+IHN0cmluZyk6IENvbnRyb2wge1xyXG4gICAgICAgIGNvbnN0IGNvbnRyb2xUeXBlID0gVG9vbHMuSW5zdGFudGlhdGUoXCJCQUJZTE9OLkdVSS5cIiArIHNlcmlhbGl6ZWRPYmplY3QuY2xhc3NOYW1lKTtcclxuICAgICAgICBjb25zdCBjb250cm9sID0gU2VyaWFsaXphdGlvbkhlbHBlci5QYXJzZShcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Q29udHJvbCA9IG5ldyBjb250cm9sVHlwZSgpIGFzIENvbnRyb2w7XHJcbiAgICAgICAgICAgICAgICBuZXdDb250cm9sLl91cmxSZXdyaXRlciA9IHVybFJld3JpdGVyO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0NvbnRyb2w7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlcmlhbGl6ZWRPYmplY3QsXHJcbiAgICAgICAgICAgIG51bGxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb250cm9sLm5hbWUgPSBzZXJpYWxpemVkT2JqZWN0Lm5hbWU7XHJcblxyXG4gICAgICAgIGNvbnRyb2wuX3BhcnNlRnJvbUNvbnRlbnQoc2VyaWFsaXplZE9iamVjdCwgaG9zdCwgdXJsUmV3cml0ZXIpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udHJvbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIEFkZEhlYWRlcjogKGNvbnRyb2w6IENvbnRyb2wsIHRleHQ6IHN0cmluZywgc2l6ZTogc3RyaW5nIHwgbnVtYmVyLCBvcHRpb25zOiB7IGlzSG9yaXpvbnRhbDogYm9vbGVhbjsgY29udHJvbEZpcnN0OiBib29sZWFuIH0pID0+IGFueSA9ICgpID0+IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBzdGF0aWMgZHJhd0VsbGlwc2UoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBhcmM6IG51bWJlciwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSh4LCB5KTtcclxuICAgICAgICBjb250ZXh0LnNjYWxlKHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIDEsIDAsIDIgKiBNYXRoLlBJICogYXJjLCBhcmMgPCAwKTtcclxuXHJcbiAgICAgICAgaWYgKGFyYyA+PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LnNjYWxlKDEgLyB3aWR0aCwgMSAvIGhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUoLXgsIC15KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29udHJvbCBpcyByZWFkeSB0byBiZSB1c2VkXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNSZWFkeSgpOiBib29sZWFuIHtcclxuICAgICAgICAvLyBNb3N0IGNvbnRyb2xzIGFyZSByZWFkeSBieSBkZWZhdWx0LCBzbyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyB0byByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59XHJcblJlZ2lzdGVyQ2xhc3MoXCJCQUJZTE9OLkdVSS5Db250cm9sXCIsIENvbnRyb2wpO1xyXG4iLCJpbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB0eXBlIHsgSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQgfSBmcm9tIFwiY29yZS9FbmdpbmVzL0lDYW52YXNcIjtcclxuXHJcbi8qKiBDbGFzcyB1c2VkIHRvIHJlbmRlciBhIGdyaWQgICovXHJcbmV4cG9ydCBjbGFzcyBEaXNwbGF5R3JpZCBleHRlbmRzIENvbnRyb2wge1xyXG4gICAgcHJpdmF0ZSBfY2VsbFdpZHRoID0gMjA7XHJcbiAgICBwcml2YXRlIF9jZWxsSGVpZ2h0ID0gMjA7XHJcblxyXG4gICAgcHJpdmF0ZSBfbWlub3JMaW5lVGlja25lc3MgPSAxO1xyXG4gICAgcHJpdmF0ZSBfbWlub3JMaW5lQ29sb3IgPSBcIkRhcmtHcmF5XCI7XHJcblxyXG4gICAgcHJpdmF0ZSBfbWFqb3JMaW5lVGlja25lc3MgPSAyO1xyXG4gICAgcHJpdmF0ZSBfbWFqb3JMaW5lQ29sb3IgPSBcIldoaXRlXCI7XHJcblxyXG4gICAgcHJpdmF0ZSBfbWFqb3JMaW5lRnJlcXVlbmN5ID0gNTtcclxuXHJcbiAgICBwcml2YXRlIF9iYWNrZ3JvdW5kID0gXCJCbGFja1wiO1xyXG5cclxuICAgIHByaXZhdGUgX2Rpc3BsYXlNYWpvckxpbmVzID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX2Rpc3BsYXlNaW5vckxpbmVzID0gdHJ1ZTtcclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIG1pbm9yIGxpbmVzIG11c3QgYmUgcmVuZGVyZWQgKHRydWUgYnkgZGVmYXVsdCkpICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgZGlzcGxheU1pbm9yTGluZXMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXlNaW5vckxpbmVzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZGlzcGxheU1pbm9yTGluZXModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fZGlzcGxheU1pbm9yTGluZXMgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2Rpc3BsYXlNaW5vckxpbmVzID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIG1ham9yIGxpbmVzIG11c3QgYmUgcmVuZGVyZWQgKHRydWUgYnkgZGVmYXVsdCkpICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgZGlzcGxheU1ham9yTGluZXMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXlNYWpvckxpbmVzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZGlzcGxheU1ham9yTGluZXModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fZGlzcGxheU1ham9yTGluZXMgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2Rpc3BsYXlNYWpvckxpbmVzID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGJhY2tncm91bmQgY29sb3IgKEJsYWNrIGJ5IGRlZmF1bHQpICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYmFja2dyb3VuZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYmFja2dyb3VuZCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tncm91bmQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIHdpZHRoIG9mIGVhY2ggY2VsbCAoMjAgYnkgZGVmYXVsdCkgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBjZWxsV2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2VsbFdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgY2VsbFdpZHRoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9jZWxsV2lkdGggPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBoZWlnaHQgb2YgZWFjaCBjZWxsICgyMCBieSBkZWZhdWx0KSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGNlbGxIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2VsbEhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGNlbGxIZWlnaHQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2NlbGxIZWlnaHQgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSB0aWNrbmVzcyBvZiBtaW5vciBsaW5lcyAoMSBieSBkZWZhdWx0KSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IG1pbm9yTGluZVRpY2tuZXNzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbm9yTGluZVRpY2tuZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbWlub3JMaW5lVGlja25lc3ModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX21pbm9yTGluZVRpY2tuZXNzID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgY29sb3Igb2YgbWlub3IgbGluZXMgKERhcmtHcmF5IGJ5IGRlZmF1bHQpICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgbWlub3JMaW5lQ29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWlub3JMaW5lQ29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBtaW5vckxpbmVDb2xvcih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fbWlub3JMaW5lQ29sb3IgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSB0aWNrbmVzcyBvZiBtYWpvciBsaW5lcyAoMiBieSBkZWZhdWx0KSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IG1ham9yTGluZVRpY2tuZXNzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ham9yTGluZVRpY2tuZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbWFqb3JMaW5lVGlja25lc3ModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX21ham9yTGluZVRpY2tuZXNzID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgY29sb3Igb2YgbWFqb3IgbGluZXMgKFdoaXRlIGJ5IGRlZmF1bHQpICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgbWFqb3JMaW5lQ29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWFqb3JMaW5lQ29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBtYWpvckxpbmVDb2xvcih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fbWFqb3JMaW5lQ29sb3IgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBmcmVxdWVuY3kgb2YgbWFqb3IgbGluZXMgKGRlZmF1bHQgaXMgMSBldmVyeSA1IG1pbm9yIGxpbmVzKSovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgbWFqb3JMaW5lRnJlcXVlbmN5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ham9yTGluZUZyZXF1ZW5jeTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IG1ham9yTGluZUZyZXF1ZW5jeSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fbWFqb3JMaW5lRnJlcXVlbmN5ID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEdyaWREaXNwbGF5UmVjdGFuZ2xlXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2RyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYXBwbHlTdGF0ZXMoY29udGV4dCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2JhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5fYmFja2dyb3VuZDtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgY2VsbENvdW50WCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoIC8gdGhpcy5fY2VsbFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCBjZWxsQ291bnRZID0gdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC8gdGhpcy5fY2VsbEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIC8vIE1pbm9yIGxpbmVzXHJcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLyAyO1xyXG4gICAgICAgICAgICBjb25zdCB0b3AgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLyAyO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Rpc3BsYXlNaW5vckxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5fbWlub3JMaW5lQ29sb3I7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHRoaXMuX21pbm9yTGluZVRpY2tuZXNzO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSAtY2VsbENvdW50WCAvIDIgKyAxOyB4IDwgY2VsbENvdW50WCAvIDI7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxYID0gbGVmdCArIHggKiB0aGlzLmNlbGxXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhjZWxsWCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhjZWxsWCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB5ID0gLWNlbGxDb3VudFkgLyAyICsgMTsgeSA8IGNlbGxDb3VudFkgLyAyOyB5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsWSA9IHRvcCArIHkgKiB0aGlzLmNlbGxIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8odGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgY2VsbFkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgY2VsbFkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE1ham9yIGxpbmVzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwbGF5TWFqb3JMaW5lcykge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuX21ham9yTGluZUNvbG9yO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSB0aGlzLl9tYWpvckxpbmVUaWNrbmVzcztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB4ID0gLWNlbGxDb3VudFggLyAyICsgdGhpcy5fbWFqb3JMaW5lRnJlcXVlbmN5OyB4IDwgY2VsbENvdW50WCAvIDI7IHggKz0gdGhpcy5fbWFqb3JMaW5lRnJlcXVlbmN5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbFggPSBsZWZ0ICsgeCAqIHRoaXMuY2VsbFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKGNlbGxYLCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3ApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGNlbGxYLCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeSA9IC1jZWxsQ291bnRZIC8gMiArIHRoaXMuX21ham9yTGluZUZyZXF1ZW5jeTsgeSA8IGNlbGxDb3VudFkgLyAyOyB5ICs9IHRoaXMuX21ham9yTGluZUZyZXF1ZW5jeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxZID0gdG9wICsgeSAqIHRoaXMuY2VsbEhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0LCBjZWxsWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8odGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoLCBjZWxsWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiRGlzcGxheUdyaWRcIjtcclxuICAgIH1cclxufVxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuRGlzcGxheUdyaWRcIiwgRGlzcGxheUdyaWQpO1xyXG4iLCJpbXBvcnQgeyBDb250YWluZXIgfSBmcm9tIFwiLi9jb250YWluZXJcIjtcclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcclxuaW1wb3J0IHR5cGUgeyBNZWFzdXJlIH0gZnJvbSBcIi4uL21lYXN1cmVcIjtcclxuaW1wb3J0IHsgUmVnaXN0ZXJDbGFzcyB9IGZyb20gXCJjb3JlL01pc2MvdHlwZVN0b3JlXCI7XHJcbmltcG9ydCB7IHNlcmlhbGl6ZSB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9yc1wiO1xyXG5pbXBvcnQgdHlwZSB7IElDYW52YXNSZW5kZXJpbmdDb250ZXh0IH0gZnJvbSBcImNvcmUvRW5naW5lcy9JQ2FudmFzXCI7XHJcblxyXG4vKiogQ2xhc3MgdXNlZCB0byBjcmVhdGUgMkQgZWxsaXBzZSBjb250YWluZXJzICovXHJcbmV4cG9ydCBjbGFzcyBFbGxpcHNlIGV4dGVuZHMgQ29udGFpbmVyIHtcclxuICAgIHByaXZhdGUgX3RoaWNrbmVzcyA9IDE7XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBib3JkZXIgdGhpY2tuZXNzICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgdGhpY2tuZXNzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoaWNrbmVzcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRoaWNrbmVzcyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RoaWNrbmVzcyA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdGhpY2tuZXNzID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9hcmMgPSAxO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYXJjaW5nIG9mIHRoZSBlbGxpcHNlIChyYXRpbyBvZiB0aGUgY2lyY3VtZmVyZW5jZSBiZXR3ZWVuIDAgYW5kIDEpICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYXJjKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FyYztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGFyYyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FyYyA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYXJjID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgRWxsaXBzZVxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBvdmVycmlkZSBuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkVsbGlwc2VcIjtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2xvY2FsRHJhdyhjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zaGFkb3dCbHVyIHx8IHRoaXMuc2hhZG93T2Zmc2V0WCB8fCB0aGlzLnNoYWRvd09mZnNldFkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dDb2xvciA9IHRoaXMuc2hhZG93Q29sb3I7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Qmx1ciA9IHRoaXMuc2hhZG93Qmx1cjtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRYID0gdGhpcy5zaGFkb3dPZmZzZXRYO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSB0aGlzLnNoYWRvd09mZnNldFk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBDb250cm9sLmRyYXdFbGxpcHNlKFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLyAyLFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLyAyLFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAvIDIgLSB0aGlzLl90aGlja25lc3MgLyAyLFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLyAyIC0gdGhpcy5fdGhpY2tuZXNzIC8gMixcclxuICAgICAgICAgICAgdGhpcy5fYXJjLFxyXG4gICAgICAgICAgICBjb250ZXh0XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tncm91bmRHcmFkaWVudCB8fCB0aGlzLl9iYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5fZ2V0QmFja2dyb3VuZENvbG9yKGNvbnRleHQpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zaGFkb3dCbHVyIHx8IHRoaXMuc2hhZG93T2Zmc2V0WCB8fCB0aGlzLnNoYWRvd09mZnNldFkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gMDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRYID0gMDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90aGlja25lc3MpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29sb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gdGhpcy5fdGhpY2tuZXNzO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYWRkaXRpb25hbFByb2Nlc3NpbmcocGFyZW50TWVhc3VyZTogTWVhc3VyZSwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5fYWRkaXRpb25hbFByb2Nlc3NpbmcocGFyZW50TWVhc3VyZSwgY29udGV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMuX21lYXN1cmVGb3JDaGlsZHJlbi53aWR0aCAtPSAyICogdGhpcy5fdGhpY2tuZXNzO1xyXG4gICAgICAgIHRoaXMuX21lYXN1cmVGb3JDaGlsZHJlbi5oZWlnaHQgLT0gMiAqIHRoaXMuX3RoaWNrbmVzcztcclxuICAgICAgICB0aGlzLl9tZWFzdXJlRm9yQ2hpbGRyZW4ubGVmdCArPSB0aGlzLl90aGlja25lc3M7XHJcbiAgICAgICAgdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLnRvcCArPSB0aGlzLl90aGlja25lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9jbGlwRm9yQ2hpbGRyZW4oY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICBDb250cm9sLmRyYXdFbGxpcHNlKFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLyAyLFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLyAyLFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAvIDIsXHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAvIDIsXHJcbiAgICAgICAgICAgIHRoaXMuX2FyYyxcclxuICAgICAgICAgICAgY29udGV4dFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuY2xpcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfcmVuZGVySGlnaGxpZ2h0U3BlY2lmaWMoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBDb250cm9sLmRyYXdFbGxpcHNlKFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLyAyLFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLyAyLFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAvIDIgLSB0aGlzLl9oaWdobGlnaHRMaW5lV2lkdGggLyAyLFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLyAyIC0gdGhpcy5faGlnaGxpZ2h0TGluZVdpZHRoIC8gMixcclxuICAgICAgICAgICAgdGhpcy5fYXJjLFxyXG4gICAgICAgICAgICBjb250ZXh0XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblJlZ2lzdGVyQ2xhc3MoXCJCQUJZTE9OLkdVSS5FbGxpcHNlXCIsIEVsbGlwc2UpO1xyXG4iLCJpbXBvcnQgdHlwZSB7IFZlY3RvcjIgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5cclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIi4vYnV0dG9uXCI7XHJcbmltcG9ydCB0eXBlIHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgUmVnaXN0ZXJDbGFzcyB9IGZyb20gXCJjb3JlL01pc2MvdHlwZVN0b3JlXCI7XHJcbmltcG9ydCB0eXBlIHsgUG9pbnRlckluZm9CYXNlIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHR5cGUgeyBJRm9jdXNhYmxlQ29udHJvbCB9IGZyb20gXCIuL2ZvY3VzYWJsZUNvbnRyb2xcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSBhIGZvY3VzYWJsZSBidXR0b24gdGhhdCBjYW4gZWFzaWx5IGhhbmRsZSBrZXlib2FyZCBldmVudHNcclxuICogQHNpbmNlIDUuMC4wXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRm9jdXNhYmxlQnV0dG9uIGV4dGVuZHMgQnV0dG9uIGltcGxlbWVudHMgSUZvY3VzYWJsZUNvbnRyb2wge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdW5mb2N1c2VkQ29sb3IgPSB0aGlzLmNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfb25Qb2ludGVyRG93bih0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgcGk6IFBvaW50ZXJJbmZvQmFzZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIC8vIENsaWNraW5nIG9uIGJ1dHRvbiBzaG91bGQgZm9jdXNcclxuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9vblBvaW50ZXJEb3duKHRhcmdldCwgY29vcmRpbmF0ZXMsIHBvaW50ZXJJZCwgYnV0dG9uSW5kZXgsIHBpKTtcclxuICAgIH1cclxufVxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuRm9jdXNhYmxlQnV0dG9uXCIsIEZvY3VzYWJsZUJ1dHRvbik7XHJcbiIsImltcG9ydCB0eXBlIHsgSUtleWJvYXJkRXZlbnQgfSBmcm9tIFwiY29yZS9FdmVudHMvZGV2aWNlSW5wdXRFdmVudHNcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgdXNlZCB0byBkZWZpbmUgYSBjb250cm9sIHRoYXQgY2FuIHJlY2VpdmUgZm9jdXNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZvY3VzYWJsZUNvbnRyb2wge1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCByZWNlaXZlcyB0aGUgZm9jdXNcclxuICAgICAqL1xyXG4gICAgb25Gb2N1cygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCBsb3NlcyB0aGUgZm9jdXNcclxuICAgICAqL1xyXG4gICAgb25CbHVyKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIGNhbGxlZCB0byBsZXQgdGhlIGNvbnRyb2wgaGFuZGxlIGtleWJvYXJkIGV2ZW50c1xyXG4gICAgICogQHBhcmFtIGV2dCBkZWZpbmVzIHRoZSBjdXJyZW50IGtleWJvYXJkIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIHByb2Nlc3NLZXlib2FyZChldnQ6IElLZXlib2FyZEV2ZW50KTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gY2FsbGVkIHRvIGdldCB0aGUgbGlzdCBvZiBjb250cm9scyB0aGF0IHNob3VsZCBub3Qgc3RlYWwgdGhlIGZvY3VzIGZyb20gdGhpcyBjb250cm9sXHJcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBvZiBjb250cm9sc1xyXG4gICAgICovXHJcbiAgICBrZWVwc0ZvY3VzV2l0aCgpOiBOdWxsYWJsZTxDb250cm9sW10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiB0byBmb2N1cyB0aGUgY29udHJvbCBwcm9ncmFtbWF0aWNhbGx5XHJcbiAgICAgKi9cclxuICAgIGZvY3VzKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHRvIHVuZm9jdXMgdGhlIGNvbnRyb2wgcHJvZ3JhbW1hdGljYWxseVxyXG4gICAgICovXHJcbiAgICBibHVyKCk6IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRhYkluZGV4IG9mIHRoZSBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHRhYkluZGV4PzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBjb2xvciB1c2VkIHRvIGRyYXcgdGhlIGZvY3VzIGJvcmRlclxyXG4gICAgICogRGVmYXVsdHMgdG8gXCJ3aGl0ZVwiXHJcbiAgICAgKi9cclxuICAgIGZvY3VzQm9yZGVyQ29sb3I/OiBzdHJpbmc7XHJcbn1cclxuIiwiLypcclxuICogQmFzZSBHcmFkaWVudCBjbGFzcy4gU2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5LlxyXG4gKi9cclxuXHJcbmltcG9ydCB0eXBlIHsgSUNhbnZhc0dyYWRpZW50LCBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5cclxuLyoqXHJcbiAqIFR5cGUgdGhhdCByZXByZXNlbnRzIGEgc2luZ2xlIHN0b3Agb24gdGhlIGdyYWRpZW50LlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgR3JhZGllbnRDb2xvclN0b3AgPSB7XHJcbiAgICAvKipcclxuICAgICAqIE9mZnNldCBmcm9tIHRoZSBzdGFydCB3aGVyZSB0aGUgY29sb3Igd2lsbCBiZSBhcHBsaWVkLlxyXG4gICAgICovXHJcbiAgICBvZmZzZXQ6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogQ29sb3IgdG8gYmUgYXBwbGllZC5cclxuICAgICAqL1xyXG4gICAgY29sb3I6IHN0cmluZztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB0aGF0IHNlcnZlcyBhcyBhIGJhc2UgZm9yIGFsbCB0aGUgZ3JhZGllbnRzIGNyZWF0ZWQgZnJvbSBjb250ZXh0LlxyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VHcmFkaWVudCB7XHJcbiAgICBwcml2YXRlIF9jb2xvclN0b3BzOiBHcmFkaWVudENvbG9yU3RvcFtdID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSBfY2FudmFzR3JhZGllbnQ6IENhbnZhc0dyYWRpZW50O1xyXG4gICAgcHJpdmF0ZSBfY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQ7XHJcbiAgICBwcml2YXRlIF9ncmFkaWVudERpcnR5OiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE92ZXJ3cml0dGVuIGJ5IGNoaWxkIGNsYXNzZXMgdG8gY3JlYXRlIHRoZSBjYW52YXMgZ3JhZGllbnQuXHJcbiAgICAgKiBAcGFyYW0gY29udGV4dFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgX2NyZWF0ZUNhbnZhc0dyYWRpZW50KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogSUNhbnZhc0dyYWRpZW50O1xyXG5cclxuICAgIHByaXZhdGUgX2FkZENvbG9yU3RvcHNUb0NhbnZhc0dyYWRpZW50KCkge1xyXG4gICAgICAgIGZvciAoY29uc3Qgc3RvcCBvZiB0aGlzLl9jb2xvclN0b3BzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhc0dyYWRpZW50LmFkZENvbG9yU3RvcChzdG9wLm9mZnNldCwgc3RvcC5jb2xvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWYgdGhlcmUgYXJlIGFueSBjaGFuZ2VzIG9yIHRoZSBjb250ZXh0IGNoYW5nZWQsIHJlZ2VuZXJhdGUgdGhlIGNhbnZhcyBncmFkaWVudCBvYmplY3QuIEVsc2UsXHJcbiAgICAgKiByZXVzZSB0aGUgZXhpc3RpbmcgZ3JhZGllbnQuXHJcbiAgICAgKiBAcGFyYW0gY29udGV4dCB0aGUgY29udGV4dCB0byBjcmVhdGUgdGhlIGdyYWRpZW50IGZyb21cclxuICAgICAqIEByZXR1cm5zIHRoZSBjYW52YXMgZ3JhZGllbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENhbnZhc0dyYWRpZW50KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyYWRpZW50RGlydHkgfHwgdGhpcy5fY29udGV4dCAhPT0gY29udGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICAgICAgdGhpcy5fY2FudmFzR3JhZGllbnQgPSB0aGlzLl9jcmVhdGVDYW52YXNHcmFkaWVudChjb250ZXh0KTtcclxuICAgICAgICAgICAgdGhpcy5fYWRkQ29sb3JTdG9wc1RvQ2FudmFzR3JhZGllbnQoKTtcclxuICAgICAgICAgICAgdGhpcy5fZ3JhZGllbnREaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY2FudmFzR3JhZGllbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbmV3IGNvbG9yIHN0b3AgdG8gdGhlIGdyYWRpZW50LlxyXG4gICAgICogQHBhcmFtIG9mZnNldCB0aGUgb2Zmc2V0IG9mIHRoZSBzdG9wIG9uIHRoZSBncmFkaWVudC4gU2hvdWxkIGJlIGJldHdlZW4gMCBhbmQgMVxyXG4gICAgICogQHBhcmFtIGNvbG9yIHRoZSBjb2xvciBvZiB0aGUgc3RvcFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkQ29sb3JTdG9wKG9mZnNldDogbnVtYmVyLCBjb2xvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fY29sb3JTdG9wcy5wdXNoKHsgb2Zmc2V0LCBjb2xvciB9KTtcclxuICAgICAgICB0aGlzLl9ncmFkaWVudERpcnR5ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYW4gZXhpc3RpbmcgY29sb3Igc3RvcCB3aXRoIHRoZSBzcGVjaWZpZWQgb2Zmc2V0IGZyb20gdGhlIGdyYWRpZW50XHJcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IHRoZSBvZmZzZXQgb2YgdGhlIHN0b3AgdG8gYmUgcmVtb3ZlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVtb3ZlQ29sb3JTdG9wKG9mZnNldDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fY29sb3JTdG9wcyA9IHRoaXMuX2NvbG9yU3RvcHMuZmlsdGVyKChjb2xvclN0b3ApID0+IGNvbG9yU3RvcC5vZmZzZXQgIT09IG9mZnNldCk7XHJcbiAgICAgICAgdGhpcy5fZ3JhZGllbnREaXJ0eSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGFsbCBjb2xvciBzdG9wcyBmcm9tIHRoZSBncmFkaWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xlYXJDb2xvclN0b3BzKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbG9yU3RvcHMgPSBbXTtcclxuICAgICAgICB0aGlzLl9ncmFkaWVudERpcnR5ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbG9yIHN0b3BzIG9mIHRoZSBncmFkaWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGNvbG9yU3RvcHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yU3RvcHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyBUeXBlIG9mIHRoZSBncmFkaWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Q2xhc3NOYW1lKCkge1xyXG4gICAgICAgIHJldHVybiBcIkJhc2VHcmFkaWVudFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VyaWFsaXplIGludG8gYSBqc29uIG9iamVjdFxyXG4gICAgICogQHBhcmFtIHNlcmlhbGl6YXRpb25PYmplY3Qgb2JqZWN0IHRvIHNlcmlhbGl6ZSBpbnRvXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXJpYWxpemUoc2VyaWFsaXphdGlvbk9iamVjdDogYW55KSB7XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5jb2xvclN0b3BzID0gdGhpcy5fY29sb3JTdG9wcztcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmNsYXNzTmFtZSA9IHRoaXMuZ2V0Q2xhc3NOYW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSBmcm9tIGpzb24gb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gc2VyaWFsaXphdGlvbk9iamVjdCBvYmplY3QgdG8gcGFyc2UgZnJvbVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGFyc2Uoc2VyaWFsaXphdGlvbk9iamVjdDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5fY29sb3JTdG9wcyA9IHNlcmlhbGl6YXRpb25PYmplY3QuY29sb3JTdG9wcztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IElDYW52YXNHcmFkaWVudCwgSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQgfSBmcm9tIFwiY29yZS9FbmdpbmVzL0lDYW52YXNcIjtcclxuaW1wb3J0IHsgQmFzZUdyYWRpZW50IH0gZnJvbSBcIi4vQmFzZUdyYWRpZW50XCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5cclxuLyoqXHJcbiAqIEdyYWRpZW50IGFsb25nIGEgbGluZSB0aGF0IGNvbm5lY3RzIHR3byBjb29yZGluYXRlcy5cclxuICogVGhlc2UgY29vcmRpbmF0ZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSBjYW52YXMnIHNwYWNlLCBub3QgdG8gYW55IGNvbnRyb2wncyBzcGFjZS5cclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2NyZWF0ZUxpbmVhckdyYWRpZW50XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGluZWFyR3JhZGllbnQgZXh0ZW5kcyBCYXNlR3JhZGllbnQge1xyXG4gICAgcHJpdmF0ZSBfeDA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3kwOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF94MTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfeTE6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgbGluZWFyIGdyYWRpZW50XHJcbiAgICAgKiBAcGFyYW0geDBcclxuICAgICAqIEBwYXJhbSB5MFxyXG4gICAgICogQHBhcmFtIHgxXHJcbiAgICAgKiBAcGFyYW0geTFcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoeDA/OiBudW1iZXIsIHkwPzogbnVtYmVyLCB4MT86IG51bWJlciwgeTE/OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX3gwID0geDAgPz8gMDtcclxuICAgICAgICB0aGlzLl95MCA9IHkwID8/IDA7XHJcbiAgICAgICAgdGhpcy5feDEgPSB4MSA/PyAwO1xyXG4gICAgICAgIHRoaXMuX3kxID0geTEgPz8gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2NyZWF0ZUNhbnZhc0dyYWRpZW50KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogSUNhbnZhc0dyYWRpZW50IHtcclxuICAgICAgICByZXR1cm4gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCh0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFggYXhpcyBjb29yZGluYXRlIG9mIHRoZSBzdGFydGluZyBwb2ludCBpbiB0aGUgbGluZSAqL1xyXG4gICAgcHVibGljIGdldCB4MCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5feDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFggYXhpcyBjb29yZGluYXRlIG9mIHRoZSBlbmRpbmcgcG9pbnQgaW4gdGhlIGxpbmUgKi9cclxuICAgIHB1YmxpYyBnZXQgeDEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3gxO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBZIGF4aXMgY29vcmRpbmF0ZSBvZiB0aGUgc3RhcnRpbmcgcG9pbnQgaW4gdGhlIGxpbmUgKi9cclxuICAgIHB1YmxpYyBnZXQgeTAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3kwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBZIGF4aXMgY29vcmRpbmF0ZSBvZiB0aGUgZW5kaW5nIHBvaW50IGluIHRoZSBsaW5lICovXHJcbiAgICBwdWJsaWMgZ2V0IHkxKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl95MTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGdyYWRpZW50XHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY2xhc3MgbmFtZSBvZiB0aGUgZ3JhZGllbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkxpbmVhckdyYWRpZW50XCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXJpYWxpemVzIHRoaXMgZ3JhZGllbnRcclxuICAgICAqIEBwYXJhbSBzZXJpYWxpemF0aW9uT2JqZWN0IHRoZSBvYmplY3QgdG8gc2VyaWFsaXplIHRvXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXJpYWxpemUoc2VyaWFsaXphdGlvbk9iamVjdDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuc2VyaWFsaXplKHNlcmlhbGl6YXRpb25PYmplY3QpO1xyXG4gICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QueDAgPSB0aGlzLl94MDtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LnkwID0gdGhpcy5feTA7XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC54MSA9IHRoaXMuX3gxO1xyXG4gICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QueTEgPSB0aGlzLl95MTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBhIGdyYWRpZW50IGZyb20gYSBzZXJpYWxpemF0aW9uIG9iamVjdFxyXG4gICAgICogQHBhcmFtIHNlcmlhbGl6YXRpb25PYmplY3QgdGhlIG9iamVjdCB0byBwYXJzZSBmcm9tXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBwYXJzZShzZXJpYWxpemF0aW9uT2JqZWN0OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5wYXJzZShzZXJpYWxpemF0aW9uT2JqZWN0KTtcclxuICAgICAgICB0aGlzLl94MCA9IHNlcmlhbGl6YXRpb25PYmplY3QueDA7XHJcbiAgICAgICAgdGhpcy5feTAgPSBzZXJpYWxpemF0aW9uT2JqZWN0LnkwO1xyXG4gICAgICAgIHRoaXMuX3gxID0gc2VyaWFsaXphdGlvbk9iamVjdC54MTtcclxuICAgICAgICB0aGlzLl95MSA9IHNlcmlhbGl6YXRpb25PYmplY3QueTE7XHJcbiAgICB9XHJcbn1cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLkxpbmVhckdyYWRpZW50XCIsIExpbmVhckdyYWRpZW50KTtcclxuIiwiaW1wb3J0IHR5cGUgeyBJQ2FudmFzR3JhZGllbnQsIElDYW52YXNSZW5kZXJpbmdDb250ZXh0IH0gZnJvbSBcImNvcmUvRW5naW5lcy9JQ2FudmFzXCI7XHJcbmltcG9ydCB7IEJhc2VHcmFkaWVudCB9IGZyb20gXCIuL0Jhc2VHcmFkaWVudFwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuXHJcbi8qKlxyXG4gKiBHcmFkaWVudCBmb3JtZWQgZnJvbSB0d28gY2lyY2xlcyB3aXRoIHRoZWlyIG93biBjZW50ZXJzIGFuZCByYWRpdXMuXHJcbiAqIFRoZSBjb29yZGluYXRlcyBvZiB0aGUgY2lyY2xlcyBjZW50ZXJzIGFyZSByZWxhdGl2ZSB0byB0aGUgY2FudmFzJyBzcGFjZSwgbm90IHRvIGFueSBjb250cm9sJ3Mgc3BhY2UuXHJcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC9jcmVhdGVSYWRpYWxHcmFkaWVudFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJhZGlhbEdyYWRpZW50IGV4dGVuZHMgQmFzZUdyYWRpZW50IHtcclxuICAgIHByaXZhdGUgX3gwOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF95MDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfcjA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3gxOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF95MTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfcjE6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmFkaWFsIGdyYWRpZW50XHJcbiAgICAgKiBAcGFyYW0geDAgeCBjb29yZGluYXRlIG9mIHRoZSBmaXJzdCBjaXJjbGUncyBjZW50ZXJcclxuICAgICAqIEBwYXJhbSB5MCB5IGNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IGNpcmNsZSdzIGNlbnRlclxyXG4gICAgICogQHBhcmFtIHIwIHJhZGl1cyBvZiB0aGUgZmlyc3QgY2lyY2xlXHJcbiAgICAgKiBAcGFyYW0geDEgeCBjb29yZGluYXRlIG9mIHRoZSBzZWNvbmQgY2lyY2xlJ3MgY2VudGVyXHJcbiAgICAgKiBAcGFyYW0geTEgeSBjb29yZGluYXRlIG9mIHRoZSBzZWNvbmQgY2lyY2xlJ3MgY2VudGVyXHJcbiAgICAgKiBAcGFyYW0gcjEgcmFkaXVzIG9mIHRoZSBzZWNvbmQgY2lyY2xlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHgwPzogbnVtYmVyLCB5MD86IG51bWJlciwgcjA/OiBudW1iZXIsIHgxPzogbnVtYmVyLCB5MT86IG51bWJlciwgcjE/OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX3gwID0geDAgPz8gMDtcclxuICAgICAgICB0aGlzLl95MCA9IHkwID8/IDA7XHJcbiAgICAgICAgdGhpcy5fcjAgPSByMCA/PyAwO1xyXG4gICAgICAgIHRoaXMuX3gxID0geDEgPz8gMDtcclxuICAgICAgICB0aGlzLl95MSA9IHkxID8/IDA7XHJcbiAgICAgICAgdGhpcy5fcjEgPSByMSA/PyAwO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfY3JlYXRlQ2FudmFzR3JhZGllbnQoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiBJQ2FudmFzR3JhZGllbnQge1xyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5fcjAsIHRoaXMuX3gxLCB0aGlzLl95MSwgdGhpcy5fcjEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiB4IGNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IGNpcmNsZSdzIGNlbnRlciAqL1xyXG4gICAgcHVibGljIGdldCB4MCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5feDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIHggY29vcmRpbmF0ZSBvZiB0aGUgc2Vjb25kIGNpcmNsZSdzIGNlbnRlciAqL1xyXG4gICAgcHVibGljIGdldCB4MSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5feDE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIHkgY29vcmRpbmF0ZSBvZiB0aGUgZmlyc3QgY2lyY2xlJ3MgY2VudGVyICovXHJcbiAgICBwdWJsaWMgZ2V0IHkwKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl95MDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogeSBjb29yZGluYXRlIG9mIHRoZSBzZWNvbmQgY2lyY2xlJ3MgY2VudGVyICovXHJcbiAgICBwdWJsaWMgZ2V0IHkxKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl95MTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogcmFkaXVzIG9mIHRoZSBmaXJzdCBjaXJjbGUgKi9cclxuICAgIHB1YmxpYyBnZXQgcjAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3IwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiByYWRpdXMgb2YgdGhlIHNlY29uZCBjaXJjbGUgKi9cclxuICAgIHB1YmxpYyBnZXQgcjEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3IxO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgZ3JhZGllbnRcclxuICAgICAqIEByZXR1cm5zIHRoZSBjbGFzcyBuYW1lIG9mIHRoZSBncmFkaWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0Q2xhc3NOYW1lKCkge1xyXG4gICAgICAgIHJldHVybiBcIlJhZGlhbEdyYWRpZW50XCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXJpYWxpemVzIHRoaXMgZ3JhZGllbnRcclxuICAgICAqIEBwYXJhbSBzZXJpYWxpemF0aW9uT2JqZWN0IHRoZSBvYmplY3QgdG8gc2VyaWFsaXplIHRvXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXJpYWxpemUoc2VyaWFsaXphdGlvbk9iamVjdDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuc2VyaWFsaXplKHNlcmlhbGl6YXRpb25PYmplY3QpO1xyXG4gICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QueDAgPSB0aGlzLl94MDtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LnkwID0gdGhpcy5feTA7XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5yMCA9IHRoaXMuX3IwO1xyXG4gICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QueDEgPSB0aGlzLl94MTtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LnkxID0gdGhpcy5feTE7XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5yMSA9IHRoaXMuX3IxO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIGEgZ3JhZGllbnQgZnJvbSBhIHNlcmlhbGl6YXRpb24gb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gc2VyaWFsaXphdGlvbk9iamVjdCB0aGUgb2JqZWN0IHRvIHBhcnNlIGZyb21cclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIHBhcnNlKHNlcmlhbGl6YXRpb25PYmplY3Q6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLnBhcnNlKHNlcmlhbGl6YXRpb25PYmplY3QpO1xyXG4gICAgICAgIHRoaXMuX3gwID0gc2VyaWFsaXphdGlvbk9iamVjdC54MDtcclxuICAgICAgICB0aGlzLl95MCA9IHNlcmlhbGl6YXRpb25PYmplY3QueTA7XHJcbiAgICAgICAgdGhpcy5fcjAgPSBzZXJpYWxpemF0aW9uT2JqZWN0LnIwO1xyXG4gICAgICAgIHRoaXMuX3gxID0gc2VyaWFsaXphdGlvbk9iamVjdC54MTtcclxuICAgICAgICB0aGlzLl95MSA9IHNlcmlhbGl6YXRpb25PYmplY3QueTE7XHJcbiAgICAgICAgdGhpcy5fcjEgPSBzZXJpYWxpemF0aW9uT2JqZWN0LnIxO1xyXG4gICAgfVxyXG59XHJcblJlZ2lzdGVyQ2xhc3MoXCJCQUJZTE9OLkdVSS5SYWRpYWxHcmFkaWVudFwiLCBSYWRpYWxHcmFkaWVudCk7XHJcbiIsImltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5cclxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIi4vY29udGFpbmVyXCI7XHJcbmltcG9ydCB7IFZhbHVlQW5kVW5pdCB9IGZyb20gXCIuLi92YWx1ZUFuZFVuaXRcIjtcclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcclxuaW1wb3J0IHR5cGUgeyBNZWFzdXJlIH0gZnJvbSBcIi4uL21lYXN1cmVcIjtcclxuaW1wb3J0IHsgVG9vbHMgfSBmcm9tIFwiY29yZS9NaXNjL3Rvb2xzXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgdHlwZSB7IElDYW52YXNSZW5kZXJpbmdDb250ZXh0IH0gZnJvbSBcImNvcmUvRW5naW5lcy9JQ2FudmFzXCI7XHJcbmltcG9ydCB0eXBlIHsgQWR2YW5jZWREeW5hbWljVGV4dHVyZSB9IGZyb20gXCIuLi9hZHZhbmNlZER5bmFtaWNUZXh0dXJlXCI7XHJcbmltcG9ydCB0eXBlIHsgT2JzZXJ2ZXIgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBjcmVhdGUgYSAyRCBncmlkIGNvbnRhaW5lclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEdyaWQgZXh0ZW5kcyBDb250YWluZXIge1xyXG4gICAgcHJpdmF0ZSBfcm93RGVmaW5pdGlvbnMgPSBuZXcgQXJyYXk8VmFsdWVBbmRVbml0PigpO1xyXG4gICAgcHJpdmF0ZSBfcm93RGVmaW5pdGlvbk9ic2VydmVyczogT2JzZXJ2ZXI8dm9pZD5bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfY29sdW1uRGVmaW5pdGlvbnMgPSBuZXcgQXJyYXk8VmFsdWVBbmRVbml0PigpO1xyXG4gICAgcHJpdmF0ZSBfY29sdW1uRGVmaW5pdGlvbk9ic2VydmVyczogT2JzZXJ2ZXI8dm9pZD5bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfY2VsbHM6IHsgW2tleTogc3RyaW5nXTogQ29udGFpbmVyIH0gPSB7fTtcclxuICAgIHByaXZhdGUgX2NoaWxkQ29udHJvbHMgPSBuZXcgQXJyYXk8Q29udHJvbD4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMvR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IGNvbnRyb2wgY29udGVudCBtdXN0IGJlIGNsaXBwZWRcclxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgbm90IGNsaXBwaW5nIGNvbnRlbnQgbWF5IGdlbmVyYXRlIGlzc3VlcyB3aXRoIGFkdC51c2VJbnZhbGlkYXRlUmVjdE9wdGltaXphdGlvbiBzbyBpdCBpcyByZWNvbW1lbmRlZCB0byB0dXJuIHRoaXMgb3B0aW1pemF0aW9uIG9mZiBpZiB5b3Ugd2FudCB0byB1c2UgdW5jbGlwcGVkIGNoaWxkcmVuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXQgY2xpcENvbnRlbnQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9jbGlwQ29udGVudCA9IHZhbHVlO1xyXG5cclxuICAgICAgICAvLyBUaGlzIHZhbHVlIGhhcyB0byBiZSByZXBsaWNhdGVkIG9uIGFsbCBvZiB0aGUgY29udGFpbmVyIGNlbGxzXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fY2VsbHMpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2VsbHNba2V5XS5jbGlwQ29udGVudCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXQgY2xpcENvbnRlbnQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaXBDb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cy9HZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBjaGlsZHJlbiBhcmUgY2xpcHBlZCB0byB0aGUgY3VycmVudCBjb250cm9sIGJvdW5kcy5cclxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgbm90IGNsaXBwaW5nIGNoaWxkcmVuIG1heSBnZW5lcmF0ZSBpc3N1ZXMgd2l0aCBhZHQudXNlSW52YWxpZGF0ZVJlY3RPcHRpbWl6YXRpb24gc28gaXQgaXMgcmVjb21tZW5kZWQgdG8gdHVybiB0aGlzIG9wdGltaXphdGlvbiBvZmYgaWYgeW91IHdhbnQgdG8gdXNlIHVuY2xpcHBlZCBjaGlsZHJlblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2V0IGNsaXBDaGlsZHJlbih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2NsaXBDaGlsZHJlbiA9IHZhbHVlO1xyXG5cclxuICAgICAgICAvLyBUaGlzIHZhbHVlIGhhcyB0byBiZSByZXBsaWNhdGVkIG9uIGFsbCBvZiB0aGUgY29udGFpbmVyIGNlbGxzXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fY2VsbHMpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2VsbHNba2V5XS5jbGlwQ2hpbGRyZW4gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldCBjbGlwQ2hpbGRyZW4oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaXBDaGlsZHJlbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG51bWJlciBvZiBjb2x1bW5zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgY29sdW1uQ291bnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uRGVmaW5pdGlvbnMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHJvd3NcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCByb3dDb3VudCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yb3dEZWZpbml0aW9ucy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgdGhlIGxpc3Qgb2YgY2hpbGRyZW4gKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXQgY2hpbGRyZW4oKTogQ29udHJvbFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRDb250cm9scztcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyB0aGUgbGlzdCBvZiBjZWxscyAoZS5nLiB0aGUgY29udGFpbmVycykgKi9cclxuICAgIHB1YmxpYyBnZXQgY2VsbHMoKTogeyBba2V5OiBzdHJpbmddOiBDb250YWluZXIgfSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NlbGxzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgZGVmaW5pdGlvbiBvZiBhIHNwZWNpZmljIHJvd1xyXG4gICAgICogQHBhcmFtIGluZGV4IGRlZmluZXMgdGhlIGluZGV4IG9mIHRoZSByb3dcclxuICAgICAqIEByZXR1cm5zIHRoZSByb3cgZGVmaW5pdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Um93RGVmaW5pdGlvbihpbmRleDogbnVtYmVyKTogTnVsbGFibGU8VmFsdWVBbmRVbml0PiB7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9yb3dEZWZpbml0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fcm93RGVmaW5pdGlvbnNbaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgZGVmaW5pdGlvbiBvZiBhIHNwZWNpZmljIGNvbHVtblxyXG4gICAgICogQHBhcmFtIGluZGV4IGRlZmluZXMgdGhlIGluZGV4IG9mIHRoZSBjb2x1bW5cclxuICAgICAqIEByZXR1cm5zIHRoZSBjb2x1bW4gZGVmaW5pdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Q29sdW1uRGVmaW5pdGlvbihpbmRleDogbnVtYmVyKTogTnVsbGFibGU8VmFsdWVBbmRVbml0PiB7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9jb2x1bW5EZWZpbml0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uRGVmaW5pdGlvbnNbaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyByb3cgdG8gdGhlIGdyaWRcclxuICAgICAqIEBwYXJhbSBoZWlnaHQgZGVmaW5lcyB0aGUgaGVpZ2h0IG9mIHRoZSByb3cgKGVpdGhlciBpbiBwaXhlbCBvciBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMSlcclxuICAgICAqIEBwYXJhbSBpc1BpeGVsIGRlZmluZXMgaWYgdGhlIGhlaWdodCBpcyBleHByZXNzZWQgaW4gcGl4ZWwgKG9yIGluIHBlcmNlbnRhZ2UpXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBncmlkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRSb3dEZWZpbml0aW9uKGhlaWdodDogbnVtYmVyLCBpc1BpeGVsID0gZmFsc2UpOiBHcmlkIHtcclxuICAgICAgICB0aGlzLl9yb3dEZWZpbml0aW9ucy5wdXNoKG5ldyBWYWx1ZUFuZFVuaXQoaGVpZ2h0LCBpc1BpeGVsID8gVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMIDogVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BFUkNFTlRBR0UpKTtcclxuICAgICAgICB0aGlzLl9yb3dEZWZpbml0aW9uT2JzZXJ2ZXJzLnB1c2godGhpcy5fcm93RGVmaW5pdGlvbnNbdGhpcy5yb3dDb3VudCAtIDFdLm9uQ2hhbmdlZE9ic2VydmFibGUuYWRkKCgpID0+IHRoaXMuX21hcmtBc0RpcnR5KCkpISk7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbmV3IGNvbHVtbiB0byB0aGUgZ3JpZFxyXG4gICAgICogQHBhcmFtIHdpZHRoIGRlZmluZXMgdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW4gKGVpdGhlciBpbiBwaXhlbCBvciBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMSlcclxuICAgICAqIEBwYXJhbSBpc1BpeGVsIGRlZmluZXMgaWYgdGhlIHdpZHRoIGlzIGV4cHJlc3NlZCBpbiBwaXhlbCAob3IgaW4gcGVyY2VudGFnZSlcclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IGdyaWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkZENvbHVtbkRlZmluaXRpb24od2lkdGg6IG51bWJlciwgaXNQaXhlbCA9IGZhbHNlKTogR3JpZCB7XHJcbiAgICAgICAgdGhpcy5fY29sdW1uRGVmaW5pdGlvbnMucHVzaChuZXcgVmFsdWVBbmRVbml0KHdpZHRoLCBpc1BpeGVsID8gVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMIDogVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BFUkNFTlRBR0UpKTtcclxuICAgICAgICB0aGlzLl9jb2x1bW5EZWZpbml0aW9uT2JzZXJ2ZXJzLnB1c2godGhpcy5fY29sdW1uRGVmaW5pdGlvbnNbdGhpcy5jb2x1bW5Db3VudCAtIDFdLm9uQ2hhbmdlZE9ic2VydmFibGUuYWRkKCgpID0+IHRoaXMuX21hcmtBc0RpcnR5KCkpISk7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgYSByb3cgZGVmaW5pdGlvblxyXG4gICAgICogQHBhcmFtIGluZGV4IGRlZmluZXMgdGhlIGluZGV4IG9mIHRoZSByb3cgdG8gdXBkYXRlXHJcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IGRlZmluZXMgdGhlIGhlaWdodCBvZiB0aGUgcm93IChlaXRoZXIgaW4gcGl4ZWwgb3IgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEpXHJcbiAgICAgKiBAcGFyYW0gaXNQaXhlbCBkZWZpbmVzIGlmIHRoZSB3ZWlnaHQgaXMgZXhwcmVzc2VkIGluIHBpeGVsIChvciBpbiBwZXJjZW50YWdlKVxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgZ3JpZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Um93RGVmaW5pdGlvbihpbmRleDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgaXNQaXhlbCA9IGZhbHNlKTogR3JpZCB7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9yb3dEZWZpbml0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5fcm93RGVmaW5pdGlvbnNbaW5kZXhdO1xyXG4gICAgICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnQuaXNQaXhlbCA9PT0gaXNQaXhlbCAmJiBjdXJyZW50LnZhbHVlID09PSBoZWlnaHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9yb3dEZWZpbml0aW9uc1tpbmRleF0ub25DaGFuZ2VkT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fcm93RGVmaW5pdGlvbk9ic2VydmVyc1tpbmRleF0pO1xyXG4gICAgICAgIHRoaXMuX3Jvd0RlZmluaXRpb25zW2luZGV4XSA9IG5ldyBWYWx1ZUFuZFVuaXQoaGVpZ2h0LCBpc1BpeGVsID8gVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMIDogVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BFUkNFTlRBR0UpO1xyXG4gICAgICAgIHRoaXMuX3Jvd0RlZmluaXRpb25PYnNlcnZlcnNbaW5kZXhdID0gdGhpcy5fcm93RGVmaW5pdGlvbnNbaW5kZXhdLm9uQ2hhbmdlZE9ic2VydmFibGUuYWRkKCgpID0+IHRoaXMuX21hcmtBc0RpcnR5KCkpITtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgYSBjb2x1bW4gZGVmaW5pdGlvblxyXG4gICAgICogQHBhcmFtIGluZGV4IGRlZmluZXMgdGhlIGluZGV4IG9mIHRoZSBjb2x1bW4gdG8gdXBkYXRlXHJcbiAgICAgKiBAcGFyYW0gd2lkdGggZGVmaW5lcyB0aGUgd2lkdGggb2YgdGhlIGNvbHVtbiAoZWl0aGVyIGluIHBpeGVsIG9yIGEgdmFsdWUgYmV0d2VlbiAwIGFuZCAxKVxyXG4gICAgICogQHBhcmFtIGlzUGl4ZWwgZGVmaW5lcyBpZiB0aGUgd2lkdGggaXMgZXhwcmVzc2VkIGluIHBpeGVsIChvciBpbiBwZXJjZW50YWdlKVxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgZ3JpZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Q29sdW1uRGVmaW5pdGlvbihpbmRleDogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBpc1BpeGVsID0gZmFsc2UpOiBHcmlkIHtcclxuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuX2NvbHVtbkRlZmluaXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLl9jb2x1bW5EZWZpbml0aW9uc1tpbmRleF07XHJcbiAgICAgICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudC5pc1BpeGVsID09PSBpc1BpeGVsICYmIGN1cnJlbnQudmFsdWUgPT09IHdpZHRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29sdW1uRGVmaW5pdGlvbnNbaW5kZXhdLm9uQ2hhbmdlZE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX2NvbHVtbkRlZmluaXRpb25PYnNlcnZlcnNbaW5kZXhdKTtcclxuICAgICAgICB0aGlzLl9jb2x1bW5EZWZpbml0aW9uc1tpbmRleF0gPSBuZXcgVmFsdWVBbmRVbml0KHdpZHRoLCBpc1BpeGVsID8gVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMIDogVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BFUkNFTlRBR0UpO1xyXG4gICAgICAgIHRoaXMuX2NvbHVtbkRlZmluaXRpb25PYnNlcnZlcnNbaW5kZXhdID0gdGhpcy5fY29sdW1uRGVmaW5pdGlvbnNbaW5kZXhdLm9uQ2hhbmdlZE9ic2VydmFibGUuYWRkKCgpID0+IHRoaXMuX21hcmtBc0RpcnR5KCkpITtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBsaXN0IG9mIGNoaWxkcmVuIHN0b3JlZCBpbiBhIHNwZWNpZmljIGNlbGxcclxuICAgICAqIEBwYXJhbSByb3cgZGVmaW5lcyB0aGUgcm93IHRvIGNoZWNrXHJcbiAgICAgKiBAcGFyYW0gY29sdW1uIGRlZmluZXMgdGhlIGNvbHVtbiB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMgdGhlIGxpc3Qgb2YgY29udHJvbHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENoaWxkcmVuQXQocm93OiBudW1iZXIsIGNvbHVtbjogbnVtYmVyKTogTnVsbGFibGU8QXJyYXk8Q29udHJvbD4+IHtcclxuICAgICAgICBjb25zdCBjZWxsID0gdGhpcy5fY2VsbHNbYCR7cm93fToke2NvbHVtbn1gXTtcclxuXHJcbiAgICAgICAgaWYgKCFjZWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNlbGwuY2hpbGRyZW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY2hpbGQgY2VsbCBpbmZvIChyb3cgeCBjb2x1bW4pXHJcbiAgICAgKiBAcGFyYW0gY2hpbGQgZGVmaW5lcyB0aGUgY29udHJvbCB0byBnZXQgaW5mbyBmcm9tXHJcbiAgICAgKiBAcmV0dXJucyBhIHN0cmluZyBjb250YWluaW5nIHRoZSBjaGlsZCBjZWxsIGluZm8gKHJvdyB4IGNvbHVtbilcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENoaWxkQ2VsbEluZm8oY2hpbGQ6IENvbnRyb2wpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBjaGlsZC5fdGFnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3JlbW92ZUNlbGwoY2VsbDogQ29udGFpbmVyLCBrZXk6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghY2VsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5yZW1vdmVDb250cm9sKGNlbGwpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNvbnRyb2wgb2YgY2VsbC5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZEluZGV4ID0gdGhpcy5fY2hpbGRDb250cm9scy5pbmRleE9mKGNvbnRyb2wpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoaWxkSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGlsZENvbnRyb2xzLnNwbGljZShjaGlsZEluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2NlbGxzW2tleV07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfb2Zmc2V0Q2VsbChwcmV2aW91c0tleTogc3RyaW5nLCBrZXk6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghdGhpcy5fY2VsbHNba2V5XSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jZWxsc1twcmV2aW91c0tleV0gPSB0aGlzLl9jZWxsc1trZXldO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNvbnRyb2wgb2YgdGhpcy5fY2VsbHNbcHJldmlvdXNLZXldLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuX3RhZyA9IHByZXZpb3VzS2V5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2NlbGxzW2tleV07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYSBjb2x1bW4gZGVmaW5pdGlvbiBhdCBzcGVjaWZpZWQgaW5kZXhcclxuICAgICAqIEBwYXJhbSBpbmRleCBkZWZpbmVzIHRoZSBpbmRleCBvZiB0aGUgY29sdW1uIHRvIHJlbW92ZVxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgZ3JpZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVtb3ZlQ29sdW1uRGVmaW5pdGlvbihpbmRleDogbnVtYmVyKTogR3JpZCB7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9jb2x1bW5EZWZpbml0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMuX3Jvd0RlZmluaXRpb25zLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGAke3h9OiR7aW5kZXh9YDtcclxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMuX2NlbGxzW2tleV07XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVDZWxsKGNlbGwsIGtleSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMuX3Jvd0RlZmluaXRpb25zLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSBpbmRleCArIDE7IHkgPCB0aGlzLl9jb2x1bW5EZWZpbml0aW9ucy5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNLZXkgPSBgJHt4fToke3kgLSAxfWA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBgJHt4fToke3l9YDtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXRDZWxsKHByZXZpb3VzS2V5LCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jb2x1bW5EZWZpbml0aW9uc1tpbmRleF0ub25DaGFuZ2VkT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fY29sdW1uRGVmaW5pdGlvbk9ic2VydmVyc1tpbmRleF0pO1xyXG4gICAgICAgIHRoaXMuX2NvbHVtbkRlZmluaXRpb25zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgdGhpcy5fY29sdW1uRGVmaW5pdGlvbk9ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhIHJvdyBkZWZpbml0aW9uIGF0IHNwZWNpZmllZCBpbmRleFxyXG4gICAgICogQHBhcmFtIGluZGV4IGRlZmluZXMgdGhlIGluZGV4IG9mIHRoZSByb3cgdG8gcmVtb3ZlXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBncmlkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW1vdmVSb3dEZWZpbml0aW9uKGluZGV4OiBudW1iZXIpOiBHcmlkIHtcclxuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuX3Jvd0RlZmluaXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5fY29sdW1uRGVmaW5pdGlvbnMubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5ID0gYCR7aW5kZXh9OiR7eX1gO1xyXG4gICAgICAgICAgICBjb25zdCBjZWxsID0gdGhpcy5fY2VsbHNba2V5XTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUNlbGwoY2VsbCwga2V5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5fY29sdW1uRGVmaW5pdGlvbnMubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IGluZGV4ICsgMTsgeCA8IHRoaXMuX3Jvd0RlZmluaXRpb25zLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c0tleSA9IGAke3ggLSAxfToke3l9YDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGAke3h9OiR7eX1gO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldENlbGwocHJldmlvdXNLZXksIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3Jvd0RlZmluaXRpb25zW2luZGV4XS5vbkNoYW5nZWRPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9yb3dEZWZpbml0aW9uT2JzZXJ2ZXJzW2luZGV4XSk7XHJcbiAgICAgICAgdGhpcy5fcm93RGVmaW5pdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB0aGlzLl9yb3dEZWZpbml0aW9uT2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyBjb250cm9sIHRvIHRoZSBjdXJyZW50IGdyaWRcclxuICAgICAqIEBwYXJhbSBjb250cm9sIGRlZmluZXMgdGhlIGNvbnRyb2wgdG8gYWRkXHJcbiAgICAgKiBAcGFyYW0gcm93IGRlZmluZXMgdGhlIHJvdyB3aGVyZSB0byBhZGQgdGhlIGNvbnRyb2wgKDAgYnkgZGVmYXVsdClcclxuICAgICAqIEBwYXJhbSBjb2x1bW4gZGVmaW5lcyB0aGUgY29sdW1uIHdoZXJlIHRvIGFkZCB0aGUgY29udHJvbCAoMCBieSBkZWZhdWx0KVxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgZ3JpZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgYWRkQ29udHJvbChjb250cm9sOiBDb250cm9sLCByb3c6IG51bWJlciA9IDAsIGNvbHVtbjogbnVtYmVyID0gMCk6IEdyaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9yb3dEZWZpbml0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgLy8gQWRkIGRlZmF1bHQgcm93IGRlZmluaXRpb25cclxuICAgICAgICAgICAgdGhpcy5hZGRSb3dEZWZpbml0aW9uKDEsIGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb2x1bW5EZWZpbml0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgLy8gQWRkIGRlZmF1bHQgY29sdW1uIGRlZmluaXRpb25cclxuICAgICAgICAgICAgdGhpcy5hZGRDb2x1bW5EZWZpbml0aW9uKDEsIGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jaGlsZENvbnRyb2xzLmluZGV4T2YoY29udHJvbCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIFRvb2xzLldhcm4oYENvbnRyb2wgKE5hbWU6JHtjb250cm9sLm5hbWV9LCBVbmlxdWVJZDoke2NvbnRyb2wudW5pcXVlSWR9KSBpcyBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGdyaWQuIFlvdSBtdXN0IHJlbW92ZSBpdCBiZWZvcmUgcmVhdHRhY2hpbmcgaXRgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB4ID0gTWF0aC5taW4ocm93LCB0aGlzLl9yb3dEZWZpbml0aW9ucy5sZW5ndGggLSAxKTtcclxuICAgICAgICBjb25zdCB5ID0gTWF0aC5taW4oY29sdW1uLCB0aGlzLl9jb2x1bW5EZWZpbml0aW9ucy5sZW5ndGggLSAxKTtcclxuICAgICAgICBjb25zdCBrZXkgPSBgJHt4fToke3l9YDtcclxuICAgICAgICBsZXQgZ29vZENvbnRhaW5lciA9IHRoaXMuX2NlbGxzW2tleV07XHJcblxyXG4gICAgICAgIGlmICghZ29vZENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBnb29kQ29udGFpbmVyID0gbmV3IENvbnRhaW5lcihrZXkpO1xyXG4gICAgICAgICAgICB0aGlzLl9jZWxsc1trZXldID0gZ29vZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgZ29vZENvbnRhaW5lci5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgICAgICBnb29kQ29udGFpbmVyLnZlcnRpY2FsQWxpZ25tZW50ID0gQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfVE9QO1xyXG4gICAgICAgICAgICBnb29kQ29udGFpbmVyLmNsaXBDb250ZW50ID0gdGhpcy5jbGlwQ29udGVudDtcclxuICAgICAgICAgICAgZ29vZENvbnRhaW5lci5jbGlwQ2hpbGRyZW4gPSB0aGlzLmNsaXBDaGlsZHJlbjtcclxuICAgICAgICAgICAgc3VwZXIuYWRkQ29udHJvbChnb29kQ29udGFpbmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdvb2RDb250YWluZXIuYWRkQ29udHJvbChjb250cm9sKTtcclxuICAgICAgICB0aGlzLl9jaGlsZENvbnRyb2xzLnB1c2goY29udHJvbCk7XHJcbiAgICAgICAgY29udHJvbC5fdGFnID0ga2V5O1xyXG4gICAgICAgIGNvbnRyb2wucGFyZW50ID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgY29udHJvbCBmcm9tIHRoZSBjdXJyZW50IGNvbnRhaW5lclxyXG4gICAgICogQHBhcmFtIGNvbnRyb2wgZGVmaW5lcyB0aGUgY29udHJvbCB0byByZW1vdmVcclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IGNvbnRhaW5lclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgcmVtb3ZlQ29udHJvbChjb250cm9sOiBDb250cm9sKTogQ29udGFpbmVyIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2NoaWxkQ29udHJvbHMuaW5kZXhPZihjb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZENvbnRyb2xzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjZWxsID0gdGhpcy5fY2VsbHNbY29udHJvbC5fdGFnXTtcclxuXHJcbiAgICAgICAgaWYgKGNlbGwpIHtcclxuICAgICAgICAgICAgY2VsbC5yZW1vdmVDb250cm9sKGNvbnRyb2wpO1xyXG4gICAgICAgICAgICBjb250cm9sLl90YWcgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgR3JpZFxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyBjb250cm9sIG5hbWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiR3JpZFwiO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfZ2V0R3JpZERlZmluaXRpb25zKGRlZmluaXRpb25DYWxsYmFjazogKGxlZnRzOiBudW1iZXJbXSwgdG9wczogbnVtYmVyW10sIHdpZHRoczogbnVtYmVyW10sIGhlaWdodHM6IG51bWJlcltdKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgY29uc3Qgd2lkdGhzID0gW107XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0cyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGxlZnRzID0gW107XHJcbiAgICAgICAgY29uc3QgdG9wcyA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgYXZhaWxhYmxlV2lkdGggPSB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aDtcclxuICAgICAgICBsZXQgZ2xvYmFsV2lkdGhQZXJjZW50YWdlID0gMDtcclxuICAgICAgICBsZXQgYXZhaWxhYmxlSGVpZ2h0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0O1xyXG4gICAgICAgIGxldCBnbG9iYWxIZWlnaHRQZXJjZW50YWdlID0gMDtcclxuXHJcbiAgICAgICAgLy8gSGVpZ2h0c1xyXG4gICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCByb3dEZWZpbml0aW9uIG9mIHRoaXMuX3Jvd0RlZmluaXRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChyb3dEZWZpbml0aW9uLmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHJvd0RlZmluaXRpb24uZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVIZWlnaHQgLT0gaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0c1tpbmRleF0gPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBnbG9iYWxIZWlnaHRQZXJjZW50YWdlICs9IHJvd0RlZmluaXRpb24udmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0b3AgPSAwO1xyXG4gICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICBmb3IgKGNvbnN0IHJvd0RlZmluaXRpb24gb2YgdGhpcy5fcm93RGVmaW5pdGlvbnMpIHtcclxuICAgICAgICAgICAgdG9wcy5wdXNoKHRvcCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXJvd0RlZmluaXRpb24uaXNQaXhlbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5yb3VuZCgocm93RGVmaW5pdGlvbi52YWx1ZSAvIGdsb2JhbEhlaWdodFBlcmNlbnRhZ2UpICogYXZhaWxhYmxlSGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHRvcCArPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHRzW2luZGV4XSA9IGhlaWdodDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRvcCArPSByb3dEZWZpbml0aW9uLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXaWR0aHNcclxuICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBjb2x1bW5EZWZpbml0aW9uIG9mIHRoaXMuX2NvbHVtbkRlZmluaXRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5EZWZpbml0aW9uLmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gY29sdW1uRGVmaW5pdGlvbi5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICAgICAgICAgIGF2YWlsYWJsZVdpZHRoIC09IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgd2lkdGhzW2luZGV4XSA9IHdpZHRoO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZ2xvYmFsV2lkdGhQZXJjZW50YWdlICs9IGNvbHVtbkRlZmluaXRpb24udmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsZWZ0ID0gMDtcclxuICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBjb2x1bW5EZWZpbml0aW9uIG9mIHRoaXMuX2NvbHVtbkRlZmluaXRpb25zKSB7XHJcbiAgICAgICAgICAgIGxlZnRzLnB1c2gobGVmdCk7XHJcbiAgICAgICAgICAgIGlmICghY29sdW1uRGVmaW5pdGlvbi5pc1BpeGVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGgucm91bmQoKGNvbHVtbkRlZmluaXRpb24udmFsdWUgLyBnbG9iYWxXaWR0aFBlcmNlbnRhZ2UpICogYXZhaWxhYmxlV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcclxuICAgICAgICAgICAgICAgIHdpZHRoc1tpbmRleF0gPSB3aWR0aDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxlZnQgKz0gY29sdW1uRGVmaW5pdGlvbi5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGVmaW5pdGlvbkNhbGxiYWNrKGxlZnRzLCB0b3BzLCB3aWR0aHMsIGhlaWdodHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYWRkaXRpb25hbFByb2Nlc3NpbmcocGFyZW50TWVhc3VyZTogTWVhc3VyZSwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9nZXRHcmlkRGVmaW5pdGlvbnMoKGxlZnRzOiBudW1iZXJbXSwgdG9wczogbnVtYmVyW10sIHdpZHRoczogbnVtYmVyW10sIGhlaWdodHM6IG51bWJlcltdKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFNldHRpbmcgY2hpbGQgc2l6ZXNcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fY2VsbHMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX2NlbGxzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcGxpdCA9IGtleS5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gcGFyc2VJbnQoc3BsaXRbMF0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IHBhcnNlSW50KHNwbGl0WzFdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLl9jZWxsc1trZXldO1xyXG5cclxuICAgICAgICAgICAgICAgIGNlbGwubGVmdEluUGl4ZWxzID0gbGVmdHNbeV07XHJcbiAgICAgICAgICAgICAgICBjZWxsLnRvcEluUGl4ZWxzID0gdG9wc1t4XTtcclxuICAgICAgICAgICAgICAgIGNlbGwud2lkdGhJblBpeGVscyA9IHdpZHRoc1t5XTtcclxuICAgICAgICAgICAgICAgIGNlbGwuaGVpZ2h0SW5QaXhlbHMgPSBoZWlnaHRzW3hdO1xyXG4gICAgICAgICAgICAgICAgY2VsbC5fbGVmdC5pZ25vcmVBZGFwdGl2ZVNjYWxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY2VsbC5fdG9wLmlnbm9yZUFkYXB0aXZlU2NhbGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjZWxsLl93aWR0aC5pZ25vcmVBZGFwdGl2ZVNjYWxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY2VsbC5faGVpZ2h0Lmlnbm9yZUFkYXB0aXZlU2NhbGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc3VwZXIuX2FkZGl0aW9uYWxQcm9jZXNzaW5nKHBhcmVudE1lYXN1cmUsIGNvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfZmxhZ0Rlc2NlbmRhbnRzQXNNYXRyaXhEaXJ0eSgpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9jZWxscykge1xyXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9jZWxscywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5fY2VsbHNba2V5XTtcclxuICAgICAgICAgICAgY2hpbGQuX21hcmtNYXRyaXhBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfcmVuZGVySGlnaGxpZ2h0U3BlY2lmaWMoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5fcmVuZGVySGlnaGxpZ2h0U3BlY2lmaWMoY29udGV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2dldEdyaWREZWZpbml0aW9ucygobGVmdHM6IG51bWJlcltdLCB0b3BzOiBudW1iZXJbXSwgd2lkdGhzOiBudW1iZXJbXSwgaGVpZ2h0czogbnVtYmVyW10pID0+IHtcclxuICAgICAgICAgICAgLy8gQ29sdW1uc1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVmdHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIGxlZnRzW2luZGV4XSArIHdpZHRoc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8obGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGxlZnQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCArIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSb3dzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0b3BzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG9wID0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdG9wc1tpbmRleF0gKyBoZWlnaHRzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0LCB0b3ApO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8odGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoLCB0b3ApO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogUmVsZWFzZXMgYXNzb2NpYXRlZCByZXNvdXJjZXMgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCkge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjb250cm9sIG9mIHRoaXMuX2NoaWxkQ29udHJvbHMpIHtcclxuICAgICAgICAgICAgY29udHJvbC5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9yb3dEZWZpbml0aW9ucy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgdGhpcy5fcm93RGVmaW5pdGlvbnNbaW5kZXhdLm9uQ2hhbmdlZE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3Jvd0RlZmluaXRpb25PYnNlcnZlcnNbaW5kZXhdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2NvbHVtbkRlZmluaXRpb25zLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9jb2x1bW5EZWZpbml0aW9uc1tpbmRleF0ub25DaGFuZ2VkT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fY29sdW1uRGVmaW5pdGlvbk9ic2VydmVyc1tpbmRleF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9yb3dEZWZpbml0aW9uT2JzZXJ2ZXJzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5fcm93RGVmaW5pdGlvbnMubGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLl9jb2x1bW5EZWZpbml0aW9uT2JzZXJ2ZXJzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5fY29sdW1uRGVmaW5pdGlvbnMubGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLl9jZWxscyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2NoaWxkQ29udHJvbHMubGVuZ3RoID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGN1cnJlbnQgY29udHJvbFxyXG4gICAgICogQHBhcmFtIHNlcmlhbGl6YXRpb25PYmplY3QgZGVmaW5lZCB0aGUgSlNPTiBzZXJpYWxpemVkIG9iamVjdFxyXG4gICAgICogQHBhcmFtIGZvcmNlIGZvcmNlIHNlcmlhbGl6YXRpb24gZXZlbiBpZiBpc1NlcmlhbGl6YWJsZSA9PT0gZmFsc2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIHNlcmlhbGl6ZShzZXJpYWxpemF0aW9uT2JqZWN0OiBhbnksIGZvcmNlOiBib29sZWFuKSB7XHJcbiAgICAgICAgc3VwZXIuc2VyaWFsaXplKHNlcmlhbGl6YXRpb25PYmplY3QsIGZvcmNlKTtcclxuICAgICAgICBpZiAoIXRoaXMuaXNTZXJpYWxpemFibGUgJiYgIWZvcmNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5jb2x1bW5Db3VudCA9IHRoaXMuY29sdW1uQ291bnQ7XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5yb3dDb3VudCA9IHRoaXMucm93Q291bnQ7XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5jb2x1bW5zID0gW107XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5yb3dzID0gW107XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC50YWdzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbkNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgY2QgPSB0aGlzLmdldENvbHVtbkRlZmluaXRpb24oaSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkU2VyaWFsaXphdGlvbk9iamVjdCA9IHsgdmFsdWU6IGNkPy5nZXRWYWx1ZSh0aGlzLmhvc3QpLCB1bml0OiBjZD8udW5pdCB9O1xyXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmNvbHVtbnMucHVzaChjaGlsZFNlcmlhbGl6YXRpb25PYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93Q291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCByZCA9IHRoaXMuZ2V0Um93RGVmaW5pdGlvbihpKTtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRTZXJpYWxpemF0aW9uT2JqZWN0ID0geyB2YWx1ZTogcmQ/LmdldFZhbHVlKHRoaXMuaG9zdCksIHVuaXQ6IHJkPy51bml0IH07XHJcbiAgICAgICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3Qucm93cy5wdXNoKGNoaWxkU2VyaWFsaXphdGlvbk9iamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcclxuICAgICAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC50YWdzLnB1c2goY2hpbGQuX3RhZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9wYXJzZUZyb21Db250ZW50KHNlcmlhbGl6ZWRPYmplY3Q6IGFueSwgaG9zdDogQWR2YW5jZWREeW5hbWljVGV4dHVyZSkge1xyXG4gICAgICAgIHN1cGVyLl9wYXJzZUZyb21Db250ZW50KHNlcmlhbGl6ZWRPYmplY3QsIGhvc3QpO1xyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuOiBDb250cm9sW10gPSBbXTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlUm93RGVmaW5pdGlvbigwKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUNvbHVtbkRlZmluaXRpb24oMCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpYWxpemVkT2JqZWN0LmNvbHVtbkNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgY29sdW1uVmFsdWUgPSBzZXJpYWxpemVkT2JqZWN0LmNvbHVtbnNbaV0udmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaXQgPSBzZXJpYWxpemVkT2JqZWN0LmNvbHVtbnNbaV0udW5pdDtcclxuICAgICAgICAgICAgdGhpcy5hZGRDb2x1bW5EZWZpbml0aW9uKGNvbHVtblZhbHVlLCB1bml0ID09PSAxID8gdHJ1ZSA6IGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpYWxpemVkT2JqZWN0LnJvd0NvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93VmFsdWUgPSBzZXJpYWxpemVkT2JqZWN0LnJvd3NbaV0udmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaXQgPSBzZXJpYWxpemVkT2JqZWN0LnJvd3NbaV0udW5pdDtcclxuICAgICAgICAgICAgdGhpcy5hZGRSb3dEZWZpbml0aW9uKHJvd1ZhbHVlLCB1bml0ID09PSAxID8gdHJ1ZSA6IGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbEluZm8gPSBzZXJpYWxpemVkT2JqZWN0LnRhZ3NbaV07XHJcbiAgICAgICAgICAgIGxldCByb3dOdW1iZXIgPSBwYXJzZUludChjZWxsSW5mby5zdWJzdHJpbmcoMCwgY2VsbEluZm8uc2VhcmNoKFwiOlwiKSkpO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4ocm93TnVtYmVyKSkge1xyXG4gICAgICAgICAgICAgICAgcm93TnVtYmVyID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgY29sdW1uTnVtYmVyID0gcGFyc2VJbnQoY2VsbEluZm8uc3Vic3RyaW5nKGNlbGxJbmZvLnNlYXJjaChcIjpcIikgKyAxKSk7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihjb2x1bW5OdW1iZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXIgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ29udHJvbChjaGlsZHJlbltpXSwgcm93TnVtYmVyLCBjb2x1bW5OdW1iZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuR3JpZFwiLCBHcmlkKTtcclxuIiwiaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgVG9vbHMgfSBmcm9tIFwiY29yZS9NaXNjL3Rvb2xzXCI7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgdHlwZSB7IE1lYXN1cmUgfSBmcm9tIFwiLi4vbWVhc3VyZVwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB0eXBlIHsgSUNhbnZhcywgSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQsIElJbWFnZSB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5pbXBvcnQgeyBFbmdpbmVTdG9yZSB9IGZyb20gXCJjb3JlL0VuZ2luZXMvZW5naW5lU3RvcmVcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSAyRCBpbWFnZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWFnZSBleHRlbmRzIENvbnRyb2wge1xyXG4gICAgLyoqXHJcbiAgICAgKiAgU3BlY2lmaWVzIGFuIGFsdGVybmF0ZSB0ZXh0IGZvciB0aGUgaW1hZ2UsIGlmIHRoZSBpbWFnZSBmb3Igc29tZSByZWFzb24gY2Fubm90IGJlIGRpc3BsYXllZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFsdD86IHN0cmluZztcclxuXHJcbiAgICBwcml2YXRlIF93b3JraW5nQ2FudmFzOiBOdWxsYWJsZTxJQ2FudmFzPiA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBfZG9tSW1hZ2U6IElJbWFnZTtcclxuICAgIHByaXZhdGUgX2ltYWdlV2lkdGg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2ltYWdlSGVpZ2h0OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9sb2FkZWQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX3N0cmV0Y2ggPSBJbWFnZS5TVFJFVENIX0ZJTEw7XHJcbiAgICBwcml2YXRlIF9zb3VyY2U6IE51bGxhYmxlPHN0cmluZz4gPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfYXV0b1NjYWxlID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBfc291cmNlTGVmdCA9IDA7XHJcbiAgICBwcml2YXRlIF9zb3VyY2VUb3AgPSAwO1xyXG4gICAgcHJpdmF0ZSBfc291cmNlV2lkdGggPSAwO1xyXG4gICAgcHJpdmF0ZSBfc291cmNlSGVpZ2h0ID0gMDtcclxuICAgIHByaXZhdGUgX3N2Z0F0dHJpYnV0ZXNDb21wdXRhdGlvbkNvbXBsZXRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfaXNTVkc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIF9jZWxsV2lkdGg6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIF9jZWxsSGVpZ2h0OiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfY2VsbElkOiBudW1iZXIgPSAtMTtcclxuXHJcbiAgICBwcml2YXRlIF9zbGljZUxlZnQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3NsaWNlUmlnaHQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3NsaWNlVG9wOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9zbGljZUJvdHRvbTogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgX3BvcHVsYXRlTmluZVBhdGNoU2xpY2VzRnJvbUltYWdlID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBfZGV0ZWN0UG9pbnRlck9uT3BhcXVlT25seTogYm9vbGVhbjtcclxuXHJcbiAgICBwcml2YXRlIF9pbWFnZURhdGFDYWNoZToge1xyXG4gICAgICAgIGRhdGE6IFVpbnQ4Q2xhbXBlZEFycmF5IHwgbnVsbDtcclxuICAgICAgICBrZXk6IHN0cmluZztcclxuICAgIH0gPSB7IGRhdGE6IG51bGwsIGtleTogXCJcIiB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FjaGUgb2YgaW1hZ2VzIHRvIGF2b2lkIGxvYWRpbmcgdGhlIHNhbWUgaW1hZ2UgbXVsdGlwbGUgdGltZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBTb3VyY2VJbWdDYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCB7IGltZzogSUltYWdlOyB0aW1lc1VzZWQ6IG51bWJlcjsgbG9hZGVkOiBib29sZWFuOyB3YWl0aW5nRm9yTG9hZENhbGxiYWNrOiBBcnJheTwoKSA9PiB2b2lkPiB9PigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2JzZXJ2YWJsZSBub3RpZmllZCB3aGVuIHRoZSBjb250ZW50IGlzIGxvYWRlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25JbWFnZUxvYWRlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxJbWFnZT4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmFibGUgbm90aWZpZWQgd2hlbiBfc291cmNlTGVmdCwgX3NvdXJjZVRvcCwgX3NvdXJjZVdpZHRoIGFuZCBfc291cmNlSGVpZ2h0IGFyZSBjb21wdXRlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25TVkdBdHRyaWJ1dGVzQ29tcHV0ZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SW1hZ2U+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHJlZmVycmVyIHBvbGljeSB0byBhcHBseSBvbiB0aGUgaW1nIGVsZW1lbnQgbG9hZCByZXF1ZXN0LlxyXG4gICAgICogWW91IHNob3VsZCBzZXQgcmVmZXJyZXJQb2xpY3kgYmVmb3JlIHNldCB0aGUgc291cmNlIG9mIHRoZSBpbWFnZSBpZiB5b3Ugd2FudCB0byBlbnN1cmUgdGhlIGhlYWRlciB3aWxsIGJlIHByZXNlbnQgb24gdGhlIHhociBsb2FkaW5nIHJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlZmVycmVyUG9saWN5OiBOdWxsYWJsZTxSZWZlcnJlclBvbGljeT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGhlIGNvbnRlbnQgaXMgbG9hZGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNMb2FkZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRlZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgaXNSZWFkeSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0xvYWRlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBwb2ludGVycyBzaG91bGQgb25seSBiZSB2YWxpZGF0ZWQgb24gcGl4ZWxzIHdpdGggYWxwaGEgPiAwLlxyXG4gICAgICogQmV3YXJlIHVzaW5nIHRoaXMgYXMgdGhpcyB3aWxsIGNvbnN1bWUgbW9yZSBtZW1vcnkgYXMgdGhlIGltYWdlIGhhcyB0byBiZSBzdG9yZWQgdHdpY2VcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGRldGVjdFBvaW50ZXJPbk9wYXF1ZU9ubHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RldGVjdFBvaW50ZXJPbk9wYXF1ZU9ubHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBkZXRlY3RQb2ludGVyT25PcGFxdWVPbmx5KHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RldGVjdFBvaW50ZXJPbk9wYXF1ZU9ubHkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2RldGVjdFBvaW50ZXJPbk9wYXF1ZU9ubHkgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgbGVmdCB2YWx1ZSBmb3Igc2xpY2luZyAoOS1wYXRjaClcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHNsaWNlTGVmdCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zbGljZUxlZnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzbGljZUxlZnQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9zbGljZUxlZnQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NsaWNlTGVmdCA9IHZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSByaWdodCB2YWx1ZSBmb3Igc2xpY2luZyAoOS1wYXRjaClcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHNsaWNlUmlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2xpY2VSaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHNsaWNlUmlnaHQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9zbGljZVJpZ2h0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zbGljZVJpZ2h0ID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRvcCB2YWx1ZSBmb3Igc2xpY2luZyAoOS1wYXRjaClcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHNsaWNlVG9wKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWNlVG9wO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2xpY2VUb3AodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9zbGljZVRvcCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc2xpY2VUb3AgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYm90dG9tIHZhbHVlIGZvciBzbGljaW5nICg5LXBhdGNoKVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgc2xpY2VCb3R0b20oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2xpY2VCb3R0b207XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzbGljZUJvdHRvbSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NsaWNlQm90dG9tID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zbGljZUJvdHRvbSA9IHZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsZWZ0IGNvb3JkaW5hdGUgaW4gdGhlIHNvdXJjZSBpbWFnZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgc291cmNlTGVmdCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2VMZWZ0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc291cmNlTGVmdCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZUxlZnQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NvdXJjZUxlZnQgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIGNvb3JkaW5hdGUgaW4gdGhlIHNvdXJjZSBpbWFnZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgc291cmNlVG9wKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZVRvcDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHNvdXJjZVRvcCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZVRvcCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc291cmNlVG9wID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHdpZHRoIHRvIGNhcHR1cmUgaW4gdGhlIHNvdXJjZSBpbWFnZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgc291cmNlV2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc291cmNlV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzb3VyY2VXaWR0aCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZVdpZHRoID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zb3VyY2VXaWR0aCA9IHZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBoZWlnaHQgdG8gY2FwdHVyZSBpbiB0aGUgc291cmNlIGltYWdlXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBzb3VyY2VIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc291cmNlSGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc291cmNlSGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fc291cmNlSGVpZ2h0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zb3VyY2VIZWlnaHQgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGltYWdlIHdpZHRoXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaW1hZ2VXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbWFnZVdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgaW1hZ2UgaGVpZ2h0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaW1hZ2VIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW1hZ2VIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgbmluZSBwYXRjaCBzbGljZXMgKGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSkgc2hvdWxkIGJlIHJlYWQgZnJvbSBpbWFnZSBkYXRhXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBwb3B1bGF0ZU5pbmVQYXRjaFNsaWNlc0Zyb21JbWFnZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdWxhdGVOaW5lUGF0Y2hTbGljZXNGcm9tSW1hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBwb3B1bGF0ZU5pbmVQYXRjaFNsaWNlc0Zyb21JbWFnZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9wb3B1bGF0ZU5pbmVQYXRjaFNsaWNlc0Zyb21JbWFnZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcG9wdWxhdGVOaW5lUGF0Y2hTbGljZXNGcm9tSW1hZ2UgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcHVsYXRlTmluZVBhdGNoU2xpY2VzRnJvbUltYWdlICYmIHRoaXMuX2xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9leHRyYWN0TmluZVBhdGNoU2xpY2VEYXRhRnJvbUltYWdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBJbmRpY2F0ZXMgaWYgdGhlIGZvcm1hdCBvZiB0aGUgaW1hZ2UgaXMgU1ZHICovXHJcbiAgICBwdWJsaWMgZ2V0IGlzU1ZHKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1NWRztcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyB0aGUgc3RhdHVzIG9mIHRoZSBTVkcgYXR0cmlidXRlcyBjb21wdXRhdGlvbiAoc291cmNlTGVmdCwgc291cmNlVG9wLCBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0KSAqL1xyXG4gICAgcHVibGljIGdldCBzdmdBdHRyaWJ1dGVzQ29tcHV0YXRpb25Db21wbGV0ZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N2Z0F0dHJpYnV0ZXNDb21wdXRhdGlvbkNvbXBsZXRlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgaW1hZ2UgY2FuIGZvcmNlIGl0cyBjb250YWluZXIgdG8gYWRhcHQgaXRzIHNpemVcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjaW1hZ2VcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGF1dG9TY2FsZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYXV0b1NjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYXV0b1NjYWxlKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2F1dG9TY2FsZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYXV0b1NjYWxlID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAmJiB0aGlzLl9sb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZVNpemVXaXRoQ29udGVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBzdHJldGNoaW5nIG1vZGUgdXNlZCBieSB0aGUgaW1hZ2UgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBzdHJldGNoKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmV0Y2g7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzdHJldGNoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3RyZXRjaCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc3RyZXRjaCA9IHZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfcm90YXRlOTAobjogbnVtYmVyLCBwcmVzZXJ2ZVByb3BlcnRpZXM6IGJvb2xlYW4gPSBmYWxzZSk6IEltYWdlIHtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX2RvbUltYWdlLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2RvbUltYWdlLmhlaWdodDtcclxuXHJcbiAgICAgICAgLy8gU2hvdWxkIGFic3RyYWN0IHBsYXRmb3JtIGluc3RlYWQgb2YgdXNpbmcgTGFzdENyZWF0ZWRFbmdpbmVcclxuICAgICAgICBjb25zdCBlbmdpbmUgPSB0aGlzLl9ob3N0Py5nZXRTY2VuZSgpPy5nZXRFbmdpbmUoKSB8fCBFbmdpbmVTdG9yZS5MYXN0Q3JlYXRlZEVuZ2luZTtcclxuICAgICAgICBpZiAoIWVuZ2luZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGVuZ2luZS4gVW5hYmxlIHRvIGNyZWF0ZSBhIGNhbnZhcy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGVuZ2luZS5jcmVhdGVDYW52YXMoaGVpZ2h0LCB3aWR0aCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpITtcclxuXHJcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUoY2FudmFzLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgIGNvbnRleHQucm90YXRlKChuICogTWF0aC5QSSkgLyAyKTtcclxuXHJcbiAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UodGhpcy5fZG9tSW1hZ2UsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIC13aWR0aCAvIDIsIC1oZWlnaHQgLyAyLCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YVVybDogc3RyaW5nID0gY2FudmFzLnRvRGF0YVVSTChcImltYWdlL2pwZ1wiKTtcclxuICAgICAgICBjb25zdCByb3RhdGVkSW1hZ2UgPSBuZXcgSW1hZ2UodGhpcy5uYW1lICsgXCJyb3RhdGVkXCIsIGRhdGFVcmwpO1xyXG5cclxuICAgICAgICBpZiAocHJlc2VydmVQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHJvdGF0ZWRJbWFnZS5fc3RyZXRjaCA9IHRoaXMuX3N0cmV0Y2g7XHJcbiAgICAgICAgICAgIHJvdGF0ZWRJbWFnZS5fYXV0b1NjYWxlID0gdGhpcy5fYXV0b1NjYWxlO1xyXG4gICAgICAgICAgICByb3RhdGVkSW1hZ2UuX2NlbGxJZCA9IHRoaXMuX2NlbGxJZDtcclxuICAgICAgICAgICAgcm90YXRlZEltYWdlLl9jZWxsV2lkdGggPSBuICUgMSA/IHRoaXMuX2NlbGxIZWlnaHQgOiB0aGlzLl9jZWxsV2lkdGg7XHJcbiAgICAgICAgICAgIHJvdGF0ZWRJbWFnZS5fY2VsbEhlaWdodCA9IG4gJSAxID8gdGhpcy5fY2VsbFdpZHRoIDogdGhpcy5fY2VsbEhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2hhbmRsZVJvdGF0aW9uRm9yU1ZHSW1hZ2UodGhpcywgcm90YXRlZEltYWdlLCBuKTtcclxuXHJcbiAgICAgICAgdGhpcy5faW1hZ2VEYXRhQ2FjaGUuZGF0YSA9IG51bGw7XHJcblxyXG4gICAgICAgIHJldHVybiByb3RhdGVkSW1hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaGFuZGxlUm90YXRpb25Gb3JTVkdJbWFnZShzcmNJbWFnZTogSW1hZ2UsIGRzdEltYWdlOiBJbWFnZSwgbjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFzcmNJbWFnZS5faXNTVkcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNyY0ltYWdlLl9zdmdBdHRyaWJ1dGVzQ29tcHV0YXRpb25Db21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcm90YXRlOTBTb3VyY2VQcm9wZXJ0aWVzKHNyY0ltYWdlLCBkc3RJbWFnZSwgbik7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3JjSW1hZ2Uub25TVkdBdHRyaWJ1dGVzQ29tcHV0ZWRPYnNlcnZhYmxlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcm90YXRlOTBTb3VyY2VQcm9wZXJ0aWVzKHNyY0ltYWdlLCBkc3RJbWFnZSwgbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcm90YXRlOTBTb3VyY2VQcm9wZXJ0aWVzKHNyY0ltYWdlOiBJbWFnZSwgZHN0SW1hZ2U6IEltYWdlLCBuOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBsZXQgc3JjTGVmdCA9IHNyY0ltYWdlLnNvdXJjZUxlZnQsXHJcbiAgICAgICAgICAgIHNyY1RvcCA9IHNyY0ltYWdlLnNvdXJjZVRvcCxcclxuICAgICAgICAgICAgc3JjV2lkdGggPSBzcmNJbWFnZS5kb21JbWFnZS53aWR0aCxcclxuICAgICAgICAgICAgc3JjSGVpZ2h0ID0gc3JjSW1hZ2UuZG9tSW1hZ2UuaGVpZ2h0O1xyXG5cclxuICAgICAgICBsZXQgZHN0TGVmdCA9IHNyY0xlZnQsXHJcbiAgICAgICAgICAgIGRzdFRvcCA9IHNyY1RvcCxcclxuICAgICAgICAgICAgZHN0V2lkdGggPSBzcmNJbWFnZS5zb3VyY2VXaWR0aCxcclxuICAgICAgICAgICAgZHN0SGVpZ2h0ID0gc3JjSW1hZ2Uuc291cmNlSGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAobiAhPSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG11bHQgPSBuIDwgMCA/IC0xIDogMTtcclxuICAgICAgICAgICAgbiA9IG4gJSA0O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGguYWJzKG4pOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGRzdExlZnQgPSAtKHNyY1RvcCAtIHNyY0hlaWdodCAvIDIpICogbXVsdCArIHNyY0hlaWdodCAvIDI7XHJcbiAgICAgICAgICAgICAgICBkc3RUb3AgPSAoc3JjTGVmdCAtIHNyY1dpZHRoIC8gMikgKiBtdWx0ICsgc3JjV2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgICAgW2RzdFdpZHRoLCBkc3RIZWlnaHRdID0gW2RzdEhlaWdodCwgZHN0V2lkdGhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0VG9wIC09IGRzdEhlaWdodDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0TGVmdCAtPSBkc3RXaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNyY0xlZnQgPSBkc3RMZWZ0O1xyXG4gICAgICAgICAgICAgICAgc3JjVG9wID0gZHN0VG9wO1xyXG4gICAgICAgICAgICAgICAgW3NyY1dpZHRoLCBzcmNIZWlnaHRdID0gW3NyY0hlaWdodCwgc3JjV2lkdGhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkc3RJbWFnZS5zb3VyY2VMZWZ0ID0gZHN0TGVmdDtcclxuICAgICAgICBkc3RJbWFnZS5zb3VyY2VUb3AgPSBkc3RUb3A7XHJcbiAgICAgICAgZHN0SW1hZ2Uuc291cmNlV2lkdGggPSBkc3RXaWR0aDtcclxuICAgICAgICBkc3RJbWFnZS5zb3VyY2VIZWlnaHQgPSBkc3RIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZXh0cmFjdE5pbmVQYXRjaFNsaWNlRGF0YUZyb21JbWFnZSgpIHtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX2RvbUltYWdlLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2RvbUltYWdlLmhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl93b3JraW5nQ2FudmFzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZ2luZSA9IHRoaXMuX2hvc3Q/LmdldFNjZW5lKCk/LmdldEVuZ2luZSgpIHx8IEVuZ2luZVN0b3JlLkxhc3RDcmVhdGVkRW5naW5lO1xyXG4gICAgICAgICAgICBpZiAoIWVuZ2luZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBlbmdpbmUuIFVuYWJsZSB0byBjcmVhdGUgYSBjYW52YXMuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3dvcmtpbmdDYW52YXMgPSBlbmdpbmUuY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLl93b3JraW5nQ2FudmFzO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpITtcclxuXHJcbiAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UodGhpcy5fZG9tSW1hZ2UsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgICAgICAvLyBMZWZ0IGFuZCByaWdodFxyXG4gICAgICAgIHRoaXMuX3NsaWNlTGVmdCA9IC0xO1xyXG4gICAgICAgIHRoaXMuX3NsaWNlUmlnaHQgPSAtMTtcclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgYWxwaGEgPSBpbWFnZURhdGEuZGF0YVt4ICogNCArIDNdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFscGhhID4gMTI3ICYmIHRoaXMuX3NsaWNlTGVmdCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NsaWNlTGVmdCA9IHg7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFscGhhIDwgMTI3ICYmIHRoaXMuX3NsaWNlTGVmdCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zbGljZVJpZ2h0ID0geDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0b3AgYW5kIGJvdHRvbVxyXG4gICAgICAgIHRoaXMuX3NsaWNlVG9wID0gLTE7XHJcbiAgICAgICAgdGhpcy5fc2xpY2VCb3R0b20gPSAtMTtcclxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFscGhhID0gaW1hZ2VEYXRhLmRhdGFbeSAqIHdpZHRoICogNCArIDNdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFscGhhID4gMTI3ICYmIHRoaXMuX3NsaWNlVG9wID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2xpY2VUb3AgPSB5O1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhbHBoYSA8IDEyNyAmJiB0aGlzLl9zbGljZVRvcCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zbGljZUJvdHRvbSA9IHk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW50ZXJuYWwgRE9NIGltYWdlIHVzZWQgdG8gcmVuZGVyIHRoZSBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgZG9tSW1hZ2UodmFsdWU6IElJbWFnZSkge1xyXG4gICAgICAgIHRoaXMuX2RvbUltYWdlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VEYXRhQ2FjaGUuZGF0YSA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9kb21JbWFnZS53aWR0aCkge1xyXG4gICAgICAgICAgICB0aGlzLl9vbkltYWdlTG9hZGVkKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZG9tSW1hZ2Uub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25JbWFnZUxvYWRlZCgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGRvbUltYWdlKCk6IElJbWFnZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvbUltYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX29uSW1hZ2VMb2FkZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VEYXRhQ2FjaGUuZGF0YSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VXaWR0aCA9IHRoaXMuX2RvbUltYWdlLndpZHRoO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlSGVpZ2h0ID0gdGhpcy5fZG9tSW1hZ2UuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9wb3B1bGF0ZU5pbmVQYXRjaFNsaWNlc0Zyb21JbWFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9leHRyYWN0TmluZVBhdGNoU2xpY2VEYXRhRnJvbUltYWdlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fYXV0b1NjYWxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3luY2hyb25pemVTaXplV2l0aENvbnRlbnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMub25JbWFnZUxvYWRlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgaW1hZ2Ugc291cmNlIHVybFxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgc291cmNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldHMgdGhlIGludGVybmFsIEltYWdlIEVsZW1lbnQgY2FjaGUuIENhbiByZWR1Y2UgbWVtb3J5IHVzYWdlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFJlc2V0SW1hZ2VDYWNoZSgpIHtcclxuICAgICAgICBJbWFnZS5Tb3VyY2VJbWdDYWNoZS5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3JlbW92ZUNhY2hlVXNhZ2Uoc291cmNlOiBOdWxsYWJsZTxzdHJpbmc+KSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzb3VyY2UgJiYgSW1hZ2UuU291cmNlSW1nQ2FjaGUuZ2V0KHNvdXJjZSk7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhbHVlLnRpbWVzVXNlZCAtPSAxO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gRE9NXHJcbiAgICAgICAgICAgIGNvbnN0IGh0bWxFbGVtZW50ID0gdmFsdWUuaW1nIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmIChodG1sRWxlbWVudC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGh0bWxFbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2luY2UgdGhlIGltYWdlIGlzbid0IGJlaW5nIHVzZWQgYW55bW9yZSwgd2UgY2FuIGNsZWFuIGl0IGZyb20gdGhlIGNhY2hlXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS50aW1lc1VzZWQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIEltYWdlLlNvdXJjZUltZ0NhY2hlLmRlbGV0ZShzb3VyY2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGltYWdlIHNvdXJjZSB1cmxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCBzb3VyY2UodmFsdWU6IE51bGxhYmxlPHN0cmluZz4pIHtcclxuICAgICAgICBpZiAodGhpcy5fdXJsUmV3cml0ZXIgJiYgdmFsdWUpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl91cmxSZXdyaXRlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fc291cmNlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9yZW1vdmVDYWNoZVVzYWdlKHRoaXMuX3NvdXJjZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3NvdXJjZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlRGF0YUNhY2hlLmRhdGEgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9zdmdDaGVjayh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTaG91bGQgYWJzdHJhY3QgcGxhdGZvcm0gaW5zdGVhZCBvZiB1c2luZyBMYXN0Q3JlYXRlZEVuZ2luZVxyXG4gICAgICAgIGNvbnN0IGVuZ2luZSA9IHRoaXMuX2hvc3Q/LmdldFNjZW5lKCk/LmdldEVuZ2luZSgpIHx8IEVuZ2luZVN0b3JlLkxhc3RDcmVhdGVkRW5naW5lO1xyXG4gICAgICAgIGlmICghZW5naW5lKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZW5naW5lLiBVbmFibGUgdG8gY3JlYXRlIGEgY2FudmFzLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlICYmIEltYWdlLlNvdXJjZUltZ0NhY2hlLmhhcyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGVkRGF0YSA9IEltYWdlLlNvdXJjZUltZ0NhY2hlLmdldCh2YWx1ZSkhO1xyXG4gICAgICAgICAgICB0aGlzLl9kb21JbWFnZSA9IGNhY2hlZERhdGEuaW1nO1xyXG4gICAgICAgICAgICBjYWNoZWREYXRhLnRpbWVzVXNlZCArPSAxO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkRGF0YS5sb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uSW1hZ2VMb2FkZWQoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlZERhdGEud2FpdGluZ0ZvckxvYWRDYWxsYmFjay5wdXNoKHRoaXMuX29uSW1hZ2VMb2FkZWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9kb21JbWFnZSA9IGVuZ2luZS5jcmVhdGVDYW52YXNJbWFnZSgpO1xyXG4gICAgICAgIC8vIG5lZWQgdG8gYWRkIHRvIGVuZm9yY2UgcmVuZGVyaW5nXHJcbiAgICAgICAgY29uc3QgaW1nRWxlbWVudCA9IHRoaXMuX2RvbUltYWdlIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICAgICAgbGV0IGFkZGVkVG9Eb20gPSBmYWxzZTtcclxuICAgICAgICBpZiAoaW1nRWxlbWVudC5zdHlsZSAmJiB0aGlzLl9zb3VyY2U/LmVuZHNXaXRoKFwiLnN2Z1wiKSkge1xyXG4gICAgICAgICAgICBpbWdFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICBpbWdFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgICAgICBpbWdFbGVtZW50LnN0eWxlLnRvcCA9IFwiMFwiO1xyXG4gICAgICAgICAgICBlbmdpbmUuZ2V0UmVuZGVyaW5nQ2FudmFzKCk/LnBhcmVudE5vZGU/LmFwcGVuZENoaWxkKGltZ0VsZW1lbnQpO1xyXG4gICAgICAgICAgICBhZGRlZFRvRG9tID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBJbWFnZS5Tb3VyY2VJbWdDYWNoZS5zZXQodmFsdWUsIHsgaW1nOiB0aGlzLl9kb21JbWFnZSwgdGltZXNVc2VkOiAxLCBsb2FkZWQ6IGZhbHNlLCB3YWl0aW5nRm9yTG9hZENhbGxiYWNrOiBbdGhpcy5fb25JbWFnZUxvYWRlZC5iaW5kKHRoaXMpXSB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2RvbUltYWdlLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYWNoZWREYXRhID0gSW1hZ2UuU291cmNlSW1nQ2FjaGUuZ2V0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWREYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVkRGF0YS5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgd2FpdGluZ0NhbGxiYWNrIG9mIGNhY2hlZERhdGEud2FpdGluZ0ZvckxvYWRDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YWl0aW5nQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVkRGF0YS53YWl0aW5nRm9yTG9hZENhbGxiYWNrLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkZWRUb0RvbSAmJiBpbWdFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9vbkltYWdlTG9hZGVkKCk7XHJcbiAgICAgICAgICAgIGFkZGVkVG9Eb20gJiYgaW1nRWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBUb29scy5TZXRDb3JzQmVoYXZpb3IodmFsdWUsIHRoaXMuX2RvbUltYWdlKTtcclxuICAgICAgICAgICAgVG9vbHMuU2V0UmVmZXJyZXJQb2xpY3lCZWhhdmlvcih0aGlzLnJlZmVycmVyUG9saWN5LCB0aGlzLl9kb21JbWFnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RvbUltYWdlLnNyYyA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBmb3Igc3ZnIGRvY3VtZW50IHdpdGggaWNvbiBpZCBwcmVzZW50XHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgdGhlIHNvdXJjZSBzdmdcclxuICAgICAqIEByZXR1cm5zIHRoZSBzdmdcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfc3ZnQ2hlY2sodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5TVkdTVkdFbGVtZW50ICYmIHZhbHVlLnNlYXJjaCgvKFxcLnN2Z3xcXC5zdmc/Wz98I10uKikkL2dpKSAhPT0gLTEgJiYgdmFsdWUuaW5kZXhPZihcIiNcIikgPT09IHZhbHVlLmxhc3RJbmRleE9mKFwiI1wiKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9pc1NWRyA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHN2Z3NyYyA9IHZhbHVlLnNwbGl0KFwiI1wiKVswXTtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWlkID0gdmFsdWUuc3BsaXQoXCIjXCIpWzFdO1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBvYmplY3QgYWxyIGV4aXN0IGluIGRvY3VtZW50XHJcbiAgICAgICAgICAgIGNvbnN0IHN2Z0V4aXN0ID0gPEhUTUxPYmplY3RFbGVtZW50PmRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3Rvcignb2JqZWN0W2RhdGE9XCInICsgc3Znc3JjICsgJ1wiXScpO1xyXG4gICAgICAgICAgICBpZiAoc3ZnRXhpc3QpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN2Z0RvYyA9IHN2Z0V4aXN0LmNvbnRlbnREb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIC8vIGdldCB2aWV3Ym94IHdpZHRoIGFuZCBoZWlnaHQsIGdldCBzdmcgZG9jdW1lbnQgd2lkdGggYW5kIGhlaWdodCBpbiBweFxyXG4gICAgICAgICAgICAgICAgaWYgKHN2Z0RvYyAmJiBzdmdEb2MuZG9jdW1lbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmIgPSBzdmdEb2MuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcInZpZXdCb3hcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9jd2lkdGggPSBOdW1iZXIoc3ZnRG9jLmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9jaGVpZ2h0ID0gTnVtYmVyKHN2Z0RvYy5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtID0gPFNWR0dyYXBoaWNzRWxlbWVudD4oPHVua25vd24+c3ZnRG9jLmdldEVsZW1lbnRCeUlkKGVsZW1pZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtICYmIHZiICYmIGRvY3dpZHRoICYmIGRvY2hlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRTVkdBdHRyaWJzKHN2Z0V4aXN0LCBlbGVtaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHdhaXQgZm9yIG9iamVjdCB0byBsb2FkXHJcbiAgICAgICAgICAgICAgICBzdmdFeGlzdC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0U1ZHQXR0cmlicyhzdmdFeGlzdCwgZWxlbWlkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGRvY3VtZW50IG9iamVjdFxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ZnSW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib2JqZWN0XCIpO1xyXG4gICAgICAgICAgICAgICAgc3ZnSW1hZ2UuZGF0YSA9IHN2Z3NyYztcclxuICAgICAgICAgICAgICAgIHN2Z0ltYWdlLnR5cGUgPSBcImltYWdlL3N2Zyt4bWxcIjtcclxuICAgICAgICAgICAgICAgIHN2Z0ltYWdlLndpZHRoID0gXCIwJVwiO1xyXG4gICAgICAgICAgICAgICAgc3ZnSW1hZ2UuaGVpZ2h0ID0gXCIwJVwiO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdmdJbWFnZSk7XHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBvYmplY3QgaGFzIGxvYWRlZCwgZ2V0IHRoZSBlbGVtZW50IGF0dHJpYnNcclxuICAgICAgICAgICAgICAgIHN2Z0ltYWdlLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdmdvYmogPSA8SFRNTE9iamVjdEVsZW1lbnQ+ZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKCdvYmplY3RbZGF0YT1cIicgKyBzdmdzcmMgKyAnXCJdJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN2Z29iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRTVkdBdHRyaWJzKHN2Z29iaiwgZWxlbWlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzdmdzcmM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgc291cmNlTGVmdCwgc291cmNlVG9wLCBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0IGF1dG9tYXRpY2FsbHlcclxuICAgICAqIGdpdmVuIGV4dGVybmFsIHN2ZyBmaWxlIGFuZCBpY29uIGlkXHJcbiAgICAgKiBAcGFyYW0gc3Znc3JjXHJcbiAgICAgKiBAcGFyYW0gZWxlbWlkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2dldFNWR0F0dHJpYnMoc3Znc3JjOiBIVE1MT2JqZWN0RWxlbWVudCwgZWxlbWlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBzdmdEb2MgPSBzdmdzcmMuY29udGVudERvY3VtZW50O1xyXG4gICAgICAgIC8vIGdldCB2aWV3Ym94IHdpZHRoIGFuZCBoZWlnaHQsIGdldCBzdmcgZG9jdW1lbnQgd2lkdGggYW5kIGhlaWdodCBpbiBweFxyXG4gICAgICAgIGlmIChzdmdEb2MgJiYgc3ZnRG9jLmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCB2YiA9IHN2Z0RvYy5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidmlld0JveFwiKTtcclxuICAgICAgICAgICAgY29uc3QgZG9jd2lkdGggPSBOdW1iZXIoc3ZnRG9jLmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvY2hlaWdodCA9IE51bWJlcihzdmdEb2MuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcImhlaWdodFwiKSk7XHJcbiAgICAgICAgICAgIC8vIGdldCBlbGVtZW50IGJib3ggYW5kIG1hdHJpeCB0cmFuc2Zvcm1cclxuICAgICAgICAgICAgY29uc3QgZWxlbSA9IHN2Z0RvYy5nZXRFbGVtZW50QnlJZChlbGVtaWQpIGFzIE51bGxhYmxlPFNWR0dyYXBoaWNzRWxlbWVudD47XHJcbiAgICAgICAgICAgIGlmICh2YiAmJiBkb2N3aWR0aCAmJiBkb2NoZWlnaHQgJiYgZWxlbSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmJfd2lkdGggPSBOdW1iZXIodmIuc3BsaXQoXCIgXCIpWzJdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZiX2hlaWdodCA9IE51bWJlcih2Yi5zcGxpdChcIiBcIilbM10pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbV9iYm94ID0gZWxlbS5nZXRCQm94KCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZWxlbV9tYXRyaXhfYSA9IDE7XHJcbiAgICAgICAgICAgICAgICBsZXQgZWxlbV9tYXRyaXhfZCA9IDE7XHJcbiAgICAgICAgICAgICAgICBsZXQgZWxlbV9tYXRyaXhfZSA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgZWxlbV9tYXRyaXhfZiA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYWluTWF0cml4ID0gZWxlbS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpIS5tYXRyaXg7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbS50cmFuc2Zvcm0gJiYgZWxlbS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbV9tYXRyaXhfYSA9IG1haW5NYXRyaXguYTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtX21hdHJpeF9kID0gbWFpbk1hdHJpeC5kO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1fbWF0cml4X2UgPSBtYWluTWF0cml4LmU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbV9tYXRyaXhfZiA9IG1haW5NYXRyaXguZjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlIHNvdXJjZSBjb29yZGluYXRlcyBhbmQgZGltZW5zaW9uc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VMZWZ0ID0gKChlbGVtX21hdHJpeF9hICogZWxlbV9iYm94LnggKyBlbGVtX21hdHJpeF9lKSAqIGRvY3dpZHRoKSAvIHZiX3dpZHRoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VUb3AgPSAoKGVsZW1fbWF0cml4X2QgKiBlbGVtX2Jib3gueSArIGVsZW1fbWF0cml4X2YpICogZG9jaGVpZ2h0KSAvIHZiX2hlaWdodDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlV2lkdGggPSBlbGVtX2Jib3gud2lkdGggKiBlbGVtX21hdHJpeF9hICogKGRvY3dpZHRoIC8gdmJfd2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VIZWlnaHQgPSBlbGVtX2Jib3guaGVpZ2h0ICogZWxlbV9tYXRyaXhfZCAqIChkb2NoZWlnaHQgLyB2Yl9oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3ZnQXR0cmlidXRlc0NvbXB1dGF0aW9uQ29tcGxldGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25TVkdBdHRyaWJ1dGVzQ29tcHV0ZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY2VsbCB3aWR0aCB0byB1c2Ugd2hlbiBhbmltYXRpb24gc2hlZXQgaXMgZW5hYmxlZFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aSNpbWFnZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIGdldCBjZWxsV2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2VsbFdpZHRoO1xyXG4gICAgfVxyXG4gICAgc2V0IGNlbGxXaWR0aCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NlbGxXaWR0aCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY2VsbFdpZHRoID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY2VsbCBoZWlnaHQgdG8gdXNlIHdoZW4gYW5pbWF0aW9uIHNoZWV0IGlzIGVuYWJsZWRcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjaW1hZ2VcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBnZXQgY2VsbEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jZWxsSGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgc2V0IGNlbGxIZWlnaHQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9jZWxsSGVpZ2h0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jZWxsSGVpZ2h0ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY2VsbCBpZCB0byB1c2UgKHRoaXMgd2lsbCB0dXJuIG9uIHRoZSBhbmltYXRpb24gc2hlZXQgbW9kZSlcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjaW1hZ2VcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBnZXQgY2VsbElkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NlbGxJZDtcclxuICAgIH1cclxuICAgIHNldCBjZWxsSWQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9jZWxsSWQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2NlbGxJZCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEltYWdlXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqIEBwYXJhbSB1cmwgZGVmaW5lcyB0aGUgaW1hZ2UgdXJsXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBuYW1lPzogc3RyaW5nLFxyXG4gICAgICAgIHVybDogTnVsbGFibGU8c3RyaW5nPiA9IG51bGxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgYSBnaXZlbiBjb29yZGluYXRlcyBiZWxvbmcgdG8gdGhlIGN1cnJlbnQgY29udHJvbFxyXG4gICAgICogQHBhcmFtIHggZGVmaW5lcyB4IGNvb3JkaW5hdGUgdG8gdGVzdFxyXG4gICAgICogQHBhcmFtIHkgZGVmaW5lcyB5IGNvb3JkaW5hdGUgdG8gdGVzdFxyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgY29vcmRpbmF0ZXMgYXJlIGluc2lkZSB0aGUgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgY29udGFpbnMoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN1cGVyLmNvbnRhaW5zKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fZGV0ZWN0UG9pbnRlck9uT3BhcXVlT25seSB8fCAhdGhpcy5fd29ya2luZ0NhbnZhcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggfCAwO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCB8IDA7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gd2lkdGggKyBcIl9cIiArIGhlaWdodDtcclxuXHJcbiAgICAgICAgbGV0IGltYWdlRGF0YSA9IHRoaXMuX2ltYWdlRGF0YUNhY2hlLmRhdGE7XHJcblxyXG4gICAgICAgIGlmICghaW1hZ2VEYXRhIHx8IHRoaXMuX2ltYWdlRGF0YUNhY2hlLmtleSAhPT0ga2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuX3dvcmtpbmdDYW52YXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpITtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2ltYWdlRGF0YUNhY2hlLmRhdGEgPSBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KS5kYXRhO1xyXG4gICAgICAgICAgICB0aGlzLl9pbWFnZURhdGFDYWNoZS5rZXkgPSBrZXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB4ID0gKHggLSB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0KSB8IDA7XHJcbiAgICAgICAgeSA9ICh5IC0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wKSB8IDA7XHJcblxyXG4gICAgICAgIGNvbnN0IHBpY2tlZFBpeGVsID0gaW1hZ2VEYXRhWyh4ICsgeSAqIHdpZHRoKSAqIDQgKyAzXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBpY2tlZFBpeGVsID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiSW1hZ2VcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogRm9yY2UgdGhlIGNvbnRyb2wgdG8gc3luY2hyb25pemUgd2l0aCBpdHMgY29udGVudCAqL1xyXG4gICAgcHVibGljIHN5bmNocm9uaXplU2l6ZVdpdGhDb250ZW50KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fbG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLl9kb21JbWFnZS53aWR0aCArIFwicHhcIjtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuX2RvbUltYWdlLmhlaWdodCArIFwicHhcIjtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX3Byb2Nlc3NNZWFzdXJlcyhwYXJlbnRNZWFzdXJlOiBNZWFzdXJlLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9sb2FkZWQpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9zdHJldGNoKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEltYWdlLlNUUkVUQ0hfTk9ORTpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgSW1hZ2UuU1RSRVRDSF9GSUxMOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBJbWFnZS5TVFJFVENIX1VOSUZPUk06XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEltYWdlLlNUUkVUQ0hfTklORV9QQVRDSDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgSW1hZ2UuU1RSRVRDSF9FWFRFTkQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2F1dG9TY2FsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bmNocm9uaXplU2l6ZVdpdGhDb250ZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2lsbCB1cGRhdGUgcm9vdCBzaXplIGlmIHJvb3QgaXMgbm90IHRoZSB0b3Agcm9vdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5hZGFwdFdpZHRoVG9DaGlsZHJlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmFkYXB0SGVpZ2h0VG9DaGlsZHJlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5fcHJvY2Vzc01lYXN1cmVzKHBhcmVudE1lYXN1cmUsIGNvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3ByZXBhcmVXb3JraW5nQ2FudmFzRm9yT3BhcXVlRGV0ZWN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fZGV0ZWN0UG9pbnRlck9uT3BhcXVlT25seSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl93b3JraW5nQ2FudmFzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZ2luZSA9IHRoaXMuX2hvc3Q/LmdldFNjZW5lKCk/LmdldEVuZ2luZSgpIHx8IEVuZ2luZVN0b3JlLkxhc3RDcmVhdGVkRW5naW5lO1xyXG4gICAgICAgICAgICBpZiAoIWVuZ2luZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBlbmdpbmUuIFVuYWJsZSB0byBjcmVhdGUgYSBjYW52YXMuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3dvcmtpbmdDYW52YXMgPSBlbmdpbmUuY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLl93b3JraW5nQ2FudmFzO1xyXG5cclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSE7XHJcblxyXG4gICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2RyYXdJbWFnZShjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCwgc3g6IG51bWJlciwgc3k6IG51bWJlciwgc3c6IG51bWJlciwgc2g6IG51bWJlciwgdHg6IG51bWJlciwgdHk6IG51bWJlciwgdHc6IG51bWJlciwgdGg6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMuX2RvbUltYWdlLCBzeCwgc3ksIHN3LCBzaCwgdHgsIHR5LCB0dywgdGgpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX2RldGVjdFBvaW50ZXJPbk9wYXF1ZU9ubHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gY29udGV4dC5nZXRUcmFuc2Zvcm0oKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5fd29ya2luZ0NhbnZhcyE7XHJcbiAgICAgICAgY29uc3Qgd29ya2luZ0NhbnZhc0NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpITtcclxuICAgICAgICB3b3JraW5nQ2FudmFzQ29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgY29uc3QgdHR4ID0gdHggLSB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHR0eSA9IHR5IC0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wO1xyXG4gICAgICAgIHdvcmtpbmdDYW52YXNDb250ZXh0LnNldFRyYW5zZm9ybSh0cmFuc2Zvcm0uYSwgdHJhbnNmb3JtLmIsIHRyYW5zZm9ybS5jLCB0cmFuc2Zvcm0uZCwgKHR0eCArIHR3KSAvIDIsICh0dHkgKyB0aCkgLyAyKTtcclxuICAgICAgICB3b3JraW5nQ2FudmFzQ29udGV4dC50cmFuc2xhdGUoLSh0dHggKyB0dykgLyAyLCAtKHR0eSArIHRoKSAvIDIpO1xyXG5cclxuICAgICAgICB3b3JraW5nQ2FudmFzQ29udGV4dC5kcmF3SW1hZ2UodGhpcy5fZG9tSW1hZ2UsIHN4LCBzeSwgc3csIHNoLCB0dHgsIHR0eSwgdHcsIHRoKTtcclxuICAgICAgICB3b3JraW5nQ2FudmFzQ29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9kcmF3KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gdGhpcy5zaGFkb3dDb2xvcjtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gdGhpcy5zaGFkb3dCbHVyO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IHRoaXMuc2hhZG93T2Zmc2V0WTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB4LCB5LCB3aWR0aCwgaGVpZ2h0O1xyXG4gICAgICAgIGlmICh0aGlzLmNlbGxJZCA9PSAtMSkge1xyXG4gICAgICAgICAgICB4ID0gdGhpcy5fc291cmNlTGVmdDtcclxuICAgICAgICAgICAgeSA9IHRoaXMuX3NvdXJjZVRvcDtcclxuXHJcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5fc291cmNlV2lkdGggPyB0aGlzLl9zb3VyY2VXaWR0aCA6IHRoaXMuX2ltYWdlV2lkdGg7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuX3NvdXJjZUhlaWdodCA/IHRoaXMuX3NvdXJjZUhlaWdodCA6IHRoaXMuX2ltYWdlSGVpZ2h0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd0NvdW50ID0gdGhpcy5fZG9tSW1hZ2UubmF0dXJhbFdpZHRoIC8gdGhpcy5jZWxsV2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9ICh0aGlzLmNlbGxJZCAvIHJvd0NvdW50KSA+PiAwO1xyXG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLmNlbGxJZCAlIHJvd0NvdW50O1xyXG5cclxuICAgICAgICAgICAgeCA9IHRoaXMuY2VsbFdpZHRoICogcm93O1xyXG4gICAgICAgICAgICB5ID0gdGhpcy5jZWxsSGVpZ2h0ICogY29sdW1uO1xyXG4gICAgICAgICAgICB3aWR0aCA9IHRoaXMuY2VsbFdpZHRoO1xyXG4gICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmNlbGxIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9wcmVwYXJlV29ya2luZ0NhbnZhc0Zvck9wYXF1ZURldGVjdGlvbigpO1xyXG5cclxuICAgICAgICB0aGlzLl9hcHBseVN0YXRlcyhjb250ZXh0KTtcclxuICAgICAgICBpZiAodGhpcy5fbG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fc3RyZXRjaCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBJbWFnZS5TVFJFVENIX05PTkU6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJhd0ltYWdlKGNvbnRleHQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCwgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEltYWdlLlNUUkVUQ0hfRklMTDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmF3SW1hZ2UoY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgSW1hZ2UuU1RSRVRDSF9VTklGT1JNOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaFJhdGlvID0gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLyB3aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2UmF0aW8gPSB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLyBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF0aW8gPSBNYXRoLm1pbihoUmF0aW8sIHZSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9ICh0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAtIHdpZHRoICogcmF0aW8pIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gKHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAtIGhlaWdodCAqIHJhdGlvKSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdJbWFnZShjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgY2VudGVyWCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgY2VudGVyWSwgd2lkdGggKiByYXRpbywgaGVpZ2h0ICogcmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBJbWFnZS5TVFJFVENIX0VYVEVORDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmF3SW1hZ2UoY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgSW1hZ2UuU1RSRVRDSF9OSU5FX1BBVENIOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlck5pbmVQYXRjaChjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVuZGVyTmluZVBhdGNoKGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0LCBzeDogbnVtYmVyLCBzeTogbnVtYmVyLCBzdzogbnVtYmVyLCBzaDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaWRlYWxSYXRpbyA9IHRoaXMuaG9zdC5pZGVhbFdpZHRoXHJcbiAgICAgICAgICAgID8gdGhpcy5fd2lkdGguZ2V0VmFsdWUodGhpcy5ob3N0KSAvIHRoaXMuaG9zdC5pZGVhbFdpZHRoXHJcbiAgICAgICAgICAgIDogdGhpcy5ob3N0LmlkZWFsSGVpZ2h0XHJcbiAgICAgICAgICAgICAgPyB0aGlzLl9oZWlnaHQuZ2V0VmFsdWUodGhpcy5ob3N0KSAvIHRoaXMuaG9zdC5pZGVhbEhlaWdodFxyXG4gICAgICAgICAgICAgIDogMTtcclxuICAgICAgICBjb25zdCBsZWZ0V2lkdGggPSB0aGlzLl9zbGljZUxlZnQ7XHJcbiAgICAgICAgY29uc3QgdG9wSGVpZ2h0ID0gdGhpcy5fc2xpY2VUb3A7XHJcbiAgICAgICAgY29uc3QgYm90dG9tSGVpZ2h0ID0gc2ggLSB0aGlzLl9zbGljZUJvdHRvbTtcclxuICAgICAgICBjb25zdCByaWdodFdpZHRoID0gc3cgLSB0aGlzLl9zbGljZVJpZ2h0O1xyXG4gICAgICAgIGNvbnN0IGNlbnRlcldpZHRoID0gdGhpcy5fc2xpY2VSaWdodCAtIHRoaXMuX3NsaWNlTGVmdDtcclxuICAgICAgICBjb25zdCBjZW50ZXJIZWlnaHQgPSB0aGlzLl9zbGljZUJvdHRvbSAtIHRoaXMuX3NsaWNlVG9wO1xyXG4gICAgICAgIGNvbnN0IGxlZnRXaWR0aEFkanVzdGVkID0gTWF0aC5yb3VuZChsZWZ0V2lkdGggKiBpZGVhbFJhdGlvKTtcclxuICAgICAgICBjb25zdCB0b3BIZWlnaHRBZGp1c3RlZCA9IE1hdGgucm91bmQodG9wSGVpZ2h0ICogaWRlYWxSYXRpbyk7XHJcbiAgICAgICAgY29uc3QgYm90dG9tSGVpZ2h0QWRqdXN0ZWQgPSBNYXRoLnJvdW5kKGJvdHRvbUhlaWdodCAqIGlkZWFsUmF0aW8pO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0V2lkdGhBZGp1c3RlZCA9IE1hdGgucm91bmQocmlnaHRXaWR0aCAqIGlkZWFsUmF0aW8pO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldENlbnRlcldpZHRoID0gTWF0aC5yb3VuZCh0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCkgLSByaWdodFdpZHRoQWRqdXN0ZWQgLSBsZWZ0V2lkdGhBZGp1c3RlZCArIDI7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0Q2VudGVySGVpZ2h0ID0gTWF0aC5yb3VuZCh0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpIC0gYm90dG9tSGVpZ2h0QWRqdXN0ZWQgLSB0b3BIZWlnaHRBZGp1c3RlZCArIDI7XHJcbiAgICAgICAgY29uc3QgY2VudGVyTGVmdE9mZnNldCA9IE1hdGgucm91bmQodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCkgKyBsZWZ0V2lkdGhBZGp1c3RlZCAtIDE7XHJcbiAgICAgICAgY29uc3QgY2VudGVyVG9wT2Zmc2V0ID0gTWF0aC5yb3VuZCh0aGlzLl9jdXJyZW50TWVhc3VyZS50b3ApICsgdG9wSGVpZ2h0QWRqdXN0ZWQgLSAxO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0T2Zmc2V0ID0gTWF0aC5yb3VuZCh0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgpIC0gcmlnaHRXaWR0aEFkanVzdGVkO1xyXG4gICAgICAgIGNvbnN0IGJvdHRvbU9mZnNldCA9IE1hdGgucm91bmQodGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KSAtIGJvdHRvbUhlaWdodEFkanVzdGVkO1xyXG5cclxuICAgICAgICAvL1RvcCBMZWZ0XHJcbiAgICAgICAgdGhpcy5fZHJhd0ltYWdlKGNvbnRleHQsIHN4LCBzeSwgbGVmdFdpZHRoLCB0b3BIZWlnaHQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCwgbGVmdFdpZHRoQWRqdXN0ZWQsIHRvcEhlaWdodEFkanVzdGVkKTtcclxuICAgICAgICAvL1RvcFxyXG4gICAgICAgIHRoaXMuX2RyYXdJbWFnZShjb250ZXh0LCBzeCArIHRoaXMuX3NsaWNlTGVmdCwgc3ksIGNlbnRlcldpZHRoLCB0b3BIZWlnaHQsIGNlbnRlckxlZnRPZmZzZXQgKyAxLCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AsIHRhcmdldENlbnRlcldpZHRoIC0gMiwgdG9wSGVpZ2h0QWRqdXN0ZWQpO1xyXG4gICAgICAgIC8vVG9wIFJpZ2h0XHJcbiAgICAgICAgdGhpcy5fZHJhd0ltYWdlKGNvbnRleHQsIHN4ICsgdGhpcy5fc2xpY2VSaWdodCwgc3ksIHJpZ2h0V2lkdGgsIHRvcEhlaWdodCwgcmlnaHRPZmZzZXQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCwgcmlnaHRXaWR0aEFkanVzdGVkLCB0b3BIZWlnaHRBZGp1c3RlZCk7XHJcbiAgICAgICAgLy9MZWZ0XHJcbiAgICAgICAgdGhpcy5fZHJhd0ltYWdlKGNvbnRleHQsIHN4LCBzeSArIHRoaXMuX3NsaWNlVG9wLCBsZWZ0V2lkdGgsIGNlbnRlckhlaWdodCwgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgY2VudGVyVG9wT2Zmc2V0ICsgMSwgbGVmdFdpZHRoQWRqdXN0ZWQsIHRhcmdldENlbnRlckhlaWdodCAtIDIpO1xyXG4gICAgICAgIC8vIENlbnRlclxyXG4gICAgICAgIHRoaXMuX2RyYXdJbWFnZShcclxuICAgICAgICAgICAgY29udGV4dCxcclxuICAgICAgICAgICAgc3ggKyB0aGlzLl9zbGljZUxlZnQsXHJcbiAgICAgICAgICAgIHN5ICsgdGhpcy5fc2xpY2VUb3AsXHJcbiAgICAgICAgICAgIGNlbnRlcldpZHRoLFxyXG4gICAgICAgICAgICBjZW50ZXJIZWlnaHQsXHJcbiAgICAgICAgICAgIGNlbnRlckxlZnRPZmZzZXQgKyAxLFxyXG4gICAgICAgICAgICBjZW50ZXJUb3BPZmZzZXQgKyAxLFxyXG4gICAgICAgICAgICB0YXJnZXRDZW50ZXJXaWR0aCAtIDIsXHJcbiAgICAgICAgICAgIHRhcmdldENlbnRlckhlaWdodCAtIDJcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vUmlnaHRcclxuICAgICAgICB0aGlzLl9kcmF3SW1hZ2UoXHJcbiAgICAgICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgICAgIHN4ICsgdGhpcy5fc2xpY2VSaWdodCxcclxuICAgICAgICAgICAgc3kgKyB0aGlzLl9zbGljZVRvcCxcclxuICAgICAgICAgICAgcmlnaHRXaWR0aCxcclxuICAgICAgICAgICAgY2VudGVySGVpZ2h0LFxyXG4gICAgICAgICAgICByaWdodE9mZnNldCxcclxuICAgICAgICAgICAgY2VudGVyVG9wT2Zmc2V0ICsgMSxcclxuICAgICAgICAgICAgcmlnaHRXaWR0aEFkanVzdGVkLFxyXG4gICAgICAgICAgICB0YXJnZXRDZW50ZXJIZWlnaHQgLSAyXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvL0JvdHRvbSBMZWZ0XHJcbiAgICAgICAgdGhpcy5fZHJhd0ltYWdlKGNvbnRleHQsIHN4LCBzeSArIHRoaXMuX3NsaWNlQm90dG9tLCBsZWZ0V2lkdGgsIGJvdHRvbUhlaWdodCwgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgYm90dG9tT2Zmc2V0LCBsZWZ0V2lkdGhBZGp1c3RlZCwgYm90dG9tSGVpZ2h0QWRqdXN0ZWQpO1xyXG4gICAgICAgIC8vQm90dG9tXHJcbiAgICAgICAgdGhpcy5fZHJhd0ltYWdlKFxyXG4gICAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgICBzeCArIHRoaXMuc2xpY2VMZWZ0LFxyXG4gICAgICAgICAgICBzeSArIHRoaXMuX3NsaWNlQm90dG9tLFxyXG4gICAgICAgICAgICBjZW50ZXJXaWR0aCxcclxuICAgICAgICAgICAgYm90dG9tSGVpZ2h0LFxyXG4gICAgICAgICAgICBjZW50ZXJMZWZ0T2Zmc2V0ICsgMSxcclxuICAgICAgICAgICAgYm90dG9tT2Zmc2V0LFxyXG4gICAgICAgICAgICB0YXJnZXRDZW50ZXJXaWR0aCAtIDIsXHJcbiAgICAgICAgICAgIGJvdHRvbUhlaWdodEFkanVzdGVkXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvL0JvdHRvbSBSaWdodFxyXG4gICAgICAgIHRoaXMuX2RyYXdJbWFnZShjb250ZXh0LCBzeCArIHRoaXMuX3NsaWNlUmlnaHQsIHN5ICsgdGhpcy5fc2xpY2VCb3R0b20sIHJpZ2h0V2lkdGgsIGJvdHRvbUhlaWdodCwgcmlnaHRPZmZzZXQsIGJvdHRvbU9mZnNldCwgcmlnaHRXaWR0aEFkanVzdGVkLCBib3R0b21IZWlnaHRBZGp1c3RlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMub25JbWFnZUxvYWRlZE9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uU1ZHQXR0cmlidXRlc0NvbXB1dGVkT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuX3JlbW92ZUNhY2hlVXNhZ2UodGhpcy5fc291cmNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdGF0aWNcclxuICAgIC8qKiBTVFJFVENIX05PTkUgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU1RSRVRDSF9OT05FID0gMDtcclxuICAgIC8qKiBTVFJFVENIX0ZJTEwgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU1RSRVRDSF9GSUxMID0gMTtcclxuICAgIC8qKiBTVFJFVENIX1VOSUZPUk0gKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU1RSRVRDSF9VTklGT1JNID0gMjtcclxuICAgIC8qKiBTVFJFVENIX0VYVEVORCAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBTVFJFVENIX0VYVEVORCA9IDM7XHJcbiAgICAvKiogTklORV9QQVRDSCAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBTVFJFVENIX05JTkVfUEFUQ0ggPSA0O1xyXG59XHJcblJlZ2lzdGVyQ2xhc3MoXCJCQUJZTE9OLkdVSS5JbWFnZVwiLCBJbWFnZSk7XHJcbiIsImV4cG9ydCAqIGZyb20gXCIuL2J1dHRvblwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jaGVja2JveFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jb2xvcnBpY2tlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jb250YWluZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY29udHJvbFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9lbGxpcHNlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2ZvY3VzYWJsZUJ1dHRvblwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9mb2N1c2FibGVDb250cm9sXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2dyaWRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vaW1hZ2VcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vaW5wdXRUZXh0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2lucHV0VGV4dEFyZWFcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vaW5wdXRQYXNzd29yZFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9saW5lXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL211bHRpTGluZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9yYWRpb0J1dHRvblwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9zdGFja1BhbmVsXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3NlbGVjdG9yXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3Njcm9sbFZpZXdlcnMvc2Nyb2xsVmlld2VyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3RleHRCbG9ja1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi90ZXh0V3JhcHBlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi90b2dnbGVCdXR0b25cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdmlydHVhbEtleWJvYXJkXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3JlY3RhbmdsZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9kaXNwbGF5R3JpZFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9zbGlkZXJzL2Jhc2VTbGlkZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc2xpZGVycy9zbGlkZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc2xpZGVycy9pbWFnZUJhc2VkU2xpZGVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3NsaWRlcnMvc2Nyb2xsQmFyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3NsaWRlcnMvaW1hZ2VTY3JvbGxCYXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc3RhdGljc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9ncmFkaWVudC9CYXNlR3JhZGllbnRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZ3JhZGllbnQvTGluZWFyR3JhZGllbnRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZ3JhZGllbnQvUmFkaWFsR3JhZGllbnRcIjtcclxuIiwiaW1wb3J0IHsgSW5wdXRUZXh0IH0gZnJvbSBcIi4vaW5wdXRUZXh0XCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBUZXh0V3JhcHBlciB9IGZyb20gXCIuL3RleHRXcmFwcGVyXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBjcmVhdGUgYSBwYXNzd29yZCBjb250cm9sXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW5wdXRQYXNzd29yZCBleHRlbmRzIElucHV0VGV4dCB7XHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiSW5wdXRQYXNzd29yZFwiO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYmVmb3JlUmVuZGVyVGV4dCh0ZXh0V3JhcHBlcjogVGV4dFdyYXBwZXIpOiBUZXh0V3JhcHBlciB7XHJcbiAgICAgICAgY29uc3QgcHdkVGV4dFdyYXBwZXIgPSBuZXcgVGV4dFdyYXBwZXIoKTtcclxuICAgICAgICBsZXQgdHh0ID0gXCJcIjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHRXcmFwcGVyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHR4dCArPSBcIlxcdTIwMjJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHdkVGV4dFdyYXBwZXIudGV4dCA9IHR4dDtcclxuICAgICAgICByZXR1cm4gcHdkVGV4dFdyYXBwZXI7XHJcbiAgICB9XHJcbn1cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLklucHV0UGFzc3dvcmRcIiwgSW5wdXRQYXNzd29yZCk7XHJcbiIsImltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgdHlwZSB7IE9ic2VydmVyIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHR5cGUgeyBWZWN0b3IyIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHR5cGUgeyBDbGlwYm9hcmRJbmZvIH0gZnJvbSBcImNvcmUvRXZlbnRzL2NsaXBib2FyZEV2ZW50c1wiO1xyXG5pbXBvcnQgeyBDbGlwYm9hcmRFdmVudFR5cGVzIH0gZnJvbSBcImNvcmUvRXZlbnRzL2NsaXBib2FyZEV2ZW50c1wiO1xyXG5pbXBvcnQgdHlwZSB7IFBvaW50ZXJJbmZvLCBQb2ludGVySW5mb0Jhc2UgfSBmcm9tIFwiY29yZS9FdmVudHMvcG9pbnRlckV2ZW50c1wiO1xyXG5pbXBvcnQgeyBQb2ludGVyRXZlbnRUeXBlcyB9IGZyb20gXCJjb3JlL0V2ZW50cy9wb2ludGVyRXZlbnRzXCI7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgeyBWYWx1ZUFuZFVuaXQgfSBmcm9tIFwiLi4vdmFsdWVBbmRVbml0XCI7XHJcbmltcG9ydCB0eXBlIHsgVmlydHVhbEtleWJvYXJkIH0gZnJvbSBcIi4vdmlydHVhbEtleWJvYXJkXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBUZXh0V3JhcHBlciB9IGZyb20gXCIuL3RleHRXcmFwcGVyXCI7XHJcbmltcG9ydCB7IHNlcmlhbGl6ZSB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9yc1wiO1xyXG5pbXBvcnQgdHlwZSB7IElLZXlib2FyZEV2ZW50LCBJUG9pbnRlckV2ZW50IH0gZnJvbSBcImNvcmUvRXZlbnRzL2RldmljZUlucHV0RXZlbnRzXCI7XHJcbmltcG9ydCB0eXBlIHsgSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQgfSBmcm9tIFwiY29yZS9FbmdpbmVzL0lDYW52YXNcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSBpbnB1dCB0ZXh0IGNvbnRyb2xcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbnB1dFRleHQgZXh0ZW5kcyBDb250cm9sIHtcclxuICAgIHByb3RlY3RlZCBfdGV4dFdyYXBwZXI6IFRleHRXcmFwcGVyO1xyXG4gICAgcHJvdGVjdGVkIF9wbGFjZWhvbGRlclRleHQgPSBcIlwiO1xyXG4gICAgcHJvdGVjdGVkIF9iYWNrZ3JvdW5kID0gXCIjMjIyMjIyXCI7XHJcbiAgICBwcm90ZWN0ZWQgX2ZvY3VzZWRCYWNrZ3JvdW5kID0gXCIjMDAwMDAwXCI7XHJcbiAgICBwcm90ZWN0ZWQgX3BsYWNlaG9sZGVyQ29sb3IgPSBcImdyYXlcIjtcclxuICAgIHByb3RlY3RlZCBfdGhpY2tuZXNzID0gMTtcclxuICAgIHByb3RlY3RlZCBfbWFyZ2luID0gbmV3IFZhbHVlQW5kVW5pdCgxMCwgVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMKTtcclxuICAgIHByb3RlY3RlZCBfYXV0b1N0cmV0Y2hXaWR0aCA9IHRydWU7XHJcbiAgICBwcm90ZWN0ZWQgX21heFdpZHRoID0gbmV3IFZhbHVlQW5kVW5pdCgxLCBWYWx1ZUFuZFVuaXQuVU5JVE1PREVfUEVSQ0VOVEFHRSwgZmFsc2UpO1xyXG4gICAgLyoqIHRoZSB0eXBlIG9mIGRldmljZSB0aGF0IG1vc3QgcmVjZW50bHkgZm9jdXNlZCB0aGUgaW5wdXQ6IFwibW91c2VcIiwgXCJ0b3VjaFwiIG9yIFwicGVuXCIgKi9cclxuICAgIHByb3RlY3RlZCBfZm9jdXNlZEJ5OiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgX2JsaW5rVGltZW91dDogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIF9ibGlua0lzRXZlbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfY3Vyc29yT2Zmc2V0ID0gMDtcclxuICAgIHByb3RlY3RlZCBfc2Nyb2xsTGVmdDogTnVsbGFibGU8bnVtYmVyPjtcclxuICAgIHByb3RlY3RlZCBfdGV4dFdpZHRoOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgX2NsaWNrZWRDb29yZGluYXRlOiBOdWxsYWJsZTxudW1iZXI+O1xyXG4gICAgcHJvdGVjdGVkIF9kZWFkS2V5ID0gZmFsc2U7XHJcbiAgICBwcm90ZWN0ZWQgX2FkZEtleSA9IHRydWU7XHJcbiAgICBwcm90ZWN0ZWQgX2N1cnJlbnRLZXkgPSBcIlwiO1xyXG4gICAgcHJvdGVjdGVkIF9pc1RleHRIaWdobGlnaHRPbiA9IGZhbHNlO1xyXG4gICAgcHJvdGVjdGVkIF90ZXh0SGlnaGxpZ2h0Q29sb3IgPSBcIiNkNWUwZmZcIjtcclxuICAgIHByb3RlY3RlZCBfaGlnaGxpZ2hlck9wYWNpdHkgPSAwLjQ7XHJcbiAgICBwcm90ZWN0ZWQgX2hpZ2hsaWdodGVkVGV4dCA9IFwiXCI7XHJcbiAgICBwcml2YXRlIF9zdGFydEhpZ2hsaWdodEluZGV4ID0gMDtcclxuICAgIHByaXZhdGUgX2VuZEhpZ2hsaWdodEluZGV4ID0gMDtcclxuICAgIHByaXZhdGUgX2N1cnNvckluZGV4ID0gLTE7XHJcbiAgICBwcml2YXRlIF9vdXRsaW5lV2lkdGg6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIF9vdXRsaW5lQ29sb3I6IHN0cmluZyA9IFwid2hpdGVcIjtcclxuICAgIHByb3RlY3RlZCBfb25Gb2N1c1NlbGVjdEFsbCA9IGZhbHNlO1xyXG4gICAgcHJvdGVjdGVkIF9pc1BvaW50ZXJEb3duID0gZmFsc2U7XHJcbiAgICBwcm90ZWN0ZWQgX29uQ2xpcGJvYXJkT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPENsaXBib2FyZEluZm8+PjtcclxuICAgIHByb3RlY3RlZCBfb25Qb2ludGVyRGJsVGFwT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPFBvaW50ZXJJbmZvPj47XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9jb25uZWN0ZWRWaXJ0dWFsS2V5Ym9hcmQ6IE51bGxhYmxlPFZpcnR1YWxLZXlib2FyZD47XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG1lc3NhZ2UgZGlzcGxheWVkIG9uIG1vYmlsZSB3aGVuIHRoZSBjb250cm9sIGdldHMgdGhlIGZvY3VzICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBwcm9tcHRNZXNzYWdlID0gXCJQbGVhc2UgZW50ZXIgdGV4dDpcIjtcclxuICAgIC8qKiBGb3JjZSBkaXNhYmxlIHByb21wdCBvbiBtb2JpbGUgZGV2aWNlICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBkaXNhYmxlTW9iaWxlUHJvbXB0ID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgb3V0bGluZVdpZHRoIG9mIHRoZSB0ZXh0IHRvIGRpc3BsYXlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBvdXRsaW5lV2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb3V0bGluZVdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgb3V0bGluZVdpZHRoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fb3V0bGluZVdpZHRoID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX291dGxpbmVXaWR0aCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgb3V0bGluZUNvbG9yIG9mIHRoZSB0ZXh0IHRvIGRpc3BsYXlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBvdXRsaW5lQ29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb3V0bGluZUNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgb3V0bGluZUNvbG9yKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fb3V0bGluZUNvbG9yID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX291dGxpbmVDb2xvciA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIE9ic2VydmFibGUgcmFpc2VkIHdoZW4gdGhlIHRleHQgY2hhbmdlcyAqL1xyXG4gICAgcHVibGljIG9uVGV4dENoYW5nZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SW5wdXRUZXh0PigpO1xyXG4gICAgLyoqIE9ic2VydmFibGUgcmFpc2VkIGp1c3QgYmVmb3JlIGFuIGVudGVyZWQgY2hhcmFjdGVyIGlzIHRvIGJlIGFkZGVkICovXHJcbiAgICBwdWJsaWMgb25CZWZvcmVLZXlBZGRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SW5wdXRUZXh0PigpO1xyXG4gICAgLyoqIE9ic2VydmFibGUgcmFpc2VkIHdoZW4gdGhlIHRleHQgaXMgaGlnaGxpZ2h0ZWQgKi9cclxuICAgIHB1YmxpYyBvblRleHRIaWdobGlnaHRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SW5wdXRUZXh0PigpO1xyXG4gICAgLyoqIE9ic2VydmFibGUgcmFpc2VkIHdoZW4gY29weSBldmVudCBpcyB0cmlnZ2VyZWQgKi9cclxuICAgIHB1YmxpYyBvblRleHRDb3B5T2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPElucHV0VGV4dD4oKTtcclxuICAgIC8qKiBPYnNlcnZhYmxlIHJhaXNlZCB3aGVuIGN1dCBldmVudCBpcyB0cmlnZ2VyZWQgKi9cclxuICAgIHB1YmxpYyBvblRleHRDdXRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SW5wdXRUZXh0PigpO1xyXG4gICAgLyoqIE9ic2VydmFibGUgcmFpc2VkIHdoZW4gcGFzdGUgZXZlbnQgaXMgdHJpZ2dlcmVkICovXHJcbiAgICBwdWJsaWMgb25UZXh0UGFzdGVPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SW5wdXRUZXh0PigpO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIG1heGltdW0gd2lkdGggYWxsb3dlZCBieSB0aGUgY29udHJvbCAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IG1heFdpZHRoKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heFdpZHRoLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIHRoZSBtYXhpbXVtIHdpZHRoIGFsbG93ZWQgYnkgdGhlIGNvbnRyb2wgaW4gcGl4ZWxzICovXHJcbiAgICBwdWJsaWMgZ2V0IG1heFdpZHRoSW5QaXhlbHMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWF4V2lkdGguZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUud2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbWF4V2lkdGgodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXhXaWR0aC50b1N0cmluZyh0aGlzLl9ob3N0KSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX21heFdpZHRoLmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIHRleHQgaGlnaGxpZ2h0ZXIgdHJhbnNwYXJlbmN5OyBkZWZhdWx0OiAwLjQgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBoaWdobGlnaGVyT3BhY2l0eSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oaWdobGlnaGVyT3BhY2l0eTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGhpZ2hsaWdoZXJPcGFjaXR5KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5faGlnaGxpZ2hlck9wYWNpdHkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGlnaGxpZ2hlck9wYWNpdHkgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIHNlbGVjdCBjb21wbGV0ZSB0ZXh0IGJ5IGRlZmF1bHQgb24gaW5wdXQgZm9jdXMgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBvbkZvY3VzU2VsZWN0QWxsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vbkZvY3VzU2VsZWN0QWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgb25Gb2N1c1NlbGVjdEFsbCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9vbkZvY3VzU2VsZWN0QWxsID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vbkZvY3VzU2VsZWN0QWxsID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSB0ZXh0IGhpZ2h0bGlnaHQgY29sb3IgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCB0ZXh0SGlnaGxpZ2h0Q29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dEhpZ2hsaWdodENvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgdGV4dEhpZ2hsaWdodENvbG9yKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGV4dEhpZ2hsaWdodENvbG9yID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3RleHRIaWdobGlnaHRDb2xvciA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBjb250cm9sIG1hcmdpbiAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IG1hcmdpbigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXJnaW4udG9TdHJpbmcodGhpcy5faG9zdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgY29udHJvbCBtYXJnaW4gaW4gcGl4ZWxzICovXHJcbiAgICBwdWJsaWMgZ2V0IG1hcmdpbkluUGl4ZWxzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcmdpbi5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS53aWR0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBtYXJnaW4odmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXJnaW4udG9TdHJpbmcodGhpcy5faG9zdCkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9tYXJnaW4uZnJvbVN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgY29udHJvbCBjYW4gYXV0byBzdHJldGNoIGl0cyB3aWR0aCB0byBhZGFwdCB0byB0aGUgdGV4dCAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGF1dG9TdHJldGNoV2lkdGgoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9TdHJldGNoV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBhdXRvU3RyZXRjaFdpZHRoKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2F1dG9TdHJldGNoV2lkdGggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2F1dG9TdHJldGNoV2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYm9yZGVyIHRoaWNrbmVzcyAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHRoaWNrbmVzcygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aGlja25lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB0aGlja25lc3ModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl90aGlja25lc3MgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3RoaWNrbmVzcyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgYmFja2dyb3VuZCBjb2xvciB3aGVuIGZvY3VzZWQgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBmb2N1c2VkQmFja2dyb3VuZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb2N1c2VkQmFja2dyb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGZvY3VzZWRCYWNrZ3JvdW5kKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fZm9jdXNlZEJhY2tncm91bmQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvY3VzZWRCYWNrZ3JvdW5kID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIHdoZW4gZm9jdXNlZCAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIHNldCBmb2N1c2VkQ29sb3IodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9mb2N1c2VkQ29sb3IgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvY3VzZWRDb2xvciA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgYmFja2dyb3VuZCBjb2xvciAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGJhY2tncm91bmQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja2dyb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJhY2tncm91bmQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9iYWNrZ3JvdW5kID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBwbGFjZWhvbGRlciBjb2xvciAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHBsYWNlaG9sZGVyQ29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGxhY2Vob2xkZXJDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHBsYWNlaG9sZGVyQ29sb3IodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9wbGFjZWhvbGRlckNvbG9yID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9wbGFjZWhvbGRlckNvbG9yID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSB0ZXh0IGRpc3BsYXllZCB3aGVuIHRoZSBjb250cm9sIGlzIGVtcHR5ICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgcGxhY2Vob2xkZXJUZXh0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsYWNlaG9sZGVyVGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHBsYWNlaG9sZGVyVGV4dCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BsYWNlaG9sZGVyVGV4dCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wbGFjZWhvbGRlclRleHQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGRlYWQga2V5LiAwIHRvIGRpc2FibGUuICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgZGVhZEtleSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVhZEtleTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGRlYWRLZXkoZmxhZzogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2RlYWRLZXkgPSBmbGFnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGhpZ2hsaWdodCB0ZXh0ICovXHJcbiAgICBwdWJsaWMgZ2V0IGhpZ2hsaWdodGVkVGV4dCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oaWdobGlnaHRlZFRleHQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IGhpZ2hsaWdodGVkVGV4dCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5faGlnaGxpZ2h0ZWRUZXh0ID09PSB0ZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGlnaGxpZ2h0ZWRUZXh0ID0gdGV4dDtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgaWYgdGhlIGN1cnJlbnQga2V5IHNob3VsZCBiZSBhZGRlZCAqL1xyXG4gICAgcHVibGljIGdldCBhZGRLZXkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZEtleTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGFkZEtleShmbGFnOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fYWRkS2V5ID0gZmxhZztcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudCBrZXkgYmVpbmcgZW50ZXJlZCAqL1xyXG4gICAgcHVibGljIGdldCBjdXJyZW50S2V5KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRLZXk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBjdXJyZW50S2V5KGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudEtleSA9IGtleTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSB0ZXh0IGRpc3BsYXllZCBpbiB0aGUgY29udHJvbCAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dFdyYXBwZXIudGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRleHQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlQXNTdHJpbmcgPSB2YWx1ZS50b1N0cmluZygpOyAvLyBGb3JjaW5nIGNvbnZlcnRpb25cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl90ZXh0V3JhcHBlcikge1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0V3JhcHBlciA9IG5ldyBUZXh0V3JhcHBlcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3RleHRXcmFwcGVyLnRleHQgPT09IHZhbHVlQXNTdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl90ZXh0V3JhcHBlci50ZXh0ID0gdmFsdWVBc1N0cmluZztcclxuICAgICAgICB0aGlzLl90ZXh0SGFzQ2hhbmdlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfdGV4dEhhc0NoYW5nZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB0aGlzLm9uVGV4dENoYW5nZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FwcGx5U3RhdGVzKGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuX2FwcGx5U3RhdGVzKGNvbnRleHQpO1xyXG4gICAgICAgIGlmICh0aGlzLm91dGxpbmVXaWR0aCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHRoaXMub3V0bGluZVdpZHRoO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5vdXRsaW5lQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgY29udHJvbCB3aWR0aCAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0IHdpZHRoKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXQgd2lkdGgodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl93aWR0aC50b1N0cmluZyh0aGlzLl9ob3N0KSA9PT0gdmFsdWUgJiYgIXRoaXMuX2F1dG9TdHJldGNoV2lkdGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3dpZHRoLmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmF1dG9TdHJldGNoV2lkdGggPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgSW5wdXRUZXh0XHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqIEBwYXJhbSB0ZXh0IGRlZmluZXMgdGhlIHRleHQgb2YgdGhlIGNvbnRyb2xcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcsXHJcbiAgICAgICAgdGV4dDogc3RyaW5nID0gXCJcIlxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgICAgICAgdGhpcy5pc1BvaW50ZXJCbG9ja2VyID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9mb2N1c2VkQ29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIG9uQmx1cigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9pc0ZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSAwO1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9ibGlua1RpbWVvdXQpO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcblxyXG4gICAgICAgIHRoaXMub25CbHVyT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2hvc3QudW5SZWdpc3RlckNsaXBib2FyZEV2ZW50cygpO1xyXG4gICAgICAgIGlmICh0aGlzLl9vbkNsaXBib2FyZE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hvc3Qub25DbGlwYm9hcmRPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9vbkNsaXBib2FyZE9ic2VydmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2NlbmUgPSB0aGlzLl9ob3N0LmdldFNjZW5lKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX29uUG9pbnRlckRibFRhcE9ic2VydmVyICYmIHNjZW5lKSB7XHJcbiAgICAgICAgICAgIHNjZW5lLm9uUG9pbnRlck9ic2VydmFibGUucmVtb3ZlKHRoaXMuX29uUG9pbnRlckRibFRhcE9ic2VydmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIG9uRm9jdXMoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9pc0ZvY3VzZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2JsaW5rSXNFdmVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fY3Vyc29yT2Zmc2V0ID0gMDtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG5cclxuICAgICAgICB0aGlzLm9uRm9jdXNPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzIGFzIENvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fZm9jdXNlZEJ5ID09PSBcInRvdWNoXCIgJiYgIXRoaXMuZGlzYWJsZU1vYmlsZVByb21wdCkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHByb21wdCh0aGlzLnByb21wdE1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9ob3N0LmZvY3VzZWRDb250cm9sID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faG9zdC5yZWdpc3RlckNsaXBib2FyZEV2ZW50cygpO1xyXG5cclxuICAgICAgICB0aGlzLl9vbkNsaXBib2FyZE9ic2VydmVyID0gdGhpcy5faG9zdC5vbkNsaXBib2FyZE9ic2VydmFibGUuYWRkKChjbGlwYm9hcmRJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHByb2Nlc3MgY2xpcGJvYXJkIGV2ZW50LCBjYW4gYmUgY29uZmlndXJlZC5cclxuICAgICAgICAgICAgc3dpdGNoIChjbGlwYm9hcmRJbmZvLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQ2xpcGJvYXJkRXZlbnRUeXBlcy5DT1BZOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQ29weVRleHQoY2xpcGJvYXJkSW5mby5ldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblRleHRDb3B5T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIENsaXBib2FyZEV2ZW50VHlwZXMuQ1VUOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQ3V0VGV4dChjbGlwYm9hcmRJbmZvLmV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uVGV4dEN1dE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDbGlwYm9hcmRFdmVudFR5cGVzLlBBU1RFOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uUGFzdGVUZXh0KGNsaXBib2FyZEluZm8uZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25UZXh0UGFzdGVPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5faG9zdC5nZXRTY2VuZSgpO1xyXG4gICAgICAgIGlmIChzY2VuZSkge1xyXG4gICAgICAgICAgICAvL3JlZ2lzdGVyIHRoZSBwb2ludGVyIGRvdWJsZSB0YXAgZXZlbnRcclxuICAgICAgICAgICAgdGhpcy5fb25Qb2ludGVyRGJsVGFwT2JzZXJ2ZXIgPSBzY2VuZS5vblBvaW50ZXJPYnNlcnZhYmxlLmFkZCgocG9pbnRlckluZm8pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNGb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHBvaW50ZXJJbmZvLnR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJET1VCTEVUQVApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzRGJsQ2xpY2socG9pbnRlckluZm8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vbkZvY3VzU2VsZWN0QWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdEFsbFRleHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIklucHV0VGV4dFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gY2FsbGVkIHRvIGdldCB0aGUgbGlzdCBvZiBjb250cm9scyB0aGF0IHNob3VsZCBub3Qgc3RlYWwgdGhlIGZvY3VzIGZyb20gdGhpcyBjb250cm9sXHJcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBvZiBjb250cm9sc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUga2VlcHNGb2N1c1dpdGgoKTogTnVsbGFibGU8Q29udHJvbFtdPiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWRWaXJ0dWFsS2V5Ym9hcmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbdGhpcy5fY29ubmVjdGVkVmlydHVhbEtleWJvYXJkXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcHJvY2Vzc0tleShrZXlDb2RlOiBudW1iZXIsIGtleT86IHN0cmluZywgZXZ0PzogSUtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vcmV0dXJuIGlmIGNsaXBib2FyZCBldmVudCBrZXlzIChpLmUgLWN0ci9jbWQgKyBjLHYseClcclxuICAgICAgICBpZiAoZXZ0ICYmIChldnQuY3RybEtleSB8fCBldnQubWV0YUtleSkgJiYgKGtleUNvZGUgPT09IDY3IHx8IGtleUNvZGUgPT09IDg2IHx8IGtleUNvZGUgPT09IDg4KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3NlbGVjdCBhbGxcclxuICAgICAgICBpZiAoZXZ0ICYmIChldnQuY3RybEtleSB8fCBldnQubWV0YUtleSkgJiYga2V5Q29kZSA9PT0gNjUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0QWxsVGV4dCgpO1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTcGVjaWZpYyBjYXNlc1xyXG4gICAgICAgIHN3aXRjaCAoa2V5Q29kZSkge1xyXG4gICAgICAgICAgICBjYXNlIDMyOiAvL1NQQUNFXHJcbiAgICAgICAgICAgICAgICBrZXkgPSBcIiBcIjsgLy9pZTExIGtleSBmb3Igc3BhY2UgaXMgXCJTcGFjZWJhclwiXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOTE6IC8vU0xBU0hcclxuICAgICAgICAgICAgICAgIGlmIChldnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDg6IC8vIEJBQ0tTUEFDRVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RleHRXcmFwcGVyLnRleHQgJiYgdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZGVsZXRlIHRoZSBoaWdobGlnaHRlZCB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dFdyYXBwZXIucmVtb3ZlUGFydCh0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4LCB0aGlzLl9lbmRIaWdobGlnaHRJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRIYXNDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yT2Zmc2V0ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIC0gdGhpcy5fc3RhcnRIaWdobGlnaHRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZSBzaW5nbGUgY2hhcmFjdGVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnNvck9mZnNldCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSB0aGlzLl90ZXh0V3JhcHBlci5zdWJzdHIoMCwgdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlUG9zaXRpb24gPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9jdXJzb3JPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWxldGVQb3NpdGlvbiA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRXcmFwcGVyLnJlbW92ZVBhcnQoZGVsZXRlUG9zaXRpb24gLSAxLCBkZWxldGVQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0SGFzQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBjYXNlIDQ2OiAvLyBERUxFVEVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dFdyYXBwZXIucmVtb3ZlUGFydCh0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4LCB0aGlzLl9lbmRIaWdobGlnaHRJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dEhhc0NoYW5nZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yT2Zmc2V0ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIC0gdGhpcy5fc3RhcnRIaWdobGlnaHRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGV4dFdyYXBwZXIudGV4dCAmJiB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggPiAwICYmIHRoaXMuX2N1cnNvck9mZnNldCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWxldGVQb3NpdGlvbiA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2N1cnNvck9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0V3JhcHBlci5yZW1vdmVQYXJ0KGRlbGV0ZVBvc2l0aW9uLCBkZWxldGVQb3NpdGlvbiArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRIYXNDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yT2Zmc2V0LS07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2UgMTM6IC8vIFJFVFVSTlxyXG4gICAgICAgICAgICAgICAgdGhpcy5faG9zdC5mb2N1c2VkQ29udHJvbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2UgMzU6IC8vIEVORFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JsaW5rSXNFdmVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBjYXNlIDM2OiAvLyBIT01FXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1RleHRIaWdobGlnaHRPbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSAzNzogLy8gTEVGVFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yT2Zmc2V0Kys7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3Vyc29yT2Zmc2V0ID4gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yT2Zmc2V0ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChldnQgJiYgZXZ0LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBjdXJzb3JcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNoaWZ0ICsgY3RybC9jbWQgKyA8LVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldnQuY3RybEtleSB8fCBldnQubWV0YUtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggPT09IHRoaXMuX2N1cnNvck9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5kSGlnaGxpZ2h0SW5kZXggPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9jdXJzb3JPZmZzZXQgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0SW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmRleCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vc3RvcmUgdGhlIHN0YXJ0aW5nIHBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmRleCA9IHRoaXMuX2N1cnNvck9mZnNldCA+PSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggPyB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggOiB0aGlzLl9jdXJzb3JPZmZzZXQgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIHRleHQgaXMgYWxyZWFkeSBoaWdobGlnaHRlZFxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2N1cnNvckluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmRleCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSB0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4ID09PSAwID8gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIDogdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIC0gdGhpcy5fc3RhcnRIaWdobGlnaHRJbmRleCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vc2V0IHRoZSBoaWdobGlnaHQgaW5kZXhlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJzb3JJbmRleCA8IHRoaXMuX2N1cnNvck9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmRIaWdobGlnaHRJbmRleCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2N1cnNvckluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIC0gdGhpcy5fY3Vyc29yT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY3Vyc29ySW5kZXggPiB0aGlzLl9jdXJzb3JPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5kSGlnaGxpZ2h0SW5kZXggPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9jdXJzb3JPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0SW5kZXggPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9jdXJzb3JJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChldnQgJiYgKGV2dC5jdHJsS2V5IHx8IGV2dC5tZXRhS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvck9mZnNldCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2JsaW5rSXNFdmVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSAzOTogLy8gUklHSFRcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvck9mZnNldC0tO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnNvck9mZnNldCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGV2dCAmJiBldnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgY3Vyc29yXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAvL3NoaWZ0ICsgY3RybC9jbWQgKyAtPlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldnQuY3RybEtleSB8fCBldnQubWV0YUtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJzb3JPZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0SW5kZXggPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9jdXJzb3JPZmZzZXQgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVGV4dEhpZ2hsaWdodE9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5kZXggPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1RleHRIaWdobGlnaHRPbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZGV4ID0gdGhpcy5fY3Vyc29yT2Zmc2V0IDw9IDAgPyAwIDogdGhpcy5fY3Vyc29yT2Zmc2V0ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0ZXh0IGlzIGFscmVhZHkgaGlnaGxpZ2h0ZWRcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9jdXJzb3JJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5kZXggPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggPT09IHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4ID8gMCA6IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zZXQgdGhlIGhpZ2hsaWdodCBpbmRleGVzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnNvckluZGV4IDwgdGhpcy5fY3Vyc29yT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIC0gdGhpcy5fY3Vyc29ySW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0SW5kZXggPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9jdXJzb3JPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jdXJzb3JJbmRleCA+IHRoaXMuX2N1cnNvck9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmRIaWdobGlnaHRJbmRleCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2N1cnNvck9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRIaWdobGlnaHRJbmRleCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2N1cnNvckluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RleHRIaWdobGlnaHRPbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvck9mZnNldCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY3RyICsgLT5cclxuICAgICAgICAgICAgICAgIGlmIChldnQgJiYgKGV2dC5jdHJsS2V5IHx8IGV2dC5tZXRhS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvck9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1RleHRIaWdobGlnaHRPbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXlDb2RlID09PSAzMikge1xyXG4gICAgICAgICAgICBrZXkgPSBldnQ/LmtleSA/PyBcIiBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZGVhZEtleSA9IGtleSA9PT0gXCJEZWFkXCI7XHJcbiAgICAgICAgLy8gUHJpbnRhYmxlIGNoYXJhY3RlcnNcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGtleSAmJlxyXG4gICAgICAgICAgICAoa2V5Q29kZSA9PT0gLTEgfHwgLy8gRGlyZWN0IGFjY2Vzc1xyXG4gICAgICAgICAgICAgICAga2V5Q29kZSA9PT0gMzIgfHwgLy8gU3BhY2VcclxuICAgICAgICAgICAgICAgIGtleUNvZGUgPT09IDM0IHx8IC8vIFwiICAgIGFkZCBzdXBwb3J0IGZvciBzaW5nbGUgYW5kIGRvdWJsZSBxdW90ZXNcclxuICAgICAgICAgICAgICAgIGtleUNvZGUgPT09IDM5IHx8IC8vICdcclxuICAgICAgICAgICAgICAgIChrZXlDb2RlID4gNDcgJiYga2V5Q29kZSA8IDY0KSB8fCAvLyBOdW1iZXJzXHJcbiAgICAgICAgICAgICAgICAoa2V5Q29kZSA+IDY0ICYmIGtleUNvZGUgPCA5MSkgfHwgLy8gTGV0dGVyc1xyXG4gICAgICAgICAgICAgICAgKGtleUNvZGUgPiAxNTkgJiYga2V5Q29kZSA8IDE5MykgfHwgLy8gU3BlY2lhbCBjaGFyYWN0ZXJzXHJcbiAgICAgICAgICAgICAgICAoa2V5Q29kZSA+IDIxOCAmJiBrZXlDb2RlIDwgMjIzKSB8fCAvLyBTcGVjaWFsIGNoYXJhY3RlcnNcclxuICAgICAgICAgICAgICAgIChrZXlDb2RlID4gOTUgJiYga2V5Q29kZSA8IDExMikpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIC8vIE51bXBhZFxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50S2V5ID0ga2V5O1xyXG4gICAgICAgICAgICB0aGlzLm9uQmVmb3JlS2V5QWRkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XHJcbiAgICAgICAgICAgIGtleSA9IHRoaXMuX2N1cnJlbnRLZXk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hZGRLZXkgJiYgIXRoaXMuX2RlYWRLZXkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dFdyYXBwZXIucmVtb3ZlUGFydCh0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4LCB0aGlzLl9lbmRIaWdobGlnaHRJbmRleCwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0SGFzQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvck9mZnNldCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtICh0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1RleHRIaWdobGlnaHRPbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JsaW5rSXNFdmVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY3Vyc29yT2Zmc2V0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0ICs9IHRoaXMuX2RlYWRLZXkgJiYgZXZ0Py5rZXkgPyBldnQua2V5IDoga2V5O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnNlcnRQb3NpdGlvbiA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2N1cnNvck9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0V3JhcHBlci5yZW1vdmVQYXJ0KGluc2VydFBvc2l0aW9uLCBpbnNlcnRQb3NpdGlvbiwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0SGFzQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfdXBkYXRlVmFsdWVGcm9tQ3Vyc29ySW5kZXgob2Zmc2V0OiBudW1iZXIpIHtcclxuICAgICAgICAvL3VwZGF0ZSB0aGUgY3Vyc29yXHJcbiAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2N1cnNvckluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmRleCA9IG9mZnNldDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY3Vyc29ySW5kZXggPCB0aGlzLl9jdXJzb3JPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIC0gdGhpcy5fY3Vyc29ySW5kZXg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIC0gdGhpcy5fY3Vyc29yT2Zmc2V0O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2N1cnNvckluZGV4ID4gdGhpcy5fY3Vyc29yT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmRIaWdobGlnaHRJbmRleCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2N1cnNvck9mZnNldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0SW5kZXggPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9jdXJzb3JJbmRleDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pc1RleHRIaWdobGlnaHRPbiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIHByb3RlY3RlZCBfcHJvY2Vzc0RibENsaWNrKGV2dDogUG9pbnRlckluZm8pIHtcclxuICAgICAgICAvL3ByZS1maW5kIHRoZSBzdGFydCBhbmQgZW5kIGluZGV4IG9mIHRoZSB3b3JkIHVuZGVyIGN1cnNvciwgc3BlZWRzIHVwIHRoZSByZW5kZXJpbmdcclxuICAgICAgICB0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoIC0gdGhpcy5fY3Vyc29yT2Zmc2V0O1xyXG4gICAgICAgIHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4ID0gdGhpcy5fc3RhcnRIaWdobGlnaHRJbmRleDtcclxuICAgICAgICBsZXQgbW92ZUxlZnQsIG1vdmVSaWdodDtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIG1vdmVSaWdodCA9IHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4IDwgdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoICYmIHRoaXMuX3RleHRXcmFwcGVyLmlzV29yZCh0aGlzLl9lbmRIaWdobGlnaHRJbmRleCkgPyArK3RoaXMuX2VuZEhpZ2hsaWdodEluZGV4IDogMDtcclxuICAgICAgICAgICAgbW92ZUxlZnQgPSB0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4ID4gMCAmJiB0aGlzLl90ZXh0V3JhcHBlci5pc1dvcmQodGhpcy5fc3RhcnRIaWdobGlnaHRJbmRleCAtIDEpID8gLS10aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4IDogMDtcclxuICAgICAgICB9IHdoaWxlIChtb3ZlTGVmdCB8fCBtb3ZlUmlnaHQpO1xyXG5cclxuICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGggLSB0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4O1xyXG5cclxuICAgICAgICB0aGlzLmlzVGV4dEhpZ2hsaWdodE9uID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9jbGlja2VkQ29vcmRpbmF0ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2N1cnNvckluZGV4ID0gLTE7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByb3RlY3RlZCBfc2VsZWN0QWxsVGV4dCgpIHtcclxuICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pc1RleHRIaWdobGlnaHRPbiA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0SW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuX2VuZEhpZ2hsaWdodEluZGV4ID0gdGhpcy5fdGV4dFdyYXBwZXIubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuX2N1cnNvck9mZnNldCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aDtcclxuICAgICAgICB0aGlzLl9jdXJzb3JJbmRleCA9IC0xO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHRoZSBrZXlib2FyZCBldmVudFxyXG4gICAgICogQHBhcmFtIGV2dCBEZWZpbmVzIHRoZSBLZXlib2FyZEV2ZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBwcm9jZXNzS2V5Ym9hcmQoZXZ0OiBJS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIC8vIHByb2Nlc3MgcHJlc3NlZCBrZXlcclxuICAgICAgICB0aGlzLnByb2Nlc3NLZXkoZXZ0LmtleUNvZGUsIGV2dC5rZXksIGV2dCk7XHJcblxyXG4gICAgICAgIHN1cGVyLnByb2Nlc3NLZXlib2FyZChldnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfb25Db3B5VGV4dChldjogQ2xpcGJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmlzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgLy93aGVuIHdyaXRlIHBlcm1pc3Npb24gdG8gY2xpcGJhb3JkIGRhdGEgaXMgZGVuaWVkXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZXYuY2xpcGJvYXJkRGF0YSAmJiBldi5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRoaXMuX2hpZ2hsaWdodGVkVGV4dCk7XHJcbiAgICAgICAgfSBjYXRjaCB7fSAvL3Bhc3NcclxuICAgICAgICB0aGlzLl9ob3N0LmNsaXBib2FyZERhdGEgPSB0aGlzLl9oaWdobGlnaHRlZFRleHQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX29uQ3V0VGV4dChldjogQ2xpcGJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2hpZ2hsaWdodGVkVGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3RleHRXcmFwcGVyLnJlbW92ZVBhcnQodGhpcy5fc3RhcnRIaWdobGlnaHRJbmRleCwgdGhpcy5fZW5kSGlnaGxpZ2h0SW5kZXgpO1xyXG4gICAgICAgIHRoaXMuX3RleHRIYXNDaGFuZ2VkKCk7XHJcbiAgICAgICAgdGhpcy5pc1RleHRIaWdobGlnaHRPbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2N1cnNvck9mZnNldCA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0SW5kZXg7XHJcbiAgICAgICAgLy93aGVuIHdyaXRlIHBlcm1pc3Npb24gdG8gY2xpcGJhb3JkIGRhdGEgaXMgZGVuaWVkXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZXYuY2xpcGJvYXJkRGF0YSAmJiBldi5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRoaXMuX2hpZ2hsaWdodGVkVGV4dCk7XHJcbiAgICAgICAgfSBjYXRjaCB7fSAvL3Bhc3NcclxuXHJcbiAgICAgICAgdGhpcy5faG9zdC5jbGlwYm9hcmREYXRhID0gdGhpcy5faGlnaGxpZ2h0ZWRUZXh0O1xyXG4gICAgICAgIHRoaXMuX2hpZ2hsaWdodGVkVGV4dCA9IFwiXCI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX29uUGFzdGVUZXh0KGV2OiBDbGlwYm9hcmRFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBkYXRhOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIGlmIChldi5jbGlwYm9hcmREYXRhICYmIGV2LmNsaXBib2FyZERhdGEudHlwZXMuaW5kZXhPZihcInRleHQvcGxhaW5cIikgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBldi5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vZ2V0IHRoZSBjYWNoZWQgZGF0YTsgcmV0dXJucyBibGFuayBzdHJpbmcgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5faG9zdC5jbGlwYm9hcmREYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbnNlcnRQb3NpdGlvbiA9IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAtIHRoaXMuX2N1cnNvck9mZnNldDtcclxuICAgICAgICB0aGlzLl90ZXh0V3JhcHBlci5yZW1vdmVQYXJ0KGluc2VydFBvc2l0aW9uLCBpbnNlcnRQb3NpdGlvbiwgZGF0YSk7XHJcbiAgICAgICAgdGhpcy5fdGV4dEhhc0NoYW5nZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2RyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYXBwbHlTdGF0ZXMoY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hhZG93Qmx1ciB8fCB0aGlzLnNoYWRvd09mZnNldFggfHwgdGhpcy5zaGFkb3dPZmZzZXRZKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Q29sb3IgPSB0aGlzLnNoYWRvd0NvbG9yO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSB0aGlzLnNoYWRvd0JsdXI7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IHRoaXMuc2hhZG93T2Zmc2V0WDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gdGhpcy5zaGFkb3dPZmZzZXRZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQmFja2dyb3VuZFxyXG4gICAgICAgIGlmICh0aGlzLl9pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZvY3VzZWRCYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX2lzRW5hYmxlZCA/IHRoaXMuX2ZvY3VzZWRCYWNrZ3JvdW5kIDogdGhpcy5fZGlzYWJsZWRDb2xvcjtcclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCwgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLl9pc0VuYWJsZWQgPyB0aGlzLl9iYWNrZ3JvdW5kIDogdGhpcy5fZGlzYWJsZWRDb2xvcjtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSAwO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSAwO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9mb250T2Zmc2V0IHx8IHRoaXMuX3dhc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZvbnRPZmZzZXQgPSBDb250cm9sLl9HZXRGb250T2Zmc2V0KGNvbnRleHQuZm9udCwgdGhpcy5faG9zdC5nZXRTY2VuZSgpPy5nZXRFbmdpbmUoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUZXh0XHJcbiAgICAgICAgY29uc3QgY2xpcFRleHRMZWZ0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX21hcmdpbi5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fdGVtcFBhcmVudE1lYXN1cmUud2lkdGgpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0ZXh0ID0gdGhpcy5fYmVmb3JlUmVuZGVyVGV4dCh0aGlzLl90ZXh0V3JhcHBlcik7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5faXNGb2N1c2VkICYmICF0aGlzLl90ZXh0V3JhcHBlci50ZXh0ICYmIHRoaXMuX3BsYWNlaG9sZGVyVGV4dCkge1xyXG4gICAgICAgICAgICB0ZXh0ID0gbmV3IFRleHRXcmFwcGVyKCk7XHJcbiAgICAgICAgICAgIHRleHQudGV4dCA9IHRoaXMuX3BsYWNlaG9sZGVyVGV4dDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wbGFjZWhvbGRlckNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX3BsYWNlaG9sZGVyQ29sb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3RleHRXaWR0aCA9IGNvbnRleHQubWVhc3VyZVRleHQodGV4dC50ZXh0KS53aWR0aDtcclxuICAgICAgICBjb25zdCBtYXJnaW5XaWR0aCA9IHRoaXMuX21hcmdpbi5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fdGVtcFBhcmVudE1lYXN1cmUud2lkdGgpICogMjtcclxuICAgICAgICBpZiAodGhpcy5fYXV0b1N0cmV0Y2hXaWR0aCkge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gTWF0aC5taW4odGhpcy5fbWF4V2lkdGguZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX3RlbXBQYXJlbnRNZWFzdXJlLndpZHRoKSwgdGhpcy5fdGV4dFdpZHRoICsgbWFyZ2luV2lkdGgpICsgXCJweFwiO1xyXG4gICAgICAgICAgICB0aGlzLl9hdXRvU3RyZXRjaFdpZHRoID0gdHJ1ZTsgLy8gc2V0dGluZyB0aGUgd2lkdGggd2lsbCBoYXZlIHJlc2V0IF9hdXRvU3RyZXRjaFdpZHRoIHRvIGZhbHNlIVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgcm9vdFkgPSB0aGlzLl9mb250T2Zmc2V0LmFzY2VudCArICh0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLSB0aGlzLl9mb250T2Zmc2V0LmhlaWdodCkgLyAyO1xyXG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gdGhpcy5fd2lkdGguZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX3RlbXBQYXJlbnRNZWFzdXJlLndpZHRoKSAtIG1hcmdpbldpZHRoO1xyXG5cclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQucmVjdChjbGlwVGV4dExlZnQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCArICh0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLSB0aGlzLl9mb250T2Zmc2V0LmhlaWdodCkgLyAyLCBhdmFpbGFibGVXaWR0aCArIDIsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5jbGlwKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc0ZvY3VzZWQgJiYgdGhpcy5fdGV4dFdpZHRoID4gYXZhaWxhYmxlV2lkdGgpIHtcclxuICAgICAgICAgICAgY29uc3QgdGV4dExlZnQgPSBjbGlwVGV4dExlZnQgLSB0aGlzLl90ZXh0V2lkdGggKyBhdmFpbGFibGVXaWR0aDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9zY3JvbGxMZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ID0gdGV4dExlZnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ID0gY2xpcFRleHRMZWZ0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3V0bGluZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dCh0ZXh0LnRleHQsIHRoaXMuX3Njcm9sbExlZnQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCArIHJvb3RZKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dC50ZXh0LCB0aGlzLl9zY3JvbGxMZWZ0LCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyByb290WSk7XHJcblxyXG4gICAgICAgIC8vIEN1cnNvclxyXG4gICAgICAgIGlmICh0aGlzLl9pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgLy8gTmVlZCB0byBtb3ZlIGN1cnNvclxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY2xpY2tlZENvb3JkaW5hdGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0UG9zaXRpb24gPSB0aGlzLl9zY3JvbGxMZWZ0ICsgdGhpcy5fdGV4dFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWJzb2x1dGVDdXJzb3JQb3NpdGlvbiA9IHJpZ2h0UG9zaXRpb24gLSB0aGlzLl9jbGlja2VkQ29vcmRpbmF0ZTtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50U2l6ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IHByZXZpb3VzRGlzdCA9IDA7XHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnNvck9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0Rpc3QgPSBNYXRoLmFicyhhYnNvbHV0ZUN1cnNvclBvc2l0aW9uIC0gY3VycmVudFNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JPZmZzZXQrKztcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2l6ZSA9IGNvbnRleHQubWVhc3VyZVRleHQodGV4dC5zdWJzdHIodGV4dC5sZW5ndGggLSB0aGlzLl9jdXJzb3JPZmZzZXQsIHRoaXMuX2N1cnNvck9mZnNldCkpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoY3VycmVudFNpemUgPCBhYnNvbHV0ZUN1cnNvclBvc2l0aW9uICYmIHRleHQubGVuZ3RoID49IHRoaXMuX2N1cnNvck9mZnNldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRmluZCBjbG9zZXN0IG1vdmVcclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhhYnNvbHV0ZUN1cnNvclBvc2l0aW9uIC0gY3VycmVudFNpemUpID4gcHJldmlvdXNEaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yT2Zmc2V0LS07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsaWNrZWRDb29yZGluYXRlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmVuZGVyIGN1cnNvclxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2JsaW5rSXNFdmVuKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJzb3JPZmZzZXRUZXh0ID0gdGV4dC5zdWJzdHIodGV4dC5sZW5ndGggLSB0aGlzLl9jdXJzb3JPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3Vyc29yT2Zmc2V0V2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KGN1cnNvck9mZnNldFRleHQpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnNvckxlZnQgPSB0aGlzLl9zY3JvbGxMZWZ0ICsgdGhpcy5fdGV4dFdpZHRoIC0gY3Vyc29yT2Zmc2V0V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnNvckxlZnQgPCBjbGlwVGV4dExlZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ICs9IGNsaXBUZXh0TGVmdCAtIGN1cnNvckxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yTGVmdCA9IGNsaXBUZXh0TGVmdDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJzb3JMZWZ0ID4gY2xpcFRleHRMZWZ0ICsgYXZhaWxhYmxlV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ICs9IGNsaXBUZXh0TGVmdCArIGF2YWlsYWJsZVdpZHRoIC0gY3Vyc29yTGVmdDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3JMZWZ0ID0gY2xpcFRleHRMZWZ0ICsgYXZhaWxhYmxlV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1RleHRIaWdobGlnaHRPbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QoY3Vyc29yTGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgKHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAtIHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0KSAvIDIsIDIsIHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2JsaW5rVGltZW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2JsaW5rVGltZW91dCA9IDxhbnk+c2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9ICF0aGlzLl9ibGlua0lzRXZlbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgIH0sIDUwMCk7XHJcblxyXG4gICAgICAgICAgICAvL3Nob3cgdGhlIGhpZ2hsaWdodGVkIHRleHRcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9ibGlua1RpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGlnaGxpZ2h0Q3Vyc29yT2Zmc2V0V2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQuc3Vic3RyaW5nKHRoaXMuX3N0YXJ0SGlnaGxpZ2h0SW5kZXgpKS53aWR0aDtcclxuICAgICAgICAgICAgICAgIGxldCBoaWdobGlnaHRDdXJzb3JMZWZ0ID0gdGhpcy5fc2Nyb2xsTGVmdCArIHRoaXMuX3RleHRXaWR0aCAtIGhpZ2hsaWdodEN1cnNvck9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0ZWRUZXh0ID0gdGV4dC5zdWJzdHJpbmcodGhpcy5fc3RhcnRIaWdobGlnaHRJbmRleCwgdGhpcy5fZW5kSGlnaGxpZ2h0SW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0LnN1YnN0cmluZyh0aGlzLl9zdGFydEhpZ2hsaWdodEluZGV4LCB0aGlzLl9lbmRIaWdobGlnaHRJbmRleCkpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodEN1cnNvckxlZnQgPCBjbGlwVGV4dExlZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHdpZHRoIC0gKGNsaXBUZXh0TGVmdCAtIGhpZ2hsaWdodEN1cnNvckxlZnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghd2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB1c2luZyBsZWZ0IGFycm93IG9uIHRleHQubGVuZ3RoID4gYXZhaWxhYmxlV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzc2lnbnMgdGhlIHdpZHRoIG9mIHRoZSBmaXJzdCBsZXR0ZXIgYWZ0ZXIgY2xpcFRleHRMZWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0LmNoYXJBdCh0ZXh0Lmxlbmd0aCAtIHRoaXMuX2N1cnNvck9mZnNldCkpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRDdXJzb3JMZWZ0ID0gY2xpcFRleHRMZWZ0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9mb3IgdHJhbnNwYXJhbmN5XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gdGhpcy5faGlnaGxpZ2hlck9wYWNpdHk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX3RleHRIaWdobGlnaHRDb2xvcjtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QoaGlnaGxpZ2h0Q3Vyc29yTGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgKHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAtIHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0KSAvIDIsIHdpZHRoLCB0aGlzLl9mb250T2Zmc2V0LmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gMS4wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICAvLyBCb3JkZXJcclxuICAgICAgICBpZiAodGhpcy5fdGhpY2tuZXNzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzZWRDb2xvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmZvY3VzZWRDb2xvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gdGhpcy5fdGhpY2tuZXNzO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2VSZWN0KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX3RoaWNrbmVzcyAvIDIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl90aGlja25lc3MgLyAyLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLSB0aGlzLl90aGlja25lc3MsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLSB0aGlzLl90aGlja25lc3NcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfb25Qb2ludGVyRG93bih0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgcGk6IFBvaW50ZXJJbmZvQmFzZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghc3VwZXIuX29uUG9pbnRlckRvd24odGFyZ2V0LCBjb29yZGluYXRlcywgcG9pbnRlcklkLCBidXR0b25JbmRleCwgcGkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzUmVhZE9ubHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jbGlja2VkQ29vcmRpbmF0ZSA9IGNvb3JkaW5hdGVzLng7XHJcbiAgICAgICAgdGhpcy5pc1RleHRIaWdobGlnaHRPbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2hpZ2hsaWdodGVkVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5fY3Vyc29ySW5kZXggPSAtMTtcclxuICAgICAgICB0aGlzLl9pc1BvaW50ZXJEb3duID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9ob3N0Ll9jYXB0dXJpbmdDb250cm9sW3BvaW50ZXJJZF0gPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2ZvY3VzZWRCeSA9IChwaS5ldmVudCBhcyBJUG9pbnRlckV2ZW50KS5wb2ludGVyVHlwZTtcclxuICAgICAgICBpZiAodGhpcy5faG9zdC5mb2N1c2VkQ29udHJvbCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAvLyBNb3ZlIGN1cnNvclxyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fYmxpbmtUaW1lb3V0KTtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faG9zdC5mb2N1c2VkQ29udHJvbCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJNb3ZlKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBwaTogUG9pbnRlckluZm9CYXNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hvc3QuZm9jdXNlZENvbnRyb2wgPT09IHRoaXMgJiYgdGhpcy5faXNQb2ludGVyRG93biAmJiAhdGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrZWRDb29yZGluYXRlID0gY29vcmRpbmF0ZXMueDtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmFsdWVGcm9tQ3Vyc29ySW5kZXgodGhpcy5fY3Vyc29yT2Zmc2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIuX29uUG9pbnRlck1vdmUodGFyZ2V0LCBjb29yZGluYXRlcywgcG9pbnRlcklkLCBwaSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJVcCh0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgbm90aWZ5Q2xpY2s6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9pc1BvaW50ZXJEb3duID0gZmFsc2U7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2hvc3QuX2NhcHR1cmluZ0NvbnRyb2xbcG9pbnRlcklkXTtcclxuICAgICAgICBzdXBlci5fb25Qb2ludGVyVXAodGFyZ2V0LCBjb29yZGluYXRlcywgcG9pbnRlcklkLCBidXR0b25JbmRleCwgbm90aWZ5Q2xpY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfYmVmb3JlUmVuZGVyVGV4dCh0ZXh0V3JhcHBlcjogVGV4dFdyYXBwZXIpOiBUZXh0V3JhcHBlciB7XHJcbiAgICAgICAgcmV0dXJuIHRleHRXcmFwcGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cclxuICAgIHByaXZhdGUgc2V0IGlzVGV4dEhpZ2hsaWdodE9uKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9uVGV4dEhpZ2hsaWdodE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9pc1RleHRIaWdobGlnaHRPbiA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cclxuICAgIHByaXZhdGUgZ2V0IGlzVGV4dEhpZ2hsaWdodE9uKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1RleHRIaWdobGlnaHRPbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpIHtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XHJcblxyXG4gICAgICAgIHRoaXMub25CbHVyT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMub25Gb2N1c09ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uVGV4dENoYW5nZWRPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vblRleHRDb3B5T2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMub25UZXh0Q3V0T2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMub25UZXh0UGFzdGVPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vblRleHRIaWdobGlnaHRPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vbktleWJvYXJkRXZlbnRQcm9jZXNzZWRPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICB9XHJcbn1cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLklucHV0VGV4dFwiLCBJbnB1dFRleHQpO1xyXG4iLCJpbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgdHlwZSB7IFZlY3RvcjIgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5cclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgVmFsdWVBbmRVbml0IH0gZnJvbSBcIi4uL3ZhbHVlQW5kVW5pdFwiO1xyXG5pbXBvcnQgdHlwZSB7IFZpcnR1YWxLZXlib2FyZCB9IGZyb20gXCIuL3ZpcnR1YWxLZXlib2FyZFwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHR5cGUgeyBNZWFzdXJlIH0gZnJvbSBcIi4uL21lYXN1cmVcIjtcclxuaW1wb3J0IHsgSW5wdXRUZXh0IH0gZnJvbSBcIi4vaW5wdXRUZXh0XCI7XHJcbmltcG9ydCB0eXBlIHsgSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQgfSBmcm9tIFwiY29yZS9FbmdpbmVzL0lDYW52YXNcIjtcclxuaW1wb3J0IHR5cGUgeyBQb2ludGVySW5mbywgUG9pbnRlckluZm9CYXNlIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHR5cGUgeyBJS2V5Ym9hcmRFdmVudCB9IGZyb20gXCJjb3JlL0V2ZW50cy9kZXZpY2VJbnB1dEV2ZW50c1wiO1xyXG5cclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBjcmVhdGUgaW5wdXQgdGV4dCBjb250cm9sXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0QXJlYSBleHRlbmRzIElucHV0VGV4dCB7XHJcbiAgICBwcml2YXRlIF90ZXh0SG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgIHByaXZhdGUgX3RleHRWZXJ0aWNhbEFsaWdubWVudCA9IENvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX1RPUDtcclxuXHJcbiAgICBwcml2YXRlIF9wcmV2VGV4dDogc3RyaW5nID0gdGhpcy50ZXh0O1xyXG5cclxuICAgIHByaXZhdGUgX2xpbmVzOiBhbnlbXTtcclxuICAgIHByaXZhdGUgX2xpbmVTcGFjaW5nOiBWYWx1ZUFuZFVuaXQgPSBuZXcgVmFsdWVBbmRVbml0KDApO1xyXG4gICAgcHJpdmF0ZSBfbWF4SGVpZ2h0ID0gbmV3IFZhbHVlQW5kVW5pdCgxLCBWYWx1ZUFuZFVuaXQuVU5JVE1PREVfUEVSQ0VOVEFHRSwgZmFsc2UpO1xyXG5cclxuICAgIHByaXZhdGUgX2NsaXBUZXh0VG9wOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9jbGlwVGV4dExlZnQ6IG51bWJlcjtcclxuXHJcbiAgICBwcml2YXRlIF9jdXJzb3JJbmZvOiB7IGdsb2JhbFN0YXJ0SW5kZXg6IG51bWJlcjsgZ2xvYmFsRW5kSW5kZXg6IG51bWJlcjsgcmVsYXRpdmVTdGFydEluZGV4OiBudW1iZXI7IHJlbGF0aXZlRW5kSW5kZXg6IG51bWJlcjsgY3VycmVudExpbmVJbmRleDogbnVtYmVyIH07XHJcbiAgICBwcml2YXRlIF9oaWdobGlnaHRDdXJzb3JJbmZvOiB7IGluaXRpYWxTdGFydEluZGV4OiBudW1iZXI7IGluaXRpYWxSZWxhdGl2ZVN0YXJ0SW5kZXg6IG51bWJlcjsgaW5pdGlhbExpbmVJbmRleDogbnVtYmVyIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgYWZ0ZXIgdGhlIHRleHQgd2FzIGJyb2tlbiB1cCBpbnRvIGxpbmVzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkxpbmVzUmVhZHlPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SW5wdXRUZXh0QXJlYT4oKTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2Nvbm5lY3RlZFZpcnR1YWxLZXlib2FyZDogTnVsbGFibGU8VmlydHVhbEtleWJvYXJkPjtcclxuICAgIHByaXZhdGUgX2NvbnRleHRGb3JCcmVha0xpbmVzOiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dDtcclxuICAgIHByaXZhdGUgX2NsaWNrZWRDb29yZGluYXRlWDogTnVsbGFibGU8bnVtYmVyPjtcclxuICAgIHByaXZhdGUgX2NsaWNrZWRDb29yZGluYXRlWTogTnVsbGFibGU8bnVtYmVyPjtcclxuXHJcbiAgICBwcml2YXRlIF9hdmFpbGFibGVXaWR0aDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfYXZhaWxhYmxlSGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBfc2Nyb2xsVG9wOiBOdWxsYWJsZTxudW1iZXI+O1xyXG5cclxuICAgIHByaXZhdGUgX2F1dG9TdHJldGNoSGVpZ2h0OiBib29sZWFuO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGNvbnRyb2wgY2FuIGF1dG8gc3RyZXRjaCBpdHMgaGVpZ2h0IHRvIGFkYXB0IHRvIHRoZSB0ZXh0ICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYXV0b1N0cmV0Y2hIZWlnaHQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9TdHJldGNoSGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYXV0b1N0cmV0Y2hIZWlnaHQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fYXV0b1N0cmV0Y2hIZWlnaHQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2F1dG9TdHJldGNoSGVpZ2h0ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2V0IGhlaWdodCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5maXhlZFJhdGlvTWFzdGVySXNXaWR0aCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faGVpZ2h0LnRvU3RyaW5nKHRoaXMuX2hvc3QpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faGVpZ2h0LmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9hdXRvU3RyZXRjaEhlaWdodCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBtYXhIZWlnaHQoKTogc3RyaW5nIHwgbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWF4SGVpZ2h0LnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIHRoZSBtYXhpbXVtIHdpZHRoIGFsbG93ZWQgYnkgdGhlIGNvbnRyb2wgaW4gcGl4ZWxzICovXHJcbiAgICBwdWJsaWMgZ2V0IG1heEhlaWdodEluUGl4ZWxzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heEhlaWdodC5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbWF4SGVpZ2h0KHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fbWF4SGVpZ2h0LnRvU3RyaW5nKHRoaXMuX2hvc3QpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fbWF4SGVpZ2h0LmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBJbnB1dFRleHRBcmVhXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqIEBwYXJhbSB0ZXh0IGRlZmluZXMgdGhlIHRleHQgb2YgdGhlIGNvbnRyb2xcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcsXHJcbiAgICAgICAgdGV4dDogc3RyaW5nID0gXCJcIlxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcblxyXG4gICAgICAgIHRoaXMuaXNQb2ludGVyQmxvY2tlciA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMub25MaW5lc1JlYWR5T2JzZXJ2YWJsZS5hZGQoKCkgPT4gdGhpcy5fdXBkYXRlQ3Vyc29yUG9zaXRpb24oKSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8gPSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxTdGFydEluZGV4OiAtMSxcclxuICAgICAgICAgICAgaW5pdGlhbFJlbGF0aXZlU3RhcnRJbmRleDogLTEsXHJcbiAgICAgICAgICAgIGluaXRpYWxMaW5lSW5kZXg6IC0xLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuX2N1cnNvckluZm8gPSB7XHJcbiAgICAgICAgICAgIGdsb2JhbFN0YXJ0SW5kZXg6IDAsXHJcbiAgICAgICAgICAgIGdsb2JhbEVuZEluZGV4OiAwLFxyXG4gICAgICAgICAgICByZWxhdGl2ZUVuZEluZGV4OiAwLFxyXG4gICAgICAgICAgICByZWxhdGl2ZVN0YXJ0SW5kZXg6IDAsXHJcbiAgICAgICAgICAgIGN1cnJlbnRMaW5lSW5kZXg6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiSW5wdXRUZXh0QXJlYVwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB0aGUga2V5Ym9hcmQgZXZlbnRcclxuICAgICAqIEBwYXJhbSBldnQgRGVmaW5lcyB0aGUgS2V5Ym9hcmRFdmVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgcHJvY2Vzc0tleWJvYXJkKGV2dDogSUtleWJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByb2Nlc3MgcHJlc3NlZCBrZXlcclxuICAgICAgICB0aGlzLmFsdGVybmF0aXZlUHJvY2Vzc0tleShldnQuY29kZSwgZXZ0LmtleSwgZXZ0KTtcclxuXHJcbiAgICAgICAgdGhpcy5vbktleWJvYXJkRXZlbnRQcm9jZXNzZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhldnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgbGFzdCBrZXlib2FyZCBpbnB1dFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjb2RlIFRoZSBhc2NpaSBpbnB1dCBudW1iZXJcclxuICAgICAqIEBwYXJhbSBrZXkgVGhlIGtleSBzdHJpbmcgcmVwcmVzZW50YXRpb25cclxuICAgICAqIEBwYXJhbSBldnQgVGhlIGtleWJvYXJkIGV2ZW50IGVtaXRzIHdpdGggaW5wdXRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWx0ZXJuYXRpdmVQcm9jZXNzS2V5KGNvZGU6IHN0cmluZywga2V5Pzogc3RyaW5nLCBldnQ/OiBJS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIC8vcmV0dXJuIGlmIGNsaXBib2FyZCBldmVudCBrZXlzIChpLmUgLWN0ci9jbWQgKyBjLHYseClcclxuICAgICAgICBpZiAoZXZ0ICYmIChldnQuY3RybEtleSB8fCBldnQubWV0YUtleSkgJiYgKGtleSA9PT0gXCJjXCIgfHwga2V5ID09PSBcInZcIiB8fCBrZXkgPT09IFwieFwiKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTcGVjaWZpYyBjYXNlc1xyXG4gICAgICAgIHN3aXRjaCAoY29kZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiUGVyaW9kXCI6IC8vU0xBU0hcclxuICAgICAgICAgICAgICAgIGlmIChldnQgJiYgZXZ0LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIkJhY2tzcGFjZVwiOiAvLyBCQUNLU1BBQ0VcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gJiYgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4LS07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmV2VGV4dCA9IHRoaXMuX3RleHRXcmFwcGVyLnRleHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0V3JhcHBlci5yZW1vdmVQYXJ0KHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCwgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCA9IHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dEhhc0NoYW5nZWQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiRGVsZXRlXCI6IC8vIERFTEVURVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1RleHRIaWdobGlnaHRPbiAmJiB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldlRleHQgPSB0aGlzLl90ZXh0V3JhcHBlci50ZXh0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dFdyYXBwZXIucmVtb3ZlUGFydCh0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXgsIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2JsaW5rSXNFdmVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1RleHRIaWdobGlnaHRPbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3RleHRIYXNDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIk51bXBhZEVudGVyXCI6IC8vIE5VTVBBRCBFTlRFUlxyXG4gICAgICAgICAgICBjYXNlIFwiRW50ZXJcIjogLy8gUkVUVVJOXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmV2VGV4dCA9IHRoaXMuX3RleHRXcmFwcGVyLnRleHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0V3JhcHBlci5yZW1vdmVQYXJ0KHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCwgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCwgXCJcXG5cIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXgrKztcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dEhhc0NoYW5nZWQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSBcIkVuZFwiOiAvLyBFTkRcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA9IHRoaXMudGV4dC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2UgXCJIb21lXCI6IC8vIEhPTUVcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjogLy8gTEVGVFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0ICYmIGV2dC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNoaWZ0ICsgY3RybC9jbWQgKyA8LVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldnQuY3RybEtleSB8fCBldnQubWV0YUtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHbyB0byBsaW5lJ3Mgc3RhcnQgYnkgc3Vic3RyYWN0IHRoZSByZWxhdGl2ZVN0YXJ0SW5kZXggdG8gdGhlIGdsb2JhbFN0YXJ0SW5kZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4IC09IHRoaXMuX2N1cnNvckluZm8ucmVsYXRpdmVTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4ID0gdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsU3RhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgdGhlIHN0YXJ0aW5nIHBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1RleHRIaWdobGlnaHRPbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxMaW5lSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbFN0YXJ0SW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbFJlbGF0aXZlU3RhcnRJbmRleCA9IHRoaXMuX2N1cnNvckluZm8ucmVsYXRpdmVTdGFydEluZGV4O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCA9IHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4LS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCA+IHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbFN0YXJ0SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXgtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleC0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JsaW5rSXNFdmVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCA9IHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZ0ICYmIChldnQuY3RybEtleSB8fCBldnQubWV0YUtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjdHIgKyA8LVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCAtPSB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlU3RhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleC0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgY3Vyc29yXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjogLy8gUklHSFRcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGV2dCAmJiBldnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzaGlmdCArIGN0cmwvY21kICsgLT5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmN0cmxLZXkgfHwgZXZ0Lm1ldGFLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmlnaHREZWx0YSA9IHRoaXMuX2xpbmVzW3RoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleF0udGV4dC5sZW5ndGggLSB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlRW5kSW5kZXggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4ICs9IHJpZ2h0RGVsdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA9IHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbFN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIHRoZSBzdGFydGluZyBwb2ludFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsTGluZUluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxTdGFydEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxSZWxhdGl2ZVN0YXJ0SW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlU3RhcnRJbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggPCB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxTdGFydEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZ0ICYmIChldnQuY3RybEtleSB8fCBldnQubWV0YUtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2N0ciArIC0+XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmlnaHREZWx0YSA9IHRoaXMuX2xpbmVzW3RoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleF0udGV4dC5sZW5ndGggLSB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlRW5kSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4ICs9IHJpZ2h0RGVsdGE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXgrKztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGN1cnNvclxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNhc2UgXCJBcnJvd1VwXCI6IC8vIFVQXHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGN1cnNvclxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxMaW5lSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxTdGFydEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsUmVsYXRpdmVTdGFydEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZVN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0IGxpbmVcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TGluZSA9IHRoaXMuX2xpbmVzW3RoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBwZXJMaW5lID0gdGhpcy5fbGluZXNbdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4IC0gMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbGF0aXZlSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gfHwgdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4IDwgdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsTGluZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZVN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZUVuZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFRleHQgPSBjdXJyZW50TGluZS50ZXh0LnN1YnN0cigwLCByZWxhdGl2ZUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50V2lkdGggPSB0aGlzLl9jb250ZXh0Rm9yQnJlYWtMaW5lcy5tZWFzdXJlVGV4dChjdXJyZW50VGV4dCkud2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cHBlcldpZHRoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJldmlvdXNXaWR0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRtcEluZGV4IC09IHJlbGF0aXZlSW5kZXg7IC8vIFN0YXJ0IG9mIGN1cnJlbnQgbGluZVxyXG4gICAgICAgICAgICAgICAgICAgIHRtcEluZGV4IC09IHVwcGVyTGluZS50ZXh0Lmxlbmd0aCArIHVwcGVyTGluZS5saW5lRW5kaW5nLmxlbmd0aDsgLy8gU3RhcnQgb2YgdXBwZXIgbGluZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cHBlckxpbmVSZWxhdGl2ZUluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHVwcGVyV2lkdGggPCBjdXJyZW50V2lkdGggJiYgdXBwZXJMaW5lUmVsYXRpdmVJbmRleCA8IHVwcGVyTGluZS50ZXh0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cHBlckxpbmVSZWxhdGl2ZUluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzV2lkdGggPSBNYXRoLmFicyhjdXJyZW50V2lkdGggLSB1cHBlcldpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJXaWR0aCA9IHRoaXMuX2NvbnRleHRGb3JCcmVha0xpbmVzLm1lYXN1cmVUZXh0KHVwcGVyTGluZS50ZXh0LnN1YnN0cigwLCB1cHBlckxpbmVSZWxhdGl2ZUluZGV4KSkud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIGNsb3Nlc3QgbW92ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhjdXJyZW50V2lkdGggLSB1cHBlcldpZHRoKSA+IHByZXZpb3VzV2lkdGggJiYgdXBwZXJMaW5lUmVsYXRpdmVJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wSW5kZXgtLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4ID0gdG1wSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXggPD0gdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsTGluZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA9IHRtcEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4ID0gdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsU3RhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZUVuZEluZGV4ID0gdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsUmVsYXRpdmVTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggPSB0bXBJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY2FzZSBcIkFycm93RG93blwiOiAvLyBET1dOXHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGN1cnNvclxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxMaW5lSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxTdGFydEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsUmVsYXRpdmVTdGFydEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZVN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXggPT09IHRoaXMuX2xpbmVzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBMYXN0IGxpbmVcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggPSB0aGlzLnRleHQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TGluZSA9IHRoaXMuX2xpbmVzW3RoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5kZXJMaW5lID0gdGhpcy5fbGluZXNbdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4ICsgMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbGF0aXZlSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gfHwgdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4IDwgdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsTGluZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZVN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZUVuZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFRleHQgPSBjdXJyZW50TGluZS50ZXh0LnN1YnN0cigwLCByZWxhdGl2ZUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50V2lkdGggPSB0aGlzLl9jb250ZXh0Rm9yQnJlYWtMaW5lcy5tZWFzdXJlVGV4dChjdXJyZW50VGV4dCkud2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bmRlcldpZHRoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJldmlvdXNXaWR0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRtcEluZGV4ICs9IGN1cnJlbnRMaW5lLnRleHQubGVuZ3RoIC0gcmVsYXRpdmVJbmRleCArIGN1cnJlbnRMaW5lLmxpbmVFbmRpbmcubGVuZ3RoOyAvLyBTdGFydCBvZiBjdXJyZW50IGxpbmVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdW5kZXJMaW5lUmVsYXRpdmVJbmRleCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh1bmRlcldpZHRoIDwgY3VycmVudFdpZHRoICYmIHVuZGVyTGluZVJlbGF0aXZlSW5kZXggPCB1bmRlckxpbmUudGV4dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXJMaW5lUmVsYXRpdmVJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1dpZHRoID0gTWF0aC5hYnMoY3VycmVudFdpZHRoIC0gdW5kZXJXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVyV2lkdGggPSB0aGlzLl9jb250ZXh0Rm9yQnJlYWtMaW5lcy5tZWFzdXJlVGV4dCh1bmRlckxpbmUudGV4dC5zdWJzdHIoMCwgdW5kZXJMaW5lUmVsYXRpdmVJbmRleCkpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRmluZCBjbG9zZXN0IG1vdmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoY3VycmVudFdpZHRoIC0gdW5kZXJXaWR0aCkgPiBwcmV2aW91c1dpZHRoICYmIHVuZGVyTGluZVJlbGF0aXZlSW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEluZGV4LS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA9IHRtcEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4IDwgdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsTGluZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA9IHRtcEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4ID4gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCArPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4IC0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCAtPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4ID0gdG1wSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA9IHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbFN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzcGVjaWFsIGNhc2UgLSBzZWxlY3QgYWxsLiBVc2Uga2V5IGluc3RlYWQgb2YgY29kZSB0byBzdXBwb3J0IGFsbCBrZXlib2FyZCBsYXlvdXRzXHJcbiAgICAgICAgaWYgKGtleSA9PT0gXCJhXCIgJiYgZXZ0ICYmIChldnQuY3RybEtleSB8fCBldnQubWV0YUtleSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0QWxsVGV4dCgpO1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUHJpbnRhYmxlIGNoYXJhY3RlcnNcclxuICAgICAgICBpZiAoa2V5Py5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgZXZ0Py5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50S2V5ID0ga2V5O1xyXG4gICAgICAgICAgICB0aGlzLm9uQmVmb3JlS2V5QWRkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XHJcbiAgICAgICAgICAgIGtleSA9IHRoaXMuX2N1cnJlbnRLZXk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hZGRLZXkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldlRleHQgPSB0aGlzLl90ZXh0V3JhcHBlci50ZXh0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dFdyYXBwZXIucmVtb3ZlUGFydCh0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXgsIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXgsIGtleSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggKz0ga2V5Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dEhhc0NoYW5nZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3BhcnNlTGluZVdvcmRXcmFwKGxpbmU6IHN0cmluZyA9IFwiXCIsIHdpZHRoOiBudW1iZXIsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogeyB0ZXh0OiBzdHJpbmc7IHdpZHRoOiBudW1iZXI7IGxpbmVFbmRpbmc6IHN0cmluZyB9W10ge1xyXG4gICAgICAgIGNvbnN0IGxpbmVzID0gW107XHJcbiAgICAgICAgY29uc3Qgd29yZHMgPSBsaW5lLnNwbGl0KFwiIFwiKTtcclxuICAgICAgICBsZXQgbGluZVdpZHRoID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB3b3Jkcy5sZW5ndGg7IG4rKykge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0TGluZSA9IG4gPiAwID8gbGluZSArIFwiIFwiICsgd29yZHNbbl0gOiB3b3Jkc1swXTtcclxuICAgICAgICAgICAgY29uc3QgbWV0cmljcyA9IGNvbnRleHQubWVhc3VyZVRleHQodGVzdExpbmUpO1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0V2lkdGggPSBtZXRyaWNzLndpZHRoO1xyXG4gICAgICAgICAgICBpZiAodGVzdFdpZHRoID4gd2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZpcnN0IHdvcmQgZHVwbGljYXRpb24gaWYgb2YgdG9vIGxvbmdcclxuICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KGxpbmUpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goeyB0ZXh0OiBsaW5lLCB3aWR0aDogbGluZVdpZHRoLCBsaW5lRW5kaW5nOiBcIiBcIiB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsaW5lID0gd29yZHNbbl07XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGZsdXNoZWRMaW5lID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBsaW5lLnNwbGl0KFwiXCIpLm1hcCgoY2hhcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0Lm1lYXN1cmVUZXh0KGZsdXNoZWRMaW5lICsgY2hhcikud2lkdGggPiB3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKHsgdGV4dDogZmx1c2hlZExpbmUsIHdpZHRoOiBjb250ZXh0Lm1lYXN1cmVUZXh0KGZsdXNoZWRMaW5lKS53aWR0aCwgbGluZUVuZGluZzogXCJcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmx1c2hlZExpbmUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmbHVzaGVkTGluZSArPSBjaGFyO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGluZSA9IGZsdXNoZWRMaW5lO1xyXG4gICAgICAgICAgICAgICAgLy8gTWVhc3VyZSByZW1haW5pbmcgY2hhcmFjdGVyc1xyXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoID0gY29udGV4dC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aCA9IHRlc3RXaWR0aDtcclxuICAgICAgICAgICAgICAgIGxpbmUgPSB0ZXN0TGluZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lcy5wdXNoKHsgdGV4dDogbGluZSwgd2lkdGg6IGxpbmVXaWR0aCwgbGluZUVuZGluZzogXCIgXCIgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBsaW5lcztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2JyZWFrTGluZXMocmVmV2lkdGg6IG51bWJlciwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiBvYmplY3RbXSB7XHJcbiAgICAgICAgY29uc3QgbGluZXM6IHsgdGV4dDogc3RyaW5nOyB3aWR0aDogbnVtYmVyOyBsaW5lRW5kaW5nOiBzdHJpbmcgfVtdID0gW107XHJcbiAgICAgICAgY29uc3QgX2xpbmVzID0gKHRoaXMudGV4dCB8fCB0aGlzLnBsYWNlaG9sZGVyVGV4dCkuc3BsaXQoXCJcXG5cIik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNsaXBDb250ZW50KSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgX2xpbmUgb2YgX2xpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKC4uLnRoaXMuX3BhcnNlTGluZVdvcmRXcmFwKF9saW5lLCByZWZXaWR0aCwgY29udGV4dCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBfbGluZSBvZiBfbGluZXMpIHtcclxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2godGhpcy5fcGFyc2VMaW5lKF9saW5lLCBjb250ZXh0KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdLmxpbmVFbmRpbmcgPSBcIlxcblwiO1xyXG5cclxuICAgICAgICByZXR1cm4gbGluZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9wYXJzZUxpbmUobGluZTogc3RyaW5nID0gXCJcIiwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB7IHRleHQ6IHN0cmluZzsgd2lkdGg6IG51bWJlcjsgbGluZUVuZGluZzogc3RyaW5nIH0ge1xyXG4gICAgICAgIHJldHVybiB7IHRleHQ6IGxpbmUsIHdpZHRoOiBjb250ZXh0Lm1lYXN1cmVUZXh0KGxpbmUpLndpZHRoLCBsaW5lRW5kaW5nOiBcIiBcIiB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2luZyBvZiBjaGlsZCByaWdodCBiZWZvcmUgdGhlIHBhcmVudCBtZWFzdXJlbWVudCB1cGRhdGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50TWVhc3VyZSBUaGUgcGFyZW50IG1lYXN1cmVcclxuICAgICAqIEBwYXJhbSBjb250ZXh0IFRoZSByZW5kZXJpbmcgY2FudmFzXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9wcmVNZWFzdXJlKHBhcmVudE1lYXN1cmU6IE1lYXN1cmUsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9mb250T2Zmc2V0IHx8IHRoaXMuX3dhc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZvbnRPZmZzZXQgPSBDb250cm9sLl9HZXRGb250T2Zmc2V0KGNvbnRleHQuZm9udCwgdGhpcy5faG9zdC5nZXRTY2VuZSgpPy5nZXRFbmdpbmUoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdGV4dCA9IHRoaXMuX2JlZm9yZVJlbmRlclRleHQodGhpcy5fdGV4dFdyYXBwZXIpLnRleHQ7XHJcblxyXG4gICAgICAgIC8vIHBsYWNlaG9sZGVyIGNvbmRpdGlvbnMgYW5kIGNvbG9yIHNldHRpbmdcclxuICAgICAgICBpZiAoIXRoaXMudGV4dCAmJiB0aGlzLl9wbGFjZWhvbGRlclRleHQpIHtcclxuICAgICAgICAgICAgdGV4dCA9IHRoaXMuX3BsYWNlaG9sZGVyVGV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG1lYXN1cmVzIHRoZSB0ZXh0bGVuZ3RoIC0+IHRoaXMubWVhc3VyZS53aWR0aFxyXG4gICAgICAgIHRoaXMuX3RleHRXaWR0aCA9IGNvbnRleHQubWVhc3VyZVRleHQodGV4dCkud2lkdGg7XHJcbiAgICAgICAgLy8gd2UgZG91YmxlIHVwIHRoZSBtYXJnaW4gd2lkdGhcclxuICAgICAgICBjb25zdCBtYXJnaW5XaWR0aCA9IHRoaXMuX21hcmdpbi5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgcGFyZW50TWVhc3VyZS53aWR0aCkgKiAyO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fYXV0b1N0cmV0Y2hXaWR0aCkge1xyXG4gICAgICAgICAgICBjb25zdCB0bXBMaW5lcyA9IHRleHQuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvbmdlclN0cmluZyA9IHRtcExpbmVzLnJlZHVjZSgoYWNjOiBzdHJpbmcsIHZhbDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZUxlbmd0aCA9IGNvbnRleHQubWVhc3VyZVRleHQodmFsKS53aWR0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFjY0xlbmd0aCA9IGNvbnRleHQubWVhc3VyZVRleHQoYWNjKS53aWR0aDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUxlbmd0aCA+IGFjY0xlbmd0aCA/IHZhbCA6IGFjYztcclxuICAgICAgICAgICAgfSwgXCJcIik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsb25nZXJTdHJpbmdXaWR0aCA9IGNvbnRleHQubWVhc3VyZVRleHQobG9uZ2VyU3RyaW5nKS53aWR0aDtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IE1hdGgubWluKHRoaXMuX21heFdpZHRoLmdldFZhbHVlSW5QaXhlbCh0aGlzLl9ob3N0LCBwYXJlbnRNZWFzdXJlLndpZHRoKSwgbG9uZ2VyU3RyaW5nV2lkdGggKyBtYXJnaW5XaWR0aCkgKyBcInB4XCI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmF1dG9TdHJldGNoV2lkdGggPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYXZhaWxhYmxlV2lkdGggPSB0aGlzLl93aWR0aC5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgcGFyZW50TWVhc3VyZS53aWR0aCkgLSBtYXJnaW5XaWR0aDtcclxuXHJcbiAgICAgICAgLy8gUHJlcGFyZSBsaW5lc1xyXG4gICAgICAgIHRoaXMuX2xpbmVzID0gdGhpcy5fYnJlYWtMaW5lcyh0aGlzLl9hdmFpbGFibGVXaWR0aCwgY29udGV4dCk7XHJcbiAgICAgICAgLy8gY2FuIHdlIGZpbmQgYSBjbGVhbmVyIGltcGxlbWVudGF0aW9uIGhlcmU/XHJcbiAgICAgICAgdGhpcy5fY29udGV4dEZvckJyZWFrTGluZXMgPSBjb250ZXh0O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fYXV0b1N0cmV0Y2hIZWlnaHQpIHtcclxuICAgICAgICAgICAgY29uc3QgdGV4dEhlaWdodCA9IHRoaXMuX2xpbmVzLmxlbmd0aCAqIHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0O1xyXG4gICAgICAgICAgICBjb25zdCB0b3RhbEhlaWdodCA9IHRleHRIZWlnaHQgKyB0aGlzLl9tYXJnaW4uZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHBhcmVudE1lYXN1cmUuaGVpZ2h0KSAqIDI7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5fbWF4SGVpZ2h0LmdldFZhbHVlSW5QaXhlbCh0aGlzLl9ob3N0LCBwYXJlbnRNZWFzdXJlLmhlaWdodCksIHRvdGFsSGVpZ2h0KSArIFwicHhcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2F1dG9TdHJldGNoSGVpZ2h0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2F2YWlsYWJsZUhlaWdodCA9IHRoaXMuX2hlaWdodC5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgcGFyZW50TWVhc3VyZS5oZWlnaHQpIC0gbWFyZ2luV2lkdGg7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgIGxldCBsaW5lTGVuZ3RoID0gdGhpcy5fbGluZXNbdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4XS50ZXh0Lmxlbmd0aCArIHRoaXMuX2xpbmVzW3RoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleF0ubGluZUVuZGluZy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGxldCB0bXBMZW5ndGggPSAwO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKHRtcExlbmd0aCArIGxpbmVMZW5ndGggPD0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB0bXBMZW5ndGggKz0gbGluZUxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4IDwgdGhpcy5fbGluZXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVMZW5ndGggPSB0aGlzLl9saW5lc1t0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXhdLnRleHQubGVuZ3RoICsgdGhpcy5fbGluZXNbdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4XS5saW5lRW5kaW5nLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX3RleHRIYXNDaGFuZ2VkKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fcHJldlRleHQgJiYgdGhpcy5fdGV4dFdyYXBwZXIudGV4dCAmJiB0aGlzLnBsYWNlaG9sZGVyVGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggPSAxO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4ID0gMTtcclxuICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZVN0YXJ0SW5kZXggPSAxO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlRW5kSW5kZXggPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlci5fdGV4dEhhc0NoYW5nZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jb21wdXRlU2Nyb2xsKCkge1xyXG4gICAgICAgIHRoaXMuX2NsaXBUZXh0TGVmdCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKyB0aGlzLl9tYXJnaW4uZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUud2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX2NsaXBUZXh0VG9wID0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGhpcy5fbWFyZ2luLmdldFZhbHVlSW5QaXhlbCh0aGlzLl9ob3N0LCB0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLmhlaWdodCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc0ZvY3VzZWQgJiYgdGhpcy5fbGluZXNbdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4XS53aWR0aCA+IHRoaXMuX2F2YWlsYWJsZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRMZWZ0ID0gdGhpcy5fY2xpcFRleHRMZWZ0IC0gdGhpcy5fbGluZXNbdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4XS53aWR0aCArIHRoaXMuX2F2YWlsYWJsZVdpZHRoO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9zY3JvbGxMZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ID0gdGV4dExlZnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ID0gdGhpcy5fY2xpcFRleHRMZWZ0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzRm9jdXNlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEhlaWdodCA9ICh0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXggKyAxKSAqIHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0O1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0VG9wID0gdGhpcy5fY2xpcFRleHRUb3AgLSBzZWxlY3RlZEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fc2Nyb2xsVG9wKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxUb3AgPSB0ZXh0VG9wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVG9wID0gdGhpcy5fY2xpcFRleHRUb3A7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2luZyBvZiBjaGlsZCBhZnRlciB0aGUgcGFyZW50IG1lYXN1cmVtZW50IHVwZGF0ZVxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FkZGl0aW9uYWxQcm9jZXNzaW5nKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIEZsdXNoIHRoZSBoaWdobGlnaHRlZCB0ZXh0IGVhY2ggZnJhbWVcclxuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkVGV4dCA9IFwiXCI7XHJcblxyXG4gICAgICAgIHRoaXMub25MaW5lc1JlYWR5T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZHJhd1RleHQodGV4dDogc3RyaW5nLCB0ZXh0V2lkdGg6IG51bWJlciwgeTogbnVtYmVyLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGg7XHJcbiAgICAgICAgbGV0IHggPSB0aGlzLl9zY3JvbGxMZWZ0IGFzIG51bWJlcjtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuX3RleHRIb3Jpem9udGFsQWxpZ25tZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUOlxyXG4gICAgICAgICAgICAgICAgeCArPSAwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9SSUdIVDpcclxuICAgICAgICAgICAgICAgIHggKz0gd2lkdGggLSB0ZXh0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUjpcclxuICAgICAgICAgICAgICAgIHggKz0gKHdpZHRoIC0gdGV4dFdpZHRoKSAvIDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gdGhpcy5zaGFkb3dDb2xvcjtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gdGhpcy5zaGFkb3dCbHVyO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IHRoaXMuc2hhZG93T2Zmc2V0WTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm91dGxpbmVXaWR0aCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVRleHQodGV4dCwgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHgsIHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIHgsIHkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29weSB0aGUgdGV4dCBpbiB0aGUgY2xpcGJvYXJkXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2IFRoZSBjbGlwYm9hcmQgZXZlbnRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX29uQ29weVRleHQoZXY6IENsaXBib2FyZEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gPSBmYWxzZTtcclxuICAgICAgICAvL3doZW4gd3JpdGUgcGVybWlzc2lvbiB0byBjbGlwYmFvcmQgZGF0YSBpcyBkZW5pZWRcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBldi5jbGlwYm9hcmREYXRhICYmIGV2LmNsaXBib2FyZERhdGEuc2V0RGF0YShcInRleHQvcGxhaW5cIiwgdGhpcy5faGlnaGxpZ2h0ZWRUZXh0KTtcclxuICAgICAgICB9IGNhdGNoIHt9IC8vcGFzc1xyXG4gICAgICAgIHRoaXMuX2hvc3QuY2xpcGJvYXJkRGF0YSA9IHRoaXMuX2hpZ2hsaWdodGVkVGV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEN1dCB0aGUgdGV4dCBhbmQgY29weSBpdCBpbiB0aGUgY2xpcGJvYXJkXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2IFRoZSBjbGlwYm9hcmQgZXZlbnRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX29uQ3V0VGV4dChldjogQ2xpcGJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2hpZ2hsaWdodGVkVGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vd2hlbiB3cml0ZSBwZXJtaXNzaW9uIHRvIGNsaXBiYW9yZCBkYXRhIGlzIGRlbmllZFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGV2LmNsaXBib2FyZERhdGEgJiYgZXYuY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dC9wbGFpblwiLCB0aGlzLl9oaWdobGlnaHRlZFRleHQpO1xyXG4gICAgICAgIH0gY2F0Y2gge30gLy9wYXNzXHJcblxyXG4gICAgICAgIHRoaXMuX2hvc3QuY2xpcGJvYXJkRGF0YSA9IHRoaXMuX2hpZ2hsaWdodGVkVGV4dDtcclxuICAgICAgICB0aGlzLl9wcmV2VGV4dCA9IHRoaXMuX3RleHRXcmFwcGVyLnRleHQ7XHJcbiAgICAgICAgdGhpcy5fdGV4dFdyYXBwZXIucmVtb3ZlUGFydCh0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXgsIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXgpO1xyXG5cclxuICAgICAgICB0aGlzLl90ZXh0SGFzQ2hhbmdlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFzdGUgdGhlIGNvcGllZCB0ZXh0IGZyb20gdGhlIGNsaXBib2FyZFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldiBUaGUgY2xpcGJvYXJkIGV2ZW50XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9vblBhc3RlVGV4dChldjogQ2xpcGJvYXJkRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgZGF0YTogc3RyaW5nID0gXCJcIjtcclxuICAgICAgICBpZiAoZXYuY2xpcGJvYXJkRGF0YSAmJiBldi5jbGlwYm9hcmREYXRhLnR5cGVzLmluZGV4T2YoXCJ0ZXh0L3BsYWluXCIpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBkYXRhID0gZXYuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwidGV4dC9wbGFpblwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL2dldCB0aGUgY2FjaGVkIGRhdGE7IHJldHVybnMgYmxhbmsgc3RyaW5nIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2hvc3QuY2xpcGJvYXJkRGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fcHJldlRleHQgPSB0aGlzLl90ZXh0V3JhcHBlci50ZXh0O1xyXG4gICAgICAgIHRoaXMuX3RleHRXcmFwcGVyLnJlbW92ZVBhcnQodGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4LCB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4LCBkYXRhKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGVsdGFJbmRleCA9IGRhdGEubGVuZ3RoIC0gKHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggLSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXgpO1xyXG5cclxuICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggKz0gZGVsdGFJbmRleDtcclxuICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4O1xyXG4gICAgICAgIHRoaXMuX2NsaWNrZWRDb29yZGluYXRlWCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY2xpY2tlZENvb3JkaW5hdGVZID0gbnVsbDtcclxuXHJcbiAgICAgICAgc3VwZXIuX3RleHRIYXNDaGFuZ2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9kcmF3KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fY29tcHV0ZVNjcm9sbCgpO1xyXG5cclxuICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ID0gdGhpcy5fc2Nyb2xsTGVmdCA/PyAwO1xyXG4gICAgICAgIHRoaXMuX3Njcm9sbFRvcCA9IHRoaXMuX3Njcm9sbFRvcCA/PyAwO1xyXG5cclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYXBwbHlTdGF0ZXMoY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hhZG93Qmx1ciB8fCB0aGlzLnNoYWRvd09mZnNldFggfHwgdGhpcy5zaGFkb3dPZmZzZXRZKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Q29sb3IgPSB0aGlzLnNoYWRvd0NvbG9yO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSB0aGlzLnNoYWRvd0JsdXI7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IHRoaXMuc2hhZG93T2Zmc2V0WDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gdGhpcy5zaGFkb3dPZmZzZXRZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQmFja2dyb3VuZFxyXG4gICAgICAgIGlmICh0aGlzLl9pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZvY3VzZWRCYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX2lzRW5hYmxlZCA/IHRoaXMuX2ZvY3VzZWRCYWNrZ3JvdW5kIDogdGhpcy5fZGlzYWJsZWRDb2xvcjtcclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCwgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLl9pc0VuYWJsZWQgPyB0aGlzLl9iYWNrZ3JvdW5kIDogdGhpcy5fZGlzYWJsZWRDb2xvcjtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSAwO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSAwO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2V0cyB0aGUgY29sb3Igb2YgdGhlIHJlY3RhbmdsZSAoYm9yZGVyIGlmIGJhY2tncm91bmQgYXZhaWxhYmxlKVxyXG4gICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodDtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoO1xyXG4gICAgICAgIGxldCByb290WSA9IDA7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5fdGV4dFZlcnRpY2FsQWxpZ25tZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfVE9QOlxyXG4gICAgICAgICAgICAgICAgcm9vdFkgPSB0aGlzLl9mb250T2Zmc2V0LmFzY2VudDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0JPVFRPTTpcclxuICAgICAgICAgICAgICAgIHJvb3RZID0gaGVpZ2h0IC0gdGhpcy5fZm9udE9mZnNldC5oZWlnaHQgKiAodGhpcy5fbGluZXMubGVuZ3RoIC0gMSkgLSB0aGlzLl9mb250T2Zmc2V0LmRlc2NlbnQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI6XHJcbiAgICAgICAgICAgICAgICByb290WSA9IHRoaXMuX2ZvbnRPZmZzZXQuYXNjZW50ICsgKGhlaWdodCAtIHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0ICogdGhpcy5fbGluZXMubGVuZ3RoKSAvIDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmZvbnRTdHlsZTtcclxuICAgICAgICBpZiAoIXRoaXMuX3RleHRXcmFwcGVyLnRleHQgJiYgdGhpcy5wbGFjZWhvbGRlclRleHQpIHtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLl9wbGFjZWhvbGRlckNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBoZXJlIHdlIGRlZmluZSB0aGUgdmlzaWJsZSByZWFjdGFuZ2xlIHRvIGNsaXAgaXQgaW4gbmV4dCBsaW5lXHJcbiAgICAgICAgY29udGV4dC5yZWN0KHRoaXMuX2NsaXBUZXh0TGVmdCwgdGhpcy5fY2xpcFRleHRUb3AsIHRoaXMuX2F2YWlsYWJsZVdpZHRoICsgMiwgdGhpcy5fYXZhaWxhYmxlSGVpZ2h0ICsgMik7XHJcbiAgICAgICAgY29udGV4dC5jbGlwKCk7XHJcblxyXG4gICAgICAgIC8vIFRleHRcclxuICAgICAgICByb290WSArPSB0aGlzLl9zY3JvbGxUb3A7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuX2xpbmVzW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYgKGkgIT09IDAgJiYgdGhpcy5fbGluZVNwYWNpbmcuaW50ZXJuYWxWYWx1ZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xpbmVTcGFjaW5nLmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByb290WSArPSB0aGlzLl9saW5lU3BhY2luZy5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdFkgPSByb290WSArIHRoaXMuX2xpbmVTcGFjaW5nLmdldFZhbHVlKHRoaXMuX2hvc3QpICogdGhpcy5faGVpZ2h0LmdldFZhbHVlSW5QaXhlbCh0aGlzLl9ob3N0LCB0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2RyYXdUZXh0KGxpbmUudGV4dCwgbGluZS53aWR0aCwgcm9vdFksIGNvbnRleHQpO1xyXG4gICAgICAgICAgICByb290WSArPSB0aGlzLl9mb250T2Zmc2V0LmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICAvLyBDdXJzb3JcclxuICAgICAgICBpZiAodGhpcy5faXNGb2N1c2VkKSB7XHJcbiAgICAgICAgICAgIC8vIFJlbmRlciBjdXJzb3JcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9ibGlua0lzRXZlbiB8fCB0aGlzLl9pc1RleHRIaWdobGlnaHRPbikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnNvckxlZnQgPSB0aGlzLl9zY3JvbGxMZWZ0ICsgY29udGV4dC5tZWFzdXJlVGV4dCh0aGlzLl9saW5lc1t0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXhdLnRleHQuc3Vic3RyKDAsIHRoaXMuX2N1cnNvckluZm8ucmVsYXRpdmVTdGFydEluZGV4KSkud2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnNvckxlZnQgPCB0aGlzLl9jbGlwVGV4dExlZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ICs9IHRoaXMuX2NsaXBUZXh0TGVmdCAtIGN1cnNvckxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yTGVmdCA9IHRoaXMuX2NsaXBUZXh0TGVmdDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJzb3JMZWZ0ID4gdGhpcy5fY2xpcFRleHRMZWZ0ICsgdGhpcy5fYXZhaWxhYmxlV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxMZWZ0ICs9IHRoaXMuX2NsaXBUZXh0TGVmdCArIHRoaXMuX2F2YWlsYWJsZVdpZHRoIC0gY3Vyc29yTGVmdDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3JMZWZ0ID0gdGhpcy5fY2xpcFRleHRMZWZ0ICsgdGhpcy5fYXZhaWxhYmxlV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY3Vyc29yVG9wID0gdGhpcy5fc2Nyb2xsVG9wICsgdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4ICogdGhpcy5fZm9udE9mZnNldC5oZWlnaHQ7IC8vY3Vyc29yVG9wIGRpc3RhbmNlIGZyb20gdG9wIHRvIGN1cnNvciBzdGFydFxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJzb3JUb3AgPCB0aGlzLl9jbGlwVGV4dFRvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbFRvcCArPSB0aGlzLl9jbGlwVGV4dFRvcCAtIGN1cnNvclRvcDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3JUb3AgPSB0aGlzLl9jbGlwVGV4dFRvcDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJzb3JUb3AgKyB0aGlzLl9mb250T2Zmc2V0LmhlaWdodCA+IHRoaXMuX2NsaXBUZXh0VG9wICsgdGhpcy5fYXZhaWxhYmxlSGVpZ2h0ICYmIHRoaXMuX2F2YWlsYWJsZUhlaWdodCA+IHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVG9wICs9IHRoaXMuX2NsaXBUZXh0VG9wICsgdGhpcy5fYXZhaWxhYmxlSGVpZ2h0IC0gY3Vyc29yVG9wIC0gdGhpcy5fZm9udE9mZnNldC5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yVG9wID0gdGhpcy5fY2xpcFRleHRUb3AgKyB0aGlzLl9hdmFpbGFibGVIZWlnaHQgLSB0aGlzLl9mb250T2Zmc2V0LmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGN1cnNvckxlZnQsIGN1cnNvclRvcCwgMiwgdGhpcy5fZm9udE9mZnNldC5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9yZXNldEJsaW5raW5nKCk7XHJcblxyXG4gICAgICAgICAgICAvL3Nob3cgdGhlIGhpZ2hsaWdodGVkIHRleHRcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fYmxpbmtUaW1lb3V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRlZFRleHQgPSB0aGlzLnRleHQuc3Vic3RyaW5nKHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCwgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IHRoaXMuX2hpZ2hsaWdoZXJPcGFjaXR5O1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLl90ZXh0SGlnaGxpZ2h0Q29sb3I7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRMaW5lSW5kZXggPSBNYXRoLm1pbih0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXgsIHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbExpbmVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbmRMaW5lSW5kZXggPSBNYXRoLm1heCh0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXgsIHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbExpbmVJbmRleCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGhpZ2hsaWdodFJvb3RZID0gdGhpcy5fc2Nyb2xsVG9wICsgc3RhcnRMaW5lSW5kZXggKiB0aGlzLl9mb250T2Zmc2V0LmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRMaW5lSW5kZXg7IGkgPD0gZW5kTGluZUluZGV4OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5fbGluZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBoaWdobGlnaHRSb290WCA9IHRoaXMuX3Njcm9sbExlZnQgYXMgbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fdGV4dEhvcml6b250YWxBbGlnbm1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRSb290WCArPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9SSUdIVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodFJvb3RYICs9IHdpZHRoIC0gbGluZS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfQ0VOVEVSOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0Um9vdFggKz0gKHdpZHRoIC0gbGluZS53aWR0aCkgLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiZWdpbiA9IGkgPT09IHN0YXJ0TGluZUluZGV4ID8gdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZVN0YXJ0SW5kZXggOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IGkgPT09IGVuZExpbmVJbmRleCA/IHRoaXMuX2N1cnNvckluZm8ucmVsYXRpdmVFbmRJbmRleCA6IGxpbmUudGV4dC5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRPZmZzZXRXaWR0aCA9IGNvbnRleHQubWVhc3VyZVRleHQobGluZS50ZXh0LnN1YnN0cigwLCBiZWdpbikpLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVGV4dCA9IGxpbmUudGV4dC5zdWJzdHJpbmcoYmVnaW4sIGVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlnaHRsaWdodFdpZHRoID0gY29udGV4dC5tZWFzdXJlVGV4dChzZWxlY3RlZFRleHQpLndpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGhpZ2hsaWdodFJvb3RYICsgbGVmdE9mZnNldFdpZHRoLCBoaWdobGlnaHRSb290WSwgaGlnaHRsaWdodFdpZHRoLCB0aGlzLl9mb250T2Zmc2V0LmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodFJvb3RZICs9IHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4ID09PSB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNldEJsaW5raW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICAvLyBCb3JkZXJcclxuICAgICAgICBpZiAodGhpcy5fdGhpY2tuZXNzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzZWRDb2xvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmZvY3VzZWRDb2xvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gdGhpcy5fdGhpY2tuZXNzO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2VSZWN0KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX3RoaWNrbmVzcyAvIDIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl90aGlja25lc3MgLyAyLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLSB0aGlzLl90aGlja25lc3MsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLSB0aGlzLl90aGlja25lc3NcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVzZXRCbGlua2luZygpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fYmxpbmtUaW1lb3V0KTtcclxuICAgICAgICB0aGlzLl9ibGlua1RpbWVvdXQgPSA8YW55PnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9ICF0aGlzLl9ibGlua0lzRXZlbjtcclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfb25Qb2ludGVyRG93bih0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgcGk6IFBvaW50ZXJJbmZvQmFzZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghc3VwZXIuX29uUG9pbnRlckRvd24odGFyZ2V0LCBjb29yZGluYXRlcywgcG9pbnRlcklkLCBidXR0b25JbmRleCwgcGkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzUmVhZE9ubHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jbGlja2VkQ29vcmRpbmF0ZVggPSBjb29yZGluYXRlcy54O1xyXG4gICAgICAgIHRoaXMuX2NsaWNrZWRDb29yZGluYXRlWSA9IGNvb3JkaW5hdGVzLnk7XHJcblxyXG4gICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5faGlnaGxpZ2h0ZWRUZXh0ID0gXCJcIjtcclxuICAgICAgICB0aGlzLl9pc1BvaW50ZXJEb3duID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9ob3N0Ll9jYXB0dXJpbmdDb250cm9sW3BvaW50ZXJJZF0gPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLl9ob3N0LmZvY3VzZWRDb250cm9sID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgIC8vIE1vdmUgY3Vyc29yXHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9ibGlua1RpbWVvdXQpO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9ob3N0LmZvY3VzZWRDb250cm9sID0gdGhpcztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZm9yIHRleHRzZWxlY3Rpb25cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfb25Qb2ludGVyTW92ZSh0YXJnZXQ6IENvbnRyb2wsIGNvb3JkaW5hdGVzOiBWZWN0b3IyLCBwb2ludGVySWQ6IG51bWJlciwgcGk6IFBvaW50ZXJJbmZvQmFzZSk6IHZvaWQge1xyXG4gICAgICAgIC8vIEF2b2lkIENocm9taXVtLWxpa2UgYmVhaGF2aW9yIHdoZW4gdGhpcyBldmVudCBpcyBmaXJlZCByaWdodCBhZnRlciBvblBvaW50ZXJEb3duXHJcbiAgICAgICAgaWYgKHBpLmV2ZW50Lm1vdmVtZW50WCA9PT0gMCAmJiBwaS5ldmVudC5tb3ZlbWVudFkgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hvc3QuZm9jdXNlZENvbnRyb2wgPT09IHRoaXMgJiYgdGhpcy5faXNQb2ludGVyRG93biAmJiAhdGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrZWRDb29yZGluYXRlWCA9IGNvb3JkaW5hdGVzLng7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrZWRDb29yZGluYXRlWSA9IGNvb3JkaW5hdGVzLnk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxMaW5lSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxTdGFydEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsUmVsYXRpdmVTdGFydEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZVN0YXJ0SW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlci5fb25Qb2ludGVyTW92ZSh0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIHBpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IHRoZSBjb3JyZWN0IHBvc2l0aW9uIG9mIGN1cnNvciBhY2NvcmRpbmcgdG8gY3VycmVudCBtb2RpZmljYXRpb25cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfdXBkYXRlQ3Vyc29yUG9zaXRpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl90ZXh0V3JhcHBlci50ZXh0ICYmIHRoaXMucGxhY2Vob2xkZXJUZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlU3RhcnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8ucmVsYXRpdmVFbmRJbmRleCA9IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NsaWNrZWRDb29yZGluYXRlWCAmJiB0aGlzLl9jbGlja2VkQ29vcmRpbmF0ZVkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTdGFydEluZGV4OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxFbmRJbmRleDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVTdGFydEluZGV4OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUVuZEluZGV4OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGluZUluZGV4OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGdsb2JhbEluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIGxldCByZWxhdGl2ZUluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0Q2xpY2tlZENvb3JkaW5hdGVZID0gdGhpcy5fY2xpY2tlZENvb3JkaW5hdGVZIC0gKHRoaXMuX3Njcm9sbFRvcCBhcyBudW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlQ29vcmRpbmF0ZVkgPSBNYXRoLmZsb29yKGxhc3RDbGlja2VkQ29vcmRpbmF0ZVkgLyB0aGlzLl9mb250T2Zmc2V0LmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXggPSBNYXRoLm1pbihNYXRoLm1heChyZWxhdGl2ZUNvb3JkaW5hdGVZLCAwKSwgdGhpcy5fbGluZXMubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRTaXplID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWxhdGl2ZVhQb3NpdGlvbiA9IHRoaXMuX2NsaWNrZWRDb29yZGluYXRlWCAtICh0aGlzLl9zY3JvbGxMZWZ0ID8/IDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBwcmV2aW91c0Rpc3QgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5fbGluZXNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbEluZGV4ICs9IGxpbmUudGV4dC5sZW5ndGggKyBsaW5lLmxpbmVFbmRpbmcubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50U2l6ZSA8IHJlbGF0aXZlWFBvc2l0aW9uICYmIHRoaXMuX2xpbmVzW3RoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleF0udGV4dC5sZW5ndGggPiByZWxhdGl2ZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzRGlzdCA9IE1hdGguYWJzKHJlbGF0aXZlWFBvc2l0aW9uIC0gY3VycmVudFNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTaXplID0gdGhpcy5fY29udGV4dEZvckJyZWFrTGluZXMubWVhc3VyZVRleHQodGhpcy5fbGluZXNbdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4XS50ZXh0LnN1YnN0cigwLCByZWxhdGl2ZUluZGV4KSkud2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRmluZCBjbG9zZXN0IG1vdmVcclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhyZWxhdGl2ZVhQb3NpdGlvbiAtIGN1cnJlbnRTaXplKSA+IHByZXZpb3VzRGlzdCAmJiByZWxhdGl2ZUluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlSW5kZXgtLTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBnbG9iYWxJbmRleCArPSByZWxhdGl2ZUluZGV4O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNUZXh0SGlnaGxpZ2h0T24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggPSBnbG9iYWxJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlU3RhcnRJbmRleCA9IHJlbGF0aXZlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCA9IHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlRW5kSW5kZXggPSB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlU3RhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbEluZGV4IDwgdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsU3RhcnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggPSBnbG9iYWxJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZVN0YXJ0SW5kZXggPSByZWxhdGl2ZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4ID0gdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsU3RhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZUVuZEluZGV4ID0gdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsUmVsYXRpdmVTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA9IHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbFN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8ucmVsYXRpdmVTdGFydEluZGV4ID0gdGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsUmVsYXRpdmVTdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmdsb2JhbEVuZEluZGV4ID0gZ2xvYmFsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8ucmVsYXRpdmVFbmRJbmRleCA9IHJlbGF0aXZlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEF2b2lkIHRoZSBjYXJldCBkdXJpbmcgaGlnaGxpZ2h0aW5nXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xpY2tlZENvb3JkaW5hdGVYID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsaWNrZWRDb29yZGluYXRlWSA9IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTdGFuZGFyZCBiZWhhdmlvciBzYW1lIGFzIEN1cnJlbnQgbGluZSBpcyBhdCBsZWFzdCBhYm92ZSB0aGUgaW5pdGlhbCBoaWdobGlnaHQgaW5kZXhcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8ucmVsYXRpdmVTdGFydEluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGxpbmVMZW5ndGggPSB0aGlzLl9saW5lc1t0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXhdLnRleHQubGVuZ3RoICsgdGhpcy5fbGluZXNbdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4XS5saW5lRW5kaW5nLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBMZW5ndGggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlICh0bXBMZW5ndGggKyBsaW5lTGVuZ3RoIDw9IHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcExlbmd0aCArPSBsaW5lTGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4IDwgdGhpcy5fbGluZXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZUxlbmd0aCA9IHRoaXMuX2xpbmVzW3RoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleF0udGV4dC5sZW5ndGggKyB0aGlzLl9saW5lc1t0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXhdLmxpbmVFbmRpbmcubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLnJlbGF0aXZlU3RhcnRJbmRleCA9IHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCAtIHRtcExlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZUVuZEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZVN0YXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCA9IHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5faGlnaGxpZ2h0Q3Vyc29ySW5mby5pbml0aWFsU3RhcnRJbmRleCAhPT0gLTEgJiYgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4ID49IHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbFN0YXJ0SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDdXJyZW50IGxpbmUgaXMgYXQgbGVhc3QgYmVsb3cgdGhlIGluaXRpYWwgaGlnaGxpZ2h0IGluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRtcExlbmd0aCArIGxpbmVMZW5ndGggPD0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBMZW5ndGggKz0gbGluZUxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXggPCB0aGlzLl9saW5lcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVMZW5ndGggPSB0aGlzLl9saW5lc1t0aGlzLl9jdXJzb3JJbmZvLmN1cnJlbnRMaW5lSW5kZXhdLnRleHQubGVuZ3RoICsgdGhpcy5fbGluZXNbdGhpcy5fY3Vyc29ySW5mby5jdXJyZW50TGluZUluZGV4XS5saW5lRW5kaW5nLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5yZWxhdGl2ZUVuZEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCAtIHRtcExlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBhbGwgdmFsdWVzIG9mIGN1cnNvciBpbmZvcm1hdGlvbiBiYXNlZCBvbiBjdXJzb3JJbmRleCB2YWx1ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvZmZzZXQgVGhlIGluZGV4IHRvIHRha2UgY2FyZSBvZlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfdXBkYXRlVmFsdWVGcm9tQ3Vyc29ySW5kZXgob2Zmc2V0OiBudW1iZXIpIHtcclxuICAgICAgICAvLyBPdmVycmlkZSB0byBhdm9pZCBwYXJlbnQgYmVoYXZpb3IgZHVyaW5nIF9vblBvaW50ZXJNb3ZlXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZWxlY3QgdGhlIHdvcmQgaW1tZWRpYXRseSB1bmRlciB0aGUgY3Vyc29yIG9uIGRvdWJsZSBjbGlja1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBfZXZ0IFBvaW50ZXIgaW5mb3JtYXRpb25zIG9mIGRvdWJsZSBjbGlja1xyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfcHJvY2Vzc0RibENsaWNrKF9ldnQ6IFBvaW50ZXJJbmZvKSB7XHJcbiAgICAgICAgLy9wcmUtZmluZCB0aGUgc3RhcnQgYW5kIGVuZCBpbmRleCBvZiB0aGUgd29yZCB1bmRlciBjdXJzb3IsIHNwZWVkcyB1cCB0aGUgcmVuZGVyaW5nXHJcbiAgICAgICAgbGV0IG1vdmVMZWZ0LCBtb3ZlUmlnaHQ7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBtb3ZlTGVmdCA9IHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCA+IDAgJiYgdGhpcy5fdGV4dFdyYXBwZXIuaXNXb3JkKHRoaXMuX2N1cnNvckluZm8uZ2xvYmFsU3RhcnRJbmRleCAtIDEpID8gLS10aGlzLl9jdXJzb3JJbmZvLmdsb2JhbFN0YXJ0SW5kZXggOiAwO1xyXG4gICAgICAgICAgICBtb3ZlUmlnaHQgPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCA8IHRoaXMuX3RleHRXcmFwcGVyLmxlbmd0aCAmJiB0aGlzLl90ZXh0V3JhcHBlci5pc1dvcmQodGhpcy5fY3Vyc29ySW5mby5nbG9iYWxFbmRJbmRleCkgPyArK3RoaXMuX2N1cnNvckluZm8uZ2xvYmFsRW5kSW5kZXggOiAwO1xyXG4gICAgICAgIH0gd2hpbGUgKG1vdmVMZWZ0IHx8IG1vdmVSaWdodCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8uaW5pdGlhbExpbmVJbmRleCA9IHRoaXMuX2N1cnNvckluZm8uY3VycmVudExpbmVJbmRleDtcclxuICAgICAgICB0aGlzLl9oaWdobGlnaHRDdXJzb3JJbmZvLmluaXRpYWxTdGFydEluZGV4ID0gdGhpcy5fY3Vyc29ySW5mby5nbG9iYWxTdGFydEluZGV4O1xyXG5cclxuICAgICAgICB0aGlzLm9uVGV4dEhpZ2hsaWdodE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLl9pc1RleHRIaWdobGlnaHRPbiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fYmxpbmtJc0V2ZW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9zZWxlY3RBbGxUZXh0KCkge1xyXG4gICAgICAgIHRoaXMuX2lzVGV4dEhpZ2hsaWdodE9uID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9ibGlua0lzRXZlbiA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuX2hpZ2hsaWdodEN1cnNvckluZm8gPSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxTdGFydEluZGV4OiAwLFxyXG4gICAgICAgICAgICBpbml0aWFsUmVsYXRpdmVTdGFydEluZGV4OiAwLFxyXG4gICAgICAgICAgICBpbml0aWFsTGluZUluZGV4OiAwLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuX2N1cnNvckluZm8gPSB7XHJcbiAgICAgICAgICAgIGdsb2JhbFN0YXJ0SW5kZXg6IDAsXHJcbiAgICAgICAgICAgIGdsb2JhbEVuZEluZGV4OiB0aGlzLl90ZXh0V3JhcHBlci5sZW5ndGgsXHJcbiAgICAgICAgICAgIHJlbGF0aXZlRW5kSW5kZXg6IHRoaXMuX2xpbmVzW3RoaXMuX2xpbmVzLmxlbmd0aCAtIDFdLnRleHQubGVuZ3RoLFxyXG4gICAgICAgICAgICByZWxhdGl2ZVN0YXJ0SW5kZXg6IDAsXHJcbiAgICAgICAgICAgIGN1cnJlbnRMaW5lSW5kZXg6IHRoaXMuX2xpbmVzLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpIHtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XHJcblxyXG4gICAgICAgIHRoaXMub25MaW5lc1JlYWR5T2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgfVxyXG59XHJcblJlZ2lzdGVyQ2xhc3MoXCJCQUJZTE9OLkdVSS5JbnB1dFRleHRBcmVhXCIsIElucHV0VGV4dEFyZWEpO1xyXG4iLCJpbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUgeyBPYnNlcnZlciB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzLCBNYXRyaXggfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgeyBUb29scyB9IGZyb20gXCJjb3JlL01pc2MvdG9vbHNcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgeyBWYWx1ZUFuZFVuaXQgfSBmcm9tIFwiLi4vdmFsdWVBbmRVbml0XCI7XHJcbmltcG9ydCB0eXBlIHsgTWVhc3VyZSB9IGZyb20gXCIuLi9tZWFzdXJlXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5cclxuLyoqIENsYXNzIHVzZWQgdG8gcmVuZGVyIDJEIGxpbmVzICovXHJcbmV4cG9ydCBjbGFzcyBMaW5lIGV4dGVuZHMgQ29udHJvbCB7XHJcbiAgICBwcml2YXRlIF9saW5lV2lkdGggPSAxO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF94MSA9IG5ldyBWYWx1ZUFuZFVuaXQoMCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3kxID0gbmV3IFZhbHVlQW5kVW5pdCgwKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfeDIgPSBuZXcgVmFsdWVBbmRVbml0KDApO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF95MiA9IG5ldyBWYWx1ZUFuZFVuaXQoMCk7XHJcbiAgICBwcml2YXRlIF9kYXNoID0gbmV3IEFycmF5PG51bWJlcj4oKTtcclxuICAgIHByaXZhdGUgX2Nvbm5lY3RlZENvbnRyb2w6IENvbnRyb2w7XHJcbiAgICBwcml2YXRlIF9jb25uZWN0ZWRDb250cm9sRGlydHlPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8Q29udHJvbD4+O1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGRhc2ggcGF0dGVybiAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGRhc2goKTogQXJyYXk8bnVtYmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rhc2g7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBkYXNoKHZhbHVlOiBBcnJheTxudW1iZXI+KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rhc2ggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2Rhc2ggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGNvbnRyb2wgY29ubmVjdGVkIHdpdGggdGhlIGxpbmUgZW5kICovXHJcbiAgICBwdWJsaWMgZ2V0IGNvbm5lY3RlZENvbnRyb2woKTogQ29udHJvbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3RlZENvbnRyb2w7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBjb25uZWN0ZWRDb250cm9sKHZhbHVlOiBDb250cm9sKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RlZENvbnRyb2wgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb25uZWN0ZWRDb250cm9sRGlydHlPYnNlcnZlciAmJiB0aGlzLl9jb25uZWN0ZWRDb250cm9sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RlZENvbnRyb2wub25EaXJ0eU9ic2VydmFibGUucmVtb3ZlKHRoaXMuX2Nvbm5lY3RlZENvbnRyb2xEaXJ0eU9ic2VydmVyKTtcclxuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGVkQ29udHJvbERpcnR5T2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RlZENvbnRyb2xEaXJ0eU9ic2VydmVyID0gdmFsdWUub25EaXJ0eU9ic2VydmFibGUuYWRkKCgpID0+IHRoaXMuX21hcmtBc0RpcnR5KCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29ubmVjdGVkQ29udHJvbCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBzdGFydCBjb29yZGluYXRlcyBvbiBYIGF4aXMgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCB4MSgpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl94MS50b1N0cmluZyh0aGlzLl9ob3N0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHgxKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5feDEudG9TdHJpbmcodGhpcy5faG9zdCkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl94MS5mcm9tU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHN0YXJ0IGNvb3JkaW5hdGVzIG9uIFkgYXhpcyAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHkxKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3kxLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgeTEodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl95MS50b1N0cmluZyh0aGlzLl9ob3N0KSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3kxLmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZW5kIGNvb3JkaW5hdGVzIG9uIFggYXhpcyAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHgyKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3gyLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgeDIodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl94Mi50b1N0cmluZyh0aGlzLl9ob3N0KSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3gyLmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZW5kIGNvb3JkaW5hdGVzIG9uIFkgYXhpcyAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHkyKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3kyLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgeTIodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl95Mi50b1N0cmluZyh0aGlzLl9ob3N0KSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3kyLmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgbGluZSB3aWR0aCAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGxpbmVXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBsaW5lV2lkdGgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9saW5lV2lkdGggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2xpbmVXaWR0aCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBob3Jpem9udGFsIGFsaWdubWVudCAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIHNldCBob3Jpem9udGFsQWxpZ25tZW50KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB2ZXJ0aWNhbCBhbGlnbm1lbnQgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXQgdmVydGljYWxBbGlnbm1lbnQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgZ2V0IF9lZmZlY3RpdmVYMigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5fY29ubmVjdGVkQ29udHJvbCA/IHRoaXMuX2Nvbm5lY3RlZENvbnRyb2wuY2VudGVyWCA6IDApICsgdGhpcy5feDIuZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIGdldCBfZWZmZWN0aXZlWTIoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuX2Nvbm5lY3RlZENvbnRyb2wgPyB0aGlzLl9jb25uZWN0ZWRDb250cm9sLmNlbnRlclkgOiAwKSArIHRoaXMuX3kyLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBMaW5lXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYXV0b21hdGljU2l6ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuaXNIaXRUZXN0VmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2hvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ7XHJcbiAgICAgICAgdGhpcy5fdmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9UT1A7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkxpbmVcIjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2RyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hhZG93Qmx1ciB8fCB0aGlzLnNoYWRvd09mZnNldFggfHwgdGhpcy5zaGFkb3dPZmZzZXRZKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Q29sb3IgPSB0aGlzLnNoYWRvd0NvbG9yO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSB0aGlzLnNoYWRvd0JsdXI7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IHRoaXMuc2hhZG93T2Zmc2V0WDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gdGhpcy5zaGFkb3dPZmZzZXRZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYXBwbHlTdGF0ZXMoY29udGV4dCk7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuX2dldENvbG9yKGNvbnRleHQpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gdGhpcy5fbGluZVdpZHRoO1xyXG4gICAgICAgIGNvbnRleHQuc2V0TGluZURhc2godGhpcy5fZGFzaCk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8odGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS5sZWZ0ICsgdGhpcy5feDEuZ2V0VmFsdWUodGhpcy5faG9zdCksIHRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUudG9wICsgdGhpcy5feTEuZ2V0VmFsdWUodGhpcy5faG9zdCkpO1xyXG5cclxuICAgICAgICBjb250ZXh0LmxpbmVUbyh0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLmxlZnQgKyB0aGlzLl9lZmZlY3RpdmVYMiwgdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS50b3AgKyB0aGlzLl9lZmZlY3RpdmVZMik7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuXHJcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9tZWFzdXJlKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIFdpZHRoIC8gSGVpZ2h0XHJcbiAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggPSBNYXRoLmFicyh0aGlzLl94MS5nZXRWYWx1ZSh0aGlzLl9ob3N0KSAtIHRoaXMuX2VmZmVjdGl2ZVgyKSArIHRoaXMuX2xpbmVXaWR0aDtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgPSBNYXRoLmFicyh0aGlzLl95MS5nZXRWYWx1ZSh0aGlzLl9ob3N0KSAtIHRoaXMuX2VmZmVjdGl2ZVkyKSArIHRoaXMuX2xpbmVXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2NvbXB1dGVBbGlnbm1lbnQocGFyZW50TWVhc3VyZTogTWVhc3VyZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgPSBwYXJlbnRNZWFzdXJlLmxlZnQgKyBNYXRoLm1pbih0aGlzLl94MS5nZXRWYWx1ZSh0aGlzLl9ob3N0KSwgdGhpcy5fZWZmZWN0aXZlWDIpIC0gdGhpcy5fbGluZVdpZHRoIC8gMjtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgPSBwYXJlbnRNZWFzdXJlLnRvcCArIE1hdGgubWluKHRoaXMuX3kxLmdldFZhbHVlKHRoaXMuX2hvc3QpLCB0aGlzLl9lZmZlY3RpdmVZMikgLSB0aGlzLl9saW5lV2lkdGggLyAyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW92ZSBvbmUgZW5kIG9mIHRoZSBsaW5lIGdpdmVuIDNEIGNhcnRlc2lhbiBjb29yZGluYXRlcy5cclxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBUYXJnZXRlZCB3b3JsZCBwb3NpdGlvblxyXG4gICAgICogQHBhcmFtIHNjZW5lIFNjZW5lXHJcbiAgICAgKiBAcGFyYW0gZW5kIChvcHQpIFNldCB0byB0cnVlIHRvIGFzc2lnbiB4MiBhbmQgeTIgY29vcmRpbmF0ZXMgb2YgdGhlIGxpbmUuIERlZmF1bHQgYXNzaWduIHRvIHgxIGFuZCB5MS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIG1vdmVUb1ZlY3RvcjMocG9zaXRpb246IFZlY3RvcjMsIHNjZW5lOiBTY2VuZSwgZW5kOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2hvc3QgfHwgdGhpcy5wYXJlbnQgIT09IHRoaXMuX2hvc3QuX3Jvb3RDb250YWluZXIpIHtcclxuICAgICAgICAgICAgVG9vbHMuRXJyb3IoXCJDYW5ub3QgbW92ZSBhIGNvbnRyb2wgdG8gYSB2ZWN0b3IzIGlmIHRoZSBjb250cm9sIGlzIG5vdCBhdCByb290IGxldmVsXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBnbG9iYWxWaWV3cG9ydCA9IHRoaXMuX2hvc3QuX2dldEdsb2JhbFZpZXdwb3J0KCk7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdGVkUG9zaXRpb24gPSBWZWN0b3IzLlByb2plY3QocG9zaXRpb24sIE1hdHJpeC5JZGVudGl0eVJlYWRPbmx5LCBzY2VuZS5nZXRUcmFuc2Zvcm1NYXRyaXgoKSwgZ2xvYmFsVmlld3BvcnQpO1xyXG5cclxuICAgICAgICB0aGlzLl9tb3ZlVG9Qcm9qZWN0ZWRQb3NpdGlvbihwcm9qZWN0ZWRQb3NpdGlvbiwgZW5kKTtcclxuXHJcbiAgICAgICAgaWYgKHByb2plY3RlZFBvc2l0aW9uLnogPCAwIHx8IHByb2plY3RlZFBvc2l0aW9uLnogPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90UmVuZGVyYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ub3RSZW5kZXJhYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNb3ZlIG9uZSBlbmQgb2YgdGhlIGxpbmUgdG8gYSBwb3NpdGlvbiBpbiBzY3JlZW4gYWJzb2x1dGUgc3BhY2UuXHJcbiAgICAgKiBAcGFyYW0gcHJvamVjdGVkUG9zaXRpb24gUG9zaXRpb24gaW4gc2NyZWVuIGFic29sdXRlIHNwYWNlIChYLCBZKVxyXG4gICAgICogQHBhcmFtIGVuZCAob3B0KSBTZXQgdG8gdHJ1ZSB0byBhc3NpZ24geDIgYW5kIHkyIGNvb3JkaW5hdGVzIG9mIHRoZSBsaW5lLiBEZWZhdWx0IGFzc2lnbiB0byB4MSBhbmQgeTEuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfbW92ZVRvUHJvamVjdGVkUG9zaXRpb24ocHJvamVjdGVkUG9zaXRpb246IFZlY3RvcjMsIGVuZDogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeDogc3RyaW5nID0gcHJvamVjdGVkUG9zaXRpb24ueCArIHRoaXMuX2xpbmtPZmZzZXRYLmdldFZhbHVlKHRoaXMuX2hvc3QpICsgXCJweFwiO1xyXG4gICAgICAgIGNvbnN0IHk6IHN0cmluZyA9IHByb2plY3RlZFBvc2l0aW9uLnkgKyB0aGlzLl9saW5rT2Zmc2V0WS5nZXRWYWx1ZSh0aGlzLl9ob3N0KSArIFwicHhcIjtcclxuXHJcbiAgICAgICAgaWYgKGVuZCkge1xyXG4gICAgICAgICAgICB0aGlzLngyID0geDtcclxuICAgICAgICAgICAgdGhpcy55MiA9IHk7XHJcbiAgICAgICAgICAgIHRoaXMuX3gyLmlnbm9yZUFkYXB0aXZlU2NhbGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3kyLmlnbm9yZUFkYXB0aXZlU2NhbGluZyA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy54MSA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMueTEgPSB5O1xyXG4gICAgICAgICAgICB0aGlzLl94MS5pZ25vcmVBZGFwdGl2ZVNjYWxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl95MS5pZ25vcmVBZGFwdGl2ZVNjYWxpbmcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuTGluZVwiLCBMaW5lKTtcclxuIiwiaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuXHJcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9sXCI7XHJcbmltcG9ydCB7IE11bHRpTGluZVBvaW50IH0gZnJvbSBcIi4uL211bHRpTGluZVBvaW50XCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgdHlwZSB7IFZlY3RvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIG11bHRpIGxpbmUgY29udHJvbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE11bHRpTGluZSBleHRlbmRzIENvbnRyb2wge1xyXG4gICAgcHJpdmF0ZSBfbGluZVdpZHRoOiBudW1iZXIgPSAxO1xyXG4gICAgcHJpdmF0ZSBfZGFzaDogbnVtYmVyW107XHJcbiAgICBwcml2YXRlIF9wb2ludHM6IE51bGxhYmxlPE11bHRpTGluZVBvaW50PltdO1xyXG5cclxuICAgIHByaXZhdGUgX21pblg6IE51bGxhYmxlPG51bWJlcj47XHJcbiAgICBwcml2YXRlIF9taW5ZOiBOdWxsYWJsZTxudW1iZXI+O1xyXG4gICAgcHJpdmF0ZSBfbWF4WDogTnVsbGFibGU8bnVtYmVyPjtcclxuICAgIHByaXZhdGUgX21heFk6IE51bGxhYmxlPG51bWJlcj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IE11bHRpTGluZVxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBvdmVycmlkZSBuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY1NpemUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuaXNIaXRUZXN0VmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2hvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ7XHJcbiAgICAgICAgdGhpcy5fdmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9UT1A7XHJcblxyXG4gICAgICAgIHRoaXMuX2Rhc2ggPSBbXTtcclxuICAgICAgICB0aGlzLl9wb2ludHMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGRhc2ggcGF0dGVybiAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGRhc2goKTogQXJyYXk8bnVtYmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rhc2g7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBkYXNoKHZhbHVlOiBBcnJheTxudW1iZXI+KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rhc2ggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2Rhc2ggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBwb2ludCBzdG9yZWQgYXQgc3BlY2lmaWVkIGluZGV4XHJcbiAgICAgKiBAcGFyYW0gaW5kZXggZGVmaW5lcyB0aGUgaW5kZXggdG8gbG9vayBmb3JcclxuICAgICAqIEByZXR1cm5zIHRoZSByZXF1ZXN0ZWQgcG9pbnQgaWYgZm91bmRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEF0KGluZGV4OiBudW1iZXIpOiBNdWx0aUxpbmVQb2ludCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9wb2ludHNbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvaW50c1tpbmRleF0gPSBuZXcgTXVsdGlMaW5lUG9pbnQodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRzW2luZGV4XSBhcyBNdWx0aUxpbmVQb2ludDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogRnVuY3Rpb24gY2FsbGVkIHdoZW4gYSBwb2ludCBpcyB1cGRhdGVkICovXHJcbiAgICBwdWJsaWMgb25Qb2ludFVwZGF0ZSA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgbmV3IHBvaW50cyB0byB0aGUgcG9pbnQgY29sbGVjdGlvblxyXG4gICAgICogQHBhcmFtIGl0ZW1zIGRlZmluZXMgdGhlIGxpc3Qgb2YgaXRlbXMgKG1lc2gsIGNvbnRyb2wgb3IgMmQgY29vcmRpbmF0ZXMpIHRvIGFkZFxyXG4gICAgICogQHJldHVybnMgdGhlIGxpc3Qgb2YgY3JlYXRlZCBNdWx0aUxpbmVQb2ludFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkKC4uLml0ZW1zOiAoQWJzdHJhY3RNZXNoIHwgQ29udHJvbCB8IHsgeDogc3RyaW5nIHwgbnVtYmVyOyB5OiBzdHJpbmcgfCBudW1iZXIgfSlbXSk6IE11bHRpTGluZVBvaW50W10ge1xyXG4gICAgICAgIHJldHVybiBpdGVtcy5tYXAoKGl0ZW0pID0+IHRoaXMucHVzaChpdGVtKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbmV3IHBvaW50IHRvIHRoZSBwb2ludCBjb2xsZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gaXRlbSBkZWZpbmVzIHRoZSBpdGVtIChtZXNoLCBjb250cm9sIG9yIDJkIGNvb3JkaW5hdGVzKSB0byBhZGRcclxuICAgICAqIEByZXR1cm5zIHRoZSBjcmVhdGVkIE11bHRpTGluZVBvaW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwdXNoKGl0ZW0/OiBBYnN0cmFjdE1lc2ggfCBDb250cm9sIHwgeyB4OiBzdHJpbmcgfCBudW1iZXI7IHk6IHN0cmluZyB8IG51bWJlciB9KTogTXVsdGlMaW5lUG9pbnQge1xyXG4gICAgICAgIGNvbnN0IHBvaW50OiBNdWx0aUxpbmVQb2ludCA9IHRoaXMuZ2V0QXQodGhpcy5fcG9pbnRzLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIGlmIChpdGVtID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBBYnN0cmFjdE1lc2gpIHtcclxuICAgICAgICAgICAgcG9pbnQubWVzaCA9IGl0ZW07XHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtIGluc3RhbmNlb2YgQ29udHJvbCkge1xyXG4gICAgICAgICAgICBwb2ludC5jb250cm9sID0gaXRlbTtcclxuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0ueCAhPSBudWxsICYmIGl0ZW0ueSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHBvaW50LnggPSBpdGVtLng7XHJcbiAgICAgICAgICAgIHBvaW50LnkgPSBpdGVtLnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcG9pbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYSBzcGVjaWZpYyB2YWx1ZSBvciBwb2ludCBmcm9tIHRoZSBhY3RpdmUgcG9pbnQgY29sbGVjdGlvblxyXG4gICAgICogQHBhcmFtIHZhbHVlIGRlZmluZXMgdGhlIHZhbHVlIG9yIHBvaW50IHRvIHJlbW92ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVtb3ZlKHZhbHVlOiBudW1iZXIgfCBNdWx0aUxpbmVQb2ludCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBpbmRleDogbnVtYmVyO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBNdWx0aUxpbmVQb2ludCkge1xyXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuX3BvaW50cy5pbmRleE9mKHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwb2ludDogTnVsbGFibGU8TXVsdGlMaW5lUG9pbnQ+ID0gdGhpcy5fcG9pbnRzW2luZGV4XTtcclxuXHJcbiAgICAgICAgaWYgKCFwb2ludCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwb2ludC5kaXNwb3NlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvaW50cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzZXRzIHRoaXMgb2JqZWN0IHRvIGluaXRpYWwgc3RhdGUgKG5vIHBvaW50KVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuX3BvaW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRoaXMuX3BvaW50cy5sZW5ndGggLSAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldHMgYWxsIGxpbmtzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZXNldExpbmtzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3BvaW50cy5mb3JFYWNoKChwb2ludCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocG9pbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcG9pbnQucmVzZXRMaW5rcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBsaW5lIHdpZHRoICovXHJcbiAgICBwdWJsaWMgZ2V0IGxpbmVXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBsaW5lV2lkdGgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9saW5lV2lkdGggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2xpbmVXaWR0aCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIHNldCBob3Jpem9udGFsQWxpZ25tZW50KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIHNldCB2ZXJ0aWNhbEFsaWdubWVudCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJNdWx0aUxpbmVcIjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2RyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hhZG93Qmx1ciB8fCB0aGlzLnNoYWRvd09mZnNldFggfHwgdGhpcy5zaGFkb3dPZmZzZXRZKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Q29sb3IgPSB0aGlzLnNoYWRvd0NvbG9yO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSB0aGlzLnNoYWRvd0JsdXI7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IHRoaXMuc2hhZG93T2Zmc2V0WDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gdGhpcy5zaGFkb3dPZmZzZXRZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYXBwbHlTdGF0ZXMoY29udGV4dCk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gdGhpcy5fbGluZVdpZHRoO1xyXG4gICAgICAgIGNvbnRleHQuc2V0TGluZURhc2godGhpcy5fZGFzaCk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgICAgIGxldCBmaXJzdDogYm9vbGVhbiA9IHRydWU7IC8vZmlyc3QgaW5kZXggaXMgbm90IG5lY2Vzc2FyaWx5IDBcclxuICAgICAgICBsZXQgcHJldmlvdXNQb2ludDogVmVjdG9yMztcclxuXHJcbiAgICAgICAgdGhpcy5fcG9pbnRzLmZvckVhY2goKHBvaW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludC5fcG9pbnQueCwgcG9pbnQuX3BvaW50LnkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQuX3BvaW50LnogPCAxICYmIHByZXZpb3VzUG9pbnQueiA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludC5fcG9pbnQueCwgcG9pbnQuX3BvaW50LnkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludC5fcG9pbnQueCwgcG9pbnQuX3BvaW50LnkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByZXZpb3VzUG9pbnQgPSBwb2ludC5fcG9pbnQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYWRkaXRpb25hbFByb2Nlc3NpbmcoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbWluWCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fbWluWSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fbWF4WCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fbWF4WSA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvaW50cy5mb3JFYWNoKChwb2ludCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBvaW50LnRyYW5zbGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX21pblggPT0gbnVsbCB8fCBwb2ludC5fcG9pbnQueCA8IHRoaXMuX21pblgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21pblggPSBwb2ludC5fcG9pbnQueDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fbWluWSA9PSBudWxsIHx8IHBvaW50Ll9wb2ludC55IDwgdGhpcy5fbWluWSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWluWSA9IHBvaW50Ll9wb2ludC55O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYXhYID09IG51bGwgfHwgcG9pbnQuX3BvaW50LnggPiB0aGlzLl9tYXhYKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhYID0gcG9pbnQuX3BvaW50Lng7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX21heFkgPT0gbnVsbCB8fCBwb2ludC5fcG9pbnQueSA+IHRoaXMuX21heFkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21heFkgPSBwb2ludC5fcG9pbnQueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fbWluWCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21pblggPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fbWluWSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21pblkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fbWF4WCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21heFggPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fbWF4WSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21heFkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX21lYXN1cmUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21pblggPT0gbnVsbCB8fCB0aGlzLl9tYXhYID09IG51bGwgfHwgdGhpcy5fbWluWSA9PSBudWxsIHx8IHRoaXMuX21heFkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCA9IE1hdGguYWJzKHRoaXMuX21heFggLSB0aGlzLl9taW5YKSArIHRoaXMuX2xpbmVXaWR0aDtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgPSBNYXRoLmFicyh0aGlzLl9tYXhZIC0gdGhpcy5fbWluWSkgKyB0aGlzLl9saW5lV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9jb21wdXRlQWxpZ25tZW50KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9taW5YID09IG51bGwgfHwgdGhpcy5fbWluWSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgPSB0aGlzLl9taW5YIC0gdGhpcy5fbGluZVdpZHRoIC8gMjtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgPSB0aGlzLl9taW5ZIC0gdGhpcy5fbGluZVdpZHRoIC8gMjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcblxyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICAgIH1cclxufVxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuTXVsdGlMaW5lXCIsIE11bHRpTGluZSk7XHJcbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHR5cGUgeyBWZWN0b3IyIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuXHJcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9sXCI7XHJcbmltcG9ydCB7IFN0YWNrUGFuZWwgfSBmcm9tIFwiLi9zdGFja1BhbmVsXCI7XHJcbmltcG9ydCB7IFRleHRCbG9jayB9IGZyb20gXCIuL3RleHRCbG9ja1wiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHR5cGUgeyBQb2ludGVySW5mb0Jhc2UgfSBmcm9tIFwiY29yZS9FdmVudHMvcG9pbnRlckV2ZW50c1wiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIHJhZGlvIGJ1dHRvbiBjb250cm9sc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJhZGlvQnV0dG9uIGV4dGVuZHMgQ29udHJvbCB7XHJcbiAgICBwcml2YXRlIF9pc0NoZWNrZWQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2JhY2tncm91bmQgPSBcImJsYWNrXCI7XHJcbiAgICBwcml2YXRlIF9jaGVja1NpemVSYXRpbyA9IDAuODtcclxuICAgIHByaXZhdGUgX3RoaWNrbmVzcyA9IDE7XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBib3JkZXIgdGhpY2tuZXNzICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgdGhpY2tuZXNzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoaWNrbmVzcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRoaWNrbmVzcyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RoaWNrbmVzcyA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdGhpY2tuZXNzID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGdyb3VwIG5hbWUgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdyb3VwID0gXCJcIjtcclxuXHJcbiAgICAvKiogT2JzZXJ2YWJsZSByYWlzZWQgd2hlbiBpc0NoZWNrZWQgaXMgY2hhbmdlZCAqL1xyXG4gICAgcHVibGljIG9uSXNDaGVja2VkQ2hhbmdlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxib29sZWFuPigpO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSByYXRpbyBiZXR3ZWVuIG92ZXJhbGwgc2l6ZSBhbmQgY2hlY2sgc2l6ZSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGNoZWNrU2l6ZVJhdGlvKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrU2l6ZVJhdGlvO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgY2hlY2tTaXplUmF0aW8odmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4oMSwgdmFsdWUpLCAwKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NoZWNrU2l6ZVJhdGlvID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jaGVja1NpemVSYXRpbyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBiYWNrZ3JvdW5kIGNvbG9yICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYmFja2dyb3VuZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYmFja2dyb3VuZCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tncm91bmQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGNoZWNrYm94IGlzIGNoZWNrZWQgb3Igbm90ICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgaXNDaGVja2VkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0NoZWNrZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBpc0NoZWNrZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5faXNDaGVja2VkID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pc0NoZWNrZWQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG5cclxuICAgICAgICB0aGlzLm9uSXNDaGVja2VkQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHZhbHVlKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQ2hlY2tlZCAmJiB0aGlzLl9ob3N0KSB7XHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBhbGwgY29udHJvbHMgZnJvbSBzYW1lIGdyb3VwXHJcbiAgICAgICAgICAgIHRoaXMuX2hvc3QuZXhlY3V0ZU9uQWxsQ29udHJvbHMoKGNvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICgoPGFueT5jb250cm9sKS5ncm91cCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRSYWRpbyA9IDxSYWRpb0J1dHRvbj5jb250cm9sO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkUmFkaW8uZ3JvdXAgPT09IHRoaXMuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZFJhZGlvLmlzQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFJhZGlvQnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5pc1BvaW50ZXJCbG9ja2VyID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiUmFkaW9CdXR0b25cIjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2RyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYXBwbHlTdGF0ZXMoY29udGV4dCk7XHJcbiAgICAgICAgY29uc3QgYWN0dWFsV2lkdGggPSB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAtIHRoaXMuX3RoaWNrbmVzcztcclxuICAgICAgICBjb25zdCBhY3R1YWxIZWlnaHQgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLSB0aGlzLl90aGlja25lc3M7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gdGhpcy5zaGFkb3dDb2xvcjtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gdGhpcy5zaGFkb3dCbHVyO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IHRoaXMuc2hhZG93T2Zmc2V0WTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE91dGVyXHJcbiAgICAgICAgQ29udHJvbC5kcmF3RWxsaXBzZShcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoIC8gMixcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC8gMixcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLyAyIC0gdGhpcy5fdGhpY2tuZXNzIC8gMixcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC8gMiAtIHRoaXMuX3RoaWNrbmVzcyAvIDIsXHJcbiAgICAgICAgICAgIDEsXHJcbiAgICAgICAgICAgIGNvbnRleHRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX2lzRW5hYmxlZCA/IHRoaXMuX2JhY2tncm91bmQgOiB0aGlzLl9kaXNhYmxlZENvbG9yO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zaGFkb3dCbHVyIHx8IHRoaXMuc2hhZG93T2Zmc2V0WCB8fCB0aGlzLnNoYWRvd09mZnNldFkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gMDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRYID0gMDtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gdGhpcy5fdGhpY2tuZXNzO1xyXG5cclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuICAgICAgICAvLyBJbm5lclxyXG4gICAgICAgIGlmICh0aGlzLl9pc0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLl9pc0VuYWJsZWQgPyB0aGlzLmNvbG9yIDogdGhpcy5fZGlzYWJsZWRDb2xvcjtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0V2lkdGggPSBhY3R1YWxXaWR0aCAqIHRoaXMuX2NoZWNrU2l6ZVJhdGlvO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZUhlaWdodCA9IGFjdHVhbEhlaWdodCAqIHRoaXMuX2NoZWNrU2l6ZVJhdGlvO1xyXG5cclxuICAgICAgICAgICAgQ29udHJvbC5kcmF3RWxsaXBzZShcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAvIDIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLyAyLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0V2lkdGggLyAyIC0gdGhpcy5fdGhpY2tuZXNzIC8gMixcclxuICAgICAgICAgICAgICAgIG9mZnNlSGVpZ2h0IC8gMiAtIHRoaXMuX3RoaWNrbmVzcyAvIDIsXHJcbiAgICAgICAgICAgICAgICAxLFxyXG4gICAgICAgICAgICAgICAgY29udGV4dFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEV2ZW50c1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJEb3duKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBidXR0b25JbmRleDogbnVtYmVyLCBwaTogUG9pbnRlckluZm9CYXNlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdXBlci5fb25Qb2ludGVyRG93bih0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBwaSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZWFkT25seSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pc0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0NoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGVhc2lseSBjcmVhdGUgYSByYWRpbyBidXR0b24gd2l0aCBhIGhlYWRlclxyXG4gICAgICogQHBhcmFtIHRpdGxlIGRlZmluZXMgdGhlIGxhYmVsIHRvIHVzZSBmb3IgdGhlIGhlYWRlclxyXG4gICAgICogQHBhcmFtIGdyb3VwIGRlZmluZXMgdGhlIGdyb3VwIHRvIHVzZSBmb3IgdGhlIHJhZGlvIGJ1dHRvblxyXG4gICAgICogQHBhcmFtIGlzQ2hlY2tlZCBkZWZpbmVzIHRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSByYWRpbyBidXR0b25cclxuICAgICAqIEBwYXJhbSBvblZhbHVlQ2hhbmdlZCBkZWZpbmVzIHRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW4gdmFsdWUgY2hhbmdlc1xyXG4gICAgICogQHJldHVybnMgYSBTdGFja1BhbmVsIGNvbnRhaW5pbmcgdGhlIHJhZGlvIGJ1dHRvbiBhbmQgYSB0ZXh0QmxvY2tcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBBZGRSYWRpb0J1dHRvbldpdGhIZWFkZXIodGl0bGU6IHN0cmluZywgZ3JvdXA6IHN0cmluZywgaXNDaGVja2VkOiBib29sZWFuLCBvblZhbHVlQ2hhbmdlZDogKGJ1dHRvbjogUmFkaW9CdXR0b24sIHZhbHVlOiBib29sZWFuKSA9PiB2b2lkKTogU3RhY2tQYW5lbCB7XHJcbiAgICAgICAgY29uc3QgcGFuZWwgPSBuZXcgU3RhY2tQYW5lbCgpO1xyXG4gICAgICAgIHBhbmVsLmlzVmVydGljYWwgPSBmYWxzZTtcclxuICAgICAgICBwYW5lbC5oZWlnaHQgPSBcIjMwcHhcIjtcclxuXHJcbiAgICAgICAgY29uc3QgcmFkaW8gPSBuZXcgUmFkaW9CdXR0b24oKTtcclxuICAgICAgICByYWRpby53aWR0aCA9IFwiMjBweFwiO1xyXG4gICAgICAgIHJhZGlvLmhlaWdodCA9IFwiMjBweFwiO1xyXG4gICAgICAgIHJhZGlvLmlzQ2hlY2tlZCA9IGlzQ2hlY2tlZDtcclxuICAgICAgICByYWRpby5jb2xvciA9IFwiZ3JlZW5cIjtcclxuICAgICAgICByYWRpby5ncm91cCA9IGdyb3VwO1xyXG4gICAgICAgIHJhZGlvLm9uSXNDaGVja2VkQ2hhbmdlZE9ic2VydmFibGUuYWRkKCh2YWx1ZSkgPT4gb25WYWx1ZUNoYW5nZWQocmFkaW8sIHZhbHVlKSk7XHJcbiAgICAgICAgcGFuZWwuYWRkQ29udHJvbChyYWRpbyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IG5ldyBUZXh0QmxvY2soKTtcclxuICAgICAgICBoZWFkZXIudGV4dCA9IHRpdGxlO1xyXG4gICAgICAgIGhlYWRlci53aWR0aCA9IFwiMTgwcHhcIjtcclxuICAgICAgICBoZWFkZXIucGFkZGluZ0xlZnQgPSBcIjVweFwiO1xyXG4gICAgICAgIGhlYWRlci50ZXh0SG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgICAgICBoZWFkZXIuY29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgcGFuZWwuYWRkQ29udHJvbChoZWFkZXIpO1xyXG5cclxuICAgICAgICByZXR1cm4gcGFuZWw7XHJcbiAgICB9XHJcbn1cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLlJhZGlvQnV0dG9uXCIsIFJhZGlvQnV0dG9uKTtcclxuIiwiaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIi4vY29udGFpbmVyXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVhc3VyZSB9IGZyb20gXCIuLi9tZWFzdXJlXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5cclxuLyoqIENsYXNzIHVzZWQgdG8gY3JlYXRlIHJlY3RhbmdsZSBjb250YWluZXIgKi9cclxuZXhwb3J0IGNsYXNzIFJlY3RhbmdsZSBleHRlbmRzIENvbnRhaW5lciB7XHJcbiAgICBwcml2YXRlIF90aGlja25lc3MgPSAxO1xyXG4gICAgcHJpdmF0ZSBfY29ybmVyUmFkaXVzID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgcHJpdmF0ZSBfY2FjaGVkUmFkaXVzID0gWzAsIDAsIDAsIDBdO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYm9yZGVyIHRoaWNrbmVzcyAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHRoaWNrbmVzcygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aGlja25lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB0aGlja25lc3ModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl90aGlja25lc3MgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3RoaWNrbmVzcyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgY29ybmVyIHJhZGl1cyBvZiBhbGwgYW5nbGVzICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgY29ybmVyUmFkaXVzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nvcm5lclJhZGl1c1swXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGNvcm5lclJhZGl1cyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29ybmVyUmFkaXVzWzBdID09PSB2YWx1ZSAmJiB0aGlzLl9jb3JuZXJSYWRpdXNbMV0gPT09IHZhbHVlICYmIHRoaXMuX2Nvcm5lclJhZGl1c1syXSA9PT0gdmFsdWUgJiYgdGhpcy5fY29ybmVyUmFkaXVzWzNdID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jb3JuZXJSYWRpdXNbMF0gPSB0aGlzLl9jb3JuZXJSYWRpdXNbMV0gPSB0aGlzLl9jb3JuZXJSYWRpdXNbMl0gPSB0aGlzLl9jb3JuZXJSYWRpdXNbM10gPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGNvcm5lciByYWRpdXMgdG9wIGxlZnQgYW5nbGUgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBjb3JuZXJSYWRpdXNYKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nvcm5lclJhZGl1c1swXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGNvcm5lclJhZGl1c1godmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb3JuZXJSYWRpdXNbMF0gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY29ybmVyUmFkaXVzWzBdID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgY29ybmVyIHJhZGl1cyB0b3AgcmlnaHQgYW5nbGUgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBjb3JuZXJSYWRpdXNZKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nvcm5lclJhZGl1c1sxXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGNvcm5lclJhZGl1c1kodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb3JuZXJSYWRpdXNbMV0gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY29ybmVyUmFkaXVzWzFdID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgY29ybmVyIHJhZGl1cyBib3R0b20gbGVmdCBhbmdsZSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGNvcm5lclJhZGl1c1ooKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29ybmVyUmFkaXVzWzJdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgY29ybmVyUmFkaXVzWih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Nvcm5lclJhZGl1c1syXSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9jb3JuZXJSYWRpdXNbMl0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBjb3JuZXIgcmFkaXVzIGJvdHRvbSByaWdodCBhbmdsZSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGNvcm5lclJhZGl1c1coKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29ybmVyUmFkaXVzWzNdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgY29ybmVyUmFkaXVzVyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Nvcm5lclJhZGl1c1szXSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9jb3JuZXJSYWRpdXNbM10gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgUmVjdGFuZ2xlXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiUmVjdGFuZ2xlXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9jb21wdXRlQWRkaXRpb25hbE9mZnNldFgoKSB7XHJcbiAgICAgICAgbGV0IGFkZGl0aW9uYWxXaWR0aCA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Nvcm5lclJhZGl1c1swXSAhPT0gMCB8fCB0aGlzLl9jb3JuZXJSYWRpdXNbMV0gIT09IDAgfHwgdGhpcy5fY29ybmVyUmFkaXVzWzJdICE9PSAwIHx8IHRoaXMuX2Nvcm5lclJhZGl1c1szXSAhPT0gMCkge1xyXG4gICAgICAgICAgICAvLyBUYWtlIGluIGFjY291bnQgdGhlIGFsaWFzaW5nXHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxXaWR0aCArPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy50aGlja25lc3MpIHtcclxuICAgICAgICAgICAgYWRkaXRpb25hbFdpZHRoICs9IHRoaXMudGhpY2tuZXNzIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFkZGl0aW9uYWxXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2NvbXB1dGVBZGRpdGlvbmFsT2Zmc2V0WSgpIHtcclxuICAgICAgICBsZXQgYWRkaXRpb25hbEhlaWdodCA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Nvcm5lclJhZGl1c1swXSAhPT0gMCB8fCB0aGlzLl9jb3JuZXJSYWRpdXNbMV0gIT09IDAgfHwgdGhpcy5fY29ybmVyUmFkaXVzWzJdICE9PSAwIHx8IHRoaXMuX2Nvcm5lclJhZGl1c1szXSAhPT0gMCkge1xyXG4gICAgICAgICAgICAvLyBUYWtlIGluIGFjY291bnQgdGhlIGFsaWFzaW5nXHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxIZWlnaHQgKz0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMudGhpY2tuZXNzKSB7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxIZWlnaHQgKz0gdGhpcy50aGlja25lc3MgLyAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWRkaXRpb25hbEhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2dldFJlY3RhbmdsZUZpbGwoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QmFja2dyb3VuZENvbG9yKGNvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfbG9jYWxEcmF3KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gdGhpcy5zaGFkb3dDb2xvcjtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gdGhpcy5zaGFkb3dCbHVyO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IHRoaXMuc2hhZG93T2Zmc2V0WTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9iYWNrZ3JvdW5kIHx8IHRoaXMuX2JhY2tncm91bmRHcmFkaWVudCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX2dldFJlY3RhbmdsZUZpbGwoY29udGV4dCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY29ybmVyUmFkaXVzWzBdICE9PSAwIHx8IHRoaXMuX2Nvcm5lclJhZGl1c1sxXSAhPT0gMCB8fCB0aGlzLl9jb3JuZXJSYWRpdXNbMl0gIT09IDAgfHwgdGhpcy5fY29ybmVyUmFkaXVzWzNdICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3Um91bmRlZFJlY3QoY29udGV4dCwgdGhpcy5fdGhpY2tuZXNzIC8gMik7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3RoaWNrbmVzcykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaGFkb3dCbHVyIHx8IHRoaXMuc2hhZG93T2Zmc2V0WCB8fCB0aGlzLnNoYWRvd09mZnNldFkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Qmx1ciA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSAwO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuY29sb3IgfHwgdGhpcy5ncmFkaWVudCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuZ3JhZGllbnQgPyB0aGlzLmdyYWRpZW50LmdldENhbnZhc0dyYWRpZW50KGNvbnRleHQpIDogdGhpcy5jb2xvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHRoaXMuX3RoaWNrbmVzcztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb3JuZXJSYWRpdXNbMF0gIT09IDAgfHwgdGhpcy5fY29ybmVyUmFkaXVzWzFdICE9PSAwIHx8IHRoaXMuX2Nvcm5lclJhZGl1c1syXSAhPT0gMCB8fCB0aGlzLl9jb3JuZXJSYWRpdXNbM10gIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdSb3VuZGVkUmVjdChjb250ZXh0LCB0aGlzLl90aGlja25lc3MgLyAyKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVJlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRoaXMuX3RoaWNrbmVzcyAvIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGhpcy5fdGhpY2tuZXNzIC8gMixcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAtIHRoaXMuX3RoaWNrbmVzcyxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLSB0aGlzLl90aGlja25lc3NcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYWRkaXRpb25hbFByb2Nlc3NpbmcocGFyZW50TWVhc3VyZTogTWVhc3VyZSwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5fYWRkaXRpb25hbFByb2Nlc3NpbmcocGFyZW50TWVhc3VyZSwgY29udGV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMuX21lYXN1cmVGb3JDaGlsZHJlbi53aWR0aCAtPSAyICogdGhpcy5fdGhpY2tuZXNzO1xyXG4gICAgICAgIHRoaXMuX21lYXN1cmVGb3JDaGlsZHJlbi5oZWlnaHQgLT0gMiAqIHRoaXMuX3RoaWNrbmVzcztcclxuICAgICAgICB0aGlzLl9tZWFzdXJlRm9yQ2hpbGRyZW4ubGVmdCArPSB0aGlzLl90aGlja25lc3M7XHJcbiAgICAgICAgdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLnRvcCArPSB0aGlzLl90aGlja25lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZHJhd1JvdW5kZWRSZWN0KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0LCBvZmZzZXQ6IG51bWJlciA9IDApOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB4ID0gdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIG9mZnNldDtcclxuICAgICAgICBjb25zdCB5ID0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgb2Zmc2V0O1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLSBvZmZzZXQgKiAyO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAtIG9mZnNldCAqIDI7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9jb3JuZXJSYWRpdXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZFJhZGl1c1tpbmRleF0gPSBNYXRoLmFicyhNYXRoLm1pbihoZWlnaHQgLyAyLCBNYXRoLm1pbih3aWR0aCAvIDIsIHRoaXMuX2Nvcm5lclJhZGl1c1tpbmRleF0pKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHggKyB0aGlzLl9jYWNoZWRSYWRpdXNbMF0sIHkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHggKyB3aWR0aCAtIHRoaXMuX2NhY2hlZFJhZGl1c1sxXSwgeSk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoeCArIHdpZHRoIC0gdGhpcy5fY2FjaGVkUmFkaXVzWzFdLCB5ICsgdGhpcy5fY2FjaGVkUmFkaXVzWzFdLCB0aGlzLl9jYWNoZWRSYWRpdXNbMV0sICgzICogTWF0aC5QSSkgLyAyLCBNYXRoLlBJICogMik7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gdGhpcy5fY2FjaGVkUmFkaXVzWzJdKTtcclxuICAgICAgICBjb250ZXh0LmFyYyh4ICsgd2lkdGggLSB0aGlzLl9jYWNoZWRSYWRpdXNbMl0sIHkgKyBoZWlnaHQgLSB0aGlzLl9jYWNoZWRSYWRpdXNbMl0sIHRoaXMuX2NhY2hlZFJhZGl1c1syXSwgMCwgTWF0aC5QSSAvIDIpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHggKyB0aGlzLl9jYWNoZWRSYWRpdXNbM10sIHkgKyBoZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQuYXJjKHggKyB0aGlzLl9jYWNoZWRSYWRpdXNbM10sIHkgKyBoZWlnaHQgLSB0aGlzLl9jYWNoZWRSYWRpdXNbM10sIHRoaXMuX2NhY2hlZFJhZGl1c1szXSwgTWF0aC5QSSAvIDIsIE1hdGguUEkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHgsIHkgKyB0aGlzLl9jYWNoZWRSYWRpdXNbMF0pO1xyXG4gICAgICAgIGNvbnRleHQuYXJjKHggKyB0aGlzLl9jYWNoZWRSYWRpdXNbMF0sIHkgKyB0aGlzLl9jYWNoZWRSYWRpdXNbMF0sIHRoaXMuX2NhY2hlZFJhZGl1c1swXSwgTWF0aC5QSSwgKDMgKiBNYXRoLlBJKSAvIDIpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9jbGlwRm9yQ2hpbGRyZW4oY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICBpZiAodGhpcy5fY29ybmVyUmFkaXVzWzBdICE9PSAwIHx8IHRoaXMuX2Nvcm5lclJhZGl1c1sxXSAhPT0gMCB8fCB0aGlzLl9jb3JuZXJSYWRpdXNbMl0gIT09IDAgfHwgdGhpcy5fY29ybmVyUmFkaXVzWzNdICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYXdSb3VuZGVkUmVjdChjb250ZXh0LCB0aGlzLl90aGlja25lc3MpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmNsaXAoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLlJlY3RhbmdsZVwiLCBSZWN0YW5nbGUpO1xyXG4iLCJpbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUgeyBPYnNlcnZlciB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgdHlwZSB7IFZlY3RvcjIgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoXCI7XHJcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi9yZWN0YW5nbGVcIjtcclxuaW1wb3J0IHsgR3JpZCB9IGZyb20gXCIuLi9ncmlkXCI7XHJcbmltcG9ydCB0eXBlIHsgSW1hZ2UgfSBmcm9tIFwiLi4vaW1hZ2VcIjtcclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuLi9jb250cm9sXCI7XHJcbmltcG9ydCB0eXBlIHsgQ29udGFpbmVyIH0gZnJvbSBcIi4uL2NvbnRhaW5lclwiO1xyXG5pbXBvcnQgdHlwZSB7IE1lYXN1cmUgfSBmcm9tIFwiLi4vLi4vbWVhc3VyZVwiO1xyXG5pbXBvcnQgdHlwZSB7IEFkdmFuY2VkRHluYW1pY1RleHR1cmUgfSBmcm9tIFwiLi4vLi4vYWR2YW5jZWREeW5hbWljVGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBfU2Nyb2xsVmlld2VyV2luZG93IH0gZnJvbSBcIi4vc2Nyb2xsVmlld2VyV2luZG93XCI7XHJcbmltcG9ydCB7IFNjcm9sbEJhciB9IGZyb20gXCIuLi9zbGlkZXJzL3Njcm9sbEJhclwiO1xyXG5pbXBvcnQgeyBJbWFnZVNjcm9sbEJhciB9IGZyb20gXCIuLi9zbGlkZXJzL2ltYWdlU2Nyb2xsQmFyXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgdHlwZSB7IElDYW52YXNSZW5kZXJpbmdDb250ZXh0IH0gZnJvbSBcImNvcmUvRW5naW5lcy9JQ2FudmFzXCI7XHJcbmltcG9ydCB7IHNlcmlhbGl6ZSB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9yc1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gaG9sZCBhIHZpZXdlciB3aW5kb3cgYW5kIHNsaWRlcnMgaW4gYSBncmlkXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2Nyb2xsVmlld2VyIGV4dGVuZHMgUmVjdGFuZ2xlIHtcclxuICAgIHByaXZhdGUgX2dyaWQ6IEdyaWQ7XHJcbiAgICBwcml2YXRlIF9ob3Jpem9udGFsQmFyU3BhY2U6IFJlY3RhbmdsZTtcclxuICAgIHByaXZhdGUgX3ZlcnRpY2FsQmFyU3BhY2U6IFJlY3RhbmdsZTtcclxuICAgIHByaXZhdGUgX2RyYWdTcGFjZTogUmVjdGFuZ2xlO1xyXG4gICAgcHJpdmF0ZSBfaG9yaXpvbnRhbEJhcjogU2Nyb2xsQmFyIHwgSW1hZ2VTY3JvbGxCYXI7XHJcbiAgICBwcml2YXRlIF92ZXJ0aWNhbEJhcjogU2Nyb2xsQmFyIHwgSW1hZ2VTY3JvbGxCYXI7XHJcbiAgICBwcml2YXRlIF9iYXJDb2xvcjogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfYmFyQmFja2dyb3VuZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfYmFySW1hZ2U6IEltYWdlO1xyXG4gICAgcHJpdmF0ZSBfaG9yaXpvbnRhbEJhckltYWdlOiBJbWFnZTtcclxuICAgIHByaXZhdGUgX3ZlcnRpY2FsQmFySW1hZ2U6IEltYWdlO1xyXG4gICAgcHJpdmF0ZSBfYmFyQmFja2dyb3VuZEltYWdlOiBJbWFnZTtcclxuICAgIHByaXZhdGUgX2hvcml6b250YWxCYXJCYWNrZ3JvdW5kSW1hZ2U6IEltYWdlO1xyXG4gICAgcHJpdmF0ZSBfdmVydGljYWxCYXJCYWNrZ3JvdW5kSW1hZ2U6IEltYWdlO1xyXG4gICAgcHJpdmF0ZSBfYmFyU2l6ZTogbnVtYmVyID0gMjA7XHJcbiAgICBwcml2YXRlIF93aW5kb3c6IF9TY3JvbGxWaWV3ZXJXaW5kb3c7XHJcbiAgICBwcml2YXRlIF9wb2ludGVySXNPdmVyOiBCb29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF93aGVlbFByZWNpc2lvbjogbnVtYmVyID0gMC4wNTtcclxuICAgIHByaXZhdGUgX29uV2hlZWxPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8VmVjdG9yMj4+O1xyXG4gICAgcHJpdmF0ZSBfY2xpZW50V2lkdGg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2NsaWVudEhlaWdodDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfdXNlSW1hZ2VCYXI6IEJvb2xlYW47XHJcbiAgICBwcml2YXRlIF90aHVtYkxlbmd0aDogbnVtYmVyID0gMC41O1xyXG4gICAgcHJpdmF0ZSBfdGh1bWJIZWlnaHQ6IG51bWJlciA9IDE7XHJcbiAgICBwcml2YXRlIF9iYXJJbWFnZUhlaWdodDogbnVtYmVyID0gMTtcclxuICAgIHByaXZhdGUgX2hvcml6b250YWxCYXJJbWFnZUhlaWdodDogbnVtYmVyID0gMTtcclxuICAgIHByaXZhdGUgX3ZlcnRpY2FsQmFySW1hZ2VIZWlnaHQ6IG51bWJlciA9IDE7XHJcbiAgICBwcml2YXRlIF9vbGRXaW5kb3dDb250ZW50c1dpZHRoOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfb2xkV2luZG93Q29udGVudHNIZWlnaHQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBob3Jpem9udGFsIHNjcm9sbGJhclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGhvcml6b250YWxCYXIoKTogU2Nyb2xsQmFyIHwgSW1hZ2VTY3JvbGxCYXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ob3Jpem9udGFsQmFyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgdmVydGljYWwgc2Nyb2xsYmFyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgdmVydGljYWxCYXIoKTogU2Nyb2xsQmFyIHwgSW1hZ2VTY3JvbGxCYXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJ0aWNhbEJhcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBuZXcgY29udHJvbCB0byB0aGUgY3VycmVudCBjb250YWluZXJcclxuICAgICAqIEBwYXJhbSBjb250cm9sIGRlZmluZXMgdGhlIGNvbnRyb2wgdG8gYWRkXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBjb250YWluZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGFkZENvbnRyb2woY29udHJvbDogTnVsbGFibGU8Q29udHJvbD4pOiBDb250YWluZXIge1xyXG4gICAgICAgIGlmICghY29udHJvbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3dpbmRvdy5hZGRDb250cm9sKGNvbnRyb2wpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYSBjb250cm9sIGZyb20gdGhlIGN1cnJlbnQgY29udGFpbmVyXHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBkZWZpbmVzIHRoZSBjb250cm9sIHRvIHJlbW92ZVxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgY29udGFpbmVyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSByZW1vdmVDb250cm9sKGNvbnRyb2w6IENvbnRyb2wpOiBDb250YWluZXIge1xyXG4gICAgICAgIHRoaXMuX3dpbmRvdy5yZW1vdmVDb250cm9sKGNvbnRyb2wpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIHRoZSBsaXN0IG9mIGNoaWxkcmVuICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0IGNoaWxkcmVuKCk6IENvbnRyb2xbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpbmRvdy5jaGlsZHJlbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2ZsYWdEZXNjZW5kYW50c0FzTWF0cml4RGlydHkoKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLl9jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjaGlsZC5fbWFya01hdHJpeEFzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGcmVlemVzIG9yIHVuZnJlZXplcyB0aGUgY29udHJvbHMgaW4gdGhlIHdpbmRvdy5cclxuICAgICAqIFdoZW4gY29udHJvbHMgYXJlIGZyb3plbiwgdGhlIHNjcm9sbCB2aWV3ZXIgY2FuIHJlbmRlciBhIGxvdCBtb3JlIHF1aWNrbHkgYnV0IHVwZGF0ZXMgdG8gcG9zaXRpb25zL3NpemVzIG9mIGNvbnRyb2xzXHJcbiAgICAgKiBhcmUgbm90IHRha2VuIGludG8gYWNjb3VudC4gSWYgeW91IHdhbnQgdG8gY2hhbmdlIHBvc2l0aW9ucy9zaXplcywgdW5mcmVlemUsIHBlcmZvcm0gdGhlIGNoYW5nZXMgdGhlbiBmcmVlemUgYWdhaW5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBmcmVlemVDb250cm9scygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2luZG93LmZyZWV6ZUNvbnRyb2xzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZnJlZXplQ29udHJvbHModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl93aW5kb3cuZnJlZXplQ29udHJvbHMgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyB0aGUgYnVja2V0IHdpZHRoICovXHJcbiAgICBwdWJsaWMgZ2V0IGJ1Y2tldFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpbmRvdy5idWNrZXRXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyB0aGUgYnVja2V0IGhlaWdodCAqL1xyXG4gICAgcHVibGljIGdldCBidWNrZXRIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2luZG93LmJ1Y2tldEhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGJ1Y2tldCBzaXplcy5cclxuICAgICAqIFdoZW4gZnJlZXplQ29udHJvbHMgaXMgdHJ1ZSwgc2V0dGluZyBhIG5vbi16ZXJvIGJ1Y2tldCBzaXplIHdpbGwgaW1wcm92ZSBwZXJmb3JtYW5jZXMgYnkgdXBkYXRpbmcgb25seVxyXG4gICAgICogY29udHJvbHMgdGhhdCBhcmUgdmlzaWJsZS4gVGhlIGJ1Y2tldCBzaXplcyBpcyB1c2VkIHRvIHN1YmRpdmlkZSAoaW50ZXJuYWxseSkgdGhlIHdpbmRvdyBhcmVhIHRvIHNtYWxsZXIgYXJlYXMgaW50byB3aGljaFxyXG4gICAgICogY29udHJvbHMgYXJlIGRpc3BhdGNoZWQuIFNvLCB0aGUgc2l6ZSBzaG91bGQgYmUgcm91Z2hseSBlcXVhbHMgdG8gdGhlIG1lYW4gc2l6ZSBvZiBhbGwgdGhlIGNvbnRyb2xzIG9mXHJcbiAgICAgKiB0aGUgd2luZG93LiBUbyBkaXNhYmxlIHRoZSB1c2FnZSBvZiBidWNrZXRzLCBzZXRzIGVpdGhlciB3aWR0aCBvciBoZWlnaHQgKG9yIGJvdGgpIHRvIDAuXHJcbiAgICAgKiBQbGVhc2Ugbm90ZSB0aGF0IHVzaW5nIHRoaXMgb3B0aW9uIHdpbGwgcmFpc2UgdGhlIG1lbW9yeSB1c2FnZSAodGhlIGhpZ2hlciB0aGUgYnVja2V0IHNpemVzLCB0aGUgbGVzcyBtZW1vcnlcclxuICAgICAqIHVzZWQpLCB0aGF0J3Mgd2h5IGl0IGlzIG5vdCBlbmFibGVkIGJ5IGRlZmF1bHQuXHJcbiAgICAgKiBAcGFyYW0gd2lkdGggd2lkdGggb2YgdGhlIGJ1Y2tldFxyXG4gICAgICogQHBhcmFtIGhlaWdodCBoZWlnaHQgb2YgdGhlIGJ1Y2tldFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QnVja2V0U2l6ZXMod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl93aW5kb3cuc2V0QnVja2V0U2l6ZXMod2lkdGgsIGhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZm9yY2VIb3Jpem9udGFsQmFyOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9mb3JjZVZlcnRpY2FsQmFyOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JjZXMgdGhlIGhvcml6b250YWwgc2Nyb2xsIGJhciB0byBiZSBkaXNwbGF5ZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBmb3JjZUhvcml6b250YWxCYXIoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvcmNlSG9yaXpvbnRhbEJhcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGZvcmNlSG9yaXpvbnRhbEJhcih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2dyaWQuc2V0Um93RGVmaW5pdGlvbigxLCB2YWx1ZSA/IHRoaXMuX2JhclNpemUgOiAwLCB0cnVlKTtcclxuICAgICAgICB0aGlzLl9ob3Jpem9udGFsQmFyLmlzVmlzaWJsZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2ZvcmNlSG9yaXpvbnRhbEJhciA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm9yY2VzIHRoZSB2ZXJ0aWNhbCBzY3JvbGwgYmFyIHRvIGJlIGRpc3BsYXllZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGZvcmNlVmVydGljYWxCYXIoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvcmNlVmVydGljYWxCYXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBmb3JjZVZlcnRpY2FsQmFyKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fZ3JpZC5zZXRDb2x1bW5EZWZpbml0aW9uKDEsIHZhbHVlID8gdGhpcy5fYmFyU2l6ZSA6IDAsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2FsQmFyLmlzVmlzaWJsZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2ZvcmNlVmVydGljYWxCYXIgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgU2Nyb2xsVmlld2VyXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBvZiBTY3JvbGxWaWV3ZXJcclxuICAgICAqIEBwYXJhbSBpc0ltYWdlQmFzZWRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZT86IHN0cmluZywgaXNJbWFnZUJhc2VkPzogYm9vbGVhbikge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLl91c2VJbWFnZUJhciA9IGlzSW1hZ2VCYXNlZCA/IGlzSW1hZ2VCYXNlZCA6IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLm9uRGlydHlPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxCYXJTcGFjZS5jb2xvciA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZlcnRpY2FsQmFyU3BhY2UuY29sb3IgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnU3BhY2UuY29sb3IgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm9uUG9pbnRlckVudGVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9wb2ludGVySXNPdmVyID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJPdXRPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvaW50ZXJJc092ZXIgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fZ3JpZCA9IG5ldyBHcmlkKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3VzZUltYWdlQmFyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxCYXIgPSBuZXcgSW1hZ2VTY3JvbGxCYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fdmVydGljYWxCYXIgPSBuZXcgSW1hZ2VTY3JvbGxCYXIoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9ob3Jpem9udGFsQmFyID0gbmV3IFNjcm9sbEJhcigpO1xyXG4gICAgICAgICAgICB0aGlzLl92ZXJ0aWNhbEJhciA9IG5ldyBTY3JvbGxCYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3dpbmRvdyA9IG5ldyBfU2Nyb2xsVmlld2VyV2luZG93KFwic2Nyb2xsVmlld2VyX3dpbmRvd1wiKTtcclxuICAgICAgICB0aGlzLl93aW5kb3cuaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgICAgICB0aGlzLl93aW5kb3cudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9UT1A7XHJcblxyXG4gICAgICAgIHRoaXMuX2dyaWQuYWRkQ29sdW1uRGVmaW5pdGlvbigxKTtcclxuICAgICAgICB0aGlzLl9ncmlkLmFkZENvbHVtbkRlZmluaXRpb24oMCwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5fZ3JpZC5hZGRSb3dEZWZpbml0aW9uKDEpO1xyXG4gICAgICAgIHRoaXMuX2dyaWQuYWRkUm93RGVmaW5pdGlvbigwLCB0cnVlKTtcclxuXHJcbiAgICAgICAgc3VwZXIuYWRkQ29udHJvbCh0aGlzLl9ncmlkKTtcclxuICAgICAgICB0aGlzLl9ncmlkLmFkZENvbnRyb2wodGhpcy5fd2luZG93LCAwLCAwKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdmVydGljYWxCYXJTcGFjZSA9IG5ldyBSZWN0YW5nbGUoKTtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNhbEJhclNwYWNlLmhvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ7XHJcbiAgICAgICAgdGhpcy5fdmVydGljYWxCYXJTcGFjZS52ZXJ0aWNhbEFsaWdubWVudCA9IENvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX1RPUDtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNhbEJhclNwYWNlLnRoaWNrbmVzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5fZ3JpZC5hZGRDb250cm9sKHRoaXMuX3ZlcnRpY2FsQmFyU3BhY2UsIDAsIDEpO1xyXG4gICAgICAgIHRoaXMuX2FkZEJhcih0aGlzLl92ZXJ0aWNhbEJhciwgdGhpcy5fdmVydGljYWxCYXJTcGFjZSwgdHJ1ZSwgTWF0aC5QSSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2hvcml6b250YWxCYXJTcGFjZSA9IG5ldyBSZWN0YW5nbGUoKTtcclxuICAgICAgICB0aGlzLl9ob3Jpem9udGFsQmFyU3BhY2UuaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgICAgICB0aGlzLl9ob3Jpem9udGFsQmFyU3BhY2UudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9UT1A7XHJcbiAgICAgICAgdGhpcy5faG9yaXpvbnRhbEJhclNwYWNlLnRoaWNrbmVzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5fZ3JpZC5hZGRDb250cm9sKHRoaXMuX2hvcml6b250YWxCYXJTcGFjZSwgMSwgMCk7XHJcbiAgICAgICAgdGhpcy5fYWRkQmFyKHRoaXMuX2hvcml6b250YWxCYXIsIHRoaXMuX2hvcml6b250YWxCYXJTcGFjZSwgZmFsc2UsIDApO1xyXG5cclxuICAgICAgICB0aGlzLl9kcmFnU3BhY2UgPSBuZXcgUmVjdGFuZ2xlKCk7XHJcbiAgICAgICAgdGhpcy5fZHJhZ1NwYWNlLnRoaWNrbmVzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5fZ3JpZC5hZGRDb250cm9sKHRoaXMuX2RyYWdTcGFjZSwgMSwgMSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2dyaWQuY2xpcENoaWxkcmVuID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIENvbG9yc1xyXG4gICAgICAgIGlmICghdGhpcy5fdXNlSW1hZ2VCYXIpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXJDb2xvciA9IFwiZ3JleVwiO1xyXG4gICAgICAgICAgICB0aGlzLmJhckJhY2tncm91bmQgPSBcInRyYW5zcGFyZW50XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBSZXNldCB0aGUgc2Nyb2xsIHZpZXdlciB3aW5kb3cgdG8gaW5pdGlhbCBzaXplICovXHJcbiAgICBwdWJsaWMgcmVzZXRXaW5kb3coKSB7XHJcbiAgICAgICAgdGhpcy5fd2luZG93LndpZHRoID0gXCIxMDAlXCI7XHJcbiAgICAgICAgdGhpcy5fd2luZG93LmhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJTY3JvbGxWaWV3ZXJcIjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9idWlsZENsaWVudFNpemVzKCkge1xyXG4gICAgICAgIGNvbnN0IHJhdGlvID0gdGhpcy5ob3N0LmlkZWFsUmF0aW87XHJcblxyXG4gICAgICAgIHRoaXMuX3dpbmRvdy5wYXJlbnRDbGllbnRXaWR0aCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoIC0gKHRoaXMuX3ZlcnRpY2FsQmFyLmlzVmlzaWJsZSB8fCB0aGlzLmZvcmNlVmVydGljYWxCYXIgPyB0aGlzLl9iYXJTaXplICogcmF0aW8gOiAwKSAtIDIgKiB0aGlzLnRoaWNrbmVzcztcclxuICAgICAgICB0aGlzLl93aW5kb3cucGFyZW50Q2xpZW50SGVpZ2h0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC0gKHRoaXMuX2hvcml6b250YWxCYXIuaXNWaXNpYmxlIHx8IHRoaXMuZm9yY2VIb3Jpem9udGFsQmFyID8gdGhpcy5fYmFyU2l6ZSAqIHJhdGlvIDogMCkgLSAyICogdGhpcy50aGlja25lc3M7XHJcblxyXG4gICAgICAgIHRoaXMuX2NsaWVudFdpZHRoID0gdGhpcy5fd2luZG93LnBhcmVudENsaWVudFdpZHRoO1xyXG4gICAgICAgIHRoaXMuX2NsaWVudEhlaWdodCA9IHRoaXMuX3dpbmRvdy5wYXJlbnRDbGllbnRIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9hZGRpdGlvbmFsUHJvY2Vzc2luZyhwYXJlbnRNZWFzdXJlOiBNZWFzdXJlLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLl9hZGRpdGlvbmFsUHJvY2Vzc2luZyhwYXJlbnRNZWFzdXJlLCBjb250ZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYnVpbGRDbGllbnRTaXplcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfcG9zdE1lYXN1cmUoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuX3Bvc3RNZWFzdXJlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVNjcm9sbGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NldFdpbmRvd1Bvc2l0aW9uKGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgbW91c2Ugd2hlZWwgcHJlY2lzaW9uXHJcbiAgICAgKiBmcm9tIDAgdG8gMSB3aXRoIGEgZGVmYXVsdCB2YWx1ZSBvZiAwLjA1XHJcbiAgICAgKiAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHdoZWVsUHJlY2lzaW9uKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3doZWVsUHJlY2lzaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgd2hlZWxQcmVjaXNpb24odmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl93aGVlbFByZWNpc2lvbiA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgPiAxKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3doZWVsUHJlY2lzaW9uID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgc2Nyb2xsIGJhciBjb250YWluZXIgYmFja2dyb3VuZCBjb2xvciAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHNjcm9sbEJhY2tncm91bmQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faG9yaXpvbnRhbEJhclNwYWNlLmJhY2tncm91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzY3JvbGxCYWNrZ3JvdW5kKGNvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5faG9yaXpvbnRhbEJhclNwYWNlLmJhY2tncm91bmQgPT09IGNvbG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faG9yaXpvbnRhbEJhclNwYWNlLmJhY2tncm91bmQgPSBjb2xvcjtcclxuICAgICAgICB0aGlzLl92ZXJ0aWNhbEJhclNwYWNlLmJhY2tncm91bmQgPSBjb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBiYXIgY29sb3IgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBiYXJDb2xvcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYXJDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJhckNvbG9yKGNvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fYmFyQ29sb3IgPT09IGNvbG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2JhckNvbG9yID0gY29sb3I7XHJcbiAgICAgICAgdGhpcy5faG9yaXpvbnRhbEJhci5jb2xvciA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2FsQmFyLmNvbG9yID0gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgYmFyIGltYWdlICovXHJcbiAgICBwdWJsaWMgZ2V0IHRodW1iSW1hZ2UoKTogSW1hZ2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYXJJbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRodW1iSW1hZ2UodmFsdWU6IEltYWdlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JhckltYWdlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYXJJbWFnZSA9IHZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGhiID0gPEltYWdlU2Nyb2xsQmFyPnRoaXMuX2hvcml6b250YWxCYXI7XHJcbiAgICAgICAgY29uc3QgdmIgPSA8SW1hZ2VTY3JvbGxCYXI+dGhpcy5fdmVydGljYWxCYXI7XHJcbiAgICAgICAgaGIudGh1bWJJbWFnZSA9IHZhbHVlO1xyXG4gICAgICAgIHZiLnRodW1iSW1hZ2UgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBob3Jpem9udGFsIGJhciBpbWFnZSAqL1xyXG4gICAgcHVibGljIGdldCBob3Jpem9udGFsVGh1bWJJbWFnZSgpOiBJbWFnZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hvcml6b250YWxCYXJJbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGhvcml6b250YWxUaHVtYkltYWdlKHZhbHVlOiBJbWFnZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9ob3Jpem9udGFsQmFySW1hZ2UgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2hvcml6b250YWxCYXJJbWFnZSA9IHZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGhiID0gPEltYWdlU2Nyb2xsQmFyPnRoaXMuX2hvcml6b250YWxCYXI7XHJcbiAgICAgICAgaGIudGh1bWJJbWFnZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIHZlcnRpY2FsIGJhciBpbWFnZSAqL1xyXG4gICAgcHVibGljIGdldCB2ZXJ0aWNhbFRodW1iSW1hZ2UoKTogSW1hZ2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJ0aWNhbEJhckltYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgdmVydGljYWxUaHVtYkltYWdlKHZhbHVlOiBJbWFnZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl92ZXJ0aWNhbEJhckltYWdlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92ZXJ0aWNhbEJhckltYWdlID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgdmIgPSA8SW1hZ2VTY3JvbGxCYXI+dGhpcy5fdmVydGljYWxCYXI7XHJcbiAgICAgICAgdmIudGh1bWJJbWFnZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIHNpemUgb2YgdGhlIGJhciAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGJhclNpemUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFyU2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJhclNpemUodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9iYXJTaXplID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYXJTaXplID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hvcml6b250YWxCYXIuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dyaWQuc2V0Um93RGVmaW5pdGlvbigxLCB0aGlzLl9iYXJTaXplLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3ZlcnRpY2FsQmFyLmlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ncmlkLnNldENvbHVtbkRlZmluaXRpb24oMSwgdGhpcy5fYmFyU2l6ZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGxlbmd0aCBvZiB0aGUgdGh1bWIgKi9cclxuICAgIHB1YmxpYyBnZXQgdGh1bWJMZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGh1bWJMZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB0aHVtYkxlbmd0aCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RodW1iTGVuZ3RoID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSA8PSAwKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gMC4xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgPiAxKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdGh1bWJMZW5ndGggPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBoYiA9IDxJbWFnZVNjcm9sbEJhcj50aGlzLl9ob3Jpem9udGFsQmFyO1xyXG4gICAgICAgIGNvbnN0IHZiID0gPEltYWdlU2Nyb2xsQmFyPnRoaXMuX3ZlcnRpY2FsQmFyO1xyXG4gICAgICAgIGhiLnRodW1iTGVuZ3RoID0gdmFsdWU7XHJcbiAgICAgICAgdmIudGh1bWJMZW5ndGggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGhlaWdodCBvZiB0aGUgdGh1bWIgKi9cclxuICAgIHB1YmxpYyBnZXQgdGh1bWJIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGh1bWJIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB0aHVtYkhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RodW1iSGVpZ2h0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSA8PSAwKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gMC4xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgPiAxKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdGh1bWJIZWlnaHQgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBoYiA9IDxJbWFnZVNjcm9sbEJhcj50aGlzLl9ob3Jpem9udGFsQmFyO1xyXG4gICAgICAgIGNvbnN0IHZiID0gPEltYWdlU2Nyb2xsQmFyPnRoaXMuX3ZlcnRpY2FsQmFyO1xyXG4gICAgICAgIGhiLnRodW1iSGVpZ2h0ID0gdmFsdWU7XHJcbiAgICAgICAgdmIudGh1bWJIZWlnaHQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGhlaWdodCBvZiB0aGUgYmFyIGltYWdlICovXHJcbiAgICBwdWJsaWMgZ2V0IGJhckltYWdlSGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhckltYWdlSGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYmFySW1hZ2VIZWlnaHQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9iYXJJbWFnZUhlaWdodCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgPD0gMCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IDAuMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlID4gMSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2JhckltYWdlSGVpZ2h0ID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgaGIgPSA8SW1hZ2VTY3JvbGxCYXI+dGhpcy5faG9yaXpvbnRhbEJhcjtcclxuICAgICAgICBjb25zdCB2YiA9IDxJbWFnZVNjcm9sbEJhcj50aGlzLl92ZXJ0aWNhbEJhcjtcclxuICAgICAgICBoYi5iYXJJbWFnZUhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIHZiLmJhckltYWdlSGVpZ2h0ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBoZWlnaHQgb2YgdGhlIGhvcml6b250YWwgYmFyIGltYWdlICovXHJcbiAgICBwdWJsaWMgZ2V0IGhvcml6b250YWxCYXJJbWFnZUhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ob3Jpem9udGFsQmFySW1hZ2VIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBob3Jpem9udGFsQmFySW1hZ2VIZWlnaHQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9ob3Jpem9udGFsQmFySW1hZ2VIZWlnaHQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlIDw9IDApIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAwLjE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSA+IDEpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9ob3Jpem9udGFsQmFySW1hZ2VIZWlnaHQgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBoYiA9IDxJbWFnZVNjcm9sbEJhcj50aGlzLl9ob3Jpem9udGFsQmFyO1xyXG4gICAgICAgIGhiLmJhckltYWdlSGVpZ2h0ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBoZWlnaHQgb2YgdGhlIHZlcnRpY2FsIGJhciBpbWFnZSAqL1xyXG4gICAgcHVibGljIGdldCB2ZXJ0aWNhbEJhckltYWdlSGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZlcnRpY2FsQmFySW1hZ2VIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB2ZXJ0aWNhbEJhckltYWdlSGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fdmVydGljYWxCYXJJbWFnZUhlaWdodCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgPD0gMCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IDAuMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlID4gMSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2FsQmFySW1hZ2VIZWlnaHQgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCB2YiA9IDxJbWFnZVNjcm9sbEJhcj50aGlzLl92ZXJ0aWNhbEJhcjtcclxuICAgICAgICB2Yi5iYXJJbWFnZUhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgYmFyIGJhY2tncm91bmQgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBiYXJCYWNrZ3JvdW5kKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhckJhY2tncm91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBiYXJCYWNrZ3JvdW5kKGNvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fYmFyQmFja2dyb3VuZCA9PT0gY29sb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYmFyQmFja2dyb3VuZCA9IGNvbG9yO1xyXG4gICAgICAgIGNvbnN0IGhiID0gPFNjcm9sbEJhcj50aGlzLl9ob3Jpem9udGFsQmFyO1xyXG4gICAgICAgIGNvbnN0IHZiID0gPFNjcm9sbEJhcj50aGlzLl92ZXJ0aWNhbEJhcjtcclxuICAgICAgICBoYi5iYWNrZ3JvdW5kID0gY29sb3I7XHJcbiAgICAgICAgdmIuYmFja2dyb3VuZCA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMuX2RyYWdTcGFjZS5iYWNrZ3JvdW5kID0gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgYmFyIGJhY2tncm91bmQgaW1hZ2UgKi9cclxuICAgIHB1YmxpYyBnZXQgYmFySW1hZ2UoKTogSW1hZ2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYXJCYWNrZ3JvdW5kSW1hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBiYXJJbWFnZSh2YWx1ZTogSW1hZ2UpIHtcclxuICAgICAgICB0aGlzLl9iYXJCYWNrZ3JvdW5kSW1hZ2UgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBoYiA9IDxJbWFnZVNjcm9sbEJhcj50aGlzLl9ob3Jpem9udGFsQmFyO1xyXG4gICAgICAgIGNvbnN0IHZiID0gPEltYWdlU2Nyb2xsQmFyPnRoaXMuX3ZlcnRpY2FsQmFyO1xyXG4gICAgICAgIGhiLmJhY2tncm91bmRJbWFnZSA9IHZhbHVlO1xyXG4gICAgICAgIHZiLmJhY2tncm91bmRJbWFnZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGhvcml6b250YWwgYmFyIGJhY2tncm91bmQgaW1hZ2UgKi9cclxuICAgIHB1YmxpYyBnZXQgaG9yaXpvbnRhbEJhckltYWdlKCk6IEltYWdlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faG9yaXpvbnRhbEJhckJhY2tncm91bmRJbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGhvcml6b250YWxCYXJJbWFnZSh2YWx1ZTogSW1hZ2UpIHtcclxuICAgICAgICB0aGlzLl9ob3Jpem9udGFsQmFyQmFja2dyb3VuZEltYWdlID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgaGIgPSA8SW1hZ2VTY3JvbGxCYXI+dGhpcy5faG9yaXpvbnRhbEJhcjtcclxuICAgICAgICBoYi5iYWNrZ3JvdW5kSW1hZ2UgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSB2ZXJ0aWNhbCBiYXIgYmFja2dyb3VuZCBpbWFnZSAqL1xyXG4gICAgcHVibGljIGdldCB2ZXJ0aWNhbEJhckltYWdlKCk6IEltYWdlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmVydGljYWxCYXJCYWNrZ3JvdW5kSW1hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB2ZXJ0aWNhbEJhckltYWdlKHZhbHVlOiBJbWFnZSkge1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2FsQmFyQmFja2dyb3VuZEltYWdlID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgdmIgPSA8SW1hZ2VTY3JvbGxCYXI+dGhpcy5fdmVydGljYWxCYXI7XHJcbiAgICAgICAgdmIuYmFja2dyb3VuZEltYWdlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfc2V0V2luZG93UG9zaXRpb24oZm9yY2UgPSB0cnVlKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcmF0aW8gPSB0aGlzLmhvc3QuaWRlYWxSYXRpbztcclxuICAgICAgICBjb25zdCB3aW5kb3dDb250ZW50c1dpZHRoID0gdGhpcy5fd2luZG93Ll9jdXJyZW50TWVhc3VyZS53aWR0aDtcclxuICAgICAgICBjb25zdCB3aW5kb3dDb250ZW50c0hlaWdodCA9IHRoaXMuX3dpbmRvdy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAoIWZvcmNlICYmIHRoaXMuX29sZFdpbmRvd0NvbnRlbnRzV2lkdGggPT09IHdpbmRvd0NvbnRlbnRzV2lkdGggJiYgdGhpcy5fb2xkV2luZG93Q29udGVudHNIZWlnaHQgPT09IHdpbmRvd0NvbnRlbnRzSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX29sZFdpbmRvd0NvbnRlbnRzV2lkdGggPSB3aW5kb3dDb250ZW50c1dpZHRoO1xyXG4gICAgICAgIHRoaXMuX29sZFdpbmRvd0NvbnRlbnRzSGVpZ2h0ID0gd2luZG93Q29udGVudHNIZWlnaHQ7XHJcblxyXG4gICAgICAgIGNvbnN0IF9lbmRMZWZ0ID0gdGhpcy5fY2xpZW50V2lkdGggLSB3aW5kb3dDb250ZW50c1dpZHRoO1xyXG4gICAgICAgIGNvbnN0IF9lbmRUb3AgPSB0aGlzLl9jbGllbnRIZWlnaHQgLSB3aW5kb3dDb250ZW50c0hlaWdodDtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3TGVmdCA9ICh0aGlzLl9ob3Jpem9udGFsQmFyLnZhbHVlIC8gcmF0aW8pICogX2VuZExlZnQgKyBcInB4XCI7XHJcbiAgICAgICAgY29uc3QgbmV3VG9wID0gKHRoaXMuX3ZlcnRpY2FsQmFyLnZhbHVlIC8gcmF0aW8pICogX2VuZFRvcCArIFwicHhcIjtcclxuXHJcbiAgICAgICAgaWYgKG5ld0xlZnQgIT09IHRoaXMuX3dpbmRvdy5sZWZ0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dpbmRvdy5sZWZ0ID0gbmV3TGVmdDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZyZWV6ZUNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWJ1aWxkTGF5b3V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5ld1RvcCAhPT0gdGhpcy5fd2luZG93LnRvcCkge1xyXG4gICAgICAgICAgICB0aGlzLl93aW5kb3cudG9wID0gbmV3VG9wO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZnJlZXplQ29udHJvbHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYnVpbGRMYXlvdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3VwZGF0ZVNjcm9sbGVyKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHdpbmRvd0NvbnRlbnRzV2lkdGggPSB0aGlzLl93aW5kb3cuX2N1cnJlbnRNZWFzdXJlLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IHdpbmRvd0NvbnRlbnRzSGVpZ2h0ID0gdGhpcy5fd2luZG93Ll9jdXJyZW50TWVhc3VyZS5oZWlnaHQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9ob3Jpem9udGFsQmFyLmlzVmlzaWJsZSAmJiB3aW5kb3dDb250ZW50c1dpZHRoIDw9IHRoaXMuX2NsaWVudFdpZHRoICYmICF0aGlzLmZvcmNlSG9yaXpvbnRhbEJhcikge1xyXG4gICAgICAgICAgICB0aGlzLl9ncmlkLnNldFJvd0RlZmluaXRpb24oMSwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxCYXIuaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxCYXIudmFsdWUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9yZWJ1aWxkTGF5b3V0ID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9ob3Jpem9udGFsQmFyLmlzVmlzaWJsZSAmJiAod2luZG93Q29udGVudHNXaWR0aCA+IHRoaXMuX2NsaWVudFdpZHRoIHx8IHRoaXMuZm9yY2VIb3Jpem9udGFsQmFyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ncmlkLnNldFJvd0RlZmluaXRpb24oMSwgdGhpcy5fYmFyU2l6ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxCYXIuaXNWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVidWlsZExheW91dCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdmVydGljYWxCYXIuaXNWaXNpYmxlICYmIHdpbmRvd0NvbnRlbnRzSGVpZ2h0IDw9IHRoaXMuX2NsaWVudEhlaWdodCAmJiAhdGhpcy5mb3JjZVZlcnRpY2FsQmFyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dyaWQuc2V0Q29sdW1uRGVmaW5pdGlvbigxLCAwLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5fdmVydGljYWxCYXIuaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZlcnRpY2FsQmFyLnZhbHVlID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fcmVidWlsZExheW91dCA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fdmVydGljYWxCYXIuaXNWaXNpYmxlICYmICh3aW5kb3dDb250ZW50c0hlaWdodCA+IHRoaXMuX2NsaWVudEhlaWdodCB8fCB0aGlzLmZvcmNlVmVydGljYWxCYXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dyaWQuc2V0Q29sdW1uRGVmaW5pdGlvbigxLCB0aGlzLl9iYXJTaXplLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5fdmVydGljYWxCYXIuaXNWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVidWlsZExheW91dCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9idWlsZENsaWVudFNpemVzKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJhdGlvID0gdGhpcy5ob3N0LmlkZWFsUmF0aW87XHJcblxyXG4gICAgICAgIHRoaXMuX2hvcml6b250YWxCYXIudGh1bWJXaWR0aCA9IHRoaXMuX3RodW1iTGVuZ3RoICogMC45ICogKHRoaXMuX2NsaWVudFdpZHRoIC8gcmF0aW8pICsgXCJweFwiO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRpY2FsQmFyLnRodW1iV2lkdGggPSB0aGlzLl90aHVtYkxlbmd0aCAqIDAuOSAqICh0aGlzLl9jbGllbnRIZWlnaHQgLyByYXRpbykgKyBcInB4XCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9saW5rKGhvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5fbGluayhob3N0KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYXR0YWNoV2hlZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9hZGRCYXIoYmFyQ29udHJvbDogU2Nyb2xsQmFyIHwgSW1hZ2VTY3JvbGxCYXIsIGJhckNvbnRhaW5lcjogUmVjdGFuZ2xlLCBpc1ZlcnRpY2FsOiBib29sZWFuLCByb3RhdGlvbjogbnVtYmVyKSB7XHJcbiAgICAgICAgYmFyQ29udHJvbC5wYWRkaW5nTGVmdCA9IDA7XHJcbiAgICAgICAgYmFyQ29udHJvbC53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIGJhckNvbnRyb2wuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcbiAgICAgICAgYmFyQ29udHJvbC5iYXJPZmZzZXQgPSAwO1xyXG4gICAgICAgIGJhckNvbnRyb2wudmFsdWUgPSAwO1xyXG4gICAgICAgIGJhckNvbnRyb2wubWF4aW11bSA9IDE7XHJcbiAgICAgICAgYmFyQ29udHJvbC5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcbiAgICAgICAgYmFyQ29udHJvbC52ZXJ0aWNhbEFsaWdubWVudCA9IENvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUjtcclxuICAgICAgICBiYXJDb250cm9sLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG4gICAgICAgIGJhckNvbnRyb2wucm90YXRpb24gPSByb3RhdGlvbjtcclxuICAgICAgICBiYXJDb250cm9sLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBiYXJDb250YWluZXIuYWRkQ29udHJvbChiYXJDb250cm9sKTtcclxuXHJcbiAgICAgICAgYmFyQ29udHJvbC5vblZhbHVlQ2hhbmdlZE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0V2luZG93UG9zaXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9hdHRhY2hXaGVlbCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2hvc3QgfHwgdGhpcy5fb25XaGVlbE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX29uV2hlZWxPYnNlcnZlciA9IHRoaXMub25XaGVlbE9ic2VydmFibGUuYWRkKChwaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3BvaW50ZXJJc092ZXIgfHwgdGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3ZlcnRpY2FsQmFyLmlzVmlzaWJsZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGkueSA8IDAgJiYgdGhpcy5fdmVydGljYWxCYXIudmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmVydGljYWxCYXIudmFsdWUgLT0gdGhpcy5fd2hlZWxQcmVjaXNpb247XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBpLnkgPiAwICYmIHRoaXMuX3ZlcnRpY2FsQmFyLnZhbHVlIDwgdGhpcy5fdmVydGljYWxCYXIubWF4aW11bSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZlcnRpY2FsQmFyLnZhbHVlICs9IHRoaXMuX3doZWVsUHJlY2lzaW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ob3Jpem9udGFsQmFyLmlzVmlzaWJsZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGkueCA8IDAgJiYgdGhpcy5faG9yaXpvbnRhbEJhci52YWx1ZSA8IHRoaXMuX2hvcml6b250YWxCYXIubWF4aW11bSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hvcml6b250YWxCYXIudmFsdWUgKz0gdGhpcy5fd2hlZWxQcmVjaXNpb247XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBpLnggPiAwICYmIHRoaXMuX2hvcml6b250YWxCYXIudmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faG9yaXpvbnRhbEJhci52YWx1ZSAtPSB0aGlzLl93aGVlbFByZWNpc2lvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfcmVuZGVySGlnaGxpZ2h0U3BlY2lmaWMoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNIaWdobGlnaHRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5fcmVuZGVySGlnaGxpZ2h0U3BlY2lmaWMoY29udGV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2dyaWQuX3JlbmRlckhpZ2hsaWdodFNwZWNpZmljKGNvbnRleHQpO1xyXG5cclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogUmVsZWFzZXMgYXNzb2NpYXRlZCByZXNvdXJjZXMgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMub25XaGVlbE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX29uV2hlZWxPYnNlcnZlcik7XHJcbiAgICAgICAgdGhpcy5fb25XaGVlbE9ic2VydmVyID0gbnVsbDtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbn1cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLlNjcm9sbFZpZXdlclwiLCBTY3JvbGxWaWV3ZXIpO1xyXG4iLCJpbXBvcnQgeyBNZWFzdXJlIH0gZnJvbSBcIi4uLy4uL21lYXN1cmVcIjtcclxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIi4uL2NvbnRhaW5lclwiO1xyXG5pbXBvcnQgeyBWYWx1ZUFuZFVuaXQgfSBmcm9tIFwiLi4vLi4vdmFsdWVBbmRVbml0XCI7XHJcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi4vY29udHJvbFwiO1xyXG5pbXBvcnQgdHlwZSB7IElDYW52YXNSZW5kZXJpbmdDb250ZXh0IH0gZnJvbSBcImNvcmUvRW5naW5lcy9JQ2FudmFzXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBob2xkIGEgdGhlIGNvbnRhaW5lciBmb3IgU2Nyb2xsVmlld2VyXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIF9TY3JvbGxWaWV3ZXJXaW5kb3cgZXh0ZW5kcyBDb250YWluZXIge1xyXG4gICAgcHVibGljIHBhcmVudENsaWVudFdpZHRoOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcGFyZW50Q2xpZW50SGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBfZnJlZXplQ29udHJvbHMgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX3BhcmVudE1lYXN1cmU6IE1lYXN1cmU7XHJcbiAgICBwcml2YXRlIF9vbGRMZWZ0OiBudW1iZXIgfCBudWxsO1xyXG4gICAgcHJpdmF0ZSBfb2xkVG9wOiBudW1iZXIgfCBudWxsO1xyXG5cclxuICAgIHB1YmxpYyBnZXQgZnJlZXplQ29udHJvbHMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZyZWV6ZUNvbnRyb2xzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZnJlZXplQ29udHJvbHModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fZnJlZXplQ29udHJvbHMgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzdG9yZU1lYXN1cmVzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0cmlnZ2VyIGEgZnVsbCBub3JtYWwgbGF5b3V0IGNhbGN1bGF0aW9uIHRvIGJlIHN1cmUgYWxsIGNoaWxkcmVuIGhhdmUgdGhlaXIgbWVhc3VyZXMgdXAgdG8gZGF0ZVxyXG4gICAgICAgIHRoaXMuX2ZyZWV6ZUNvbnRyb2xzID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbnN0IHRleHR1cmVTaXplID0gdGhpcy5ob3N0LmdldFNpemUoKTtcclxuICAgICAgICBjb25zdCByZW5kZXJXaWR0aCA9IHRleHR1cmVTaXplLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IHJlbmRlckhlaWdodCA9IHRleHR1cmVTaXplLmhlaWdodDtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuaG9zdC5nZXRDb250ZXh0KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1lYXN1cmUgPSBuZXcgTWVhc3VyZSgwLCAwLCByZW5kZXJXaWR0aCwgcmVuZGVySGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdGhpcy5ob3N0Ll9udW1MYXlvdXRDYWxscyA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuaG9zdC5fcm9vdENvbnRhaW5lci5fbGF5b3V0KG1lYXN1cmUsIGNvbnRleHQpO1xyXG5cclxuICAgICAgICAvLyBpbiBmcmVlemUgbW9kZSwgcHJlcGFyZSBjaGlsZHJlbiBtZWFzdXJlcyBhY2NvcmRpbmdseVxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVNZWFzdXJlcygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdXNlQnVja2V0cygpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYWtlQnVja2V0cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9mcmVlemVDb250cm9scyA9IHZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLmhvc3QubWFya0FzRGlydHkoKTsgLy8gcmVkcmF3IHdpdGggdGhlIChuZXcpIGN1cnJlbnQgc2V0dGluZ3NcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9idWNrZXRXaWR0aDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgX2J1Y2tldEhlaWdodDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgX2J1Y2tldHM6IHsgW2tleTogbnVtYmVyXTogQXJyYXk8Q29udHJvbD4gfSA9IHt9O1xyXG4gICAgcHJpdmF0ZSBfYnVja2V0TGVuOiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIGdldCBidWNrZXRXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9idWNrZXRXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGJ1Y2tldEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9idWNrZXRIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEJ1Y2tldFNpemVzKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYnVja2V0V2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLl9idWNrZXRIZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl91c2VCdWNrZXRzKCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZyZWV6ZUNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYWtlQnVja2V0cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVja2V0cyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91c2VCdWNrZXRzKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9idWNrZXRXaWR0aCA+IDAgJiYgdGhpcy5fYnVja2V0SGVpZ2h0ID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9tYWtlQnVja2V0cygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9idWNrZXRzID0ge307XHJcbiAgICAgICAgdGhpcy5fYnVja2V0TGVuID0gTWF0aC5jZWlsKHRoaXMud2lkdGhJblBpeGVscyAvIHRoaXMuX2J1Y2tldFdpZHRoKTtcclxuICAgICAgICB0aGlzLl9kaXNwYXRjaEluQnVja2V0cyh0aGlzLl9jaGlsZHJlbik7XHJcbiAgICAgICAgdGhpcy5fb2xkTGVmdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fb2xkVG9wID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9kaXNwYXRjaEluQnVja2V0cyhjaGlsZHJlbjogQ29udHJvbFtdKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYlN0YXJ0WCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoKGNoaWxkLl9jdXN0b21EYXRhLl9vcmlnTGVmdCAtIHRoaXMuX2N1c3RvbURhdGEub3JpZ0xlZnQpIC8gdGhpcy5fYnVja2V0V2lkdGgpKSxcclxuICAgICAgICAgICAgICAgIGJFbmRYID0gTWF0aC5mbG9vcigoY2hpbGQuX2N1c3RvbURhdGEuX29yaWdMZWZ0IC0gdGhpcy5fY3VzdG9tRGF0YS5vcmlnTGVmdCArIGNoaWxkLl9jdXJyZW50TWVhc3VyZS53aWR0aCAtIDEpIC8gdGhpcy5fYnVja2V0V2lkdGgpLFxyXG4gICAgICAgICAgICAgICAgYkVuZFkgPSBNYXRoLmZsb29yKChjaGlsZC5fY3VzdG9tRGF0YS5fb3JpZ1RvcCAtIHRoaXMuX2N1c3RvbURhdGEub3JpZ1RvcCArIGNoaWxkLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgLSAxKSAvIHRoaXMuX2J1Y2tldEhlaWdodCk7XHJcbiAgICAgICAgICAgIGxldCBiU3RhcnRZID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcigoY2hpbGQuX2N1c3RvbURhdGEuX29yaWdUb3AgLSB0aGlzLl9jdXN0b21EYXRhLm9yaWdUb3ApIC8gdGhpcy5fYnVja2V0SGVpZ2h0KSk7XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAoYlN0YXJ0WSA8PSBiRW5kWSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IGJTdGFydFg7IHggPD0gYkVuZFg7ICsreCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1Y2tldCA9IGJTdGFydFkgKiB0aGlzLl9idWNrZXRMZW4gKyB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsc3RjID0gdGhpcy5fYnVja2V0c1tidWNrZXRdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxzdGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbHN0YyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWNrZXRzW2J1Y2tldF0gPSBsc3RjO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbHN0Yy5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJTdGFydFkrKztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQ29udGFpbmVyICYmIGNoaWxkLl9jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwYXRjaEluQnVja2V0cyhjaGlsZC5fY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlc2V0IGxlZnQgYW5kIHRvcCBtZWFzdXJlcyBmb3IgdGhlIHdpbmRvdyBhbmQgYWxsIGl0cyBjaGlsZHJlblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlTWVhc3VyZXMoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgbGVmdCA9IHRoaXMubGVmdEluUGl4ZWxzIHwgMCxcclxuICAgICAgICAgICAgdG9wID0gdGhpcy50b3BJblBpeGVscyB8IDA7XHJcblxyXG4gICAgICAgIHRoaXMuX21lYXN1cmVGb3JDaGlsZHJlbi5sZWZ0IC09IGxlZnQ7XHJcbiAgICAgICAgdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLnRvcCAtPSB0b3A7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCAtPSBsZWZ0O1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCAtPSB0b3A7XHJcblxyXG4gICAgICAgIHRoaXMuX2N1c3RvbURhdGEub3JpZ0xlZnRGb3JDaGlsZHJlbiA9IHRoaXMuX21lYXN1cmVGb3JDaGlsZHJlbi5sZWZ0O1xyXG4gICAgICAgIHRoaXMuX2N1c3RvbURhdGEub3JpZ1RvcEZvckNoaWxkcmVuID0gdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLnRvcDtcclxuICAgICAgICB0aGlzLl9jdXN0b21EYXRhLm9yaWdMZWZ0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdDtcclxuICAgICAgICB0aGlzLl9jdXN0b21EYXRhLm9yaWdUb3AgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3A7XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuTWVhc3VyZXModGhpcy5fY2hpbGRyZW4sIGxlZnQsIHRvcCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlQ2hpbGRyZW5NZWFzdXJlcyhjaGlsZHJlbjogQ29udHJvbFtdLCBsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG5cclxuICAgICAgICAgICAgY2hpbGQuX2N1cnJlbnRNZWFzdXJlLmxlZnQgLT0gbGVmdDtcclxuICAgICAgICAgICAgY2hpbGQuX2N1cnJlbnRNZWFzdXJlLnRvcCAtPSB0b3A7XHJcblxyXG4gICAgICAgICAgICBjaGlsZC5fY3VzdG9tRGF0YS5fb3JpZ0xlZnQgPSBjaGlsZC5fY3VycmVudE1lYXN1cmUubGVmdDsgLy8gc2F2ZSB0aGUgb3JpZ2luYWwgbGVmdCBhbmQgdG9wIHZhbHVlcyBmb3IgZWFjaCBjaGlsZFxyXG4gICAgICAgICAgICBjaGlsZC5fY3VzdG9tRGF0YS5fb3JpZ1RvcCA9IGNoaWxkLl9jdXJyZW50TWVhc3VyZS50b3A7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBDb250YWluZXIgJiYgY2hpbGQuX2NoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuTWVhc3VyZXMoY2hpbGQuX2NoaWxkcmVuLCBsZWZ0LCB0b3ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3Jlc3RvcmVNZWFzdXJlcygpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5sZWZ0SW5QaXhlbHMgfCAwLFxyXG4gICAgICAgICAgICB0b3AgPSB0aGlzLnRvcEluUGl4ZWxzIHwgMDtcclxuXHJcbiAgICAgICAgdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLmxlZnQgPSB0aGlzLl9jdXN0b21EYXRhLm9yaWdMZWZ0Rm9yQ2hpbGRyZW4gKyBsZWZ0O1xyXG4gICAgICAgIHRoaXMuX21lYXN1cmVGb3JDaGlsZHJlbi50b3AgPSB0aGlzLl9jdXN0b21EYXRhLm9yaWdUb3BGb3JDaGlsZHJlbiArIHRvcDtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ID0gdGhpcy5fY3VzdG9tRGF0YS5vcmlnTGVmdCArIGxlZnQ7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wID0gdGhpcy5fY3VzdG9tRGF0YS5vcmlnVG9wICsgdG9wO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTY3JvbGxWaWV3ZXJXaW5kb3dcclxuICAgICAqIEBwYXJhbSBuYW1lIG9mIFNjcm9sbFZpZXdlcldpbmRvd1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIlNjcm9sbFZpZXdlcldpbmRvd1wiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYWRkaXRpb25hbFByb2Nlc3NpbmcocGFyZW50TWVhc3VyZTogTWVhc3VyZSwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5fYWRkaXRpb25hbFByb2Nlc3NpbmcocGFyZW50TWVhc3VyZSwgY29udGV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3BhcmVudE1lYXN1cmUgPSBwYXJlbnRNZWFzdXJlO1xyXG5cclxuICAgICAgICB0aGlzLl9tZWFzdXJlRm9yQ2hpbGRyZW4ubGVmdCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQ7XHJcbiAgICAgICAgdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLnRvcCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcDtcclxuXHJcbiAgICAgICAgdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLndpZHRoID0gcGFyZW50TWVhc3VyZS53aWR0aDtcclxuICAgICAgICB0aGlzLl9tZWFzdXJlRm9yQ2hpbGRyZW4uaGVpZ2h0ID0gcGFyZW50TWVhc3VyZS5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9sYXlvdXQocGFyZW50TWVhc3VyZTogTWVhc3VyZSwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5fZnJlZXplQ29udHJvbHMpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlUmVjdCgpOyAvLyB3aWxsIHRyaWdnZXIgYSByZWRyYXcgb2YgdGhlIHdpbmRvd1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc3VwZXIuX2xheW91dChwYXJlbnRNZWFzdXJlLCBjb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zY3JvbGxDaGlsZHJlbihjaGlsZHJlbjogQ29udHJvbFtdLCBsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG5cclxuICAgICAgICAgICAgY2hpbGQuX2N1cnJlbnRNZWFzdXJlLmxlZnQgPSBjaGlsZC5fY3VzdG9tRGF0YS5fb3JpZ0xlZnQgKyBsZWZ0O1xyXG4gICAgICAgICAgICBjaGlsZC5fY3VycmVudE1lYXN1cmUudG9wID0gY2hpbGQuX2N1c3RvbURhdGEuX29yaWdUb3AgKyB0b3A7XHJcbiAgICAgICAgICAgIGNoaWxkLl9pc0NsaXBwZWQgPSBmYWxzZTsgLy8gY2xpcHBpbmcgd2lsbCBiZSBoYW5kbGVkIGJ5IF9kcmF3IGFuZCB0aGUgY2FsbCB0byBfaW50ZXJzZWN0c1JlY3QoKVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQ29udGFpbmVyICYmIGNoaWxkLl9jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxDaGlsZHJlbihjaGlsZC5fY2hpbGRyZW4sIGxlZnQsIHRvcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfc2Nyb2xsQ2hpbGRyZW5XaXRoQnVja2V0cyhsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyLCBzY3JvbGxMZWZ0OiBudW1iZXIsIHNjcm9sbFRvcDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgYlN0YXJ0WCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoLWxlZnQgLyB0aGlzLl9idWNrZXRXaWR0aCkpLFxyXG4gICAgICAgICAgICBiRW5kWCA9IE1hdGguZmxvb3IoKC1sZWZ0ICsgdGhpcy5fcGFyZW50TWVhc3VyZS53aWR0aCAtIDEpIC8gdGhpcy5fYnVja2V0V2lkdGgpLFxyXG4gICAgICAgICAgICBiRW5kWSA9IE1hdGguZmxvb3IoKC10b3AgKyB0aGlzLl9wYXJlbnRNZWFzdXJlLmhlaWdodCAtIDEpIC8gdGhpcy5fYnVja2V0SGVpZ2h0KTtcclxuICAgICAgICBsZXQgYlN0YXJ0WSA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoLXRvcCAvIHRoaXMuX2J1Y2tldEhlaWdodCkpO1xyXG5cclxuICAgICAgICB3aGlsZSAoYlN0YXJ0WSA8PSBiRW5kWSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gYlN0YXJ0WDsgeCA8PSBiRW5kWDsgKyt4KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBidWNrZXQgPSBiU3RhcnRZICogdGhpcy5fYnVja2V0TGVuICsgeCxcclxuICAgICAgICAgICAgICAgICAgICBsc3RjID0gdGhpcy5fYnVja2V0c1tidWNrZXRdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsc3RjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsc3RjLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gbHN0Y1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuX2N1cnJlbnRNZWFzdXJlLmxlZnQgPSBjaGlsZC5fY3VzdG9tRGF0YS5fb3JpZ0xlZnQgKyBzY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5fY3VycmVudE1lYXN1cmUudG9wID0gY2hpbGQuX2N1c3RvbURhdGEuX29yaWdUb3AgKyBzY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLl9pc0NsaXBwZWQgPSBmYWxzZTsgLy8gY2xpcHBpbmcgd2lsbCBiZSBoYW5kbGVkIGJ5IF9kcmF3IGFuZCB0aGUgY2FsbCB0byBfaW50ZXJzZWN0c1JlY3QoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiU3RhcnRZKys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfZHJhdyhjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCwgaW52YWxpZGF0ZWRSZWN0YW5nbGU/OiBNZWFzdXJlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9mcmVlemVDb250cm9scykge1xyXG4gICAgICAgICAgICBzdXBlci5fZHJhdyhjb250ZXh0LCBpbnZhbGlkYXRlZFJlY3RhbmdsZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2xvY2FsRHJhdyhjb250ZXh0KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2xpcENoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBGb3JDaGlsZHJlbihjb250ZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLmxlZnRJblBpeGVscyB8IDAsXHJcbiAgICAgICAgICAgIHRvcCA9IHRoaXMudG9wSW5QaXhlbHMgfCAwO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fdXNlQnVja2V0cygpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vbGRMZWZ0ICE9PSBudWxsICYmIHRoaXMuX29sZFRvcCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsQ2hpbGRyZW5XaXRoQnVja2V0cyh0aGlzLl9vbGRMZWZ0LCB0aGlzLl9vbGRUb3AsIGxlZnQsIHRvcCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxDaGlsZHJlbldpdGhCdWNrZXRzKGxlZnQsIHRvcCwgbGVmdCwgdG9wKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbENoaWxkcmVuKHRoaXMuX2NoaWxkcmVuLCBsZWZ0LCB0b3ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsQ2hpbGRyZW4odGhpcy5fY2hpbGRyZW4sIGxlZnQsIHRvcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vbGRMZWZ0ID0gbGVmdDtcclxuICAgICAgICB0aGlzLl9vbGRUb3AgPSB0b3A7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKCFjaGlsZC5faW50ZXJzZWN0c1JlY3QodGhpcy5fcGFyZW50TWVhc3VyZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNoaWxkLl9yZW5kZXIoY29udGV4dCwgdGhpcy5fcGFyZW50TWVhc3VyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfcG9zdE1lYXN1cmUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZyZWV6ZUNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgIHN1cGVyLl9wb3N0TWVhc3VyZSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWF4V2lkdGggPSB0aGlzLnBhcmVudENsaWVudFdpZHRoO1xyXG4gICAgICAgIGxldCBtYXhIZWlnaHQgPSB0aGlzLnBhcmVudENsaWVudEhlaWdodDtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKCFjaGlsZC5pc1Zpc2libGUgfHwgY2hpbGQubm90UmVuZGVyYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5ob3Jpem9udGFsQWxpZ25tZW50ID09PSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUikge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQuX29mZnNldExlZnQodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCAtIGNoaWxkLl9jdXJyZW50TWVhc3VyZS5sZWZ0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoaWxkLnZlcnRpY2FsQWxpZ25tZW50ID09PSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVIpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkLl9vZmZzZXRUb3AodGhpcy5fY3VycmVudE1lYXN1cmUudG9wIC0gY2hpbGQuX2N1cnJlbnRNZWFzdXJlLnRvcCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1heFdpZHRoID0gTWF0aC5tYXgobWF4V2lkdGgsIGNoaWxkLl9jdXJyZW50TWVhc3VyZS5sZWZ0IC0gdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIGNoaWxkLl9jdXJyZW50TWVhc3VyZS53aWR0aCArIGNoaWxkLnBhZGRpbmdSaWdodEluUGl4ZWxzKTtcclxuICAgICAgICAgICAgbWF4SGVpZ2h0ID0gTWF0aC5tYXgobWF4SGVpZ2h0LCBjaGlsZC5fY3VycmVudE1lYXN1cmUudG9wIC0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgY2hpbGQuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCArIGNoaWxkLnBhZGRpbmdCb3R0b21JblBpeGVscyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggIT09IG1heFdpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dpZHRoLnVwZGF0ZUluUGxhY2UobWF4V2lkdGgsIFZhbHVlQW5kVW5pdC5VTklUTU9ERV9QSVhFTCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoID0gbWF4V2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlYnVpbGRMYXlvdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9pc0RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgIT09IG1heEhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQudXBkYXRlSW5QbGFjZShtYXhIZWlnaHQsIFZhbHVlQW5kVW5pdC5VTklUTU9ERV9QSVhFTCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCA9IG1heEhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5fcmVidWlsZExheW91dCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzRGlydHkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIuX3Bvc3RNZWFzdXJlKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4vcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IFN0YWNrUGFuZWwgfSBmcm9tIFwiLi9zdGFja1BhbmVsXCI7XHJcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9sXCI7XHJcbmltcG9ydCB7IFRleHRCbG9jayB9IGZyb20gXCIuL3RleHRCbG9ja1wiO1xyXG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gXCIuL2NoZWNrYm94XCI7XHJcbmltcG9ydCB7IFJhZGlvQnV0dG9uIH0gZnJvbSBcIi4vcmFkaW9CdXR0b25cIjtcclxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSBcIi4vc2xpZGVycy9zbGlkZXJcIjtcclxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIi4vY29udGFpbmVyXCI7XHJcblxyXG4vKiogQ2xhc3MgdXNlZCB0byBjcmVhdGUgYSBSYWRpb0dyb3VwXHJcbiAqIHdoaWNoIGNvbnRhaW5zIGdyb3VwcyBvZiByYWRpbyBidXR0b25zXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VsZWN0b3JHcm91cCB7XHJcbiAgICBwcml2YXRlIF9ncm91cFBhbmVsID0gbmV3IFN0YWNrUGFuZWwoKTtcclxuICAgIHByaXZhdGUgX3NlbGVjdG9yczogU3RhY2tQYW5lbFtdID0gbmV3IEFycmF5KCk7XHJcbiAgICBwcml2YXRlIF9ncm91cEhlYWRlcjogVGV4dEJsb2NrO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTZWxlY3Rvckdyb3VwXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBvZiBncm91cCwgdXNlZCBhcyBhIGdyb3VwIGhlYWRpbmdcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqIG5hbWUgb2YgU2VsZWN0b3JHcm91cCAqL1xyXG4gICAgICAgIHB1YmxpYyBuYW1lOiBzdHJpbmdcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuX2dyb3VwUGFuZWwudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9UT1A7XHJcbiAgICAgICAgdGhpcy5fZ3JvdXBQYW5lbC5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIHRoaXMuX2dyb3VwSGVhZGVyID0gdGhpcy5fYWRkR3JvdXBIZWFkZXIobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgdGhlIGdyb3VwUGFuZWwgb2YgdGhlIFNlbGVjdG9yR3JvdXAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGdyb3VwUGFuZWwoKTogU3RhY2tQYW5lbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwUGFuZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgdGhlIHNlbGVjdG9ycyBhcnJheSAqL1xyXG4gICAgcHVibGljIGdldCBzZWxlY3RvcnMoKTogU3RhY2tQYW5lbFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0b3JzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIGFuZCBzZXRzIHRoZSBncm91cCBoZWFkZXIgKi9cclxuICAgIHB1YmxpYyBnZXQgaGVhZGVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ncm91cEhlYWRlci50ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaGVhZGVyKGxhYmVsOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdXBIZWFkZXIudGV4dCA9PT0gXCJsYWJlbFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2dyb3VwSGVhZGVyLnRleHQgPSBsYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9hZGRHcm91cEhlYWRlcih0ZXh0OiBzdHJpbmcpOiBUZXh0QmxvY2sge1xyXG4gICAgICAgIGNvbnN0IGdyb3VwSGVhZGluZyA9IG5ldyBUZXh0QmxvY2soXCJncm91cEhlYWRcIiwgdGV4dCk7XHJcbiAgICAgICAgZ3JvdXBIZWFkaW5nLndpZHRoID0gMC45O1xyXG4gICAgICAgIGdyb3VwSGVhZGluZy5oZWlnaHQgPSBcIjMwcHhcIjtcclxuICAgICAgICBncm91cEhlYWRpbmcudGV4dFdyYXBwaW5nID0gdHJ1ZTtcclxuICAgICAgICBncm91cEhlYWRpbmcuY29sb3IgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgZ3JvdXBIZWFkaW5nLmhvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ7XHJcbiAgICAgICAgZ3JvdXBIZWFkaW5nLnRleHRIb3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIGdyb3VwSGVhZGluZy5sZWZ0ID0gXCIycHhcIjtcclxuICAgICAgICB0aGlzLl9ncm91cFBhbmVsLmFkZENvbnRyb2woZ3JvdXBIZWFkaW5nKTtcclxuICAgICAgICByZXR1cm4gZ3JvdXBIZWFkaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfZ2V0U2VsZWN0b3Ioc2VsZWN0b3JOYjogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHNlbGVjdG9yTmIgPCAwIHx8IHNlbGVjdG9yTmIgPj0gdGhpcy5fc2VsZWN0b3JzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RvcnNbc2VsZWN0b3JOYl07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFJlbW92ZXMgdGhlIHNlbGVjdG9yIGF0IHRoZSBnaXZlbiBwb3NpdGlvblxyXG4gICAgICogQHBhcmFtIHNlbGVjdG9yTmIgdGhlIHBvc2l0aW9uIG9mIHRoZSBzZWxlY3RvciB3aXRoaW4gdGhlIGdyb3VwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW1vdmVTZWxlY3RvcihzZWxlY3Rvck5iOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoc2VsZWN0b3JOYiA8IDAgfHwgc2VsZWN0b3JOYiA+PSB0aGlzLl9zZWxlY3RvcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZ3JvdXBQYW5lbC5yZW1vdmVDb250cm9sKHRoaXMuX3NlbGVjdG9yc1tzZWxlY3Rvck5iXSk7XHJcbiAgICAgICAgdGhpcy5fc2VsZWN0b3JzLnNwbGljZShzZWxlY3Rvck5iLCAxKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGEgQ2hlY2tib3hHcm91cFxyXG4gKiB3aGljaCBjb250YWlucyBncm91cHMgb2YgY2hlY2tib3ggYnV0dG9uc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENoZWNrYm94R3JvdXAgZXh0ZW5kcyBTZWxlY3Rvckdyb3VwIHtcclxuICAgIC8qKiBBZGRzIGEgY2hlY2tib3ggYXMgYSBjb250cm9sXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBpcyB0aGUgbGFiZWwgZm9yIHRoZSBzZWxlY3RvclxyXG4gICAgICogQHBhcmFtIGZ1bmMgaXMgdGhlIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBTZWxlY3RvciBpcyBjaGVja2VkXHJcbiAgICAgKiBAcGFyYW0gY2hlY2tlZCBpcyB0cnVlIHdoZW4gU2VsZWN0b3IgaXMgY2hlY2tlZFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBwdWJsaWMgYWRkQ2hlY2tib3godGV4dDogc3RyaW5nLCBmdW5jID0gKHM6IGJvb2xlYW4pID0+IHt9LCBjaGVja2VkOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBjaGVja2VkID0gY2hlY2tlZCB8fCBmYWxzZTtcclxuICAgICAgICBjb25zdCBidXR0b24gPSBuZXcgQ2hlY2tib3goKTtcclxuICAgICAgICBidXR0b24ud2lkdGggPSBcIjIwcHhcIjtcclxuICAgICAgICBidXR0b24uaGVpZ2h0ID0gXCIyMHB4XCI7XHJcbiAgICAgICAgYnV0dG9uLmNvbG9yID0gXCIjMzY0MjQ5XCI7XHJcbiAgICAgICAgYnV0dG9uLmJhY2tncm91bmQgPSBcIiNDQ0NDQ0NcIjtcclxuICAgICAgICBidXR0b24uaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuXHJcbiAgICAgICAgYnV0dG9uLm9uSXNDaGVja2VkQ2hhbmdlZE9ic2VydmFibGUuYWRkKGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgICAgICBmdW5jKHN0YXRlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgX3NlbGVjdG9yID0gQ29udHJvbC5BZGRIZWFkZXIoYnV0dG9uLCB0ZXh0LCBcIjIwMHB4XCIsIHsgaXNIb3Jpem9udGFsOiB0cnVlLCBjb250cm9sRmlyc3Q6IHRydWUgfSk7XHJcbiAgICAgICAgX3NlbGVjdG9yLmhlaWdodCA9IFwiMzBweFwiO1xyXG4gICAgICAgIF9zZWxlY3Rvci5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIF9zZWxlY3Rvci5sZWZ0ID0gXCI0cHhcIjtcclxuXHJcbiAgICAgICAgdGhpcy5ncm91cFBhbmVsLmFkZENvbnRyb2woX3NlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLnNlbGVjdG9ycy5wdXNoKF9zZWxlY3Rvcik7XHJcbiAgICAgICAgYnV0dG9uLmlzQ2hlY2tlZCA9IGNoZWNrZWQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmdyb3VwUGFuZWwucGFyZW50ICYmIHRoaXMuZ3JvdXBQYW5lbC5wYXJlbnQucGFyZW50KSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jb2xvciA9ICg8U2VsZWN0aW9uUGFuZWw+dGhpcy5ncm91cFBhbmVsLnBhcmVudC5wYXJlbnQpLmJ1dHRvbkNvbG9yO1xyXG4gICAgICAgICAgICBidXR0b24uYmFja2dyb3VuZCA9ICg8U2VsZWN0aW9uUGFuZWw+dGhpcy5ncm91cFBhbmVsLnBhcmVudC5wYXJlbnQpLmJ1dHRvbkJhY2tncm91bmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfc2V0U2VsZWN0b3JMYWJlbChzZWxlY3Rvck5iOiBudW1iZXIsIGxhYmVsOiBzdHJpbmcpIHtcclxuICAgICAgICAoPFRleHRCbG9jaz50aGlzLnNlbGVjdG9yc1tzZWxlY3Rvck5iXS5jaGlsZHJlblsxXSkudGV4dCA9IGxhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfc2V0U2VsZWN0b3JMYWJlbENvbG9yKHNlbGVjdG9yTmI6IG51bWJlciwgY29sb3I6IHN0cmluZykge1xyXG4gICAgICAgICg8VGV4dEJsb2NrPnRoaXMuc2VsZWN0b3JzW3NlbGVjdG9yTmJdLmNoaWxkcmVuWzFdKS5jb2xvciA9IGNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfc2V0U2VsZWN0b3JCdXR0b25Db2xvcihzZWxlY3Rvck5iOiBudW1iZXIsIGNvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdG9yc1tzZWxlY3Rvck5iXS5jaGlsZHJlblswXS5jb2xvciA9IGNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfc2V0U2VsZWN0b3JCdXR0b25CYWNrZ3JvdW5kKHNlbGVjdG9yTmI6IG51bWJlciwgY29sb3I6IHN0cmluZykge1xyXG4gICAgICAgICg8Q2hlY2tib3g+dGhpcy5zZWxlY3RvcnNbc2VsZWN0b3JOYl0uY2hpbGRyZW5bMF0pLmJhY2tncm91bmQgPSBjb2xvcjtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGEgUmFkaW9Hcm91cFxyXG4gKiB3aGljaCBjb250YWlucyBncm91cHMgb2YgcmFkaW8gYnV0dG9uc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJhZGlvR3JvdXAgZXh0ZW5kcyBTZWxlY3Rvckdyb3VwIHtcclxuICAgIHByaXZhdGUgX3NlbGVjdE5iID0gMDtcclxuXHJcbiAgICAvKiogQWRkcyBhIHJhZGlvIGJ1dHRvbiBhcyBhIGNvbnRyb2xcclxuICAgICAqIEBwYXJhbSBsYWJlbCBpcyB0aGUgbGFiZWwgZm9yIHRoZSBzZWxlY3RvclxyXG4gICAgICogQHBhcmFtIGZ1bmMgaXMgdGhlIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBTZWxlY3RvciBpcyBjaGVja2VkXHJcbiAgICAgKiBAcGFyYW0gY2hlY2tlZCBpcyB0cnVlIHdoZW4gU2VsZWN0b3IgaXMgY2hlY2tlZFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBwdWJsaWMgYWRkUmFkaW8obGFiZWw6IHN0cmluZywgZnVuYyA9IChuOiBudW1iZXIpID0+IHt9LCBjaGVja2VkID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBuYiA9IHRoaXMuX3NlbGVjdE5iKys7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IFJhZGlvQnV0dG9uKCk7XHJcbiAgICAgICAgYnV0dG9uLm5hbWUgPSBsYWJlbDtcclxuICAgICAgICBidXR0b24ud2lkdGggPSBcIjIwcHhcIjtcclxuICAgICAgICBidXR0b24uaGVpZ2h0ID0gXCIyMHB4XCI7XHJcbiAgICAgICAgYnV0dG9uLmNvbG9yID0gXCIjMzY0MjQ5XCI7XHJcbiAgICAgICAgYnV0dG9uLmJhY2tncm91bmQgPSBcIiNDQ0NDQ0NcIjtcclxuICAgICAgICBidXR0b24uZ3JvdXAgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgYnV0dG9uLmhvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ7XHJcblxyXG4gICAgICAgIGJ1dHRvbi5vbklzQ2hlY2tlZENoYW5nZWRPYnNlcnZhYmxlLmFkZChmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jKG5iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBfc2VsZWN0b3IgPSBDb250cm9sLkFkZEhlYWRlcihidXR0b24sIGxhYmVsLCBcIjIwMHB4XCIsIHsgaXNIb3Jpem9udGFsOiB0cnVlLCBjb250cm9sRmlyc3Q6IHRydWUgfSk7XHJcbiAgICAgICAgX3NlbGVjdG9yLmhlaWdodCA9IFwiMzBweFwiO1xyXG4gICAgICAgIF9zZWxlY3Rvci5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIF9zZWxlY3Rvci5sZWZ0ID0gXCI0cHhcIjtcclxuICAgICAgICB0aGlzLmdyb3VwUGFuZWwuYWRkQ29udHJvbChfc2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0b3JzLnB1c2goX3NlbGVjdG9yKTtcclxuICAgICAgICBidXR0b24uaXNDaGVja2VkID0gY2hlY2tlZDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBQYW5lbC5wYXJlbnQgJiYgdGhpcy5ncm91cFBhbmVsLnBhcmVudC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgYnV0dG9uLmNvbG9yID0gKDxTZWxlY3Rpb25QYW5lbD50aGlzLmdyb3VwUGFuZWwucGFyZW50LnBhcmVudCkuYnV0dG9uQ29sb3I7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5iYWNrZ3JvdW5kID0gKDxTZWxlY3Rpb25QYW5lbD50aGlzLmdyb3VwUGFuZWwucGFyZW50LnBhcmVudCkuYnV0dG9uQmFja2dyb3VuZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9zZXRTZWxlY3RvckxhYmVsKHNlbGVjdG9yTmI6IG51bWJlciwgbGFiZWw6IHN0cmluZykge1xyXG4gICAgICAgICg8VGV4dEJsb2NrPnRoaXMuc2VsZWN0b3JzW3NlbGVjdG9yTmJdLmNoaWxkcmVuWzFdKS50ZXh0ID0gbGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9zZXRTZWxlY3RvckxhYmVsQ29sb3Ioc2VsZWN0b3JOYjogbnVtYmVyLCBjb2xvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgKDxUZXh0QmxvY2s+dGhpcy5zZWxlY3RvcnNbc2VsZWN0b3JOYl0uY2hpbGRyZW5bMV0pLmNvbG9yID0gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9zZXRTZWxlY3RvckJ1dHRvbkNvbG9yKHNlbGVjdG9yTmI6IG51bWJlciwgY29sb3I6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0b3JzW3NlbGVjdG9yTmJdLmNoaWxkcmVuWzBdLmNvbG9yID0gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9zZXRTZWxlY3RvckJ1dHRvbkJhY2tncm91bmQoc2VsZWN0b3JOYjogbnVtYmVyLCBjb2xvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgKDxSYWRpb0J1dHRvbj50aGlzLnNlbGVjdG9yc1tzZWxlY3Rvck5iXS5jaGlsZHJlblswXSkuYmFja2dyb3VuZCA9IGNvbG9yO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQ2xhc3MgdXNlZCB0byBjcmVhdGUgYSBTbGlkZXJHcm91cFxyXG4gKiB3aGljaCBjb250YWlucyBncm91cHMgb2Ygc2xpZGVyIGJ1dHRvbnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTbGlkZXJHcm91cCBleHRlbmRzIFNlbGVjdG9yR3JvdXAge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgc2xpZGVyIHRvIHRoZSBTZWxlY3Rvckdyb3VwXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgaXMgdGhlIGxhYmVsIGZvciB0aGUgU2xpZGVyQmFyXHJcbiAgICAgKiBAcGFyYW0gZnVuYyBpcyB0aGUgZnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIFNsaWRlciBtb3Zlc1xyXG4gICAgICogQHBhcmFtIHVuaXQgaXMgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgdW5pdHMgdXNlZCwgZWcgZGVncmVlcyBvciBtZXRyZXNcclxuICAgICAqIEBwYXJhbSBtaW4gaXMgdGhlIG1pbmltdW0gdmFsdWUgZm9yIHRoZSBTbGlkZXJcclxuICAgICAqIEBwYXJhbSBtYXggaXMgdGhlIG1heGltdW0gdmFsdWUgZm9yIHRoZSBTbGlkZXJcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBpcyB0aGUgc3RhcnQgdmFsdWUgZm9yIHRoZSBTbGlkZXIgYmV0d2VlbiBtaW4gYW5kIG1heFxyXG4gICAgICogQHBhcmFtIG9uVmFsdWVDaGFuZ2UgaXMgdGhlIGZ1bmN0aW9uIHVzZWQgdG8gZm9ybWF0IHRoZSB2YWx1ZSBkaXNwbGF5ZWQsIGVnIHJhZGlhbnMgdG8gZGVncmVlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkU2xpZGVyKFxyXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgICAgIGZ1bmMgPSAodjogbnVtYmVyKSA9PiB7fSxcclxuICAgICAgICB1bml0OiBzdHJpbmcgPSBcIlVuaXRzXCIsXHJcbiAgICAgICAgbWluOiBudW1iZXIgPSAwLFxyXG4gICAgICAgIG1heDogbnVtYmVyID0gMCxcclxuICAgICAgICB2YWx1ZTogbnVtYmVyID0gMCxcclxuICAgICAgICBvblZhbHVlQ2hhbmdlID0gKHY6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdiB8IDA7XHJcbiAgICAgICAgfVxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IFNsaWRlcigpO1xyXG4gICAgICAgIGJ1dHRvbi5uYW1lID0gdW5pdDtcclxuICAgICAgICBidXR0b24udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBidXR0b24ubWluaW11bSA9IG1pbjtcclxuICAgICAgICBidXR0b24ubWF4aW11bSA9IG1heDtcclxuICAgICAgICBidXR0b24ud2lkdGggPSAwLjk7XHJcbiAgICAgICAgYnV0dG9uLmhlaWdodCA9IFwiMjBweFwiO1xyXG4gICAgICAgIGJ1dHRvbi5jb2xvciA9IFwiIzM2NDI0OVwiO1xyXG4gICAgICAgIGJ1dHRvbi5iYWNrZ3JvdW5kID0gXCIjQ0NDQ0NDXCI7XHJcbiAgICAgICAgYnV0dG9uLmJvcmRlckNvbG9yID0gXCJibGFja1wiO1xyXG4gICAgICAgIGJ1dHRvbi5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIGJ1dHRvbi5sZWZ0ID0gXCI0cHhcIjtcclxuICAgICAgICBidXR0b24ucGFkZGluZ0JvdHRvbSA9IFwiNHB4XCI7XHJcblxyXG4gICAgICAgIGJ1dHRvbi5vblZhbHVlQ2hhbmdlZE9ic2VydmFibGUuYWRkKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAoPFRleHRCbG9jaz5idXR0b24ucGFyZW50IS5jaGlsZHJlblswXSkudGV4dCA9IGJ1dHRvbi5wYXJlbnQhLmNoaWxkcmVuWzBdLm5hbWUgKyBcIjogXCIgKyBvblZhbHVlQ2hhbmdlKHZhbHVlKSArIFwiIFwiICsgYnV0dG9uLm5hbWU7XHJcbiAgICAgICAgICAgIGZ1bmModmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBfc2VsZWN0b3IgPSBDb250cm9sLkFkZEhlYWRlcihidXR0b24sIGxhYmVsICsgXCI6IFwiICsgb25WYWx1ZUNoYW5nZSh2YWx1ZSkgKyBcIiBcIiArIHVuaXQsIFwiMzBweFwiLCB7IGlzSG9yaXpvbnRhbDogZmFsc2UsIGNvbnRyb2xGaXJzdDogZmFsc2UgfSk7XHJcbiAgICAgICAgX3NlbGVjdG9yLmhlaWdodCA9IFwiNjBweFwiO1xyXG4gICAgICAgIF9zZWxlY3Rvci5ob3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUO1xyXG4gICAgICAgIF9zZWxlY3Rvci5sZWZ0ID0gXCI0cHhcIjtcclxuICAgICAgICBfc2VsZWN0b3IuY2hpbGRyZW5bMF0ubmFtZSA9IGxhYmVsO1xyXG4gICAgICAgIHRoaXMuZ3JvdXBQYW5lbC5hZGRDb250cm9sKF9zZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RvcnMucHVzaChfc2VsZWN0b3IpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5ncm91cFBhbmVsLnBhcmVudCAmJiB0aGlzLmdyb3VwUGFuZWwucGFyZW50LnBhcmVudCkge1xyXG4gICAgICAgICAgICBidXR0b24uY29sb3IgPSAoPFNlbGVjdGlvblBhbmVsPnRoaXMuZ3JvdXBQYW5lbC5wYXJlbnQucGFyZW50KS5idXR0b25Db2xvcjtcclxuICAgICAgICAgICAgYnV0dG9uLmJhY2tncm91bmQgPSAoPFNlbGVjdGlvblBhbmVsPnRoaXMuZ3JvdXBQYW5lbC5wYXJlbnQucGFyZW50KS5idXR0b25CYWNrZ3JvdW5kO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX3NldFNlbGVjdG9yTGFiZWwoc2VsZWN0b3JOYjogbnVtYmVyLCBsYWJlbDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RvcnNbc2VsZWN0b3JOYl0uY2hpbGRyZW5bMF0ubmFtZSA9IGxhYmVsO1xyXG4gICAgICAgICg8VGV4dEJsb2NrPnRoaXMuc2VsZWN0b3JzW3NlbGVjdG9yTmJdLmNoaWxkcmVuWzBdKS50ZXh0ID1cclxuICAgICAgICAgICAgbGFiZWwgKyBcIjogXCIgKyAoPFNsaWRlcj50aGlzLnNlbGVjdG9yc1tzZWxlY3Rvck5iXS5jaGlsZHJlblsxXSkudmFsdWUgKyBcIiBcIiArIHRoaXMuc2VsZWN0b3JzW3NlbGVjdG9yTmJdLmNoaWxkcmVuWzFdLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9zZXRTZWxlY3RvckxhYmVsQ29sb3Ioc2VsZWN0b3JOYjogbnVtYmVyLCBjb2xvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgKDxUZXh0QmxvY2s+dGhpcy5zZWxlY3RvcnNbc2VsZWN0b3JOYl0uY2hpbGRyZW5bMF0pLmNvbG9yID0gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9zZXRTZWxlY3RvckJ1dHRvbkNvbG9yKHNlbGVjdG9yTmI6IG51bWJlciwgY29sb3I6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0b3JzW3NlbGVjdG9yTmJdLmNoaWxkcmVuWzFdLmNvbG9yID0gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9zZXRTZWxlY3RvckJ1dHRvbkJhY2tncm91bmQoc2VsZWN0b3JOYjogbnVtYmVyLCBjb2xvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgKDxTbGlkZXI+dGhpcy5zZWxlY3RvcnNbc2VsZWN0b3JOYl0uY2hpbGRyZW5bMV0pLmJhY2tncm91bmQgPSBjb2xvcjtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIENsYXNzIHVzZWQgdG8gaG9sZCB0aGUgY29udHJvbHMgZm9yIHRoZSBjaGVja2JveGVzLCByYWRpbyBidXR0b25zIGFuZCBzbGlkZXJzXHJcbiAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9zZWxlY3RvclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNlbGVjdGlvblBhbmVsIGV4dGVuZHMgUmVjdGFuZ2xlIHtcclxuICAgIHByaXZhdGUgX3BhbmVsOiBTdGFja1BhbmVsO1xyXG4gICAgcHJpdmF0ZSBfYnV0dG9uQ29sb3I6IHN0cmluZyA9IFwiIzM2NDI0OVwiO1xyXG4gICAgcHJpdmF0ZSBfYnV0dG9uQmFja2dyb3VuZDogc3RyaW5nID0gXCIjQ0NDQ0NDXCI7XHJcbiAgICBwcml2YXRlIF9oZWFkZXJDb2xvcjogc3RyaW5nID0gXCJibGFja1wiO1xyXG4gICAgcHJpdmF0ZSBfYmFyQ29sb3I6IHN0cmluZyA9IFwid2hpdGVcIjtcclxuICAgIHByaXZhdGUgX2JhckhlaWdodDogc3RyaW5nID0gXCIycHhcIjtcclxuICAgIHByaXZhdGUgX3NwYWNlckhlaWdodDogc3RyaW5nID0gXCIyMHB4XCI7XHJcbiAgICBwcml2YXRlIF9sYWJlbENvbG9yOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9ncm91cHM6IFNlbGVjdG9yR3JvdXBbXTtcclxuICAgIHByaXZhdGUgX2JhcnM6IGFueVtdID0gbmV3IEFycmF5KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFNlbGVjdGlvblBhbmVsXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBvZiBTZWxlY3Rpb25QYW5lbFxyXG4gICAgICogQHBhcmFtIGdyb3VwcyBpcyBhbiBhcnJheSBvZiBTZWxlY3Rpb25Hcm91cHNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqIG5hbWUgb2YgU2VsZWN0aW9uUGFuZWwgKi9cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgbmFtZTogc3RyaW5nLFxyXG4gICAgICAgIC8qKiBhbiBhcnJheSBvZiBTZWxlY3Rpb25Hcm91cHMgKi9cclxuICAgICAgICBwdWJsaWMgZ3JvdXBzOiBTZWxlY3Rvckdyb3VwW10gPSBbXVxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICAgICAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xyXG4gICAgICAgIHRoaXMudGhpY2tuZXNzID0gMjtcclxuICAgICAgICB0aGlzLl9wYW5lbCA9IG5ldyBTdGFja1BhbmVsKCk7XHJcbiAgICAgICAgdGhpcy5fcGFuZWwudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9UT1A7XHJcbiAgICAgICAgdGhpcy5fcGFuZWwuaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgICAgICB0aGlzLl9wYW5lbC50b3AgPSA1O1xyXG4gICAgICAgIHRoaXMuX3BhbmVsLmxlZnQgPSA1O1xyXG4gICAgICAgIHRoaXMuX3BhbmVsLndpZHRoID0gMC45NTtcclxuICAgICAgICBpZiAoZ3JvdXBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYW5lbC5hZGRDb250cm9sKGdyb3Vwc1tpXS5ncm91cFBhbmVsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZFNwYWNlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3BhbmVsLmFkZENvbnRyb2woZ3JvdXBzW2dyb3Vwcy5sZW5ndGggLSAxXS5ncm91cFBhbmVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hZGRDb250cm9sKHRoaXMuX3BhbmVsKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiU2VsZWN0aW9uUGFuZWxcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyB0aGUgKHN0YWNrKSBwYW5lbCBvZiB0aGUgU2VsZWN0aW9uUGFuZWwgICovXHJcbiAgICBwdWJsaWMgZ2V0IHBhbmVsKCk6IFN0YWNrUGFuZWwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYW5lbDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBoZWFkZXJDb2xvciAqL1xyXG4gICAgcHVibGljIGdldCBoZWFkZXJDb2xvcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGhlYWRlckNvbG9yKGNvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5faGVhZGVyQ29sb3IgPT09IGNvbG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGVhZGVyQ29sb3IgPSBjb2xvcjtcclxuICAgICAgICB0aGlzLl9zZXRIZWFkZXJDb2xvcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NldEhlYWRlckNvbG9yKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dyb3Vwc1tpXS5ncm91cFBhbmVsLmNoaWxkcmVuWzBdLmNvbG9yID0gdGhpcy5faGVhZGVyQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGJ1dHRvbiBjb2xvciAqL1xyXG4gICAgcHVibGljIGdldCBidXR0b25Db2xvcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9idXR0b25Db2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJ1dHRvbkNvbG9yKGNvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fYnV0dG9uQ29sb3IgPT09IGNvbG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2J1dHRvbkNvbG9yID0gY29sb3I7XHJcbiAgICAgICAgdGhpcy5fc2V0YnV0dG9uQ29sb3IoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zZXRidXR0b25Db2xvcigpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2dyb3Vwcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX2dyb3Vwc1tpXS5zZWxlY3RvcnMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICg8Q2hlY2tib3hHcm91cCB8IFJhZGlvR3JvdXAgfCBTbGlkZXJHcm91cD50aGlzLl9ncm91cHNbaV0pLl9zZXRTZWxlY3RvckJ1dHRvbkNvbG9yKGosIHRoaXMuX2J1dHRvbkNvbG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBsYWJlbCBjb2xvciAqL1xyXG4gICAgcHVibGljIGdldCBsYWJlbENvbG9yKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsQ29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBsYWJlbENvbG9yKGNvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fbGFiZWxDb2xvciA9PT0gY29sb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sYWJlbENvbG9yID0gY29sb3I7XHJcbiAgICAgICAgdGhpcy5fc2V0TGFiZWxDb2xvcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NldExhYmVsQ29sb3IoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9ncm91cHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9ncm91cHNbaV0uc2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAoPENoZWNrYm94R3JvdXAgfCBSYWRpb0dyb3VwIHwgU2xpZGVyR3JvdXA+dGhpcy5fZ3JvdXBzW2ldKS5fc2V0U2VsZWN0b3JMYWJlbENvbG9yKGosIHRoaXMuX2xhYmVsQ29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGJ1dHRvbiBiYWNrZ3JvdW5kICovXHJcbiAgICBwdWJsaWMgZ2V0IGJ1dHRvbkJhY2tncm91bmQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnV0dG9uQmFja2dyb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJ1dHRvbkJhY2tncm91bmQoY29sb3I6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9idXR0b25CYWNrZ3JvdW5kID09PSBjb2xvcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9idXR0b25CYWNrZ3JvdW5kID0gY29sb3I7XHJcbiAgICAgICAgdGhpcy5fc2V0QnV0dG9uQmFja2dyb3VuZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NldEJ1dHRvbkJhY2tncm91bmQoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9ncm91cHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9ncm91cHNbaV0uc2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAoPENoZWNrYm94R3JvdXAgfCBSYWRpb0dyb3VwIHwgU2xpZGVyR3JvdXA+dGhpcy5fZ3JvdXBzW2ldKS5fc2V0U2VsZWN0b3JCdXR0b25CYWNrZ3JvdW5kKGosIHRoaXMuX2J1dHRvbkJhY2tncm91bmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIGNvbG9yIG9mIHNlcGFyYXRvciBiYXIgKi9cclxuICAgIHB1YmxpYyBnZXQgYmFyQ29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFyQ29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBiYXJDb2xvcihjb2xvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JhckNvbG9yID09PSBjb2xvcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYXJDb2xvciA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMuX3NldEJhckNvbG9yKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfc2V0QmFyQ29sb3IoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9iYXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhcnNbaV0uY2hpbGRyZW5bMF0uYmFja2dyb3VuZCA9IHRoaXMuX2JhckNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBoZWlnaHQgb2Ygc2VwYXJhdG9yIGJhciAqL1xyXG4gICAgcHVibGljIGdldCBiYXJIZWlnaHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFySGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYmFySGVpZ2h0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fYmFySGVpZ2h0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYXJIZWlnaHQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9zZXRCYXJIZWlnaHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zZXRCYXJIZWlnaHQoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9iYXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhcnNbaV0uY2hpbGRyZW5bMF0uaGVpZ2h0ID0gdGhpcy5fYmFySGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBoZWlnaHQgb2Ygc3BhY2VycyovXHJcbiAgICBwdWJsaWMgZ2V0IHNwYWNlckhlaWdodCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zcGFjZXJIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzcGFjZXJIZWlnaHQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9zcGFjZXJIZWlnaHQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NwYWNlckhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3NldFNwYWNlckhlaWdodCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NldFNwYWNlckhlaWdodCgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2JhcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fYmFyc1tpXS5oZWlnaHQgPSB0aGlzLl9zcGFjZXJIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBBZGRzIGEgYmFyIGJldHdlZW4gZ3JvdXBzICovXHJcbiAgICBwcml2YXRlIF9hZGRTcGFjZXIoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9yID0gbmV3IENvbnRhaW5lcigpO1xyXG4gICAgICAgIHNlcGFyYXRvci53aWR0aCA9IDE7XHJcbiAgICAgICAgc2VwYXJhdG9yLmhlaWdodCA9IHRoaXMuX3NwYWNlckhlaWdodDtcclxuICAgICAgICBzZXBhcmF0b3IuaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuXHJcbiAgICAgICAgY29uc3QgYmFyID0gbmV3IFJlY3RhbmdsZSgpO1xyXG4gICAgICAgIGJhci53aWR0aCA9IDE7XHJcbiAgICAgICAgYmFyLmhlaWdodCA9IHRoaXMuX2JhckhlaWdodDtcclxuICAgICAgICBiYXIuaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgICAgICBiYXIudmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcbiAgICAgICAgYmFyLmJhY2tncm91bmQgPSB0aGlzLl9iYXJDb2xvcjtcclxuICAgICAgICBiYXIuY29sb3IgPSBcInRyYW5zcGFyZW50XCI7XHJcbiAgICAgICAgc2VwYXJhdG9yLmFkZENvbnRyb2woYmFyKTtcclxuXHJcbiAgICAgICAgdGhpcy5fcGFuZWwuYWRkQ29udHJvbChzZXBhcmF0b3IpO1xyXG4gICAgICAgIHRoaXMuX2JhcnMucHVzaChzZXBhcmF0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBBZGQgYSBncm91cCB0byB0aGUgc2VsZWN0aW9uIHBhbmVsXHJcbiAgICAgKiBAcGFyYW0gZ3JvdXAgaXMgdGhlIHNlbGVjdG9yIGdyb3VwIHRvIGFkZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkR3JvdXAoZ3JvdXA6IFNlbGVjdG9yR3JvdXApOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdXBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fYWRkU3BhY2VyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3BhbmVsLmFkZENvbnRyb2woZ3JvdXAuZ3JvdXBQYW5lbCk7XHJcbiAgICAgICAgdGhpcy5fZ3JvdXBzLnB1c2goZ3JvdXApO1xyXG4gICAgICAgIGdyb3VwLmdyb3VwUGFuZWwuY2hpbGRyZW5bMF0uY29sb3IgPSB0aGlzLl9oZWFkZXJDb2xvcjtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyb3VwLnNlbGVjdG9ycy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAoPENoZWNrYm94R3JvdXAgfCBSYWRpb0dyb3VwIHwgU2xpZGVyR3JvdXA+Z3JvdXApLl9zZXRTZWxlY3RvckJ1dHRvbkNvbG9yKGosIHRoaXMuX2J1dHRvbkNvbG9yKTtcclxuICAgICAgICAgICAgKDxDaGVja2JveEdyb3VwIHwgUmFkaW9Hcm91cCB8IFNsaWRlckdyb3VwPmdyb3VwKS5fc2V0U2VsZWN0b3JCdXR0b25CYWNrZ3JvdW5kKGosIHRoaXMuX2J1dHRvbkJhY2tncm91bmQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogUmVtb3ZlIHRoZSBncm91cCBmcm9tIHRoZSBnaXZlbiBwb3NpdGlvblxyXG4gICAgICogQHBhcmFtIGdyb3VwTmIgaXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBncm91cCBpbiB0aGUgbGlzdFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVtb3ZlR3JvdXAoZ3JvdXBOYjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGdyb3VwTmIgPCAwIHx8IGdyb3VwTmIgPj0gdGhpcy5fZ3JvdXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5fZ3JvdXBzW2dyb3VwTmJdO1xyXG4gICAgICAgIHRoaXMuX3BhbmVsLnJlbW92ZUNvbnRyb2woZ3JvdXAuZ3JvdXBQYW5lbCk7XHJcbiAgICAgICAgdGhpcy5fZ3JvdXBzLnNwbGljZShncm91cE5iLCAxKTtcclxuICAgICAgICBpZiAoZ3JvdXBOYiA8IHRoaXMuX2JhcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhbmVsLnJlbW92ZUNvbnRyb2wodGhpcy5fYmFyc1tncm91cE5iXSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhcnMuc3BsaWNlKGdyb3VwTmIsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQ2hhbmdlIGEgZ3JvdXAgaGVhZGVyIGxhYmVsXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgaXMgdGhlIG5ldyBncm91cCBoZWFkZXIgbGFiZWxcclxuICAgICAqIEBwYXJhbSBncm91cE5iIGlzIHRoZSBudW1iZXIgb2YgdGhlIGdyb3VwIHRvIHJlbGFiZWxcclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgc2V0SGVhZGVyTmFtZShsYWJlbDogc3RyaW5nLCBncm91cE5iOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoZ3JvdXBOYiA8IDAgfHwgZ3JvdXBOYiA+PSB0aGlzLl9ncm91cHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLl9ncm91cHNbZ3JvdXBOYl07XHJcbiAgICAgICAgKDxUZXh0QmxvY2s+Z3JvdXAuZ3JvdXBQYW5lbC5jaGlsZHJlblswXSkudGV4dCA9IGxhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBDaGFuZ2Ugc2VsZWN0b3IgbGFiZWwgdG8gdGhlIG9uZSBnaXZlblxyXG4gICAgICogQHBhcmFtIGxhYmVsIGlzIHRoZSBuZXcgc2VsZWN0b3IgbGFiZWxcclxuICAgICAqIEBwYXJhbSBncm91cE5iIGlzIHRoZSBudW1iZXIgb2YgdGhlIGdyb3VwY29udGFpbmluZyB0aGUgc2VsZWN0b3JcclxuICAgICAqIEBwYXJhbSBzZWxlY3Rvck5iIGlzIHRoZSBudW1iZXIgb2YgdGhlIHNlbGVjdG9yIHdpdGhpbiBhIGdyb3VwIHRvIHJlbGFiZWxcclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgcmVsYWJlbChsYWJlbDogc3RyaW5nLCBncm91cE5iOiBudW1iZXIsIHNlbGVjdG9yTmI6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmIChncm91cE5iIDwgMCB8fCBncm91cE5iID49IHRoaXMuX2dyb3Vwcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuX2dyb3Vwc1tncm91cE5iXTtcclxuICAgICAgICBpZiAoc2VsZWN0b3JOYiA8IDAgfHwgc2VsZWN0b3JOYiA+PSBncm91cC5zZWxlY3RvcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgKDxDaGVja2JveEdyb3VwIHwgUmFkaW9Hcm91cCB8IFNsaWRlckdyb3VwPmdyb3VwKS5fc2V0U2VsZWN0b3JMYWJlbChzZWxlY3Rvck5iLCBsYWJlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEZvciBhIGdpdmVuIGdyb3VwIHBvc2l0aW9uIHJlbW92ZSB0aGUgc2VsZWN0b3IgYXQgdGhlIGdpdmVuIHBvc2l0aW9uXHJcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYiBpcyB0aGUgbnVtYmVyIG9mIHRoZSBncm91cCB0byByZW1vdmUgdGhlIHNlbGVjdG9yIGZyb21cclxuICAgICAqIEBwYXJhbSBzZWxlY3Rvck5iIGlzIHRoZSBudW1iZXIgb2YgdGhlIHNlbGVjdG9yIHdpdGhpbiB0aGUgZ3JvdXBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZUZyb21Hcm91cFNlbGVjdG9yKGdyb3VwTmI6IG51bWJlciwgc2VsZWN0b3JOYjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGdyb3VwTmIgPCAwIHx8IGdyb3VwTmIgPj0gdGhpcy5fZ3JvdXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5fZ3JvdXBzW2dyb3VwTmJdO1xyXG4gICAgICAgIGlmIChzZWxlY3Rvck5iIDwgMCB8fCBzZWxlY3Rvck5iID49IGdyb3VwLnNlbGVjdG9ycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBncm91cC5yZW1vdmVTZWxlY3RvcihzZWxlY3Rvck5iKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogRm9yIGEgZ2l2ZW4gZ3JvdXAgcG9zaXRpb24gb2YgY29ycmVjdCB0eXBlIGFkZCBhIGNoZWNrYm94IGJ1dHRvblxyXG4gICAgICogQHBhcmFtIGdyb3VwTmIgaXMgdGhlIG51bWJlciBvZiB0aGUgZ3JvdXAgdG8gcmVtb3ZlIHRoZSBzZWxlY3RvciBmcm9tXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgaXMgdGhlIGxhYmVsIGZvciB0aGUgc2VsZWN0b3JcclxuICAgICAqIEBwYXJhbSBmdW5jIGlzIHRoZSBmdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGUgU2VsZWN0b3IgaXMgY2hlY2tlZFxyXG4gICAgICogQHBhcmFtIGNoZWNrZWQgaXMgdHJ1ZSB3aGVuIFNlbGVjdG9yIGlzIGNoZWNrZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkZFRvR3JvdXBDaGVja2JveChncm91cE5iOiBudW1iZXIsIGxhYmVsOiBzdHJpbmcsIGZ1bmMgPSAoKSA9PiB7fSwgY2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGdyb3VwTmIgPCAwIHx8IGdyb3VwTmIgPj0gdGhpcy5fZ3JvdXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5fZ3JvdXBzW2dyb3VwTmJdO1xyXG4gICAgICAgICg8Q2hlY2tib3hHcm91cD5ncm91cCkuYWRkQ2hlY2tib3gobGFiZWwsIGZ1bmMsIGNoZWNrZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBGb3IgYSBnaXZlbiBncm91cCBwb3NpdGlvbiBvZiBjb3JyZWN0IHR5cGUgYWRkIGEgcmFkaW8gYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYiBpcyB0aGUgbnVtYmVyIG9mIHRoZSBncm91cCB0byByZW1vdmUgdGhlIHNlbGVjdG9yIGZyb21cclxuICAgICAqIEBwYXJhbSBsYWJlbCBpcyB0aGUgbGFiZWwgZm9yIHRoZSBzZWxlY3RvclxyXG4gICAgICogQHBhcmFtIGZ1bmMgaXMgdGhlIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBTZWxlY3RvciBpcyBjaGVja2VkXHJcbiAgICAgKiBAcGFyYW0gY2hlY2tlZCBpcyB0cnVlIHdoZW4gU2VsZWN0b3IgaXMgY2hlY2tlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkVG9Hcm91cFJhZGlvKGdyb3VwTmI6IG51bWJlciwgbGFiZWw6IHN0cmluZywgZnVuYyA9ICgpID0+IHt9LCBjaGVja2VkOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBpZiAoZ3JvdXBOYiA8IDAgfHwgZ3JvdXBOYiA+PSB0aGlzLl9ncm91cHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLl9ncm91cHNbZ3JvdXBOYl07XHJcbiAgICAgICAgKDxSYWRpb0dyb3VwPmdyb3VwKS5hZGRSYWRpbyhsYWJlbCwgZnVuYywgY2hlY2tlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3IgYSBnaXZlbiBzbGlkZXIgZ3JvdXAgYWRkIGEgc2xpZGVyXHJcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYiBpcyB0aGUgbnVtYmVyIG9mIHRoZSBncm91cCB0byBhZGQgdGhlIHNsaWRlciB0b1xyXG4gICAgICogQHBhcmFtIGxhYmVsIGlzIHRoZSBsYWJlbCBmb3IgdGhlIFNsaWRlclxyXG4gICAgICogQHBhcmFtIGZ1bmMgaXMgdGhlIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBTbGlkZXIgbW92ZXNcclxuICAgICAqIEBwYXJhbSB1bml0IGlzIGEgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHVuaXRzIHVzZWQsIGVnIGRlZ3JlZXMgb3IgbWV0cmVzXHJcbiAgICAgKiBAcGFyYW0gbWluIGlzIHRoZSBtaW5pbXVtIHZhbHVlIGZvciB0aGUgU2xpZGVyXHJcbiAgICAgKiBAcGFyYW0gbWF4IGlzIHRoZSBtYXhpbXVtIHZhbHVlIGZvciB0aGUgU2xpZGVyXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgaXMgdGhlIHN0YXJ0IHZhbHVlIGZvciB0aGUgU2xpZGVyIGJldHdlZW4gbWluIGFuZCBtYXhcclxuICAgICAqIEBwYXJhbSBvblZhbCBpcyB0aGUgZnVuY3Rpb24gdXNlZCB0byBmb3JtYXQgdGhlIHZhbHVlIGRpc3BsYXllZCwgZWcgcmFkaWFucyB0byBkZWdyZWVzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRUb0dyb3VwU2xpZGVyKFxyXG4gICAgICAgIGdyb3VwTmI6IG51bWJlcixcclxuICAgICAgICBsYWJlbDogc3RyaW5nLFxyXG4gICAgICAgIGZ1bmMgPSAoKSA9PiB7fSxcclxuICAgICAgICB1bml0OiBzdHJpbmcgPSBcIlVuaXRzXCIsXHJcbiAgICAgICAgbWluOiBudW1iZXIgPSAwLFxyXG4gICAgICAgIG1heDogbnVtYmVyID0gMCxcclxuICAgICAgICB2YWx1ZTogbnVtYmVyID0gMCxcclxuICAgICAgICBvblZhbCA9ICh2OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHYgfCAwO1xyXG4gICAgICAgIH1cclxuICAgICk6IHZvaWQge1xyXG4gICAgICAgIGlmIChncm91cE5iIDwgMCB8fCBncm91cE5iID49IHRoaXMuX2dyb3Vwcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuX2dyb3Vwc1tncm91cE5iXTtcclxuICAgICAgICAoPFNsaWRlckdyb3VwPmdyb3VwKS5hZGRTbGlkZXIobGFiZWwsIGZ1bmMsIHVuaXQsIG1pbiwgbWF4LCB2YWx1ZSwgb25WYWwpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHR5cGUgeyBWZWN0b3IyIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuXHJcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi4vY29udHJvbFwiO1xyXG5pbXBvcnQgeyBWYWx1ZUFuZFVuaXQgfSBmcm9tIFwiLi4vLi4vdmFsdWVBbmRVbml0XCI7XHJcbmltcG9ydCB0eXBlIHsgUG9pbnRlckluZm9CYXNlIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJjb3JlL01pc2MvbG9nZ2VyXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBjcmVhdGUgc2xpZGVyIGNvbnRyb2xzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQmFzZVNsaWRlciBleHRlbmRzIENvbnRyb2wge1xyXG4gICAgcHJvdGVjdGVkIF90aHVtYldpZHRoID0gbmV3IFZhbHVlQW5kVW5pdCgyMCwgVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMLCBmYWxzZSk7XHJcbiAgICBwcml2YXRlIF9taW5pbXVtID0gMDtcclxuICAgIHByaXZhdGUgX21heGltdW0gPSAxMDA7XHJcbiAgICBwcml2YXRlIF92YWx1ZSA9IDUwO1xyXG4gICAgcHJpdmF0ZSBfaXNWZXJ0aWNhbCA9IGZhbHNlO1xyXG4gICAgcHJvdGVjdGVkIF9iYXJPZmZzZXQgPSBuZXcgVmFsdWVBbmRVbml0KDUsIFZhbHVlQW5kVW5pdC5VTklUTU9ERV9QSVhFTCwgZmFsc2UpO1xyXG4gICAgcHJpdmF0ZSBfaXNUaHVtYkNsYW1wZWQgPSBmYWxzZTtcclxuICAgIHByb3RlY3RlZCBfZGlzcGxheVRodW1iID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX3N0ZXAgPSAwO1xyXG5cclxuICAgIHByaXZhdGUgX2xhc3RQb2ludGVyRG93bklkID0gLTE7XHJcblxyXG4gICAgLy8gU2hhcmVkIHJlbmRlcmluZyBpbmZvXHJcbiAgICBwcm90ZWN0ZWQgX2VmZmVjdGl2ZUJhck9mZnNldCA9IDA7XHJcbiAgICBwcm90ZWN0ZWQgX3JlbmRlckxlZnQ6IG51bWJlcjtcclxuICAgIHByb3RlY3RlZCBfcmVuZGVyVG9wOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgX3JlbmRlcldpZHRoOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgX3JlbmRlckhlaWdodDogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIF9iYWNrZ3JvdW5kQm94TGVuZ3RoOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgX2JhY2tncm91bmRCb3hUaGlja25lc3M6IG51bWJlcjtcclxuICAgIHByb3RlY3RlZCBfZWZmZWN0aXZlVGh1bWJUaGlja25lc3M6IG51bWJlcjtcclxuXHJcbiAgICAvKiogT2JzZXJ2YWJsZSByYWlzZWQgd2hlbiB0aGUgc2xpZGVyIHZhbHVlIGNoYW5nZXMgKi9cclxuICAgIHB1YmxpYyBvblZhbHVlQ2hhbmdlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxudW1iZXI+KCk7XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgdGh1bWIgbXVzdCBiZSByZW5kZXJlZCAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGRpc3BsYXlUaHVtYigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheVRodW1iO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZGlzcGxheVRodW1iKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3BsYXlUaHVtYiA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZGlzcGxheVRodW1iID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGEgc3RlcCB0byBhcHBseSB0byB2YWx1ZXMgKDAgYnkgZGVmYXVsdCkgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBzdGVwKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0ZXA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzdGVwKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3RlcCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc3RlcCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBtYWluIGJhciBvZmZzZXQgKGllLiB0aGUgbWFyZ2luIGFwcGxpZWQgdG8gdGhlIHZhbHVlIGJhcikgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBiYXJPZmZzZXQoKTogc3RyaW5nIHwgbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFyT2Zmc2V0LnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG1haW4gYmFyIG9mZnNldCBpbiBwaXhlbHMqL1xyXG4gICAgcHVibGljIGdldCBiYXJPZmZzZXRJblBpeGVscygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYXJPZmZzZXQuZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUud2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYmFyT2Zmc2V0KHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fYmFyT2Zmc2V0LnRvU3RyaW5nKHRoaXMuX2hvc3QpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fYmFyT2Zmc2V0LmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGh1bWIgd2lkdGggKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCB0aHVtYldpZHRoKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RodW1iV2lkdGgudG9TdHJpbmcodGhpcy5faG9zdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgdGh1bWIgd2lkdGggaW4gcGl4ZWxzICovXHJcbiAgICBwdWJsaWMgZ2V0IHRodW1iV2lkdGhJblBpeGVscygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aHVtYldpZHRoLmdldFZhbHVlSW5QaXhlbCh0aGlzLl9ob3N0LCB0aGlzLl9jYWNoZWRQYXJlbnRNZWFzdXJlLndpZHRoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRodW1iV2lkdGgodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl90aHVtYldpZHRoLnRvU3RyaW5nKHRoaXMuX2hvc3QpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdGh1bWJXaWR0aC5mcm9tU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIG1pbmltdW0gdmFsdWUgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBtaW5pbXVtKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbmltdW07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBtaW5pbXVtKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fbWluaW11bSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWluaW11bSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcblxyXG4gICAgICAgIHRoaXMudmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbih0aGlzLnZhbHVlLCB0aGlzLl9tYXhpbXVtKSwgdGhpcy5fbWluaW11bSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBtYXhpbXVtIHZhbHVlICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgbWF4aW11bSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXhpbXVtO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbWF4aW11bSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21heGltdW0gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21heGltdW0gPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG5cclxuICAgICAgICB0aGlzLnZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4odGhpcy52YWx1ZSwgdGhpcy5fbWF4aW11bSksIHRoaXMuX21pbmltdW0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgY3VycmVudCB2YWx1ZSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4odmFsdWUsIHRoaXMuX21heGltdW0pLCB0aGlzLl9taW5pbXVtKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMuX3ZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHNsaWRlciBzaG91bGQgYmUgdmVydGljYWwgb3IgaG9yaXpvbnRhbCAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGlzVmVydGljYWwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmVydGljYWw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBpc1ZlcnRpY2FsKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzVmVydGljYWwgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzVmVydGljYWwgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIGlmIHRoZSB0aHVtYiBjYW4gZ28gb3ZlciBtYWluIGJhciBleHRlbmRzICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgaXNUaHVtYkNsYW1wZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVGh1bWJDbGFtcGVkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaXNUaHVtYkNsYW1wZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5faXNUaHVtYkNsYW1wZWQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzVGh1bWJDbGFtcGVkID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgQmFzZVNsaWRlclxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBvdmVycmlkZSBuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuaXNQb2ludGVyQmxvY2tlciA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkJhc2VTbGlkZXJcIjtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2dldFRodW1iUG9zaXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKCh0aGlzLm1heGltdW0gLSB0aGlzLnZhbHVlKSAvICh0aGlzLm1heGltdW0gLSB0aGlzLm1pbmltdW0pKSAqIHRoaXMuX2JhY2tncm91bmRCb3hMZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKCh0aGlzLnZhbHVlIC0gdGhpcy5taW5pbXVtKSAvICh0aGlzLm1heGltdW0gLSB0aGlzLm1pbmltdW0pKSAqIHRoaXMuX2JhY2tncm91bmRCb3hMZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9nZXRUaHVtYlRoaWNrbmVzcyh0eXBlOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCB0aHVtYlRoaWNrbmVzcyA9IDA7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjaXJjbGVcIjpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90aHVtYldpZHRoLmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYlRoaWNrbmVzcyA9IE1hdGgubWF4KHRoaXMuX3RodW1iV2lkdGguZ2V0VmFsdWUodGhpcy5faG9zdCksIHRoaXMuX2JhY2tncm91bmRCb3hUaGlja25lc3MpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYlRoaWNrbmVzcyA9IHRoaXMuX2JhY2tncm91bmRCb3hUaGlja25lc3MgKiB0aGlzLl90aHVtYldpZHRoLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyZWN0YW5nbGVcIjpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90aHVtYldpZHRoLmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYlRoaWNrbmVzcyA9IE1hdGgubWluKHRoaXMuX3RodW1iV2lkdGguZ2V0VmFsdWUodGhpcy5faG9zdCksIHRoaXMuX2JhY2tncm91bmRCb3hUaGlja25lc3MpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYlRoaWNrbmVzcyA9IHRoaXMuX2JhY2tncm91bmRCb3hUaGlja25lc3MgKiB0aGlzLl90aHVtYldpZHRoLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGh1bWJUaGlja25lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9wcmVwYXJlUmVuZGVyaW5nRGF0YSh0eXBlOiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBNYWluIGJhclxyXG4gICAgICAgIHRoaXMuX2VmZmVjdGl2ZUJhck9mZnNldCA9IDA7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyTGVmdCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQ7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyVG9wID0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcldpZHRoID0gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGg7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVySGVpZ2h0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQm94TGVuZ3RoID0gTWF0aC5tYXgodGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZEJveFRoaWNrbmVzcyA9IE1hdGgubWluKHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuX2VmZmVjdGl2ZVRodW1iVGhpY2tuZXNzID0gdGhpcy5fZ2V0VGh1bWJUaGlja25lc3ModHlwZSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRpc3BsYXlUaHVtYikge1xyXG4gICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQm94TGVuZ3RoIC09IHRoaXMuX2VmZmVjdGl2ZVRodW1iVGhpY2tuZXNzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3Rocm93IGVycm9yIHdoZW4gaGVpZ2h0IGlzIGxlc3MgdGhhbiB3aWR0aCBmb3IgdmVydGljYWwgc2xpZGVyXHJcbiAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCAmJiB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQgPCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCkge1xyXG4gICAgICAgICAgICBMb2dnZXIuRXJyb3IoXCJIZWlnaHQgc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiB3aWR0aFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fYmFyT2Zmc2V0LmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fZWZmZWN0aXZlQmFyT2Zmc2V0ID0gTWF0aC5taW4odGhpcy5fYmFyT2Zmc2V0LmdldFZhbHVlKHRoaXMuX2hvc3QpLCB0aGlzLl9iYWNrZ3JvdW5kQm94VGhpY2tuZXNzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9lZmZlY3RpdmVCYXJPZmZzZXQgPSB0aGlzLl9iYWNrZ3JvdW5kQm94VGhpY2tuZXNzICogdGhpcy5fYmFyT2Zmc2V0LmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZEJveFRoaWNrbmVzcyAtPSB0aGlzLl9lZmZlY3RpdmVCYXJPZmZzZXQgKiAyO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckxlZnQgKz0gdGhpcy5fZWZmZWN0aXZlQmFyT2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNUaHVtYkNsYW1wZWQgJiYgdGhpcy5kaXNwbGF5VGh1bWIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlclRvcCArPSB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzcyAvIDI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckhlaWdodCA9IHRoaXMuX2JhY2tncm91bmRCb3hMZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcldpZHRoID0gdGhpcy5fYmFja2dyb3VuZEJveFRoaWNrbmVzcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJUb3AgKz0gdGhpcy5fZWZmZWN0aXZlQmFyT2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNUaHVtYkNsYW1wZWQgJiYgdGhpcy5kaXNwbGF5VGh1bWIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlckxlZnQgKz0gdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3MgLyAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckhlaWdodCA9IHRoaXMuX2JhY2tncm91bmRCb3hUaGlja25lc3M7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcldpZHRoID0gdGhpcy5fYmFja2dyb3VuZEJveExlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRXZlbnRzXHJcbiAgICBwcml2YXRlIF9wb2ludGVySXNEb3duID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF91cGRhdGVWYWx1ZUZyb21Qb2ludGVyKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucm90YXRpb24gIT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnZlcnRUcmFuc2Zvcm1NYXRyaXgudHJhbnNmb3JtQ29vcmRpbmF0ZXMoeCwgeSwgdGhpcy5fdHJhbnNmb3JtZWRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHggPSB0aGlzLl90cmFuc2Zvcm1lZFBvc2l0aW9uLng7XHJcbiAgICAgICAgICAgIHkgPSB0aGlzLl90cmFuc2Zvcm1lZFBvc2l0aW9uLnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdmFsdWU6IG51bWJlcjtcclxuICAgICAgICBpZiAodGhpcy5faXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX21pbmltdW0gKyAoMSAtICh5IC0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wKSAvIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCkgKiAodGhpcy5fbWF4aW11bSAtIHRoaXMuX21pbmltdW0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fbWluaW11bSArICgoeCAtIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQpIC8gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgpICogKHRoaXMuX21heGltdW0gLSB0aGlzLl9taW5pbXVtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX3N0ZXAgPyBNYXRoLnJvdW5kKHZhbHVlIC8gdGhpcy5fc3RlcCkgKiB0aGlzLl9zdGVwIDogdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJEb3duKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBidXR0b25JbmRleDogbnVtYmVyLCBwaTogUG9pbnRlckluZm9CYXNlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdXBlci5fb25Qb2ludGVyRG93bih0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBwaSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZWFkT25seSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJJc0Rvd24gPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLl91cGRhdGVWYWx1ZUZyb21Qb2ludGVyKGNvb3JkaW5hdGVzLngsIGNvb3JkaW5hdGVzLnkpO1xyXG4gICAgICAgIHRoaXMuX2hvc3QuX2NhcHR1cmluZ0NvbnRyb2xbcG9pbnRlcklkXSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fbGFzdFBvaW50ZXJEb3duSWQgPSBwb2ludGVySWQ7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJNb3ZlKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBwaTogUG9pbnRlckluZm9CYXNlKTogdm9pZCB7XHJcbiAgICAgICAgLy8gT25seSBsaXN0ZW4gdG8gcG9pbnRlciBtb3ZlIGV2ZW50cyBjb21pbmcgZnJvbSB0aGUgbGFzdCBwb2ludGVyIHRvIGNsaWNrIG9uIHRoZSBlbGVtZW50IChUbyBzdXBwb3J0IGR1YWwgdnIgY29udHJvbGxlciBpbnRlcmFjdGlvbilcclxuICAgICAgICBpZiAocG9pbnRlcklkICE9IHRoaXMuX2xhc3RQb2ludGVyRG93bklkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9wb2ludGVySXNEb3duICYmICF0aGlzLmlzUmVhZE9ubHkpIHtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmFsdWVGcm9tUG9pbnRlcihjb29yZGluYXRlcy54LCBjb29yZGluYXRlcy55KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyLl9vblBvaW50ZXJNb3ZlKHRhcmdldCwgY29vcmRpbmF0ZXMsIHBvaW50ZXJJZCwgcGkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfb25Qb2ludGVyVXAodGFyZ2V0OiBDb250cm9sLCBjb29yZGluYXRlczogVmVjdG9yMiwgcG9pbnRlcklkOiBudW1iZXIsIGJ1dHRvbkluZGV4OiBudW1iZXIsIG5vdGlmeUNsaWNrOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fcG9pbnRlcklzRG93biA9IGZhbHNlO1xyXG5cclxuICAgICAgICBkZWxldGUgdGhpcy5faG9zdC5fY2FwdHVyaW5nQ29udHJvbFtwb2ludGVySWRdO1xyXG4gICAgICAgIHN1cGVyLl9vblBvaW50ZXJVcCh0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBub3RpZnlDbGljayk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vbkNhbnZhc0JsdXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZm9yY2VQb2ludGVyVXAoKTtcclxuICAgICAgICBzdXBlci5fb25DYW52YXNCbHVyKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVNsaWRlciB9IGZyb20gXCIuL2Jhc2VTbGlkZXJcIjtcclxuaW1wb3J0IHsgTWVhc3VyZSB9IGZyb20gXCIuLi8uLi9tZWFzdXJlXCI7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSBcIi4uL2ltYWdlXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEFkdmFuY2VkRHluYW1pY1RleHR1cmUgfSBmcm9tIFwiLi4vLi4vYWR2YW5jZWREeW5hbWljVGV4dHVyZVwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIHNsaWRlciBjb250cm9scyBiYXNlZCBvbiBpbWFnZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWFnZUJhc2VkU2xpZGVyIGV4dGVuZHMgQmFzZVNsaWRlciB7XHJcbiAgICBwcml2YXRlIF9iYWNrZ3JvdW5kSW1hZ2U6IEltYWdlO1xyXG4gICAgcHJpdmF0ZSBfdGh1bWJJbWFnZTogSW1hZ2U7XHJcbiAgICBwcml2YXRlIF92YWx1ZUJhckltYWdlOiBJbWFnZTtcclxuICAgIHByaXZhdGUgX3RlbXBNZWFzdXJlID0gbmV3IE1lYXN1cmUoMCwgMCwgMCwgMCk7XHJcblxyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0IGRpc3BsYXlUaHVtYigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheVRodW1iICYmIHRoaXMudGh1bWJJbWFnZSAhPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXQgZGlzcGxheVRodW1iKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3BsYXlUaHVtYiA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZGlzcGxheVRodW1iID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW1hZ2UgdXNlZCB0byByZW5kZXIgdGhlIGJhY2tncm91bmRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBiYWNrZ3JvdW5kSW1hZ2UoKTogSW1hZ2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kSW1hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBiYWNrZ3JvdW5kSW1hZ2UodmFsdWU6IEltYWdlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tncm91bmRJbWFnZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZEltYWdlID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAmJiAhdmFsdWUuaXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdmFsdWUub25JbWFnZUxvYWRlZE9ic2VydmFibGUuYWRkT25jZSgoKSA9PiB0aGlzLl9tYXJrQXNEaXJ0eSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGltYWdlIHVzZWQgdG8gcmVuZGVyIHRoZSB2YWx1ZSBiYXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB2YWx1ZUJhckltYWdlKCk6IEltYWdlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVCYXJJbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHZhbHVlQmFySW1hZ2UodmFsdWU6IEltYWdlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlQmFySW1hZ2UgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3ZhbHVlQmFySW1hZ2UgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmICF2YWx1ZS5pc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB2YWx1ZS5vbkltYWdlTG9hZGVkT2JzZXJ2YWJsZS5hZGRPbmNlKCgpID0+IHRoaXMuX21hcmtBc0RpcnR5KCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW1hZ2UgdXNlZCB0byByZW5kZXIgdGhlIHRodW1iXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgdGh1bWJJbWFnZSgpOiBJbWFnZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RodW1iSW1hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB0aHVtYkltYWdlKHZhbHVlOiBJbWFnZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl90aHVtYkltYWdlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90aHVtYkltYWdlID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAmJiAhdmFsdWUuaXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdmFsdWUub25JbWFnZUxvYWRlZE9ic2VydmFibGUuYWRkT25jZSgoKSA9PiB0aGlzLl9tYXJrQXNEaXJ0eSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEltYWdlQmFzZWRTbGlkZXJcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIGNvbnRyb2wgbmFtZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgb3ZlcnJpZGUgbmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJJbWFnZUJhc2VkU2xpZGVyXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIF9kcmF3KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FwcGx5U3RhdGVzKGNvbnRleHQpO1xyXG5cclxuICAgICAgICB0aGlzLl9wcmVwYXJlUmVuZGVyaW5nRGF0YShcInJlY3RhbmdsZVwiKTtcclxuICAgICAgICBjb25zdCB0aHVtYlBvc2l0aW9uID0gdGhpcy5fZ2V0VGh1bWJQb3NpdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLl9yZW5kZXJMZWZ0O1xyXG4gICAgICAgIGNvbnN0IHRvcCA9IHRoaXMuX3JlbmRlclRvcDtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX3JlbmRlcldpZHRoO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX3JlbmRlckhlaWdodDtcclxuXHJcbiAgICAgICAgLy8gQmFja2dyb3VuZFxyXG4gICAgICAgIGlmICh0aGlzLl9iYWNrZ3JvdW5kSW1hZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGVtcE1lYXN1cmUuY29weUZyb21GbG9hdHMobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUaHVtYkNsYW1wZWQgJiYgdGhpcy5kaXNwbGF5VGh1bWIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZW1wTWVhc3VyZS5oZWlnaHQgKz0gdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3M7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLndpZHRoICs9IHRoaXMuX2VmZmVjdGl2ZVRodW1iVGhpY2tuZXNzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tncm91bmRJbWFnZS5fY3VycmVudE1lYXN1cmUuY29weUZyb20odGhpcy5fdGVtcE1lYXN1cmUpO1xyXG4gICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kSW1hZ2UuX2RyYXcoY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBCYXJcclxuICAgICAgICBpZiAodGhpcy5fdmFsdWVCYXJJbWFnZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RodW1iQ2xhbXBlZCAmJiB0aGlzLmRpc3BsYXlUaHVtYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLmNvcHlGcm9tRmxvYXRzKGxlZnQsIHRvcCArIHRodW1iUG9zaXRpb24sIHdpZHRoLCBoZWlnaHQgLSB0aHVtYlBvc2l0aW9uICsgdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3MpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZW1wTWVhc3VyZS5jb3B5RnJvbUZsb2F0cyhsZWZ0LCB0b3AgKyB0aHVtYlBvc2l0aW9uLCB3aWR0aCwgaGVpZ2h0IC0gdGh1bWJQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RodW1iQ2xhbXBlZCAmJiB0aGlzLmRpc3BsYXlUaHVtYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLmNvcHlGcm9tRmxvYXRzKGxlZnQsIHRvcCwgdGh1bWJQb3NpdGlvbiArIHRoaXMuX2VmZmVjdGl2ZVRodW1iVGhpY2tuZXNzIC8gMiwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVtcE1lYXN1cmUuY29weUZyb21GbG9hdHMobGVmdCwgdG9wLCB0aHVtYlBvc2l0aW9uLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlQmFySW1hZ2UuX2N1cnJlbnRNZWFzdXJlLmNvcHlGcm9tKHRoaXMuX3RlbXBNZWFzdXJlKTtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWVCYXJJbWFnZS5fZHJhdyhjb250ZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRodW1iXHJcbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheVRodW1iKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLmNvcHlGcm9tRmxvYXRzKFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgLSB0aGlzLl9lZmZlY3RpdmVCYXJPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGh1bWJQb3NpdGlvbixcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzc1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLmNvcHlGcm9tRmxvYXRzKHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKyB0aHVtYlBvc2l0aW9uLCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AsIHRoaXMuX2VmZmVjdGl2ZVRodW1iVGhpY2tuZXNzLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90aHVtYkltYWdlLl9jdXJyZW50TWVhc3VyZS5jb3B5RnJvbSh0aGlzLl90ZW1wTWVhc3VyZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RodW1iSW1hZ2UuX2RyYXcoY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGN1cnJlbnQgY29udHJvbFxyXG4gICAgICogQHBhcmFtIHNlcmlhbGl6YXRpb25PYmplY3QgZGVmaW5lZCB0aGUgSlNPTiBzZXJpYWxpemVkIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2VyaWFsaXplKHNlcmlhbGl6YXRpb25PYmplY3Q6IGFueSkge1xyXG4gICAgICAgIHN1cGVyLnNlcmlhbGl6ZShzZXJpYWxpemF0aW9uT2JqZWN0KTtcclxuICAgICAgICBjb25zdCBiYWNrZ3JvdW5kSW1hZ2UgPSB7fTtcclxuICAgICAgICBjb25zdCB0aHVtYkltYWdlID0ge307XHJcbiAgICAgICAgY29uc3QgdmFsdWVCYXJJbWFnZSA9IHt9O1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlLnNlcmlhbGl6ZShiYWNrZ3JvdW5kSW1hZ2UpO1xyXG4gICAgICAgIHRoaXMudGh1bWJJbWFnZS5zZXJpYWxpemUodGh1bWJJbWFnZSk7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJhckltYWdlLnNlcmlhbGl6ZSh2YWx1ZUJhckltYWdlKTtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmJhY2tncm91bmRJbWFnZSA9IGJhY2tncm91bmRJbWFnZTtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LnRodW1iSW1hZ2UgPSB0aHVtYkltYWdlO1xyXG4gICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QudmFsdWVCYXJJbWFnZSA9IHZhbHVlQmFySW1hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9wYXJzZUZyb21Db250ZW50KHNlcmlhbGl6ZWRPYmplY3Q6IGFueSwgaG9zdDogQWR2YW5jZWREeW5hbWljVGV4dHVyZSkge1xyXG4gICAgICAgIHN1cGVyLl9wYXJzZUZyb21Db250ZW50KHNlcmlhbGl6ZWRPYmplY3QsIGhvc3QpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlID0gSW1hZ2UuUGFyc2Uoc2VyaWFsaXplZE9iamVjdC5iYWNrZ3JvdW5kSW1hZ2UsIGhvc3QpIGFzIEltYWdlO1xyXG4gICAgICAgIHRoaXMudGh1bWJJbWFnZSA9IEltYWdlLlBhcnNlKHNlcmlhbGl6ZWRPYmplY3QudGh1bWJJbWFnZSwgaG9zdCkgYXMgSW1hZ2U7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJhckltYWdlID0gSW1hZ2UuUGFyc2Uoc2VyaWFsaXplZE9iamVjdC52YWx1ZUJhckltYWdlLCBob3N0KSBhcyBJbWFnZTtcclxuICAgIH1cclxufVxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuSW1hZ2VCYXNlZFNsaWRlclwiLCBJbWFnZUJhc2VkU2xpZGVyKTtcclxuIiwiaW1wb3J0IHR5cGUgeyBWZWN0b3IyIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHsgQmFzZVNsaWRlciB9IGZyb20gXCIuL2Jhc2VTbGlkZXJcIjtcclxuaW1wb3J0IHR5cGUgeyBDb250cm9sIH0gZnJvbSBcIi4uL2NvbnRyb2xcIjtcclxuaW1wb3J0IHR5cGUgeyBJbWFnZSB9IGZyb20gXCIuLi9pbWFnZVwiO1xyXG5pbXBvcnQgeyBNZWFzdXJlIH0gZnJvbSBcIi4uLy4uL21lYXN1cmVcIjtcclxuaW1wb3J0IHR5cGUgeyBQb2ludGVySW5mb0Jhc2UgfSBmcm9tIFwiY29yZS9FdmVudHMvcG9pbnRlckV2ZW50c1wiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIHNsaWRlciBjb250cm9sc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEltYWdlU2Nyb2xsQmFyIGV4dGVuZHMgQmFzZVNsaWRlciB7XHJcbiAgICBwcml2YXRlIF9iYWNrZ3JvdW5kQmFzZUltYWdlOiBJbWFnZTtcclxuICAgIHByaXZhdGUgX2JhY2tncm91bmRJbWFnZTogSW1hZ2U7XHJcbiAgICBwcml2YXRlIF90aHVtYkltYWdlOiBJbWFnZTtcclxuICAgIHByaXZhdGUgX3RodW1iQmFzZUltYWdlOiBJbWFnZTtcclxuICAgIHByaXZhdGUgX3RodW1iTGVuZ3RoOiBudW1iZXIgPSAwLjU7XHJcbiAgICBwcml2YXRlIF90aHVtYkhlaWdodDogbnVtYmVyID0gMTtcclxuICAgIHByaXZhdGUgX2JhckltYWdlSGVpZ2h0OiBudW1iZXIgPSAxO1xyXG4gICAgcHJpdmF0ZSBfdGVtcE1lYXN1cmUgPSBuZXcgTWVhc3VyZSgwLCAwLCAwLCAwKTtcclxuICAgIHByaXZhdGUgX2ludmVydFNjcm9sbERpcmVjdGlvbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKiBOdW1iZXIgb2YgOTDCsCByb3RhdGlvbiB0byBhcHBseSBvbiB0aGUgaW1hZ2VzIHdoZW4gaW4gdmVydGljYWwgbW9kZSAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgbnVtOTBSb3RhdGlvbkluVmVydGljYWxNb2RlID0gMTtcclxuXHJcbiAgICAvKiogSW52ZXJ0cyB0aGUgc2Nyb2xsaW5nIGRpcmVjdGlvbiAoZGVmYXVsdDogZmFsc2UpICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgaW52ZXJ0U2Nyb2xsRGlyZWN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZlcnRTY3JvbGxEaXJlY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBpbnZlcnRTY3JvbGxEaXJlY3Rpb24oaW52ZXJ0OiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5faW52ZXJ0U2Nyb2xsRGlyZWN0aW9uID0gaW52ZXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBpbWFnZSB1c2VkIHRvIHJlbmRlciB0aGUgYmFja2dyb3VuZCBmb3IgaG9yaXpvbnRhbCBiYXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBiYWNrZ3JvdW5kSW1hZ2UoKTogSW1hZ2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kQmFzZUltYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYmFja2dyb3VuZEltYWdlKHZhbHVlOiBJbWFnZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9iYWNrZ3JvdW5kQmFzZUltYWdlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kQmFzZUltYWdlID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwgJiYgdGhpcy5udW05MFJvdGF0aW9uSW5WZXJ0aWNhbE1vZGUgIT09IDApIHtcclxuICAgICAgICAgICAgaWYgKCF2YWx1ZS5pc0xvYWRlZCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUub25JbWFnZUxvYWRlZE9ic2VydmFibGUuYWRkT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm90YXRlZFZhbHVlID0gdmFsdWUuX3JvdGF0ZTkwKHRoaXMubnVtOTBSb3RhdGlvbkluVmVydGljYWxNb2RlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kSW1hZ2UgPSByb3RhdGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyb3RhdGVkVmFsdWUuaXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlZFZhbHVlLm9uSW1hZ2VMb2FkZWRPYnNlcnZhYmxlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhY2tncm91bmRJbWFnZSA9IHZhbHVlLl9yb3RhdGU5MCh0aGlzLm51bTkwUm90YXRpb25JblZlcnRpY2FsTW9kZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fYmFja2dyb3VuZEltYWdlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiAhdmFsdWUuaXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLm9uSW1hZ2VMb2FkZWRPYnNlcnZhYmxlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGltYWdlIHVzZWQgdG8gcmVuZGVyIHRoZSB0aHVtYlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHRodW1iSW1hZ2UoKTogSW1hZ2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aHVtYkJhc2VJbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRodW1iSW1hZ2UodmFsdWU6IEltYWdlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RodW1iQmFzZUltYWdlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90aHVtYkJhc2VJbWFnZSA9IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsICYmIHRoaXMubnVtOTBSb3RhdGlvbkluVmVydGljYWxNb2RlICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICghdmFsdWUuaXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLm9uSW1hZ2VMb2FkZWRPYnNlcnZhYmxlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdGF0ZWRWYWx1ZSA9IHZhbHVlLl9yb3RhdGU5MCgtdGhpcy5udW05MFJvdGF0aW9uSW5WZXJ0aWNhbE1vZGUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RodW1iSW1hZ2UgPSByb3RhdGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyb3RhdGVkVmFsdWUuaXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlZFZhbHVlLm9uSW1hZ2VMb2FkZWRPYnNlcnZhYmxlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RodW1iSW1hZ2UgPSB2YWx1ZS5fcm90YXRlOTAoLXRoaXMubnVtOTBSb3RhdGlvbkluVmVydGljYWxNb2RlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl90aHVtYkltYWdlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiAhdmFsdWUuaXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLm9uSW1hZ2VMb2FkZWRPYnNlcnZhYmxlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGxlbmd0aCBvZiB0aGUgdGh1bWJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB0aHVtYkxlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aHVtYkxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRodW1iTGVuZ3RoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGh1bWJMZW5ndGggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3RodW1iTGVuZ3RoID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGhlaWdodCBvZiB0aGUgdGh1bWJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB0aHVtYkhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aHVtYkhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRodW1iSGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGh1bWJMZW5ndGggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3RodW1iSGVpZ2h0ID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGhlaWdodCBvZiB0aGUgYmFyIGltYWdlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgYmFySW1hZ2VIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFySW1hZ2VIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBiYXJJbWFnZUhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JhckltYWdlSGVpZ2h0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYXJJbWFnZUhlaWdodCA9IHZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBJbWFnZVNjcm9sbEJhclxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBvdmVycmlkZSBuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkltYWdlU2Nyb2xsQmFyXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUaHVtYlRoaWNrbmVzcygpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCB0aHVtYlRoaWNrbmVzcyA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RodW1iV2lkdGguaXNQaXhlbCkge1xyXG4gICAgICAgICAgICB0aHVtYlRoaWNrbmVzcyA9IHRoaXMuX3RodW1iV2lkdGguZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGh1bWJUaGlja25lc3MgPSB0aGlzLl9iYWNrZ3JvdW5kQm94VGhpY2tuZXNzICogdGhpcy5fdGh1bWJXaWR0aC5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRodW1iVGhpY2tuZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfZHJhdyhjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLl9hcHBseVN0YXRlcyhjb250ZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy5fcHJlcGFyZVJlbmRlcmluZ0RhdGEoXCJyZWN0YW5nbGVcIik7XHJcbiAgICAgICAgY29uc3QgdGh1bWJQb3NpdGlvbiA9IHRoaXMuX2dldFRodW1iUG9zaXRpb24oKTtcclxuICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5fcmVuZGVyTGVmdDtcclxuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLl9yZW5kZXJUb3A7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9yZW5kZXJXaWR0aDtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLl9yZW5kZXJIZWlnaHQ7XHJcblxyXG4gICAgICAgIC8vIEJhY2tncm91bmRcclxuICAgICAgICBpZiAodGhpcy5fYmFja2dyb3VuZEltYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLmNvcHlGcm9tRmxvYXRzKGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLmNvcHlGcm9tRmxvYXRzKGxlZnQgKyB3aWR0aCAqICgxIC0gdGhpcy5fYmFySW1hZ2VIZWlnaHQpICogMC41LCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AsIHdpZHRoICogdGhpcy5fYmFySW1hZ2VIZWlnaHQsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90ZW1wTWVhc3VyZS5oZWlnaHQgKz0gdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kSW1hZ2UuX2N1cnJlbnRNZWFzdXJlLmNvcHlGcm9tKHRoaXMuX3RlbXBNZWFzdXJlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLmNvcHlGcm9tRmxvYXRzKHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQsIHRvcCArIGhlaWdodCAqICgxIC0gdGhpcy5fYmFySW1hZ2VIZWlnaHQpICogMC41LCB3aWR0aCwgaGVpZ2h0ICogdGhpcy5fYmFySW1hZ2VIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGVtcE1lYXN1cmUud2lkdGggKz0gdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kSW1hZ2UuX2N1cnJlbnRNZWFzdXJlLmNvcHlGcm9tKHRoaXMuX3RlbXBNZWFzdXJlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kSW1hZ2UuX2RyYXcoY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaHVtYlxyXG4gICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGVtcE1lYXN1cmUuY29weUZyb21GbG9hdHMoXHJcbiAgICAgICAgICAgICAgICBsZWZ0IC0gdGhpcy5fZWZmZWN0aXZlQmFyT2Zmc2V0ICsgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggKiAoMSAtIHRoaXMuX3RodW1iSGVpZ2h0KSAqIDAuNSxcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCArIHRodW1iUG9zaXRpb24sXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCAqIHRoaXMuX3RodW1iSGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3NcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wTWVhc3VyZS5jb3B5RnJvbUZsb2F0cyhcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKyB0aHVtYlBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0ICogKDEgLSB0aGlzLl90aHVtYkhlaWdodCkgKiAwLjUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzcyxcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCAqIHRoaXMuX3RodW1iSGVpZ2h0XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdGh1bWJJbWFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLl90aHVtYkltYWdlLl9jdXJyZW50TWVhc3VyZS5jb3B5RnJvbSh0aGlzLl90ZW1wTWVhc3VyZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RodW1iSW1hZ2UuX2RyYXcoY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9maXJzdDogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX29yaWdpblg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX29yaWdpblk6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX3VwZGF0ZVZhbHVlRnJvbVBvaW50ZXIoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5yb3RhdGlvbiAhPSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludmVydFRyYW5zZm9ybU1hdHJpeC50cmFuc2Zvcm1Db29yZGluYXRlcyh4LCB5LCB0aGlzLl90cmFuc2Zvcm1lZFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgeCA9IHRoaXMuX3RyYW5zZm9ybWVkUG9zaXRpb24ueDtcclxuICAgICAgICAgICAgeSA9IHRoaXMuX3RyYW5zZm9ybWVkUG9zaXRpb24ueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNpZ24gPSB0aGlzLl9pbnZlcnRTY3JvbGxEaXJlY3Rpb24gPyAtMSA6IDE7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9maXJzdCkge1xyXG4gICAgICAgICAgICB0aGlzLl9maXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9vcmlnaW5YID0geDtcclxuICAgICAgICAgICAgdGhpcy5fb3JpZ2luWSA9IHk7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBtb3ZlIGlzIHJlcXVpcmVkXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHggPCB0aGlzLl90ZW1wTWVhc3VyZS5sZWZ0IHx8XHJcbiAgICAgICAgICAgICAgICB4ID4gdGhpcy5fdGVtcE1lYXN1cmUubGVmdCArIHRoaXMuX3RlbXBNZWFzdXJlLndpZHRoIHx8XHJcbiAgICAgICAgICAgICAgICB5IDwgdGhpcy5fdGVtcE1lYXN1cmUudG9wIHx8XHJcbiAgICAgICAgICAgICAgICB5ID4gdGhpcy5fdGVtcE1lYXN1cmUudG9wICsgdGhpcy5fdGVtcE1lYXN1cmUuaGVpZ2h0XHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm1pbmltdW0gKyAoMSAtICh5IC0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wKSAvIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCkgKiAodGhpcy5tYXhpbXVtIC0gdGhpcy5taW5pbXVtKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluaW11bSArICgoeCAtIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQpIC8gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgpICogKHRoaXMubWF4aW11bSAtIHRoaXMubWluaW11bSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERlbHRhIG1vZGVcclxuICAgICAgICBsZXQgZGVsdGEgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgZGVsdGEgPSAtKCh5IC0gdGhpcy5fb3JpZ2luWSkgLyAodGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC0gdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3MpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZWx0YSA9ICh4IC0gdGhpcy5fb3JpZ2luWCkgLyAodGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLSB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnZhbHVlICs9IHNpZ24gKiBkZWx0YSAqICh0aGlzLm1heGltdW0gLSB0aGlzLm1pbmltdW0pO1xyXG5cclxuICAgICAgICB0aGlzLl9vcmlnaW5YID0geDtcclxuICAgICAgICB0aGlzLl9vcmlnaW5ZID0geTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX29uUG9pbnRlckRvd24odGFyZ2V0OiBDb250cm9sLCBjb29yZGluYXRlczogVmVjdG9yMiwgcG9pbnRlcklkOiBudW1iZXIsIGJ1dHRvbkluZGV4OiBudW1iZXIsIHBpOiBQb2ludGVySW5mb0Jhc2UpOiBib29sZWFuIHtcclxuICAgICAgICB0aGlzLl9maXJzdCA9IHRydWU7XHJcblxyXG4gICAgICAgIHJldHVybiBzdXBlci5fb25Qb2ludGVyRG93bih0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBwaSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBWZWN0b3IyIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHsgQmFzZVNsaWRlciB9IGZyb20gXCIuL2Jhc2VTbGlkZXJcIjtcclxuaW1wb3J0IHR5cGUgeyBDb250cm9sIH0gZnJvbSBcIi4uL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgTWVhc3VyZSB9IGZyb20gXCIuLi8uLi9tZWFzdXJlXCI7XHJcbmltcG9ydCB0eXBlIHsgUG9pbnRlckluZm9CYXNlIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB0eXBlIHsgSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQgfSBmcm9tIFwiY29yZS9FbmdpbmVzL0lDYW52YXNcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgQmFzZUdyYWRpZW50IH0gZnJvbSBcIi4uL2dyYWRpZW50L0Jhc2VHcmFkaWVudFwiO1xyXG5pbXBvcnQgdHlwZSB7IEFkdmFuY2VkRHluYW1pY1RleHR1cmUgfSBmcm9tIFwiZ3VpLzJEL2FkdmFuY2VkRHluYW1pY1RleHR1cmVcIjtcclxuaW1wb3J0IHsgVG9vbHMgfSBmcm9tIFwiY29yZS9NaXNjL3Rvb2xzXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIHNsaWRlciBjb250cm9sc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNjcm9sbEJhciBleHRlbmRzIEJhc2VTbGlkZXIge1xyXG4gICAgcHJpdmF0ZSBfYmFja2dyb3VuZCA9IFwiYmxhY2tcIjtcclxuICAgIHByaXZhdGUgX2JvcmRlckNvbG9yID0gXCJ3aGl0ZVwiO1xyXG4gICAgcHJpdmF0ZSBfdGVtcE1lYXN1cmUgPSBuZXcgTWVhc3VyZSgwLCAwLCAwLCAwKTtcclxuICAgIHByaXZhdGUgX2ludmVydFNjcm9sbERpcmVjdGlvbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfYmFja2dyb3VuZEdyYWRpZW50OiBOdWxsYWJsZTxCYXNlR3JhZGllbnQ+ID0gbnVsbDtcclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGJvcmRlciBjb2xvciAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGJvcmRlckNvbG9yKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JvcmRlckNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYm9yZGVyQ29sb3IodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9ib3JkZXJDb2xvciA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYm9yZGVyQ29sb3IgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYmFja2dyb3VuZCBjb2xvciAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGJhY2tncm91bmQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja2dyb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJhY2tncm91bmQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9iYWNrZ3JvdW5kID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGJhY2tncm91bmQgZ3JhZGllbnQuIFRha2VzIHByZWNlZGVuY2Ugb3ZlciBncmFkaWVudC4gKi9cclxuICAgIHB1YmxpYyBnZXQgYmFja2dyb3VuZEdyYWRpZW50KCk6IE51bGxhYmxlPEJhc2VHcmFkaWVudD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kR3JhZGllbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBiYWNrZ3JvdW5kR3JhZGllbnQodmFsdWU6IE51bGxhYmxlPEJhc2VHcmFkaWVudD4pIHtcclxuICAgICAgICBpZiAodGhpcy5fYmFja2dyb3VuZEdyYWRpZW50ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kR3JhZGllbnQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBJbnZlcnRzIHRoZSBzY3JvbGxpbmcgZGlyZWN0aW9uIChkZWZhdWx0OiBmYWxzZSkgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBpbnZlcnRTY3JvbGxEaXJlY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmVydFNjcm9sbERpcmVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGludmVydFNjcm9sbERpcmVjdGlvbihpbnZlcnQ6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9pbnZlcnRTY3JvbGxEaXJlY3Rpb24gPSBpbnZlcnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFNsaWRlclxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBvdmVycmlkZSBuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIlNjcm9sbGJhclwiO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VGh1bWJUaGlja25lc3MoKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgdGh1bWJUaGlja25lc3MgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLl90aHVtYldpZHRoLmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgdGh1bWJUaGlja25lc3MgPSB0aGlzLl90aHVtYldpZHRoLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRodW1iVGhpY2tuZXNzID0gdGhpcy5fYmFja2dyb3VuZEJveFRoaWNrbmVzcyAqIHRoaXMuX3RodW1iV2lkdGguZ2V0VmFsdWUodGhpcy5faG9zdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aHVtYlRoaWNrbmVzcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9nZXRCYWNrZ3JvdW5kQ29sb3IoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja2dyb3VuZEdyYWRpZW50ID8gdGhpcy5fYmFja2dyb3VuZEdyYWRpZW50LmdldENhbnZhc0dyYWRpZW50KGNvbnRleHQpIDogdGhpcy5fYmFja2dyb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2RyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYXBwbHlTdGF0ZXMoY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy5fcHJlcGFyZVJlbmRlcmluZ0RhdGEoXCJyZWN0YW5nbGVcIik7XHJcbiAgICAgICAgY29uc3QgbGVmdCA9IHRoaXMuX3JlbmRlckxlZnQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHRodW1iUG9zaXRpb24gPSB0aGlzLl9nZXRUaHVtYlBvc2l0aW9uKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLl9nZXRCYWNrZ3JvdW5kQ29sb3IoY29udGV4dCk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gVmFsdWUgYmFyXHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLl9nZXRDb2xvcihjb250ZXh0KTtcclxuXHJcbiAgICAgICAgLy8gVGh1bWJcclxuICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLmxlZnQgPSBsZWZ0IC0gdGhpcy5fZWZmZWN0aXZlQmFyT2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wTWVhc3VyZS50b3AgPSB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aHVtYlBvc2l0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wTWVhc3VyZS53aWR0aCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wTWVhc3VyZS5oZWlnaHQgPSB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wTWVhc3VyZS5sZWZ0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRodW1iUG9zaXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuX3RlbXBNZWFzdXJlLnRvcCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcDtcclxuICAgICAgICAgICAgdGhpcy5fdGVtcE1lYXN1cmUud2lkdGggPSB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzcztcclxuICAgICAgICAgICAgdGhpcy5fdGVtcE1lYXN1cmUuaGVpZ2h0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCh0aGlzLl90ZW1wTWVhc3VyZS5sZWZ0LCB0aGlzLl90ZW1wTWVhc3VyZS50b3AsIHRoaXMuX3RlbXBNZWFzdXJlLndpZHRoLCB0aGlzLl90ZW1wTWVhc3VyZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9maXJzdDogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX29yaWdpblg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX29yaWdpblk6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX3VwZGF0ZVZhbHVlRnJvbVBvaW50ZXIoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5yb3RhdGlvbiAhPSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludmVydFRyYW5zZm9ybU1hdHJpeC50cmFuc2Zvcm1Db29yZGluYXRlcyh4LCB5LCB0aGlzLl90cmFuc2Zvcm1lZFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgeCA9IHRoaXMuX3RyYW5zZm9ybWVkUG9zaXRpb24ueDtcclxuICAgICAgICAgICAgeSA9IHRoaXMuX3RyYW5zZm9ybWVkUG9zaXRpb24ueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNpZ24gPSB0aGlzLl9pbnZlcnRTY3JvbGxEaXJlY3Rpb24gPyAtMSA6IDE7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9maXJzdCkge1xyXG4gICAgICAgICAgICB0aGlzLl9maXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9vcmlnaW5YID0geDtcclxuICAgICAgICAgICAgdGhpcy5fb3JpZ2luWSA9IHk7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBtb3ZlIGlzIHJlcXVpcmVkXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHggPCB0aGlzLl90ZW1wTWVhc3VyZS5sZWZ0IHx8XHJcbiAgICAgICAgICAgICAgICB4ID4gdGhpcy5fdGVtcE1lYXN1cmUubGVmdCArIHRoaXMuX3RlbXBNZWFzdXJlLndpZHRoIHx8XHJcbiAgICAgICAgICAgICAgICB5IDwgdGhpcy5fdGVtcE1lYXN1cmUudG9wIHx8XHJcbiAgICAgICAgICAgICAgICB5ID4gdGhpcy5fdGVtcE1lYXN1cmUudG9wICsgdGhpcy5fdGVtcE1lYXN1cmUuaGVpZ2h0XHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm1pbmltdW0gKyAoMSAtICh5IC0gdGhpcy5fY3VycmVudE1lYXN1cmUudG9wKSAvIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCkgKiAodGhpcy5tYXhpbXVtIC0gdGhpcy5taW5pbXVtKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMubWluaW11bSArICgoeCAtIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQpIC8gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgpICogKHRoaXMubWF4aW11bSAtIHRoaXMubWluaW11bSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERlbHRhIG1vZGVcclxuICAgICAgICBsZXQgZGVsdGEgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgZGVsdGEgPSAtKCh5IC0gdGhpcy5fb3JpZ2luWSkgLyAodGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0IC0gdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3MpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZWx0YSA9ICh4IC0gdGhpcy5fb3JpZ2luWCkgLyAodGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGggLSB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnZhbHVlICs9IHNpZ24gKiBkZWx0YSAqICh0aGlzLm1heGltdW0gLSB0aGlzLm1pbmltdW0pO1xyXG5cclxuICAgICAgICB0aGlzLl9vcmlnaW5YID0geDtcclxuICAgICAgICB0aGlzLl9vcmlnaW5ZID0geTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX29uUG9pbnRlckRvd24odGFyZ2V0OiBDb250cm9sLCBjb29yZGluYXRlczogVmVjdG9yMiwgcG9pbnRlcklkOiBudW1iZXIsIGJ1dHRvbkluZGV4OiBudW1iZXIsIHBpOiBQb2ludGVySW5mb0Jhc2UpOiBib29sZWFuIHtcclxuICAgICAgICB0aGlzLl9maXJzdCA9IHRydWU7XHJcblxyXG4gICAgICAgIHJldHVybiBzdXBlci5fb25Qb2ludGVyRG93bih0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBwaSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIHNlcmlhbGl6ZShzZXJpYWxpemF0aW9uT2JqZWN0OiBhbnkpIHtcclxuICAgICAgICBzdXBlci5zZXJpYWxpemUoc2VyaWFsaXphdGlvbk9iamVjdCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJhY2tncm91bmRHcmFkaWVudCkge1xyXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmJhY2tncm91bmRHcmFkaWVudCA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRHcmFkaWVudC5zZXJpYWxpemUoc2VyaWFsaXphdGlvbk9iamVjdC5iYWNrZ3JvdW5kR3JhZGllbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX3BhcnNlRnJvbUNvbnRlbnQoc2VyaWFsaXphdGlvbk9iamVjdDogYW55LCBob3N0OiBBZHZhbmNlZER5bmFtaWNUZXh0dXJlKSB7XHJcbiAgICAgICAgc3VwZXIuX3BhcnNlRnJvbUNvbnRlbnQoc2VyaWFsaXphdGlvbk9iamVjdCwgaG9zdCk7XHJcblxyXG4gICAgICAgIGlmIChzZXJpYWxpemF0aW9uT2JqZWN0LmJhY2tncm91bmRHcmFkaWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBUb29scy5JbnN0YW50aWF0ZShcIkJBQllMT04uR1VJLlwiICsgc2VyaWFsaXphdGlvbk9iamVjdC5iYWNrZ3JvdW5kR3JhZGllbnQuY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kR3JhZGllbnQgPSBuZXcgY2xhc3NOYW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEdyYWRpZW50IS5wYXJzZShzZXJpYWxpemF0aW9uT2JqZWN0LmJhY2tncm91bmRHcmFkaWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblJlZ2lzdGVyQ2xhc3MoXCJCQUJZTE9OLkdVSS5TY3JvbGxiYXJcIiwgU2Nyb2xsQmFyKTtcclxuIiwiaW1wb3J0IHsgQmFzZVNsaWRlciB9IGZyb20gXCIuL2Jhc2VTbGlkZXJcIjtcclxuaW1wb3J0IHsgUmVnaXN0ZXJDbGFzcyB9IGZyb20gXCJjb3JlL01pc2MvdHlwZVN0b3JlXCI7XHJcbmltcG9ydCB7IHNlcmlhbGl6ZSB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9yc1wiO1xyXG5pbXBvcnQgdHlwZSB7IElDYW52YXNSZW5kZXJpbmdDb250ZXh0IH0gZnJvbSBcImNvcmUvRW5naW5lcy9JQ2FudmFzXCI7XHJcbmltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEJhc2VHcmFkaWVudCB9IGZyb20gXCIuLi9ncmFkaWVudC9CYXNlR3JhZGllbnRcIjtcclxuaW1wb3J0IHR5cGUgeyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIH0gZnJvbSBcImd1aS8yRC9hZHZhbmNlZER5bmFtaWNUZXh0dXJlXCI7XHJcbmltcG9ydCB7IFRvb2xzIH0gZnJvbSBcImNvcmUvTWlzYy90b29sc1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIHNsaWRlciBjb250cm9sc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNsaWRlciBleHRlbmRzIEJhc2VTbGlkZXIge1xyXG4gICAgcHJpdmF0ZSBfYmFja2dyb3VuZCA9IFwiYmxhY2tcIjtcclxuICAgIHByaXZhdGUgX2JvcmRlckNvbG9yID0gXCJ3aGl0ZVwiO1xyXG4gICAgcHJpdmF0ZSBfdGh1bWJDb2xvciA9IFwiXCI7XHJcbiAgICBwcml2YXRlIF9pc1RodW1iQ2lyY2xlID0gZmFsc2U7XHJcbiAgICBwcm90ZWN0ZWQgX2Rpc3BsYXlWYWx1ZUJhciA9IHRydWU7XHJcbiAgICBwcml2YXRlIF9iYWNrZ3JvdW5kR3JhZGllbnQ6IE51bGxhYmxlPEJhc2VHcmFkaWVudD4gPSBudWxsO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHZhbHVlIGJhciBtdXN0IGJlIHJlbmRlcmVkICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgZGlzcGxheVZhbHVlQmFyKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5VmFsdWVCYXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBkaXNwbGF5VmFsdWVCYXIodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fZGlzcGxheVZhbHVlQmFyID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9kaXNwbGF5VmFsdWVCYXIgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYm9yZGVyIGNvbG9yICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYm9yZGVyQ29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYm9yZGVyQ29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBib3JkZXJDb2xvcih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JvcmRlckNvbG9yID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9ib3JkZXJDb2xvciA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBiYWNrZ3JvdW5kIGNvbG9yICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYmFja2dyb3VuZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYmFja2dyb3VuZCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tncm91bmQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYmFja2dyb3VuZCBncmFkaWVudCAqL1xyXG4gICAgcHVibGljIGdldCBiYWNrZ3JvdW5kR3JhZGllbnQoKTogTnVsbGFibGU8QmFzZUdyYWRpZW50PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tncm91bmRHcmFkaWVudDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJhY2tncm91bmRHcmFkaWVudCh2YWx1ZTogTnVsbGFibGU8QmFzZUdyYWRpZW50Pikge1xyXG4gICAgICAgIGlmICh0aGlzLl9iYWNrZ3JvdW5kR3JhZGllbnQgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2JhY2tncm91bmRHcmFkaWVudCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aHVtYidzIGNvbG9yICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgdGh1bWJDb2xvcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aHVtYkNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgdGh1bWJDb2xvcih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RodW1iQ29sb3IgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3RodW1iQ29sb3IgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHRodW1iIHNob3VsZCBiZSByb3VuZCBvciBzcXVhcmUgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBpc1RodW1iQ2lyY2xlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1RodW1iQ2lyY2xlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaXNUaHVtYkNpcmNsZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1RodW1iQ2lyY2xlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pc1RodW1iQ2lyY2xlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgU2xpZGVyXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiU2xpZGVyXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9nZXRCYWNrZ3JvdW5kQ29sb3IoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja2dyb3VuZEdyYWRpZW50ID8gdGhpcy5fYmFja2dyb3VuZEdyYWRpZW50LmdldENhbnZhc0dyYWRpZW50KGNvbnRleHQpIDogdGhpcy5fYmFja2dyb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX2RyYXcoY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYXBwbHlTdGF0ZXMoY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy5fcHJlcGFyZVJlbmRlcmluZ0RhdGEodGhpcy5pc1RodW1iQ2lyY2xlID8gXCJjaXJjbGVcIiA6IFwicmVjdGFuZ2xlXCIpO1xyXG4gICAgICAgIGxldCBsZWZ0ID0gdGhpcy5fcmVuZGVyTGVmdDtcclxuICAgICAgICBsZXQgdG9wID0gdGhpcy5fcmVuZGVyVG9wO1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5fcmVuZGVyV2lkdGg7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5fcmVuZGVySGVpZ2h0O1xyXG5cclxuICAgICAgICBsZXQgcmFkaXVzID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNUaHVtYkNsYW1wZWQgJiYgdGhpcy5pc1RodW1iQ2lyY2xlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgIHRvcCArPSB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzcyAvIDI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0ICs9IHRoaXMuX2VmZmVjdGl2ZVRodW1iVGhpY2tuZXNzIC8gMjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmFkaXVzID0gdGhpcy5fYmFja2dyb3VuZEJveFRoaWNrbmVzcyAvIDI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmFkaXVzID0gKHRoaXMuX2VmZmVjdGl2ZVRodW1iVGhpY2tuZXNzIC0gdGhpcy5fZWZmZWN0aXZlQmFyT2Zmc2V0KSAvIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJhZGl1cyA9IE1hdGgubWF4KDAsIHJhZGl1cyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gdGhpcy5zaGFkb3dDb2xvcjtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gdGhpcy5zaGFkb3dCbHVyO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IHRoaXMuc2hhZG93T2Zmc2V0WTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRodW1iUG9zaXRpb24gPSB0aGlzLl9nZXRUaHVtYlBvc2l0aW9uKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLl9nZXRCYWNrZ3JvdW5kQ29sb3IoY29udGV4dCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUaHVtYkNsYW1wZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVGh1bWJDaXJjbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKGxlZnQgKyB0aGlzLl9iYWNrZ3JvdW5kQm94VGhpY2tuZXNzIC8gMiwgdG9wLCByYWRpdXMsIE1hdGguUEksIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0ICsgdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUaHVtYkNsYW1wZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVGh1bWJDaXJjbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKGxlZnQgKyB0aGlzLl9iYWNrZ3JvdW5kQm94TGVuZ3RoLCB0b3AgKyB0aGlzLl9iYWNrZ3JvdW5kQm94VGhpY2tuZXNzIC8gMiwgcmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGxlZnQsIHRvcCwgd2lkdGggKyB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzcywgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hhZG93Qmx1ciB8fCB0aGlzLnNoYWRvd09mZnNldFggfHwgdGhpcy5zaGFkb3dPZmZzZXRZKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Qmx1ciA9IDA7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IDA7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBWYWx1ZSBiYXJcclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX2dldENvbG9yKGNvbnRleHQpO1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXNwbGF5VmFsdWVCYXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUaHVtYkNsYW1wZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RodW1iQ2lyY2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKGxlZnQgKyB0aGlzLl9iYWNrZ3JvdW5kQm94VGhpY2tuZXNzIC8gMiwgdG9wICsgdGhpcy5fYmFja2dyb3VuZEJveExlbmd0aCwgcmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGxlZnQsIHRvcCArIHRodW1iUG9zaXRpb24sIHdpZHRoLCBoZWlnaHQgLSB0aHVtYlBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGxlZnQsIHRvcCArIHRodW1iUG9zaXRpb24sIHdpZHRoLCBoZWlnaHQgLSB0aHVtYlBvc2l0aW9uICsgdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChsZWZ0LCB0b3AgKyB0aHVtYlBvc2l0aW9uLCB3aWR0aCwgaGVpZ2h0IC0gdGh1bWJQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RodW1iQ2xhbXBlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVGh1bWJDaXJjbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5hcmMobGVmdCwgdG9wICsgdGhpcy5fYmFja2dyb3VuZEJveFRoaWNrbmVzcyAvIDIsIHJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChsZWZ0LCB0b3AsIHRodW1iUG9zaXRpb24sIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChsZWZ0LCB0b3AsIHRodW1iUG9zaXRpb24sIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGxlZnQsIHRvcCwgdGh1bWJQb3NpdGlvbiwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGh1bWJcclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuX3RodW1iQ29sb3IgfHwgdGhpcy5fZ2V0Q29sb3IoY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheVRodW1iKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zaGFkb3dDb2xvciA9IHRoaXMuc2hhZG93Q29sb3I7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNoYWRvd0JsdXIgPSB0aGlzLnNoYWRvd0JsdXI7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSB0aGlzLnNoYWRvd09mZnNldFk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzVGh1bWJDaXJjbGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5hcmMobGVmdCArIHRoaXMuX2JhY2tncm91bmRCb3hUaGlja25lc3MgLyAyLCB0b3AgKyB0aHVtYlBvc2l0aW9uLCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5hcmMobGVmdCArIHRodW1iUG9zaXRpb24sIHRvcCArIHRoaXMuX2JhY2tncm91bmRCb3hUaGlja25lc3MgLyAyLCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hhZG93Qmx1ciB8fCB0aGlzLnNoYWRvd09mZnNldFggfHwgdGhpcy5zaGFkb3dPZmZzZXRZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5fYm9yZGVyQ29sb3I7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QobGVmdCAtIHRoaXMuX2VmZmVjdGl2ZUJhck9mZnNldCwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wICsgdGh1bWJQb3NpdGlvbiwgdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGgsIHRoaXMuX2VmZmVjdGl2ZVRodW1iVGhpY2tuZXNzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdCh0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgdGh1bWJQb3NpdGlvbiwgdGhpcy5fY3VycmVudE1lYXN1cmUudG9wLCB0aGlzLl9lZmZlY3RpdmVUaHVtYlRoaWNrbmVzcywgdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2hhZG93Qmx1ciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRYID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuX2JvcmRlckNvbG9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdChsZWZ0IC0gdGhpcy5fZWZmZWN0aXZlQmFyT2Zmc2V0LCB0aGlzLl9jdXJyZW50TWVhc3VyZS50b3AgKyB0aHVtYlBvc2l0aW9uLCB0aGlzLl9jdXJyZW50TWVhc3VyZS53aWR0aCwgdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3MpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVJlY3QodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHRodW1iUG9zaXRpb24sIHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcCwgdGhpcy5fZWZmZWN0aXZlVGh1bWJUaGlja25lc3MsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIHNlcmlhbGl6ZShzZXJpYWxpemF0aW9uT2JqZWN0OiBhbnkpIHtcclxuICAgICAgICBzdXBlci5zZXJpYWxpemUoc2VyaWFsaXphdGlvbk9iamVjdCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJhY2tncm91bmRHcmFkaWVudCkge1xyXG4gICAgICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmJhY2tncm91bmRHcmFkaWVudCA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRHcmFkaWVudC5zZXJpYWxpemUoc2VyaWFsaXphdGlvbk9iamVjdC5iYWNrZ3JvdW5kR3JhZGllbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX3BhcnNlRnJvbUNvbnRlbnQoc2VyaWFsaXplZE9iamVjdDogYW55LCBob3N0OiBBZHZhbmNlZER5bmFtaWNUZXh0dXJlKSB7XHJcbiAgICAgICAgc3VwZXIuX3BhcnNlRnJvbUNvbnRlbnQoc2VyaWFsaXplZE9iamVjdCwgaG9zdCk7XHJcblxyXG4gICAgICAgIGlmIChzZXJpYWxpemVkT2JqZWN0LmJhY2tncm91bmRHcmFkaWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBUb29scy5JbnN0YW50aWF0ZShcIkJBQllMT04uR1VJLlwiICsgc2VyaWFsaXplZE9iamVjdC5iYWNrZ3JvdW5kR3JhZGllbnQuY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kR3JhZGllbnQgPSBuZXcgY2xhc3NOYW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEdyYWRpZW50IS5wYXJzZShzZXJpYWxpemVkT2JqZWN0LmJhY2tncm91bmRHcmFkaWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblJlZ2lzdGVyQ2xhc3MoXCJCQUJZTE9OLkdVSS5TbGlkZXJcIiwgU2xpZGVyKTtcclxuIiwiaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIi4vY29udGFpbmVyXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVhc3VyZSB9IGZyb20gXCIuLi9tZWFzdXJlXCI7XHJcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9sXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHR5cGUgeyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIH0gZnJvbSBcIi4uL2FkdmFuY2VkRHluYW1pY1RleHR1cmVcIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCB9IGZyb20gXCJjb3JlL0VuZ2luZXMvSUNhbnZhc1wiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiY29yZS9NaXNjL2xvZ2dlclwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGEgMkQgc3RhY2sgcGFuZWwgY29udGFpbmVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RhY2tQYW5lbCBleHRlbmRzIENvbnRhaW5lciB7XHJcbiAgICBwcml2YXRlIF9pc1ZlcnRpY2FsID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX21hbnVhbFdpZHRoID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9tYW51YWxIZWlnaHQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2RvTm90VHJhY2tNYW51YWxDaGFuZ2VzID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9zcGFjaW5nID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IGxheW91dCB3YXJuaW5ncyBzaG91bGQgYmUgaWdub3JlZFxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBpZ25vcmVMYXlvdXRXYXJuaW5ncyA9IGZhbHNlO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHN0YWNrIHBhbmVsIGlzIHZlcnRpY2FsIG9yIGhvcml6b250YWwqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGlzVmVydGljYWwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmVydGljYWw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBpc1ZlcnRpY2FsKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzVmVydGljYWwgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzVmVydGljYWwgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzcGFjaW5nIChpbiBwaXhlbHMpIGJldHdlZW4gZWFjaCBjaGlsZC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHNwYWNpbmcoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3BhY2luZztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHNwYWNpbmcodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9zcGFjaW5nID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zcGFjaW5nID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBwYW5lbCB3aWR0aC5cclxuICAgICAqIFRoaXMgdmFsdWUgc2hvdWxkIG5vdCBiZSBzZXQgd2hlbiBpbiBob3Jpem9udGFsIG1vZGUgYXMgaXQgd2lsbCBiZSBjb21wdXRlZCBhdXRvbWF0aWNhbGx5XHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIG92ZXJyaWRlIHNldCB3aWR0aCh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9kb05vdFRyYWNrTWFudWFsQ2hhbmdlcykge1xyXG4gICAgICAgICAgICB0aGlzLl9tYW51YWxXaWR0aCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fd2lkdGgudG9TdHJpbmcodGhpcy5faG9zdCkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl93aWR0aC5mcm9tU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0IHdpZHRoKCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoLnRvU3RyaW5nKHRoaXMuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHBhbmVsIGhlaWdodC5cclxuICAgICAqIFRoaXMgdmFsdWUgc2hvdWxkIG5vdCBiZSBzZXQgd2hlbiBpbiB2ZXJ0aWNhbCBtb2RlIGFzIGl0IHdpbGwgYmUgY29tcHV0ZWQgYXV0b21hdGljYWxseVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXQgaGVpZ2h0KHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2RvTm90VHJhY2tNYW51YWxDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hbnVhbEhlaWdodCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faGVpZ2h0LnRvU3RyaW5nKHRoaXMuX2hvc3QpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faGVpZ2h0LmZyb21TdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXQgaGVpZ2h0KCk6IHN0cmluZyB8IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodC50b1N0cmluZyh0aGlzLl9ob3N0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgU3RhY2tQYW5lbFxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyBjb250cm9sIG5hbWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiU3RhY2tQYW5lbFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfcHJlTWVhc3VyZShwYXJlbnRNZWFzdXJlOiBNZWFzdXJlLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkLnZlcnRpY2FsQWxpZ25tZW50ID0gQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfVE9QO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQuaG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIuX3ByZU1lYXN1cmUocGFyZW50TWVhc3VyZSwgY29udGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9hZGRpdGlvbmFsUHJvY2Vzc2luZyhwYXJlbnRNZWFzdXJlOiBNZWFzdXJlLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLl9hZGRpdGlvbmFsUHJvY2Vzc2luZyhwYXJlbnRNZWFzdXJlLCBjb250ZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLmNvcHlGcm9tKHBhcmVudE1lYXN1cmUpO1xyXG5cclxuICAgICAgICB0aGlzLl9tZWFzdXJlRm9yQ2hpbGRyZW4ubGVmdCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQ7XHJcbiAgICAgICAgdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLnRvcCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzVmVydGljYWwgfHwgdGhpcy5fbWFudWFsV2lkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWVhc3VyZUZvckNoaWxkcmVuLndpZHRoID0gdGhpcy5fY3VycmVudE1lYXN1cmUud2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsIHx8IHRoaXMuX21hbnVhbEhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tZWFzdXJlRm9yQ2hpbGRyZW4uaGVpZ2h0ID0gdGhpcy5fY3VycmVudE1lYXN1cmUuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX3Bvc3RNZWFzdXJlKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBzdGFja1dpZHRoID0gMDtcclxuICAgICAgICBsZXQgc3RhY2tIZWlnaHQgPSAwO1xyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuQ291bnQgPSB0aGlzLl9jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNoaWxkcmVuQ291bnQ7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLl9jaGlsZHJlbltpbmRleF07XHJcbiAgICAgICAgICAgIGlmICghY2hpbGQuaXNWaXNpYmxlIHx8IGNoaWxkLm5vdFJlbmRlcmFibGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLnRvcCAhPT0gc3RhY2tIZWlnaHQgKyBcInB4XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC50b3AgPSBzdGFja0hlaWdodCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWJ1aWxkTGF5b3V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC5fdG9wLmlnbm9yZUFkYXB0aXZlU2NhbGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlnbm9yZUxheW91dFdhcm5pbmdzICYmICFjaGlsZC5pc0RpbWVuc2lvbkZ1bGx5RGVmaW5lZChcImhlaWdodFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5XYXJuKGBDb250cm9sIChOYW1lOiR7Y2hpbGQubmFtZX0sIFVuaXF1ZUlkOiR7Y2hpbGQudW5pcXVlSWR9KSBpcyB1c2luZyBoZWlnaHQgaW4gcGVyY2VudGFnZSBtb2RlIGluc2lkZSBhIHZlcnRpY2FsIFN0YWNrUGFuZWxgLCAxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tIZWlnaHQgKz0gY2hpbGQuX2N1cnJlbnRNZWFzdXJlLmhlaWdodCArIGNoaWxkLl9wYWRkaW5nVG9wSW5QaXhlbHMgKyBjaGlsZC5fcGFkZGluZ0JvdHRvbUluUGl4ZWxzICsgKGluZGV4IDwgY2hpbGRyZW5Db3VudCAtIDEgPyB0aGlzLl9zcGFjaW5nIDogMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQubGVmdCAhPT0gc3RhY2tXaWR0aCArIFwicHhcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmxlZnQgPSBzdGFja1dpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYnVpbGRMYXlvdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLl9sZWZ0Lmlnbm9yZUFkYXB0aXZlU2NhbGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlnbm9yZUxheW91dFdhcm5pbmdzICYmICFjaGlsZC5pc0RpbWVuc2lvbkZ1bGx5RGVmaW5lZChcIndpZHRoXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLldhcm4oYENvbnRyb2wgKE5hbWU6JHtjaGlsZC5uYW1lfSwgVW5pcXVlSWQ6JHtjaGlsZC51bmlxdWVJZH0pIGlzIHVzaW5nIHdpZHRoIGluIHBlcmNlbnRhZ2UgbW9kZSBpbnNpZGUgYSBob3Jpem9udGFsIFN0YWNrUGFuZWxgLCAxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tXaWR0aCArPSBjaGlsZC5fY3VycmVudE1lYXN1cmUud2lkdGggKyBjaGlsZC5fcGFkZGluZ0xlZnRJblBpeGVscyArIGNoaWxkLl9wYWRkaW5nUmlnaHRJblBpeGVscyArIChpbmRleCA8IGNoaWxkcmVuQ291bnQgLSAxID8gdGhpcy5fc3BhY2luZyA6IDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGFja1dpZHRoICs9IHRoaXMuX3BhZGRpbmdMZWZ0SW5QaXhlbHMgKyB0aGlzLl9wYWRkaW5nUmlnaHRJblBpeGVscztcclxuICAgICAgICBzdGFja0hlaWdodCArPSB0aGlzLl9wYWRkaW5nVG9wSW5QaXhlbHMgKyB0aGlzLl9wYWRkaW5nQm90dG9tSW5QaXhlbHM7XHJcblxyXG4gICAgICAgIHRoaXMuX2RvTm90VHJhY2tNYW51YWxDaGFuZ2VzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gTGV0IHN0YWNrIHBhbmVsIHdpZHRoIG9yIGhlaWdodCBkZWZhdWx0IHRvIHN0YWNrSGVpZ2h0IGFuZCBzdGFja1dpZHRoIGlmIGRpbWVuc2lvbnMgYXJlIG5vdCBzcGVjaWZpZWQuXHJcbiAgICAgICAgLy8gVXNlciBjYW4gbm93IGRlZmluZSB0aGVpciBvd24gaGVpZ2h0IGFuZCB3aWR0aCBmb3Igc3RhY2sgcGFuZWwuXHJcblxyXG4gICAgICAgIGxldCBwYW5lbFdpZHRoQ2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBwYW5lbEhlaWdodENoYW5nZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKCghdGhpcy5fbWFudWFsSGVpZ2h0IHx8IHRoaXMuYWRhcHRIZWlnaHRUb0NoaWxkcmVuKSAmJiB0aGlzLl9pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIC8vIGRvIG5vdCBzcGVjaWZ5IGhlaWdodCBpZiBzdHJpY3RseSBkZWZpbmVkIGJ5IHVzZXJcclxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNIZWlnaHQgPSB0aGlzLmhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBzdGFja0hlaWdodCArIFwicHhcIjtcclxuICAgICAgICAgICAgcGFuZWxIZWlnaHRDaGFuZ2VkID0gcHJldmlvdXNIZWlnaHQgIT09IHRoaXMuaGVpZ2h0IHx8ICF0aGlzLl9oZWlnaHQuaWdub3JlQWRhcHRpdmVTY2FsaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKCF0aGlzLl9tYW51YWxXaWR0aCB8fCB0aGlzLmFkYXB0V2lkdGhUb0NoaWxkcmVuKSAmJiAhdGhpcy5faXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAvLyBkbyBub3Qgc3BlY2lmeSB3aWR0aCBpZiBzdHJpY3RseSBkZWZpbmVkIGJ5IHVzZXJcclxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNXaWR0aCA9IHRoaXMud2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBzdGFja1dpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICBwYW5lbFdpZHRoQ2hhbmdlZCA9IHByZXZpb3VzV2lkdGggIT09IHRoaXMud2lkdGggfHwgIXRoaXMuX3dpZHRoLmlnbm9yZUFkYXB0aXZlU2NhbGluZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYW5lbEhlaWdodENoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faGVpZ2h0Lmlnbm9yZUFkYXB0aXZlU2NhbGluZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFuZWxXaWR0aENoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fd2lkdGguaWdub3JlQWRhcHRpdmVTY2FsaW5nID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2RvTm90VHJhY2tNYW51YWxDaGFuZ2VzID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChwYW5lbFdpZHRoQ2hhbmdlZCB8fCBwYW5lbEhlaWdodENoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVidWlsZExheW91dCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5fcG9zdE1lYXN1cmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9nZXRNYW51YWxEaW0oZGltOiBcIndpZHRoXCIgfCBcImhlaWdodFwiKSB7XHJcbiAgICAgICAgaWYgKGRpbSA9PT0gXCJ3aWR0aFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYW51YWxXaWR0aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFudWFsSGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgaXNEaW1lbnNpb25GdWxseURlZmluZWQoZGltOiBcIndpZHRoXCIgfCBcImhlaWdodFwiKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGRpbSA9PT0gXCJoZWlnaHRcIiA/IHRoaXMuaXNWZXJ0aWNhbCA6ICF0aGlzLmlzVmVydGljYWwgJiYgIXRoaXMuX2dldE1hbnVhbERpbShkaW0pKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmICghY2hpbGQuaXNEaW1lbnNpb25GdWxseURlZmluZWQoZGltKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldERpbWVuc2lvbihkaW0pLmlzUGl4ZWwgfHwgdGhpcy5fZ2V0QWRhcHREaW1UbyhkaW0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VyaWFsaXplcyB0aGUgY3VycmVudCBjb250cm9sXHJcbiAgICAgKiBAcGFyYW0gc2VyaWFsaXphdGlvbk9iamVjdCBkZWZpbmVkIHRoZSBKU09OIHNlcmlhbGl6ZWQgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gZm9yY2UgZm9yY2Ugc2VyaWFsaXphdGlvbiBldmVuIGlmIGlzU2VyaWFsaXphYmxlID09PSBmYWxzZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2VyaWFsaXplKHNlcmlhbGl6YXRpb25PYmplY3Q6IGFueSwgZm9yY2U6IGJvb2xlYW4pIHtcclxuICAgICAgICBzdXBlci5zZXJpYWxpemUoc2VyaWFsaXphdGlvbk9iamVjdCwgZm9yY2UpO1xyXG4gICAgICAgIGlmICghdGhpcy5pc1NlcmlhbGl6YWJsZSAmJiAhZm9yY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0Lm1hbnVhbFdpZHRoID0gdGhpcy5fbWFudWFsV2lkdGg7XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5tYW51YWxIZWlnaHQgPSB0aGlzLl9tYW51YWxIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9wYXJzZUZyb21Db250ZW50KHNlcmlhbGl6ZWRPYmplY3Q6IGFueSwgaG9zdDogQWR2YW5jZWREeW5hbWljVGV4dHVyZSkge1xyXG4gICAgICAgIHRoaXMuX21hbnVhbFdpZHRoID0gc2VyaWFsaXplZE9iamVjdC5tYW51YWxXaWR0aDtcclxuICAgICAgICB0aGlzLl9tYW51YWxIZWlnaHQgPSBzZXJpYWxpemVkT2JqZWN0Lm1hbnVhbEhlaWdodDtcclxuXHJcbiAgICAgICAgc3VwZXIuX3BhcnNlRnJvbUNvbnRlbnQoc2VyaWFsaXplZE9iamVjdCwgaG9zdCk7XHJcbiAgICB9XHJcbn1cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLlN0YWNrUGFuZWxcIiwgU3RhY2tQYW5lbCk7XHJcbiIsImltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9sXCI7XHJcbmltcG9ydCB7IFN0YWNrUGFuZWwgfSBmcm9tIFwiLi9zdGFja1BhbmVsXCI7XHJcbmltcG9ydCB7IFRleHRCbG9jayB9IGZyb20gXCIuL3RleHRCbG9ja1wiO1xyXG5cclxuLyoqXHJcbiAqIEZvcmNpbmcgYW4gZXhwb3J0IHNvIHRoYXQgdGhpcyBjb2RlIHdpbGwgZXhlY3V0ZVxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IG5hbWUgPSBcIlN0YXRpY3NcIjtcclxuXHJcbmV4cG9ydCB7IG5hbWUgfTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgc3RhY2sgcGFuZWwgdGhhdCBjYW4gYmUgdXNlZCB0byByZW5kZXIgaGVhZGVyc1xyXG4gKiBAcGFyYW0gY29udHJvbCBkZWZpbmVzIHRoZSBjb250cm9sIHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBoZWFkZXJcclxuICogQHBhcmFtIHRleHQgZGVmaW5lcyB0aGUgdGV4dCBvZiB0aGUgaGVhZGVyXHJcbiAqIEBwYXJhbSBzaXplIGRlZmluZXMgdGhlIHNpemUgb2YgdGhlIGhlYWRlclxyXG4gKiBAcGFyYW0gb3B0aW9ucyBkZWZpbmVzIG9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgdGhlIGhlYWRlclxyXG4gKiBAcGFyYW0gb3B0aW9ucy5pc0hvcml6b250YWxcclxuICogQHBhcmFtIG9wdGlvbnMuY29udHJvbEZpcnN0XHJcbiAqIEByZXR1cm5zIGEgbmV3IFN0YWNrUGFuZWxcclxuICovXHJcbkNvbnRyb2wuQWRkSGVhZGVyID0gZnVuY3Rpb24gKGNvbnRyb2w6IENvbnRyb2wsIHRleHQ6IHN0cmluZywgc2l6ZTogc3RyaW5nIHwgbnVtYmVyLCBvcHRpb25zOiB7IGlzSG9yaXpvbnRhbDogYm9vbGVhbjsgY29udHJvbEZpcnN0OiBib29sZWFuIH0pOiBTdGFja1BhbmVsIHtcclxuICAgIGNvbnN0IHBhbmVsID0gbmV3IFN0YWNrUGFuZWwoXCJwYW5lbFwiKTtcclxuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IG9wdGlvbnMgPyBvcHRpb25zLmlzSG9yaXpvbnRhbCA6IHRydWU7XHJcbiAgICBjb25zdCBjb250cm9sRmlyc3QgPSBvcHRpb25zID8gb3B0aW9ucy5jb250cm9sRmlyc3QgOiB0cnVlO1xyXG5cclxuICAgIHBhbmVsLmlzVmVydGljYWwgPSAhaXNIb3Jpem9udGFsO1xyXG5cclxuICAgIGNvbnN0IGhlYWRlciA9IG5ldyBUZXh0QmxvY2soXCJoZWFkZXJcIik7XHJcbiAgICBoZWFkZXIudGV4dCA9IHRleHQ7XHJcbiAgICBoZWFkZXIudGV4dEhvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ7XHJcbiAgICBpZiAoaXNIb3Jpem9udGFsKSB7XHJcbiAgICAgICAgaGVhZGVyLndpZHRoID0gc2l6ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaGVhZGVyLmhlaWdodCA9IHNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRyb2xGaXJzdCkge1xyXG4gICAgICAgIHBhbmVsLmFkZENvbnRyb2woY29udHJvbCk7XHJcbiAgICAgICAgcGFuZWwuYWRkQ29udHJvbChoZWFkZXIpO1xyXG4gICAgICAgIGhlYWRlci5wYWRkaW5nTGVmdCA9IFwiNXB4XCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBhbmVsLmFkZENvbnRyb2woaGVhZGVyKTtcclxuICAgICAgICBwYW5lbC5hZGRDb250cm9sKGNvbnRyb2wpO1xyXG4gICAgICAgIGhlYWRlci5wYWRkaW5nUmlnaHQgPSBcIjVweFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGhlYWRlci5zaGFkb3dCbHVyID0gY29udHJvbC5zaGFkb3dCbHVyO1xyXG4gICAgaGVhZGVyLnNoYWRvd0NvbG9yID0gY29udHJvbC5zaGFkb3dDb2xvcjtcclxuICAgIGhlYWRlci5zaGFkb3dPZmZzZXRYID0gY29udHJvbC5zaGFkb3dPZmZzZXRYO1xyXG4gICAgaGVhZGVyLnNoYWRvd09mZnNldFkgPSBjb250cm9sLnNoYWRvd09mZnNldFk7XHJcblxyXG4gICAgcmV0dXJuIHBhbmVsO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVhc3VyZSB9IGZyb20gXCIuLi9tZWFzdXJlXCI7XHJcbmltcG9ydCB7IFZhbHVlQW5kVW5pdCB9IGZyb20gXCIuLi92YWx1ZUFuZFVuaXRcIjtcclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgUmVnaXN0ZXJDbGFzcyB9IGZyb20gXCJjb3JlL01pc2MvdHlwZVN0b3JlXCI7XHJcbmltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHR5cGUgeyBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCwgSVRleHRNZXRyaWNzIH0gZnJvbSBcImNvcmUvRW5naW5lcy9JQ2FudmFzXCI7XHJcbmltcG9ydCB7IEVuZ2luZVN0b3JlIH0gZnJvbSBcImNvcmUvRW5naW5lcy9lbmdpbmVTdG9yZVwiO1xyXG5cclxuLyoqXHJcbiAqIEVudW0gdGhhdCBkZXRlcm1pbmVzIHRoZSB0ZXh0LXdyYXBwaW5nIG1vZGUgdG8gdXNlLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVudW0gVGV4dFdyYXBwaW5nIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2xpcCB0aGUgdGV4dCB3aGVuIGl0J3MgbGFyZ2VyIHRoYW4gQ29udHJvbC53aWR0aDsgdGhpcyBpcyB0aGUgZGVmYXVsdCBtb2RlLlxyXG4gICAgICovXHJcbiAgICBDbGlwID0gMCxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyYXAgdGhlIHRleHQgd29yZC13aXNlLCBpLmUuIHRyeSB0byBhZGQgbGluZS1icmVha3MgYXQgd29yZCBib3VuZGFyeSB0byBmaXQgd2l0aGluIENvbnRyb2wud2lkdGguXHJcbiAgICAgKi9cclxuICAgIFdvcmRXcmFwID0gMSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVsbGlwc2l6ZSB0aGUgdGV4dCwgaS5lLiBzaHJpbmsgd2l0aCB0cmFpbGluZyDigKYgd2hlbiB0ZXh0IGlzIGxhcmdlciB0aGFuIENvbnRyb2wud2lkdGguXHJcbiAgICAgKi9cclxuICAgIEVsbGlwc2lzID0gMixcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdyYXAgdGhlIHRleHQgd29yZC13aXNlIGFuZCBjbGlwIHRoZSB0ZXh0IHdoZW4gdGhlIHRleHQncyBoZWlnaHQgaXMgbGFyZ2VyIHRoYW4gdGhlIENvbnRyb2wuaGVpZ2h0LCBhbmQgc2hyaW5rIHRoZSBsYXN0IGxpbmUgd2l0aCB0cmFpbGluZyDigKYgLlxyXG4gICAgICovXHJcbiAgICBXb3JkV3JhcEVsbGlwc2lzID0gMyxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZSBIVE1MIHRvIHdyYXAgdGhlIHRleHQuIFRoaXMgaXMgdGhlIG9ubHkgbW9kZSB0aGF0IHN1cHBvcnRzIGVhc3QtYXNpYW4gbGFuZ3VhZ2VzLlxyXG4gICAgICovXHJcbiAgICBIVE1MID0gNCxcclxufVxyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIHRleHQgYmxvY2sgY29udHJvbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRleHRCbG9jayBleHRlbmRzIENvbnRyb2wge1xyXG4gICAgcHJpdmF0ZSBfdGV4dCA9IFwiXCI7XHJcbiAgICBwcml2YXRlIF90ZXh0V3JhcHBpbmcgPSBUZXh0V3JhcHBpbmcuQ2xpcDtcclxuICAgIHByaXZhdGUgX3RleHRIb3Jpem9udGFsQWxpZ25tZW50ID0gQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI7XHJcbiAgICBwcml2YXRlIF90ZXh0VmVydGljYWxBbGlnbm1lbnQgPSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI7XHJcblxyXG4gICAgcHJpdmF0ZSBfbGluZXM6IGFueVtdO1xyXG4gICAgcHJpdmF0ZSBfcmVzaXplVG9GaXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2xpbmVTcGFjaW5nOiBWYWx1ZUFuZFVuaXQgPSBuZXcgVmFsdWVBbmRVbml0KDApO1xyXG4gICAgcHJpdmF0ZSBfb3V0bGluZVdpZHRoOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfb3V0bGluZUNvbG9yOiBzdHJpbmcgPSBcIndoaXRlXCI7XHJcbiAgICBwcml2YXRlIF91bmRlcmxpbmU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2xpbmVUaHJvdWdoOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF93b3JkRGl2aWRlcjogc3RyaW5nID0gXCIgXCI7XHJcbiAgICBwcml2YXRlIF9mb3JjZVJlc2l6ZVdpZHRoOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9hcHBseU91dGxpbmVUb1VuZGVybGluZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gZXZlbnQgdHJpZ2dlcmVkIGFmdGVyIHRoZSB0ZXh0IGlzIGNoYW5nZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uVGV4dENoYW5nZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8VGV4dEJsb2NrPigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gZXZlbnQgdHJpZ2dlcmVkIGFmdGVyIHRoZSB0ZXh0IHdhcyBicm9rZW4gdXAgaW50byBsaW5lc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25MaW5lc1JlYWR5T2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFRleHRCbG9jaz4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gc3BsaXQgYSBzdHJpbmcgaW50byB3b3Jkcy4gQnkgZGVmYXVsdCwgYSBzdHJpbmcgaXMgc3BsaXQgYXQgZWFjaCBzcGFjZSBjaGFyYWN0ZXIgZm91bmRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHdvcmRTcGxpdHRpbmdGdW5jdGlvbjogTnVsbGFibGU8KGxpbmU6IHN0cmluZykgPT4gc3RyaW5nW10+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuIGEgbmV3IEhUTUwgZWxlbWVudCBpcyBnZW5lcmF0ZWQgdG8gYmUgdXNlZCBmb3Igd29yZCB3cmFwcGluZy5cclxuICAgICAqIFRoaXMgaXMgb25seSB1c2VkIHdoZW4gd3JhcHBpbmcgbW9kZSBIVE1MIGlzIHNlbGVjdGVkLlxyXG4gICAgICogVXNpbmcgdGhpcyBmdW5jdGlvbiB5b3UgY2FuIGFkanVzdCB3b3JkLWJyZWFrLCBvdmVyZmxvdy13cmFwLCBoeXBoZW5zLCBvciBhbnkgb3RoZXIgQ1NTIHByb3BlcnRpZXMgb2YgdGhlIEhUTUwgZWxlbWVudCwgbGFuZ3VhZ2UtZGVwZW5kZW50LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRqdXN0V29yZFdyYXBwaW5nSFRNTEVsZW1lbnQ6IE51bGxhYmxlPChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIEhUTUwgZWxlbWVudCBnZW5lcmF0ZWQgZm9yIHdvcmQgd3JhcHBpbmcgc2hvdWxkIGJlIHJldXNlZCBvciByZW1vdmVkIGFmdGVyIGVhY2ggd3JhcHBpbmcuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZXVzZUhUTUxGb3JXb3JkV3JhcHBpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiB0aGUgbGluZSBsaXN0ICh5b3UgbWF5IG5lZWQgdG8gdXNlIHRoZSBvbkxpbmVzUmVhZHlPYnNlcnZhYmxlIHRvIG1ha2Ugc3VyZSB0aGUgbGlzdCBpcyByZWFkeSlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBsaW5lcygpOiBhbnlbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGhlIFRleHRCbG9jayB3aWxsIGJlIHJlc2l6ZWQgdG8gZml0IGl0cyBjb250ZW50XHJcblxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgcmVzaXplVG9GaXQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc2l6ZVRvRml0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGhlIFRleHRCbG9jayB3aWxsIGJlIHJlc2l6ZWQgdG8gZml0IGl0cyBjb250ZW50XHJcblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IHJlc2l6ZVRvRml0KHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Jlc2l6ZVRvRml0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3Jlc2l6ZVRvRml0ID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZXNpemVUb0ZpdCkge1xyXG4gICAgICAgICAgICB0aGlzLl93aWR0aC5pZ25vcmVBZGFwdGl2ZVNjYWxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQuaWdub3JlQWRhcHRpdmVTY2FsaW5nID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGV4dCBtdXN0IGJlIHdyYXBwZWRcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHRleHRXcmFwcGluZygpOiBUZXh0V3JhcHBpbmcgfCBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dFdyYXBwaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRleHQgbXVzdCBiZSB3cmFwcGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgdGV4dFdyYXBwaW5nKHZhbHVlOiBUZXh0V3JhcHBpbmcgfCBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RleHRXcmFwcGluZyA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl90ZXh0V3JhcHBpbmcgPSArdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0ZXh0IHRvIGRpc3BsYXlcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IHRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0ZXh0IHRvIGRpc3BsYXlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGV4dCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl90ZXh0ID0gdmFsdWUgKyBcIlwiOyAvLyBNYWtpbmcgc3VyZSBpdCBpcyBhIHRleHRcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG5cclxuICAgICAgICB0aGlzLm9uVGV4dENoYW5nZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0ZXh0IGhvcml6b250YWwgYWxpZ25tZW50IChCQUJZTE9OLkdVSS5Db250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0NFTlRFUiBieSBkZWZhdWx0KVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgdGV4dEhvcml6b250YWxBbGlnbm1lbnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dEhvcml6b250YWxBbGlnbm1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGV4dCBob3Jpem9udGFsIGFsaWdubWVudCAoQkFCWUxPTi5HVUkuQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVIgYnkgZGVmYXVsdClcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCB0ZXh0SG9yaXpvbnRhbEFsaWdubWVudCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RleHRIb3Jpem9udGFsQWxpZ25tZW50ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90ZXh0SG9yaXpvbnRhbEFsaWdubWVudCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGV4dCB2ZXJ0aWNhbCBhbGlnbm1lbnQgKEJBQllMT04uR1VJLkNvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0NFTlRFUiBieSBkZWZhdWx0KVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgdGV4dFZlcnRpY2FsQWxpZ25tZW50KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHRWZXJ0aWNhbEFsaWdubWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0ZXh0IHZlcnRpY2FsIGFsaWdubWVudCAoQkFCWUxPTi5HVUkuQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfQ0VOVEVSIGJ5IGRlZmF1bHQpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgdGV4dFZlcnRpY2FsQWxpZ25tZW50KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGV4dFZlcnRpY2FsQWxpZ25tZW50ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90ZXh0VmVydGljYWxBbGlnbm1lbnQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGxpbmUgc3BhY2luZyB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBzZXQgbGluZVNwYWNpbmcodmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9saW5lU3BhY2luZy5mcm9tU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBsaW5lIHNwYWNpbmcgdmFsdWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBsaW5lU3BhY2luZygpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lU3BhY2luZy50b1N0cmluZyh0aGlzLl9ob3N0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBvdXRsaW5lV2lkdGggb2YgdGhlIHRleHQgdG8gZGlzcGxheVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgb3V0bGluZVdpZHRoKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX291dGxpbmVXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBvdXRsaW5lV2lkdGggb2YgdGhlIHRleHQgdG8gZGlzcGxheVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IG91dGxpbmVXaWR0aCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX291dGxpbmVXaWR0aCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9vdXRsaW5lV2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGV4dCBtdXN0IGhhdmUgdW5kZXJsaW5lXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCB1bmRlcmxpbmUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VuZGVybGluZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IHRleHQgbXVzdCBoYXZlIHVuZGVybGluZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IHVuZGVybGluZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl91bmRlcmxpbmUgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdW5kZXJsaW5lID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhbiBib29sZWFuIGluZGljYXRpbmcgdGhhdCB0ZXh0IG11c3QgYmUgY3Jvc3NlZCBvdXRcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2V0IGxpbmVUaHJvdWdoKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lVGhyb3VnaDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhbiBib29sZWFuIGluZGljYXRpbmcgdGhhdCB0ZXh0IG11c3QgYmUgY3Jvc3NlZCBvdXRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCBsaW5lVGhyb3VnaCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9saW5lVGhyb3VnaCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9saW5lVGhyb3VnaCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0aGUgb3V0bGluZSBzaG91bGQgYmUgYXBwbGllZCB0byB0aGUgdW5kZXJsaW5lL3N0cmlrZS10aHJvdWdoIHRvby4gSGFzIGRpZmZlcmVudCBiZWhhdmlvciBpbiBFZGdlL0Nocm9tZSB2cyBGaXJlZm94LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnZXQgYXBwbHlPdXRsaW5lVG9VbmRlcmxpbmUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5T3V0bGluZVRvVW5kZXJsaW5lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgYXBwbHlPdXRsaW5lVG9VbmRlcmxpbmUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fYXBwbHlPdXRsaW5lVG9VbmRlcmxpbmUgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYXBwbHlPdXRsaW5lVG9VbmRlcmxpbmUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIG91dGxpbmVDb2xvciBvZiB0aGUgdGV4dCB0byBkaXNwbGF5XHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBvdXRsaW5lQ29sb3IoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb3V0bGluZUNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIG91dGxpbmVDb2xvciBvZiB0aGUgdGV4dCB0byBkaXNwbGF5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgb3V0bGluZUNvbG9yKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fb3V0bGluZUNvbG9yID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX291dGxpbmVDb2xvciA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgd29yZCBkaXZpZGVyXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCB3b3JkRGl2aWRlcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl93b3JkRGl2aWRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB3b3JkIGRpdmlkZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCB3b3JkRGl2aWRlcih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3dvcmREaXZpZGVyID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3dvcmREaXZpZGVyID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEJ5IGRlZmF1bHQsIGlmIGEgdGV4dCBibG9jayBoYXMgdGV4dCB3cmFwcGluZyBvdGhlciB0aGFuIENsaXAsIGl0cyB3aWR0aFxyXG4gICAgICogaXMgbm90IHJlc2l6ZWQgZXZlbiBpZiByZXNpemVUb0ZpdCA9IHRydWUuIFRoaXMgcGFyYW1ldGVyIGZvcmNlcyB0aGUgd2lkdGhcclxuICAgICAqIHRvIGJlIHJlc2l6ZWQuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdldCBmb3JjZVJlc2l6ZVdpZHRoKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JjZVJlc2l6ZVdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZm9yY2VSZXNpemVXaWR0aCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9mb3JjZVJlc2l6ZVdpZHRoID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2ZvcmNlUmVzaXplV2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBUZXh0QmxvY2sgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBuYW1lIG9mIHRoZSBjb250cm9sXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBkZWZpbmVzIHRoZSB0ZXh0IHRvIGRpc3BsYXkgKGVtcHR5IHN0cmluZyBieSBkZWZhdWx0KVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWZpbmVzIHRoZSBuYW1lIG9mIHRoZSBjb250cm9sXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcsXHJcbiAgICAgICAgdGV4dDogc3RyaW5nID0gXCJcIlxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIlRleHRCbG9ja1wiO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfcHJvY2Vzc01lYXN1cmVzKHBhcmVudE1lYXN1cmU6IE1lYXN1cmUsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9mb250T2Zmc2V0IHx8IHRoaXMuaXNEaXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLl9mb250T2Zmc2V0ID0gQ29udHJvbC5fR2V0Rm9udE9mZnNldChjb250ZXh0LmZvbnQsIHRoaXMuX2hvc3QuZ2V0U2NlbmUoKT8uZ2V0RW5naW5lKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlci5fcHJvY2Vzc01lYXN1cmVzKHBhcmVudE1lYXN1cmUsIGNvbnRleHQpO1xyXG5cclxuICAgICAgICAvLyBQcmVwYXJlIGxpbmVzXHJcbiAgICAgICAgdGhpcy5fbGluZXMgPSB0aGlzLl9icmVha0xpbmVzKHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5oZWlnaHQsIGNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMub25MaW5lc1JlYWR5T2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcyk7XHJcblxyXG4gICAgICAgIGxldCBtYXhMaW5lV2lkdGg6IG51bWJlciA9IDA7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuX2xpbmVzW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYgKGxpbmUud2lkdGggPiBtYXhMaW5lV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIG1heExpbmVXaWR0aCA9IGxpbmUud2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yZXNpemVUb0ZpdCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGV4dFdyYXBwaW5nID09PSBUZXh0V3JhcHBpbmcuQ2xpcCB8fCB0aGlzLl9mb3JjZVJlc2l6ZVdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdXaWR0aCA9IE1hdGguY2VpbCh0aGlzLl9wYWRkaW5nTGVmdEluUGl4ZWxzKSArIE1hdGguY2VpbCh0aGlzLl9wYWRkaW5nUmlnaHRJblBpeGVscykgKyBNYXRoLmNlaWwobWF4TGluZVdpZHRoKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdXaWR0aCAhPT0gdGhpcy5fd2lkdGguZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX3RlbXBQYXJlbnRNZWFzdXJlLndpZHRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3dpZHRoLnVwZGF0ZUluUGxhY2UobmV3V2lkdGgsIFZhbHVlQW5kVW5pdC5VTklUTU9ERV9QSVhFTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVidWlsZExheW91dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IG5ld0hlaWdodCA9ICh0aGlzLl9wYWRkaW5nVG9wSW5QaXhlbHMgKyB0aGlzLl9wYWRkaW5nQm90dG9tSW5QaXhlbHMgKyB0aGlzLl9mb250T2Zmc2V0LmhlaWdodCAqIHRoaXMuX2xpbmVzLmxlbmd0aCkgfCAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xpbmVzLmxlbmd0aCA+IDAgJiYgdGhpcy5fbGluZVNwYWNpbmcuaW50ZXJuYWxWYWx1ZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxpbmVTcGFjaW5nID0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9saW5lU3BhY2luZy5pc1BpeGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZVNwYWNpbmcgPSB0aGlzLl9saW5lU3BhY2luZy5nZXRWYWx1ZSh0aGlzLl9ob3N0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZVNwYWNpbmcgPSB0aGlzLl9saW5lU3BhY2luZy5nZXRWYWx1ZSh0aGlzLl9ob3N0KSAqIHRoaXMuX2hlaWdodC5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG5ld0hlaWdodCArPSAodGhpcy5fbGluZXMubGVuZ3RoIC0gMSkgKiBsaW5lU3BhY2luZztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG5ld0hlaWdodCAhPT0gdGhpcy5faGVpZ2h0LmludGVybmFsVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hlaWdodC51cGRhdGVJblBsYWNlKG5ld0hlaWdodCwgVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYnVpbGRMYXlvdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2RyYXdUZXh0KHRleHQ6IHN0cmluZywgdGV4dFdpZHRoOiBudW1iZXIsIHk6IG51bWJlciwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLndpZHRoO1xyXG4gICAgICAgIGxldCB4ID0gMDtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuX3RleHRIb3Jpem9udGFsQWxpZ25tZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9MRUZUOlxyXG4gICAgICAgICAgICAgICAgeCA9IDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX1JJR0hUOlxyXG4gICAgICAgICAgICAgICAgeCA9IHdpZHRoIC0gdGV4dFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbC5IT1JJWk9OVEFMX0FMSUdOTUVOVF9DRU5URVI6XHJcbiAgICAgICAgICAgICAgICB4ID0gKHdpZHRoIC0gdGV4dFdpZHRoKSAvIDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd0JsdXIgfHwgdGhpcy5zaGFkb3dPZmZzZXRYIHx8IHRoaXMuc2hhZG93T2Zmc2V0WSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gdGhpcy5zaGFkb3dDb2xvcjtcclxuICAgICAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gdGhpcy5zaGFkb3dCbHVyO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IHRoaXMuc2hhZG93T2Zmc2V0WTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm91dGxpbmVXaWR0aCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVRleHQodGV4dCwgdGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHgsIHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKyB4LCB5KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3VuZGVybGluZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kcmF3TGluZSh0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgeCwgeSArIDMsIHRoaXMuX2N1cnJlbnRNZWFzdXJlLmxlZnQgKyB4ICsgdGV4dFdpZHRoLCB5ICsgMywgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fbGluZVRocm91Z2gpIHtcclxuICAgICAgICAgICAgdGhpcy5fZHJhd0xpbmUodGhpcy5fY3VycmVudE1lYXN1cmUubGVmdCArIHgsIHkgLSB0aGlzLmZvbnRTaXplSW5QaXhlbHMgLyAzLCB0aGlzLl9jdXJyZW50TWVhc3VyZS5sZWZ0ICsgeCArIHRleHRXaWR0aCwgeSAtIHRoaXMuZm9udFNpemVJblBpeGVscyAvIDMsIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9kcmF3TGluZSh4RnJvbTogbnVtYmVyLCB5RnJvbTogbnVtYmVyLCB4VG86IG51bWJlciwgeVRvOiBudW1iZXIsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IE1hdGgucm91bmQodGhpcy5mb250U2l6ZUluUGl4ZWxzICogMC4wNSk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oeEZyb20sIHlGcm9tKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyh4VG8sIHlUbyk7XHJcbiAgICAgICAgaWYgKHRoaXMub3V0bGluZVdpZHRoICYmIHRoaXMuYXBwbHlPdXRsaW5lVG9VbmRlcmxpbmUpIHtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFN0cm9rZSA9IGNvbnRleHQuc3Ryb2tlU3R5bGU7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGN1cnJlbnRTdHJva2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9kcmF3KGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FwcGx5U3RhdGVzKGNvbnRleHQpO1xyXG5cclxuICAgICAgICAvLyBSZW5kZXIgbGluZXNcclxuICAgICAgICB0aGlzLl9yZW5kZXJMaW5lcyhjb250ZXh0KTtcclxuXHJcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9hcHBseVN0YXRlcyhjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLl9hcHBseVN0YXRlcyhjb250ZXh0KTtcclxuICAgICAgICBpZiAodGhpcy5vdXRsaW5lV2lkdGgpIHtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSB0aGlzLm91dGxpbmVXaWR0aDtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMub3V0bGluZUNvbG9yO1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVKb2luID0gXCJtaXRlclwiO1xyXG4gICAgICAgICAgICBjb250ZXh0Lm1pdGVyTGltaXQgPSAyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9saW5lc1RlbXA6IG9iamVjdFtdID0gW107XHJcblxyXG4gICAgcHJvdGVjdGVkIF9icmVha0xpbmVzKHJlZldpZHRoOiBudW1iZXIsIHJlZkhlaWdodDogbnVtYmVyLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IG9iamVjdFtdIHtcclxuICAgICAgICB0aGlzLl9saW5lc1RlbXAubGVuZ3RoID0gMDtcclxuICAgICAgICBjb25zdCBfbGluZXMgPSB0aGlzLl90ZXh0V3JhcHBpbmcgPT09IFRleHRXcmFwcGluZy5IVE1MID8gdGhpcy5fcGFyc2VIVE1MVGV4dChyZWZXaWR0aCwgcmVmSGVpZ2h0LCBjb250ZXh0KSA6IHRoaXMudGV4dC5zcGxpdChcIlxcblwiKTtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLl90ZXh0V3JhcHBpbmcpIHtcclxuICAgICAgICAgICAgY2FzZSBUZXh0V3JhcHBpbmcuV29yZFdyYXA6XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IF9saW5lIG9mIF9saW5lcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVzVGVtcC5wdXNoKC4uLnRoaXMuX3BhcnNlTGluZVdvcmRXcmFwKF9saW5lLCByZWZXaWR0aCwgY29udGV4dCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVGV4dFdyYXBwaW5nLkVsbGlwc2lzOlxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBfbGluZSBvZiBfbGluZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saW5lc1RlbXAucHVzaCh0aGlzLl9wYXJzZUxpbmVFbGxpcHNpcyhfbGluZSwgcmVmV2lkdGgsIGNvbnRleHQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFRleHRXcmFwcGluZy5Xb3JkV3JhcEVsbGlwc2lzOlxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBfbGluZSBvZiBfbGluZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saW5lc1RlbXAucHVzaCguLi50aGlzLl9wYXJzZUxpbmVXb3JkV3JhcEVsbGlwc2lzKF9saW5lLCByZWZXaWR0aCwgcmVmSGVpZ2h0LCBjb250ZXh0KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBUZXh0V3JhcHBpbmcuSFRNTDpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgX2xpbmUgb2YgX2xpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGluZXNUZW1wLnB1c2godGhpcy5fcGFyc2VMaW5lKF9saW5lLCBjb250ZXh0KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lc1RlbXA7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaHRtbEVsZW1lbnQ6IE51bGxhYmxlPEhUTUxFbGVtZW50PiA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIF9wYXJzZUhUTUxUZXh0KHJlZldpZHRoOiBudW1iZXIsIHJlZkhlaWdodDogbnVtYmVyLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IHN0cmluZ1tdIHtcclxuICAgICAgICBjb25zdCBsaW5lcyA9IFtdIGFzIHN0cmluZ1tdO1xyXG4gICAgICAgIGlmICghdGhpcy5faHRtbEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5faHRtbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2h0bWxFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaHRtbEVsZW1lbnQgPSB0aGlzLl9odG1sRWxlbWVudDtcclxuICAgICAgICBodG1sRWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMudGV4dDtcclxuICAgICAgICBodG1sRWxlbWVudC5zdHlsZS5mb250ID0gY29udGV4dC5mb250O1xyXG4gICAgICAgIGh0bWxFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgIGh0bWxFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgIGh0bWxFbGVtZW50LnN0eWxlLnRvcCA9IFwiLTEwMDBweFwiO1xyXG4gICAgICAgIGh0bWxFbGVtZW50LnN0eWxlLmxlZnQgPSBcIi0xMDAwcHhcIjtcclxuICAgICAgICB0aGlzLmFkanVzdFdvcmRXcmFwcGluZ0hUTUxFbGVtZW50Py4oaHRtbEVsZW1lbnQpO1xyXG4gICAgICAgIGh0bWxFbGVtZW50LnN0eWxlLndpZHRoID0gcmVmV2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgaHRtbEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gcmVmSGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gaHRtbEVsZW1lbnQudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgaWYgKCF0ZXh0Q29udGVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGluZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGdldCB0aGUgdGV4dCBub2RlXHJcbiAgICAgICAgY29uc3QgdGV4dE5vZGUgPSBodG1sRWxlbWVudC5jaGlsZE5vZGVzWzBdO1xyXG4gICAgICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcclxuICAgICAgICBsZXQgaWR4ID0gMDtcclxuICAgICAgICBmb3IgKGNvbnN0IGMgb2YgdGV4dENvbnRlbnQpIHtcclxuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodGV4dE5vZGUsIDApO1xyXG4gICAgICAgICAgICByYW5nZS5zZXRFbmQodGV4dE5vZGUsIGlkeCArIDEpO1xyXG4gICAgICAgICAgICAvLyBcInNlbGVjdFwiIHRleHQgZnJvbSBiZWdpbm5pbmcgdG8gdGhpcyBwb3NpdGlvbiB0byBkZXRlcm1pbmUgdGhlIGxpbmVcclxuICAgICAgICAgICAgY29uc3QgbGluZUluZGV4ID0gcmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBsaW5lc1tsaW5lSW5kZXhdID0gKGxpbmVzW2xpbmVJbmRleF0gfHwgXCJcIikgKyBjO1xyXG4gICAgICAgICAgICBpZHgrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5yZXVzZUhUTUxGb3JXb3JkV3JhcHBpbmcpIHtcclxuICAgICAgICAgICAgaHRtbEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2h0bWxFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsaW5lcztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3BhcnNlTGluZShsaW5lOiBzdHJpbmcgPSBcIlwiLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IG9iamVjdCB7XHJcbiAgICAgICAgcmV0dXJuIHsgdGV4dDogbGluZSwgd2lkdGg6IHRoaXMuX2dldFRleHRNZXRyaWNzV2lkdGgoY29udGV4dC5tZWFzdXJlVGV4dChsaW5lKSkgfTtcclxuICAgIH1cclxuXHJcbiAgICAvL0NhbGN1bGF0ZSBob3cgbWFueSBjaGFyYWN0ZXJzIGFwcHJveGltYXRlbHkgd2UgbmVlZCB0byByZW1vdmVcclxuICAgIHByaXZhdGUgX2dldENoYXJzVG9SZW1vdmUobGluZVdpZHRoOiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGxpbmVMZW5ndGg6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IGRpZmYgPSBsaW5lV2lkdGggPiB3aWR0aCA/IGxpbmVXaWR0aCAtIHdpZHRoIDogMDtcclxuICAgICAgICAvLyBUaGlzIGlzbid0IGV4YWN0IHVubGVzcyB0aGUgZm9udCBpcyBtb25vc3BhY2VkXHJcbiAgICAgICAgY29uc3QgY2hhcldpZHRoID0gbGluZVdpZHRoIC8gbGluZUxlbmd0aDtcclxuICAgICAgICBjb25zdCByZW1vdmVDaGFycyA9IE1hdGgubWF4KE1hdGguZmxvb3IoZGlmZiAvIGNoYXJXaWR0aCksIDEpO1xyXG4gICAgICAgIHJldHVybiByZW1vdmVDaGFycztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3BhcnNlTGluZUVsbGlwc2lzKGxpbmU6IHN0cmluZyA9IFwiXCIsIHdpZHRoOiBudW1iZXIsIGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogb2JqZWN0IHtcclxuICAgICAgICBsZXQgbGluZVdpZHRoID0gdGhpcy5fZ2V0VGV4dE1ldHJpY3NXaWR0aChjb250ZXh0Lm1lYXN1cmVUZXh0KGxpbmUpKTtcclxuXHJcbiAgICAgICAgbGV0IHJlbW92ZUNoYXJzID0gdGhpcy5fZ2V0Q2hhcnNUb1JlbW92ZShsaW5lV2lkdGgsIHdpZHRoLCBsaW5lLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIC8vIHVuaWNvZGUgc3VwcG9ydC4gc3BsaXQoJycpIGRvZXMgbm90IHdvcmsgd2l0aCB1bmljb2RlIVxyXG4gICAgICAgIC8vIG1ha2Ugc3VyZSBBcnJheS5mcm9tIGlzIGF2YWlsYWJsZVxyXG4gICAgICAgIGNvbnN0IGNoYXJhY3RlcnMgPSBBcnJheS5mcm9tICYmIEFycmF5LmZyb20obGluZSk7XHJcbiAgICAgICAgaWYgKCFjaGFyYWN0ZXJzKSB7XHJcbiAgICAgICAgICAgIC8vIG5vIGFycmF5LmZyb20sIHVzZSB0aGUgb2xkIG1ldGhvZFxyXG4gICAgICAgICAgICB3aGlsZSAobGluZS5sZW5ndGggPiAyICYmIGxpbmVXaWR0aCA+IHdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gbGluZS5zbGljZSgwLCAtcmVtb3ZlQ2hhcnMpO1xyXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoID0gdGhpcy5fZ2V0VGV4dE1ldHJpY3NXaWR0aChjb250ZXh0Lm1lYXN1cmVUZXh0KGxpbmUgKyBcIuKAplwiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2hhcnMgPSB0aGlzLl9nZXRDaGFyc1RvUmVtb3ZlKGxpbmVXaWR0aCwgd2lkdGgsIGxpbmUubGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBBZGQgb24gdGhlIGVuZFxyXG4gICAgICAgICAgICBsaW5lICs9IFwi4oCmXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2hpbGUgKGNoYXJhY3RlcnMubGVuZ3RoICYmIGxpbmVXaWR0aCA+IHdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJzLnNwbGljZShjaGFyYWN0ZXJzLmxlbmd0aCAtIHJlbW92ZUNoYXJzLCByZW1vdmVDaGFycyk7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gYCR7Y2hhcmFjdGVycy5qb2luKFwiXCIpfeKApmA7XHJcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGggPSB0aGlzLl9nZXRUZXh0TWV0cmljc1dpZHRoKGNvbnRleHQubWVhc3VyZVRleHQobGluZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlbW92ZUNoYXJzID0gdGhpcy5fZ2V0Q2hhcnNUb1JlbW92ZShsaW5lV2lkdGgsIHdpZHRoLCBsaW5lLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7IHRleHQ6IGxpbmUsIHdpZHRoOiBsaW5lV2lkdGggfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9nZXRUZXh0TWV0cmljc1dpZHRoKHRleHRNZXRyaWNzOiBJVGV4dE1ldHJpY3MpIHtcclxuICAgICAgICBpZiAodGV4dE1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hMZWZ0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHRleHRNZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94TGVmdCkgKyBNYXRoLmFicyh0ZXh0TWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveFJpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRleHRNZXRyaWNzLndpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfcGFyc2VMaW5lV29yZFdyYXAobGluZTogc3RyaW5nID0gXCJcIiwgd2lkdGg6IG51bWJlciwgY29udGV4dDogSUNhbnZhc1JlbmRlcmluZ0NvbnRleHQpOiBvYmplY3RbXSB7XHJcbiAgICAgICAgY29uc3QgbGluZXMgPSBbXTtcclxuICAgICAgICBjb25zdCB3b3JkcyA9IHRoaXMud29yZFNwbGl0dGluZ0Z1bmN0aW9uID8gdGhpcy53b3JkU3BsaXR0aW5nRnVuY3Rpb24obGluZSkgOiBsaW5lLnNwbGl0KHRoaXMuX3dvcmREaXZpZGVyKTtcclxuICAgICAgICBsZXQgbGluZVdpZHRoID0gdGhpcy5fZ2V0VGV4dE1ldHJpY3NXaWR0aChjb250ZXh0Lm1lYXN1cmVUZXh0KGxpbmUpKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB3b3Jkcy5sZW5ndGg7IG4rKykge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0TGluZSA9IG4gPiAwID8gbGluZSArIHRoaXMuX3dvcmREaXZpZGVyICsgd29yZHNbbl0gOiB3b3Jkc1swXTtcclxuICAgICAgICAgICAgY29uc3QgdGVzdFdpZHRoID0gdGhpcy5fZ2V0VGV4dE1ldHJpY3NXaWR0aChjb250ZXh0Lm1lYXN1cmVUZXh0KHRlc3RMaW5lKSk7XHJcbiAgICAgICAgICAgIGlmICh0ZXN0V2lkdGggPiB3aWR0aCAmJiBuID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCh7IHRleHQ6IGxpbmUsIHdpZHRoOiBsaW5lV2lkdGggfSk7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gd29yZHNbbl07XHJcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGggPSB0aGlzLl9nZXRUZXh0TWV0cmljc1dpZHRoKGNvbnRleHQubWVhc3VyZVRleHQobGluZSkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoID0gdGVzdFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgbGluZSA9IHRlc3RMaW5lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpbmVzLnB1c2goeyB0ZXh0OiBsaW5lLCB3aWR0aDogbGluZVdpZHRoIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbGluZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9wYXJzZUxpbmVXb3JkV3JhcEVsbGlwc2lzKGxpbmU6IHN0cmluZyA9IFwiXCIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjb250ZXh0OiBJQ2FudmFzUmVuZGVyaW5nQ29udGV4dCk6IG9iamVjdFtdIHtcclxuICAgICAgICBjb25zdCBsaW5lcyA9IHRoaXMuX3BhcnNlTGluZVdvcmRXcmFwKGxpbmUsIHdpZHRoLCBjb250ZXh0KTtcclxuICAgICAgICBmb3IgKGxldCBuID0gMTsgbiA8PSBsaW5lcy5sZW5ndGg7IG4rKykge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gdGhpcy5fY29tcHV0ZUhlaWdodEZvckxpbmVzT2Yobik7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50SGVpZ2h0ID4gaGVpZ2h0ICYmIG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0TGluZSA9IGxpbmVzW24gLSAyXSBhcyB7IHRleHQ6IHN0cmluZzsgd2lkdGg6IG51bWJlciB9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudExpbmUgPSBsaW5lc1tuIC0gMV0gYXMgeyB0ZXh0OiBzdHJpbmc7IHdpZHRoOiBudW1iZXIgfTtcclxuICAgICAgICAgICAgICAgIGxpbmVzW24gLSAyXSA9IHRoaXMuX3BhcnNlTGluZUVsbGlwc2lzKGxhc3RMaW5lLnRleHQgKyB0aGlzLl93b3JkRGl2aWRlciArIGN1cnJlbnRMaW5lLnRleHQsIHdpZHRoLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzVG9SZW1vdmUgPSBsaW5lcy5sZW5ndGggLSBuICsgMTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXNUb1JlbW92ZTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZXMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsaW5lcztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3JlbmRlckxpbmVzKGNvbnRleHQ6IElDYW52YXNSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9mb250T2Zmc2V0IHx8ICF0aGlzLl9saW5lcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLmhlaWdodDtcclxuICAgICAgICBsZXQgcm9vdFkgPSAwO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5fdGV4dFZlcnRpY2FsQWxpZ25tZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbC5WRVJUSUNBTF9BTElHTk1FTlRfVE9QOlxyXG4gICAgICAgICAgICAgICAgcm9vdFkgPSB0aGlzLl9mb250T2Zmc2V0LmFzY2VudDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2wuVkVSVElDQUxfQUxJR05NRU5UX0JPVFRPTTpcclxuICAgICAgICAgICAgICAgIHJvb3RZID0gaGVpZ2h0IC0gdGhpcy5fZm9udE9mZnNldC5oZWlnaHQgKiAodGhpcy5fbGluZXMubGVuZ3RoIC0gMSkgLSB0aGlzLl9mb250T2Zmc2V0LmRlc2NlbnQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sLlZFUlRJQ0FMX0FMSUdOTUVOVF9DRU5URVI6XHJcbiAgICAgICAgICAgICAgICByb290WSA9IHRoaXMuX2ZvbnRPZmZzZXQuYXNjZW50ICsgKGhlaWdodCAtIHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0ICogdGhpcy5fbGluZXMubGVuZ3RoKSAvIDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJvb3RZICs9IHRoaXMuX2N1cnJlbnRNZWFzdXJlLnRvcDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5fbGluZXNbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAoaSAhPT0gMCAmJiB0aGlzLl9saW5lU3BhY2luZy5pbnRlcm5hbFZhbHVlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGluZVNwYWNpbmcuaXNQaXhlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RZICs9IHRoaXMuX2xpbmVTcGFjaW5nLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByb290WSA9IHJvb3RZICsgdGhpcy5fbGluZVNwYWNpbmcuZ2V0VmFsdWUodGhpcy5faG9zdCkgKiB0aGlzLl9oZWlnaHQuZ2V0VmFsdWVJblBpeGVsKHRoaXMuX2hvc3QsIHRoaXMuX2NhY2hlZFBhcmVudE1lYXN1cmUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fZHJhd1RleHQobGluZS50ZXh0LCBsaW5lLndpZHRoLCByb290WSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIHJvb3RZICs9IHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jb21wdXRlSGVpZ2h0Rm9yTGluZXNPZihsaW5lQ291bnQ6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IG5ld0hlaWdodCA9IHRoaXMuX3BhZGRpbmdUb3BJblBpeGVscyArIHRoaXMuX3BhZGRpbmdCb3R0b21JblBpeGVscyArIHRoaXMuX2ZvbnRPZmZzZXQuaGVpZ2h0ICogbGluZUNvdW50O1xyXG5cclxuICAgICAgICBpZiAobGluZUNvdW50ID4gMCAmJiB0aGlzLl9saW5lU3BhY2luZy5pbnRlcm5hbFZhbHVlICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCBsaW5lU3BhY2luZyA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9saW5lU3BhY2luZy5pc1BpeGVsKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lU3BhY2luZyA9IHRoaXMuX2xpbmVTcGFjaW5nLmdldFZhbHVlKHRoaXMuX2hvc3QpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGluZVNwYWNpbmcgPSB0aGlzLl9saW5lU3BhY2luZy5nZXRWYWx1ZSh0aGlzLl9ob3N0KSAqIHRoaXMuX2hlaWdodC5nZXRWYWx1ZUluUGl4ZWwodGhpcy5faG9zdCwgdGhpcy5fY2FjaGVkUGFyZW50TWVhc3VyZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuZXdIZWlnaHQgKz0gKGxpbmVDb3VudCAtIDEpICogbGluZVNwYWNpbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBpc0RpbWVuc2lvbkZ1bGx5RGVmaW5lZChkaW06IFwid2lkdGhcIiB8IFwiaGVpZ2h0XCIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5yZXNpemVUb0ZpdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmlzRGltZW5zaW9uRnVsbHlEZWZpbmVkKGRpbSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIHdpZHRoIGNvbnN0cmFpbnQgYXBwbGllZCBvbiB0aGUgdGV4dCBibG9jaywgZmluZCB0aGUgZXhwZWN0ZWQgaGVpZ2h0XHJcbiAgICAgKiBAcmV0dXJucyBleHBlY3RlZCBoZWlnaHRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbXB1dGVFeHBlY3RlZEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLnRleHQgJiYgdGhpcy53aWR0aEluUGl4ZWxzKSB7XHJcbiAgICAgICAgICAgIC8vIFNob3VsZCBhYnN0cmFjdCBwbGF0Zm9ybSBpbnN0ZWFkIG9mIHVzaW5nIExhc3RDcmVhdGVkRW5naW5lXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBFbmdpbmVTdG9yZS5MYXN0Q3JlYXRlZEVuZ2luZT8uY3JlYXRlQ2FudmFzKDAsIDApLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FwcGx5U3RhdGVzKGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9mb250T2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9udE9mZnNldCA9IENvbnRyb2wuX0dldEZvbnRPZmZzZXQoY29udGV4dC5mb250LCB0aGlzLl9ob3N0LmdldFNjZW5lKCk/LmdldEVuZ2luZSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gdGhpcy5fbGluZXNcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX2xpbmVzXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9icmVha0xpbmVzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2lkdGhJblBpeGVscyAtIHRoaXMuX3BhZGRpbmdMZWZ0SW5QaXhlbHMgLSB0aGlzLl9wYWRkaW5nUmlnaHRJblBpeGVscyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlaWdodEluUGl4ZWxzIC0gdGhpcy5fcGFkZGluZ1RvcEluUGl4ZWxzIC0gdGhpcy5fcGFkZGluZ0JvdHRvbUluUGl4ZWxzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29tcHV0ZUhlaWdodEZvckxpbmVzT2YobGluZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuXHJcbiAgICAgICAgdGhpcy5vblRleHRDaGFuZ2VkT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuX2h0bWxFbGVtZW50Py5yZW1vdmUoKTtcclxuICAgICAgICB0aGlzLl9odG1sRWxlbWVudCA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLlRleHRCbG9ja1wiLCBUZXh0QmxvY2spO1xyXG4iLCIvKiogQGludGVybmFsICovXHJcbmV4cG9ydCBjbGFzcyBUZXh0V3JhcHBlciB7XHJcbiAgICBwcml2YXRlIF90ZXh0OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9jaGFyYWN0ZXJzOiBzdHJpbmdbXSB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hhcmFjdGVycyA/IHRoaXMuX2NoYXJhY3RlcnMuam9pbihcIlwiKSA6IHRoaXMuX3RleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB0ZXh0KHR4dDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fdGV4dCA9IHR4dDtcclxuICAgICAgICB0aGlzLl9jaGFyYWN0ZXJzID0gQXJyYXkuZnJvbSAmJiBBcnJheS5mcm9tKHR4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hhcmFjdGVycyA/IHRoaXMuX2NoYXJhY3RlcnMubGVuZ3RoIDogdGhpcy5fdGV4dC5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZVBhcnQoaWR4U3RhcnQ6IG51bWJlciwgaWR4RW5kOiBudW1iZXIsIGluc2VydFR4dD86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RleHQgPSB0aGlzLl90ZXh0LnNsaWNlKDAsIGlkeFN0YXJ0KSArIChpbnNlcnRUeHQgPyBpbnNlcnRUeHQgOiBcIlwiKSArIHRoaXMuX3RleHQuc2xpY2UoaWR4RW5kKTtcclxuICAgICAgICBpZiAodGhpcy5fY2hhcmFjdGVycykge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdDaGFyYWN0ZXJzID0gaW5zZXJ0VHh0ID8gQXJyYXkuZnJvbShpbnNlcnRUeHQpIDogW107XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYXJhY3RlcnMuc3BsaWNlKGlkeFN0YXJ0LCBpZHhFbmQgLSBpZHhTdGFydCwgLi4ubmV3Q2hhcmFjdGVycyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGFyQXQoaWR4OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFyYWN0ZXJzID8gdGhpcy5fY2hhcmFjdGVyc1tpZHhdIDogdGhpcy5fdGV4dC5jaGFyQXQoaWR4KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3Vic3RyKGZyb206IG51bWJlciwgbGVuZ3RoPzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy5fY2hhcmFjdGVycykge1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4oZnJvbSkpIHtcclxuICAgICAgICAgICAgICAgIGZyb20gPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyb20gPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgZnJvbSA9IE1hdGgubWluKGZyb20sIHRoaXMuX2NoYXJhY3RlcnMubGVuZ3RoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZyb20gPSB0aGlzLl9jaGFyYWN0ZXJzLmxlbmd0aCArIE1hdGgubWF4KGZyb20sIC10aGlzLl9jaGFyYWN0ZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBsZW5ndGggPSB0aGlzLl9jaGFyYWN0ZXJzLmxlbmd0aCAtIGZyb207XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYU4obGVuZ3RoKSkge1xyXG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsZW5ndGggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBbXTtcclxuICAgICAgICAgICAgd2hpbGUgKC0tbGVuZ3RoID49IDApIHtcclxuICAgICAgICAgICAgICAgIHRlbXBbbGVuZ3RoXSA9IHRoaXMuX2NoYXJhY3RlcnNbZnJvbSArIGxlbmd0aF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRlbXAuam9pbihcIlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl90ZXh0LnN1YnN0cihmcm9tLCBsZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdWJzdHJpbmcoZnJvbTogbnVtYmVyLCB0bz86IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NoYXJhY3RlcnMpIHtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKGZyb20pKSB7XHJcbiAgICAgICAgICAgICAgICBmcm9tID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmcm9tID4gdGhpcy5fY2hhcmFjdGVycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGZyb20gPSB0aGlzLl9jaGFyYWN0ZXJzLmxlbmd0aDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmcm9tIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgZnJvbSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRvID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRvID0gdGhpcy5fY2hhcmFjdGVycy5sZW5ndGg7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYU4odG8pKSB7XHJcbiAgICAgICAgICAgICAgICB0byA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG8gPiB0aGlzLl9jaGFyYWN0ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdG8gPSB0aGlzLl9jaGFyYWN0ZXJzLmxlbmd0aDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0byA8IDApIHtcclxuICAgICAgICAgICAgICAgIHRvID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gW107XHJcbiAgICAgICAgICAgIGxldCBpZHggPSAwO1xyXG4gICAgICAgICAgICB3aGlsZSAoZnJvbSA8IHRvKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wW2lkeCsrXSA9IHRoaXMuX2NoYXJhY3RlcnNbZnJvbSsrXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGVtcC5qb2luKFwiXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQuc3Vic3RyaW5nKGZyb20sIHRvKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNXb3JkKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCByV29yZCA9IC9cXHcvZztcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hhcmFjdGVycyA/IHRoaXMuX2NoYXJhY3RlcnNbaW5kZXhdLnNlYXJjaChyV29yZCkgIT09IC0xIDogdGhpcy5fdGV4dC5zZWFyY2gocldvcmQpICE9PSAtMTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgdHlwZSB7IFZlY3RvcjIgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5cclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4vcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB0eXBlIHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgUmVnaXN0ZXJDbGFzcyB9IGZyb20gXCJjb3JlL01pc2MvdHlwZVN0b3JlXCI7XHJcbmltcG9ydCB0eXBlIHsgUG9pbnRlckluZm9CYXNlIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSB0b2dnbGUgYnV0dG9uc1xyXG4gKiBAc2luY2UgNS4wLjBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUb2dnbGVCdXR0b24gZXh0ZW5kcyBSZWN0YW5nbGUge1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gZ2VuZXJhdGUgdGhlIHRvQWN0aXZlIGFuaW1hdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdG9BY3RpdmVBbmltYXRpb246ICgpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gZ2VuZXJhdGUgdGhlIHRvSW5hY3RpdmUgYW5pbWF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0b0luYWN0aXZlQW5pbWF0aW9uOiAoKSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gY2FsbGVkIHRvIGdlbmVyYXRlIGEgcG9pbnRlciBlbnRlciBhbmltYXRpb24gd2hlbiB0aGUgdG9nZ2xlIGJ1dHRvbiBpcyBhY3RpdmUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwb2ludGVyRW50ZXJBY3RpdmVBbmltYXRpb246ICgpID0+IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIGNhbGxlZCB0byBnZW5lcmF0ZSBhIHBvaW50ZXIgb3V0IGFuaW1hdGlvbiB3aGVuIHRoZSB0b2dnbGUgYnV0dG9uIGlzIGFjdGl2ZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHBvaW50ZXJPdXRBY3RpdmVBbmltYXRpb246ICgpID0+IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIGNhbGxlZCB0byBnZW5lcmF0ZSBhIHBvaW50ZXIgZG93biBhbmltYXRpb24gd2hlbiB0aGUgdG9nZ2xlIGJ1dHRvbiBpcyBhY3RpdmUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwb2ludGVyRG93bkFjdGl2ZUFuaW1hdGlvbjogKCkgPT4gdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogRnVuY3Rpb24gY2FsbGVkIHRvIGdlbmVyYXRlIGEgcG9pbnRlciB1cCBhbmltYXRpb24gd2hlbiB0aGUgdG9nZ2xlIGJ1dHRvbiBpcyBhY3RpdmUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwb2ludGVyVXBBY3RpdmVBbmltYXRpb246ICgpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gZ2VuZXJhdGUgYSBwb2ludGVyIGVudGVyIGFuaW1hdGlvbiB3aGVuIHRoZSB0b2dnbGUgYnV0dG9uIGlzIGluYWN0aXZlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcG9pbnRlckVudGVySW5hY3RpdmVBbmltYXRpb246ICgpID0+IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIGNhbGxlZCB0byBnZW5lcmF0ZSBhIHBvaW50ZXIgb3V0IGFuaW1hdGlvbiB3aGVuIHRoZSB0b2dnbGUgYnV0dG9uIGlzIGluYWN0aXZlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcG9pbnRlck91dEluYWN0aXZlQW5pbWF0aW9uOiAoKSA9PiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gZ2VuZXJhdGUgYSBwb2ludGVyIGRvd24gYW5pbWF0aW9uIHdoZW4gdGhlIHRvZ2dsZSBidXR0b24gaXMgaW5hY3RpdmUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwb2ludGVyRG93bkluYWN0aXZlQW5pbWF0aW9uOiAoKSA9PiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gZ2VuZXJhdGUgYSBwb2ludGVyIHVwIGFuaW1hdGlvbiB3aGVuIHRoZSB0b2dnbGUgYnV0dG9uIGlzIGluYWN0aXZlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcG9pbnRlclVwSW5hY3RpdmVBbmltYXRpb246ICgpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqIE9ic2VydmFibGUgcmFpc2VkIHdoZW4gaXNBY3RpdmUgaXMgY2hhbmdlZCAqL1xyXG4gICAgcHVibGljIG9uSXNBY3RpdmVDaGFuZ2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPGJvb2xlYW4+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBib29sZWFuIGluZGljYXRpbmcgdGhhdCB0aGUgdG9nZ2xlIGJ1dHRvbiB3aWxsIGxldCBpbnRlcm5hbCBjb250cm9scyBoYW5kbGUgcGlja2luZyBpbnN0ZWFkIG9mIGRvaW5nIGl0IGRpcmVjdGx5IHVzaW5nIGl0cyBib3VuZGluZyBpbmZvXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkZWxlZ2F0ZVBpY2tpbmdUb0NoaWxkcmVuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBfZ3JvdXA6IHN0cmluZztcclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZ3JvdXAgbmFtZSB0aGlzIHRvZ2dsZSBidXR0b24gYmVsb25ncyB0byAqL1xyXG4gICAgcHVibGljIGdldCBncm91cCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ncm91cDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgZ3JvdXAodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91cCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZ3JvdXAgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgdG9nZ2xlIGJ1dHRvbiBpcyBhY3RpdmUgb3Igbm90ICovXHJcbiAgICBwdWJsaWMgZ2V0IGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0FjdGl2ZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgaXNBY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICAvLyBGdW5jdGlvbiBtb2RlbGVkIGFmdGVyIHJhZGlvQnV0dG9uLnRzXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQWN0aXZlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHZpc3VhbCBzdGF0ZSBiYXNlZCBvbiB0aGUgbmV3IHZhbHVlXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9BY3RpdmVBbmltYXRpb24/LigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9JbmFjdGl2ZUFuaW1hdGlvbj8uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9tYXJrQXNEaXJ0eSgpO1xyXG5cclxuICAgICAgICB0aGlzLm9uSXNBY3RpdmVDaGFuZ2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModmFsdWUpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNBY3RpdmUgJiYgdGhpcy5faG9zdCAmJiB0aGlzLl9ncm91cCkge1xyXG4gICAgICAgICAgICAvLyBBIHRvZ2dsZSBidXR0b24gaW4gYSBncm91cCBjYW4gb25seSBoYXZlIDEgYWN0aXZlIGVsZW1lbnQgYXQgYSBnaXZlbiB0aW1lLlxyXG4gICAgICAgICAgICAvLyBJZiB0aGlzIHRvZ2dsZSBidXR0b24gaGFzIGEgZ3JvdXAsIHNldCBvdGhlciB0b2dnbGUgYnV0dG9ucyBpbiB0aGUgZ3JvdXAgdG8gaW5hY3RpdmUuXHJcbiAgICAgICAgICAgIHRoaXMuX2hvc3QuZXhlY3V0ZU9uQWxsQ29udHJvbHMoKGNvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBjb250cm9sIHR5cGUgVG9nZ2xlQnV0dG9uXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbC50eXBlTmFtZSA9PT0gXCJUb2dnbGVCdXR0b25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIHRvIHRoaXMgdG9nZ2xlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkVG9nZ2xlID0gPFRvZ2dsZUJ1dHRvbj5jb250cm9sO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRvZ2dsZSBidXR0b24gaXMgaW4gc2FtZSBncm91cCwgc2V0IGlzQWN0aXZlIHRvIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkVG9nZ2xlLmdyb3VwID09PSB0aGlzLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkVG9nZ2xlLmlzQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRvZ2dsZUJ1dHRvblxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKiBAcGFyYW0gZ3JvdXAgZGVmaW5lcyB0aGUgdG9nZ2xlIGdyb3VwIHRoaXMgdG9nZ2xlIGJlbG9uZ3MgdG9cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIG5hbWU/OiBzdHJpbmcsXHJcbiAgICAgICAgZ3JvdXA/OiBzdHJpbmdcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cCA/PyBcIlwiO1xyXG5cclxuICAgICAgICB0aGlzLnRoaWNrbmVzcyA9IDA7XHJcbiAgICAgICAgdGhpcy5pc1BvaW50ZXJCbG9ja2VyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IGFscGhhU3RvcmU6IE51bGxhYmxlPG51bWJlcj4gPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLnRvQWN0aXZlQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRoaWNrbmVzcyA9IDE7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnRvSW5hY3RpdmVBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudGhpY2tuZXNzID0gMDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJFbnRlckFjdGl2ZUFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgYWxwaGFTdG9yZSA9IHRoaXMuYWxwaGE7XHJcbiAgICAgICAgICAgIHRoaXMuYWxwaGEgLT0gMC4xO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlck91dEFjdGl2ZUFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGFscGhhU3RvcmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWxwaGEgPSBhbHBoYVN0b3JlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wb2ludGVyRG93bkFjdGl2ZUFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVggLT0gMC4wNTtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVkgLT0gMC4wNTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJVcEFjdGl2ZUFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVggKz0gMC4wNTtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVkgKz0gMC4wNTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJFbnRlckluYWN0aXZlQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBhbHBoYVN0b3JlID0gdGhpcy5hbHBoYTtcclxuICAgICAgICAgICAgdGhpcy5hbHBoYSAtPSAwLjE7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wb2ludGVyT3V0SW5hY3RpdmVBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhbHBoYVN0b3JlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFscGhhID0gYWxwaGFTdG9yZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlckRvd25JbmFjdGl2ZUFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVggLT0gMC4wNTtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVkgLT0gMC4wNTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJVcEluYWN0aXZlQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlWCArPSAwLjA1O1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlWSArPSAwLjA1O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIlRvZ2dsZUJ1dHRvblwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFdoaWxlIGJlaW5nIGEgY29udGFpbmVyLCB0aGUgdG9nZ2xlIGJ1dHRvbiBiZWhhdmVzIGxpa2UgYSBjb250cm9sLlxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9wcm9jZXNzUGlja2luZyh4OiBudW1iZXIsIHk6IG51bWJlciwgcGk6IFBvaW50ZXJJbmZvQmFzZSwgdHlwZTogbnVtYmVyLCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgZGVsdGFYPzogbnVtYmVyLCBkZWx0YVk/OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCB8fCAhdGhpcy5pc0hpdFRlc3RWaXNpYmxlIHx8ICF0aGlzLmlzVmlzaWJsZSB8fCB0aGlzLm5vdFJlbmRlcmFibGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdXBlci5jb250YWlucyh4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5kZWxlZ2F0ZVBpY2tpbmdUb0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250YWlucyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IHRoaXMuX2NoaWxkcmVuLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5fY2hpbGRyZW5baW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmlzRW5hYmxlZCAmJiBjaGlsZC5pc0hpdFRlc3RWaXNpYmxlICYmIGNoaWxkLmlzVmlzaWJsZSAmJiAhY2hpbGQubm90UmVuZGVyYWJsZSAmJiBjaGlsZC5jb250YWlucyh4LCB5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFjb250YWlucykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9wcm9jZXNzT2JzZXJ2YWJsZXModHlwZSwgeCwgeSwgcGksIHBvaW50ZXJJZCwgYnV0dG9uSW5kZXgsIGRlbHRhWCwgZGVsdGFZKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJFbnRlcih0YXJnZXQ6IENvbnRyb2wsIHBpOiBQb2ludGVySW5mb0Jhc2UpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXN1cGVyLl9vblBvaW50ZXJFbnRlcih0YXJnZXQsIHBpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJFbnRlckFjdGl2ZUFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRW50ZXJBY3RpdmVBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBvaW50ZXJFbnRlckluYWN0aXZlQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJFbnRlckluYWN0aXZlQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfb25Qb2ludGVyT3V0KHRhcmdldDogQ29udHJvbCwgcGk6IFBvaW50ZXJJbmZvQmFzZSwgZm9yY2UgPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlck91dEFjdGl2ZUFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlck91dEFjdGl2ZUFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlck91dEluYWN0aXZlQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyT3V0SW5hY3RpdmVBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIuX29uUG9pbnRlck91dCh0YXJnZXQsIHBpLCBmb3JjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9vblBvaW50ZXJEb3duKHRhcmdldDogQ29udHJvbCwgY29vcmRpbmF0ZXM6IFZlY3RvcjIsIHBvaW50ZXJJZDogbnVtYmVyLCBidXR0b25JbmRleDogbnVtYmVyLCBwaTogUG9pbnRlckluZm9CYXNlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdXBlci5fb25Qb2ludGVyRG93bih0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBwaSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZWFkT25seSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkFjdGl2ZUFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkFjdGl2ZUFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlckRvd25JbmFjdGl2ZUFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyRG93bkluYWN0aXZlQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBfb25Qb2ludGVyVXAodGFyZ2V0OiBDb250cm9sLCBjb29yZGluYXRlczogVmVjdG9yMiwgcG9pbnRlcklkOiBudW1iZXIsIGJ1dHRvbkluZGV4OiBudW1iZXIsIG5vdGlmeUNsaWNrOiBib29sZWFuLCBwaTogUG9pbnRlckluZm9CYXNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVhZE9ubHkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wb2ludGVyVXBBY3RpdmVBbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJVcEFjdGl2ZUFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlclVwSW5hY3RpdmVBbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJVcEluYWN0aXZlQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyLl9vblBvaW50ZXJVcCh0YXJnZXQsIGNvb3JkaW5hdGVzLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCBub3RpZnlDbGljaywgcGkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuVG9nZ2xlQnV0dG9uXCIsIFRvZ2dsZUJ1dHRvbik7XHJcbiIsImltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgdHlwZSB7IE9ic2VydmVyIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuXHJcbmltcG9ydCB7IFN0YWNrUGFuZWwgfSBmcm9tIFwiLi9zdGFja1BhbmVsXCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuL2J1dHRvblwiO1xyXG5pbXBvcnQgdHlwZSB7IENvbnRhaW5lciB9IGZyb20gXCIuL2NvbnRhaW5lclwiO1xyXG5pbXBvcnQgdHlwZSB7IFRleHRCbG9jayB9IGZyb20gXCIuL3RleHRCbG9ja1wiO1xyXG5pbXBvcnQgdHlwZSB7IElucHV0VGV4dCB9IGZyb20gXCIuL2lucHV0VGV4dFwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHR5cGUgeyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIH0gZnJvbSBcIi4uL2FkdmFuY2VkRHluYW1pY1RleHR1cmVcIjtcclxuaW1wb3J0IHsgSW5wdXRUZXh0QXJlYSB9IGZyb20gXCIuL2lucHV0VGV4dEFyZWFcIjtcclxuaW1wb3J0IHR5cGUgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gc3RvcmUga2V5IGNvbnRyb2wgcHJvcGVydGllc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEtleVByb3BlcnR5U2V0IHtcclxuICAgIC8qKiBXaWR0aCAqL1xyXG4gICAgd2lkdGg/OiBzdHJpbmc7XHJcbiAgICAvKiogSGVpZ2h0ICovXHJcbiAgICBoZWlnaHQ/OiBzdHJpbmc7XHJcbiAgICAvKiogTGVmdCBwYWRkaW5nICovXHJcbiAgICBwYWRkaW5nTGVmdD86IHN0cmluZztcclxuICAgIC8qKiBSaWdodCBwYWRkaW5nICovXHJcbiAgICBwYWRkaW5nUmlnaHQ/OiBzdHJpbmc7XHJcbiAgICAvKiogVG9wIHBhZGRpbmcgKi9cclxuICAgIHBhZGRpbmdUb3A/OiBzdHJpbmc7XHJcbiAgICAvKiogQm90dG9tIHBhZGRpbmcgKi9cclxuICAgIHBhZGRpbmdCb3R0b20/OiBzdHJpbmc7XHJcbiAgICAvKiogRm9yZWdyb3VuZCBjb2xvciAqL1xyXG4gICAgY29sb3I/OiBzdHJpbmc7XHJcbiAgICAvKiogQmFja2dyb3VuZCBjb2xvciAqL1xyXG4gICAgYmFja2dyb3VuZD86IHN0cmluZztcclxufVxyXG5cclxudHlwZSBDb25uZWN0ZWRJbnB1dFRleHQgPSB7XHJcbiAgICBpbnB1dDogSW5wdXRUZXh0O1xyXG4gICAgb25Gb2N1c09ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxDb250cm9sPj47XHJcbiAgICBvbkJsdXJPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8Q29udHJvbD4+O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIHZpcnR1YWwga2V5Ym9hcmRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBWaXJ0dWFsS2V5Ym9hcmQgZXh0ZW5kcyBTdGFja1BhbmVsIHtcclxuICAgIC8qKiBPYnNlcnZhYmxlIHJhaXNlZCB3aGVuIGEga2V5IGlzIHByZXNzZWQgKi9cclxuICAgIHB1YmxpYyBvbktleVByZXNzT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPHN0cmluZz4oKTtcclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGRlZmF1bHQga2V5IGJ1dHRvbiB3aWR0aCAqL1xyXG4gICAgcHVibGljIGRlZmF1bHRCdXR0b25XaWR0aCA9IFwiNDBweFwiO1xyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBkZWZhdWx0IGtleSBidXR0b24gaGVpZ2h0ICovXHJcbiAgICBwdWJsaWMgZGVmYXVsdEJ1dHRvbkhlaWdodCA9IFwiNDBweFwiO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZGVmYXVsdCBrZXkgYnV0dG9uIGxlZnQgcGFkZGluZyAqL1xyXG4gICAgcHVibGljIGRlZmF1bHRCdXR0b25QYWRkaW5nTGVmdCA9IFwiMnB4XCI7XHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGRlZmF1bHQga2V5IGJ1dHRvbiByaWdodCBwYWRkaW5nICovXHJcbiAgICBwdWJsaWMgZGVmYXVsdEJ1dHRvblBhZGRpbmdSaWdodCA9IFwiMnB4XCI7XHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGRlZmF1bHQga2V5IGJ1dHRvbiB0b3AgcGFkZGluZyAqL1xyXG4gICAgcHVibGljIGRlZmF1bHRCdXR0b25QYWRkaW5nVG9wID0gXCIycHhcIjtcclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZGVmYXVsdCBrZXkgYnV0dG9uIGJvdHRvbSBwYWRkaW5nICovXHJcbiAgICBwdWJsaWMgZGVmYXVsdEJ1dHRvblBhZGRpbmdCb3R0b20gPSBcIjJweFwiO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZGVmYXVsdCBrZXkgYnV0dG9uIGZvcmVncm91bmQgY29sb3IgKi9cclxuICAgIHB1YmxpYyBkZWZhdWx0QnV0dG9uQ29sb3IgPSBcIiNERERcIjtcclxuICAgIC8qKiBHZXRzIG9yIHNldHMgZGVmYXVsdCBrZXkgYnV0dG9uIGJhY2tncm91bmQgY29sb3IgKi9cclxuICAgIHB1YmxpYyBkZWZhdWx0QnV0dG9uQmFja2dyb3VuZCA9IFwiIzA3MDcwN1wiO1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgc2hpZnQgYnV0dG9uIGZvcmVncm91bmQgY29sb3IgKi9cclxuICAgIHB1YmxpYyBzaGlmdEJ1dHRvbkNvbG9yID0gXCIjNzc5OUZGXCI7XHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHNoaWZ0IGJ1dHRvbiB0aGlja25lc3MqL1xyXG4gICAgcHVibGljIHNlbGVjdGVkU2hpZnRUaGlja25lc3MgPSAxO1xyXG5cclxuICAgIC8qKiBHZXRzIHNoaWZ0IGtleSBzdGF0ZSAqL1xyXG4gICAgcHVibGljIHNoaWZ0U3RhdGUgPSAwO1xyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJWaXJ0dWFsS2V5Ym9hcmRcIjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jcmVhdGVLZXkoa2V5OiBzdHJpbmcsIHByb3BlcnR5U2V0OiBOdWxsYWJsZTxLZXlQcm9wZXJ0eVNldD4pIHtcclxuICAgICAgICBjb25zdCBidXR0b24gPSBCdXR0b24uQ3JlYXRlU2ltcGxlQnV0dG9uKGtleSwga2V5KTtcclxuXHJcbiAgICAgICAgYnV0dG9uLndpZHRoID0gcHJvcGVydHlTZXQgJiYgcHJvcGVydHlTZXQud2lkdGggPyBwcm9wZXJ0eVNldC53aWR0aCA6IHRoaXMuZGVmYXVsdEJ1dHRvbldpZHRoO1xyXG4gICAgICAgIGJ1dHRvbi5oZWlnaHQgPSBwcm9wZXJ0eVNldCAmJiBwcm9wZXJ0eVNldC5oZWlnaHQgPyBwcm9wZXJ0eVNldC5oZWlnaHQgOiB0aGlzLmRlZmF1bHRCdXR0b25IZWlnaHQ7XHJcbiAgICAgICAgYnV0dG9uLmNvbG9yID0gcHJvcGVydHlTZXQgJiYgcHJvcGVydHlTZXQuY29sb3IgPyBwcm9wZXJ0eVNldC5jb2xvciA6IHRoaXMuZGVmYXVsdEJ1dHRvbkNvbG9yO1xyXG4gICAgICAgIGJ1dHRvbi5iYWNrZ3JvdW5kID0gcHJvcGVydHlTZXQgJiYgcHJvcGVydHlTZXQuYmFja2dyb3VuZCA/IHByb3BlcnR5U2V0LmJhY2tncm91bmQgOiB0aGlzLmRlZmF1bHRCdXR0b25CYWNrZ3JvdW5kO1xyXG4gICAgICAgIGJ1dHRvbi5wYWRkaW5nTGVmdCA9IHByb3BlcnR5U2V0ICYmIHByb3BlcnR5U2V0LnBhZGRpbmdMZWZ0ID8gcHJvcGVydHlTZXQucGFkZGluZ0xlZnQgOiB0aGlzLmRlZmF1bHRCdXR0b25QYWRkaW5nTGVmdDtcclxuICAgICAgICBidXR0b24ucGFkZGluZ1JpZ2h0ID0gcHJvcGVydHlTZXQgJiYgcHJvcGVydHlTZXQucGFkZGluZ1JpZ2h0ID8gcHJvcGVydHlTZXQucGFkZGluZ1JpZ2h0IDogdGhpcy5kZWZhdWx0QnV0dG9uUGFkZGluZ1JpZ2h0O1xyXG4gICAgICAgIGJ1dHRvbi5wYWRkaW5nVG9wID0gcHJvcGVydHlTZXQgJiYgcHJvcGVydHlTZXQucGFkZGluZ1RvcCA/IHByb3BlcnR5U2V0LnBhZGRpbmdUb3AgOiB0aGlzLmRlZmF1bHRCdXR0b25QYWRkaW5nVG9wO1xyXG4gICAgICAgIGJ1dHRvbi5wYWRkaW5nQm90dG9tID0gcHJvcGVydHlTZXQgJiYgcHJvcGVydHlTZXQucGFkZGluZ0JvdHRvbSA/IHByb3BlcnR5U2V0LnBhZGRpbmdCb3R0b20gOiB0aGlzLmRlZmF1bHRCdXR0b25QYWRkaW5nQm90dG9tO1xyXG5cclxuICAgICAgICBidXR0b24udGhpY2tuZXNzID0gMDtcclxuICAgICAgICBidXR0b24uaXNGb2N1c0ludmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGJ1dHRvbi5zaGFkb3dDb2xvciA9IHRoaXMuc2hhZG93Q29sb3I7XHJcbiAgICAgICAgYnV0dG9uLnNoYWRvd0JsdXIgPSB0aGlzLnNoYWRvd0JsdXI7XHJcbiAgICAgICAgYnV0dG9uLnNoYWRvd09mZnNldFggPSB0aGlzLnNoYWRvd09mZnNldFg7XHJcbiAgICAgICAgYnV0dG9uLnNoYWRvd09mZnNldFkgPSB0aGlzLnNoYWRvd09mZnNldFk7XHJcblxyXG4gICAgICAgIGJ1dHRvbi5vblBvaW50ZXJVcE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vbktleVByZXNzT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoa2V5KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJ1dHRvbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBuZXcgcm93IG9mIGtleXNcclxuICAgICAqIEBwYXJhbSBrZXlzIGRlZmluZXMgdGhlIGxpc3Qgb2Yga2V5cyB0byBhZGRcclxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eVNldHMgZGVmaW5lcyB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0eSBzZXRzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRLZXlzUm93KGtleXM6IEFycmF5PHN0cmluZz4sIHByb3BlcnR5U2V0cz86IEFycmF5PEtleVByb3BlcnR5U2V0Pik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHBhbmVsID0gbmV3IFN0YWNrUGFuZWwoKTtcclxuICAgICAgICBwYW5lbC5pc1ZlcnRpY2FsID0gZmFsc2U7XHJcbiAgICAgICAgcGFuZWwuaXNGb2N1c0ludmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGxldCBtYXhLZXk6IE51bGxhYmxlPEJ1dHRvbj4gPSBudWxsO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgcHJvcGVydGllcyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAocHJvcGVydHlTZXRzICYmIHByb3BlcnR5U2V0cy5sZW5ndGggPT09IGtleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gcHJvcGVydHlTZXRzW2ldO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9jcmVhdGVLZXkoa2V5c1tpXSwgcHJvcGVydGllcyk7XHJcbiAgICAgICAgICAgIGlmICghbWF4S2V5IHx8IGtleS5oZWlnaHRJblBpeGVscyA+IG1heEtleS5oZWlnaHRJblBpeGVscykge1xyXG4gICAgICAgICAgICAgICAgbWF4S2V5ID0ga2V5O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwYW5lbC5hZGRDb250cm9sKGtleSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYW5lbC5oZWlnaHQgPSBtYXhLZXkgPyBtYXhLZXkuaGVpZ2h0IDogdGhpcy5kZWZhdWx0QnV0dG9uSGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbnRyb2wocGFuZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBzaGlmdCBrZXkgdG8gYSBzcGVjaWZpYyBzdGF0ZVxyXG4gICAgICogQHBhcmFtIHNoaWZ0U3RhdGUgZGVmaW5lcyB0aGUgbmV3IHNoaWZ0IHN0YXRlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhcHBseVNoaWZ0U3RhdGUoc2hpZnRTdGF0ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLmNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICBpZiAoIXJvdyB8fCAhKDxDb250YWluZXI+cm93KS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJvd0NvbnRhaW5lciA9IDxDb250YWluZXI+cm93O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJvd0NvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gcm93Q29udGFpbmVyLmNoaWxkcmVuW2pdIGFzIEJ1dHRvbjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWJ1dHRvbiB8fCAhYnV0dG9uLmNoaWxkcmVuWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uX3RibG9jayA9IGJ1dHRvbi5jaGlsZHJlblswXSBhcyBUZXh0QmxvY2s7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbl90YmxvY2sudGV4dCA9PT0gXCJcXHUyMUU3XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBidXR0b24uY29sb3IgPSBzaGlmdFN0YXRlID8gdGhpcy5zaGlmdEJ1dHRvbkNvbG9yIDogdGhpcy5kZWZhdWx0QnV0dG9uQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnRoaWNrbmVzcyA9IHNoaWZ0U3RhdGUgPiAxID8gdGhpcy5zZWxlY3RlZFNoaWZ0VGhpY2tuZXNzIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBidXR0b25fdGJsb2NrLnRleHQgPSBzaGlmdFN0YXRlID4gMCA/IGJ1dHRvbl90YmxvY2sudGV4dC50b1VwcGVyQ2FzZSgpIDogYnV0dG9uX3RibG9jay50ZXh0LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0OiBOdWxsYWJsZTxJbnB1dFRleHQgfCBJbnB1dFRleHRBcmVhPiA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9jb25uZWN0ZWRJbnB1dFRleHRzOiBDb25uZWN0ZWRJbnB1dFRleHRbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfb25LZXlQcmVzc09ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxzdHJpbmc+PiA9IG51bGw7XHJcblxyXG4gICAgLyoqIEdldHMgdGhlIGlucHV0IHRleHQgY29udHJvbCBjdXJyZW50bHkgYXR0YWNoZWQgdG8gdGhlIGtleWJvYXJkICovXHJcbiAgICBwdWJsaWMgZ2V0IGNvbm5lY3RlZElucHV0VGV4dCgpOiBOdWxsYWJsZTxJbnB1dFRleHQgfCBJbnB1dFRleHRBcmVhPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRseUNvbm5lY3RlZElucHV0VGV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbm5lY3RzIHRoZSBrZXlib2FyZCB3aXRoIGFuIGlucHV0IHRleHQgY29udHJvbFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBkZWZpbmVzIHRoZSB0YXJnZXQgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29ubmVjdChpbnB1dDogSW5wdXRUZXh0KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaW5wdXRUZXh0QWxyZWFkeUNvbm5lY3RlZCA9IHRoaXMuX2Nvbm5lY3RlZElucHV0VGV4dHMuc29tZSgoYSkgPT4gYS5pbnB1dCA9PT0gaW5wdXQpO1xyXG4gICAgICAgIGlmIChpbnB1dFRleHRBbHJlYWR5Q29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vbktleVByZXNzT2JzZXJ2ZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fb25LZXlQcmVzc09ic2VydmVyID0gdGhpcy5vbktleVByZXNzT2JzZXJ2YWJsZS5hZGQoKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jdXJyZW50bHlDb25uZWN0ZWRJbnB1dFRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0Ll9ob3N0LmZvY3VzZWRDb250cm9sID0gdGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlxcdTIxRTdcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGlmdFN0YXRlKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNoaWZ0U3RhdGUgPiAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNoaWZ0U3RhdGUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlTaGlmdFN0YXRlKHRoaXMuc2hpZnRTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFx1MjE5MFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0IGluc3RhbmNlb2YgSW5wdXRUZXh0QXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0LmFsdGVybmF0aXZlUHJvY2Vzc0tleShcIkJhY2tzcGFjZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRseUNvbm5lY3RlZElucHV0VGV4dC5wcm9jZXNzS2V5KDgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFx1MjFCNVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0IGluc3RhbmNlb2YgSW5wdXRUZXh0QXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0LmFsdGVybmF0aXZlUHJvY2Vzc0tleShcIkVudGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0LnByb2Nlc3NLZXkoMTMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50bHlDb25uZWN0ZWRJbnB1dFRleHQgaW5zdGFuY2VvZiBJbnB1dFRleHRBcmVhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0LmFsdGVybmF0aXZlUHJvY2Vzc0tleShcIlwiLCB0aGlzLnNoaWZ0U3RhdGUgPyBrZXkudG9VcHBlckNhc2UoKSA6IGtleSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRseUNvbm5lY3RlZElucHV0VGV4dC5wcm9jZXNzS2V5KC0xLCB0aGlzLnNoaWZ0U3RhdGUgPyBrZXkudG9VcHBlckNhc2UoKSA6IGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hpZnRTdGF0ZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hpZnRTdGF0ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseVNoaWZ0U3RhdGUodGhpcy5zaGlmdFN0YXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRseUNvbm5lY3RlZElucHV0VGV4dCA9IGlucHV0O1xyXG4gICAgICAgIGlucHV0Ll9jb25uZWN0ZWRWaXJ0dWFsS2V5Ym9hcmQgPSB0aGlzO1xyXG5cclxuICAgICAgICAvLyBFdmVudHMgaG9va2luZ1xyXG4gICAgICAgIGNvbnN0IG9uRm9jdXNPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8Q29udHJvbD4+ID0gaW5wdXQub25Gb2N1c09ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0ID0gaW5wdXQ7XHJcbiAgICAgICAgICAgIGlucHV0Ll9jb25uZWN0ZWRWaXJ0dWFsS2V5Ym9hcmQgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG9uQmx1ck9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxDb250cm9sPj4gPSBpbnB1dC5vbkJsdXJPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlucHV0Ll9jb25uZWN0ZWRWaXJ0dWFsS2V5Ym9hcmQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50bHlDb25uZWN0ZWRJbnB1dFRleHQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jb25uZWN0ZWRJbnB1dFRleHRzLnB1c2goe1xyXG4gICAgICAgICAgICBpbnB1dCxcclxuICAgICAgICAgICAgb25CbHVyT2JzZXJ2ZXIsXHJcbiAgICAgICAgICAgIG9uRm9jdXNPYnNlcnZlcixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERpc2Nvbm5lY3RzIHRoZSBrZXlib2FyZCBmcm9tIGNvbm5lY3RlZCBJbnB1dFRleHQgY29udHJvbHNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgb3B0aW9uYWxseSBkZWZpbmVzIGEgdGFyZ2V0IGNvbnRyb2wsIG90aGVyd2lzZSBhbGwgYXJlIGRpc2Nvbm5lY3RlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGlzY29ubmVjdChpbnB1dD86IElucHV0VGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChpbnB1dCkge1xyXG4gICAgICAgICAgICAvLyAuZmluZCBub3QgYXZhaWxhYmxlIG9uIElFXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkID0gdGhpcy5fY29ubmVjdGVkSW5wdXRUZXh0cy5maWx0ZXIoKGEpID0+IGEuaW5wdXQgPT09IGlucHV0KTtcclxuICAgICAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQ29ubmVjdGVkSW5wdXRPYnNlcnZhYmxlcyhmaWx0ZXJlZFswXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGVkSW5wdXRUZXh0cyA9IHRoaXMuX2Nvbm5lY3RlZElucHV0VGV4dHMuZmlsdGVyKChhKSA9PiBhLmlucHV0ICE9PSBpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0ID09PSBpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRseUNvbm5lY3RlZElucHV0VGV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWRJbnB1dFRleHRzLmZvckVhY2goKGNvbm5lY3RlZElucHV0VGV4dDogQ29ubmVjdGVkSW5wdXRUZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVDb25uZWN0ZWRJbnB1dE9ic2VydmFibGVzKGNvbm5lY3RlZElucHV0VGV4dCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0ZWRJbnB1dFRleHRzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29ubmVjdGVkSW5wdXRUZXh0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudGx5Q29ubmVjdGVkSW5wdXRUZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5vbktleVByZXNzT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fb25LZXlQcmVzc09ic2VydmVyKTtcclxuICAgICAgICAgICAgdGhpcy5fb25LZXlQcmVzc09ic2VydmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVtb3ZlQ29ubmVjdGVkSW5wdXRPYnNlcnZhYmxlcyhjb25uZWN0ZWRJbnB1dFRleHQ6IENvbm5lY3RlZElucHV0VGV4dCk6IHZvaWQge1xyXG4gICAgICAgIGNvbm5lY3RlZElucHV0VGV4dC5pbnB1dC5fY29ubmVjdGVkVmlydHVhbEtleWJvYXJkID0gbnVsbDtcclxuICAgICAgICBjb25uZWN0ZWRJbnB1dFRleHQuaW5wdXQub25Gb2N1c09ic2VydmFibGUucmVtb3ZlKGNvbm5lY3RlZElucHV0VGV4dC5vbkZvY3VzT2JzZXJ2ZXIpO1xyXG4gICAgICAgIGNvbm5lY3RlZElucHV0VGV4dC5pbnB1dC5vbkJsdXJPYnNlcnZhYmxlLnJlbW92ZShjb25uZWN0ZWRJbnB1dFRleHQub25CbHVyT2JzZXJ2ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVsZWFzZSBhbGwgcmVzb3VyY2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhdGljc1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBrZXlib2FyZCB1c2luZyBhIGRlZmF1bHQgbGF5b3V0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyBjb250cm9sIG5hbWVcclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZpcnR1YWxLZXlib2FyZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIENyZWF0ZURlZmF1bHRMYXlvdXQobmFtZT86IHN0cmluZyk6IFZpcnR1YWxLZXlib2FyZCB7XHJcbiAgICAgICAgY29uc3QgcmV0dXJuVmFsdWUgPSBuZXcgVmlydHVhbEtleWJvYXJkKG5hbWUpO1xyXG5cclxuICAgICAgICByZXR1cm5WYWx1ZS5hZGRLZXlzUm93KFtcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIiwgXCI1XCIsIFwiNlwiLCBcIjdcIiwgXCI4XCIsIFwiOVwiLCBcIjBcIiwgXCJcXHUyMTkwXCJdKTtcclxuICAgICAgICByZXR1cm5WYWx1ZS5hZGRLZXlzUm93KFtcInFcIiwgXCJ3XCIsIFwiZVwiLCBcInJcIiwgXCJ0XCIsIFwieVwiLCBcInVcIiwgXCJpXCIsIFwib1wiLCBcInBcIl0pO1xyXG4gICAgICAgIHJldHVyblZhbHVlLmFkZEtleXNSb3coW1wiYVwiLCBcInNcIiwgXCJkXCIsIFwiZlwiLCBcImdcIiwgXCJoXCIsIFwialwiLCBcImtcIiwgXCJsXCIsIFwiO1wiLCBcIidcIiwgXCJcXHUyMUI1XCJdKTtcclxuICAgICAgICByZXR1cm5WYWx1ZS5hZGRLZXlzUm93KFtcIlxcdTIxRTdcIiwgXCJ6XCIsIFwieFwiLCBcImNcIiwgXCJ2XCIsIFwiYlwiLCBcIm5cIiwgXCJtXCIsIFwiLFwiLCBcIi5cIiwgXCIvXCJdKTtcclxuICAgICAgICByZXR1cm5WYWx1ZS5hZGRLZXlzUm93KFtcIiBcIl0sIFt7IHdpZHRoOiBcIjIwMHB4XCIgfV0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIF9wYXJzZUZyb21Db250ZW50KHNlcmlhbGl6ZWRPYmplY3Q6IGFueSwgaG9zdDogQWR2YW5jZWREeW5hbWljVGV4dHVyZSkge1xyXG4gICAgICAgIHN1cGVyLl9wYXJzZUZyb21Db250ZW50KHNlcmlhbGl6ZWRPYmplY3QsIGhvc3QpO1xyXG4gICAgICAgIGZvciAoY29uc3Qgcm93IG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKHJvdy5nZXRDbGFzc05hbWUoKSA9PT0gXCJTdGFja1BhbmVsXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrUGFuZWwgPSByb3cgYXMgU3RhY2tQYW5lbDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHN0YWNrUGFuZWwuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LmdldENsYXNzTmFtZSgpID09PSBcIkJ1dHRvblwiICYmIGtleS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleS5vblBvaW50ZXJVcE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlQcmVzc09ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKGtleS5uYW1lIGFzIHN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLlZpcnR1YWxLZXlib2FyZFwiLCBWaXJ0dWFsS2V5Ym9hcmQpO1xyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8taW50ZXJuYWwtbW9kdWxlcyAqL1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jb250cm9scy9pbmRleFwiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vYWR2YW5jZWREeW5hbWljVGV4dHVyZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9hZHRJbnN0cnVtZW50YXRpb25cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbWF0aDJEXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21lYXN1cmVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbXVsdGlMaW5lUG9pbnRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc3R5bGVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdmFsdWVBbmRVbml0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3htbExvYWRlclwiO1xyXG4iLCJpbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB7IEVwc2lsb24gfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbnN0YW50c1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gdHJhbnNwb3J0IFZlY3RvcjIgaW5mb3JtYXRpb24gZm9yIHBvaW50ZXIgZXZlbnRzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmVjdG9yMldpdGhJbmZvIGV4dGVuZHMgVmVjdG9yMiB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgVmVjdG9yMldpdGhJbmZvXHJcbiAgICAgKiBAcGFyYW0gc291cmNlIGRlZmluZXMgdGhlIHZlY3RvcjIgZGF0YSB0byB0cmFuc3BvcnRcclxuICAgICAqIEBwYXJhbSBidXR0b25JbmRleCBkZWZpbmVzIHRoZSBjdXJyZW50IG1vdXNlIGJ1dHRvbiBpbmRleFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgICAgc291cmNlOiBWZWN0b3IyLFxyXG4gICAgICAgIC8qKiBkZWZpbmVzIHRoZSBjdXJyZW50IG1vdXNlIGJ1dHRvbiBpbmRleCAqL1xyXG4gICAgICAgIHB1YmxpYyBidXR0b25JbmRleDogbnVtYmVyID0gMFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoc291cmNlLngsIHNvdXJjZS55KTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIENsYXNzIHVzZWQgdG8gcHJvdmlkZSAyRCBtYXRyaXggZmVhdHVyZXMgKi9cclxuZXhwb3J0IGNsYXNzIE1hdHJpeDJEIHtcclxuICAgIC8qKiBHZXRzIHRoZSBpbnRlcm5hbCBhcnJheSBvZiA2IGZsb2F0cyB1c2VkIHRvIHN0b3JlIG1hdHJpeCBkYXRhICovXHJcbiAgICBwdWJsaWMgbSA9IG5ldyBGbG9hdDMyQXJyYXkoNik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IG1hdHJpeFxyXG4gICAgICogQHBhcmFtIG0wMCBkZWZpbmVzIHZhbHVlIGZvciAoMCwgMClcclxuICAgICAqIEBwYXJhbSBtMDEgZGVmaW5lcyB2YWx1ZSBmb3IgKDAsIDEpXHJcbiAgICAgKiBAcGFyYW0gbTEwIGRlZmluZXMgdmFsdWUgZm9yICgxLCAwKVxyXG4gICAgICogQHBhcmFtIG0xMSBkZWZpbmVzIHZhbHVlIGZvciAoMSwgMSlcclxuICAgICAqIEBwYXJhbSBtMjAgZGVmaW5lcyB2YWx1ZSBmb3IgKDIsIDApXHJcbiAgICAgKiBAcGFyYW0gbTIxIGRlZmluZXMgdmFsdWUgZm9yICgyLCAxKVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtMDA6IG51bWJlciwgbTAxOiBudW1iZXIsIG0xMDogbnVtYmVyLCBtMTE6IG51bWJlciwgbTIwOiBudW1iZXIsIG0yMTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5mcm9tVmFsdWVzKG0wMCwgbTAxLCBtMTAsIG0xMSwgbTIwLCBtMjEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmlsbHMgdGhlIG1hdHJpeCBmcm9tIGRpcmVjdCB2YWx1ZXNcclxuICAgICAqIEBwYXJhbSBtMDAgZGVmaW5lcyB2YWx1ZSBmb3IgKDAsIDApXHJcbiAgICAgKiBAcGFyYW0gbTAxIGRlZmluZXMgdmFsdWUgZm9yICgwLCAxKVxyXG4gICAgICogQHBhcmFtIG0xMCBkZWZpbmVzIHZhbHVlIGZvciAoMSwgMClcclxuICAgICAqIEBwYXJhbSBtMTEgZGVmaW5lcyB2YWx1ZSBmb3IgKDEsIDEpXHJcbiAgICAgKiBAcGFyYW0gbTIwIGRlZmluZXMgdmFsdWUgZm9yICgyLCAwKVxyXG4gICAgICogQHBhcmFtIG0yMSBkZWZpbmVzIHZhbHVlIGZvciAoMiwgMSlcclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1vZGlmaWVkIG1hdHJpeFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZnJvbVZhbHVlcyhtMDA6IG51bWJlciwgbTAxOiBudW1iZXIsIG0xMDogbnVtYmVyLCBtMTE6IG51bWJlciwgbTIwOiBudW1iZXIsIG0yMTogbnVtYmVyKTogTWF0cml4MkQge1xyXG4gICAgICAgIHRoaXMubVswXSA9IG0wMDtcclxuICAgICAgICB0aGlzLm1bMV0gPSBtMDE7XHJcbiAgICAgICAgdGhpcy5tWzJdID0gbTEwO1xyXG4gICAgICAgIHRoaXMubVszXSA9IG0xMTtcclxuICAgICAgICB0aGlzLm1bNF0gPSBtMjA7XHJcbiAgICAgICAgdGhpcy5tWzVdID0gbTIxO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBtYXRyaXggZGV0ZXJtaW5hbnRcclxuICAgICAqIEByZXR1cm5zIHRoZSBkZXRlcm1pbmFudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGV0ZXJtaW5hbnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tWzBdICogdGhpcy5tWzNdIC0gdGhpcy5tWzFdICogdGhpcy5tWzJdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW52ZXJzZXMgdGhlIG1hdHJpeCBhbmQgc3RvcmVzIGl0IGluIGEgdGFyZ2V0IG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHJlc3VsdCBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcclxuICAgICAqL1xyXG4gICAgcHVibGljIGludmVydFRvUmVmKHJlc3VsdDogTWF0cml4MkQpOiBNYXRyaXgyRCB7XHJcbiAgICAgICAgY29uc3QgbDAgPSB0aGlzLm1bMF07XHJcbiAgICAgICAgY29uc3QgbDEgPSB0aGlzLm1bMV07XHJcbiAgICAgICAgY29uc3QgbDIgPSB0aGlzLm1bMl07XHJcbiAgICAgICAgY29uc3QgbDMgPSB0aGlzLm1bM107XHJcbiAgICAgICAgY29uc3QgbDQgPSB0aGlzLm1bNF07XHJcbiAgICAgICAgY29uc3QgbDUgPSB0aGlzLm1bNV07XHJcblxyXG4gICAgICAgIGNvbnN0IGRldCA9IHRoaXMuZGV0ZXJtaW5hbnQoKTtcclxuICAgICAgICBpZiAoZGV0IDwgRXBzaWxvbiAqIEVwc2lsb24pIHtcclxuICAgICAgICAgICAgcmVzdWx0Lm1bMF0gPSAwO1xyXG4gICAgICAgICAgICByZXN1bHQubVsxXSA9IDA7XHJcbiAgICAgICAgICAgIHJlc3VsdC5tWzJdID0gMDtcclxuICAgICAgICAgICAgcmVzdWx0Lm1bM10gPSAwO1xyXG4gICAgICAgICAgICByZXN1bHQubVs0XSA9IDA7XHJcbiAgICAgICAgICAgIHJlc3VsdC5tWzVdID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkZXREaXYgPSAxIC8gZGV0O1xyXG5cclxuICAgICAgICBjb25zdCBkZXQ0ID0gbDIgKiBsNSAtIGwzICogbDQ7XHJcbiAgICAgICAgY29uc3QgZGV0NSA9IGwxICogbDQgLSBsMCAqIGw1O1xyXG5cclxuICAgICAgICByZXN1bHQubVswXSA9IGwzICogZGV0RGl2O1xyXG4gICAgICAgIHJlc3VsdC5tWzFdID0gLWwxICogZGV0RGl2O1xyXG4gICAgICAgIHJlc3VsdC5tWzJdID0gLWwyICogZGV0RGl2O1xyXG4gICAgICAgIHJlc3VsdC5tWzNdID0gbDAgKiBkZXREaXY7XHJcbiAgICAgICAgcmVzdWx0Lm1bNF0gPSBkZXQ0ICogZGV0RGl2O1xyXG4gICAgICAgIHJlc3VsdC5tWzVdID0gZGV0NSAqIGRldERpdjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IG1hdHJpeCB3aXRoIGFub3RoZXIgb25lXHJcbiAgICAgKiBAcGFyYW0gb3RoZXIgZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSByZXN1bHQgZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtdWx0aXBseVRvUmVmKG90aGVyOiBNYXRyaXgyRCwgcmVzdWx0OiBNYXRyaXgyRCk6IE1hdHJpeDJEIHtcclxuICAgICAgICBjb25zdCBsMCA9IHRoaXMubVswXTtcclxuICAgICAgICBjb25zdCBsMSA9IHRoaXMubVsxXTtcclxuICAgICAgICBjb25zdCBsMiA9IHRoaXMubVsyXTtcclxuICAgICAgICBjb25zdCBsMyA9IHRoaXMubVszXTtcclxuICAgICAgICBjb25zdCBsNCA9IHRoaXMubVs0XTtcclxuICAgICAgICBjb25zdCBsNSA9IHRoaXMubVs1XTtcclxuXHJcbiAgICAgICAgY29uc3QgcjAgPSBvdGhlci5tWzBdO1xyXG4gICAgICAgIGNvbnN0IHIxID0gb3RoZXIubVsxXTtcclxuICAgICAgICBjb25zdCByMiA9IG90aGVyLm1bMl07XHJcbiAgICAgICAgY29uc3QgcjMgPSBvdGhlci5tWzNdO1xyXG4gICAgICAgIGNvbnN0IHI0ID0gb3RoZXIubVs0XTtcclxuICAgICAgICBjb25zdCByNSA9IG90aGVyLm1bNV07XHJcblxyXG4gICAgICAgIHJlc3VsdC5tWzBdID0gbDAgKiByMCArIGwxICogcjI7XHJcbiAgICAgICAgcmVzdWx0Lm1bMV0gPSBsMCAqIHIxICsgbDEgKiByMztcclxuICAgICAgICByZXN1bHQubVsyXSA9IGwyICogcjAgKyBsMyAqIHIyO1xyXG4gICAgICAgIHJlc3VsdC5tWzNdID0gbDIgKiByMSArIGwzICogcjM7XHJcbiAgICAgICAgcmVzdWx0Lm1bNF0gPSBsNCAqIHIwICsgbDUgKiByMiArIHI0O1xyXG4gICAgICAgIHJlc3VsdC5tWzVdID0gbDQgKiByMSArIGw1ICogcjMgKyByNTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWVzIHRoZSBjdXJyZW50IG1hdHJpeCB0byBhIHNldCBvZiAyIGZsb2F0cyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gYSB2ZWN0b3IyXHJcbiAgICAgKiBAcGFyYW0geCBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0geSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0gcmVzdWx0IGRlZmluZXMgdGhlIHRhcmdldCB2ZWN0b3IyXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcclxuICAgICAqL1xyXG4gICAgcHVibGljIHRyYW5zZm9ybUNvb3JkaW5hdGVzKHg6IG51bWJlciwgeTogbnVtYmVyLCByZXN1bHQ6IFZlY3RvcjIpOiBNYXRyaXgyRCB7XHJcbiAgICAgICAgcmVzdWx0LnggPSB4ICogdGhpcy5tWzBdICsgeSAqIHRoaXMubVsyXSArIHRoaXMubVs0XTtcclxuICAgICAgICByZXN1bHQueSA9IHggKiB0aGlzLm1bMV0gKyB5ICogdGhpcy5tWzNdICsgdGhpcy5tWzVdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdGF0aWNzXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gaWRlbnRpdHkgbWF0cml4XHJcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBtYXRyaXhcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBJZGVudGl0eSgpOiBNYXRyaXgyRCB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgyRCgxLCAwLCAwLCAxLCAwLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gaWRlbnRpdHkgbWF0cml4IGFuZCBzdG9yZXMgaXQgaW4gYSB0YXJnZXQgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0gcmVzdWx0IGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBJZGVudGl0eVRvUmVmKHJlc3VsdDogTWF0cml4MkQpOiB2b2lkIHtcclxuICAgICAgICByZXN1bHQubVswXSA9IDE7XHJcbiAgICAgICAgcmVzdWx0Lm1bMV0gPSAwO1xyXG4gICAgICAgIHJlc3VsdC5tWzJdID0gMDtcclxuICAgICAgICByZXN1bHQubVszXSA9IDE7XHJcbiAgICAgICAgcmVzdWx0Lm1bNF0gPSAwO1xyXG4gICAgICAgIHJlc3VsdC5tWzVdID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSB0cmFuc2xhdGlvbiBtYXRyaXggYW5kIHN0b3JlcyBpdCBpbiBhIHRhcmdldCBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB4IGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgdHJhbnNsYXRpb25cclxuICAgICAqIEBwYXJhbSB5IGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgdHJhbnNsYXRpb25cclxuICAgICAqIEBwYXJhbSByZXN1bHQgZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFRyYW5zbGF0aW9uVG9SZWYoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJlc3VsdDogTWF0cml4MkQpOiB2b2lkIHtcclxuICAgICAgICByZXN1bHQuZnJvbVZhbHVlcygxLCAwLCAwLCAxLCB4LCB5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBzY2FsaW5nIG1hdHJpeCBhbmQgc3RvcmVzIGl0IGluIGEgdGFyZ2V0IG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHggZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBzY2FsaW5nXHJcbiAgICAgKiBAcGFyYW0geSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHNjYWxpbmdcclxuICAgICAqIEBwYXJhbSByZXN1bHQgZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFNjYWxpbmdUb1JlZih4OiBudW1iZXIsIHk6IG51bWJlciwgcmVzdWx0OiBNYXRyaXgyRCk6IHZvaWQge1xyXG4gICAgICAgIHJlc3VsdC5mcm9tVmFsdWVzKHgsIDAsIDAsIHksIDAsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIG1hdHJpeCBhbmQgc3RvcmVzIGl0IGluIGEgdGFyZ2V0IG1hdHJpeFxyXG4gICAgICogQHBhcmFtIGFuZ2xlIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFuZ2xlXHJcbiAgICAgKiBAcGFyYW0gcmVzdWx0IGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBSb3RhdGlvblRvUmVmKGFuZ2xlOiBudW1iZXIsIHJlc3VsdDogTWF0cml4MkQpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzID0gTWF0aC5zaW4oYW5nbGUpO1xyXG4gICAgICAgIGNvbnN0IGMgPSBNYXRoLmNvcyhhbmdsZSk7XHJcblxyXG4gICAgICAgIHJlc3VsdC5mcm9tVmFsdWVzKGMsIHMsIC1zLCBjLCAwLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfVGVtcFByZVRyYW5zbGF0aW9uTWF0cml4ID0gTWF0cml4MkQuSWRlbnRpdHkoKTtcclxuICAgIHByaXZhdGUgc3RhdGljIF9UZW1wUG9zdFRyYW5zbGF0aW9uTWF0cml4ID0gTWF0cml4MkQuSWRlbnRpdHkoKTtcclxuICAgIHByaXZhdGUgc3RhdGljIF9UZW1wUm90YXRpb25NYXRyaXggPSBNYXRyaXgyRC5JZGVudGl0eSgpO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX1RlbXBTY2FsaW5nTWF0cml4ID0gTWF0cml4MkQuSWRlbnRpdHkoKTtcclxuICAgIHByaXZhdGUgc3RhdGljIF9UZW1wQ29tcG9zZTAgPSBNYXRyaXgyRC5JZGVudGl0eSgpO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX1RlbXBDb21wb3NlMSA9IE1hdHJpeDJELklkZW50aXR5KCk7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfVGVtcENvbXBvc2UyID0gTWF0cml4MkQuSWRlbnRpdHkoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbXBvc2VzIGEgbWF0cml4IGZyb20gdHJhbnNsYXRpb24sIHJvdGF0aW9uLCBzY2FsaW5nIGFuZCBwYXJlbnQgbWF0cml4IGFuZCBzdG9yZXMgaXQgaW4gYSB0YXJnZXQgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0gdHggZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSB0cmFuc2xhdGlvblxyXG4gICAgICogQHBhcmFtIHR5IGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgdHJhbnNsYXRpb25cclxuICAgICAqIEBwYXJhbSBhbmdsZSBkZWZpbmVzIHRoZSByb3RhdGlvbiBhbmdsZVxyXG4gICAgICogQHBhcmFtIHNjYWxlWCBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHNjYWxpbmdcclxuICAgICAqIEBwYXJhbSBzY2FsZVkgZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBzY2FsaW5nXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50TWF0cml4IGRlZmluZXMgdGhlIHBhcmVudCBtYXRyaXggdG8gbXVsdGlwbHkgYnkgKGNhbiBiZSBudWxsKVxyXG4gICAgICogQHBhcmFtIHJlc3VsdCBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQ29tcG9zZVRvUmVmKHR4OiBudW1iZXIsIHR5OiBudW1iZXIsIGFuZ2xlOiBudW1iZXIsIHNjYWxlWDogbnVtYmVyLCBzY2FsZVk6IG51bWJlciwgcGFyZW50TWF0cml4OiBOdWxsYWJsZTxNYXRyaXgyRD4sIHJlc3VsdDogTWF0cml4MkQpOiB2b2lkIHtcclxuICAgICAgICBNYXRyaXgyRC5UcmFuc2xhdGlvblRvUmVmKHR4LCB0eSwgTWF0cml4MkQuX1RlbXBQcmVUcmFuc2xhdGlvbk1hdHJpeCk7XHJcblxyXG4gICAgICAgIE1hdHJpeDJELlNjYWxpbmdUb1JlZihzY2FsZVgsIHNjYWxlWSwgTWF0cml4MkQuX1RlbXBTY2FsaW5nTWF0cml4KTtcclxuXHJcbiAgICAgICAgTWF0cml4MkQuUm90YXRpb25Ub1JlZihhbmdsZSwgTWF0cml4MkQuX1RlbXBSb3RhdGlvbk1hdHJpeCk7XHJcblxyXG4gICAgICAgIE1hdHJpeDJELlRyYW5zbGF0aW9uVG9SZWYoLXR4LCAtdHksIE1hdHJpeDJELl9UZW1wUG9zdFRyYW5zbGF0aW9uTWF0cml4KTtcclxuXHJcbiAgICAgICAgTWF0cml4MkQuX1RlbXBQcmVUcmFuc2xhdGlvbk1hdHJpeC5tdWx0aXBseVRvUmVmKE1hdHJpeDJELl9UZW1wU2NhbGluZ01hdHJpeCwgTWF0cml4MkQuX1RlbXBDb21wb3NlMCk7XHJcbiAgICAgICAgTWF0cml4MkQuX1RlbXBDb21wb3NlMC5tdWx0aXBseVRvUmVmKE1hdHJpeDJELl9UZW1wUm90YXRpb25NYXRyaXgsIE1hdHJpeDJELl9UZW1wQ29tcG9zZTEpO1xyXG4gICAgICAgIGlmIChwYXJlbnRNYXRyaXgpIHtcclxuICAgICAgICAgICAgTWF0cml4MkQuX1RlbXBDb21wb3NlMS5tdWx0aXBseVRvUmVmKE1hdHJpeDJELl9UZW1wUG9zdFRyYW5zbGF0aW9uTWF0cml4LCBNYXRyaXgyRC5fVGVtcENvbXBvc2UyKTtcclxuICAgICAgICAgICAgTWF0cml4MkQuX1RlbXBDb21wb3NlMi5tdWx0aXBseVRvUmVmKHBhcmVudE1hdHJpeCwgcmVzdWx0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBNYXRyaXgyRC5fVGVtcENvbXBvc2UxLm11bHRpcGx5VG9SZWYoTWF0cml4MkQuX1RlbXBQb3N0VHJhbnNsYXRpb25NYXRyaXgsIHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogVXNlZnVsIG1hdGggZnVuY3Rpb25zXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWF0aFRvb2xzIHtcclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCByb3VuZGluZyBwcmVjaXNpb24gZm9yIEdVSSBlbGVtZW50cy4gSXQgc2hvdWxkIGJlXHJcbiAgICAgKiBzZXQgdG8gYSBwb3dlciBvZiB0ZW4sIHdoZXJlIHRoZSBleHBvbmVudCBtZWFucyB0aGUgbnVtYmVyXHJcbiAgICAgKiBvZiBkZWNpbWFsIGRpZ2l0cyB0byByb3VuZCB0bywgaS5lLCAxMDAgbWVhbnMgMiBkZWNpbWFsIGRpZ2l0cyxcclxuICAgICAqIDEwMDAgbWVhbnMgMyBkZWNpbWFsIGRpZ2l0cywgZXRjLiBEZWZhdWx0IGlzIDEwMCAoMiBkZWNpbWFsIGRpZ2l0cykuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgRGVmYXVsdFJvdW5kaW5nUHJlY2lzaW9uID0gMTAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUm91bmRzIGEgbnVtYmVyIHRvIHRoZSBuZWFyZXN0IG11bHRpcGxlIG9mIGEgZ2l2ZW4gcHJlY2lzaW9uXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGJlIHJvdW5kZWRcclxuICAgICAqIEBwYXJhbSBwcmVjaXNpb24gdGhlIG11bHRpcGxlIHRvIHdoaWNoIHRoZSB2YWx1ZSB3aWxsIGJlIHJvdW5kZWQuIERlZmF1bHQgaXMgMTAwICgyIGRlY2ltYWwgZGlnaXRzKVxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBSb3VuZCh2YWx1ZTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlciA9IE1hdGhUb29scy5EZWZhdWx0Um91bmRpbmdQcmVjaXNpb24pOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IE1hdHJpeDJEIH0gZnJvbSBcIi4vbWF0aDJEXCI7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5cclxuY29uc3QgdG1wUmVjdCA9IFtuZXcgVmVjdG9yMigwLCAwKSwgbmV3IFZlY3RvcjIoMCwgMCksIG5ldyBWZWN0b3IyKDAsIDApLCBuZXcgVmVjdG9yMigwLCAwKV07XHJcblxyXG5jb25zdCB0bXBSZWN0MiA9IFtuZXcgVmVjdG9yMigwLCAwKSwgbmV3IFZlY3RvcjIoMCwgMCksIG5ldyBWZWN0b3IyKDAsIDApLCBuZXcgVmVjdG9yMigwLCAwKV07XHJcblxyXG5jb25zdCB0bXBWMSA9IG5ldyBWZWN0b3IyKDAsIDApO1xyXG5jb25zdCB0bXBWMiA9IG5ldyBWZWN0b3IyKDAsIDApO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gc3RvcmUgMkQgY29udHJvbCBzaXplc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lYXN1cmUge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IG1lYXN1cmVcclxuICAgICAqIEBwYXJhbSBsZWZ0IGRlZmluZXMgbGVmdCBjb29yZGluYXRlXHJcbiAgICAgKiBAcGFyYW0gdG9wIGRlZmluZXMgdG9wIGNvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSB3aWR0aCBkZWZpbmVzIHdpZHRoIGRpbWVuc2lvblxyXG4gICAgICogQHBhcmFtIGhlaWdodCBkZWZpbmVzIGhlaWdodCBkaW1lbnNpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKiBkZWZpbmVzIGxlZnQgY29vcmRpbmF0ZSAqL1xyXG4gICAgICAgIHB1YmxpYyBsZWZ0OiBudW1iZXIsXHJcbiAgICAgICAgLyoqIGRlZmluZXMgdG9wIGNvb3JkaW5hdGUgICovXHJcbiAgICAgICAgcHVibGljIHRvcDogbnVtYmVyLFxyXG4gICAgICAgIC8qKiBkZWZpbmVzIHdpZHRoIGRpbWVuc2lvbiAgKi9cclxuICAgICAgICBwdWJsaWMgd2lkdGg6IG51bWJlcixcclxuICAgICAgICAvKiogZGVmaW5lcyBoZWlnaHQgZGltZW5zaW9uICovXHJcbiAgICAgICAgcHVibGljIGhlaWdodDogbnVtYmVyXHJcbiAgICApIHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3B5IGZyb20gYW5vdGhlciBtZWFzdXJlXHJcbiAgICAgKiBAcGFyYW0gb3RoZXIgZGVmaW5lcyB0aGUgb3RoZXIgbWVhc3VyZSB0byBjb3B5IGZyb21cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvcHlGcm9tKG90aGVyOiBNZWFzdXJlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gb3RoZXIubGVmdDtcclxuICAgICAgICB0aGlzLnRvcCA9IG90aGVyLnRvcDtcclxuICAgICAgICB0aGlzLndpZHRoID0gb3RoZXIud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBvdGhlci5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3B5IGZyb20gYSBncm91cCBvZiA0IGZsb2F0c1xyXG4gICAgICogQHBhcmFtIGxlZnQgZGVmaW5lcyBsZWZ0IGNvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSB0b3AgZGVmaW5lcyB0b3AgY29vcmRpbmF0ZVxyXG4gICAgICogQHBhcmFtIHdpZHRoIGRlZmluZXMgd2lkdGggZGltZW5zaW9uXHJcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IGRlZmluZXMgaGVpZ2h0IGRpbWVuc2lvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29weUZyb21GbG9hdHMobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbXB1dGVzIHRoZSBheGlzIGFsaWduZWQgYm91bmRpbmcgYm94IG1lYXN1cmUgZm9yIHR3byBnaXZlbiBtZWFzdXJlc1xyXG4gICAgICogQHBhcmFtIGEgSW5wdXQgbWVhc3VyZVxyXG4gICAgICogQHBhcmFtIGIgSW5wdXQgbWVhc3VyZVxyXG4gICAgICogQHBhcmFtIHJlc3VsdCB0aGUgcmVzdWx0aW5nIGJvdW5kaW5nIG1lYXN1cmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBDb21iaW5lVG9SZWYoYTogTWVhc3VyZSwgYjogTWVhc3VyZSwgcmVzdWx0OiBNZWFzdXJlKSB7XHJcbiAgICAgICAgY29uc3QgbGVmdCA9IE1hdGgubWluKGEubGVmdCwgYi5sZWZ0KTtcclxuICAgICAgICBjb25zdCB0b3AgPSBNYXRoLm1pbihhLnRvcCwgYi50b3ApO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gTWF0aC5tYXgoYS5sZWZ0ICsgYS53aWR0aCwgYi5sZWZ0ICsgYi53aWR0aCk7XHJcbiAgICAgICAgY29uc3QgYm90dG9tID0gTWF0aC5tYXgoYS50b3AgKyBhLmhlaWdodCwgYi50b3AgKyBiLmhlaWdodCk7XHJcbiAgICAgICAgcmVzdWx0LmxlZnQgPSBsZWZ0O1xyXG4gICAgICAgIHJlc3VsdC50b3AgPSB0b3A7XHJcbiAgICAgICAgcmVzdWx0LndpZHRoID0gcmlnaHQgLSBsZWZ0O1xyXG4gICAgICAgIHJlc3VsdC5oZWlnaHQgPSBib3R0b20gLSB0b3A7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wdXRlcyB0aGUgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveCBvZiB0aGUgbWVhc3VyZSBhZnRlciBpdCBpcyBtb2RpZmllZCBieSBhIGdpdmVuIHRyYW5zZm9ybVxyXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybSB0aGUgbWF0cml4IHRvIHRyYW5zZm9ybSB0aGUgbWVhc3VyZSBiZWZvcmUgY29tcHV0aW5nIHRoZSBBQUJCXHJcbiAgICAgKiBAcGFyYW0gYWRkWCBudW1iZXIgdG8gYWRkIHRvIGxlZnRcclxuICAgICAqIEBwYXJhbSBhZGRZIG51bWJlciB0byBhZGQgdG8gdG9wXHJcbiAgICAgKiBAcGFyYW0gYWRkV2lkdGggbnVtYmVyIHRvIGFkZCB0byB3aWR0aFxyXG4gICAgICogQHBhcmFtIGFkZEhlaWdodCBudW1iZXIgdG8gYWRkIHRvIGhlaWdodFxyXG4gICAgICogQHBhcmFtIHJlc3VsdCB0aGUgcmVzdWx0aW5nIEFBQkJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkZEFuZFRyYW5zZm9ybVRvUmVmKHRyYW5zZm9ybTogTWF0cml4MkQsIGFkZFg6IG51bWJlciwgYWRkWTogbnVtYmVyLCBhZGRXaWR0aDogbnVtYmVyLCBhZGRIZWlnaHQ6IG51bWJlciwgcmVzdWx0OiBNZWFzdXJlKSB7XHJcbiAgICAgICAgY29uc3QgbGVmdCA9IHRoaXMubGVmdCArIGFkZFg7XHJcbiAgICAgICAgY29uc3QgdG9wID0gdGhpcy50b3AgKyBhZGRZO1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aCArIGFkZFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0ICsgYWRkSGVpZ2h0O1xyXG5cclxuICAgICAgICB0bXBSZWN0WzBdLmNvcHlGcm9tRmxvYXRzKGxlZnQsIHRvcCk7XHJcbiAgICAgICAgdG1wUmVjdFsxXS5jb3B5RnJvbUZsb2F0cyhsZWZ0ICsgd2lkdGgsIHRvcCk7XHJcbiAgICAgICAgdG1wUmVjdFsyXS5jb3B5RnJvbUZsb2F0cyhsZWZ0ICsgd2lkdGgsIHRvcCArIGhlaWdodCk7XHJcbiAgICAgICAgdG1wUmVjdFszXS5jb3B5RnJvbUZsb2F0cyhsZWZ0LCB0b3AgKyBoZWlnaHQpO1xyXG5cclxuICAgICAgICB0bXBWMS5jb3B5RnJvbUZsb2F0cyhOdW1iZXIuTUFYX1ZBTFVFLCBOdW1iZXIuTUFYX1ZBTFVFKTtcclxuICAgICAgICB0bXBWMi5jb3B5RnJvbUZsb2F0cygwLCAwKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0udHJhbnNmb3JtQ29vcmRpbmF0ZXModG1wUmVjdFtpXS54LCB0bXBSZWN0W2ldLnksIHRtcFJlY3QyW2ldKTtcclxuICAgICAgICAgICAgdG1wVjEueCA9IE1hdGguZmxvb3IoTWF0aC5taW4odG1wVjEueCwgdG1wUmVjdDJbaV0ueCkpO1xyXG4gICAgICAgICAgICB0bXBWMS55ID0gTWF0aC5mbG9vcihNYXRoLm1pbih0bXBWMS55LCB0bXBSZWN0MltpXS55KSk7XHJcbiAgICAgICAgICAgIHRtcFYyLnggPSBNYXRoLmNlaWwoTWF0aC5tYXgodG1wVjIueCwgdG1wUmVjdDJbaV0ueCkpO1xyXG4gICAgICAgICAgICB0bXBWMi55ID0gTWF0aC5jZWlsKE1hdGgubWF4KHRtcFYyLnksIHRtcFJlY3QyW2ldLnkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0LmxlZnQgPSB0bXBWMS54O1xyXG4gICAgICAgIHJlc3VsdC50b3AgPSB0bXBWMS55O1xyXG4gICAgICAgIHJlc3VsdC53aWR0aCA9IHRtcFYyLnggLSB0bXBWMS54O1xyXG4gICAgICAgIHJlc3VsdC5oZWlnaHQgPSB0bXBWMi55IC0gdG1wVjEueTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbXB1dGVzIHRoZSBheGlzIGFsaWduZWQgYm91bmRpbmcgYm94IG9mIHRoZSBtZWFzdXJlIGFmdGVyIGl0IGlzIG1vZGlmaWVkIGJ5IGEgZ2l2ZW4gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIHRoZSBtYXRyaXggdG8gdHJhbnNmb3JtIHRoZSBtZWFzdXJlIGJlZm9yZSBjb21wdXRpbmcgdGhlIEFBQkJcclxuICAgICAqIEBwYXJhbSByZXN1bHQgdGhlIHJlc3VsdGluZyBBQUJCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0cmFuc2Zvcm1Ub1JlZih0cmFuc2Zvcm06IE1hdHJpeDJELCByZXN1bHQ6IE1lYXN1cmUpIHtcclxuICAgICAgICB0aGlzLmFkZEFuZFRyYW5zZm9ybVRvUmVmKHRyYW5zZm9ybSwgMCwgMCwgMCwgMCwgcmVzdWx0KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgZXF1YWxpdHkgYmV0d2VlbiB0aGlzIG1lYXN1cmUgYW5kIGFub3RoZXIgb25lXHJcbiAgICAgKiBAcGFyYW0gb3RoZXIgZGVmaW5lcyB0aGUgb3RoZXIgbWVhc3VyZXNcclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgYm90aCBtZWFzdXJlcyBhcmUgZXF1YWxzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0VxdWFsc1RvKG90aGVyOiBNZWFzdXJlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMubGVmdCAhPT0gb3RoZXIubGVmdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy50b3AgIT09IG90aGVyLnRvcCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy53aWR0aCAhPT0gb3RoZXIud2lkdGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaGVpZ2h0ICE9PSBvdGhlci5oZWlnaHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGVtcHR5IG1lYXN1cmVcclxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1lYXN1cmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBFbXB0eSgpOiBNZWFzdXJlIHtcclxuICAgICAgICByZXR1cm4gbmV3IE1lYXN1cmUoMCwgMCwgMCwgMCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgT2JzZXJ2ZXIgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB7IEVwc2lsb24gfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbnN0YW50c1wiO1xyXG5pbXBvcnQgdHlwZSB7IENhbWVyYSB9IGZyb20gXCJjb3JlL0NhbWVyYXMvY2FtZXJhXCI7XHJcbmltcG9ydCB0eXBlIHsgQWJzdHJhY3RNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL2Fic3RyYWN0TWVzaFwiO1xyXG5cclxuaW1wb3J0IHR5cGUgeyBNdWx0aUxpbmUgfSBmcm9tIFwiLi9jb250cm9scy9tdWx0aUxpbmVcIjtcclxuaW1wb3J0IHsgVmFsdWVBbmRVbml0IH0gZnJvbSBcIi4vdmFsdWVBbmRVbml0XCI7XHJcbmltcG9ydCB0eXBlIHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xzL2NvbnRyb2xcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIHN0b3JlIGEgcG9pbnQgZm9yIGEgTXVsdGlMaW5lIG9iamVjdC5cclxuICogVGhlIHBvaW50IGNhbiBiZSBwdXJlIDJEIGNvb3JkaW5hdGVzLCBhIG1lc2ggb3IgYSBjb250cm9sXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTXVsdGlMaW5lUG9pbnQge1xyXG4gICAgcHJpdmF0ZSBfbXVsdGlMaW5lOiBNdWx0aUxpbmU7XHJcblxyXG4gICAgcHJpdmF0ZSBfeDogVmFsdWVBbmRVbml0O1xyXG4gICAgcHJpdmF0ZSBfeTogVmFsdWVBbmRVbml0O1xyXG4gICAgcHJpdmF0ZSBfY29udHJvbDogTnVsbGFibGU8Q29udHJvbD47XHJcbiAgICBwcml2YXRlIF9tZXNoOiBOdWxsYWJsZTxBYnN0cmFjdE1lc2g+O1xyXG5cclxuICAgIHByaXZhdGUgX2NvbnRyb2xPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8Q29udHJvbD4+O1xyXG4gICAgcHJpdmF0ZSBfbWVzaE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxDYW1lcmE+PjtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3BvaW50OiBWZWN0b3IzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBNdWx0aUxpbmVQb2ludFxyXG4gICAgICogQHBhcmFtIG11bHRpTGluZSBkZWZpbmVzIHRoZSBzb3VyY2UgTXVsdGlMaW5lIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtdWx0aUxpbmU6IE11bHRpTGluZSkge1xyXG4gICAgICAgIHRoaXMuX211bHRpTGluZSA9IG11bHRpTGluZTtcclxuXHJcbiAgICAgICAgdGhpcy5feCA9IG5ldyBWYWx1ZUFuZFVuaXQoMCk7XHJcbiAgICAgICAgdGhpcy5feSA9IG5ldyBWYWx1ZUFuZFVuaXQoMCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvaW50ID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB4IGNvb3JkaW5hdGUgKi9cclxuICAgIHB1YmxpYyBnZXQgeCgpOiBzdHJpbmcgfCBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl94LnRvU3RyaW5nKHRoaXMuX211bHRpTGluZS5faG9zdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB4KHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5feC50b1N0cmluZyh0aGlzLl9tdWx0aUxpbmUuX2hvc3QpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5feC5mcm9tU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9tdWx0aUxpbmUuX21hcmtBc0RpcnR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgeSBjb29yZGluYXRlICovXHJcbiAgICBwdWJsaWMgZ2V0IHkoKTogc3RyaW5nIHwgbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5feS50b1N0cmluZyh0aGlzLl9tdWx0aUxpbmUuX2hvc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgeSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3kudG9TdHJpbmcodGhpcy5fbXVsdGlMaW5lLl9ob3N0KSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3kuZnJvbVN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbXVsdGlMaW5lLl9tYXJrQXNEaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHRoZSBjb250cm9sIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHBvaW50ICovXHJcbiAgICBwdWJsaWMgZ2V0IGNvbnRyb2woKTogTnVsbGFibGU8Q29udHJvbD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgY29udHJvbCh2YWx1ZTogTnVsbGFibGU8Q29udHJvbD4pIHtcclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2wgJiYgdGhpcy5fY29udHJvbE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2wub25EaXJ0eU9ic2VydmFibGUucmVtb3ZlKHRoaXMuX2NvbnRyb2xPYnNlcnZlcik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sT2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29udHJvbCA9IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sT2JzZXJ2ZXIgPSB0aGlzLl9jb250cm9sLm9uRGlydHlPYnNlcnZhYmxlLmFkZCh0aGlzLl9tdWx0aUxpbmUub25Qb2ludFVwZGF0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9tdWx0aUxpbmUuX21hcmtBc0RpcnR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgbWVzaCBhc3NvY2lhdGVkIHdpdGggdGhpcyBwb2ludCAqL1xyXG4gICAgcHVibGljIGdldCBtZXNoKCk6IE51bGxhYmxlPEFic3RyYWN0TWVzaD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXNoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbWVzaCh2YWx1ZTogTnVsbGFibGU8QWJzdHJhY3RNZXNoPikge1xyXG4gICAgICAgIGlmICh0aGlzLl9tZXNoID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fbWVzaCAmJiB0aGlzLl9tZXNoT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWVzaC5nZXRTY2VuZSgpLm9uQWZ0ZXJDYW1lcmFSZW5kZXJPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9tZXNoT2JzZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWVzaCA9IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fbWVzaCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tZXNoT2JzZXJ2ZXIgPSB0aGlzLl9tZXNoLmdldFNjZW5lKCkub25BZnRlckNhbWVyYVJlbmRlck9ic2VydmFibGUuYWRkKHRoaXMuX211bHRpTGluZS5vblBvaW50VXBkYXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX211bHRpTGluZS5fbWFya0FzRGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogUmVzZXRzIGxpbmtzICovXHJcbiAgICBwdWJsaWMgcmVzZXRMaW5rcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2wgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWVzaCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGEgdHJhbnNsYXRpb24gdmVjdG9yIHdpdGggWiBjb21wb25lbnRcclxuICAgICAqIEByZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcclxuICAgICAqL1xyXG4gICAgcHVibGljIHRyYW5zbGF0ZSgpOiBWZWN0b3IzIHtcclxuICAgICAgICB0aGlzLl9wb2ludCA9IHRoaXMuX3RyYW5zbGF0ZVBvaW50KCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb2ludDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF90cmFuc2xhdGVQb2ludCgpOiBWZWN0b3IzIHtcclxuICAgICAgICBpZiAodGhpcy5fbWVzaCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tdWx0aUxpbmUuX2hvc3QuZ2V0UHJvamVjdGVkUG9zaXRpb25XaXRoWih0aGlzLl9tZXNoLmdldEJvdW5kaW5nSW5mbygpLmJvdW5kaW5nU3BoZXJlLmNlbnRlciwgdGhpcy5fbWVzaC5nZXRXb3JsZE1hdHJpeCgpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NvbnRyb2wgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModGhpcy5fY29udHJvbC5jZW50ZXJYLCB0aGlzLl9jb250cm9sLmNlbnRlclksIDEgLSBFcHNpbG9uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBob3N0OiBhbnkgPSB0aGlzLl9tdWx0aUxpbmUuX2hvc3QgYXMgYW55O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgeFZhbHVlOiBudW1iZXIgPSB0aGlzLl94LmdldFZhbHVlSW5QaXhlbChob3N0LCBOdW1iZXIoaG9zdC5fY2FudmFzLndpZHRoKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHlWYWx1ZTogbnVtYmVyID0gdGhpcy5feS5nZXRWYWx1ZUluUGl4ZWwoaG9zdCwgTnVtYmVyKGhvc3QuX2NhbnZhcy5oZWlnaHQpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh4VmFsdWUsIHlWYWx1ZSwgMSAtIEVwc2lsb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogUmVsZWFzZSBhc3NvY2lhdGVkIHJlc291cmNlcyAqL1xyXG4gICAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZXNldExpbmtzKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgdHlwZSB7IElEaXNwb3NhYmxlIH0gZnJvbSBcImNvcmUvc2NlbmVcIjtcclxuaW1wb3J0IHR5cGUgeyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIH0gZnJvbSBcIi4vYWR2YW5jZWREeW5hbWljVGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBWYWx1ZUFuZFVuaXQgfSBmcm9tIFwiLi92YWx1ZUFuZFVuaXRcIjtcclxuXHJcbi8qKlxyXG4gKiBEZWZpbmUgYSBzdHlsZSB1c2VkIGJ5IGNvbnRyb2wgdG8gYXV0b21hdGljYWxseSBzZXR1cCBwcm9wZXJ0aWVzIGJhc2VkIG9uIGEgdGVtcGxhdGUuXHJcbiAqIE9ubHkgc3VwcG9ydCBmb250IHJlbGF0ZWQgcHJvcGVydGllcyBzbyBmYXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHlsZSBpbXBsZW1lbnRzIElEaXNwb3NhYmxlIHtcclxuICAgIHByaXZhdGUgX2ZvbnRGYW1pbHkgPSBcIkFyaWFsXCI7XHJcbiAgICBwcml2YXRlIF9mb250U3R5bGUgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBfZm9udFdlaWdodCA9IFwiXCI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2hvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmU7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2ZvbnRTaXplID0gbmV3IFZhbHVlQW5kVW5pdCgxOCwgVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMLCBmYWxzZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPYnNlcnZhYmxlIHJhaXNlZCB3aGVuIHRoZSBzdHlsZSB2YWx1ZXMgYXJlIGNoYW5nZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uQ2hhbmdlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxTdHlsZT4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgc3R5bGUgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gaG9zdCBkZWZpbmVzIHRoZSBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIHdoaWNoIGhvc3RzIHRoaXMgc3R5bGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGhvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUpIHtcclxuICAgICAgICB0aGlzLl9ob3N0ID0gaG9zdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZm9udCBzaXplXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgZm9udFNpemUoKTogc3RyaW5nIHwgbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZm9udFNpemUudG9TdHJpbmcodGhpcy5faG9zdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBmb250U2l6ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnRTaXplLnRvU3RyaW5nKHRoaXMuX2hvc3QpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fZm9udFNpemUuZnJvbVN0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZvbnQgZmFtaWx5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgZm9udEZhbWlseSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb250RmFtaWx5O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZm9udEZhbWlseSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnRGYW1pbHkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvbnRGYW1pbHkgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBmb250IHN0eWxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgZm9udFN0eWxlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRTdHlsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGZvbnRTdHlsZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnRTdHlsZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZm9udFN0eWxlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGZvbnQgd2VpZ2h0ICovXHJcbiAgICBwdWJsaWMgZ2V0IGZvbnRXZWlnaHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZm9udFdlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGZvbnRXZWlnaHQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9mb250V2VpZ2h0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9mb250V2VpZ2h0ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogRGlzcG9zZSBhbGwgYXNzb2NpYXRlZCByZXNvdXJjZXMgKi9cclxuICAgIHB1YmxpYyBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2VkT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHR5cGUgeyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIH0gZnJvbSBcIi4vYWR2YW5jZWREeW5hbWljVGV4dHVyZVwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gc3BlY2lmaWMgYSB2YWx1ZSBhbmQgaXRzIGFzc29jaWF0ZWQgdW5pdFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZhbHVlQW5kVW5pdCB7XHJcbiAgICBwcml2YXRlIF92YWx1ZSA9IDE7XHJcbiAgICBwcml2YXRlIF91bml0ID0gVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMO1xyXG4gICAgcHJpdmF0ZSBfb3JpZ2luYWxVbml0OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoYXQgdGhpcyB2YWx1ZSB3aWxsIG5vdCBzY2FsZSBhY2NvcmRpbmdseSB3aXRoIGFkYXB0aXZlIHNjYWxpbmcgcHJvcGVydHlcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2d1aS9ndWkjYWRhcHRpdmUtc2NhbGluZ1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaWdub3JlQWRhcHRpdmVTY2FsaW5nID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPYnNlcnZhYmxlIGV2ZW50IHRyaWdnZXJlZCBlYWNoIHRpbWUgdGhlIHZhbHVlIG9yIHVuaXQgY2hhbmdlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25DaGFuZ2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPHZvaWQ+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFZhbHVlQW5kVW5pdFxyXG4gICAgICogQHBhcmFtIHZhbHVlIGRlZmluZXMgdGhlIHZhbHVlIHRvIHN0b3JlXHJcbiAgICAgKiBAcGFyYW0gdW5pdCBkZWZpbmVzIHRoZSB1bml0IHRvIHN0b3JlIC0gZGVmYXVsdHMgdG8gVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMXHJcbiAgICAgKiBAcGFyYW0gbmVnYXRpdmVWYWx1ZUFsbG93ZWQgZGVmaW5lcyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgdmFsdWUgY2FuIGJlIG5lZ2F0aXZlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgICAgICB2YWx1ZTogbnVtYmVyLFxyXG4gICAgICAgIC8qKiBkZWZpbmVzIHRoZSB1bml0IHRvIHN0b3JlICovXHJcbiAgICAgICAgdW5pdCA9IFZhbHVlQW5kVW5pdC5VTklUTU9ERV9QSVhFTCxcclxuICAgICAgICAvKiogZGVmaW5lcyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgdmFsdWUgY2FuIGJlIG5lZ2F0aXZlICovXHJcbiAgICAgICAgcHVibGljIG5lZ2F0aXZlVmFsdWVBbGxvd2VkID0gdHJ1ZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl91bml0ID0gdW5pdDtcclxuICAgICAgICB0aGlzLl9vcmlnaW5hbFVuaXQgPSB1bml0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSB2YWx1ZSBpcyBhIHBlcmNlbnRhZ2UgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNQZXJjZW50YWdlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91bml0ID09PSBWYWx1ZUFuZFVuaXQuVU5JVE1PREVfUEVSQ0VOVEFHRTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgdmFsdWUgaXMgc3RvcmUgYXMgcGl4ZWwgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNQaXhlbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdW5pdCA9PT0gVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB2YWx1ZSAod2l0aG91dCB1bml0cylcclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB2YWx1ZSBwcm9wZXJ0eSBpbnN0ZWFkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyB2YWx1ZSAod2l0aG91dCB1bml0cykgKi9cclxuICAgIHB1YmxpYyBnZXQgdmFsdWUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFNldHMgdmFsdWUgKHdpdGhvdXQgdW5pdHMpICovXHJcbiAgICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMuX3ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgdW5pdHMgKHdpdGhvdXQgdmFsdWUpICovXHJcbiAgICBwdWJsaWMgZ2V0IHVuaXQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdW5pdDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogU2V0cyB1bml0cyAod2l0aG91dCB2YWx1ZSkgKi9cclxuICAgIHB1YmxpYyBzZXQgdW5pdCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLl91bml0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VuaXQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdmFsdWUgYXMgcGl4ZWxcclxuICAgICAqIEBwYXJhbSBob3N0IGRlZmluZXMgdGhlIHJvb3QgaG9zdFxyXG4gICAgICogQHBhcmFtIHJlZlZhbHVlIGRlZmluZXMgdGhlIHJlZmVyZW5jZSB2YWx1ZSBmb3IgcGVyY2VudGFnZXNcclxuICAgICAqIEByZXR1cm5zIHRoZSB2YWx1ZSBhcyBwaXhlbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VmFsdWVJblBpeGVsKGhvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUsIHJlZlZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUGl4ZWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoaG9zdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShob3N0KSAqIHJlZlZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBjdXJyZW50IHZhbHVlIGFuZCB1bml0LlxyXG4gICAgICogQHBhcmFtIHZhbHVlIGRlZmluZXMgdGhlIHZhbHVlIHRvIHN0b3JlXHJcbiAgICAgKiBAcGFyYW0gdW5pdCBkZWZpbmVzIHRoZSB1bml0IHRvIHN0b3JlXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWYWx1ZUFuZFVuaXRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZUluUGxhY2UodmFsdWU6IG51bWJlciwgdW5pdCA9IFZhbHVlQW5kVW5pdC5VTklUTU9ERV9QSVhFTCk6IFZhbHVlQW5kVW5pdCB7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlIHx8IHRoaXMudW5pdCAhPT0gdW5pdCkge1xyXG4gICAgICAgICAgICAvLyBzZXQgbWVtYmVyIHZhcmlhYmxlcyB0byBub3RpZnkgb25seSBvbmNlXHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3VuaXQgPSB1bml0O1xyXG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHZhbHVlIGFjY29yZGluZ2x5IHRvIGl0cyB1bml0XHJcbiAgICAgKiBAcGFyYW0gaG9zdCAgZGVmaW5lcyB0aGUgcm9vdCBob3N0XHJcbiAgICAgKiBAcmV0dXJucyB0aGUgdmFsdWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFZhbHVlKGhvc3Q6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUpOiBudW1iZXIge1xyXG4gICAgICAgIGlmIChob3N0ICYmICF0aGlzLmlnbm9yZUFkYXB0aXZlU2NhbGluZyAmJiB0aGlzLnVuaXQgIT09IFZhbHVlQW5kVW5pdC5VTklUTU9ERV9QRVJDRU5UQUdFKSB7XHJcbiAgICAgICAgICAgIGxldCB3aWR0aDogbnVtYmVyID0gMDtcclxuICAgICAgICAgICAgbGV0IGhlaWdodDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChob3N0LmlkZWFsV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoID0gTWF0aC5jZWlsKCh0aGlzLl92YWx1ZSAqIGhvc3QuZ2V0U2l6ZSgpLndpZHRoKSAvIGhvc3QuaWRlYWxXaWR0aCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChob3N0LmlkZWFsSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLmNlaWwoKHRoaXMuX3ZhbHVlICogaG9zdC5nZXRTaXplKCkuaGVpZ2h0KSAvIGhvc3QuaWRlYWxIZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaG9zdC51c2VTbWFsbGVzdElkZWFsICYmIGhvc3QuaWRlYWxXaWR0aCAmJiBob3N0LmlkZWFsSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGggPCB3aW5kb3cuaW5uZXJIZWlnaHQgPyB3aWR0aCA6IGhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGhvc3QuaWRlYWxXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaG9yaXpvbnRhbFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaG9zdC5pZGVhbEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgLy8gdmVydGljYWxcclxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmFsdWVcclxuICAgICAqIEBwYXJhbSBob3N0IGRlZmluZXMgdGhlIHJvb3QgaG9zdFxyXG4gICAgICogQHBhcmFtIGRlY2ltYWxzIGRlZmluZXMgYW4gb3B0aW9uYWwgbnVtYmVyIG9mIGRlY2ltYWxzIHRvIGRpc3BsYXlcclxuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0b1N0cmluZyhob3N0OiBBZHZhbmNlZER5bmFtaWNUZXh0dXJlLCBkZWNpbWFscz86IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLl91bml0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BFUkNFTlRBR0U6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSB0aGlzLmdldFZhbHVlKGhvc3QpICogMTAwO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChkZWNpbWFscyA/IHBlcmNlbnRhZ2UudG9GaXhlZChkZWNpbWFscykgOiBwZXJjZW50YWdlKSArIFwiJVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwaXhlbHMgPSB0aGlzLmdldFZhbHVlKGhvc3QpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChkZWNpbWFscyA/IHBpeGVscy50b0ZpeGVkKGRlY2ltYWxzKSA6IHBpeGVscykgKyBcInB4XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl91bml0LnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZSBhIHZhbHVlIHBhcnNlZCBmcm9tIGEgc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0gc291cmNlIGRlZmluZXMgdGhlIHNvdXJjZSBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIHdhcyBzdWNjZXNzZnVsbHkgcGFyc2VkIGFuZCB1cGRhdGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmcm9tU3RyaW5nKHNvdXJjZTogc3RyaW5nIHwgbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBWYWx1ZUFuZFVuaXQuX1JlZ2V4LmV4ZWMoc291cmNlLnRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICBpZiAoIW1hdGNoIHx8IG1hdGNoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc291cmNlVmFsdWUgPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcclxuICAgICAgICBsZXQgc291cmNlVW5pdCA9IHRoaXMuX29yaWdpbmFsVW5pdDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLm5lZ2F0aXZlVmFsdWVBbGxvd2VkKSB7XHJcbiAgICAgICAgICAgIGlmIChzb3VyY2VWYWx1ZSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHNvdXJjZVZhbHVlID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA9PT0gNCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzNdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicHhcIjpcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VVbml0ID0gVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BJWEVMO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIiVcIjpcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VVbml0ID0gVmFsdWVBbmRVbml0LlVOSVRNT0RFX1BFUkNFTlRBR0U7XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlVmFsdWUgLz0gMTAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzb3VyY2VWYWx1ZSA9PT0gdGhpcy5fdmFsdWUgJiYgc291cmNlVW5pdCA9PT0gdGhpcy5fdW5pdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHNvdXJjZVZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3VuaXQgPSBzb3VyY2VVbml0O1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhdGljXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfUmVnZXggPSAvKF4tP1xcZCooXFwuXFxkKyk/KSglfHB4KT8vO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX1VOSVRNT0RFX1BFUkNFTlRBR0UgPSAwO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX1VOSVRNT0RFX1BJWEVMID0gMTtcclxuXHJcbiAgICAvKiogVU5JVE1PREVfUEVSQ0VOVEFHRSAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgVU5JVE1PREVfUEVSQ0VOVEFHRSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBWYWx1ZUFuZFVuaXQuX1VOSVRNT0RFX1BFUkNFTlRBR0U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFVOSVRNT0RFX1BJWEVMICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBVTklUTU9ERV9QSVhFTCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBWYWx1ZUFuZFVuaXQuX1VOSVRNT0RFX1BJWEVMO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdldENsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcblxyXG5jb25zdCBYbWxMb2FkZXJFcnJvciA9IFwiWG1sTG9hZGVyIEV4Y2VwdGlvbiA6IFhNTCBmaWxlIGlzIG1hbGZvcm1lZCBvciBjb3JydXB0ZWQuXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBsb2FkIEdVSSB2aWEgWE1MLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFhtbExvYWRlciB7XHJcbiAgICBwcml2YXRlIF9ub2RlczogYW55ID0ge307XHJcblxyXG4gICAgcHJpdmF0ZSBfbm9kZVR5cGVzOiBhbnkgPSB7XHJcbiAgICAgICAgZWxlbWVudDogMSxcclxuICAgICAgICBhdHRyaWJ1dGU6IDIsXHJcbiAgICAgICAgdGV4dDogMyxcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfaXNMb2FkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIF9vYmplY3RBdHRyaWJ1dGVzOiBhbnkgPSB7XHJcbiAgICAgICAgdGV4dEhvcml6b250YWxBbGlnbm1lbnQ6IDEsXHJcbiAgICAgICAgdGV4dFZlcnRpY2FsQWxpZ25tZW50OiAyLFxyXG4gICAgICAgIGhvcml6b250YWxBbGlnbm1lbnQ6IDMsXHJcbiAgICAgICAgdmVydGljYWxBbGlnbm1lbnQ6IDQsXHJcbiAgICAgICAgc3RyZXRjaDogNSxcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfcm9vdE5vZGU6IGFueTtcclxuXHJcbiAgICBwcml2YXRlIF9wYXJlbnRDbGFzczogYW55O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IHhtbCBsb2FkZXJcclxuICAgICAqIEBwYXJhbSBwYXJlbnRDbGFzcyBTZXRzIHRoZSBjbGFzcyBjb250ZXh0LiBVc2VkIHdoZW4gdGhlIGxvYWRlciBpcyBpbnN0YW5jZWQgaW5zaWRlIGEgY2xhc3MgYW5kIG5vdCBpbiBhIGdsb2JhbCBjb250ZXh0XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudENsYXNzOiBhbnkgPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKHBhcmVudENsYXNzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudENsYXNzID0gcGFyZW50Q2xhc3M7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2dldENoYWluRWxlbWVudChhdHRyaWJ1dGVWYWx1ZTogYW55KTogYW55IHtcclxuICAgICAgICBsZXQgZWxlbWVudDogYW55ID0gd2luZG93O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fcGFyZW50Q2xhc3MpIHtcclxuICAgICAgICAgICAgZWxlbWVudCA9IHRoaXMuX3BhcmVudENsYXNzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdmFsdWUgPSBhdHRyaWJ1dGVWYWx1ZTtcclxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNwbGl0KFwiLlwiKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudFt2YWx1ZVtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2dldENsYXNzQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWU6IHN0cmluZyk6IGFueSB7XHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlTmFtZS5zcGxpdChcIi5cIik7XHJcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gR2V0Q2xhc3MoXCJCQUJZTE9OLkdVSS5cIiArIGF0dHJpYnV0ZVswXSk7XHJcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZVthdHRyaWJ1dGVbMV1dO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NyZWF0ZUd1aUVsZW1lbnQobm9kZTogYW55LCBwYXJlbnQ6IGFueSwgbGlua1BhcmVudDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBHZXRDbGFzcyhcIkJBQllMT04uR1VJLlwiICsgbm9kZS5ub2RlTmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGd1aU5vZGUgPSBuZXcgY2xhc3NOYW1lKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocGFyZW50ICYmIGxpbmtQYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDb250cm9sKGd1aU5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlc1tpXS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJkYXRhc291cmNlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlc1tpXS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJvYnNlcnZhYmxlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2dldENoYWluRWxlbWVudChub2RlLmF0dHJpYnV0ZXNbaV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGd1aU5vZGVbbm9kZS5hdHRyaWJ1dGVzW2ldLm5hbWVdLmFkZChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuYXR0cmlidXRlc1tpXS5uYW1lID09IFwibGlua1dpdGhNZXNoXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGFyZW50Q2xhc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3VpTm9kZS5saW5rV2l0aE1lc2godGhpcy5fcGFyZW50Q2xhc3Nbbm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3VpTm9kZS5saW5rV2l0aE1lc2god2luZG93W25vZGUuYXR0cmlidXRlc1tpXS52YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlLm1hdGNoKC97ey4qfX0vKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBub2RlLmF0dHJpYnV0ZXNbaV0udmFsdWUubWF0Y2goL3t7KC4qKX19Lyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzLl9nZXRDaGFpbkVsZW1lbnQobWF0Y2hlc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlLnN0YXJ0c1dpdGgoXCJ7e1wiKSAmJiBub2RlLmF0dHJpYnV0ZXNbaV0udmFsdWUuZW5kc1dpdGgoXCJ9fVwiKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IChub2RlLmF0dHJpYnV0ZXNbaV0udmFsdWUgYXMgc3RyaW5nKS5yZXBsYWNlKC97ey4qfX0vLCBgJHtlbGVtZW50fWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBndWlOb2RlW25vZGUuYXR0cmlidXRlc1tpXS5uYW1lXSA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9vYmplY3RBdHRyaWJ1dGVzW25vZGUuYXR0cmlidXRlc1tpXS5uYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmF0dHJpYnV0ZXNbaV0udmFsdWUgPT0gXCJ0cnVlXCIgfHwgbm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlID09IFwiZmFsc2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBndWlOb2RlW25vZGUuYXR0cmlidXRlc1tpXS5uYW1lXSA9IG5vZGUuYXR0cmlidXRlc1tpXS52YWx1ZSA9PSBcInRydWVcIjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBndWlOb2RlW25vZGUuYXR0cmlidXRlc1tpXS5uYW1lXSA9ICFpc05hTihOdW1iZXIobm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlKSkgPyBOdW1iZXIobm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlKSA6IG5vZGUuYXR0cmlidXRlc1tpXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGd1aU5vZGVbbm9kZS5hdHRyaWJ1dGVzW2ldLm5hbWVdID0gdGhpcy5fZ2V0Q2xhc3NBdHRyaWJ1dGUobm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFub2RlLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKFwiaWRcIikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25vZGVzW25vZGUubm9kZU5hbWUgKyBPYmplY3Qua2V5cyh0aGlzLl9ub2RlcykubGVuZ3RoICsgXCJfZ2VuXCJdID0gZ3VpTm9kZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBndWlOb2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgaWQgPSBub2RlLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKFwiaWRcIikudmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChpZC5zdGFydHNXaXRoKFwie3tcIikgJiYgaWQuZW5kc1dpdGgoXCJ9fVwiKSkge1xyXG4gICAgICAgICAgICAgICAgaWQgPSB0aGlzLl9nZXRDaGFpbkVsZW1lbnQoaWQuc3Vic3RyaW5nKDIsIGlkLmxlbmd0aCAtIDIpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9ub2Rlc1tpZF0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25vZGVzW2lkXSA9IGd1aU5vZGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxyXG4gICAgICAgICAgICAgICAgdGhyb3cgXCJYbWxMb2FkZXIgRXhjZXB0aW9uIDogRHVwbGljYXRlIElELCBldmVyeSBlbGVtZW50IHNob3VsZCBoYXZlIGFuIHVuaXF1ZSBJRCBhdHRyaWJ1dGVcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZ3VpTm9kZTtcclxuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcclxuICAgICAgICAgICAgdGhyb3cgXCJYbWxMb2FkZXIgRXhjZXB0aW9uIDogRXJyb3IgcGFyc2luZyBDb250cm9sIFwiICsgbm9kZS5ub2RlTmFtZSArIFwiLFwiICsgZXhjZXB0aW9uICsgXCIuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3BhcnNlR3JpZChub2RlOiBhbnksIGd1aU5vZGU6IGFueSwgcGFyZW50OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBsZXQgd2lkdGg7XHJcbiAgICAgICAgbGV0IGhlaWdodDtcclxuICAgICAgICBsZXQgY29sdW1ucztcclxuICAgICAgICBjb25zdCByb3dzID0gbm9kZS5jaGlsZHJlbjtcclxuICAgICAgICBsZXQgY2VsbHM7XHJcbiAgICAgICAgbGV0IGlzUGl4ZWwgPSBmYWxzZTtcclxuICAgICAgICBsZXQgY2VsbE5vZGU7XHJcbiAgICAgICAgbGV0IHJvd051bWJlciA9IC0xO1xyXG4gICAgICAgIGxldCBjb2x1bW5OdW1iZXIgPSAtMTtcclxuICAgICAgICBsZXQgdG90YWxDb2x1bW5zTnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChyb3dzW2ldLm5vZGVUeXBlICE9IHRoaXMuX25vZGVUeXBlcy5lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocm93c1tpXS5ub2RlTmFtZSAhPSBcIlJvd1wiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxyXG4gICAgICAgICAgICAgICAgdGhyb3cgXCJYbWxMb2FkZXIgRXhjZXB0aW9uIDogRXhwZWN0aW5nIFJvdyBub2RlLCByZWNlaXZlZCBcIiArIHJvd3NbaV0ubm9kZU5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcm93TnVtYmVyICs9IDE7XHJcbiAgICAgICAgICAgIGNvbHVtbnMgPSByb3dzW2ldLmNoaWxkcmVuO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFyb3dzW2ldLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKFwiaGVpZ2h0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxyXG4gICAgICAgICAgICAgICAgdGhyb3cgXCJYbWxMb2FkZXIgRXhjZXB0aW9uIDogSGVpZ2h0IG11c3QgYmUgZGVmaW5lZCBmb3IgZ3JpZCByb3dzXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaGVpZ2h0ID0gTnVtYmVyKHJvd3NbaV0uYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oXCJoZWlnaHRcIikubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgaXNQaXhlbCA9IHJvd3NbaV0uYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oXCJpc1BpeGVsXCIpID8gSlNPTi5wYXJzZShyb3dzW2ldLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKFwiaXNQaXhlbFwiKS5ub2RlVmFsdWUpIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGd1aU5vZGUuYWRkUm93RGVmaW5pdGlvbihoZWlnaHQsIGlzUGl4ZWwpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uc1tqXS5ub2RlVHlwZSAhPSB0aGlzLl9ub2RlVHlwZXMuZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbnNbal0ubm9kZU5hbWUgIT0gXCJDb2x1bW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJYbWxMb2FkZXIgRXhjZXB0aW9uIDogRXhwZWN0aW5nIENvbHVtbiBub2RlLCByZWNlaXZlZCBcIiArIGNvbHVtbnNbal0ubm9kZU5hbWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXIgKz0gMTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3dOdW1iZXIgPiAwICYmIGNvbHVtbk51bWJlciA+IHRvdGFsQ29sdW1uc051bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJYbWxMb2FkZXIgRXhjZXB0aW9uIDogSW4gdGhlIEdyaWQgZWxlbWVudCwgdGhlIG51bWJlciBvZiBjb2x1bW5zIGlzIGRlZmluZWQgaW4gdGhlIGZpcnN0IHJvdywgZG8gbm90IGFkZCBtb3JlIGNvbHVtbnMgaW4gdGhlIHN1YnNlcXVlbnQgcm93cy5cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocm93TnVtYmVyID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbHVtbnNbal0uYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oXCJ3aWR0aFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIlhtbExvYWRlciBFeGNlcHRpb24gOiBXaWR0aCBtdXN0IGJlIGRlZmluZWQgZm9yIGFsbCB0aGUgZ3JpZCBjb2x1bW5zIGluIHRoZSBmaXJzdCByb3dcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBOdW1iZXIoY29sdW1uc1tqXS5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbShcIndpZHRoXCIpLm5vZGVWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNQaXhlbCA9IGNvbHVtbnNbal0uYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oXCJpc1BpeGVsXCIpID8gSlNPTi5wYXJzZShjb2x1bW5zW2pdLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKFwiaXNQaXhlbFwiKS5ub2RlVmFsdWUpIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3VpTm9kZS5hZGRDb2x1bW5EZWZpbml0aW9uKHdpZHRoLCBpc1BpeGVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjZWxscyA9IGNvbHVtbnNbal0uY2hpbGRyZW47XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBjZWxscy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsc1trXS5ub2RlVHlwZSAhPSB0aGlzLl9ub2RlVHlwZXMuZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbE5vZGUgPSB0aGlzLl9jcmVhdGVHdWlFbGVtZW50KGNlbGxzW2tdLCBndWlOb2RlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3VpTm9kZS5hZGRDb250cm9sKGNlbGxOb2RlLCByb3dOdW1iZXIsIGNvbHVtbk51bWJlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxzW2tdLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VYbWwoY2VsbHNba10uZmlyc3RDaGlsZCwgY2VsbE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocm93TnVtYmVyID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsQ29sdW1uc051bWJlciA9IGNvbHVtbk51bWJlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb2x1bW5OdW1iZXIgPSAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlWG1sKG5vZGUubmV4dFNpYmxpbmcsIHBhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3BhcnNlRWxlbWVudChub2RlOiBhbnksIGd1aU5vZGU6IGFueSwgcGFyZW50OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBpZiAobm9kZS5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlWG1sKG5vZGUuZmlyc3RDaGlsZCwgZ3VpTm9kZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZVhtbChub2RlLm5leHRTaWJsaW5nLCBwYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9wcmVwYXJlU291cmNlRWxlbWVudChub2RlOiBhbnksIGd1aU5vZGU6IGFueSwgdmFyaWFibGU6IGFueSwgc291cmNlOiBhbnksIGl0ZXJhdG9yOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fcGFyZW50Q2xhc3MpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFyZW50Q2xhc3NbdmFyaWFibGVdID0gc291cmNlW2l0ZXJhdG9yXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3dbdmFyaWFibGVdID0gc291cmNlW2l0ZXJhdG9yXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChub2RlLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFyc2VYbWwobm9kZS5maXJzdENoaWxkLCBndWlOb2RlLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcGFyc2VFbGVtZW50c0Zyb21Tb3VyY2Uobm9kZTogYW55LCBndWlOb2RlOiBhbnksIHBhcmVudDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IG5vZGUuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oXCJkYXRhU291cmNlXCIpLnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoIWRhdGFTb3VyY2UuaW5jbHVkZXMoXCIgaW4gXCIpKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXHJcbiAgICAgICAgICAgIHRocm93IFwiWG1sTG9hZGVyIEV4Y2VwdGlvbiA6IE1hbGZvcm1lZCBYTUwsIERhdGEgU291cmNlIG11c3QgaW5jbHVkZSBhbiBpblwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBpc0FycmF5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3Qgc3BsaXR0ZWRTb3VyY2UgPSBkYXRhU291cmNlLnNwbGl0KFwiIGluIFwiKTtcclxuICAgICAgICAgICAgaWYgKHNwbGl0dGVkU291cmNlLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBcIlhtbExvYWRlciBFeGNlcHRpb24gOiBNYWxmb3JtZWQgWE1MLCBEYXRhIFNvdXJjZSBtdXN0IGhhdmUgYW4gaXRlcmF0b3IgYW5kIGEgc291cmNlXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHNvdXJjZSA9IHNwbGl0dGVkU291cmNlWzFdO1xyXG4gICAgICAgICAgICBpZiAoc291cmNlLnN0YXJ0c1dpdGgoXCJ7XCIpICYmIHNvdXJjZS5lbmRzV2l0aChcIn1cIikpIHtcclxuICAgICAgICAgICAgICAgIGlzQXJyYXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc0FycmF5IHx8IChzb3VyY2Uuc3RhcnRzV2l0aChcIltcIikgJiYgc291cmNlLmVuZHNXaXRoKFwiXVwiKSkpIHtcclxuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5zdWJzdHJpbmcoMSwgc291cmNlLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fcGFyZW50Q2xhc3MpIHtcclxuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHRoaXMuX3BhcmVudENsYXNzW3NvdXJjZV07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSB3aW5kb3dbc291cmNlXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJlcGFyZVNvdXJjZUVsZW1lbnQobm9kZSwgZ3VpTm9kZSwgc3BsaXR0ZWRTb3VyY2VbMF0sIHNvdXJjZSwgaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgaW4gc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJlcGFyZVNvdXJjZUVsZW1lbnQobm9kZSwgZ3VpTm9kZSwgc3BsaXR0ZWRTb3VyY2VbMF0sIHNvdXJjZSwgaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZVhtbChub2RlLm5leHRTaWJsaW5nLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3BhcnNlWG1sKG5vZGU6IGFueSwgcGFyZW50OiBhbnksIGdlbmVyYXRlZDogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT0gdGhpcy5fbm9kZVR5cGVzLmVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUubmV4dFNpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlWG1sKG5vZGUubmV4dFNpYmxpbmcsIHBhcmVudCwgZ2VuZXJhdGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZ2VuZXJhdGVkKSB7XHJcbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiaWRcIiwgcGFyZW50LmlkICsgKHBhcmVudC5fY2hpbGRyZW4ubGVuZ3RoICsgMSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZ3VpTm9kZSA9IHRoaXMuX2NyZWF0ZUd1aUVsZW1lbnQobm9kZSwgcGFyZW50KTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9yb290Tm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9yb290Tm9kZSA9IGd1aU5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PSBcIkdyaWRcIikge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZUdyaWQobm9kZSwgZ3VpTm9kZSwgcGFyZW50KTtcclxuICAgICAgICB9IGVsc2UgaWYgKCFub2RlLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKFwiZGF0YVNvdXJjZVwiKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZUVsZW1lbnQobm9kZSwgZ3VpTm9kZSwgcGFyZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZUVsZW1lbnRzRnJvbVNvdXJjZShub2RlLCBndWlOb2RlLCBwYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgaWYgdGhlIGxvYWRpbmcgaGFzIGZpbmlzaGVkLlxyXG4gICAgICogQHJldHVybnMgd2hldGhlciB0aGUgbG9hZGluZyBoYXMgZmluaXNoZWQgb3Igbm90XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0xvYWRlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNMb2FkZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGEgbG9hZGVkIG5vZGUgLyBjb250cm9sIGJ5IGlkLlxyXG4gICAgICogQHBhcmFtIGlkIHRoZSBDb250cm9scyBpZCBzZXQgaW4gdGhlIHhtbFxyXG4gICAgICogQHJldHVybnMgZWxlbWVudCBvZiB0eXBlIENvbnRyb2xcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldE5vZGVCeUlkKGlkOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ub2Rlc1tpZF07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGFsbCBsb2FkZWQgbm9kZXMgLyBjb250cm9sc1xyXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgY29udHJvbHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldE5vZGVzKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNwb3NlcyB0aGUgbG9hZGVkIGxheW91dFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fcm9vdE5vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fcm9vdE5vZGUuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9yb290Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX25vZGVzID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhdGVzIHRoZSB4bWwgbGF5b3V0IGxvYWRpbmdcclxuICAgICAqIEBwYXJhbSB4bWxGaWxlIGRlZmluZXMgdGhlIHhtbCBsYXlvdXQgdG8gbG9hZFxyXG4gICAgICogQHBhcmFtIHJvb3ROb2RlIGRlZmluZXMgdGhlIG5vZGUgLyBjb250cm9sIHRvIHVzZSBhcyBhIHBhcmVudCBmb3IgdGhlIGxvYWRlZCBsYXlvdXQgY29udHJvbHMuXHJcbiAgICAgKiBAcGFyYW0gb25TdWNjZXNzIGRlZmluZXMgdGhlIGNhbGxiYWNrIGNhbGxlZCBvbiBsYXlvdXQgbG9hZCBzdWNjZXNzZnVsbHkuXHJcbiAgICAgKiBAcGFyYW0gb25FcnJvciBkZWZpbmVzIHRoZSBjYWxsYmFjayBjYWxsZWQgb24gbGF5b3V0IGxvYWQgZmFpbHVyZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGxvYWRMYXlvdXQoeG1sRmlsZTogYW55LCByb290Tm9kZTogYW55LCBvblN1Y2Nlc3M6IE51bGxhYmxlPCgpID0+IHZvaWQ+ID0gbnVsbCwgb25FcnJvcjogTnVsbGFibGU8KGVycm9yOiBzdHJpbmcpID0+IHZvaWQ+ID0gbnVsbCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHhodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgeGh0dHAub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoeGh0dHAucmVhZHlTdGF0ZSA9PT0gNCAmJiB4aHR0cC5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF4aHR0cC5yZXNwb25zZVhNTCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoWG1sTG9hZGVyRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgWG1sTG9hZGVyRXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHhtbERvYyA9IHhodHRwLnJlc3BvbnNlWE1MLmRvY3VtZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlWG1sKHhtbERvYy5maXJzdENoaWxkLCByb290Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0xvYWRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9uU3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzcygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgeGh0dHAub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIG9uRXJyb3IoXCJhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgbG9hZGluZyB0aGUgbGF5b3V0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgeGh0dHAub3BlbihcIkdFVFwiLCB4bWxGaWxlLCB0cnVlKTtcclxuICAgICAgICB4aHR0cC5zZW5kKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYXRlcyB0aGUgeG1sIGxheW91dCBsb2FkaW5nIGFzeW5jaHJvbm91c2x5XHJcbiAgICAgKiBAcGFyYW0geG1sRmlsZSBkZWZpbmVzIHRoZSB4bWwgbGF5b3V0IHRvIGxvYWRcclxuICAgICAqIEBwYXJhbSByb290Tm9kZSBkZWZpbmVzIHRoZSBub2RlIC8gY29udHJvbCB0byB1c2UgYXMgYSBwYXJlbnQgZm9yIHRoZSBsb2FkZWQgbGF5b3V0IGNvbnRyb2xzLlxyXG4gICAgICogQHJldHVybnMgUHJvbWlzZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXN5bmMgbG9hZExheW91dEFzeW5jKHhtbEZpbGU6IGFueSwgcm9vdE5vZGU6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZExheW91dCh4bWxGaWxlLCByb290Tm9kZSwgcmVzb2x2ZSwgcmVqZWN0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IEJlaGF2aW9yIH0gZnJvbSBcImNvcmUvQmVoYXZpb3JzL2JlaGF2aW9yXCI7XHJcbmltcG9ydCB7IEZvbGxvd0JlaGF2aW9yIH0gZnJvbSBcImNvcmUvQmVoYXZpb3JzL01lc2hlcy9mb2xsb3dCZWhhdmlvclwiO1xyXG5pbXBvcnQgeyBTaXhEb2ZEcmFnQmVoYXZpb3IgfSBmcm9tIFwiY29yZS9CZWhhdmlvcnMvTWVzaGVzL3NpeERvZkRyYWdCZWhhdmlvclwiO1xyXG5pbXBvcnQgdHlwZSB7IFNjZW5lIH0gZnJvbSBcImNvcmUvc2NlbmVcIjtcclxuaW1wb3J0IHR5cGUgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBPYnNlcnZlciB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHsgU3VyZmFjZU1hZ25ldGlzbUJlaGF2aW9yIH0gZnJvbSBcImNvcmUvQmVoYXZpb3JzL01lc2hlcy9zdXJmYWNlTWFnbmV0aXNtQmVoYXZpb3JcIjtcclxuaW1wb3J0IHR5cGUgeyBWZWN0b3IzIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHR5cGUgeyBQaWNraW5nSW5mbyB9IGZyb20gXCJjb3JlL0NvbGxpc2lvbnMvcGlja2luZ0luZm9cIjtcclxuaW1wb3J0IHR5cGUgeyBBYnN0cmFjdE1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvYWJzdHJhY3RNZXNoXCI7XHJcblxyXG4vKipcclxuICogRGVmYXVsdCBiZWhhdmlvciBmb3IgM0QgVUkgZWxlbWVudHMuXHJcbiAqIEhhbmRsZXMgYSBGb2xsb3dCZWhhdmlvciwgU2l4RG9mQmVoYXZpb3IgYW5kIFN1cmZhY2VNYWduZXRpc21CZWhhdmlvclxyXG4gKiBAc2luY2UgNS4wLjBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0QmVoYXZpb3IgaW1wbGVtZW50cyBCZWhhdmlvcjxNZXNoPiB7XHJcbiAgICBwcml2YXRlIF9zY2VuZTogU2NlbmU7XHJcbiAgICBwcml2YXRlIF9mb2xsb3dCZWhhdmlvcjogRm9sbG93QmVoYXZpb3I7XHJcbiAgICBwcml2YXRlIF9zaXhEb2ZEcmFnQmVoYXZpb3I6IFNpeERvZkRyYWdCZWhhdmlvcjtcclxuICAgIHByaXZhdGUgX3N1cmZhY2VNYWduZXRpc21CZWhhdmlvcjogU3VyZmFjZU1hZ25ldGlzbUJlaGF2aW9yO1xyXG4gICAgcHJpdmF0ZSBfb25CZWZvcmVSZW5kZXJPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8U2NlbmU+PjtcclxuICAgIHByaXZhdGUgX29uRHJhZ09ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjx7IGRlbHRhOiBWZWN0b3IzOyBwb3NpdGlvbjogVmVjdG9yMzsgcGlja0luZm86IFBpY2tpbmdJbmZvIH0+PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbnRpYXRlcyB0aGUgZGVmYXVsdCBiZWhhdmlvclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9mb2xsb3dCZWhhdmlvciA9IG5ldyBGb2xsb3dCZWhhdmlvcigpO1xyXG4gICAgICAgIHRoaXMuX3NpeERvZkRyYWdCZWhhdmlvciA9IG5ldyBTaXhEb2ZEcmFnQmVoYXZpb3IoKTtcclxuICAgICAgICB0aGlzLl9zdXJmYWNlTWFnbmV0aXNtQmVoYXZpb3IgPSBuZXcgU3VyZmFjZU1hZ25ldGlzbUJlaGF2aW9yKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2hlZCBub2RlIG9mIHRoaXMgYmVoYXZpb3JcclxuICAgICAqL1xyXG4gICAgcHVibGljIGF0dGFjaGVkTm9kZTogTnVsbGFibGU8TWVzaD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAgVGhlIG5hbWUgb2YgdGhlIGJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkRlZmF1bHRcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqICBUaGUgZm9sbG93IGJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgZm9sbG93QmVoYXZpb3IoKTogRm9sbG93QmVoYXZpb3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb2xsb3dCZWhhdmlvcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqICBUaGUgc2l4IERvRiBkcmFnIGJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgc2l4RG9mRHJhZ0JlaGF2aW9yKCk6IFNpeERvZkRyYWdCZWhhdmlvciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpeERvZkRyYWdCZWhhdmlvcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdXJmYWNlIG1hZ25ldGlzbSBiZWhhdmlvclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHN1cmZhY2VNYWduZXRpc21CZWhhdmlvcigpOiBTdXJmYWNlTWFnbmV0aXNtQmVoYXZpb3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdXJmYWNlTWFnbmV0aXNtQmVoYXZpb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGVzIHRoZSBmb2xsb3cgYmVoYXZpb3JcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZvbGxvd0JlaGF2aW9yRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5hYmxlcyB0aGUgc2l4IERvRiBkcmFnIGJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzaXhEb2ZEcmFnQmVoYXZpb3JFbmFibGVkOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZXMgdGhlIHN1cmZhY2UgbWFnbmV0aXNtIGJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdXJmYWNlTWFnbmV0aXNtQmVoYXZpb3JFbmFibGVkOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICBJbml0aWFsaXplcyB0aGUgYmVoYXZpb3JcclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaXQoKSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0YWNoZXMgdGhlIGRlZmF1bHQgYmVoYXZpb3JcclxuICAgICAqIEBwYXJhbSBvd25lck1lc2ggVGhlIHRvcCBsZXZlbCBtZXNoXHJcbiAgICAgKiBAcGFyYW0gZHJhZ2dhYmxlc01lc2hlcyBEZXNjZW5kYW50IG1lc2hlcyB0aGF0IGNhbiBiZSB1c2VkIGZvciBkcmFnZ2luZyB0aGUgb3duZXIgbWVzaFxyXG4gICAgICogQHBhcmFtIHNjZW5lVW5kZXJzdGFuZGluZ01lc2hlcyBNZXNoZXMgZnJvbSB0aGUgc2NlbmUgdW5kZXJzdGFuZGluZyB0aGF0IHdpbGwgYmUgdXNlZCBmb3Igc3VyZmFjZSBtYWduZXRpc21cclxuICAgICAqL1xyXG4gICAgcHVibGljIGF0dGFjaChvd25lck1lc2g6IE1lc2gsIGRyYWdnYWJsZXNNZXNoZXM/OiBNZXNoW10sIHNjZW5lVW5kZXJzdGFuZGluZ01lc2hlcz86IEFic3RyYWN0TWVzaFtdKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fc2NlbmUgPSBvd25lck1lc2guZ2V0U2NlbmUoKTtcclxuICAgICAgICB0aGlzLmF0dGFjaGVkTm9kZSA9IG93bmVyTWVzaDtcclxuXHJcbiAgICAgICAgdGhpcy5fYWRkT2JzZXJ2YWJsZXMoKTtcclxuICAgICAgICAvLyBTaW5jZSBvdXIgb2JzZXJ2YWJsZXMgYXJlIGJvdW5kIGJlZm9yZSB0aGUgY2hpbGQgYmVoYXZpb3JzJywgb3VycyBhcmUgY2FsbGVkIGZpcnN0XHJcbiAgICAgICAgdGhpcy5fZm9sbG93QmVoYXZpb3IuYXR0YWNoKG93bmVyTWVzaCk7XHJcbiAgICAgICAgdGhpcy5fc2l4RG9mRHJhZ0JlaGF2aW9yLmF0dGFjaChvd25lck1lc2gpO1xyXG4gICAgICAgIHRoaXMuX3NpeERvZkRyYWdCZWhhdmlvci5kcmFnZ2FibGVNZXNoZXMgPSBkcmFnZ2FibGVzTWVzaGVzIHx8IG51bGw7XHJcbiAgICAgICAgdGhpcy5fc2l4RG9mRHJhZ0JlaGF2aW9yLmZhY2VDYW1lcmFPbkRyYWdTdGFydCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fc3VyZmFjZU1hZ25ldGlzbUJlaGF2aW9yLmF0dGFjaChvd25lck1lc2gsIHRoaXMuX3NjZW5lKTtcclxuICAgICAgICBpZiAoc2NlbmVVbmRlcnN0YW5kaW5nTWVzaGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1cmZhY2VNYWduZXRpc21CZWhhdmlvci5tZXNoZXMgPSBzY2VuZVVuZGVyc3RhbmRpbmdNZXNoZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXZSBkaXNhYmxlIHRoaXMgYmVoYXZpb3IgYmVjYXVzZSB3ZSB3aWxsIGhhbmRsZSBwb3NlIGNoYW5naW5nIGV2ZW50IG1hbnVhbGx5IHdpdGggc2l4RG9mRHJhZ0JlaGF2aW9yXHJcbiAgICAgICAgdGhpcy5fc3VyZmFjZU1hZ25ldGlzbUJlaGF2aW9yLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqICBEZXRhY2hlcyB0aGUgYmVoYXZpb3IgZnJvbSB0aGUgbWVzaFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGV0YWNoKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYXR0YWNoZWROb2RlID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9yZW1vdmVPYnNlcnZhYmxlcygpO1xyXG4gICAgICAgIHRoaXMuX2ZvbGxvd0JlaGF2aW9yLmRldGFjaCgpO1xyXG4gICAgICAgIHRoaXMuX3NpeERvZkRyYWdCZWhhdmlvci5kZXRhY2goKTtcclxuICAgICAgICB0aGlzLl9zdXJmYWNlTWFnbmV0aXNtQmVoYXZpb3IuZGV0YWNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfYWRkT2JzZXJ2YWJsZXMoKSB7XHJcbiAgICAgICAgdGhpcy5fb25CZWZvcmVSZW5kZXJPYnNlcnZlciA9IHRoaXMuX3NjZW5lLm9uQmVmb3JlUmVuZGVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9mb2xsb3dCZWhhdmlvci5fZW5hYmxlZCA9ICF0aGlzLl9zaXhEb2ZEcmFnQmVoYXZpb3IuaXNNb3ZpbmcgJiYgdGhpcy5mb2xsb3dCZWhhdmlvckVuYWJsZWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fb25EcmFnT2JzZXJ2ZXIgPSB0aGlzLl9zaXhEb2ZEcmFnQmVoYXZpb3Iub25EcmFnT2JzZXJ2YWJsZS5hZGQoKGV2ZW50OiB7IHBpY2tJbmZvOiBQaWNraW5nSW5mbyB9KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NpeERvZkRyYWdCZWhhdmlvci5kaXNhYmxlTW92ZW1lbnQgPSB0aGlzLl9zdXJmYWNlTWFnbmV0aXNtQmVoYXZpb3IuZmluZEFuZFVwZGF0ZVRhcmdldChldmVudC5waWNrSW5mbyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVtb3ZlT2JzZXJ2YWJsZXMoKSB7XHJcbiAgICAgICAgdGhpcy5fc2NlbmUub25CZWZvcmVSZW5kZXJPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9vbkJlZm9yZVJlbmRlck9ic2VydmVyKTtcclxuICAgICAgICB0aGlzLl9zaXhEb2ZEcmFnQmVoYXZpb3Iub25EcmFnT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fb25EcmFnT2JzZXJ2ZXIpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB0eXBlIHsgQWJzdHJhY3RNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL2Fic3RyYWN0TWVzaFwiO1xyXG5pbXBvcnQgdHlwZSB7IENvbnRyb2wzRCB9IGZyb20gXCIuLi9jb250cm9sM0RcIjtcclxuaW1wb3J0IHR5cGUgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgT2JzZXJ2ZXIgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcbmltcG9ydCB0eXBlIHsgVmVjdG9yM1dpdGhJbmZvIH0gZnJvbSBcIi4uLy4uL3ZlY3RvcjNXaXRoSW5mb1wiO1xyXG5cclxuaW1wb3J0IHsgQWR2YW5jZWREeW5hbWljVGV4dHVyZSB9IGZyb20gXCIuLi8uLi8uLi8yRC9hZHZhbmNlZER5bmFtaWNUZXh0dXJlXCI7XHJcbmltcG9ydCB7IEFuaW1hdGlvbiB9IGZyb20gXCJjb3JlL0FuaW1hdGlvbnMvYW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IEFuaW1hdGlvbkdyb3VwIH0gZnJvbSBcImNvcmUvQW5pbWF0aW9ucy9hbmltYXRpb25Hcm91cFwiO1xyXG5pbXBvcnQgeyBDb2xvcjMsIENvbG9yNCB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguY29sb3JcIjtcclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuLi8uLi8uLi8yRC9jb250cm9scy9jb250cm9sXCI7XHJcbmltcG9ydCB7IENyZWF0ZVBsYW5lIH0gZnJvbSBcImNvcmUvTWVzaGVzL0J1aWxkZXJzL3BsYW5lQnVpbGRlclwiO1xyXG5pbXBvcnQgeyBDcmVhdGVCb3ggfSBmcm9tIFwiY29yZS9NZXNoZXMvQnVpbGRlcnMvYm94QnVpbGRlclwiO1xyXG5pbXBvcnQgeyBJc0RvY3VtZW50QXZhaWxhYmxlIH0gZnJvbSBcImNvcmUvTWlzYy9kb21NYW5hZ2VtZW50XCI7XHJcbmltcG9ydCB7IEZhZGVJbk91dEJlaGF2aW9yIH0gZnJvbSBcImNvcmUvQmVoYXZpb3JzL01lc2hlcy9mYWRlSW5PdXRCZWhhdmlvclwiO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSBcIi4uLy4uLy4uLzJEL2NvbnRyb2xzL2dyaWRcIjtcclxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tIFwiLi4vLi4vLi4vMkQvY29udHJvbHMvaW1hZ2VcIjtcclxuaW1wb3J0IHsgTVJETEJhY2tnbG93TWF0ZXJpYWwgfSBmcm9tIFwiLi4vLi4vbWF0ZXJpYWxzL21yZGwvbXJkbEJhY2tnbG93TWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgTVJETEJhY2twbGF0ZU1hdGVyaWFsIH0gZnJvbSBcIi4uLy4uL21hdGVyaWFscy9tcmRsL21yZGxCYWNrcGxhdGVNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBNUkRMRnJvbnRwbGF0ZU1hdGVyaWFsIH0gZnJvbSBcIi4uLy4uL21hdGVyaWFscy9tcmRsL21yZGxGcm9udHBsYXRlTWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgTVJETElubmVycXVhZE1hdGVyaWFsIH0gZnJvbSBcIi4uLy4uL21hdGVyaWFscy9tcmRsL21yZGxJbm5lcnF1YWRNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vLi4vMkQvY29udHJvbHMvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IFNjZW5lTG9hZGVyIH0gZnJvbSBcImNvcmUvTG9hZGluZy9zY2VuZUxvYWRlclwiO1xyXG5pbXBvcnQgeyBTdGFja1BhbmVsIH0gZnJvbSBcIi4uLy4uLy4uLzJEL2NvbnRyb2xzL3N0YWNrUGFuZWxcIjtcclxuaW1wb3J0IHsgU3RhbmRhcmRNYXRlcmlhbCB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9zdGFuZGFyZE1hdGVyaWFsXCI7XHJcbmltcG9ydCB7IFRleHRCbG9jayB9IGZyb20gXCIuLi8uLi8uLi8yRC9jb250cm9scy90ZXh0QmxvY2tcIjtcclxuaW1wb3J0IHsgVG91Y2hCdXR0b24zRCB9IGZyb20gXCIuLi90b3VjaEJ1dHRvbjNEXCI7XHJcbmltcG9ydCB7IFRyYW5zZm9ybU5vZGUgfSBmcm9tIFwiY29yZS9NZXNoZXMvdHJhbnNmb3JtTm9kZVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSB0aGUgbXJ0a3YzIGJ1dHRvblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRvdWNoSG9sb2dyYXBoaWNCdXR0b24gZXh0ZW5kcyBUb3VjaEJ1dHRvbjNEIHtcclxuICAgIC8qKlxyXG4gICAgICogQmFzZSBVcmwgZm9yIHRoZSBmcm9udHBsYXRlIG1vZGVsLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIE1SVEtfQVNTRVRfQkFTRV9VUkwgPSBcImh0dHBzOi8vYXNzZXRzLmJhYnlsb25qcy5jb20vbWVzaGVzL01SVEsvXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaWxlIG5hbWUgZm9yIHRoZSBmcm9udHBsYXRlIG1vZGVsLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEZST05UUExBVEVfTU9ERUxfRklMRU5BTUUgPSBcIm1ydGstZmx1ZW50LWZyb250cGxhdGUuZ2xiXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaWxlIG5hbWUgZm9yIHRoZSBiYWNrcGxhdGUgbW9kZWwuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQkFDS1BMQVRFX01PREVMX0ZJTEVOQU1FID0gXCJtcnRrLWZsdWVudC1iYWNrcGxhdGUuZ2xiXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaWxlIG5hbWUgZm9yIHRoZSBiYWNrZ2xvdyBtb2RlbC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBCQUNLR0xPV19NT0RFTF9GSUxFTkFNRSA9IFwibXJ0ay1mbHVlbnQtYnV0dG9uLmdsYlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmlsZSBuYW1lIGZvciB0aGUgaW5uZXJxdWFkIG1vZGVsLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIElOTkVSUVVBRF9NT0RFTF9GSUxFTkFNRSA9IFwiU2xhdGVQcm94aW1pdHkuZ2xiXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGhvcml6b250YWwgc2NhbGluZyBmb3IgdGhlIGJ1dHRvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHdpZHRoID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdmVydGljYWwgc2NhbGluZyBmb3IgdGhlIGJ1dHRvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGhlaWdodCA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJldmVsIHJhZGl1cyBmb3IgdGhlIGJ1dHRvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJhZGl1cyA9IDAuMTQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZvbnQgc2l6ZSBvZiB0aGUgYnV0dG9uIHRleHQgaW4gcGl4ZWxzLlxyXG4gICAgICogVGhpcyBpcyBvbmx5IGFkanVzdGFibGUgZm9yIGEgYnV0dG9uIHdpdGggd2lkdGggdG8gaGVpZ2h0IHJhdGlvIGdyZWF0ZXIgdGhhbiAxLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdGV4dFNpemVJblBpeGVscyA9IDE4O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzaXplIG9mIHRoZSBidXR0b24gaW1hZ2UgaW4gcGl4ZWxzLlxyXG4gICAgICogVGhpcyBpcyBvbmx5IGFkanVzdGFibGUgZm9yIGEgYnV0dG9uIHdpdGggd2lkdGggdG8gaGVpZ2h0IHJhdGlvIGdyZWF0ZXIgdGhhbiAxLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW1hZ2VTaXplSW5QaXhlbHMgPSA0MDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY29sb3Igb2YgdGhlIGJ1dHRvbiBwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHBsYXRlTWF0ZXJpYWxDb2xvciA9IG5ldyBDb2xvcjMoMC40LCAwLjQsIDAuNCk7XHJcblxyXG4gICAgLy8gU2hhcmVkIHZhcmlhYmxlcyBmb3IgbWVzaGVzXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZGVwdGggb2YgdGhlIGJ1dHRvbidzIGZyb250IHBsYXRlLlxyXG4gICAgICogVGhpcyB2YXJpYWJsZSBkZXRlcm1pbmVzIHRoZSB6IHNjYWxpbmcgYW5kIHogcG9zaXRpb24gZm9yIHNvbWUgb2YgdGhlIGJ1dHRvbidzIG1lc2hlcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGZyb250UGxhdGVEZXB0aCA9IDAuMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZGVwdGggb2YgdGhlIGJ1dHRvbidzIGJhY2sgcGxhdGUuXHJcbiAgICAgKiBUaGlzIHZhcmlhYmxlIGRldGVybWluZXMgdGhlIHogc2NhbGluZyBhbmQgeiBwb3NpdGlvbiBmb3Igc29tZSBvZiB0aGUgYnV0dG9uJ3MgbWVzaGVzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYmFja1BsYXRlRGVwdGggPSAwLjA0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBvZmZzZXQgdmFsdWUgZm9yIGJ1dHRvbidzIGJhY2sgZ2xvdy5cclxuICAgICAqIFRoaXMgdmFyaWFibGUgZGV0ZXJtaW5lcyB0aGUgeCwgeSBzY2FsaW5nIG9mIHRoZSBidXR0b24ncyBtZXNoZXMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBiYWNrR2xvd09mZnNldCA9IDAuMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHRoZSB6IHNjYWxpbmcgYW5kIHogcG9zaXRpb24gZm9yIHRoZSBpbm5lclF1YWQgYW5kIEJhY2tHbG93IG1lc2hlcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGZsYXRQbGFuZURlcHRoID0gMC4wMDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHJhZGl1cyBmb3IgRnJvbnRNYXRlcmlhbCBhbmQgaW5uZXJRdWFkTWF0ZXJpYWwuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbm5lclF1YWRSYWRpdXMgPSB0aGlzLnJhZGl1cyAtIDAuMDQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGNvbG9yIGZvciBpbm5lclF1YWRNYXRlcmlhbC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGlubmVyUXVhZENvbG9yID0gbmV3IENvbG9yNCgwLCAwLCAwLCAwKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY29sb3IgZm9yIGlubmVyUXVhZE1hdGVyaWFsIGZvciB3aGVuIGl0IGlzIHRvZ2dsZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbm5lclF1YWRUb2dnbGVkQ29sb3IgPSBuZXcgQ29sb3I0KDAuNTE5Nzg0MywgMC42NDg1MjM0LCAwLjk2MDc4NDMsIDAuNik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGNvbG9yIGZvciBpbm5lclF1YWRNYXRlcmlhbCBmb3Igd2hlbiBpdCBpcyBob3ZlcmVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5uZXJRdWFkSG92ZXJDb2xvciA9IG5ldyBDb2xvcjQoMSwgMSwgMSwgMC4wNSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGNvbG9yIGZvciBpbm5lclF1YWRNYXRlcmlhbCBmb3Igd2hlbiBpdCBpcyB0b2dnbGVkIGFuZCBob3ZlcmVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5uZXJRdWFkVG9nZ2xlZEhvdmVyQ29sb3IgPSBuZXcgQ29sb3I0KDAuNTE5Nzg0MywgMC42NDg1MjM0LCAwLjk2MDc4NDMsIDEpO1xyXG5cclxuICAgIC8vIE1lc2hlc1xyXG4gICAgcHJpdmF0ZSBfYmFja1BsYXRlOiBBYnN0cmFjdE1lc2g7XHJcbiAgICBwcml2YXRlIF90ZXh0UGxhdGU6IE1lc2g7XHJcbiAgICBwcml2YXRlIF9mcm9udFBsYXRlOiBBYnN0cmFjdE1lc2g7XHJcbiAgICBwcml2YXRlIF9iYWNrR2xvdzogQWJzdHJhY3RNZXNoO1xyXG4gICAgcHJpdmF0ZSBfaW5uZXJRdWFkOiBBYnN0cmFjdE1lc2g7XHJcbiAgICBwcml2YXRlIF9jb2xsaXNpb25QbGF0ZTogQWJzdHJhY3RNZXNoO1xyXG4gICAgcHJpdmF0ZSBfZnJvbnRQbGF0ZUNvbGxpc2lvbk1lc2g6IEFic3RyYWN0TWVzaDtcclxuICAgIHByaXZhdGUgX2lzQmFja3BsYXRlVmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgLy8gQ29udGVudFxyXG4gICAgcHJpdmF0ZSBfdGV4dDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfc3VidGV4dDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfaW1hZ2VVcmw6IHN0cmluZztcclxuXHJcbiAgICAvLyBNYXRlcmlhbHNcclxuICAgIHByaXZhdGUgX3NoYXJlTWF0ZXJpYWxzID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX2Zyb250TWF0ZXJpYWw6IE1SRExGcm9udHBsYXRlTWF0ZXJpYWw7XHJcbiAgICBwcml2YXRlIF9iYWNrTWF0ZXJpYWw6IE1SRExCYWNrcGxhdGVNYXRlcmlhbDtcclxuICAgIHByaXZhdGUgX2JhY2tHbG93TWF0ZXJpYWw6IE1SRExCYWNrZ2xvd01hdGVyaWFsO1xyXG4gICAgcHJpdmF0ZSBfaW5uZXJRdWFkTWF0ZXJpYWw6IE1SRExJbm5lcnF1YWRNYXRlcmlhbDtcclxuICAgIHByaXZhdGUgX3BsYXRlTWF0ZXJpYWw6IFN0YW5kYXJkTWF0ZXJpYWw7XHJcblxyXG4gICAgLy8gRXZlbnRzXHJcbiAgICBwcml2YXRlIF9waWNrZWRQb2ludE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxOdWxsYWJsZTxWZWN0b3IzPj4+O1xyXG4gICAgcHJpdmF0ZSBfcG9pbnRlckNsaWNrT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPFZlY3RvcjNXaXRoSW5mbz4+O1xyXG4gICAgcHJpdmF0ZSBfcG9pbnRlckVudGVyT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPENvbnRyb2wzRD4+O1xyXG4gICAgcHJpdmF0ZSBfcG9pbnRlck91dE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxDb250cm9sM0Q+PjtcclxuICAgIHByaXZhdGUgX3RvZ2dsZU9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxib29sZWFuPj47XHJcblxyXG4gICAgLy8gVG9vbHRpcFxyXG4gICAgcHJpdmF0ZSBfdG9vbHRpcEZhZGU6IE51bGxhYmxlPEZhZGVJbk91dEJlaGF2aW9yPjtcclxuICAgIHByaXZhdGUgX3Rvb2x0aXBUZXh0QmxvY2s6IE51bGxhYmxlPFRleHRCbG9jaz47XHJcbiAgICBwcml2YXRlIF90b29sdGlwVGV4dHVyZTogTnVsbGFibGU8QWR2YW5jZWREeW5hbWljVGV4dHVyZT47XHJcbiAgICBwcml2YXRlIF90b29sdGlwTWVzaDogTnVsbGFibGU8TWVzaD47XHJcbiAgICBwcml2YXRlIF90b29sdGlwSG92ZXJPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8Q29udHJvbDNEPj47XHJcbiAgICBwcml2YXRlIF90b29sdGlwT3V0T2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPENvbnRyb2wzRD4+O1xyXG5cclxuICAgIHByaXZhdGUgX2Rpc3Bvc2VUb29sdGlwKCkge1xyXG4gICAgICAgIHRoaXMuX3Rvb2x0aXBGYWRlID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5fdG9vbHRpcFRleHRCbG9jaykge1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwVGV4dEJsb2NrLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3Rvb2x0aXBUZXh0dXJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3Rvb2x0aXBNZXNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBNZXNoLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJFbnRlck9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3Rvb2x0aXBIb3Zlck9ic2VydmVyKTtcclxuICAgICAgICB0aGlzLm9uUG9pbnRlck91dE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3Rvb2x0aXBPdXRPYnNlcnZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXJpbmcgZ3JvdW5kIGlkIG9mIGFsbCB0aGUgbWVzaCBpbiB0aGUgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgcmVuZGVyaW5nR3JvdXBJZChpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlLnJlbmRlcmluZ0dyb3VwSWQgPSBpZDtcclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUucmVuZGVyaW5nR3JvdXBJZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuX2Zyb250UGxhdGUucmVuZGVyaW5nR3JvdXBJZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuX2JhY2tHbG93LnJlbmRlcmluZ0dyb3VwSWQgPSBpZDtcclxuICAgICAgICB0aGlzLl9pbm5lclF1YWQucmVuZGVyaW5nR3JvdXBJZCA9IGlkO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fdG9vbHRpcE1lc2gpIHtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcE1lc2gucmVuZGVyaW5nR3JvdXBJZCA9IGlkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgcmVuZGVyaW5nR3JvdXBJZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrUGxhdGUucmVuZGVyaW5nR3JvdXBJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG1lc2ggdXNlZCB0byByZW5kZXIgdGhpcyBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXQgbWVzaCgpOiBOdWxsYWJsZTxBYnN0cmFjdE1lc2g+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja1BsYXRlIGFzIEFic3RyYWN0TWVzaDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRleHQgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSB0b29sdGlwIHNob3duIHdoZW4gaG92ZXJpbmcgb24gdGhlIGJ1dHRvbi4gV2hlbiBzZXQgdG8gbnVsbCB0b29sdGlwIGlzIGRpc2FibGVkLiAoRGVmYXVsdDogbnVsbClcclxuICAgICAqIFNldCB0aGlzIHByb3BlcnR5IGFmdGVyIGFkZGluZyB0aGUgYnV0dG9uIHRvIHRoZSBHVUkzRE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCB0b29sdGlwVGV4dCh0ZXh0OiBOdWxsYWJsZTxzdHJpbmc+KSB7XHJcbiAgICAgICAgaWYgKCF0ZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2VUb29sdGlwKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl90b29sdGlwRmFkZSkge1xyXG4gICAgICAgICAgICBjb25zdCByaWdodEhhbmRlZFNjZW5lID0gdGhpcy5fYmFja1BsYXRlLl9zY2VuZS51c2VSaWdodEhhbmRlZFN5c3RlbTtcclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRvb2x0aXAgd2l0aCBtZXNoIGFuZCB0ZXh0XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBNZXNoID0gQ3JlYXRlUGxhbmUoXCJcIiwgeyBzaXplOiAxIH0sIHRoaXMuX2JhY2tQbGF0ZS5fc2NlbmUpO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwTWVzaC5wb3NpdGlvbiA9IFZlY3RvcjMuRG93bigpLnNjYWxlKDAuNykuYWRkKFZlY3RvcjMuRm9yd2FyZChyaWdodEhhbmRlZFNjZW5lKS5zY2FsZSgtMC4xNSkpO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwTWVzaC5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBNZXNoLnBhcmVudCA9IHRoaXMuX2Zyb250UGxhdGVDb2xsaXNpb25NZXNoO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRleHQgdGV4dHVyZSBmb3IgdGhlIHRvb2x0aXBcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHR1cmUgPSBBZHZhbmNlZER5bmFtaWNUZXh0dXJlLkNyZWF0ZUZvck1lc2godGhpcy5fdG9vbHRpcE1lc2gpO1xyXG4gICAgICAgICAgICBjb25zdCB0b29sdGlwQmFja2dyb3VuZCA9IG5ldyBSZWN0YW5nbGUoKTtcclxuICAgICAgICAgICAgdG9vbHRpcEJhY2tncm91bmQuaGVpZ2h0ID0gMC4yNTtcclxuICAgICAgICAgICAgdG9vbHRpcEJhY2tncm91bmQud2lkdGggPSAwLjg7XHJcbiAgICAgICAgICAgIHRvb2x0aXBCYWNrZ3JvdW5kLmNvcm5lclJhZGl1cyA9IDI1O1xyXG4gICAgICAgICAgICB0b29sdGlwQmFja2dyb3VuZC5jb2xvciA9IFwiI2ZmZmZmZlwiO1xyXG4gICAgICAgICAgICB0b29sdGlwQmFja2dyb3VuZC50aGlja25lc3MgPSAyMDtcclxuICAgICAgICAgICAgdG9vbHRpcEJhY2tncm91bmQuYmFja2dyb3VuZCA9IFwiIzA2MDY2OFwiO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwVGV4dHVyZS5hZGRDb250cm9sKHRvb2x0aXBCYWNrZ3JvdW5kKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2sgPSBuZXcgVGV4dEJsb2NrKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2suY29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2suZm9udFNpemUgPSAxMDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0dXJlLmFkZENvbnRyb2wodGhpcy5fdG9vbHRpcFRleHRCbG9jayk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgaG92ZXIgYWN0aW9uIHRvIHRvb2x0aXBcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcEZhZGUgPSBuZXcgRmFkZUluT3V0QmVoYXZpb3IoKTtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcEZhZGUuZGVsYXkgPSA1MDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBNZXNoLmFkZEJlaGF2aW9yKHRoaXMuX3Rvb2x0aXBGYWRlKTtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcEhvdmVyT2JzZXJ2ZXIgPSB0aGlzLm9uUG9pbnRlckVudGVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Rvb2x0aXBGYWRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG9vbHRpcEZhZGUuZmFkZUluKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcE91dE9ic2VydmVyID0gdGhpcy5vblBvaW50ZXJPdXRPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdG9vbHRpcEZhZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90b29sdGlwRmFkZS5mYWRlSW4oZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHRCbG9jay50ZXh0ID0gdGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB0b29sdGlwVGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdG9vbHRpcFRleHRCbG9jaz8udGV4dCB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRleHQgZm9yIHRoZSBidXR0b25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB0ZXh0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGV4dCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdGV4dCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3JlYnVpbGRDb250ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgc3VidGV4dCBmb3IgYSBidXR0b24gd2l0aCBsYXJnZXIgd2lkdGhcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBzdWJ0ZXh0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzdWJ0ZXh0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3VidGV4dCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc3VidGV4dCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3JlYnVpbGRDb250ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGltYWdlIHVybCBmb3IgdGhlIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGltYWdlVXJsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlVXJsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaW1hZ2VVcmwodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9pbWFnZVVybCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faW1hZ2VVcmwgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9yZWJ1aWxkQ29udGVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgYmFjayBtYXRlcmlhbCB1c2VkIGJ5IHRoaXMgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgYmFja01hdGVyaWFsKCk6IE1SRExCYWNrcGxhdGVNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tNYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGZyb250IG1hdGVyaWFsIHVzZWQgYnkgdGhpcyBidXR0b25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBmcm9udE1hdGVyaWFsKCk6IE1SRExGcm9udHBsYXRlTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mcm9udE1hdGVyaWFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgYmFjayBnbG93IG1hdGVyaWFsIHVzZWQgYnkgdGhpcyBidXR0b25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBiYWNrR2xvd01hdGVyaWFsKCk6IE1SRExCYWNrZ2xvd01hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja0dsb3dNYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGlubmVyIHF1YWQgbWF0ZXJpYWwgdXNlZCBieSB0aGlzIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGlubmVyUXVhZE1hdGVyaWFsKCk6IE1SRExJbm5lcnF1YWRNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyUXVhZE1hdGVyaWFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgcGxhdGUgbWF0ZXJpYWwgdXNlZCBieSB0aGlzIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHBsYXRlTWF0ZXJpYWwoKTogU3RhbmRhcmRNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsYXRlTWF0ZXJpYWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoaXMgYnV0dG9uIHNoYXJlcyBpdHMgbWF0ZXJpYWwgd2l0aCBvdGhlciBWMyBCdXR0b25zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgc2hhcmVNYXRlcmlhbHMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NoYXJlTWF0ZXJpYWxzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB3aGV0aGVyIHRoZSBiYWNrcGxhdGUgaXMgdmlzaWJsZSBvciBoaWRkZW4uIEhpZGluZyB0aGUgYmFja3BsYXRlIGlzIG5vdCByZWNvbW1lbmRlZCB3aXRob3V0IHNvbWUgc29ydCBvZiByZXBsYWNlbWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IGlzQmFja3BsYXRlVmlzaWJsZShpc1Zpc2libGU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5tZXNoICYmIHRoaXMuX2JhY2tNYXRlcmlhbCkge1xyXG4gICAgICAgICAgICBpZiAoaXNWaXNpYmxlICYmICF0aGlzLl9pc0JhY2twbGF0ZVZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhY2tQbGF0ZS52aXNpYmlsaXR5ID0gMTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNWaXNpYmxlICYmIHRoaXMuX2lzQmFja3BsYXRlVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFja1BsYXRlLnZpc2liaWxpdHkgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pc0JhY2twbGF0ZVZpc2libGUgPSBpc1Zpc2libGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGJ1dHRvblxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKiBAcGFyYW0gc2hhcmVNYXRlcmlhbHNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZT86IHN0cmluZywgc2hhcmVNYXRlcmlhbHMgPSB0cnVlKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NoYXJlTWF0ZXJpYWxzID0gc2hhcmVNYXRlcmlhbHM7XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlckVudGVyQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZnJvbnRQbGF0ZSAmJiB0aGlzLl90ZXh0UGxhdGUgJiYgIXRoaXMuaXNUb2dnbGVCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BlcmZvcm1FbnRlckV4aXRBbmltYXRpb24oMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlQnV0dG9uICYmIHRoaXMuX2lubmVyUXVhZE1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RvZ2dsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbm5lclF1YWRNYXRlcmlhbC5jb2xvciA9IHRoaXMuaW5uZXJRdWFkVG9nZ2xlZEhvdmVyQ29sb3I7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lubmVyUXVhZE1hdGVyaWFsLmNvbG9yID0gdGhpcy5pbm5lclF1YWRIb3ZlckNvbG9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wb2ludGVyT3V0QW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZnJvbnRQbGF0ZSAmJiB0aGlzLl90ZXh0UGxhdGUgJiYgIXRoaXMuaXNUb2dnbGVCdXR0b24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BlcmZvcm1FbnRlckV4aXRBbmltYXRpb24oLTAuOCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlQnV0dG9uICYmIHRoaXMuX2lubmVyUXVhZE1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vblRvZ2dsZSh0aGlzLmlzVG9nZ2xlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJEb3duQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wb2ludGVyVXBBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLl9wb2ludGVyQ2xpY2tPYnNlcnZlciA9IHRoaXMub25Qb2ludGVyQ2xpY2tPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9mcm9udFBsYXRlICYmIHRoaXMuX2JhY2tHbG93ICYmICF0aGlzLmlzQWN0aXZlTmVhckludGVyYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wZXJmb3JtQ2xpY2tBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVCdXR0b24gJiYgdGhpcy5faW5uZXJRdWFkTWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uVG9nZ2xlKHRoaXMuaXNUb2dnbGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9wb2ludGVyRW50ZXJPYnNlcnZlciA9IHRoaXMub25Qb2ludGVyRW50ZXJPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucG9pbnRlckVudGVyQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJPdXRPYnNlcnZlciA9IHRoaXMub25Qb2ludGVyT3V0T2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJPdXRBbmltYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlT2JzZXJ2ZXIgPSB0aGlzLm9uVG9nZ2xlT2JzZXJ2YWJsZS5hZGQoKGlzVG9nZ2xlZCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNUb2dnbGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbm5lclF1YWRNYXRlcmlhbC5jb2xvciA9IHRoaXMuaW5uZXJRdWFkVG9nZ2xlZENvbG9yO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5uZXJRdWFkTWF0ZXJpYWwuY29sb3IgPSB0aGlzLmlubmVyUXVhZENvbG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIlRvdWNoSG9sb2dyYXBoaWNCdXR0b25cIjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9yZWJ1aWxkQ29udGVudCgpOiB2b2lkIHtcclxuICAgICAgICBsZXQgY29udGVudDogQ29udHJvbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2dldEFzcGVjdFJhdGlvKCkgPD0gMSkge1xyXG4gICAgICAgICAgICAvLyBhbGlnbiB0ZXh0IGFuZCBpbWFnZSB2ZXJ0aWNhbGx5XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLl9hbGlnbkNvbnRlbnRWZXJ0aWNhbGx5KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gYWxpZ24gdGV4dCBhbmQgaW1hZ2UgaG9yaXpvbnRhbGx5XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLl9hbGlnbkNvbnRlbnRIb3Jpem9udGFsbHkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZ2V0QXNwZWN0UmF0aW8oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggLyB0aGlzLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9hbGlnbkNvbnRlbnRWZXJ0aWNhbGx5KCkge1xyXG4gICAgICAgIGNvbnN0IHBhbmVsID0gbmV3IFN0YWNrUGFuZWwoKTtcclxuICAgICAgICBwYW5lbC5pc1ZlcnRpY2FsID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKElzRG9jdW1lbnRBdmFpbGFibGUoKSAmJiAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ltYWdlVXJsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2Uuc291cmNlID0gdGhpcy5faW1hZ2VVcmw7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5oZWlnaHRJblBpeGVscyA9IDE4MDtcclxuICAgICAgICAgICAgICAgIGltYWdlLndpZHRoSW5QaXhlbHMgPSAxMDA7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5wYWRkaW5nVG9wSW5QaXhlbHMgPSA0MDtcclxuICAgICAgICAgICAgICAgIGltYWdlLnBhZGRpbmdCb3R0b21JblBpeGVscyA9IDQwO1xyXG4gICAgICAgICAgICAgICAgcGFuZWwuYWRkQ29udHJvbChpbWFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90ZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dEJsb2NrKCk7XHJcbiAgICAgICAgICAgIHRleHQudGV4dCA9IHRoaXMuX3RleHQ7XHJcbiAgICAgICAgICAgIHRleHQuY29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIHRleHQuaGVpZ2h0SW5QaXhlbHMgPSAzMDtcclxuICAgICAgICAgICAgdGV4dC5mb250U2l6ZSA9IDI0O1xyXG4gICAgICAgICAgICBwYW5lbC5hZGRDb250cm9sKHRleHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhbmVsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2FsaWduQ29udGVudEhvcml6b250YWxseSgpIHtcclxuICAgICAgICBsZXQgdG90YWxQYW5lbFdpZHRoSW5QaXhlbHMgPSAyNDA7XHJcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IDE1O1xyXG5cclxuICAgICAgICBjb25zdCBjb250ZW50Q29udGFpbmVyID0gbmV3IFJlY3RhbmdsZSgpO1xyXG4gICAgICAgIGNvbnRlbnRDb250YWluZXIud2lkdGhJblBpeGVscyA9IHRvdGFsUGFuZWxXaWR0aEluUGl4ZWxzO1xyXG4gICAgICAgIGNvbnRlbnRDb250YWluZXIuaGVpZ2h0SW5QaXhlbHMgPSB0b3RhbFBhbmVsV2lkdGhJblBpeGVscztcclxuICAgICAgICBjb250ZW50Q29udGFpbmVyLmNvbG9yID0gXCJ0cmFuc3BhcmVudFwiO1xyXG4gICAgICAgIGNvbnRlbnRDb250YWluZXIuc2V0UGFkZGluZ0luUGl4ZWxzKHBhZGRpbmcsIHBhZGRpbmcsIHBhZGRpbmcsIHBhZGRpbmcpO1xyXG4gICAgICAgIHRvdGFsUGFuZWxXaWR0aEluUGl4ZWxzIC09IHBhZGRpbmcgKiAyO1xyXG5cclxuICAgICAgICBjb25zdCBwYW5lbCA9IG5ldyBTdGFja1BhbmVsKCk7XHJcbiAgICAgICAgcGFuZWwuaXNWZXJ0aWNhbCA9IGZhbHNlO1xyXG4gICAgICAgIHBhbmVsLnNjYWxlWSA9IHRoaXMuX2dldEFzcGVjdFJhdGlvKCk7XHJcblxyXG4gICAgICAgIGlmIChJc0RvY3VtZW50QXZhaWxhYmxlKCkgJiYgISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbWFnZVVybCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW1hZ2VDb250YWluZXIgPSBuZXcgUmVjdGFuZ2xlKGAke3RoaXMubmFtZX1faW1hZ2VgKTtcclxuICAgICAgICAgICAgICAgIGltYWdlQ29udGFpbmVyLndpZHRoSW5QaXhlbHMgPSB0aGlzLmltYWdlU2l6ZUluUGl4ZWxzO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VDb250YWluZXIuaGVpZ2h0SW5QaXhlbHMgPSB0aGlzLmltYWdlU2l6ZUluUGl4ZWxzO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VDb250YWluZXIuY29sb3IgPSBcInRyYW5zcGFyZW50XCI7XHJcbiAgICAgICAgICAgICAgICB0b3RhbFBhbmVsV2lkdGhJblBpeGVscyAtPSB0aGlzLmltYWdlU2l6ZUluUGl4ZWxzO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5zb3VyY2UgPSB0aGlzLl9pbWFnZVVybDtcclxuXHJcbiAgICAgICAgICAgICAgICBpbWFnZUNvbnRhaW5lci5hZGRDb250cm9sKGltYWdlKTtcclxuICAgICAgICAgICAgICAgIHBhbmVsLmFkZENvbnRyb2woaW1hZ2VDb250YWluZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdGV4dCkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gbmV3IFRleHRCbG9jayhgJHt0aGlzLm5hbWV9X3RleHRgKTtcclxuICAgICAgICAgICAgdGV4dC50ZXh0ID0gdGhpcy5fdGV4dDtcclxuICAgICAgICAgICAgdGV4dC5jb2xvciA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgdGV4dC5mb250U2l6ZSA9IHRoaXMudGV4dFNpemVJblBpeGVscztcclxuICAgICAgICAgICAgdGV4dC53aWR0aEluUGl4ZWxzID0gdG90YWxQYW5lbFdpZHRoSW5QaXhlbHM7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5faW1hZ2VVcmwpIHtcclxuICAgICAgICAgICAgICAgIHRleHQudGV4dEhvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LnBhZGRpbmdMZWZ0SW5QaXhlbHMgPSBwYWRkaW5nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fc3VidGV4dCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dENvbnRhaW5lciA9IG5ldyBHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGFpbmVyLmFkZENvbHVtbkRlZmluaXRpb24oMSk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGFpbmVyLmFkZFJvd0RlZmluaXRpb24oMC41KTtcclxuICAgICAgICAgICAgICAgIHRleHRDb250YWluZXIuYWRkUm93RGVmaW5pdGlvbigwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGV4dENvbnRhaW5lci53aWR0aEluUGl4ZWxzID0gdG90YWxQYW5lbFdpZHRoSW5QaXhlbHM7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGFpbmVyLmhlaWdodEluUGl4ZWxzID0gNDU7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VidGV4dCA9IG5ldyBUZXh0QmxvY2soYCR7dGhpcy5uYW1lfV9zdWJ0ZXh0YCk7XHJcbiAgICAgICAgICAgICAgICBzdWJ0ZXh0LnRleHQgPSB0aGlzLl9zdWJ0ZXh0O1xyXG4gICAgICAgICAgICAgICAgc3VidGV4dC5jb2xvciA9IFwiI0VFRUVFRUFCXCI7XHJcbiAgICAgICAgICAgICAgICBzdWJ0ZXh0LmZvbnRTaXplID0gdGhpcy50ZXh0U2l6ZUluUGl4ZWxzICogMC43NTtcclxuICAgICAgICAgICAgICAgIHN1YnRleHQuZm9udFdlaWdodCA9IFwiNjAwXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ltYWdlVXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VidGV4dC50ZXh0SG9yaXpvbnRhbEFsaWdubWVudCA9IENvbnRyb2wuSE9SSVpPTlRBTF9BTElHTk1FTlRfTEVGVDtcclxuICAgICAgICAgICAgICAgICAgICBzdWJ0ZXh0LnBhZGRpbmdMZWZ0SW5QaXhlbHMgPSBwYWRkaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRleHRDb250YWluZXIuYWRkQ29udHJvbCh0ZXh0LCAwKTtcclxuICAgICAgICAgICAgICAgIHRleHRDb250YWluZXIuYWRkQ29udHJvbChzdWJ0ZXh0LCAxKTtcclxuICAgICAgICAgICAgICAgIHBhbmVsLmFkZENvbnRyb2wodGV4dENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYW5lbC5hZGRDb250cm9sKHRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZW50Q29udGFpbmVyLmFkZENvbnRyb2wocGFuZWwpO1xyXG4gICAgICAgIHJldHVybiBjb250ZW50Q29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1lc2ggYXNzb2NpYXRpb25cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfY3JlYXRlTm9kZShzY2VuZTogU2NlbmUpOiBUcmFuc2Zvcm1Ob2RlIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLm5hbWUgPz8gXCJUb3VjaEhvbG9ncmFwaGljQnV0dG9uXCI7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhY2tQbGF0ZU1lc2ggPSB0aGlzLl9jcmVhdGVCYWNrUGxhdGUoc2NlbmUpO1xyXG4gICAgICAgIGNvbnN0IGNvbGxpc2lvbk1lc2ggPSB0aGlzLl9jcmVhdGVGcm9udFBsYXRlKHNjZW5lKTtcclxuICAgICAgICBjb25zdCBpbm5lclF1YWRNZXNoID0gdGhpcy5fY3JlYXRlSW5uZXJRdWFkKHNjZW5lKTtcclxuICAgICAgICBjb25zdCBiYWNrR2xvd01lc2ggPSB0aGlzLl9jcmVhdGVCYWNrR2xvdyhzY2VuZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2Zyb250UGxhdGVDb2xsaXNpb25NZXNoID0gY29sbGlzaW9uTWVzaDtcclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUgPSA8TWVzaD5zdXBlci5fY3JlYXRlTm9kZShzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5fdGV4dFBsYXRlLm5hbWUgPSBgJHt0aGlzLm5hbWV9X3RleHRQbGF0ZWA7XHJcbiAgICAgICAgdGhpcy5fdGV4dFBsYXRlLmlzUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUuc2NhbGluZy54ID0gdGhpcy53aWR0aDtcclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUucGFyZW50ID0gY29sbGlzaW9uTWVzaDtcclxuXHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlID0gYmFja1BsYXRlTWVzaDtcclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUucG9zaXRpb24gPSBWZWN0b3IzLkZvcndhcmQoc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW0pLnNjYWxlKHRoaXMuYmFja1BsYXRlRGVwdGggLyAyKTtcclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUuaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUuYWRkQ2hpbGQoY29sbGlzaW9uTWVzaCk7XHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlLmFkZENoaWxkKGlubmVyUXVhZE1lc2gpO1xyXG5cclxuICAgICAgICBpZiAoYmFja0dsb3dNZXNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5hZGRDaGlsZChiYWNrR2xvd01lc2gpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdG4gPSBuZXcgVHJhbnNmb3JtTm9kZShgJHt0aGlzLm5hbWV9X3Jvb3RgLCBzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlLnNldFBhcmVudCh0bik7XHJcblxyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uTWVzaCA9IGNvbGxpc2lvbk1lc2g7XHJcbiAgICAgICAgdGhpcy5jb2xsaWRhYmxlRnJvbnREaXJlY3Rpb24gPSB0aGlzLl9iYWNrUGxhdGUuZm9yd2FyZC5uZWdhdGUoKTsgLy8gTWVzaCBpcyBmYWNpbmcgdGhlIHdyb25nIHdheVxyXG5cclxuICAgICAgICByZXR1cm4gdG47XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlQmFja1BsYXRlKHNjZW5lOiBTY2VuZSkge1xyXG4gICAgICAgIGNvbnN0IGJhY2tQbGF0ZU1lc2ggPSBDcmVhdGVCb3goYCR7dGhpcy5uYW1lfV9iYWNrUGxhdGVgLCB7fSwgc2NlbmUpO1xyXG4gICAgICAgIGJhY2tQbGF0ZU1lc2guaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIGJhY2tQbGF0ZU1lc2gudmlzaWJpbGl0eSA9IDA7XHJcbiAgICAgICAgYmFja1BsYXRlTWVzaC5zY2FsaW5nLnogPSAwLjI7XHJcblxyXG4gICAgICAgIFNjZW5lTG9hZGVyLkltcG9ydE1lc2hBc3luYyh1bmRlZmluZWQsIFRvdWNoSG9sb2dyYXBoaWNCdXR0b24uTVJUS19BU1NFVF9CQVNFX1VSTCwgVG91Y2hIb2xvZ3JhcGhpY0J1dHRvbi5CQUNLUExBVEVfTU9ERUxfRklMRU5BTUUsIHNjZW5lKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYmFja1BsYXRlTW9kZWwgPSByZXN1bHQubWVzaGVzWzFdO1xyXG4gICAgICAgICAgICBiYWNrUGxhdGVNb2RlbC52aXNpYmlsaXR5ID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0JhY2twbGF0ZVZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIGJhY2tQbGF0ZU1vZGVsLnZpc2liaWxpdHkgPSAxO1xyXG4gICAgICAgICAgICAgICAgYmFja1BsYXRlTW9kZWwubmFtZSA9IGAke3RoaXMubmFtZX1fYmFja1BsYXRlYDtcclxuICAgICAgICAgICAgICAgIGJhY2tQbGF0ZU1vZGVsLmlzUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJhY2tQbGF0ZU1vZGVsLnNjYWxpbmcueCA9IHRoaXMud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBiYWNrUGxhdGVNb2RlbC5zY2FsaW5nLnkgPSB0aGlzLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIGJhY2tQbGF0ZU1vZGVsLnBhcmVudCA9IGJhY2tQbGF0ZU1lc2g7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9iYWNrTWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgIGJhY2tQbGF0ZU1vZGVsLm1hdGVyaWFsID0gdGhpcy5fYmFja01hdGVyaWFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9iYWNrUGxhdGUgPSBiYWNrUGxhdGVNb2RlbDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJhY2tQbGF0ZU1lc2g7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlRnJvbnRQbGF0ZShzY2VuZTogU2NlbmUpIHtcclxuICAgICAgICBjb25zdCBjb2xsaXNpb25NZXNoID0gQ3JlYXRlQm94KFxyXG4gICAgICAgICAgICBgJHt0aGlzLm5hbWV9X2Zyb250UGxhdGVgLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBkZXB0aDogdGhpcy5mcm9udFBsYXRlRGVwdGgsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNjZW5lXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb2xsaXNpb25NZXNoLmlzUGlja2FibGUgPSB0cnVlO1xyXG4gICAgICAgIGNvbGxpc2lvbk1lc2guaXNOZWFyUGlja2FibGUgPSB0cnVlO1xyXG4gICAgICAgIGNvbGxpc2lvbk1lc2gudmlzaWJpbGl0eSA9IDA7XHJcbiAgICAgICAgY29sbGlzaW9uTWVzaC5wb3NpdGlvbiA9IFZlY3RvcjMuRm9yd2FyZChzY2VuZS51c2VSaWdodEhhbmRlZFN5c3RlbSkuc2NhbGUoKHRoaXMuYmFja1BsYXRlRGVwdGggLSB0aGlzLmZyb250UGxhdGVEZXB0aCkgLyAyKTtcclxuXHJcbiAgICAgICAgU2NlbmVMb2FkZXIuSW1wb3J0TWVzaEFzeW5jKHVuZGVmaW5lZCwgVG91Y2hIb2xvZ3JhcGhpY0J1dHRvbi5NUlRLX0FTU0VUX0JBU0VfVVJMLCBUb3VjaEhvbG9ncmFwaGljQnV0dG9uLkZST05UUExBVEVfTU9ERUxfRklMRU5BTUUsIHNjZW5lKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uUGxhdGUgPSBDcmVhdGVCb3goXHJcbiAgICAgICAgICAgICAgICBgJHt0aGlzLm5hbWV9X2NvbGxpc2lvblBsYXRlYCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNjZW5lXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNvbGxpc2lvblBsYXRlLmlzUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29sbGlzaW9uUGxhdGUuc2NhbGluZy56ID0gdGhpcy5mcm9udFBsYXRlRGVwdGg7XHJcbiAgICAgICAgICAgIGNvbGxpc2lvblBsYXRlLnZpc2liaWxpdHkgPSAwO1xyXG4gICAgICAgICAgICBjb2xsaXNpb25QbGF0ZS5wYXJlbnQgPSBjb2xsaXNpb25NZXNoO1xyXG4gICAgICAgICAgICB0aGlzLl9jb2xsaXNpb25QbGF0ZSA9IGNvbGxpc2lvblBsYXRlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZnJvbnRQbGF0ZU1vZGVsID0gcmVzdWx0Lm1lc2hlc1sxXTtcclxuICAgICAgICAgICAgZnJvbnRQbGF0ZU1vZGVsLm5hbWUgPSBgJHt0aGlzLm5hbWV9X2Zyb250UGxhdGVgO1xyXG4gICAgICAgICAgICBmcm9udFBsYXRlTW9kZWwuaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmcm9udFBsYXRlTW9kZWwuc2NhbGluZy54ID0gdGhpcy53aWR0aCAtIHRoaXMuYmFja0dsb3dPZmZzZXQ7XHJcbiAgICAgICAgICAgIGZyb250UGxhdGVNb2RlbC5zY2FsaW5nLnkgPSB0aGlzLmhlaWdodCAtIHRoaXMuYmFja0dsb3dPZmZzZXQ7XHJcbiAgICAgICAgICAgIGZyb250UGxhdGVNb2RlbC5wb3NpdGlvbiA9IFZlY3RvcjMuRm9yd2FyZChzY2VuZS51c2VSaWdodEhhbmRlZFN5c3RlbSkuc2NhbGUoLTAuNSk7XHJcbiAgICAgICAgICAgIGZyb250UGxhdGVNb2RlbC5wYXJlbnQgPSBjb2xsaXNpb25QbGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlQnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBmcm9udFBsYXRlTW9kZWwudmlzaWJpbGl0eSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9mcm9udE1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBmcm9udFBsYXRlTW9kZWwubWF0ZXJpYWwgPSB0aGlzLl9mcm9udE1hdGVyaWFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90ZXh0UGxhdGUuc2NhbGluZy54ID0gMTtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dFBsYXRlLnBhcmVudCA9IGZyb250UGxhdGVNb2RlbDtcclxuICAgICAgICAgICAgdGhpcy5fZnJvbnRQbGF0ZSA9IGZyb250UGxhdGVNb2RlbDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbGxpc2lvbk1lc2g7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlSW5uZXJRdWFkKHNjZW5lOiBTY2VuZSkge1xyXG4gICAgICAgIGNvbnN0IGlubmVyUXVhZE1lc2ggPSBDcmVhdGVCb3goYCR7dGhpcy5uYW1lfV9pbm5lclF1YWRgLCB7fSwgc2NlbmUpO1xyXG4gICAgICAgIGlubmVyUXVhZE1lc2guaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIGlubmVyUXVhZE1lc2gudmlzaWJpbGl0eSA9IDA7XHJcbiAgICAgICAgaW5uZXJRdWFkTWVzaC5zY2FsaW5nLnogPSB0aGlzLmZsYXRQbGFuZURlcHRoO1xyXG4gICAgICAgIGlubmVyUXVhZE1lc2gucG9zaXRpb24ueiArPSB0aGlzLmJhY2tQbGF0ZURlcHRoIC8gMiAtIHRoaXMuZmxhdFBsYW5lRGVwdGg7XHJcblxyXG4gICAgICAgIFNjZW5lTG9hZGVyLkltcG9ydE1lc2hBc3luYyh1bmRlZmluZWQsIFRvdWNoSG9sb2dyYXBoaWNCdXR0b24uTVJUS19BU1NFVF9CQVNFX1VSTCwgVG91Y2hIb2xvZ3JhcGhpY0J1dHRvbi5JTk5FUlFVQURfTU9ERUxfRklMRU5BTUUsIHNjZW5lKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5uZXJRdWFkTW9kZWwgPSByZXN1bHQubWVzaGVzWzFdO1xyXG4gICAgICAgICAgICBpbm5lclF1YWRNb2RlbC5uYW1lID0gYCR7dGhpcy5uYW1lfV9pbm5lclF1YWRgO1xyXG4gICAgICAgICAgICBpbm5lclF1YWRNb2RlbC5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlubmVyUXVhZE1vZGVsLnNjYWxpbmcueCA9IHRoaXMud2lkdGggLSB0aGlzLmJhY2tHbG93T2Zmc2V0O1xyXG4gICAgICAgICAgICBpbm5lclF1YWRNb2RlbC5zY2FsaW5nLnkgPSB0aGlzLmhlaWdodCAtIHRoaXMuYmFja0dsb3dPZmZzZXQ7XHJcbiAgICAgICAgICAgIGlubmVyUXVhZE1vZGVsLnBhcmVudCA9IGlubmVyUXVhZE1lc2g7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5faW5uZXJRdWFkTWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgIGlubmVyUXVhZE1vZGVsLm1hdGVyaWFsID0gdGhpcy5faW5uZXJRdWFkTWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2lubmVyUXVhZCA9IGlubmVyUXVhZE1vZGVsO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5uZXJRdWFkTWVzaDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jcmVhdGVCYWNrR2xvdyhzY2VuZTogU2NlbmUpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1RvZ2dsZUJ1dHRvbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBiYWNrR2xvd01lc2ggPSBDcmVhdGVCb3goYCR7dGhpcy5uYW1lfV9iYWNrR2xvd2AsIHt9LCBzY2VuZSk7XHJcbiAgICAgICAgYmFja0dsb3dNZXNoLmlzUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICBiYWNrR2xvd01lc2gudmlzaWJpbGl0eSA9IDA7XHJcbiAgICAgICAgYmFja0dsb3dNZXNoLnNjYWxpbmcueiA9IHRoaXMuZmxhdFBsYW5lRGVwdGg7XHJcbiAgICAgICAgYmFja0dsb3dNZXNoLnBvc2l0aW9uLnogKz0gdGhpcy5iYWNrUGxhdGVEZXB0aCAvIDIgLSB0aGlzLmZsYXRQbGFuZURlcHRoICogMjtcclxuXHJcbiAgICAgICAgU2NlbmVMb2FkZXIuSW1wb3J0TWVzaEFzeW5jKHVuZGVmaW5lZCwgVG91Y2hIb2xvZ3JhcGhpY0J1dHRvbi5NUlRLX0FTU0VUX0JBU0VfVVJMLCBUb3VjaEhvbG9ncmFwaGljQnV0dG9uLkJBQ0tHTE9XX01PREVMX0ZJTEVOQU1FLCBzY2VuZSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhY2tHbG93TW9kZWwgPSByZXN1bHQubWVzaGVzWzFdO1xyXG4gICAgICAgICAgICBiYWNrR2xvd01vZGVsLm5hbWUgPSBgJHt0aGlzLm5hbWV9X2JhY2tHbG93YDtcclxuICAgICAgICAgICAgYmFja0dsb3dNb2RlbC5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJhY2tHbG93TW9kZWwuc2NhbGluZy54ID0gdGhpcy53aWR0aCAtIHRoaXMuYmFja0dsb3dPZmZzZXQ7XHJcbiAgICAgICAgICAgIGJhY2tHbG93TW9kZWwuc2NhbGluZy55ID0gdGhpcy5oZWlnaHQgLSB0aGlzLmJhY2tHbG93T2Zmc2V0O1xyXG4gICAgICAgICAgICBiYWNrR2xvd01vZGVsLnBhcmVudCA9IGJhY2tHbG93TWVzaDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9iYWNrR2xvd01hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBiYWNrR2xvd01vZGVsLm1hdGVyaWFsID0gdGhpcy5fYmFja0dsb3dNYXRlcmlhbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fYmFja0dsb3cgPSBiYWNrR2xvd01vZGVsO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYmFja0dsb3dNZXNoO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYXBwbHlGYWNhZGUoZmFjYWRlVGV4dHVyZTogQWR2YW5jZWREeW5hbWljVGV4dHVyZSkge1xyXG4gICAgICAgIHRoaXMuX3BsYXRlTWF0ZXJpYWwuZW1pc3NpdmVUZXh0dXJlID0gZmFjYWRlVGV4dHVyZTtcclxuICAgICAgICB0aGlzLl9wbGF0ZU1hdGVyaWFsLm9wYWNpdHlUZXh0dXJlID0gZmFjYWRlVGV4dHVyZTtcclxuICAgICAgICB0aGlzLl9wbGF0ZU1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IHRoaXMucGxhdGVNYXRlcmlhbENvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3BlcmZvcm1DbGlja0FuaW1hdGlvbigpIHtcclxuICAgICAgICBjb25zdCBmcmFtZVJhdGUgPSA2MDtcclxuICAgICAgICBjb25zdCBhbmltYXRpb25Hcm91cCA9IG5ldyBBbmltYXRpb25Hcm91cChcIkNsaWNrIEFuaW1hdGlvbiBHcm91cFwiKTtcclxuXHJcbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJiYWNrR2xvd01vdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgbWVzaDogdGhpcy5fYmFja0dsb3csXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogXCJtYXRlcmlhbC5tb3Rpb25cIixcclxuICAgICAgICAgICAgICAgIGtleXM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFswLCAwLCAwXSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWU6IDIwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFsxLCAwLjAxNDQsIDAuMDE0NF0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lOiA0MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbMC4wMDI3NzEzMjI5NDg5NzYwNDc2LCAwLCAwXSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWU6IDQ1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFswLjAwMjc3MTMyMjk0ODk3NjA0NzZdLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9jb2xsaXNpb25QbGF0ZVpTbGlkZVwiLFxyXG4gICAgICAgICAgICAgICAgbWVzaDogdGhpcy5fY29sbGlzaW9uUGxhdGUsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogXCJwb3NpdGlvbi56XCIsXHJcbiAgICAgICAgICAgICAgICBrZXlzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbMC4wLCAwLjAsIDAuMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lOiAyMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbVmVjdG9yMy5Gb3J3YXJkKHRoaXMuX2NvbGxpc2lvblBsYXRlLl9zY2VuZS51c2VSaWdodEhhbmRlZFN5c3RlbSkuc2NhbGUodGhpcy5mcm9udFBsYXRlRGVwdGggLyAyKS56LCAwLjAsIDAuMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lOiA0MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbMC4wLCAwLjAwNTQwMzMzMjQ5Njc5NDMzMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lOiA0NSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbMC4wXSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJfY29sbGlzaW9uUGxhdGVaU2NhbGVcIixcclxuICAgICAgICAgICAgICAgIG1lc2g6IHRoaXMuX2NvbGxpc2lvblBsYXRlLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IFwic2NhbGluZy56XCIsXHJcbiAgICAgICAgICAgICAgICBrZXlzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbdGhpcy5mcm9udFBsYXRlRGVwdGgsIDAuMCwgMC4wXSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWU6IDIwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFt0aGlzLmJhY2tQbGF0ZURlcHRoLCAwLjAsIDAuMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lOiA0MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbdGhpcy5mcm9udFBsYXRlRGVwdGgsIDAuMDA1NF0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lOiA0NSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbdGhpcy5mcm9udFBsYXRlRGVwdGhdLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgYW5pbWF0aW9uIG9mIGFuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgYW5pbSA9IG5ldyBBbmltYXRpb24oYW5pbWF0aW9uLm5hbWUsIGFuaW1hdGlvbi5wcm9wZXJ0eSwgZnJhbWVSYXRlLCBBbmltYXRpb24uQU5JTUFUSU9OVFlQRV9GTE9BVCwgQW5pbWF0aW9uLkFOSU1BVElPTkxPT1BNT0RFX0NZQ0xFKTtcclxuICAgICAgICAgICAgY29uc3QgYW5pbWtleUZyYW1lcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgYW5pbWF0aW9uLmtleXMpIHtcclxuICAgICAgICAgICAgICAgIGFuaW1rZXlGcmFtZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJhbWU6IGtleS5mcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5LnZhbHVlc1swXSxcclxuICAgICAgICAgICAgICAgICAgICBpblRhbmdlbnQ6IGtleS52YWx1ZXNbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0VGFuZ2VudDoga2V5LnZhbHVlc1syXSxcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0aW9uOiBrZXkudmFsdWVzWzNdLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFuaW0uc2V0S2V5cyhhbmlta2V5RnJhbWVzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghYW5pbWF0aW9uLm1lc2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhbmltYXRpb25Hcm91cC5hZGRUYXJnZXRlZEFuaW1hdGlvbihhbmltLCBhbmltYXRpb24ubWVzaCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhbmltYXRpb25Hcm91cC5ub3JtYWxpemUoMCwgNDUpO1xyXG4gICAgICAgIGFuaW1hdGlvbkdyb3VwLnNwZWVkUmF0aW8gPSAxO1xyXG5cclxuICAgICAgICBhbmltYXRpb25Hcm91cC5wbGF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcGVyZm9ybUVudGVyRXhpdEFuaW1hdGlvbihzcGVlZFJhdGlvOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBmcmFtZVJhdGUgPSA2MDtcclxuICAgICAgICBjb25zdCBhbmltYXRpb25Hcm91cCA9IG5ldyBBbmltYXRpb25Hcm91cChcIkVudGVyIEV4aXQgQW5pbWF0aW9uIEdyb3VwXCIpO1xyXG5cclxuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcImZyb250UGxhdGVGYWRlT3V0XCIsXHJcbiAgICAgICAgICAgICAgICBtZXNoOiB0aGlzLl9mcm9udFBsYXRlLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IFwibWF0ZXJpYWwuZmFkZU91dFwiLFxyXG4gICAgICAgICAgICAgICAga2V5czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWU6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogWzAsIDAsIDAuMDI1MDQ1MzE0ODMwMDE3Njg2LCAwXSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWU6IDQwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFsxLjAwMjA1NTk5NTcwMDEyLCAwLjAyNTA0NTMxNDgzMDAxNzY4NiwgMCwgMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwidGV4dFBsYXRlWlNsaWRlXCIsXHJcbiAgICAgICAgICAgICAgICBtZXNoOiB0aGlzLl90ZXh0UGxhdGUsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogXCJwb3NpdGlvbi56XCIsXHJcbiAgICAgICAgICAgICAgICBrZXlzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbMCwgMC4wLCAwLjBdLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZTogNDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogW1ZlY3RvcjMuRm9yd2FyZCh0aGlzLl90ZXh0UGxhdGUuX3NjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtKS5zY2FsZSgtMC4xNSkueiwgMC4wLCAwLjBdLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgYW5pbWF0aW9uIG9mIGFuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgYW5pbSA9IG5ldyBBbmltYXRpb24oYW5pbWF0aW9uLm5hbWUsIGFuaW1hdGlvbi5wcm9wZXJ0eSwgZnJhbWVSYXRlLCBBbmltYXRpb24uQU5JTUFUSU9OVFlQRV9GTE9BVCwgQW5pbWF0aW9uLkFOSU1BVElPTkxPT1BNT0RFX0NZQ0xFKTtcclxuICAgICAgICAgICAgY29uc3QgYW5pbWtleUZyYW1lcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgYW5pbWF0aW9uLmtleXMpIHtcclxuICAgICAgICAgICAgICAgIGFuaW1rZXlGcmFtZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJhbWU6IGtleS5mcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5LnZhbHVlc1swXSxcclxuICAgICAgICAgICAgICAgICAgICBpblRhbmdlbnQ6IGtleS52YWx1ZXNbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0VGFuZ2VudDoga2V5LnZhbHVlc1syXSxcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0aW9uOiBrZXkudmFsdWVzWzNdLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFuaW0uc2V0S2V5cyhhbmlta2V5RnJhbWVzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghYW5pbWF0aW9uLm1lc2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhbmltYXRpb25Hcm91cC5hZGRUYXJnZXRlZEFuaW1hdGlvbihhbmltLCBhbmltYXRpb24ubWVzaCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhbmltYXRpb25Hcm91cC5ub3JtYWxpemUoMCwgNDUpO1xyXG4gICAgICAgIGFuaW1hdGlvbkdyb3VwLnNwZWVkUmF0aW8gPSBzcGVlZFJhdGlvO1xyXG5cclxuICAgICAgICBhbmltYXRpb25Hcm91cC5wbGF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlQmFja01hdGVyaWFsKG1lc2g6IE1lc2gpIHtcclxuICAgICAgICB0aGlzLl9iYWNrTWF0ZXJpYWwgPSB0aGlzLl9iYWNrTWF0ZXJpYWwgPz8gbmV3IE1SRExCYWNrcGxhdGVNYXRlcmlhbCh0aGlzLm5hbWUgKyBcImJhY2tQbGF0ZU1hdGVyaWFsXCIsIG1lc2guZ2V0U2NlbmUoKSk7XHJcbiAgICAgICAgdGhpcy5fYmFja01hdGVyaWFsLmFic29sdXRlU2l6ZXMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2JhY2tNYXRlcmlhbC5yYWRpdXMgPSB0aGlzLnJhZGl1cztcclxuICAgICAgICB0aGlzLl9iYWNrTWF0ZXJpYWwubGluZVdpZHRoID0gMC4wMjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jcmVhdGVGcm9udE1hdGVyaWFsKG1lc2g6IE1lc2gpIHtcclxuICAgICAgICB0aGlzLl9mcm9udE1hdGVyaWFsID0gdGhpcy5fZnJvbnRNYXRlcmlhbCA/PyBuZXcgTVJETEZyb250cGxhdGVNYXRlcmlhbCh0aGlzLm5hbWUgKyBcIkZyb250IE1hdGVyaWFsXCIsIG1lc2guZ2V0U2NlbmUoKSk7XHJcbiAgICAgICAgdGhpcy5mcm9udE1hdGVyaWFsLnJhZGl1cyA9IHRoaXMuaW5uZXJRdWFkUmFkaXVzO1xyXG4gICAgICAgIHRoaXMuZnJvbnRNYXRlcmlhbC5mYWRlT3V0ID0gMC4wO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NyZWF0ZUJhY2tHbG93TWF0ZXJpYWwobWVzaDogTWVzaCkge1xyXG4gICAgICAgIGNvbnN0IGdsb3dSYWRpdXMgPSB0aGlzLnJhZGl1cyArIDAuMDQ7XHJcbiAgICAgICAgdGhpcy5fYmFja0dsb3dNYXRlcmlhbCA9IHRoaXMuX2JhY2tHbG93TWF0ZXJpYWwgPz8gbmV3IE1SRExCYWNrZ2xvd01hdGVyaWFsKHRoaXMubmFtZSArIFwiQmFjayBHbG93IE1hdGVyaWFsXCIsIG1lc2guZ2V0U2NlbmUoKSk7XHJcbiAgICAgICAgdGhpcy5fYmFja0dsb3dNYXRlcmlhbC5iZXZlbFJhZGl1cyA9IGdsb3dSYWRpdXM7XHJcbiAgICAgICAgdGhpcy5fYmFja0dsb3dNYXRlcmlhbC5saW5lV2lkdGggPSBnbG93UmFkaXVzO1xyXG4gICAgICAgIHRoaXMuX2JhY2tHbG93TWF0ZXJpYWwubW90aW9uID0gMC4wO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NyZWF0ZUlubmVyUXVhZE1hdGVyaWFsKG1lc2g6IE1lc2gpIHtcclxuICAgICAgICB0aGlzLl9pbm5lclF1YWRNYXRlcmlhbCA9IHRoaXMuX2lubmVyUXVhZE1hdGVyaWFsID8/IG5ldyBNUkRMSW5uZXJxdWFkTWF0ZXJpYWwoXCJpbm5lcl9xdWFkXCIsIG1lc2guZ2V0U2NlbmUoKSk7XHJcbiAgICAgICAgdGhpcy5faW5uZXJRdWFkTWF0ZXJpYWwucmFkaXVzID0gdGhpcy5pbm5lclF1YWRSYWRpdXM7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lubmVyUXVhZE1hdGVyaWFsLmNvbG9yID0gdGhpcy5pbm5lclF1YWRDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlUGxhdGVNYXRlcmlhbChtZXNoOiBNZXNoKSB7XHJcbiAgICAgICAgdGhpcy5fcGxhdGVNYXRlcmlhbCA9IHRoaXMuX3BsYXRlTWF0ZXJpYWwgPz8gbmV3IFN0YW5kYXJkTWF0ZXJpYWwodGhpcy5uYW1lICsgXCJQbGF0ZSBNYXRlcmlhbFwiLCBtZXNoLmdldFNjZW5lKCkpO1xyXG4gICAgICAgIHRoaXMuX3BsYXRlTWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IENvbG9yMy5CbGFjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfb25Ub2dnbGUobmV3U3RhdGU6IGJvb2xlYW4pIHtcclxuICAgICAgICBzdXBlci5fb25Ub2dnbGUobmV3U3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYWZmZWN0TWF0ZXJpYWwobWVzaDogTWVzaCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zaGFyZU1hdGVyaWFscykge1xyXG4gICAgICAgICAgICAvLyBCYWNrXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faG9zdC5fdG91Y2hTaGFyZWRNYXRlcmlhbHNbXCJtcmRsQmFja3BsYXRlTWF0ZXJpYWxcIl0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUJhY2tNYXRlcmlhbChtZXNoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3QuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzW1wibXJkbEJhY2twbGF0ZU1hdGVyaWFsXCJdID0gdGhpcy5fYmFja01hdGVyaWFsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFja01hdGVyaWFsID0gdGhpcy5faG9zdC5fdG91Y2hTaGFyZWRNYXRlcmlhbHNbXCJtcmRsQmFja3BsYXRlTWF0ZXJpYWxcIl0gYXMgTVJETEJhY2twbGF0ZU1hdGVyaWFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBGcm9udFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2hvc3QuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzW1wibXJkbEZyb250cGxhdGVNYXRlcmlhbFwiXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlRnJvbnRNYXRlcmlhbChtZXNoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3QuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzW1wibXJkbEZyb250cGxhdGVNYXRlcmlhbFwiXSA9IHRoaXMuX2Zyb250TWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcm9udE1hdGVyaWFsID0gdGhpcy5faG9zdC5fdG91Y2hTaGFyZWRNYXRlcmlhbHNbXCJtcmRsRnJvbnRwbGF0ZU1hdGVyaWFsXCJdIGFzIE1SRExGcm9udHBsYXRlTWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEJhY2sgZ2xvd1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2hvc3QuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzW1wibXJkbEJhY2tnbG93TWF0ZXJpYWxcIl0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUJhY2tHbG93TWF0ZXJpYWwobWVzaCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3N0Ll90b3VjaFNoYXJlZE1hdGVyaWFsc1tcIm1yZGxCYWNrZ2xvd01hdGVyaWFsXCJdID0gdGhpcy5fYmFja0dsb3dNYXRlcmlhbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhY2tHbG93TWF0ZXJpYWwgPSB0aGlzLl9ob3N0Ll90b3VjaFNoYXJlZE1hdGVyaWFsc1tcIm1yZGxCYWNrZ2xvd01hdGVyaWFsXCJdIGFzIE1SRExCYWNrZ2xvd01hdGVyaWFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbm5lciBxdWFkXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faG9zdC5fdG91Y2hTaGFyZWRNYXRlcmlhbHNbXCJtcmRsSW5uZXJRdWFkTWF0ZXJpYWxcIl0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUlubmVyUXVhZE1hdGVyaWFsKG1lc2gpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faG9zdC5fdG91Y2hTaGFyZWRNYXRlcmlhbHNbXCJtcmRsSW5uZXJRdWFkTWF0ZXJpYWxcIl0gPSB0aGlzLl9pbm5lclF1YWRNYXRlcmlhbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lubmVyUXVhZE1hdGVyaWFsID0gdGhpcy5faG9zdC5fdG91Y2hTaGFyZWRNYXRlcmlhbHNbXCJtcmRsSW5uZXJRdWFkTWF0ZXJpYWxcIl0gYXMgTVJETElubmVycXVhZE1hdGVyaWFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlQmFja01hdGVyaWFsKG1lc2gpO1xyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVGcm9udE1hdGVyaWFsKG1lc2gpO1xyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVCYWNrR2xvd01hdGVyaWFsKG1lc2gpO1xyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVJbm5lclF1YWRNYXRlcmlhbChtZXNoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2NyZWF0ZVBsYXRlTWF0ZXJpYWwobWVzaCk7XHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlLm1hdGVyaWFsID0gdGhpcy5fYmFja01hdGVyaWFsO1xyXG4gICAgICAgIHRoaXMuX3RleHRQbGF0ZS5tYXRlcmlhbCA9IHRoaXMuX3BsYXRlTWF0ZXJpYWw7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5faXNCYWNrcGxhdGVWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tQbGF0ZS52aXNpYmlsaXR5ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9mcm9udFBsYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zyb250UGxhdGUubWF0ZXJpYWwgPSB0aGlzLl9mcm9udE1hdGVyaWFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tHbG93KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tHbG93Lm1hdGVyaWFsID0gdGhpcy5fYmFja0dsb3dNYXRlcmlhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pbm5lclF1YWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5uZXJRdWFkLm1hdGVyaWFsID0gdGhpcy5faW5uZXJRdWFkTWF0ZXJpYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9yZWJ1aWxkQ29udGVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVsZWFzZXMgYWxsIGFzc29jaWF0ZWQgcmVzb3VyY2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCkge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTsgLy8gd2lsbCBkaXNwb3NlIG1haW4gbWVzaCBpZS4gYmFjayBwbGF0ZVxyXG5cclxuICAgICAgICB0aGlzLl9kaXNwb3NlVG9vbHRpcCgpO1xyXG4gICAgICAgIHRoaXMub25Qb2ludGVyQ2xpY2tPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9wb2ludGVyQ2xpY2tPYnNlcnZlcik7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJFbnRlck9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3BvaW50ZXJFbnRlck9ic2VydmVyKTtcclxuICAgICAgICB0aGlzLm9uUG9pbnRlck91dE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3BvaW50ZXJPdXRPYnNlcnZlcik7XHJcbiAgICAgICAgdGhpcy5vblRvZ2dsZU9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3RvZ2dsZU9ic2VydmVyKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnNoYXJlTWF0ZXJpYWxzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tNYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zyb250TWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9wbGF0ZU1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5fYmFja0dsb3dNYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lubmVyUXVhZE1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9waWNrZWRQb2ludE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3N0Lm9uUGlja2VkUG9pbnRDaGFuZ2VkT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fcGlja2VkUG9pbnRPYnNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9waWNrZWRQb2ludE9ic2VydmVyID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUcmFuc2Zvcm1Ob2RlIH0gZnJvbSBcImNvcmUvTWVzaGVzL3RyYW5zZm9ybU5vZGVcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcbmltcG9ydCB7IENvbnRlbnREaXNwbGF5M0QgfSBmcm9tIFwiLi9jb250ZW50RGlzcGxheTNEXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCBhcyBhIHJvb3QgdG8gYWxsIGJ1dHRvbnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBYnN0cmFjdEJ1dHRvbjNEIGV4dGVuZHMgQ29udGVudERpc3BsYXkzRCB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJBYnN0cmFjdEJ1dHRvbjNEXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWVzaCBhc3NvY2lhdGlvblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9jcmVhdGVOb2RlKHNjZW5lOiBTY2VuZSk6IFRyYW5zZm9ybU5vZGUge1xyXG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNmb3JtTm9kZShcImJ1dHRvblwiICsgdGhpcy5uYW1lLCBzY2VuZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB0eXBlIHsgVHJhbnNmb3JtTm9kZSB9IGZyb20gXCJjb3JlL01lc2hlcy90cmFuc2Zvcm1Ob2RlXCI7XHJcbmltcG9ydCB0eXBlIHsgQWJzdHJhY3RNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL2Fic3RyYWN0TWVzaFwiO1xyXG5pbXBvcnQgeyBDcmVhdGVCb3ggfSBmcm9tIFwiY29yZS9NZXNoZXMvQnVpbGRlcnMvYm94QnVpbGRlclwiO1xyXG5pbXBvcnQgdHlwZSB7IE1hdGVyaWFsIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IFN0YW5kYXJkTWF0ZXJpYWwgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvc3RhbmRhcmRNYXRlcmlhbFwiO1xyXG5pbXBvcnQgdHlwZSB7IFNjZW5lIH0gZnJvbSBcImNvcmUvc2NlbmVcIjtcclxuXHJcbmltcG9ydCB7IEFic3RyYWN0QnV0dG9uM0QgfSBmcm9tIFwiLi9hYnN0cmFjdEJ1dHRvbjNEXCI7XHJcbmltcG9ydCB0eXBlIHsgQWR2YW5jZWREeW5hbWljVGV4dHVyZSB9IGZyb20gXCIuLi8uLi8yRC9hZHZhbmNlZER5bmFtaWNUZXh0dXJlXCI7XHJcbmltcG9ydCB7IENvbG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguY29sb3JcIjtcclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIGEgYnV0dG9uIGluIDNEXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElCdXR0b24zRENyZWF0aW9uT3B0aW9ucyB7XHJcbiAgICAvKipcclxuICAgICAqIFdpZHRoIG9mIHRoZSBidXR0b24uIERlZmF1bHQ6IDFcclxuICAgICAqL1xyXG4gICAgd2lkdGg/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWlnaHQgb2YgdGhlIGJ1dHRvbi4gRGVmYXVsdDogMVxyXG4gICAgICovXHJcbiAgICBoZWlnaHQ/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXB0aCBvZiB0aGUgYnV0dG9uLiBEZWZhdWx0OiAwLjA4XHJcbiAgICAgKi9cclxuICAgIGRlcHRoPzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBjcmVhdGUgYSBidXR0b24gaW4gM0RcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCdXR0b24zRCBleHRlbmRzIEFic3RyYWN0QnV0dG9uM0Qge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9jdXJyZW50TWF0ZXJpYWw6IE1hdGVyaWFsO1xyXG5cclxuICAgIHByb3RlY3RlZCBfb3B0aW9uczogSUJ1dHRvbjNEQ3JlYXRpb25PcHRpb25zO1xyXG4gICAgcHJvdGVjdGVkIF9oZWlnaHQ6IG51bWJlcjtcclxuICAgIHByb3RlY3RlZCBfZGVwdGg6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIGRlZmluZXMgdGhlIG9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhlIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lPzogc3RyaW5nLCBvcHRpb25zPzogSUJ1dHRvbjNEQ3JlYXRpb25PcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDEsXHJcbiAgICAgICAgICAgIGRlcHRoOiAwLjA4LFxyXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIERlZmF1bHQgYW5pbWF0aW9uc1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJFbnRlckFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1lc2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAoPFN0YW5kYXJkTWF0ZXJpYWw+dGhpcy5fY3VycmVudE1hdGVyaWFsKS5lbWlzc2l2ZUNvbG9yID0gQ29sb3IzLlJlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlck91dEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgKDxTdGFuZGFyZE1hdGVyaWFsPnRoaXMuX2N1cnJlbnRNYXRlcmlhbCkuZW1pc3NpdmVDb2xvciA9IENvbG9yMy5CbGFjaygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlckRvd25BbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tZXNoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubWVzaC5zY2FsaW5nLnNjYWxlSW5QbGFjZSgwLjk1KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJVcEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1lc2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5tZXNoLnNjYWxpbmcuc2NhbGVJblBsYWNlKDEuMCAvIDAuOTUpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSB0aGUgZmFjYWRlIHRleHR1cmUgKGNyZWF0ZWQgZnJvbSB0aGUgY29udGVudCBwcm9wZXJ0eSkuXHJcbiAgICAgKiBAcGFyYW0gZmFjYWRlVGV4dHVyZSBkZWZpbmVzIHRoZSBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIHRvIHVzZVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FwcGx5RmFjYWRlKGZhY2FkZVRleHR1cmU6IEFkdmFuY2VkRHluYW1pY1RleHR1cmUpIHtcclxuICAgICAgICAoPGFueT50aGlzLl9jdXJyZW50TWF0ZXJpYWwpLmVtaXNzaXZlVGV4dHVyZSA9IGZhY2FkZVRleHR1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkJ1dHRvbjNEXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWVzaCBhc3NvY2lhdGlvblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9jcmVhdGVOb2RlKHNjZW5lOiBTY2VuZSk6IFRyYW5zZm9ybU5vZGUge1xyXG4gICAgICAgIGNvbnN0IGZhY2VVViA9IG5ldyBBcnJheSg2KTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuICAgICAgICAgICAgZmFjZVVWW2ldID0gbmV3IFZlY3RvcjQoMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzY2VuZS51c2VSaWdodEhhbmRlZFN5c3RlbSkge1xyXG4gICAgICAgICAgICAvLyBGbGlwIHRoZSB1IG9uIHRoZSB0ZXh0dXJlXHJcbiAgICAgICAgICAgIGZhY2VVVlswXS5jb3B5RnJvbUZsb2F0cygxLCAwLCAwLCAxKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmYWNlVVZbMV0uY29weUZyb21GbG9hdHMoMCwgMCwgMSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtZXNoID0gQ3JlYXRlQm94KFxyXG4gICAgICAgICAgICB0aGlzLm5hbWUgKyBcIl9yb290TWVzaFwiLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5fb3B0aW9ucy53aWR0aCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5fb3B0aW9ucy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBkZXB0aDogdGhpcy5fb3B0aW9ucy5kZXB0aCxcclxuICAgICAgICAgICAgICAgIGZhY2VVVjogZmFjZVVWLFxyXG4gICAgICAgICAgICAgICAgd3JhcDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2NlbmVcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250ZW50U2NhbGVSYXRpb1kgPSAodGhpcy5fY29udGVudFNjYWxlUmF0aW8gKiB0aGlzLl9vcHRpb25zLndpZHRoISkgLyB0aGlzLl9vcHRpb25zLmhlaWdodCE7XHJcbiAgICAgICAgdGhpcy5fc2V0RmFjYWRlVGV4dHVyZVNjYWxpbmcoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1lc2g7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9hZmZlY3RNYXRlcmlhbChtZXNoOiBBYnN0cmFjdE1lc2gpIHtcclxuICAgICAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBTdGFuZGFyZE1hdGVyaWFsKHRoaXMubmFtZSArIFwiTWF0ZXJpYWxcIiwgbWVzaC5nZXRTY2VuZSgpKTtcclxuICAgICAgICBtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gQ29sb3IzLkJsYWNrKCk7XHJcblxyXG4gICAgICAgIG1lc2gubWF0ZXJpYWwgPSBtYXRlcmlhbDtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWF0ZXJpYWwgPSBtYXRlcmlhbDtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVzZXRDb250ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWxlYXNlcyBhbGwgYXNzb2NpYXRlZCByZXNvdXJjZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG5cclxuICAgICAgICB0aGlzLl9kaXNwb3NlRmFjYWRlVGV4dHVyZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY3VycmVudE1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgeyBUcmFuc2Zvcm1Ob2RlIH0gZnJvbSBcImNvcmUvTWVzaGVzL3RyYW5zZm9ybU5vZGVcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sM0QgfSBmcm9tIFwiLi9jb250cm9sM0RcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSBjb250YWluZXJzIGZvciBjb250cm9sc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbnRhaW5lcjNEIGV4dGVuZHMgQ29udHJvbDNEIHtcclxuICAgIHByaXZhdGUgX2Jsb2NrTGF5b3V0ID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBsaXN0IG9mIGNoaWxkIGNvbnRyb2xzXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfY2hpbGRyZW4gPSBuZXcgQXJyYXk8Q29udHJvbDNEPigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbGlzdCBvZiBjaGlsZCBjb250cm9sc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGNoaWxkcmVuKCk6IEFycmF5PENvbnRyb2wzRD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgbGF5b3V0IG11c3QgYmUgYmxvY2tlZCAoZGVmYXVsdCBpcyBmYWxzZSkuXHJcbiAgICAgKiBUaGlzIGlzIGhlbHBmdWwgdG8gb3B0aW1pemUgbGF5b3V0IG9wZXJhdGlvbiB3aGVuIGFkZGluZyBtdWx0aXBsZSBjaGlsZHJlbiBpbiBhIHJvd1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGJsb2NrTGF5b3V0KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ibG9ja0xheW91dDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJsb2NrTGF5b3V0KHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Jsb2NrTGF5b3V0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9ibG9ja0xheW91dCA9IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX2Jsb2NrTGF5b3V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FycmFuZ2VDaGlsZHJlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29udGFpbmVyXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250YWluZXIgbmFtZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JjZSB0aGUgY29udGFpbmVyIHRvIHVwZGF0ZSB0aGUgbGF5b3V0LiBQbGVhc2Ugbm90ZSB0aGF0IGl0IHdpbGwgbm90IHRha2UgYmxvY2tMYXlvdXQgcHJvcGVydHkgaW4gYWNjb3VudFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgY29udGFpbmVyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQoKTogQ29udGFpbmVyM0Qge1xyXG4gICAgICAgIHRoaXMuX2FycmFuZ2VDaGlsZHJlbigpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgZ2l2ZW4gY29udHJvbCBpcyBpbiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBjb250cm9sXHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBkZWZpbmVzIHRoZSBjb250cm9sIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBjb250cm9sIGlzIGluIHRoZSBjaGlsZCBsaXN0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb250YWluc0NvbnRyb2woY29udHJvbDogQ29udHJvbDNEKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmluZGV4T2YoY29udHJvbCkgIT09IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIGNvbnRyb2wgdG8gdGhlIGNoaWxkcmVuIG9mIHRoaXMgY29udHJvbFxyXG4gICAgICogQHBhcmFtIGNvbnRyb2wgZGVmaW5lcyB0aGUgY29udHJvbCB0byBhZGRcclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IGNvbnRhaW5lclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkQ29udHJvbChjb250cm9sOiBDb250cm9sM0QpOiBDb250YWluZXIzRCB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9jaGlsZHJlbi5pbmRleE9mKGNvbnRyb2wpO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250cm9sLnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgY29udHJvbC5faG9zdCA9IHRoaXMuX2hvc3Q7XHJcblxyXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goY29udHJvbCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9ob3N0LnV0aWxpdHlMYXllcikge1xyXG4gICAgICAgICAgICBjb250cm9sLl9wcmVwYXJlTm9kZSh0aGlzLl9ob3N0LnV0aWxpdHlMYXllci51dGlsaXR5TGF5ZXJTY2VuZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udHJvbC5ub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLm5vZGUucGFyZW50ID0gdGhpcy5ub2RlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYmxvY2tMYXlvdXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FycmFuZ2VDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgZXZlcnl0aW1lIGEgbmV3IGNvbnRyb2wgaXMgYWRkZWRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9hcnJhbmdlQ2hpbGRyZW4oKSB7fVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfY3JlYXRlTm9kZShzY2VuZTogU2NlbmUpOiBOdWxsYWJsZTxUcmFuc2Zvcm1Ob2RlPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1Ob2RlKFwiQ29udGFpbmVyTm9kZVwiLCBzY2VuZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgY29udHJvbCBmcm9tIHRoZSBjaGlsZHJlbiBvZiB0aGlzIGNvbnRyb2xcclxuICAgICAqIEBwYXJhbSBjb250cm9sIGRlZmluZXMgdGhlIGNvbnRyb2wgdG8gcmVtb3ZlXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBjb250YWluZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZUNvbnRyb2woY29udHJvbDogQ29udHJvbDNEKTogQ29udGFpbmVyM0Qge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fY2hpbGRyZW4uaW5kZXhPZihjb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cclxuICAgICAgICAgICAgY29udHJvbC5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICBjb250cm9sLl9kaXNwb3NlTm9kZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkNvbnRhaW5lcjNEXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWxlYXNlcyBhbGwgYXNzb2NpYXRlZCByZXNvdXJjZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBjb250cm9sIG9mIHRoaXMuX2NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4ubGVuZ3RoID0gMDtcclxuXHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBDb250cm9sIHJvdGF0aW9uIHdpbGwgcmVtYWluIHVuY2hhbmdlZCAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVU5TRVRfT1JJRU5UQVRJT04gPSAwO1xyXG5cclxuICAgIC8qKiBDb250cm9sIHdpbGwgcm90YXRlIHRvIG1ha2UgaXQgbG9vayBhdCBzcGhlcmUgY2VudHJhbCBheGlzICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEZBQ0VPUklHSU5fT1JJRU5UQVRJT04gPSAxO1xyXG5cclxuICAgIC8qKiBDb250cm9sIHdpbGwgcm90YXRlIHRvIG1ha2UgaXQgbG9vayBiYWNrIGF0IHNwaGVyZSBjZW50cmFsIGF4aXMgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRkFDRU9SSUdJTlJFVkVSU0VEX09SSUVOVEFUSU9OID0gMjtcclxuXHJcbiAgICAvKiogQ29udHJvbCB3aWxsIHJvdGF0ZSB0byBsb29rIGF0IHogYXhpcyAoMCwgMCwgMSkgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRkFDRUZPUldBUkRfT1JJRU5UQVRJT04gPSAzO1xyXG5cclxuICAgIC8qKiBDb250cm9sIHdpbGwgcm90YXRlIHRvIGxvb2sgYXQgbmVnYXRpdmUgeiBheGlzICgwLCAwLCAtMSkgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRkFDRUZPUldBUkRSRVZFUlNFRF9PUklFTlRBVElPTiA9IDQ7XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBDb250cm9sIH0gZnJvbSBcIi4uLy4uLzJEL2NvbnRyb2xzL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgQWR2YW5jZWREeW5hbWljVGV4dHVyZSB9IGZyb20gXCIuLi8uLi8yRC9hZHZhbmNlZER5bmFtaWNUZXh0dXJlXCI7XHJcbmltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgeyBDb250cm9sM0QgfSBmcm9tIFwiLi9jb250cm9sM0RcIjtcclxuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9UZXh0dXJlcy90ZXh0dXJlXCI7XHJcblxyXG4vKipcclxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGNvbnRyb2xzIHRoYXQgZGlzcGxheSBjb250ZW50XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29udGVudERpc3BsYXkzRCBleHRlbmRzIENvbnRyb2wzRCB7XHJcbiAgICBwcml2YXRlIF9jb250ZW50OiBDb250cm9sO1xyXG4gICAgcHJpdmF0ZSBfZmFjYWRlVGV4dHVyZTogTnVsbGFibGU8QWR2YW5jZWREeW5hbWljVGV4dHVyZT47XHJcbiAgICBwcm90ZWN0ZWQgX2NvbnRlbnRSZXNvbHV0aW9uID0gNTEyO1xyXG4gICAgcHJvdGVjdGVkIF9jb250ZW50U2NhbGVSYXRpbyA9IDI7XHJcbiAgICBwcm90ZWN0ZWQgX2NvbnRlbnRTY2FsZVJhdGlvWT86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgR1VJIDJEIGNvbnRlbnQgdXNlZCB0byBkaXNwbGF5IHRoZSBidXR0b24ncyBmYWNhZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBjb250ZW50KCk6IENvbnRyb2wge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgY29udGVudCh2YWx1ZTogQ29udHJvbCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKCF2YWx1ZSB8fCAhdGhpcy5faG9zdCB8fCAhdGhpcy5faG9zdC51dGlsaXR5TGF5ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9mYWNhZGVUZXh0dXJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhY2FkZVRleHR1cmUgPSBuZXcgQWR2YW5jZWREeW5hbWljVGV4dHVyZShcclxuICAgICAgICAgICAgICAgIFwiRmFjYWRlXCIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50UmVzb2x1dGlvbixcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRSZXNvbHV0aW9uLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5faG9zdC51dGlsaXR5TGF5ZXIudXRpbGl0eUxheWVyU2NlbmUsXHJcbiAgICAgICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAgICAgVGV4dHVyZS5UUklMSU5FQVJfU0FNUExJTkdNT0RFXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldEZhY2FkZVRleHR1cmVTY2FsaW5nKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhY2FkZVRleHR1cmUucHJlbXVsQWxwaGEgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhY2FkZVRleHR1cmUucm9vdENvbnRhaW5lci5jbGVhckNvbnRyb2xzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9mYWNhZGVUZXh0dXJlLmFkZENvbnRyb2wodmFsdWUpO1xyXG5cclxuICAgICAgICB0aGlzLl9hcHBseUZhY2FkZSh0aGlzLl9mYWNhZGVUZXh0dXJlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3NldEZhY2FkZVRleHR1cmVTY2FsaW5nKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9mYWNhZGVUZXh0dXJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhY2FkZVRleHR1cmUucm9vdENvbnRhaW5lci5zY2FsZVggPSB0aGlzLl9jb250ZW50U2NhbGVSYXRpbztcclxuICAgICAgICAgICAgdGhpcy5fZmFjYWRlVGV4dHVyZS5yb290Q29udGFpbmVyLnNjYWxlWSA9IHRoaXMuX2NvbnRlbnRTY2FsZVJhdGlvWSA/PyB0aGlzLl9jb250ZW50U2NhbGVSYXRpbztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRleHR1cmUgcmVzb2x1dGlvbiB1c2VkIHRvIHJlbmRlciBjb250ZW50ICg1MTIgYnkgZGVmYXVsdClcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBjb250ZW50UmVzb2x1dGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50UmVzb2x1dGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGNvbnRlbnRSZXNvbHV0aW9uKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fY29udGVudFJlc29sdXRpb24gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRSZXNvbHV0aW9uID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fcmVzZXRDb250ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9kaXNwb3NlRmFjYWRlVGV4dHVyZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZmFjYWRlVGV4dHVyZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9mYWNhZGVUZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5fZmFjYWRlVGV4dHVyZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfcmVzZXRDb250ZW50KCkge1xyXG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VGYWNhZGVUZXh0dXJlKCk7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy5fY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IHRoZSBmYWNhZGUgdGV4dHVyZSAoY3JlYXRlZCBmcm9tIHRoZSBjb250ZW50IHByb3BlcnR5KS5cclxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIG92ZXJsb2FkZWQgYnkgY2hpbGQgY2xhc3Nlc1xyXG4gICAgICogQHBhcmFtIGZhY2FkZVRleHR1cmUgZGVmaW5lcyB0aGUgQWR2YW5jZWREeW5hbWljVGV4dHVyZSB0byB1c2VcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgcHJvdGVjdGVkIF9hcHBseUZhY2FkZShmYWNhZGVUZXh0dXJlOiBBZHZhbmNlZER5bmFtaWNUZXh0dXJlKSB7fVxyXG59XHJcbiIsImltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgeyBQb2ludGVyRXZlbnRUeXBlcyB9IGZyb20gXCJjb3JlL0V2ZW50cy9wb2ludGVyRXZlbnRzXCI7XHJcbmltcG9ydCB0eXBlIHsgVHJhbnNmb3JtTm9kZSB9IGZyb20gXCJjb3JlL01lc2hlcy90cmFuc2Zvcm1Ob2RlXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBJQmVoYXZpb3JBd2FyZSwgQmVoYXZpb3IgfSBmcm9tIFwiY29yZS9CZWhhdmlvcnMvYmVoYXZpb3JcIjtcclxuaW1wb3J0IHR5cGUgeyBJRGlzcG9zYWJsZSwgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5cclxuaW1wb3J0IHR5cGUgeyBHVUkzRE1hbmFnZXIgfSBmcm9tIFwiLi4vZ3VpM0RNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFZlY3RvcjNXaXRoSW5mbyB9IGZyb20gXCIuLi92ZWN0b3IzV2l0aEluZm9cIjtcclxuaW1wb3J0IHR5cGUgeyBDb250YWluZXIzRCB9IGZyb20gXCIuL2NvbnRhaW5lcjNEXCI7XHJcblxyXG5pbXBvcnQgdHlwZSB7IFRvdWNoQnV0dG9uM0QgfSBmcm9tIFwiLi90b3VjaEJ1dHRvbjNEXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCBhcyBiYXNlIGNsYXNzIGZvciBjb250cm9sc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbnRyb2wzRCBpbXBsZW1lbnRzIElEaXNwb3NhYmxlLCBJQmVoYXZpb3JBd2FyZTxDb250cm9sM0Q+IHtcclxuICAgIHByaXZhdGUgX25vZGU6IE51bGxhYmxlPFRyYW5zZm9ybU5vZGU+O1xyXG4gICAgcHJpdmF0ZSBfZG93bkNvdW50ID0gMDtcclxuICAgIHByaXZhdGUgX2VudGVyQ291bnQgPSAtMTtcclxuICAgIHByaXZhdGUgX2Rvd25Qb2ludGVySWRzOiB7IFtpZDogbnVtYmVyXTogbnVtYmVyIH0gPSB7fTsgLy8gU3RvcmUgbnVtYmVyIG9mIHBvaW50ZXIgZG93bnMgcGVyIElELCBmcm9tIG5lYXIgYW5kIGZhciBpbnRlcmFjdGlvbnNcclxuXHJcbiAgICBwcm90ZWN0ZWQgX2lzVmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9ob3N0OiBHVUkzRE1hbmFnZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2lzU2NhbGVkQnlNYW5hZ2VyID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgY29udHJvbCBwb3NpdGlvbiBpbiB3b3JsZCBzcGFjZSAqL1xyXG4gICAgcHVibGljIGdldCBwb3NpdGlvbigpOiBWZWN0b3IzIHtcclxuICAgICAgICBpZiAoIXRoaXMuX25vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjMuWmVybygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vZGUucG9zaXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBwb3NpdGlvbih2YWx1ZTogVmVjdG9yMykge1xyXG4gICAgICAgIGlmICghdGhpcy5fbm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9ub2RlLnBvc2l0aW9uID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyB0aGUgY29udHJvbCBzY2FsaW5nIGluIHdvcmxkIHNwYWNlICovXHJcbiAgICBwdWJsaWMgZ2V0IHNjYWxpbmcoKTogVmVjdG9yMyB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9ub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygxLCAxLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9ub2RlLnNjYWxpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzY2FsaW5nKHZhbHVlOiBWZWN0b3IzKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9ub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzU2NhbGVkQnlNYW5hZ2VyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fbm9kZS5zY2FsaW5nID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIENhbGxiYWNrIHVzZWQgdG8gc3RhcnQgcG9pbnRlciBlbnRlciBhbmltYXRpb24gKi9cclxuICAgIHB1YmxpYyBwb2ludGVyRW50ZXJBbmltYXRpb246ICgpID0+IHZvaWQ7XHJcbiAgICAvKiogQ2FsbGJhY2sgdXNlZCB0byBzdGFydCBwb2ludGVyIG91dCBhbmltYXRpb24gKi9cclxuICAgIHB1YmxpYyBwb2ludGVyT3V0QW5pbWF0aW9uOiAoKSA9PiB2b2lkO1xyXG4gICAgLyoqIENhbGxiYWNrIHVzZWQgdG8gc3RhcnQgcG9pbnRlciBkb3duIGFuaW1hdGlvbiAqL1xyXG4gICAgcHVibGljIHBvaW50ZXJEb3duQW5pbWF0aW9uOiAoKSA9PiB2b2lkO1xyXG4gICAgLyoqIENhbGxiYWNrIHVzZWQgdG8gc3RhcnQgcG9pbnRlciB1cCBhbmltYXRpb24gKi9cclxuICAgIHB1YmxpYyBwb2ludGVyVXBBbmltYXRpb246ICgpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiB0aGUgcG9pbnRlciBtb3ZlcyBvdmVyIHRoZSBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblBvaW50ZXJNb3ZlT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFZlY3RvcjM+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiB0aGUgcG9pbnRlciBtb3ZlcyBvdXQgb2YgdGhlIGNvbnRyb2xcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uUG9pbnRlck91dE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxDb250cm9sM0Q+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiB0aGUgcG9pbnRlciB0YXBzIHRoZSBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblBvaW50ZXJEb3duT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFZlY3RvcjNXaXRoSW5mbz4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGV2ZW50IHRyaWdnZXJlZCB3aGVuIHBvaW50ZXIgaXMgdXBcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uUG9pbnRlclVwT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFZlY3RvcjNXaXRoSW5mbz4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGV2ZW50IHRyaWdnZXJlZCB3aGVuIGEgY29udHJvbCBpcyBjbGlja2VkIG9uICh3aXRoIGEgbW91c2UpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblBvaW50ZXJDbGlja09ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxWZWN0b3IzV2l0aEluZm8+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCB0cmlnZ2VyZWQgd2hlbiBwb2ludGVyIGVudGVycyB0aGUgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Qb2ludGVyRW50ZXJPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8Q29udHJvbDNEPigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBwYXJlbnQgY29udGFpbmVyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwYXJlbnQ6IE51bGxhYmxlPENvbnRhaW5lcjNEPjtcclxuXHJcbiAgICAvLyBCZWhhdmlvcnNcclxuICAgIHByaXZhdGUgX2JlaGF2aW9ycyA9IG5ldyBBcnJheTxCZWhhdmlvcjxDb250cm9sM0Q+PigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbGlzdCBvZiBhdHRhY2hlZCBiZWhhdmlvcnNcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2JlaGF2aW9yc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGJlaGF2aW9ycygpOiBCZWhhdmlvcjxDb250cm9sM0Q+W10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iZWhhdmlvcnM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2ggYSBiZWhhdmlvciB0byB0aGUgY29udHJvbFxyXG4gICAgICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvYmVoYXZpb3JzXHJcbiAgICAgKiBAcGFyYW0gYmVoYXZpb3IgZGVmaW5lcyB0aGUgYmVoYXZpb3IgdG8gYXR0YWNoXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRCZWhhdmlvcihiZWhhdmlvcjogQmVoYXZpb3I8Q29udHJvbDNEPik6IENvbnRyb2wzRCB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9iZWhhdmlvcnMuaW5kZXhPZihiZWhhdmlvcik7XHJcblxyXG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBiZWhhdmlvci5pbml0KCk7XHJcbiAgICAgICAgY29uc3Qgc2NlbmUgPSB0aGlzLl9ob3N0LnNjZW5lO1xyXG4gICAgICAgIGlmIChzY2VuZS5pc0xvYWRpbmcpIHtcclxuICAgICAgICAgICAgLy8gV2UgZGVmZXIgdGhlIGF0dGFjaCB3aGVuIHRoZSBzY2VuZSB3aWxsIGJlIGxvYWRlZFxyXG4gICAgICAgICAgICBzY2VuZS5vbkRhdGFMb2FkZWRPYnNlcnZhYmxlLmFkZE9uY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYmVoYXZpb3IuYXR0YWNoKHRoaXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBiZWhhdmlvci5hdHRhY2godGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2JlaGF2aW9ycy5wdXNoKGJlaGF2aW9yKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYW4gYXR0YWNoZWQgYmVoYXZpb3JcclxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2MuYmFieWxvbmpzLmNvbS9mZWF0dXJlcy9mZWF0dXJlc0RlZXBEaXZlL2JlaGF2aW9yc1xyXG4gICAgICogQHBhcmFtIGJlaGF2aW9yIGRlZmluZXMgdGhlIGJlaGF2aW9yIHRvIGF0dGFjaFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVtb3ZlQmVoYXZpb3IoYmVoYXZpb3I6IEJlaGF2aW9yPENvbnRyb2wzRD4pOiBDb250cm9sM0Qge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fYmVoYXZpb3JzLmluZGV4T2YoYmVoYXZpb3IpO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYmVoYXZpb3JzW2luZGV4XS5kZXRhY2goKTtcclxuICAgICAgICB0aGlzLl9iZWhhdmlvcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGFuIGF0dGFjaGVkIGJlaGF2aW9yIGJ5IG5hbWVcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIG5hbWUgb2YgdGhlIGJlaGF2aW9yIHRvIGxvb2sgZm9yXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvZmVhdHVyZXNEZWVwRGl2ZS9iZWhhdmlvcnNcclxuICAgICAqIEByZXR1cm5zIG51bGwgaWYgYmVoYXZpb3Igd2FzIG5vdCBmb3VuZCBlbHNlIHRoZSByZXF1ZXN0ZWQgYmVoYXZpb3JcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEJlaGF2aW9yQnlOYW1lKG5hbWU6IHN0cmluZyk6IE51bGxhYmxlPEJlaGF2aW9yPENvbnRyb2wzRD4+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IGJlaGF2aW9yIG9mIHRoaXMuX2JlaGF2aW9ycykge1xyXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3IubmFtZSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJlaGF2aW9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBjb250cm9sIGlzIHZpc2libGUgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNWaXNpYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1Zpc2libGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBpc1Zpc2libGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5faXNWaXNpYmxlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pc1Zpc2libGUgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgY29uc3QgbWVzaCA9IHRoaXMubWVzaDtcclxuICAgICAgICBpZiAobWVzaCkge1xyXG4gICAgICAgICAgICBtZXNoLnNldEVuYWJsZWQodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29udHJvbFxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKiBEZWZpbmVzIHRoZSBjb250cm9sIG5hbWUgKi9cclxuICAgICAgICBwdWJsaWMgbmFtZT86IHN0cmluZ1xyXG4gICAgKSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNsYXNzIG5hbWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB0eXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUeXBlTmFtZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNsYXNzIG5hbWUgb2YgdGhlIGNvbnRyb2wuXHJcbiAgICAgKiBAcmV0dXJucyBjdXJyZW50IGNsYXNzIG5hbWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUeXBlTmFtZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJDb250cm9sM0RcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHRyYW5zZm9ybSBub2RlIHVzZWQgYnkgdGhpcyBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbm9kZSgpOiBOdWxsYWJsZTxUcmFuc2Zvcm1Ob2RlPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBtZXNoIHVzZWQgdG8gcmVuZGVyIHRoaXMgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IG1lc2goKTogTnVsbGFibGU8QWJzdHJhY3RNZXNoPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX25vZGUgaW5zdGFuY2VvZiBBYnN0cmFjdE1lc2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vZGUgYXMgQWJzdHJhY3RNZXNoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMaW5rIHRoZSBjb250cm9sIGFzIGNoaWxkIG9mIHRoZSBnaXZlbiBub2RlXHJcbiAgICAgKiBAcGFyYW0gbm9kZSBkZWZpbmVzIHRoZSBub2RlIHRvIGxpbmsgdG8uIFVzZSBudWxsIHRvIHVubGluayB0aGUgY29udHJvbFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbGlua1RvVHJhbnNmb3JtTm9kZShub2RlOiBOdWxsYWJsZTxUcmFuc2Zvcm1Ob2RlPik6IENvbnRyb2wzRCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX25vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm9kZS5wYXJlbnQgPSBub2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX3ByZXBhcmVOb2RlKHNjZW5lOiBTY2VuZSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5fbm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ub2RlID0gdGhpcy5fY3JlYXRlTm9kZShzY2VuZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9kZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2luamVjdEdVSTNEUmVzZXJ2ZWREYXRhU3RvcmUodGhpcy5ub2RlKS5jb250cm9sID0gdGhpczsgLy8gU3RvcmUgdGhlIGNvbnRyb2wgb24gdGhlIHJlc2VydmVkRGF0YVN0b3JlIGZpZWxkIGluIG9yZGVyIHRvIGdldCBpdCB3aGVuIHBpY2tpbmdcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1lc2ggPSB0aGlzLm1lc2g7XHJcbiAgICAgICAgICAgIGlmIChtZXNoKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNoLmlzUGlja2FibGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdE1hdGVyaWFsKG1lc2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfaW5qZWN0R1VJM0RSZXNlcnZlZERhdGFTdG9yZShub2RlOiBUcmFuc2Zvcm1Ob2RlKTogYW55IHtcclxuICAgICAgICBub2RlLnJlc2VydmVkRGF0YVN0b3JlID0gbm9kZS5yZXNlcnZlZERhdGFTdG9yZSA/PyB7fTtcclxuICAgICAgICBub2RlLnJlc2VydmVkRGF0YVN0b3JlLkdVSTNEID0gbm9kZS5yZXNlcnZlZERhdGFTdG9yZS5HVUkzRCA/PyB7fTtcclxuICAgICAgICByZXR1cm4gbm9kZS5yZXNlcnZlZERhdGFTdG9yZS5HVUkzRDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE5vZGUgY3JlYXRpb24uXHJcbiAgICAgKiBDYW4gYmUgb3ZlcnJpZGVuIGJ5IGNoaWxkcmVuXHJcbiAgICAgKiBAcGFyYW0gc2NlbmUgZGVmaW5lcyB0aGUgc2NlbmUgd2hlcmUgdGhlIG5vZGUgbXVzdCBiZSBhdHRhY2hlZFxyXG4gICAgICogQHJldHVybnMgdGhlIGF0dGFjaGVkIG5vZGUgb3IgbnVsbCBpZiBub25lLiBNdXN0IHJldHVybiBhIE1lc2ggb3IgQWJzdHJhY3RNZXNoIGlmIHRoZXJlIGlzIGFuIGF0dGFjaGVkIHZpc2libGUgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIHByb3RlY3RlZCBfY3JlYXRlTm9kZShzY2VuZTogU2NlbmUpOiBOdWxsYWJsZTxUcmFuc2Zvcm1Ob2RlPiB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBieSBkZWZhdWx0XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZmZlY3QgYSBtYXRlcmlhbCB0byB0aGUgZ2l2ZW4gbWVzaFxyXG4gICAgICogQHBhcmFtIG1lc2ggZGVmaW5lcyB0aGUgbWVzaCB3aGljaCB3aWxsIHJlcHJlc2VudCB0aGUgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX2FmZmVjdE1hdGVyaWFsKG1lc2g6IEFic3RyYWN0TWVzaCkge1xyXG4gICAgICAgIG1lc2gubWF0ZXJpYWwgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2lzVG91Y2hCdXR0b24zRChjb250cm9sOiBDb250cm9sM0QpOiBjb250cm9sIGlzIFRvdWNoQnV0dG9uM0Qge1xyXG4gICAgICAgIHJldHVybiAoY29udHJvbCBhcyBUb3VjaEJ1dHRvbjNEKS5fZ2VuZXJhdGVQb2ludGVyRXZlbnRUeXBlICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUG9pbnRlcnNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX29uUG9pbnRlck1vdmUodGFyZ2V0OiBDb250cm9sM0QsIGNvb3JkaW5hdGVzOiBWZWN0b3IzKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJNb3ZlT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoY29vcmRpbmF0ZXMsIC0xLCB0YXJnZXQsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfb25Qb2ludGVyRW50ZXIodGFyZ2V0OiBDb250cm9sM0QpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5fZW50ZXJDb3VudCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgLy8gLTEgaXMgZm9yIHRvdWNoIGlucHV0LCB3ZSBhcmUgbm93IHN1cmUgd2UgYXJlIHdpdGggYSBtb3VzZSBvciBwZW5jaWxcclxuICAgICAgICAgICAgdGhpcy5fZW50ZXJDb3VudCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9lbnRlckNvdW50Kys7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9lbnRlckNvdW50ID4gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9uUG9pbnRlckVudGVyT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnModGhpcywgLTEsIHRhcmdldCwgdGhpcyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBvaW50ZXJFbnRlckFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJFbnRlckFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9vblBvaW50ZXJPdXQodGFyZ2V0OiBDb250cm9sM0QpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbnRlckNvdW50LS07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9lbnRlckNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9lbnRlckNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJPdXRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzLCAtMSwgdGFyZ2V0LCB0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucG9pbnRlck91dEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJPdXRBbmltYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9vblBvaW50ZXJEb3duKHRhcmdldDogQ29udHJvbDNELCBjb29yZGluYXRlczogVmVjdG9yMywgcG9pbnRlcklkOiBudW1iZXIsIGJ1dHRvbkluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICB0aGlzLl9kb3duQ291bnQrKztcclxuICAgICAgICB0aGlzLl9kb3duUG9pbnRlcklkc1twb2ludGVySWRdID0gdGhpcy5fZG93blBvaW50ZXJJZHNbcG9pbnRlcklkXSArIDEgfHwgMTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2Rvd25Db3VudCAhPT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9uUG9pbnRlckRvd25PYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhuZXcgVmVjdG9yM1dpdGhJbmZvKGNvb3JkaW5hdGVzLCBidXR0b25JbmRleCksIC0xLCB0YXJnZXQsIHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wb2ludGVyRG93bkFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJEb3duQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX29uUG9pbnRlclVwKHRhcmdldDogQ29udHJvbDNELCBjb29yZGluYXRlczogVmVjdG9yMywgcG9pbnRlcklkOiBudW1iZXIsIGJ1dHRvbkluZGV4OiBudW1iZXIsIG5vdGlmeUNsaWNrOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZG93bkNvdW50LS07XHJcbiAgICAgICAgdGhpcy5fZG93blBvaW50ZXJJZHNbcG9pbnRlcklkXS0tO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fZG93blBvaW50ZXJJZHNbcG9pbnRlcklkXSA8PSAwKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kb3duUG9pbnRlcklkc1twb2ludGVySWRdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2Rvd25Db3VudCA8IDApIHtcclxuICAgICAgICAgICAgLy8gSGFuZGxlIGlmIGZvcmNlUG9pbnRlclVwIHdhcyBjYWxsZWQgcHJpb3IgdG8gdGhpc1xyXG4gICAgICAgICAgICB0aGlzLl9kb3duQ291bnQgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fZG93bkNvdW50ID09IDApIHtcclxuICAgICAgICAgICAgaWYgKG5vdGlmeUNsaWNrICYmICh0aGlzLl9lbnRlckNvdW50ID4gMCB8fCB0aGlzLl9lbnRlckNvdW50ID09PSAtMSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25Qb2ludGVyQ2xpY2tPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhuZXcgVmVjdG9yM1dpdGhJbmZvKGNvb3JkaW5hdGVzLCBidXR0b25JbmRleCksIC0xLCB0YXJnZXQsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub25Qb2ludGVyVXBPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhuZXcgVmVjdG9yM1dpdGhJbmZvKGNvb3JkaW5hdGVzLCBidXR0b25JbmRleCksIC0xLCB0YXJnZXQsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRlclVwQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJVcEFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmb3JjZVBvaW50ZXJVcChwb2ludGVySWQ6IE51bGxhYmxlPG51bWJlcj4gPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKHBvaW50ZXJJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9vblBvaW50ZXJVcCh0aGlzLCBWZWN0b3IzLlplcm8oKSwgcG9pbnRlcklkLCAwLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9kb3duUG9pbnRlcklkcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25Qb2ludGVyVXAodGhpcywgVmVjdG9yMy5aZXJvKCksICtrZXkgYXMgbnVtYmVyLCAwLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZG93bkNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZG93bkNvdW50ID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uUG9pbnRlclVwKHRoaXMsIFZlY3RvcjMuWmVybygpLCAwLCAwLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX3Byb2Nlc3NPYnNlcnZhYmxlcyh0eXBlOiBudW1iZXIsIHBpY2tlZFBvaW50OiBWZWN0b3IzLCBvcmlnaW5NZXNoUG9zaXRpb246IE51bGxhYmxlPFZlY3RvcjM+LCBwb2ludGVySWQ6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1RvdWNoQnV0dG9uM0QodGhpcykgJiYgb3JpZ2luTWVzaFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSB0aGlzLl9nZW5lcmF0ZVBvaW50ZXJFdmVudFR5cGUodHlwZSwgb3JpZ2luTWVzaFBvc2l0aW9uLCB0aGlzLl9kb3duQ291bnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJNT1ZFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uUG9pbnRlck1vdmUodGhpcywgcGlja2VkUG9pbnQpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNDb250cm9sT3ZlciA9IHRoaXMuX2hvc3QuX2xhc3RDb250cm9sT3Zlcltwb2ludGVySWRdO1xyXG4gICAgICAgICAgICBpZiAocHJldmlvdXNDb250cm9sT3ZlciAmJiBwcmV2aW91c0NvbnRyb2xPdmVyICE9PSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2aW91c0NvbnRyb2xPdmVyLl9vblBvaW50ZXJPdXQodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0NvbnRyb2xPdmVyICE9PSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vblBvaW50ZXJFbnRlcih0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5faG9zdC5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF0gPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSRE9XTikge1xyXG4gICAgICAgICAgICB0aGlzLl9vblBvaW50ZXJEb3duKHRoaXMsIHBpY2tlZFBvaW50LCBwb2ludGVySWQsIGJ1dHRvbkluZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5faG9zdC5fbGFzdENvbnRyb2xEb3duW3BvaW50ZXJJZF0gPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLl9ob3N0Ll9sYXN0UGlja2VkQ29udHJvbCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJVUCB8fCB0eXBlID09PSBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSRE9VQkxFVEFQKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ob3N0Ll9sYXN0Q29udHJvbERvd25bcG9pbnRlcklkXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faG9zdC5fbGFzdENvbnRyb2xEb3duW3BvaW50ZXJJZF0uX29uUG9pbnRlclVwKHRoaXMsIHBpY2tlZFBvaW50LCBwb2ludGVySWQsIGJ1dHRvbkluZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faG9zdC5fbGFzdENvbnRyb2xEb3duW3BvaW50ZXJJZF07XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfZGlzcG9zZU5vZGUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX25vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm9kZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25vZGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbGVhc2VzIGFsbCBhc3NvY2lhdGVkIHJlc291cmNlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLm9uUG9pbnRlckRvd25PYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJFbnRlck9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uUG9pbnRlck1vdmVPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJPdXRPYnNlcnZhYmxlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJVcE9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uUG9pbnRlckNsaWNrT2JzZXJ2YWJsZS5jbGVhcigpO1xyXG5cclxuICAgICAgICB0aGlzLl9kaXNwb3NlTm9kZSgpO1xyXG5cclxuICAgICAgICAvLyBCZWhhdmlvcnNcclxuICAgICAgICBmb3IgKGNvbnN0IGJlaGF2aW9yIG9mIHRoaXMuX2JlaGF2aW9ycykge1xyXG4gICAgICAgICAgICBiZWhhdmlvci5kZXRhY2goKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVG9vbHMgfSBmcm9tIFwiY29yZS9NaXNjL3Rvb2xzXCI7XHJcbmltcG9ydCB7IE1hdHJpeCwgVG1wVmVjdG9ycywgVmVjdG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB0eXBlIHsgZmxvYXQgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5cclxuaW1wb3J0IHsgVm9sdW1lQmFzZWRQYW5lbCB9IGZyb20gXCIuL3ZvbHVtZUJhc2VkUGFuZWxcIjtcclxuaW1wb3J0IHR5cGUgeyBDb250cm9sM0QgfSBmcm9tIFwiLi9jb250cm9sM0RcIjtcclxuaW1wb3J0IHsgQ29udGFpbmVyM0QgfSBmcm9tIFwiLi9jb250YWluZXIzRFwiO1xyXG5pbXBvcnQgeyBBeGlzLCBTcGFjZSB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguYXhpc1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGEgY29udGFpbmVyIHBhbmVsIGRlcGxveWVkIG9uIHRoZSBzdXJmYWNlIG9mIGEgY3lsaW5kZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDeWxpbmRlclBhbmVsIGV4dGVuZHMgVm9sdW1lQmFzZWRQYW5lbCB7XHJcbiAgICBwcml2YXRlIF9yYWRpdXMgPSA1LjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHJhZGl1cyBvZiB0aGUgY3lsaW5kZXIgd2hlcmUgdG8gcHJvamVjdCBjb250cm9scyAoNSBieSBkZWZhdWx0KVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHJhZGl1cygpOiBmbG9hdCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhZGl1cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHJhZGl1cyh2YWx1ZTogZmxvYXQpIHtcclxuICAgICAgICBpZiAodGhpcy5fcmFkaXVzID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9yYWRpdXMgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgVG9vbHMuU2V0SW1tZWRpYXRlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fYXJyYW5nZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9tYXBHcmlkTm9kZShjb250cm9sOiBDb250cm9sM0QsIG5vZGVQb3NpdGlvbjogVmVjdG9yMykge1xyXG4gICAgICAgIGNvbnN0IG1lc2ggPSBjb250cm9sLm1lc2g7XHJcblxyXG4gICAgICAgIGlmICghbWVzaCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5ld1BvcyA9IHRoaXMuX2N5bGluZHJpY2FsTWFwcGluZyhub2RlUG9zaXRpb24pO1xyXG4gICAgICAgIGNvbnRyb2wucG9zaXRpb24gPSBuZXdQb3M7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5vcmllbnRhdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIENvbnRhaW5lcjNELkZBQ0VPUklHSU5fT1JJRU5UQVRJT046XHJcbiAgICAgICAgICAgICAgICBtZXNoLmxvb2tBdChuZXcgVmVjdG9yMygyICogbmV3UG9zLngsIG5ld1Bvcy55LCAyICogbmV3UG9zLnopKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRhaW5lcjNELkZBQ0VPUklHSU5SRVZFUlNFRF9PUklFTlRBVElPTjpcclxuICAgICAgICAgICAgICAgIG1lc2gubG9va0F0KG5ldyBWZWN0b3IzKC1uZXdQb3MueCwgbmV3UG9zLnksIC1uZXdQb3MueikpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udGFpbmVyM0QuRkFDRUZPUldBUkRfT1JJRU5UQVRJT046XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250YWluZXIzRC5GQUNFRk9SV0FSRFJFVkVSU0VEX09SSUVOVEFUSU9OOlxyXG4gICAgICAgICAgICAgICAgbWVzaC5yb3RhdGUoQXhpcy5ZLCBNYXRoLlBJLCBTcGFjZS5MT0NBTCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3lsaW5kcmljYWxNYXBwaW5nKHNvdXJjZTogVmVjdG9yMykge1xyXG4gICAgICAgIGNvbnN0IG5ld1BvcyA9IG5ldyBWZWN0b3IzKDAsIHNvdXJjZS55LCB0aGlzLl9yYWRpdXMpO1xyXG5cclxuICAgICAgICBjb25zdCB5QW5nbGUgPSBzb3VyY2UueCAvIHRoaXMuX3JhZGl1cztcclxuXHJcbiAgICAgICAgTWF0cml4LlJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeUFuZ2xlLCAwLCAwLCBUbXBWZWN0b3JzLk1hdHJpeFswXSk7XHJcblxyXG4gICAgICAgIHJldHVybiBWZWN0b3IzLlRyYW5zZm9ybU5vcm1hbChuZXdQb3MsIFRtcFZlY3RvcnMuTWF0cml4WzBdKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IFNjZW5lIH0gZnJvbSBcImNvcmUvc2NlbmVcIjtcclxuaW1wb3J0IHR5cGUgeyBUcmFuc2Zvcm1Ob2RlIH0gZnJvbSBcImNvcmUvTWVzaGVzL3RyYW5zZm9ybU5vZGVcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9tZXNoXCI7XHJcbmltcG9ydCB7IFRvdWNoSG9sb2dyYXBoaWNNZW51IH0gZnJvbSBcIi4vdG91Y2hIb2xvZ3JhcGhpY01lbnVcIjtcclxuaW1wb3J0IHsgSGFuZENvbnN0cmFpbnRCZWhhdmlvciB9IGZyb20gXCJjb3JlL0JlaGF2aW9ycy9NZXNoZXMvaGFuZENvbnN0cmFpbnRCZWhhdmlvclwiO1xyXG5pbXBvcnQgdHlwZSB7IFdlYlhSRXhwZXJpZW5jZUhlbHBlciB9IGZyb20gXCJjb3JlL1hSL3dlYlhSRXhwZXJpZW5jZUhlbHBlclwiO1xyXG5cclxuLyoqXHJcbiAqIEhhbmQgbWVudSB0aGF0IGRpc3BsYXlzIGJ1dHRvbnMgYW5kIGZsb2F0cyBhcm91bmQgdGhlIGhhbmQuXHJcbiAqIEBzaW5jZSA1LjAuMFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEhhbmRNZW51IGV4dGVuZHMgVG91Y2hIb2xvZ3JhcGhpY01lbnUge1xyXG4gICAgcHJpdmF0ZSBfaGFuZENvbnN0cmFpbnRCZWhhdmlvcjogSGFuZENvbnN0cmFpbnRCZWhhdmlvcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBoYW5kIGNvbnN0cmFpbnQgYmVoYXZpb3Igc2V0dGluZyB0aGUgdHJhbnNmb3JtYXRpb24gb2YgdGhpcyBub2RlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaGFuZENvbnN0cmFpbnRCZWhhdmlvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGFuZENvbnN0cmFpbnRCZWhhdmlvcjtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2NyZWF0ZU5vZGUoc2NlbmU6IFNjZW5lKTogTnVsbGFibGU8VHJhbnNmb3JtTm9kZT4ge1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSBzdXBlci5fY3JlYXRlTm9kZShzY2VuZSkhIGFzIE1lc2g7XHJcblxyXG4gICAgICAgIHRoaXMuX2hhbmRDb25zdHJhaW50QmVoYXZpb3IuYXR0YWNoKG5vZGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBoYW5kIG1lbnUgR1VJIDNEIGNvbnRyb2xcclxuICAgICAqIEBwYXJhbSB4ciB0aGUgV2ViWFJFeHBlcmllbmNlSGVscGVyIHVzZWQgdG8gbGluayB0aGlzIGNvbnRyb2wgdG8gdGhlIGVuYWJsZWQgV2ViWFJIYW5kVHJhY2tpbmcgZmVhdHVyZVxyXG4gICAgICogQHBhcmFtIG5hbWUgbmFtZSBvZiB0aGUgaGFuZCBtZW51XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHhyOiBXZWJYUkV4cGVyaWVuY2VIZWxwZXIsIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5faGFuZENvbnN0cmFpbnRCZWhhdmlvciA9IG5ldyBIYW5kQ29uc3RyYWludEJlaGF2aW9yKCk7XHJcbiAgICAgICAgdGhpcy5faGFuZENvbnN0cmFpbnRCZWhhdmlvci5saW5rVG9YUkV4cGVyaWVuY2UoeHIpO1xyXG4gICAgICAgIHRoaXMuYmFja1BsYXRlTWFyZ2luID0gMC4xNTtcclxuICAgICAgICB0aGlzLnJvd3MgPSAzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGlzcG9zZXMgdGhlIGhhbmQgbWVudVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpIHtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2hhbmRDb25zdHJhaW50QmVoYXZpb3IuZGV0YWNoKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBUcmFuc2Zvcm1Ob2RlIH0gZnJvbSBcImNvcmUvTWVzaGVzL3RyYW5zZm9ybU5vZGVcIjtcclxuaW1wb3J0IHR5cGUgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHsgQ3JlYXRlQm94IH0gZnJvbSBcImNvcmUvTWVzaGVzL0J1aWxkZXJzL2JveEJ1aWxkZXJcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcbmltcG9ydCB7IEZsdWVudEJhY2twbGF0ZU1hdGVyaWFsIH0gZnJvbSBcIi4uL21hdGVyaWFscy9mbHVlbnRCYWNrcGxhdGUvZmx1ZW50QmFja3BsYXRlTWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgQ29udHJvbDNEIH0gZnJvbSBcIi4vY29udHJvbDNEXCI7XHJcbmltcG9ydCB7IFNjZW5lTG9hZGVyIH0gZnJvbSBcImNvcmUvTG9hZGluZy9zY2VuZUxvYWRlclwiO1xyXG5pbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSBhIGhvbG9ncmFwaGljIGJhY2twbGF0ZSBpbiAzRFxyXG4gKiBAc2luY2UgNS4wLjBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBIb2xvZ3JhcGhpY0JhY2twbGF0ZSBleHRlbmRzIENvbnRyb2wzRCB7XHJcbiAgICAvKipcclxuICAgICAqIEJhc2UgVXJsIGZvciB0aGUgYnV0dG9uIG1vZGVsLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIE1PREVMX0JBU0VfVVJMOiBzdHJpbmcgPSBcImh0dHBzOi8vYXNzZXRzLmJhYnlsb25qcy5jb20vbWVzaGVzL01SVEsvXCI7XHJcbiAgICAvKipcclxuICAgICAqIEZpbGUgbmFtZSBmb3IgdGhlIGJ1dHRvbiBtb2RlbC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBNT0RFTF9GSUxFTkFNRTogc3RyaW5nID0gXCJtcnRrLWZsdWVudC1iYWNrcGxhdGUuZ2xiXCI7XHJcblxyXG4gICAgcHJpdmF0ZSBfbW9kZWw6IEFic3RyYWN0TWVzaDtcclxuICAgIHByaXZhdGUgX21hdGVyaWFsOiBGbHVlbnRCYWNrcGxhdGVNYXRlcmlhbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcmluZyBncm91bmQgaWQgb2YgdGhlIGJhY2twbGF0ZSBtZXNoLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IHJlbmRlcmluZ0dyb3VwSWQoaWQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX21vZGVsLnJlbmRlcmluZ0dyb3VwSWQgPSBpZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgcmVuZGVyaW5nR3JvdXBJZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5yZW5kZXJpbmdHcm91cElkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbWF0ZXJpYWwgdXNlZCBieSB0aGUgYmFja3BsYXRlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbWF0ZXJpYWwoKTogRmx1ZW50QmFja3BsYXRlTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhpcyBiYWNrcGxhdGUgc2hhcmVzIGl0cyBtYXRlcmlhbCB3aXRoIG90aGVyIEhvbG9ncmFwaGljQmFja3BsYXRlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHNoYXJlTWF0ZXJpYWxzKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFyZU1hdGVyaWFscztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgaG9sb2dyYXBoaWMgYmFja3BsYXRlXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqIEBwYXJhbSBfc2hhcmVNYXRlcmlhbHNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgbmFtZT86IHN0cmluZyxcclxuICAgICAgICBwcml2YXRlIF9zaGFyZU1hdGVyaWFscyA9IHRydWVcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJIb2xvZ3JhcGhpY0JhY2twbGF0ZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1lc2ggYXNzb2NpYXRpb25cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfY3JlYXRlTm9kZShzY2VuZTogU2NlbmUpOiBUcmFuc2Zvcm1Ob2RlIHtcclxuICAgICAgICBjb25zdCBjb2xsaXNpb25NZXNoID0gQ3JlYXRlQm94KFxyXG4gICAgICAgICAgICAodGhpcy5uYW1lID8/IFwiSG9sb2dyYXBoaWNCYWNrcGxhdGVcIikgKyBcIl9Db2xsaXNpb25NZXNoXCIsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxLjAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMCxcclxuICAgICAgICAgICAgICAgIGRlcHRoOiAxLjAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNjZW5lXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb2xsaXNpb25NZXNoLmlzUGlja2FibGUgPSB0cnVlO1xyXG4gICAgICAgIGNvbGxpc2lvbk1lc2gudmlzaWJpbGl0eSA9IDA7XHJcblxyXG4gICAgICAgIFNjZW5lTG9hZGVyLkltcG9ydE1lc2hBc3luYyh1bmRlZmluZWQsIEhvbG9ncmFwaGljQmFja3BsYXRlLk1PREVMX0JBU0VfVVJMLCBIb2xvZ3JhcGhpY0JhY2twbGF0ZS5NT0RFTF9GSUxFTkFNRSwgc2NlbmUpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbXBvcnRlZE1vZGVsID0gcmVzdWx0Lm1lc2hlc1sxXTtcclxuICAgICAgICAgICAgaW1wb3J0ZWRNb2RlbC5uYW1lID0gYCR7dGhpcy5uYW1lfV9mcm9udFBsYXRlYDtcclxuICAgICAgICAgICAgaW1wb3J0ZWRNb2RlbC5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGltcG9ydGVkTW9kZWwucGFyZW50ID0gY29sbGlzaW9uTWVzaDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBpbXBvcnRlZE1vZGVsLm1hdGVyaWFsID0gdGhpcy5fbWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBpbXBvcnRlZE1vZGVsO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gY29sbGlzaW9uTWVzaDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jcmVhdGVNYXRlcmlhbChtZXNoOiBNZXNoKSB7XHJcbiAgICAgICAgdGhpcy5fbWF0ZXJpYWwgPSBuZXcgRmx1ZW50QmFja3BsYXRlTWF0ZXJpYWwodGhpcy5uYW1lICsgXCIgTWF0ZXJpYWxcIiwgbWVzaC5nZXRTY2VuZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FmZmVjdE1hdGVyaWFsKG1lc2g6IE1lc2gpIHtcclxuICAgICAgICAvLyBCYWNrXHJcbiAgICAgICAgaWYgKHRoaXMuX3NoYXJlTWF0ZXJpYWxzKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faG9zdC5fdG91Y2hTaGFyZWRNYXRlcmlhbHNbXCJmbHVlbnRCYWNrcGxhdGVNYXRlcmlhbFwiXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlTWF0ZXJpYWwobWVzaCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3N0Ll90b3VjaFNoYXJlZE1hdGVyaWFsc1tcImZsdWVudEJhY2twbGF0ZU1hdGVyaWFsXCJdID0gdGhpcy5fbWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IHRoaXMuX2hvc3QuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzW1wiZmx1ZW50QmFja3BsYXRlTWF0ZXJpYWxcIl0gYXMgRmx1ZW50QmFja3BsYXRlTWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVNYXRlcmlhbChtZXNoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWxlYXNlcyBhbGwgYXNzb2NpYXRlZCByZXNvdXJjZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpOyAvLyB3aWxsIGRpc3Bvc2UgbWFpbiBtZXNoIGllLiBiYWNrIHBsYXRlXHJcblxyXG4gICAgICAgIGlmICghdGhpcy5zaGFyZU1hdGVyaWFscykge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9tb2RlbC5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQnV0dG9uM0QgfSBmcm9tIFwiLi9idXR0b24zRFwiO1xyXG5cclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgT2JzZXJ2ZXIgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB7IFN0YW5kYXJkTWF0ZXJpYWwgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvc3RhbmRhcmRNYXRlcmlhbFwiO1xyXG5pbXBvcnQgdHlwZSB7IFRyYW5zZm9ybU5vZGUgfSBmcm9tIFwiY29yZS9NZXNoZXMvdHJhbnNmb3JtTm9kZVwiO1xyXG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHsgQ3JlYXRlUGxhbmUgfSBmcm9tIFwiY29yZS9NZXNoZXMvQnVpbGRlcnMvcGxhbmVCdWlsZGVyXCI7XHJcbmltcG9ydCB7IENyZWF0ZUJveCB9IGZyb20gXCJjb3JlL01lc2hlcy9CdWlsZGVycy9ib3hCdWlsZGVyXCI7XHJcbmltcG9ydCB7IEZhZGVJbk91dEJlaGF2aW9yIH0gZnJvbSBcImNvcmUvQmVoYXZpb3JzL01lc2hlcy9mYWRlSW5PdXRCZWhhdmlvclwiO1xyXG5pbXBvcnQgdHlwZSB7IFNjZW5lIH0gZnJvbSBcImNvcmUvc2NlbmVcIjtcclxuXHJcbmltcG9ydCB7IEZsdWVudE1hdGVyaWFsIH0gZnJvbSBcIi4uL21hdGVyaWFscy9mbHVlbnQvZmx1ZW50TWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgU3RhY2tQYW5lbCB9IGZyb20gXCIuLi8uLi8yRC9jb250cm9scy9zdGFja1BhbmVsXCI7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSBcIi4uLy4uLzJEL2NvbnRyb2xzL2ltYWdlXCI7XHJcbmltcG9ydCB7IFRleHRCbG9jayB9IGZyb20gXCIuLi8uLi8yRC9jb250cm9scy90ZXh0QmxvY2tcIjtcclxuaW1wb3J0IHsgQWR2YW5jZWREeW5hbWljVGV4dHVyZSB9IGZyb20gXCIuLi8uLi8yRC9hZHZhbmNlZER5bmFtaWNUZXh0dXJlXCI7XHJcbmltcG9ydCB0eXBlIHsgQ29udHJvbDNEIH0gZnJvbSBcIi4vY29udHJvbDNEXCI7XHJcbmltcG9ydCB7IENvbG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguY29sb3JcIjtcclxuaW1wb3J0IHsgSXNEb2N1bWVudEF2YWlsYWJsZSB9IGZyb20gXCJjb3JlL01pc2MvZG9tTWFuYWdlbWVudFwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGEgaG9sb2dyYXBoaWMgYnV0dG9uIGluIDNEXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSG9sb2dyYXBoaWNCdXR0b24gZXh0ZW5kcyBCdXR0b24zRCB7XHJcbiAgICBwcml2YXRlIF9iYWNrUGxhdGU6IE1lc2g7XHJcbiAgICBwcml2YXRlIF90ZXh0UGxhdGU6IE1lc2g7XHJcbiAgICBwcml2YXRlIF9mcm9udFBsYXRlOiBNZXNoO1xyXG4gICAgcHJpdmF0ZSBfdGV4dDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfaW1hZ2VVcmw6IHN0cmluZztcclxuICAgIHByaXZhdGUgX3NoYXJlTWF0ZXJpYWxzID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX2Zyb250TWF0ZXJpYWw6IEZsdWVudE1hdGVyaWFsO1xyXG4gICAgcHJpdmF0ZSBfYmFja01hdGVyaWFsOiBGbHVlbnRNYXRlcmlhbDtcclxuICAgIHByaXZhdGUgX3BsYXRlTWF0ZXJpYWw6IFN0YW5kYXJkTWF0ZXJpYWw7XHJcbiAgICBwcml2YXRlIF9waWNrZWRQb2ludE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxOdWxsYWJsZTxWZWN0b3IzPj4+O1xyXG5cclxuICAgIC8vIFRvb2x0aXBcclxuICAgIHByaXZhdGUgX3Rvb2x0aXBGYWRlOiBOdWxsYWJsZTxGYWRlSW5PdXRCZWhhdmlvcj47XHJcbiAgICBwcml2YXRlIF90b29sdGlwVGV4dEJsb2NrOiBOdWxsYWJsZTxUZXh0QmxvY2s+O1xyXG4gICAgcHJpdmF0ZSBfdG9vbHRpcFRleHR1cmU6IE51bGxhYmxlPEFkdmFuY2VkRHluYW1pY1RleHR1cmU+O1xyXG4gICAgcHJpdmF0ZSBfdG9vbHRpcE1lc2g6IE51bGxhYmxlPE1lc2g+O1xyXG4gICAgcHJpdmF0ZSBfdG9vbHRpcEhvdmVyT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPENvbnRyb2wzRD4+O1xyXG4gICAgcHJpdmF0ZSBfdG9vbHRpcE91dE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxDb250cm9sM0Q+PjtcclxuXHJcbiAgICBwcml2YXRlIF9kaXNwb3NlVG9vbHRpcCgpIHtcclxuICAgICAgICB0aGlzLl90b29sdGlwRmFkZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHRCbG9jay5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl90b29sdGlwVGV4dHVyZSkge1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwVGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl90b29sdGlwTWVzaCkge1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwTWVzaC5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub25Qb2ludGVyRW50ZXJPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl90b29sdGlwSG92ZXJPYnNlcnZlcik7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJPdXRPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl90b29sdGlwT3V0T2JzZXJ2ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyaW5nIGdyb3VuZCBpZCBvZiBhbGwgdGhlIG1lc2ggaW4gdGhlIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IHJlbmRlcmluZ0dyb3VwSWQoaWQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5yZW5kZXJpbmdHcm91cElkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5fdGV4dFBsYXRlLnJlbmRlcmluZ0dyb3VwSWQgPSBpZDtcclxuICAgICAgICB0aGlzLl9mcm9udFBsYXRlLnJlbmRlcmluZ0dyb3VwSWQgPSBpZDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3Rvb2x0aXBNZXNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBNZXNoLnJlbmRlcmluZ0dyb3VwSWQgPSBpZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHJlbmRlcmluZ0dyb3VwSWQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja1BsYXRlLnJlbmRlcmluZ0dyb3VwSWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXh0IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgdG9vbHRpcCBzaG93biB3aGVuIGhvdmVyaW5nIG9uIHRoZSBidXR0b24uIFdoZW4gc2V0IHRvIG51bGwgdG9vbHRpcCBpcyBkaXNhYmxlZC4gKERlZmF1bHQ6IG51bGwpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgdG9vbHRpcFRleHQodGV4dDogTnVsbGFibGU8c3RyaW5nPikge1xyXG4gICAgICAgIGlmICghdGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NlVG9vbHRpcCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5fdG9vbHRpcEZhZGUpIHtcclxuICAgICAgICAgICAgY29uc3QgcmlnaHRIYW5kZWRTY2VuZSA9IHRoaXMuX2JhY2tQbGF0ZS5fc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW07XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0b29sdGlwIHdpdGggbWVzaCBhbmQgdGV4dFxyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwTWVzaCA9IENyZWF0ZVBsYW5lKFwiXCIsIHsgc2l6ZTogMSB9LCB0aGlzLl9iYWNrUGxhdGUuX3NjZW5lKTtcclxuICAgICAgICAgICAgY29uc3QgdG9vbHRpcEJhY2tncm91bmQgPSBDcmVhdGVQbGFuZShcIlwiLCB7IHNpemU6IDEsIHNpZGVPcmllbnRhdGlvbjogTWVzaC5ET1VCTEVTSURFIH0sIHRoaXMuX2JhY2tQbGF0ZS5fc2NlbmUpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXQgPSBuZXcgU3RhbmRhcmRNYXRlcmlhbChcIlwiLCB0aGlzLl9iYWNrUGxhdGUuX3NjZW5lKTtcclxuICAgICAgICAgICAgbWF0LmRpZmZ1c2VDb2xvciA9IENvbG9yMy5Gcm9tSGV4U3RyaW5nKFwiIzIxMjEyMVwiKTtcclxuICAgICAgICAgICAgdG9vbHRpcEJhY2tncm91bmQubWF0ZXJpYWwgPSBtYXQ7XHJcbiAgICAgICAgICAgIHRvb2x0aXBCYWNrZ3JvdW5kLmlzUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcE1lc2guYWRkQ2hpbGQodG9vbHRpcEJhY2tncm91bmQpO1xyXG4gICAgICAgICAgICB0b29sdGlwQmFja2dyb3VuZC5wb3NpdGlvbiA9IFZlY3RvcjMuRm9yd2FyZChyaWdodEhhbmRlZFNjZW5lKS5zY2FsZSgwLjA1KTtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcE1lc2guc2NhbGluZy55ID0gMSAvIDM7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBNZXNoLnBvc2l0aW9uID0gVmVjdG9yMy5VcCgpLnNjYWxlKDAuNykuYWRkKFZlY3RvcjMuRm9yd2FyZChyaWdodEhhbmRlZFNjZW5lKS5zY2FsZSgtMC4xNSkpO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwTWVzaC5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBNZXNoLnBhcmVudCA9IHRoaXMuX2JhY2tQbGF0ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0ZXh0IHRleHR1cmUgZm9yIHRoZSB0b29sdGlwXHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0dXJlID0gQWR2YW5jZWREeW5hbWljVGV4dHVyZS5DcmVhdGVGb3JNZXNoKHRoaXMuX3Rvb2x0aXBNZXNoKTtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHRCbG9jayA9IG5ldyBUZXh0QmxvY2soKTtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHRCbG9jay5zY2FsZVkgPSAzO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwVGV4dEJsb2NrLmNvbG9yID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwVGV4dEJsb2NrLmZvbnRTaXplID0gMTMwO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwVGV4dHVyZS5hZGRDb250cm9sKHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2spO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGhvdmVyIGFjdGlvbiB0byB0b29sdGlwXHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBGYWRlID0gbmV3IEZhZGVJbk91dEJlaGF2aW9yKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBGYWRlLmRlbGF5ID0gNTAwO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwTWVzaC5hZGRCZWhhdmlvcih0aGlzLl90b29sdGlwRmFkZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBIb3Zlck9ic2VydmVyID0gdGhpcy5vblBvaW50ZXJFbnRlck9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90b29sdGlwRmFkZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBGYWRlLmZhZGVJbih0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBPdXRPYnNlcnZlciA9IHRoaXMub25Qb2ludGVyT3V0T2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Rvb2x0aXBGYWRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG9vbHRpcEZhZGUuZmFkZUluKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl90b29sdGlwVGV4dEJsb2NrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2sudGV4dCA9IHRleHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgdG9vbHRpcFRleHQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2spIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2sudGV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGV4dCBmb3IgdGhlIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRleHQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl90ZXh0ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90ZXh0ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fcmVidWlsZENvbnRlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW1hZ2UgdXJsIGZvciB0aGUgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaW1hZ2VVcmwoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW1hZ2VVcmw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBpbWFnZVVybCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ltYWdlVXJsID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pbWFnZVVybCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3JlYnVpbGRDb250ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBiYWNrIG1hdGVyaWFsIHVzZWQgYnkgdGhpcyBidXR0b25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBiYWNrTWF0ZXJpYWwoKTogRmx1ZW50TWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrTWF0ZXJpYWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBmcm9udCBtYXRlcmlhbCB1c2VkIGJ5IHRoaXMgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgZnJvbnRNYXRlcmlhbCgpOiBGbHVlbnRNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zyb250TWF0ZXJpYWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBwbGF0ZSBtYXRlcmlhbCB1c2VkIGJ5IHRoaXMgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgcGxhdGVNYXRlcmlhbCgpOiBTdGFuZGFyZE1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGxhdGVNYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhpcyBidXR0b24gc2hhcmVzIGl0cyBtYXRlcmlhbCB3aXRoIG90aGVyIEhvbG9ncmFwaGljQnV0dG9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHNoYXJlTWF0ZXJpYWxzKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFyZU1hdGVyaWFscztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgYnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqIEBwYXJhbSBzaGFyZU1hdGVyaWFsc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lPzogc3RyaW5nLCBzaGFyZU1hdGVyaWFscyA9IHRydWUpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5fc2hhcmVNYXRlcmlhbHMgPSBzaGFyZU1hdGVyaWFscztcclxuXHJcbiAgICAgICAgLy8gRGVmYXVsdCBhbmltYXRpb25zXHJcbiAgICAgICAgdGhpcy5wb2ludGVyRW50ZXJBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tZXNoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZnJvbnRQbGF0ZS5zZXRFbmFibGVkKHRydWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlck91dEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1lc2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9mcm9udFBsYXRlLnNldEVuYWJsZWQoZmFsc2UpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkhvbG9ncmFwaGljQnV0dG9uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVidWlsZENvbnRlbnQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZGlzcG9zZUZhY2FkZVRleHR1cmUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgcGFuZWwgPSBuZXcgU3RhY2tQYW5lbCgpO1xyXG4gICAgICAgIHBhbmVsLmlzVmVydGljYWwgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoSXNEb2N1bWVudEF2YWlsYWJsZSgpICYmICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faW1hZ2VVcmwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5zb3VyY2UgPSB0aGlzLl9pbWFnZVVybDtcclxuICAgICAgICAgICAgICAgIGltYWdlLnBhZGRpbmdUb3AgPSBcIjQwcHhcIjtcclxuICAgICAgICAgICAgICAgIGltYWdlLmhlaWdodCA9IFwiMTgwcHhcIjtcclxuICAgICAgICAgICAgICAgIGltYWdlLndpZHRoID0gXCIxMDBweFwiO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2UucGFkZGluZ0JvdHRvbSA9IFwiNDBweFwiO1xyXG4gICAgICAgICAgICAgICAgcGFuZWwuYWRkQ29udHJvbChpbWFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90ZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dEJsb2NrKCk7XHJcbiAgICAgICAgICAgIHRleHQudGV4dCA9IHRoaXMuX3RleHQ7XHJcbiAgICAgICAgICAgIHRleHQuY29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIHRleHQuaGVpZ2h0ID0gXCIzMHB4XCI7XHJcbiAgICAgICAgICAgIHRleHQuZm9udFNpemUgPSAyNDtcclxuICAgICAgICAgICAgcGFuZWwuYWRkQ29udHJvbCh0ZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9mcm9udFBsYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudCA9IHBhbmVsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBNZXNoIGFzc29jaWF0aW9uXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2NyZWF0ZU5vZGUoc2NlbmU6IFNjZW5lKTogVHJhbnNmb3JtTm9kZSB7XHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlID0gQ3JlYXRlQm94KFxyXG4gICAgICAgICAgICB0aGlzLm5hbWUgKyBcIkJhY2tNZXNoXCIsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxLjAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMCxcclxuICAgICAgICAgICAgICAgIGRlcHRoOiAwLjA4LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY2VuZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuX2Zyb250UGxhdGUgPSBDcmVhdGVCb3goXHJcbiAgICAgICAgICAgIHRoaXMubmFtZSArIFwiRnJvbnRNZXNoXCIsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxLjAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMCxcclxuICAgICAgICAgICAgICAgIGRlcHRoOiAwLjA4LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY2VuZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuX2Zyb250UGxhdGUucGFyZW50ID0gdGhpcy5fYmFja1BsYXRlO1xyXG4gICAgICAgIHRoaXMuX2Zyb250UGxhdGUucG9zaXRpb24gPSBWZWN0b3IzLkZvcndhcmQoc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW0pLnNjYWxlKC0wLjA4KTtcclxuICAgICAgICB0aGlzLl9mcm9udFBsYXRlLmlzUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9mcm9udFBsYXRlLnNldEVuYWJsZWQoZmFsc2UpO1xyXG5cclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUgPSA8TWVzaD5zdXBlci5fY3JlYXRlTm9kZShzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5fdGV4dFBsYXRlLnBhcmVudCA9IHRoaXMuX2JhY2tQbGF0ZTtcclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUucG9zaXRpb24gPSBWZWN0b3IzLkZvcndhcmQoc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW0pLnNjYWxlKC0wLjA4KTtcclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUuaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja1BsYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYXBwbHlGYWNhZGUoZmFjYWRlVGV4dHVyZTogQWR2YW5jZWREeW5hbWljVGV4dHVyZSkge1xyXG4gICAgICAgIHRoaXMuX3BsYXRlTWF0ZXJpYWwuZW1pc3NpdmVUZXh0dXJlID0gZmFjYWRlVGV4dHVyZTtcclxuICAgICAgICB0aGlzLl9wbGF0ZU1hdGVyaWFsLm9wYWNpdHlUZXh0dXJlID0gZmFjYWRlVGV4dHVyZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jcmVhdGVCYWNrTWF0ZXJpYWwobWVzaDogTWVzaCkge1xyXG4gICAgICAgIHRoaXMuX2JhY2tNYXRlcmlhbCA9IG5ldyBGbHVlbnRNYXRlcmlhbCh0aGlzLm5hbWUgKyBcIkJhY2sgTWF0ZXJpYWxcIiwgbWVzaC5nZXRTY2VuZSgpKTtcclxuICAgICAgICB0aGlzLl9iYWNrTWF0ZXJpYWwucmVuZGVySG92ZXJMaWdodCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fcGlja2VkUG9pbnRPYnNlcnZlciA9IHRoaXMuX2hvc3Qub25QaWNrZWRQb2ludENoYW5nZWRPYnNlcnZhYmxlLmFkZCgocGlja2VkUG9pbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKHBpY2tlZFBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWNrTWF0ZXJpYWwuaG92ZXJQb3NpdGlvbiA9IHBpY2tlZFBvaW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFja01hdGVyaWFsLmhvdmVyQ29sb3IuYSA9IDEuMDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhY2tNYXRlcmlhbC5ob3ZlckNvbG9yLmEgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlRnJvbnRNYXRlcmlhbChtZXNoOiBNZXNoKSB7XHJcbiAgICAgICAgdGhpcy5fZnJvbnRNYXRlcmlhbCA9IG5ldyBGbHVlbnRNYXRlcmlhbCh0aGlzLm5hbWUgKyBcIkZyb250IE1hdGVyaWFsXCIsIG1lc2guZ2V0U2NlbmUoKSk7XHJcbiAgICAgICAgdGhpcy5fZnJvbnRNYXRlcmlhbC5pbm5lckdsb3dDb2xvckludGVuc2l0eSA9IDA7IC8vIE5vIGlubmVyIGdsb3dcclxuICAgICAgICB0aGlzLl9mcm9udE1hdGVyaWFsLmFscGhhID0gMC41OyAvLyBBZGRpdGl2ZVxyXG4gICAgICAgIHRoaXMuX2Zyb250TWF0ZXJpYWwucmVuZGVyQm9yZGVycyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlUGxhdGVNYXRlcmlhbChtZXNoOiBNZXNoKSB7XHJcbiAgICAgICAgdGhpcy5fcGxhdGVNYXRlcmlhbCA9IG5ldyBTdGFuZGFyZE1hdGVyaWFsKHRoaXMubmFtZSArIFwiUGxhdGUgTWF0ZXJpYWxcIiwgbWVzaC5nZXRTY2VuZSgpKTtcclxuICAgICAgICB0aGlzLl9wbGF0ZU1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBDb2xvcjMuQmxhY2soKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FmZmVjdE1hdGVyaWFsKG1lc2g6IE1lc2gpIHtcclxuICAgICAgICAvLyBCYWNrXHJcbiAgICAgICAgaWYgKHRoaXMuX3NoYXJlTWF0ZXJpYWxzKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faG9zdC5fc2hhcmVkTWF0ZXJpYWxzW1wiYmFja0ZsdWVudE1hdGVyaWFsXCJdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVCYWNrTWF0ZXJpYWwobWVzaCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3N0Ll9zaGFyZWRNYXRlcmlhbHNbXCJiYWNrRmx1ZW50TWF0ZXJpYWxcIl0gPSB0aGlzLl9iYWNrTWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWNrTWF0ZXJpYWwgPSB0aGlzLl9ob3N0Ll9zaGFyZWRNYXRlcmlhbHNbXCJiYWNrRmx1ZW50TWF0ZXJpYWxcIl0gYXMgRmx1ZW50TWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEZyb250XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faG9zdC5fc2hhcmVkTWF0ZXJpYWxzW1wiZnJvbnRGbHVlbnRNYXRlcmlhbFwiXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlRnJvbnRNYXRlcmlhbChtZXNoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3QuX3NoYXJlZE1hdGVyaWFsc1tcImZyb250Rmx1ZW50TWF0ZXJpYWxcIl0gPSB0aGlzLl9mcm9udE1hdGVyaWFsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJvbnRNYXRlcmlhbCA9IHRoaXMuX2hvc3QuX3NoYXJlZE1hdGVyaWFsc1tcImZyb250Rmx1ZW50TWF0ZXJpYWxcIl0gYXMgRmx1ZW50TWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVCYWNrTWF0ZXJpYWwobWVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUZyb250TWF0ZXJpYWwobWVzaCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jcmVhdGVQbGF0ZU1hdGVyaWFsKG1lc2gpO1xyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5tYXRlcmlhbCA9IHRoaXMuX2JhY2tNYXRlcmlhbDtcclxuICAgICAgICB0aGlzLl9mcm9udFBsYXRlLm1hdGVyaWFsID0gdGhpcy5fZnJvbnRNYXRlcmlhbDtcclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUubWF0ZXJpYWwgPSB0aGlzLl9wbGF0ZU1hdGVyaWFsO1xyXG5cclxuICAgICAgICB0aGlzLl9yZWJ1aWxkQ29udGVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVsZWFzZXMgYWxsIGFzc29jaWF0ZWQgcmVzb3VyY2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCkge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTsgLy8gd2lsbCBkaXNwb3NlIG1haW4gbWVzaCBpZS4gYmFjayBwbGF0ZVxyXG5cclxuICAgICAgICB0aGlzLl9kaXNwb3NlVG9vbHRpcCgpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuc2hhcmVNYXRlcmlhbHMpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmFja01hdGVyaWFsLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5fZnJvbnRNYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BsYXRlTWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BpY2tlZFBvaW50T2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3Qub25QaWNrZWRQb2ludENoYW5nZWRPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9waWNrZWRQb2ludE9ic2VydmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BpY2tlZFBvaW50T2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbnRlbnREaXNwbGF5M0QgfSBmcm9tIFwiLi9jb250ZW50RGlzcGxheTNEXCI7XHJcbmltcG9ydCB0eXBlIHsgQ29udHJvbDNEIH0gZnJvbSBcIi4vY29udHJvbDNEXCI7XHJcbmltcG9ydCB7IFRvdWNoSG9sb2dyYXBoaWNCdXR0b24gfSBmcm9tIFwiLi90b3VjaEhvbG9ncmFwaGljQnV0dG9uXCI7XHJcbmltcG9ydCB7IEFkdmFuY2VkRHluYW1pY1RleHR1cmUgfSBmcm9tIFwiLi4vLi4vMkQvYWR2YW5jZWREeW5hbWljVGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4uLy4uLzJEL2NvbnRyb2xzL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgVGV4dEJsb2NrLCBUZXh0V3JhcHBpbmcgfSBmcm9tIFwiLi4vLi4vMkQvY29udHJvbHMvdGV4dEJsb2NrXCI7XHJcbmltcG9ydCB7IERlZmF1bHRCZWhhdmlvciB9IGZyb20gXCIuLi9iZWhhdmlvcnMvZGVmYXVsdEJlaGF2aW9yXCI7XHJcbmltcG9ydCB7IFNsYXRlR2l6bW8gfSBmcm9tIFwiLi4vZ2l6bW9zL3NsYXRlR2l6bW9cIjtcclxuaW1wb3J0IHsgRmx1ZW50TWF0ZXJpYWwgfSBmcm9tIFwiLi4vbWF0ZXJpYWxzL2ZsdWVudC9mbHVlbnRNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBGbHVlbnRCYWNrcGxhdGVNYXRlcmlhbCB9IGZyb20gXCIuLi9tYXRlcmlhbHMvZmx1ZW50QmFja3BsYXRlL2ZsdWVudEJhY2twbGF0ZU1hdGVyaWFsXCI7XHJcbmltcG9ydCB7IFBvaW50ZXJEcmFnQmVoYXZpb3IgfSBmcm9tIFwiY29yZS9CZWhhdmlvcnMvTWVzaGVzL3BvaW50ZXJEcmFnQmVoYXZpb3JcIjtcclxuaW1wb3J0IHR5cGUgeyBUZXh0dXJlIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL1RleHR1cmVzL3RleHR1cmVcIjtcclxuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gXCJjb3JlL01hdGhzL21hdGhcIjtcclxuaW1wb3J0IHsgRXBzaWxvbiB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguc2NhbGFyXCI7XHJcbmltcG9ydCB0eXBlIHsgTWF0cml4IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHsgUXVhdGVybmlvbiwgVmVjdG9yMiwgVmVjdG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB7IFZpZXdwb3J0IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52aWV3cG9ydFwiO1xyXG5pbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHsgQ3JlYXRlQm94IH0gZnJvbSBcImNvcmUvTWVzaGVzL0J1aWxkZXJzL2JveEJ1aWxkZXJcIjtcclxuaW1wb3J0IHsgQ3JlYXRlUGxhbmUgfSBmcm9tIFwiY29yZS9NZXNoZXMvQnVpbGRlcnMvcGxhbmVCdWlsZGVyXCI7XHJcbmltcG9ydCB0eXBlIHsgVHJhbnNmb3JtTm9kZSB9IGZyb20gXCJjb3JlL01lc2hlcy90cmFuc2Zvcm1Ob2RlXCI7XHJcbmltcG9ydCB7IE1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvbWVzaFwiO1xyXG5pbXBvcnQgeyBWZXJ0ZXhEYXRhIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2gudmVydGV4RGF0YVwiO1xyXG5pbXBvcnQgdHlwZSB7IE9ic2VydmVyIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5pbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSBhIGhvbG9ncmFwaGljIHNsYXRlXHJcbiAqIEBzaW5jZSA1LjAuMFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEhvbG9ncmFwaGljU2xhdGUgZXh0ZW5kcyBDb250ZW50RGlzcGxheTNEIHtcclxuICAgIC8qKlxyXG4gICAgICogQmFzZSBVcmwgZm9yIHRoZSBhc3NldHMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQVNTRVRTX0JBU0VfVVJMOiBzdHJpbmcgPSBcImh0dHBzOi8vYXNzZXRzLmJhYnlsb25qcy5jb20vbWVzaGVzL01SVEsvXCI7XHJcbiAgICAvKipcclxuICAgICAqIEZpbGUgbmFtZSBmb3IgdGhlIGNsb3NlIGljb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQ0xPU0VfSUNPTl9GSUxFTkFNRTogc3RyaW5nID0gXCJJY29uQ2xvc2UucG5nXCI7XHJcbiAgICAvKipcclxuICAgICAqIEZpbGUgbmFtZSBmb3IgdGhlIGNsb3NlIGljb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgRk9MTE9XX0lDT05fRklMRU5BTUU6IHN0cmluZyA9IFwiSWNvbkZvbGxvd01lLnBuZ1wiO1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIF9ERUZBVUxUX1RFWFRfUkVTT0xVVElPTl9ZID0gMTAyLjQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXJnaW4gYmV0d2VlbiB0aXRsZSBiYXIgYW5kIGNvbnRlbnRwbGF0ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdGl0bGVCYXJNYXJnaW4gPSAwLjAwNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9yaWdpbiBpbiBsb2NhbCBjb29yZGluYXRlcyAodG9wIGxlZnQgY29ybmVyKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3JpZ2luID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfZGltZW5zaW9ucyA9IG5ldyBWZWN0b3IyKDIxLjg3NSwgMTIuNSk7XHJcbiAgICBwcml2YXRlIF90aXRsZUJhckhlaWdodCA9IDAuNjI1O1xyXG5cclxuICAgIHByaXZhdGUgX3RpdGxlQmFyTWF0ZXJpYWw6IEZsdWVudEJhY2twbGF0ZU1hdGVyaWFsO1xyXG4gICAgcHJpdmF0ZSBfYmFja01hdGVyaWFsOiBGbHVlbnRCYWNrcGxhdGVNYXRlcmlhbDtcclxuICAgIHByaXZhdGUgX2NvbnRlbnRNYXRlcmlhbDogRmx1ZW50TWF0ZXJpYWw7XHJcbiAgICBwcml2YXRlIF9waWNrZWRQb2ludE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxOdWxsYWJsZTxWZWN0b3IzPj4+O1xyXG4gICAgcHJpdmF0ZSBfcG9zaXRpb25DaGFuZ2VkT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPHsgcG9zaXRpb246IFZlY3RvcjMgfT4+O1xyXG5cclxuICAgIHByaXZhdGUgX3RpdGxlVGV4dCA9IFwiXCI7XHJcbiAgICBwcml2YXRlIF90aXRsZVRleHRDb21wb25lbnQ6IFRleHRCbG9jaztcclxuXHJcbiAgICBwcml2YXRlIF9jb250ZW50Vmlld3BvcnQ6IFZpZXdwb3J0O1xyXG4gICAgcHJpdmF0ZSBfY29udGVudERyYWdCZWhhdmlvcjogUG9pbnRlckRyYWdCZWhhdmlvcjtcclxuXHJcbiAgICBwcml2YXRlIF9kZWZhdWx0QmVoYXZpb3I6IERlZmF1bHRCZWhhdmlvcjtcclxuICAgIC8qKlxyXG4gICAgICogUmVncm91cHMgYWxsIG1lc2ggYmVoYXZpb3JzIGZvciB0aGUgc2xhdGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBkZWZhdWx0QmVoYXZpb3IoKTogRGVmYXVsdEJlaGF2aW9yIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdEJlaGF2aW9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfZ2l6bW86IFNsYXRlR2l6bW87XHJcblxyXG4gICAgcHJvdGVjdGVkIF90aXRsZUJhcjogTWVzaDtcclxuICAgIHByb3RlY3RlZCBfdGl0bGVCYXJUaXRsZTogTWVzaDtcclxuICAgIHByb3RlY3RlZCBfY29udGVudFBsYXRlOiBNZXNoO1xyXG4gICAgcHJvdGVjdGVkIF9iYWNrUGxhdGU6IE1lc2g7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2ZvbGxvd0J1dHRvbjogVG91Y2hIb2xvZ3JhcGhpY0J1dHRvbjtcclxuICAgIHByb3RlY3RlZCBfY2xvc2VCdXR0b246IFRvdWNoSG9sb2dyYXBoaWNCdXR0b247XHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2NvbnRlbnRTY2FsZVJhdGlvID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIDJEIGRpbWVuc2lvbnMgb2YgdGhlIHNsYXRlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgZGltZW5zaW9ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGltZW5zaW9ucztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgZGltZW5zaW9ucyh2YWx1ZSkge1xyXG4gICAgICAgIC8vY2xhbXAsIHJlc3BlY3RpbmcgcmF0aW9zXHJcbiAgICAgICAgbGV0IHNjYWxlID0gMS4wO1xyXG4gICAgICAgIGlmICh2YWx1ZS54IDwgdGhpcy5taW5EaW1lbnNpb25zLnggfHwgdmFsdWUueSA8IHRoaXMubWluRGltZW5zaW9ucy55KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1JhdGlvID0gdmFsdWUueCAvIHZhbHVlLnk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pblJhdGlvID0gdGhpcy5taW5EaW1lbnNpb25zLnggLyB0aGlzLm1pbkRpbWVuc2lvbnMueTtcclxuICAgICAgICAgICAgaWYgKG1pblJhdGlvID4gbmV3UmF0aW8pIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgdGhlIHgtdmFsIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWluXHJcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHRoaXMubWluRGltZW5zaW9ucy54IC8gdmFsdWUueDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgdGhlIHktdmFsIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWluXHJcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHRoaXMubWluRGltZW5zaW9ucy55IC8gdmFsdWUueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZGltZW5zaW9ucy5jb3B5RnJvbSh2YWx1ZSkuc2NhbGVJblBsYWNlKHNjYWxlKTtcclxuICAgICAgICB0aGlzLl91cGRhdGVQaXZvdCgpO1xyXG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uRWxlbWVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1pbmltdW0gZGltZW5zaW9ucyBvZiB0aGUgc2xhdGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1pbkRpbWVuc2lvbnMgPSBuZXcgVmVjdG9yMigxNS42MjUsIDYuMjUpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBkaW1lbnNpb25zIG9mIHRoZSBzbGF0ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZGVmYXVsdERpbWVuc2lvbnMgPSB0aGlzLl9kaW1lbnNpb25zLmNsb25lKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWlnaHQgb2YgdGhlIHRpdGxlIGJhciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB0aXRsZUJhckhlaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGVCYXJIZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHRpdGxlQmFySGVpZ2h0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVCYXJIZWlnaHQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcmluZyBncm91bmQgaWQgb2YgYWxsIHRoZSBtZXNoZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCByZW5kZXJpbmdHcm91cElkKGlkOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl90aXRsZUJhci5yZW5kZXJpbmdHcm91cElkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVCYXJUaXRsZS5yZW5kZXJpbmdHcm91cElkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5fY29udGVudFBsYXRlLnJlbmRlcmluZ0dyb3VwSWQgPSBpZDtcclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUucmVuZGVyaW5nR3JvdXBJZCA9IGlkO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCByZW5kZXJpbmdHcm91cElkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpdGxlQmFyLnJlbmRlcmluZ0dyb3VwSWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdGl0bGUgdGV4dCBkaXNwbGF5ZWQgYXQgdGhlIHRvcCBvZiB0aGUgc2xhdGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCB0aXRsZSh0aXRsZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVUZXh0ID0gdGl0bGU7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RpdGxlVGV4dENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl90aXRsZVRleHRDb21wb25lbnQudGV4dCA9IHRpdGxlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgdGl0bGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpdGxlVGV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgc2xhdGVcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIGNvbnRyb2wgbmFtZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvbGxvd0J1dHRvbiA9IG5ldyBUb3VjaEhvbG9ncmFwaGljQnV0dG9uKFwiZm9sbG93QnV0dG9uXCIgKyB0aGlzLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuX2ZvbGxvd0J1dHRvbi5pc1RvZ2dsZUJ1dHRvbiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24gPSBuZXcgVG91Y2hIb2xvZ3JhcGhpY0J1dHRvbihcImNsb3NlQnV0dG9uXCIgKyB0aGlzLm5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250ZW50Vmlld3BvcnQgPSBuZXcgVmlld3BvcnQoMCwgMCwgMSwgMSk7XHJcbiAgICAgICAgdGhpcy5fY29udGVudERyYWdCZWhhdmlvciA9IG5ldyBQb2ludGVyRHJhZ0JlaGF2aW9yKHtcclxuICAgICAgICAgICAgZHJhZ1BsYW5lTm9ybWFsOiBuZXcgVmVjdG9yMygwLCAwLCAtMSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSB0aGUgZmFjYWRlIHRleHR1cmUgKGNyZWF0ZWQgZnJvbSB0aGUgY29udGVudCBwcm9wZXJ0eSkuXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBvdmVybG9hZGVkIGJ5IGNoaWxkIGNsYXNzZXNcclxuICAgICAqIEBwYXJhbSBmYWNhZGVUZXh0dXJlIGRlZmluZXMgdGhlIEFkdmFuY2VkRHluYW1pY1RleHR1cmUgdG8gdXNlXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYXBwbHlGYWNhZGUoZmFjYWRlVGV4dHVyZTogQWR2YW5jZWREeW5hbWljVGV4dHVyZSkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRNYXRlcmlhbC5hbGJlZG9UZXh0dXJlID0gZmFjYWRlVGV4dHVyZTtcclxuICAgICAgICB0aGlzLl9yZXNldENvbnRlbnRQb3NpdGlvbkFuZFpvb20oKTtcclxuICAgICAgICB0aGlzLl9hcHBseUNvbnRlbnRWaWV3cG9ydCgpO1xyXG5cclxuICAgICAgICBmYWNhZGVUZXh0dXJlLmF0dGFjaFRvTWVzaCh0aGlzLl9jb250ZW50UGxhdGUsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2FkZENvbnRyb2woY29udHJvbDogQ29udHJvbDNEKTogdm9pZCB7XHJcbiAgICAgICAgY29udHJvbC5faG9zdCA9IHRoaXMuX2hvc3Q7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hvc3QudXRpbGl0eUxheWVyKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuX3ByZXBhcmVOb2RlKHRoaXMuX2hvc3QudXRpbGl0eUxheWVyLnV0aWxpdHlMYXllclNjZW5lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9nZXRUeXBlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkhvbG9ncmFwaGljU2xhdGVcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX3Bvc2l0aW9uRWxlbWVudHMoKSB7XHJcbiAgICAgICAgY29uc3QgZm9sbG93QnV0dG9uID0gdGhpcy5fZm9sbG93QnV0dG9uO1xyXG4gICAgICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gdGhpcy5fY2xvc2VCdXR0b247XHJcbiAgICAgICAgY29uc3QgdGl0bGVCYXIgPSB0aGlzLl90aXRsZUJhcjtcclxuICAgICAgICBjb25zdCB0aXRsZUJhclRpdGxlID0gdGhpcy5fdGl0bGVCYXJUaXRsZTtcclxuICAgICAgICBjb25zdCBjb250ZW50UGxhdGUgPSB0aGlzLl9jb250ZW50UGxhdGU7XHJcbiAgICAgICAgY29uc3QgYmFja1BsYXRlID0gdGhpcy5fYmFja1BsYXRlO1xyXG5cclxuICAgICAgICBpZiAoZm9sbG93QnV0dG9uICYmIGNsb3NlQnV0dG9uICYmIHRpdGxlQmFyKSB7XHJcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uLnNjYWxpbmcuc2V0QWxsKHRoaXMudGl0bGVCYXJIZWlnaHQpO1xyXG4gICAgICAgICAgICBmb2xsb3dCdXR0b24uc2NhbGluZy5zZXRBbGwodGhpcy50aXRsZUJhckhlaWdodCk7XHJcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uLnBvc2l0aW9uLmNvcHlGcm9tRmxvYXRzKHRoaXMuZGltZW5zaW9ucy54IC0gdGhpcy50aXRsZUJhckhlaWdodCAvIDIsIC10aGlzLnRpdGxlQmFySGVpZ2h0IC8gMiwgMCkuYWRkSW5QbGFjZSh0aGlzLm9yaWdpbik7XHJcbiAgICAgICAgICAgIGZvbGxvd0J1dHRvbi5wb3NpdGlvbi5jb3B5RnJvbUZsb2F0cyh0aGlzLmRpbWVuc2lvbnMueCAtICgzICogdGhpcy50aXRsZUJhckhlaWdodCkgLyAyLCAtdGhpcy50aXRsZUJhckhlaWdodCAvIDIsIDApLmFkZEluUGxhY2UodGhpcy5vcmlnaW4pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29udGVudFBsYXRlSGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLnkgLSB0aGlzLnRpdGxlQmFySGVpZ2h0IC0gdGhpcy50aXRsZUJhck1hcmdpbjtcclxuICAgICAgICAgICAgY29uc3QgcmlnaHRIYW5kU2NlbmUgPSBjb250ZW50UGxhdGUuZ2V0U2NlbmUoKS51c2VSaWdodEhhbmRlZFN5c3RlbTtcclxuXHJcbiAgICAgICAgICAgIHRpdGxlQmFyLnNjYWxpbmcuc2V0KHRoaXMuZGltZW5zaW9ucy54LCB0aGlzLnRpdGxlQmFySGVpZ2h0LCBFcHNpbG9uKTtcclxuICAgICAgICAgICAgdGl0bGVCYXJUaXRsZS5zY2FsaW5nLnNldCh0aGlzLmRpbWVuc2lvbnMueCAtIDIgKiB0aGlzLnRpdGxlQmFySGVpZ2h0LCB0aGlzLnRpdGxlQmFySGVpZ2h0LCBFcHNpbG9uKTtcclxuICAgICAgICAgICAgY29udGVudFBsYXRlLnNjYWxpbmcuY29weUZyb21GbG9hdHModGhpcy5kaW1lbnNpb25zLngsIGNvbnRlbnRQbGF0ZUhlaWdodCwgRXBzaWxvbik7XHJcbiAgICAgICAgICAgIGJhY2tQbGF0ZS5zY2FsaW5nLmNvcHlGcm9tRmxvYXRzKHRoaXMuZGltZW5zaW9ucy54LCBjb250ZW50UGxhdGVIZWlnaHQsIEVwc2lsb24pO1xyXG5cclxuICAgICAgICAgICAgdGl0bGVCYXIucG9zaXRpb24uY29weUZyb21GbG9hdHModGhpcy5kaW1lbnNpb25zLnggLyAyLCAtKHRoaXMudGl0bGVCYXJIZWlnaHQgLyAyKSwgMCkuYWRkSW5QbGFjZSh0aGlzLm9yaWdpbik7XHJcbiAgICAgICAgICAgIHRpdGxlQmFyVGl0bGUucG9zaXRpb25cclxuICAgICAgICAgICAgICAgIC5jb3B5RnJvbUZsb2F0cyh0aGlzLmRpbWVuc2lvbnMueCAvIDIgLSB0aGlzLnRpdGxlQmFySGVpZ2h0LCAtKHRoaXMudGl0bGVCYXJIZWlnaHQgLyAyKSwgcmlnaHRIYW5kU2NlbmUgPyBFcHNpbG9uIDogLUVwc2lsb24pXHJcbiAgICAgICAgICAgICAgICAuYWRkSW5QbGFjZSh0aGlzLm9yaWdpbik7XHJcbiAgICAgICAgICAgIGNvbnRlbnRQbGF0ZS5wb3NpdGlvbi5jb3B5RnJvbUZsb2F0cyh0aGlzLmRpbWVuc2lvbnMueCAvIDIsIC0odGhpcy50aXRsZUJhckhlaWdodCArIHRoaXMudGl0bGVCYXJNYXJnaW4gKyBjb250ZW50UGxhdGVIZWlnaHQgLyAyKSwgMCkuYWRkSW5QbGFjZSh0aGlzLm9yaWdpbik7XHJcbiAgICAgICAgICAgIGJhY2tQbGF0ZS5wb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgLmNvcHlGcm9tRmxvYXRzKHRoaXMuZGltZW5zaW9ucy54IC8gMiwgLSh0aGlzLnRpdGxlQmFySGVpZ2h0ICsgdGhpcy50aXRsZUJhck1hcmdpbiArIGNvbnRlbnRQbGF0ZUhlaWdodCAvIDIpLCByaWdodEhhbmRTY2VuZSA/IC1FcHNpbG9uIDogRXBzaWxvbilcclxuICAgICAgICAgICAgICAgIC5hZGRJblBsYWNlKHRoaXMub3JpZ2luKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgdGl0bGUncyBBZHZhbmNlZER5bmFtaWNUZXh0dXJlIHNjYWxlIHRvIGF2b2lkIHZpc3VhbCBzdHJldGNoaW5nXHJcbiAgICAgICAgICAgIHRoaXMuX3RpdGxlVGV4dENvbXBvbmVudC5ob3N0LnNjYWxlVG8oXHJcbiAgICAgICAgICAgICAgICAoSG9sb2dyYXBoaWNTbGF0ZS5fREVGQVVMVF9URVhUX1JFU09MVVRJT05fWSAqIHRpdGxlQmFyVGl0bGUuc2NhbGluZy54KSAvIHRpdGxlQmFyVGl0bGUuc2NhbGluZy55LFxyXG4gICAgICAgICAgICAgICAgSG9sb2dyYXBoaWNTbGF0ZS5fREVGQVVMVF9URVhUX1JFU09MVVRJT05fWVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYXNwZWN0UmF0aW8gPSB0aGlzLmRpbWVuc2lvbnMueCAvIGNvbnRlbnRQbGF0ZUhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5fY29udGVudFZpZXdwb3J0LndpZHRoID0gdGhpcy5fY29udGVudFNjYWxlUmF0aW87XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRWaWV3cG9ydC5oZWlnaHQgPSB0aGlzLl9jb250ZW50U2NhbGVSYXRpbyAvIGFzcGVjdFJhdGlvO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYXBwbHlDb250ZW50Vmlld3BvcnQoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2dpem1vKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9naXptby51cGRhdGVCb3VuZGluZ0JveCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2FwcGx5Q29udGVudFZpZXdwb3J0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb250ZW50UGxhdGU/Lm1hdGVyaWFsICYmICh0aGlzLl9jb250ZW50UGxhdGUubWF0ZXJpYWwgYXMgRmx1ZW50TWF0ZXJpYWwpLmFsYmVkb1RleHR1cmUpIHtcclxuICAgICAgICAgICAgY29uc3QgdGV4ID0gKHRoaXMuX2NvbnRlbnRQbGF0ZS5tYXRlcmlhbCBhcyBGbHVlbnRNYXRlcmlhbCkuYWxiZWRvVGV4dHVyZSBhcyBUZXh0dXJlO1xyXG4gICAgICAgICAgICB0ZXgudVNjYWxlID0gdGhpcy5fY29udGVudFNjYWxlUmF0aW87XHJcbiAgICAgICAgICAgIHRleC52U2NhbGUgPSAodGhpcy5fY29udGVudFNjYWxlUmF0aW8gLyB0aGlzLl9jb250ZW50Vmlld3BvcnQud2lkdGgpICogdGhpcy5fY29udGVudFZpZXdwb3J0LmhlaWdodDtcclxuICAgICAgICAgICAgdGV4LnVPZmZzZXQgPSB0aGlzLl9jb250ZW50Vmlld3BvcnQueDtcclxuICAgICAgICAgICAgdGV4LnZPZmZzZXQgPSB0aGlzLl9jb250ZW50Vmlld3BvcnQueTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVzZXRDb250ZW50UG9zaXRpb25BbmRab29tKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRWaWV3cG9ydC54ID0gMDtcclxuICAgICAgICB0aGlzLl9jb250ZW50Vmlld3BvcnQueSA9IDEgLSB0aGlzLl9jb250ZW50Vmlld3BvcnQuaGVpZ2h0IC8gdGhpcy5fY29udGVudFZpZXdwb3J0LndpZHRoO1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRTY2FsZVJhdGlvID0gMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgX3VwZGF0ZVBpdm90KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5tZXNoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBwaXZvdCBwb2ludCBzbyBpdCBpcyBhdCB0aGUgY2VudGVyIG9mIGdlb21ldHJ5XHJcbiAgICAgICAgLy8gQXMgb3JpZ2luIGlzIHRvcGxlZnQgY29ybmVyIGluIDJELCBkaW1lbnNpb25zIGFyZSBjYWxjdWxhdGVkIHRvd2FyZHMgYm90dG9tIHJpZ2h0IGNvcm5lciwgdGh1cyB5IGF4aXMgaXMgZG93bndhcmRzXHJcbiAgICAgICAgY29uc3QgY2VudGVyID0gbmV3IFZlY3RvcjModGhpcy5kaW1lbnNpb25zLnggKiAwLjUsIC10aGlzLmRpbWVuc2lvbnMueSAqIDAuNSwgRXBzaWxvbik7XHJcbiAgICAgICAgY2VudGVyLmFkZEluUGxhY2UodGhpcy5vcmlnaW4pO1xyXG4gICAgICAgIGNlbnRlci56ID0gMDtcclxuXHJcbiAgICAgICAgY29uc3Qgb3JpZ2luID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XHJcbiAgICAgICAgVmVjdG9yMy5UcmFuc2Zvcm1Db29yZGluYXRlc1RvUmVmKG9yaWdpbiwgdGhpcy5tZXNoLmNvbXB1dGVXb3JsZE1hdHJpeCh0cnVlKSwgb3JpZ2luKTtcclxuICAgICAgICB0aGlzLm1lc2guc2V0UGl2b3RQb2ludChjZW50ZXIpO1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbjIgPSBuZXcgVmVjdG9yMygwLCAwLCAwKTtcclxuICAgICAgICBWZWN0b3IzLlRyYW5zZm9ybUNvb3JkaW5hdGVzVG9SZWYob3JpZ2luMiwgdGhpcy5tZXNoLmNvbXB1dGVXb3JsZE1hdHJpeCh0cnVlKSwgb3JpZ2luMik7XHJcbiAgICAgICAgdGhpcy5tZXNoLnBvc2l0aW9uLmFkZEluUGxhY2Uob3JpZ2luKS5zdWJ0cmFjdEluUGxhY2Uob3JpZ2luMik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWVzaCBhc3NvY2lhdGlvblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9jcmVhdGVOb2RlKHNjZW5lOiBTY2VuZSk6IFRyYW5zZm9ybU5vZGUge1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgTWVzaChcInNsYXRlX1wiICsgdGhpcy5uYW1lLCBzY2VuZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RpdGxlQmFyID0gQ3JlYXRlQm94KFwidGl0bGVCYXJfXCIgKyB0aGlzLm5hbWUsIHsgc2l6ZTogMSB9LCBzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVCYXJUaXRsZSA9IENyZWF0ZVBsYW5lKFwidGl0bGVUZXh0X1wiICsgdGhpcy5uYW1lLCB7IHNpemU6IDEgfSwgc2NlbmUpO1xyXG4gICAgICAgIHRoaXMuX3RpdGxlQmFyVGl0bGUucGFyZW50ID0gbm9kZTtcclxuICAgICAgICB0aGlzLl90aXRsZUJhclRpdGxlLmlzUGlja2FibGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgY29uc3QgYWR0ID0gQWR2YW5jZWREeW5hbWljVGV4dHVyZS5DcmVhdGVGb3JNZXNoKHRoaXMuX3RpdGxlQmFyVGl0bGUpO1xyXG4gICAgICAgIHRoaXMuX3RpdGxlVGV4dENvbXBvbmVudCA9IG5ldyBUZXh0QmxvY2soXCJ0aXRsZVRleHRfXCIgKyB0aGlzLm5hbWUsIHRoaXMuX3RpdGxlVGV4dCk7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVUZXh0Q29tcG9uZW50LnRleHRXcmFwcGluZyA9IFRleHRXcmFwcGluZy5FbGxpcHNpcztcclxuICAgICAgICB0aGlzLl90aXRsZVRleHRDb21wb25lbnQudGV4dEhvcml6b250YWxBbGlnbm1lbnQgPSBDb250cm9sLkhPUklaT05UQUxfQUxJR05NRU5UX0xFRlQ7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVUZXh0Q29tcG9uZW50LmNvbG9yID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIHRoaXMuX3RpdGxlVGV4dENvbXBvbmVudC5mb250U2l6ZSA9IEhvbG9ncmFwaGljU2xhdGUuX0RFRkFVTFRfVEVYVF9SRVNPTFVUSU9OX1kgLyAyO1xyXG4gICAgICAgIHRoaXMuX3RpdGxlVGV4dENvbXBvbmVudC5wYWRkaW5nTGVmdCA9IEhvbG9ncmFwaGljU2xhdGUuX0RFRkFVTFRfVEVYVF9SRVNPTFVUSU9OX1kgLyA0O1xyXG4gICAgICAgIGFkdC5hZGRDb250cm9sKHRoaXMuX3RpdGxlVGV4dENvbXBvbmVudCk7XHJcblxyXG4gICAgICAgIGlmIChzY2VuZS51c2VSaWdodEhhbmRlZFN5c3RlbSkge1xyXG4gICAgICAgICAgICBjb25zdCBmYWNlVVYgPSBuZXcgVmVjdG9yNCgwLCAwLCAxLCAxKTtcclxuICAgICAgICAgICAgdGhpcy5fY29udGVudFBsYXRlID0gQ3JlYXRlUGxhbmUoXCJjb250ZW50UGxhdGVfXCIgKyB0aGlzLm5hbWUsIHsgc2l6ZTogMSwgc2lkZU9yaWVudGF0aW9uOiBWZXJ0ZXhEYXRhLkJBQ0tTSURFLCBmcm9udFVWczogZmFjZVVWIH0sIHNjZW5lKTtcclxuICAgICAgICAgICAgdGhpcy5fYmFja1BsYXRlID0gQ3JlYXRlUGxhbmUoXCJiYWNrUGxhdGVfXCIgKyB0aGlzLm5hbWUsIHsgc2l6ZTogMSwgc2lkZU9yaWVudGF0aW9uOiBWZXJ0ZXhEYXRhLkZST05UU0lERSB9LCBzY2VuZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZmFjZVVWID0gbmV3IFZlY3RvcjQoMCwgMCwgMSwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRQbGF0ZSA9IENyZWF0ZVBsYW5lKFwiY29udGVudFBsYXRlX1wiICsgdGhpcy5uYW1lLCB7IHNpemU6IDEsIHNpZGVPcmllbnRhdGlvbjogVmVydGV4RGF0YS5GUk9OVFNJREUsIGZyb250VVZzOiBmYWNlVVYgfSwgc2NlbmUpO1xyXG4gICAgICAgICAgICB0aGlzLl9iYWNrUGxhdGUgPSBDcmVhdGVQbGFuZShcImJhY2tQbGF0ZV9cIiArIHRoaXMubmFtZSwgeyBzaXplOiAxLCBzaWRlT3JpZW50YXRpb246IFZlcnRleERhdGEuQkFDS1NJREUgfSwgc2NlbmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdGl0bGVCYXIucGFyZW50ID0gbm9kZTtcclxuICAgICAgICB0aGlzLl90aXRsZUJhci5pc05lYXJHcmFiYmFibGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRQbGF0ZS5wYXJlbnQgPSBub2RlO1xyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5wYXJlbnQgPSBub2RlO1xyXG4gICAgICAgIHRoaXMuX2F0dGFjaENvbnRlbnRQbGF0ZUJlaGF2aW9yKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FkZENvbnRyb2wodGhpcy5fZm9sbG93QnV0dG9uKTtcclxuICAgICAgICB0aGlzLl9hZGRDb250cm9sKHRoaXMuX2Nsb3NlQnV0dG9uKTtcclxuXHJcbiAgICAgICAgY29uc3QgZm9sbG93QnV0dG9uID0gdGhpcy5fZm9sbG93QnV0dG9uO1xyXG4gICAgICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gdGhpcy5fY2xvc2VCdXR0b247XHJcblxyXG4gICAgICAgIGZvbGxvd0J1dHRvbi5ub2RlIS5wYXJlbnQgPSBub2RlO1xyXG4gICAgICAgIGNsb3NlQnV0dG9uLm5vZGUhLnBhcmVudCA9IG5vZGU7XHJcblxyXG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uRWxlbWVudHMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZm9sbG93QnV0dG9uLmltYWdlVXJsID0gSG9sb2dyYXBoaWNTbGF0ZS5BU1NFVFNfQkFTRV9VUkwgKyBIb2xvZ3JhcGhpY1NsYXRlLkZPTExPV19JQ09OX0ZJTEVOQU1FO1xyXG4gICAgICAgIHRoaXMuX2Nsb3NlQnV0dG9uLmltYWdlVXJsID0gSG9sb2dyYXBoaWNTbGF0ZS5BU1NFVFNfQkFTRV9VUkwgKyBIb2xvZ3JhcGhpY1NsYXRlLkNMT1NFX0lDT05fRklMRU5BTUU7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvbGxvd0J1dHRvbi5pc0JhY2twbGF0ZVZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9jbG9zZUJ1dHRvbi5pc0JhY2twbGF0ZVZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5fZm9sbG93QnV0dG9uLm9uVG9nZ2xlT2JzZXJ2YWJsZS5hZGQoKGlzVG9nZ2xlZCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0QmVoYXZpb3IuZm9sbG93QmVoYXZpb3JFbmFibGVkID0gaXNUb2dnbGVkO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGVmYXVsdEJlaGF2aW9yLmZvbGxvd0JlaGF2aW9yRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmYXVsdEJlaGF2aW9yLmZvbGxvd0JlaGF2aW9yLnJlY2VudGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24ub25Qb2ludGVyQ2xpY2tPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBub2RlLnJvdGF0aW9uUXVhdGVybmlvbiA9IFF1YXRlcm5pb24uSWRlbnRpdHkoKTtcclxuICAgICAgICBub2RlLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9hdHRhY2hDb250ZW50UGxhdGVCZWhhdmlvcigpIHtcclxuICAgICAgICB0aGlzLl9jb250ZW50RHJhZ0JlaGF2aW9yLmF0dGFjaCh0aGlzLl9jb250ZW50UGxhdGUpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnREcmFnQmVoYXZpb3IubW92ZUF0dGFjaGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fY29udGVudERyYWdCZWhhdmlvci51c2VPYmplY3RPcmllbnRhdGlvbkZvckRyYWdnaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9jb250ZW50RHJhZ0JlaGF2aW9yLnVwZGF0ZURyYWdQbGFuZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdCBvcmlnaW4gPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICAgIGNvbnN0IHdvcmxkRGltZW5zaW9ucyA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgY29uc3QgdXBXb3JsZCA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgY29uc3QgcmlnaHRXb3JsZCA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdGVkT2Zmc2V0ID0gbmV3IFZlY3RvcjIoKTtcclxuICAgICAgICBsZXQgc3RhcnRWaWV3cG9ydDogVmlld3BvcnQ7XHJcbiAgICAgICAgbGV0IHdvcmxkTWF0cml4OiBNYXRyaXg7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRlbnREcmFnQmVoYXZpb3Iub25EcmFnU3RhcnRPYnNlcnZhYmxlLmFkZCgoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGFydFZpZXdwb3J0ID0gdGhpcy5fY29udGVudFZpZXdwb3J0LmNsb25lKCk7XHJcbiAgICAgICAgICAgIHdvcmxkTWF0cml4ID0gdGhpcy5ub2RlLmNvbXB1dGVXb3JsZE1hdHJpeCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIG9yaWdpbi5jb3B5RnJvbShldmVudC5kcmFnUGxhbmVQb2ludCk7XHJcbiAgICAgICAgICAgIHdvcmxkRGltZW5zaW9ucy5zZXQodGhpcy5kaW1lbnNpb25zLngsIHRoaXMuZGltZW5zaW9ucy55LCBFcHNpbG9uKTtcclxuICAgICAgICAgICAgd29ybGREaW1lbnNpb25zLnkgLT0gdGhpcy50aXRsZUJhckhlaWdodCArIHRoaXMudGl0bGVCYXJNYXJnaW47XHJcbiAgICAgICAgICAgIFZlY3RvcjMuVHJhbnNmb3JtTm9ybWFsVG9SZWYod29ybGREaW1lbnNpb25zLCB3b3JsZE1hdHJpeCwgd29ybGREaW1lbnNpb25zKTtcclxuICAgICAgICAgICAgdXBXb3JsZC5jb3B5RnJvbUZsb2F0cygwLCAxLCAwKTtcclxuICAgICAgICAgICAgVmVjdG9yMy5UcmFuc2Zvcm1Ob3JtYWxUb1JlZih1cFdvcmxkLCB3b3JsZE1hdHJpeCwgdXBXb3JsZCk7XHJcbiAgICAgICAgICAgIHJpZ2h0V29ybGQuY29weUZyb21GbG9hdHMoMSwgMCwgMCk7XHJcbiAgICAgICAgICAgIFZlY3RvcjMuVHJhbnNmb3JtTm9ybWFsVG9SZWYocmlnaHRXb3JsZCwgd29ybGRNYXRyaXgsIHJpZ2h0V29ybGQpO1xyXG4gICAgICAgICAgICB1cFdvcmxkLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgICAgICB1cFdvcmxkLnNjYWxlSW5QbGFjZSgxIC8gVmVjdG9yMy5Eb3QodXBXb3JsZCwgd29ybGREaW1lbnNpb25zKSk7XHJcbiAgICAgICAgICAgIHJpZ2h0V29ybGQubm9ybWFsaXplKCk7XHJcbiAgICAgICAgICAgIHJpZ2h0V29ybGQuc2NhbGVJblBsYWNlKDEgLyBWZWN0b3IzLkRvdChyaWdodFdvcmxkLCB3b3JsZERpbWVuc2lvbnMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgICB0aGlzLl9jb250ZW50RHJhZ0JlaGF2aW9yLm9uRHJhZ09ic2VydmFibGUuYWRkKChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBvZmZzZXQuY29weUZyb20oZXZlbnQuZHJhZ1BsYW5lUG9pbnQpO1xyXG4gICAgICAgICAgICBvZmZzZXQuc3VidHJhY3RJblBsYWNlKG9yaWdpbik7XHJcbiAgICAgICAgICAgIHByb2plY3RlZE9mZnNldC5jb3B5RnJvbUZsb2F0cyhWZWN0b3IzLkRvdChvZmZzZXQsIHJpZ2h0V29ybGQpLCBWZWN0b3IzLkRvdChvZmZzZXQsIHVwV29ybGQpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIGNvbnRlbnQgdGFrZXMgZnVsbCB3aWR0aCBhdmFpbGFibGUgYW5kIGhlaWdodCBpcyBjcm9wcGVkIHRvIGtlZXAgYXNwZWN0IHJhdGlvXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRWaWV3cG9ydC54ID0gU2NhbGFyLkNsYW1wKHN0YXJ0Vmlld3BvcnQueCAtIG9mZnNldC54LCAwLCAxIC0gdGhpcy5fY29udGVudFZpZXdwb3J0LndpZHRoICogdGhpcy5fY29udGVudFNjYWxlUmF0aW8pO1xyXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50Vmlld3BvcnQueSA9IFNjYWxhci5DbGFtcChzdGFydFZpZXdwb3J0LnkgLSBvZmZzZXQueSwgMCwgMSAtIHRoaXMuX2NvbnRlbnRWaWV3cG9ydC5oZWlnaHQgKiB0aGlzLl9jb250ZW50U2NhbGVSYXRpbyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5Q29udGVudFZpZXdwb3J0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9hZmZlY3RNYXRlcmlhbChtZXNoOiBBYnN0cmFjdE1lc2gpIHtcclxuICAgICAgICAvLyBUT0RPIHNoYXJlIG1hdGVyaWFsc1xyXG4gICAgICAgIHRoaXMuX3RpdGxlQmFyTWF0ZXJpYWwgPSBuZXcgRmx1ZW50QmFja3BsYXRlTWF0ZXJpYWwoYCR7dGhpcy5uYW1lfSBwbGF0ZU1hdGVyaWFsYCwgbWVzaC5nZXRTY2VuZSgpKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udGVudE1hdGVyaWFsID0gbmV3IEZsdWVudE1hdGVyaWFsKGAke3RoaXMubmFtZX0gY29udGVudE1hdGVyaWFsYCwgbWVzaC5nZXRTY2VuZSgpKTtcclxuICAgICAgICB0aGlzLl9jb250ZW50TWF0ZXJpYWwucmVuZGVyQm9yZGVycyA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuX2JhY2tNYXRlcmlhbCA9IG5ldyBGbHVlbnRCYWNrcGxhdGVNYXRlcmlhbChgJHt0aGlzLm5hbWV9IGJhY2tQbGF0ZWAsIG1lc2guZ2V0U2NlbmUoKSk7XHJcbiAgICAgICAgdGhpcy5fYmFja01hdGVyaWFsLmxpbmVXaWR0aCA9IEVwc2lsb247XHJcbiAgICAgICAgdGhpcy5fYmFja01hdGVyaWFsLnJhZGl1cyA9IDAuMDA1O1xyXG4gICAgICAgIHRoaXMuX2JhY2tNYXRlcmlhbC5iYWNrRmFjZUN1bGxpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLl90aXRsZUJhci5tYXRlcmlhbCA9IHRoaXMuX3RpdGxlQmFyTWF0ZXJpYWw7XHJcbiAgICAgICAgdGhpcy5fY29udGVudFBsYXRlLm1hdGVyaWFsID0gdGhpcy5fY29udGVudE1hdGVyaWFsO1xyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5tYXRlcmlhbCA9IHRoaXMuX2JhY2tNYXRlcmlhbDtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVzZXRDb250ZW50KCk7XHJcbiAgICAgICAgdGhpcy5fYXBwbHlDb250ZW50Vmlld3BvcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgX3ByZXBhcmVOb2RlKHNjZW5lOiBTY2VuZSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLl9wcmVwYXJlTm9kZShzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5fZ2l6bW8gPSBuZXcgU2xhdGVHaXptbyh0aGlzLl9ob3N0LnV0aWxpdHlMYXllciEpO1xyXG4gICAgICAgIHRoaXMuX2dpem1vLmF0dGFjaGVkU2xhdGUgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2RlZmF1bHRCZWhhdmlvciA9IG5ldyBEZWZhdWx0QmVoYXZpb3IoKTtcclxuICAgICAgICB0aGlzLl9kZWZhdWx0QmVoYXZpb3IuYXR0YWNoKHRoaXMubm9kZSBhcyBNZXNoLCBbdGhpcy5fdGl0bGVCYXJdKTtcclxuICAgICAgICB0aGlzLl9kZWZhdWx0QmVoYXZpb3Iuc2l4RG9mRHJhZ0JlaGF2aW9yLm9uRHJhZ1N0YXJ0T2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9mb2xsb3dCdXR0b24uaXNUb2dnbGVkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZE9ic2VydmVyID0gdGhpcy5fZGVmYXVsdEJlaGF2aW9yLnNpeERvZkRyYWdCZWhhdmlvci5vblBvc2l0aW9uQ2hhbmdlZE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fZ2l6bW8udXBkYXRlQm91bmRpbmdCb3goKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlUGl2b3QoKTtcclxuICAgICAgICB0aGlzLnJlc2V0RGVmYXVsdEFzcGVjdEFuZFBvc2UoZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzZXRzIHRoZSBhc3BlY3QgYW5kIHBvc2Ugb2YgdGhlIHNsYXRlIHNvIGl0IGlzIHJpZ2h0IGluIGZyb250IG9mIHRoZSBhY3RpdmUgY2FtZXJhLCBmYWNpbmcgdG93YXJkcyBpdC5cclxuICAgICAqIEBwYXJhbSByZXNldEFzcGVjdCBTaG91bGQgdGhlIHNsYXRlJ3MgZGltZW5zaW9ucy9hc3BlY3QgcmF0aW8gYmUgcmVzZXQgYXMgd2VsbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVzZXREZWZhdWx0QXNwZWN0QW5kUG9zZShyZXNldEFzcGVjdDogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2hvc3QgfHwgIXRoaXMuX2hvc3QudXRpbGl0eUxheWVyIHx8ICF0aGlzLm5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuX2hvc3QudXRpbGl0eUxheWVyLnV0aWxpdHlMYXllclNjZW5lO1xyXG4gICAgICAgIGNvbnN0IGNhbWVyYSA9IHNjZW5lLmFjdGl2ZUNhbWVyYTtcclxuICAgICAgICBpZiAoY2FtZXJhKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdvcmxkTWF0cml4ID0gY2FtZXJhLmdldFdvcmxkTWF0cml4KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhY2t3YXJkID0gVmVjdG9yMy5UcmFuc2Zvcm1Ob3JtYWwoVmVjdG9yMy5CYWNrd2FyZChzY2VuZS51c2VSaWdodEhhbmRlZFN5c3RlbSksIHdvcmxkTWF0cml4KTtcclxuICAgICAgICAgICAgdGhpcy5vcmlnaW4uc2V0QWxsKDApO1xyXG4gICAgICAgICAgICB0aGlzLl9naXptby51cGRhdGVCb3VuZGluZ0JveCgpO1xyXG4gICAgICAgICAgICBjb25zdCBwaXZvdCA9IHRoaXMubm9kZS5nZXRBYnNvbHV0ZVBpdm90UG9pbnQoKTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLnBvc2l0aW9uLmNvcHlGcm9tKGNhbWVyYS5wb3NpdGlvbikuc3VidHJhY3RJblBsYWNlKGJhY2t3YXJkKS5zdWJ0cmFjdEluUGxhY2UocGl2b3QpO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUucm90YXRpb25RdWF0ZXJuaW9uID0gUXVhdGVybmlvbi5Gcm9tTG9va0RpcmVjdGlvbkxIKGJhY2t3YXJkLCBuZXcgVmVjdG9yMygwLCAxLCAwKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzZXRBc3BlY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGltZW5zaW9ucyA9IHRoaXMuZGVmYXVsdERpbWVuc2lvbnM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWxlYXNlcyBhbGwgYXNzb2NpYXRlZCByZXNvdXJjZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX3RpdGxlQmFyTWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRNYXRlcmlhbC5kaXNwb3NlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RpdGxlQmFyLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLl90aXRsZUJhclRpdGxlLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLl9jb250ZW50UGxhdGUuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5kaXNwb3NlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZvbGxvd0J1dHRvbi5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24uZGlzcG9zZSgpO1xyXG5cclxuICAgICAgICB0aGlzLl9ob3N0Lm9uUGlja2VkUG9pbnRDaGFuZ2VkT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fcGlja2VkUG9pbnRPYnNlcnZlcik7XHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdEJlaGF2aW9yLnNpeERvZkRyYWdCZWhhdmlvci5vblBvc2l0aW9uQ2hhbmdlZE9ic2VydmFibGUucmVtb3ZlKHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZE9ic2VydmVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdEJlaGF2aW9yLmRldGFjaCgpO1xyXG4gICAgICAgIHRoaXMuX2dpem1vLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLl9jb250ZW50RHJhZ0JlaGF2aW9yLmRldGFjaCgpO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCAqIGZyb20gXCIuL2Fic3RyYWN0QnV0dG9uM0RcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vYnV0dG9uM0RcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY29udGFpbmVyM0RcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY29udHJvbDNEXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2N5bGluZGVyUGFuZWxcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vaGFuZE1lbnVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vaG9sb2dyYXBoaWNCYWNrcGxhdGVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vaG9sb2dyYXBoaWNCdXR0b25cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vaG9sb2dyYXBoaWNTbGF0ZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9tZXNoQnV0dG9uM0RcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbmVhck1lbnVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vcGxhbmVQYW5lbFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9zY2F0dGVyUGFuZWxcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc2xpZGVyM0RcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc3BoZXJlUGFuZWxcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vc3RhY2tQYW5lbDNEXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3RvdWNoQnV0dG9uM0RcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdG91Y2hNZXNoQnV0dG9uM0RcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdG91Y2hIb2xvZ3JhcGhpY0J1dHRvblwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi90b3VjaEhvbG9ncmFwaGljTWVudVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi92b2x1bWVCYXNlZFBhbmVsXCI7XHJcblxyXG4vLyBNUlRLMyBDb250cm9sc1xyXG5leHBvcnQgeyBUb3VjaEhvbG9ncmFwaGljQnV0dG9uIGFzIFRvdWNoSG9sb2dyYXBoaWNCdXR0b25WMyB9IGZyb20gXCIuL01SVEszL3RvdWNoSG9sb2dyYXBoaWNCdXR0b25cIjtcclxuIiwiaW1wb3J0IHR5cGUgeyBUcmFuc2Zvcm1Ob2RlIH0gZnJvbSBcImNvcmUvTWVzaGVzL3RyYW5zZm9ybU5vZGVcIjtcclxuaW1wb3J0IHR5cGUgeyBBYnN0cmFjdE1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvYWJzdHJhY3RNZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9tZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5cclxuaW1wb3J0IHsgQnV0dG9uM0QgfSBmcm9tIFwiLi9idXR0b24zRFwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGFuIGludGVyYWN0YWJsZSBvYmplY3QuIEl0J3MgYSAzRCBidXR0b24gdXNpbmcgYSBtZXNoIGNvbWluZyBmcm9tIHRoZSBjdXJyZW50IHNjZW5lXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzaEJ1dHRvbjNEIGV4dGVuZHMgQnV0dG9uM0Qge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9jdXJyZW50TWVzaDogTWVzaDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgM0QgYnV0dG9uIGJhc2VkIG9uIGEgbWVzaFxyXG4gICAgICogQHBhcmFtIG1lc2ggbWVzaCB0byBiZWNvbWUgYSAzRCBidXR0b25cclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIGNvbnRyb2wgbmFtZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNoOiBNZXNoLCBuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudE1lc2ggPSBtZXNoO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQcm92aWRlcyBhIGRlZmF1bHQgYmVoYXZpb3Igb24gaG92ZXIvb3V0ICYgdXAvZG93blxyXG4gICAgICAgICAqIE92ZXJyaWRlIHRob3NlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB5b3VyIG93biBkZXNpcmVkIGJlaGF2aW9yIHNwZWNpZmljIHRvIHlvdXIgbWVzaFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucG9pbnRlckVudGVyQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubWVzaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubWVzaC5zY2FsaW5nLnNjYWxlSW5QbGFjZSgxLjEpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlck91dEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1lc2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1lc2guc2NhbGluZy5zY2FsZUluUGxhY2UoMS4wIC8gMS4xKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJEb3duQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubWVzaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubWVzaC5zY2FsaW5nLnNjYWxlSW5QbGFjZSgwLjk1KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJVcEFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1lc2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1lc2guc2NhbGluZy5zY2FsZUluUGxhY2UoMS4wIC8gMC45NSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiTWVzaEJ1dHRvbjNEXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWVzaCBhc3NvY2lhdGlvblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9jcmVhdGVOb2RlKHNjZW5lOiBTY2VuZSk6IFRyYW5zZm9ybU5vZGUge1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNZXNoLmdldENoaWxkTWVzaGVzKCkuZm9yRWFjaCgobWVzaCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9pbmplY3RHVUkzRFJlc2VydmVkRGF0YVN0b3JlKG1lc2gpLmNvbnRyb2wgPSB0aGlzO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50TWVzaDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FmZmVjdE1hdGVyaWFsKG1lc2g6IEFic3RyYWN0TWVzaCkge31cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IFNjZW5lIH0gZnJvbSBcImNvcmUvc2NlbmVcIjtcclxuaW1wb3J0IHR5cGUgeyBUcmFuc2Zvcm1Ob2RlIH0gZnJvbSBcImNvcmUvTWVzaGVzL3RyYW5zZm9ybU5vZGVcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9tZXNoXCI7XHJcbmltcG9ydCB7IFRvdWNoSG9sb2dyYXBoaWNCdXR0b24gfSBmcm9tIFwiLi90b3VjaEhvbG9ncmFwaGljQnV0dG9uXCI7XHJcbmltcG9ydCB7IERlZmF1bHRCZWhhdmlvciB9IGZyb20gXCIuLi9iZWhhdmlvcnMvZGVmYXVsdEJlaGF2aW9yXCI7XHJcbmltcG9ydCB7IFRvdWNoSG9sb2dyYXBoaWNNZW51IH0gZnJvbSBcIi4vdG91Y2hIb2xvZ3JhcGhpY01lbnVcIjtcclxuaW1wb3J0IHR5cGUgeyBPYnNlcnZlciB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgdHlwZSB7IFZlY3RvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IFBpY2tpbmdJbmZvIH0gZnJvbSBcImNvcmUvQ29sbGlzaW9ucy9waWNraW5nSW5mb1wiO1xyXG5cclxuLyoqXHJcbiAqIE5lYXJNZW51IHRoYXQgZGlzcGxheXMgYnV0dG9ucyBhbmQgZm9sbG93cyB0aGUgY2FtZXJhXHJcbiAqIEBzaW5jZSA1LjAuMFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE5lYXJNZW51IGV4dGVuZHMgVG91Y2hIb2xvZ3JhcGhpY01lbnUge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlIFVybCBmb3IgdGhlIGFzc2V0cy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX0FTU0VUU19CQVNFX1VSTDogc3RyaW5nID0gXCJodHRwczovL2Fzc2V0cy5iYWJ5bG9uanMuY29tL21lc2hlcy9NUlRLL1wiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGaWxlIG5hbWUgZm9yIHRoZSBjbG9zZSBpY29uLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfUElOX0lDT05fRklMRU5BTUU6IHN0cmluZyA9IFwiSWNvblBpbi5wbmdcIjtcclxuXHJcbiAgICBwcml2YXRlIF9waW5CdXR0b246IFRvdWNoSG9sb2dyYXBoaWNCdXR0b247XHJcbiAgICBwcml2YXRlIF9kcmFnT2JzZXJ2ZXI6IE51bGxhYmxlPFxyXG4gICAgICAgIE9ic2VydmVyPHtcclxuICAgICAgICAgICAgZGVsdGE6IFZlY3RvcjM7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBWZWN0b3IzO1xyXG4gICAgICAgICAgICBwaWNrSW5mbzogUGlja2luZ0luZm87XHJcbiAgICAgICAgfT5cclxuICAgID47XHJcblxyXG4gICAgcHJpdmF0ZSBfZGVmYXVsdEJlaGF2aW9yOiBEZWZhdWx0QmVoYXZpb3I7XHJcbiAgICAvKipcclxuICAgICAqIFJlZ3JvdXBzIGFsbCBtZXNoIGJlaGF2aW9ycyBmb3IgdGhlIG5lYXIgbWVudVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGRlZmF1bHRCZWhhdmlvcigpOiBEZWZhdWx0QmVoYXZpb3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0QmVoYXZpb3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaXNQaW5uZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBuZWFyIG1lbnUgaXMgd29ybGQtcGlubmVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNQaW5uZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUGlubmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaXNQaW5uZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICAvLyBUZWxsIHRoZSBwaW4gYnV0dG9uIHRvIHRvZ2dsZSBpZiB0aGlzIHdhcyBjYWxsZWQgbWFudWFsbHksIGZvciBjbGVhbiBzdGF0ZSBjb250cm9sXHJcbiAgICAgICAgaWYgKHRoaXMuX3BpbkJ1dHRvbi5pc1RvZ2dsZWQgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BpbkJ1dHRvbi5pc1RvZ2dsZWQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faXNQaW5uZWQgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRCZWhhdmlvci5mb2xsb3dCZWhhdmlvckVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0QmVoYXZpb3IuZm9sbG93QmVoYXZpb3JFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlUGluQnV0dG9uKHBhcmVudDogVHJhbnNmb3JtTm9kZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRyb2wgPSBuZXcgVG91Y2hIb2xvZ3JhcGhpY0J1dHRvbihcInBpblwiICsgdGhpcy5uYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgY29udHJvbC5pbWFnZVVybCA9IE5lYXJNZW51Ll9BU1NFVFNfQkFTRV9VUkwgKyBOZWFyTWVudS5fUElOX0lDT05fRklMRU5BTUU7XHJcbiAgICAgICAgY29udHJvbC5wYXJlbnQgPSB0aGlzO1xyXG4gICAgICAgIGNvbnRyb2wuX2hvc3QgPSB0aGlzLl9ob3N0O1xyXG4gICAgICAgIGNvbnRyb2wuaXNUb2dnbGVCdXR0b24gPSB0cnVlO1xyXG4gICAgICAgIGNvbnRyb2wub25Ub2dnbGVPYnNlcnZhYmxlLmFkZCgobmV3U3RhdGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pc1Bpbm5lZCA9IG5ld1N0YXRlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faG9zdC51dGlsaXR5TGF5ZXIpIHtcclxuICAgICAgICAgICAgY29udHJvbC5fcHJlcGFyZU5vZGUodGhpcy5faG9zdC51dGlsaXR5TGF5ZXIudXRpbGl0eUxheWVyU2NlbmUpO1xyXG4gICAgICAgICAgICBjb250cm9sLnNjYWxpbmcuc2NhbGVJblBsYWNlKFRvdWNoSG9sb2dyYXBoaWNNZW51Lk1FTlVfQlVUVE9OX1NDQUxFKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb250cm9sLm5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2wubm9kZS5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb250cm9sO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfY3JlYXRlTm9kZShzY2VuZTogU2NlbmUpOiBOdWxsYWJsZTxUcmFuc2Zvcm1Ob2RlPiB7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IHN1cGVyLl9jcmVhdGVOb2RlKHNjZW5lKSEgYXMgTWVzaDtcclxuXHJcbiAgICAgICAgdGhpcy5fcGluQnV0dG9uID0gdGhpcy5fY3JlYXRlUGluQnV0dG9uKG5vZGUpO1xyXG4gICAgICAgIHRoaXMuaXNQaW5uZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdEJlaGF2aW9yLmF0dGFjaChub2RlLCBbdGhpcy5fYmFja1BsYXRlXSk7XHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdEJlaGF2aW9yLmZvbGxvd0JlaGF2aW9yLmlnbm9yZUNhbWVyYVBpdGNoQW5kUm9sbCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdEJlaGF2aW9yLmZvbGxvd0JlaGF2aW9yLnBpdGNoT2Zmc2V0ID0gLTE1O1xyXG4gICAgICAgIHRoaXMuX2RlZmF1bHRCZWhhdmlvci5mb2xsb3dCZWhhdmlvci5taW5pbXVtRGlzdGFuY2UgPSAwLjM7XHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdEJlaGF2aW9yLmZvbGxvd0JlaGF2aW9yLmRlZmF1bHREaXN0YW5jZSA9IDAuNDtcclxuICAgICAgICB0aGlzLl9kZWZhdWx0QmVoYXZpb3IuZm9sbG93QmVoYXZpb3IubWF4aW11bURpc3RhbmNlID0gMC42O1xyXG5cclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUuaXNOZWFyR3JhYmJhYmxlID0gdHJ1ZTtcclxuICAgICAgICBub2RlLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2ZpbmFsUHJvY2Vzc2luZygpIHtcclxuICAgICAgICBzdXBlci5fZmluYWxQcm9jZXNzaW5nKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3BpbkJ1dHRvbi5wb3NpdGlvbi5jb3B5RnJvbUZsb2F0cygodGhpcy5fYmFja1BsYXRlLnNjYWxpbmcueCArIFRvdWNoSG9sb2dyYXBoaWNNZW51Lk1FTlVfQlVUVE9OX1NDQUxFKSAvIDIsIHRoaXMuX2JhY2tQbGF0ZS5zY2FsaW5nLnkgLyAyLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZWFyIG1lbnUgR1VJIDNEIGNvbnRyb2xcclxuICAgICAqIEBwYXJhbSBuYW1lIG5hbWUgb2YgdGhlIG5lYXIgbWVudVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2RlZmF1bHRCZWhhdmlvciA9IG5ldyBEZWZhdWx0QmVoYXZpb3IoKTtcclxuICAgICAgICB0aGlzLl9kcmFnT2JzZXJ2ZXIgPSB0aGlzLl9kZWZhdWx0QmVoYXZpb3Iuc2l4RG9mRHJhZ0JlaGF2aW9yLm9uRHJhZ09ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pc1Bpbm5lZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYmFja1BsYXRlTWFyZ2luID0gMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERpc3Bvc2VzIHRoZSBuZWFyIG1lbnVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG5cclxuICAgICAgICB0aGlzLl9kZWZhdWx0QmVoYXZpb3Iuc2l4RG9mRHJhZ0JlaGF2aW9yLm9uRHJhZ09ic2VydmFibGUucmVtb3ZlKHRoaXMuX2RyYWdPYnNlcnZlcik7XHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdEJlaGF2aW9yLmRldGFjaCgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFRtcFZlY3RvcnMsIFZlY3RvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5cclxuaW1wb3J0IHsgQ29udGFpbmVyM0QgfSBmcm9tIFwiLi9jb250YWluZXIzRFwiO1xyXG5pbXBvcnQgdHlwZSB7IENvbnRyb2wzRCB9IGZyb20gXCIuL2NvbnRyb2wzRFwiO1xyXG5pbXBvcnQgeyBWb2x1bWVCYXNlZFBhbmVsIH0gZnJvbSBcIi4vdm9sdW1lQmFzZWRQYW5lbFwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGEgY29udGFpbmVyIHBhbmVsIGRlcGxveWVkIG9uIHRoZSBzdXJmYWNlIG9mIGEgcGxhbmVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQbGFuZVBhbmVsIGV4dGVuZHMgVm9sdW1lQmFzZWRQYW5lbCB7XHJcbiAgICBwcm90ZWN0ZWQgX21hcEdyaWROb2RlKGNvbnRyb2w6IENvbnRyb2wzRCwgbm9kZVBvc2l0aW9uOiBWZWN0b3IzKSB7XHJcbiAgICAgICAgY29uc3QgbWVzaCA9IGNvbnRyb2wubWVzaDtcclxuXHJcbiAgICAgICAgaWYgKCFtZXNoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRyb2wucG9zaXRpb24gPSBub2RlUG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBUbXBWZWN0b3JzLlZlY3RvcjNbMF07XHJcblxyXG4gICAgICAgIHRhcmdldC5jb3B5RnJvbShub2RlUG9zaXRpb24pO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMub3JpZW50YXRpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBDb250YWluZXIzRC5GQUNFT1JJR0lOX09SSUVOVEFUSU9OOlxyXG4gICAgICAgICAgICBjYXNlIENvbnRhaW5lcjNELkZBQ0VGT1JXQVJEX09SSUVOVEFUSU9OOlxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmFkZEluUGxhY2UobmV3IFZlY3RvcjMoMCwgMCwgMSkpO1xyXG4gICAgICAgICAgICAgICAgbWVzaC5sb29rQXQodGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRhaW5lcjNELkZBQ0VGT1JXQVJEUkVWRVJTRURfT1JJRU5UQVRJT046XHJcbiAgICAgICAgICAgIGNhc2UgQ29udGFpbmVyM0QuRkFDRU9SSUdJTlJFVkVSU0VEX09SSUVOVEFUSU9OOlxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmFkZEluUGxhY2UobmV3IFZlY3RvcjMoMCwgMCwgLTEpKTtcclxuICAgICAgICAgICAgICAgIG1lc2gubG9va0F0KHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVG9vbHMgfSBmcm9tIFwiY29yZS9NaXNjL3Rvb2xzXCI7XHJcbmltcG9ydCB7IFRtcFZlY3RvcnMsIFZlY3RvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IGZsb2F0IH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuXHJcbmltcG9ydCB7IFZvbHVtZUJhc2VkUGFuZWwgfSBmcm9tIFwiLi92b2x1bWVCYXNlZFBhbmVsXCI7XHJcbmltcG9ydCB0eXBlIHsgQ29udHJvbDNEIH0gZnJvbSBcIi4vY29udHJvbDNEXCI7XHJcbmltcG9ydCB7IENvbnRhaW5lcjNEIH0gZnJvbSBcIi4vY29udGFpbmVyM0RcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSBhIGNvbnRhaW5lciBwYW5lbCB3aGVyZSBpdGVtcyBnZXQgcmFuZG9taXplZCBwbGFuYXIgbWFwcGluZ1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNjYXR0ZXJQYW5lbCBleHRlbmRzIFZvbHVtZUJhc2VkUGFuZWwge1xyXG4gICAgcHJpdmF0ZSBfaXRlcmF0aW9uID0gMTAwLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG51bWJlciBvZiBpdGVyYXRpb24gdG8gdXNlIHRvIHNjYXR0ZXIgdGhlIGNvbnRyb2xzICgxMDAgYnkgZGVmYXVsdClcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBpdGVyYXRpb24oKTogZmxvYXQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVyYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBpdGVyYXRpb24odmFsdWU6IGZsb2F0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2l0ZXJhdGlvbiA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faXRlcmF0aW9uID0gdmFsdWU7XHJcblxyXG4gICAgICAgIFRvb2xzLlNldEltbWVkaWF0ZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FycmFuZ2VDaGlsZHJlbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfbWFwR3JpZE5vZGUoY29udHJvbDogQ29udHJvbDNELCBub2RlUG9zaXRpb246IFZlY3RvcjMpIHtcclxuICAgICAgICBjb25zdCBtZXNoID0gY29udHJvbC5tZXNoO1xyXG4gICAgICAgIGNvbnN0IG5ld1BvcyA9IHRoaXMuX3NjYXR0ZXJNYXBwaW5nKG5vZGVQb3NpdGlvbik7XHJcblxyXG4gICAgICAgIGlmICghbWVzaCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMub3JpZW50YXRpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBDb250YWluZXIzRC5GQUNFT1JJR0lOX09SSUVOVEFUSU9OOlxyXG4gICAgICAgICAgICBjYXNlIENvbnRhaW5lcjNELkZBQ0VGT1JXQVJEX09SSUVOVEFUSU9OOlxyXG4gICAgICAgICAgICAgICAgbWVzaC5sb29rQXQobmV3IFZlY3RvcjMoMCwgMCwgMSkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udGFpbmVyM0QuRkFDRUZPUldBUkRSRVZFUlNFRF9PUklFTlRBVElPTjpcclxuICAgICAgICAgICAgY2FzZSBDb250YWluZXIzRC5GQUNFT1JJR0lOUkVWRVJTRURfT1JJRU5UQVRJT046XHJcbiAgICAgICAgICAgICAgICBtZXNoLmxvb2tBdChuZXcgVmVjdG9yMygwLCAwLCAtMSkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250cm9sLnBvc2l0aW9uID0gbmV3UG9zO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NjYXR0ZXJNYXBwaW5nKHNvdXJjZTogVmVjdG9yMyk6IFZlY3RvcjMge1xyXG4gICAgICAgIHNvdXJjZS54ID0gKDEuMCAtIE1hdGgucmFuZG9tKCkgKiAyLjApICogdGhpcy5fY2VsbFdpZHRoO1xyXG4gICAgICAgIHNvdXJjZS55ID0gKDEuMCAtIE1hdGgucmFuZG9tKCkgKiAyLjApICogdGhpcy5fY2VsbEhlaWdodDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2ZpbmFsUHJvY2Vzc2luZygpIHtcclxuICAgICAgICBjb25zdCBtZXNoZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuX2NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmICghY2hpbGQubWVzaCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1lc2hlcy5wdXNoKGNoaWxkLm1lc2gpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgY291bnQgPSAwOyBjb3VudCA8IHRoaXMuX2l0ZXJhdGlvbjsgY291bnQrKykge1xyXG4gICAgICAgICAgICBtZXNoZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UxID0gYS5wb3NpdGlvbi5sZW5ndGhTcXVhcmVkKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZTIgPSBiLnBvc2l0aW9uLmxlbmd0aFNxdWFyZWQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UxIDwgZGlzdGFuY2UyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlMSA+IGRpc3RhbmNlMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByYWRpdXNQYWRkaW5nU3F1YXJlZCA9IE1hdGgucG93KHRoaXMubWFyZ2luLCAyLjApO1xyXG4gICAgICAgICAgICBjb25zdCBjZWxsU2l6ZSA9IE1hdGgubWF4KHRoaXMuX2NlbGxXaWR0aCwgdGhpcy5fY2VsbEhlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpZmZlcmVuY2UyRCA9IFRtcFZlY3RvcnMuVmVjdG9yMlswXTtcclxuICAgICAgICAgICAgY29uc3QgZGlmZmVyZW5jZSA9IFRtcFZlY3RvcnMuVmVjdG9yM1swXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzaGVzLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgbWVzaGVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT0gaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoZXNbal0ucG9zaXRpb24uc3VidHJhY3RUb1JlZihtZXNoZXNbaV0ucG9zaXRpb24sIGRpZmZlcmVuY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIFogYXhpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbmNlMkQueCA9IGRpZmZlcmVuY2UueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZTJELnkgPSBkaWZmZXJlbmNlLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbWJpbmVkUmFkaXVzID0gY2VsbFNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkaXN0YW5jZSA9IGRpZmZlcmVuY2UyRC5sZW5ndGhTcXVhcmVkKCkgLSByYWRpdXNQYWRkaW5nU3F1YXJlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluU2VwYXJhdGlvbiA9IE1hdGgubWluKGRpc3RhbmNlLCByYWRpdXNQYWRkaW5nU3F1YXJlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlIC09IG1pblNlcGFyYXRpb247XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCBNYXRoLnBvdyhjb21iaW5lZFJhZGl1cywgMi4wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZTJELm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZS5zY2FsZUluUGxhY2UoKGNvbWJpbmVkUmFkaXVzIC0gTWF0aC5zcXJ0KGRpc3RhbmNlKSkgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaGVzW2pdLnBvc2l0aW9uLmFkZEluUGxhY2UoZGlmZmVyZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoZXNbaV0ucG9zaXRpb24uc3VidHJhY3RJblBsYWNlKGRpZmZlcmVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xyXG5pbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHR5cGUgeyBUcmFuc2Zvcm1Ob2RlIH0gZnJvbSBcImNvcmUvTWVzaGVzL3RyYW5zZm9ybU5vZGVcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcbmltcG9ydCB7IENvbnRyb2wzRCB9IGZyb20gXCIuL2NvbnRyb2wzRFwiO1xyXG5pbXBvcnQgeyBDcmVhdGVCb3ggfSBmcm9tIFwiY29yZS9NZXNoZXMvQnVpbGRlcnMvYm94QnVpbGRlclwiO1xyXG5pbXBvcnQgeyBQb2ludGVyRHJhZ0JlaGF2aW9yIH0gZnJvbSBcImNvcmUvQmVoYXZpb3JzL01lc2hlcy9wb2ludGVyRHJhZ0JlaGF2aW9yXCI7XHJcbmltcG9ydCB0eXBlIHsgQWJzdHJhY3RNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL2Fic3RyYWN0TWVzaFwiO1xyXG5pbXBvcnQgeyBTY2VuZUxvYWRlciB9IGZyb20gXCJjb3JlL0xvYWRpbmcvc2NlbmVMb2FkZXJcIjtcclxuaW1wb3J0IHsgTVJETFNsaWRlckJhck1hdGVyaWFsIH0gZnJvbSBcIi4uL21hdGVyaWFscy9tcmRsL21yZGxTbGlkZXJCYXJNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBNUkRMU2xpZGVyVGh1bWJNYXRlcmlhbCB9IGZyb20gXCIuLi9tYXRlcmlhbHMvbXJkbC9tcmRsU2xpZGVyVGh1bWJNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBNUkRMQmFja3BsYXRlTWF0ZXJpYWwgfSBmcm9tIFwiLi4vbWF0ZXJpYWxzL21yZGwvbXJkbEJhY2twbGF0ZU1hdGVyaWFsXCI7XHJcblxyXG5jb25zdCBTTElERVJfTUlOOiBudW1iZXIgPSAwO1xyXG5jb25zdCBTTElERVJfTUFYOiBudW1iZXIgPSAxMDA7XHJcbmNvbnN0IFNMSURFUl9WQUw6IG51bWJlciA9IDUwO1xyXG5jb25zdCBTTElERVJfU1RFUDogbnVtYmVyID0gMDtcclxuY29uc3QgU0xJREVSX1NDQUxJTkc6IG51bWJlciA9IDEuMDtcclxuY29uc3QgU0xJREVSX01BUkdJTjogbnVtYmVyID0gMC4yO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGEgc2xpZGVyIGluIDNEXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2xpZGVyM0QgZXh0ZW5kcyBDb250cm9sM0Qge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlIFVybCBmb3IgdGhlIG1vZGVscy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBNT0RFTF9CQVNFX1VSTDogc3RyaW5nID0gXCJodHRwczovL2Fzc2V0cy5iYWJ5bG9uanMuY29tL21lc2hlcy9NUlRLL1wiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmlsZSBuYW1lIGZvciB0aGUgOHg0IG1vZGVsLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIE1PREVMX0ZJTEVOQU1FOiBzdHJpbmcgPSBcIm1ydGstZmx1ZW50LWJhY2twbGF0ZS5nbGJcIjtcclxuXHJcbiAgICBwcml2YXRlIF9zbGlkZXJCYWNrcGxhdGU6IEFic3RyYWN0TWVzaDtcclxuICAgIHByaXZhdGUgX3NsaWRlckJhY2twbGF0ZU1hdGVyaWFsOiBNUkRMQmFja3BsYXRlTWF0ZXJpYWw7XHJcbiAgICBwcml2YXRlIF9zbGlkZXJCYXJNYXRlcmlhbDogTVJETFNsaWRlckJhck1hdGVyaWFsO1xyXG4gICAgcHJpdmF0ZSBfc2xpZGVyVGh1bWJNYXRlcmlhbDogTVJETFNsaWRlclRodW1iTWF0ZXJpYWw7XHJcbiAgICBwcml2YXRlIF9zbGlkZXJUaHVtYjogQWJzdHJhY3RNZXNoO1xyXG4gICAgcHJpdmF0ZSBfc2xpZGVyQmFyOiBBYnN0cmFjdE1lc2g7XHJcbiAgICBwcml2YXRlIF9zbGlkZXJCYWNrcGxhdGVWaXNpYmxlOiBib29sZWFuO1xyXG5cclxuICAgIHByaXZhdGUgX21pbmltdW06IG51bWJlcjtcclxuICAgIHByaXZhdGUgX21heGltdW06IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3ZhbHVlOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9zdGVwOiBudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBfZHJhZ2dlZFBvc2l0aW9uOiBudW1iZXI7XHJcblxyXG4gICAgLyoqIE9ic2VydmFibGUgcmFpc2VkIHdoZW4gdGhlIHNsZGllciB2YWx1ZSBjaGFuZ2VzICovXHJcbiAgICBwdWJsaWMgb25WYWx1ZUNoYW5nZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8bnVtYmVyPigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzbGlkZXJcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIGNvbnRyb2wgbmFtZVxyXG4gICAgICogQHBhcmFtIHNsaWRlckJhY2twbGF0ZVZpc2libGUgZGVmaW5lcyBpZiB0aGUgY29udHJvbCBoYXMgYSBiYWNrcGxhdGUsIGRlZmF1bHQgaXMgZmFsc2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZT86IHN0cmluZywgc2xpZGVyQmFja3BsYXRlVmlzaWJsZT86IGJvb2xlYW4pIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgICAgICB0aGlzLl9zbGlkZXJCYWNrcGxhdGVWaXNpYmxlID0gc2xpZGVyQmFja3BsYXRlVmlzaWJsZSB8fCBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWluaW11bSA9IFNMSURFUl9NSU47XHJcbiAgICAgICAgdGhpcy5fbWF4aW11bSA9IFNMSURFUl9NQVg7XHJcbiAgICAgICAgdGhpcy5fc3RlcCA9IFNMSURFUl9TVEVQO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gU0xJREVSX1ZBTDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG1lc2ggdXNlZCB0byByZW5kZXIgdGhpcyBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXQgbWVzaCgpOiBOdWxsYWJsZTxBYnN0cmFjdE1lc2g+IHtcclxuICAgICAgICBpZiAodGhpcy5ub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbGlkZXJUaHVtYjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgbWluaW11bSB2YWx1ZSAqL1xyXG4gICAgcHVibGljIGdldCBtaW5pbXVtKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbmltdW07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBtaW5pbXVtKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fbWluaW11bSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWluaW11bSA9IE1hdGgubWF4KHZhbHVlLCBTTElERVJfTUlOKTtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHRoaXMuX3ZhbHVlLCB0aGlzLl9tYXhpbXVtKSwgdGhpcy5fbWluaW11bSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBtYXhpbXVtIHZhbHVlICovXHJcbiAgICBwdWJsaWMgZ2V0IG1heGltdW0oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWF4aW11bTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IG1heGltdW0odmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXhpbXVtID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9tYXhpbXVtID0gTWF0aC5tYXgodmFsdWUsIHRoaXMuX21pbmltdW0pO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4odGhpcy5fdmFsdWUsIHRoaXMuX21heGltdW0pLCB0aGlzLl9taW5pbXVtKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBvciBzZXRzIHN0ZXAgdmFsdWUgKi9cclxuICAgIHB1YmxpYyBnZXQgc3RlcCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGVwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc3RlcCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N0ZXAgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3N0ZXAgPSBNYXRoLm1heChNYXRoLm1pbih2YWx1ZSwgdGhpcy5fbWF4aW11bSAtIHRoaXMuX21pbmltdW0pLCBTTElERVJfU1RFUCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldHMgb3Igc2V0cyBjdXJyZW50IHZhbHVlICovXHJcbiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbih2YWx1ZSwgdGhpcy5fbWF4aW11bSksIHRoaXMuX21pbmltdW0pO1xyXG4gICAgICAgIGlmICh0aGlzLl9zbGlkZXJUaHVtYikge1xyXG4gICAgICAgICAgICB0aGlzLl9zbGlkZXJUaHVtYi5wb3NpdGlvbi54ID0gdGhpcy5fY29udmVydFRvUG9zaXRpb24odGhpcy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0aGlzLl92YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldCBzdGFydCgpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICghdGhpcy5ub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtU0xJREVSX1NDQUxJTkcgLyAyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlckJhci5wb3NpdGlvbi54IC0gdGhpcy5fc2xpZGVyQmFyLnNjYWxpbmcueCAvIDI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldCBlbmQoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoIXRoaXMubm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gU0xJREVSX1NDQUxJTkcgLyAyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlckJhci5wb3NpdGlvbi54ICsgdGhpcy5fc2xpZGVyQmFyLnNjYWxpbmcueCAvIDI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBzbGlkZXIgYmFyIG1hdGVyaWFsIHVzZWQgYnkgdGhpcyBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgc2xpZGVyQmFyTWF0ZXJpYWwoKTogTVJETFNsaWRlckJhck1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVyQmFyTWF0ZXJpYWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBzbGlkZXIgdGh1bWIgbWF0ZXJpYWwgdXNlZCBieSB0aGlzIGNvbnRyb2xcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBzbGlkZXJUaHVtYk1hdGVyaWFsKCk6IE1SRExTbGlkZXJUaHVtYk1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVyVGh1bWJNYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHNsaWRlciBiYWNrcGxhdGUgbWF0ZXJpYWwgdXNlZCBieSB0aGlzIGNvbnRyb2xcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBzbGlkZXJCYWNrcGxhdGVNYXRlcmlhbCgpOiBNUkRMQmFja3BsYXRlTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zbGlkZXJCYWNrcGxhdGVNYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHNsaWRlciBiYXIgbWVzaCB1c2VkIGJ5IHRoaXMgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHNsaWRlckJhcigpOiBBYnN0cmFjdE1lc2gge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zbGlkZXJCYXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBzbGlkZXIgdGh1bWIgbWVzaCB1c2VkIGJ5IHRoaXMgY29udHJvbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHNsaWRlclRodW1iKCk6IEFic3RyYWN0TWVzaCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlclRodW1iO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgc2xpZGVyIGJhY2twbGF0ZSBtZXNoIHVzZWQgYnkgdGhpcyBjb250cm9sXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgc2xpZGVyQmFja3BsYXRlKCk6IEFic3RyYWN0TWVzaCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlckJhY2twbGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogU2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgY29udHJvbCBpcyB2aXNpYmxlICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2V0IGlzVmlzaWJsZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1Zpc2libGUgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzVmlzaWJsZSA9IHZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLm5vZGU/LnNldEVuYWJsZWQodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1lc2ggYXNzb2NpYXRpb25cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfY3JlYXRlTm9kZShzY2VuZTogU2NlbmUpOiBUcmFuc2Zvcm1Ob2RlIHtcclxuICAgICAgICBjb25zdCBzbGlkZXJCYWNrcGxhdGUgPSBDcmVhdGVCb3goXHJcbiAgICAgICAgICAgIGAke3RoaXMubmFtZX1fc2xpZGVyYmFja3BsYXRlYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEuMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMS4wLFxyXG4gICAgICAgICAgICAgICAgZGVwdGg6IDEuMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2NlbmVcclxuICAgICAgICApO1xyXG4gICAgICAgIHNsaWRlckJhY2twbGF0ZS5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgc2xpZGVyQmFja3BsYXRlLnZpc2liaWxpdHkgPSAwO1xyXG4gICAgICAgIHNsaWRlckJhY2twbGF0ZS5zY2FsaW5nID0gbmV3IFZlY3RvcjMoMSwgMC41LCAwLjgpO1xyXG5cclxuICAgICAgICBTY2VuZUxvYWRlci5JbXBvcnRNZXNoQXN5bmModW5kZWZpbmVkLCBTbGlkZXIzRC5NT0RFTF9CQVNFX1VSTCwgU2xpZGVyM0QuTU9ERUxfRklMRU5BTUUsIHNjZW5lKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgLy8gbWFrZSBhbGwgbWVzaGVzIG5vdCBwaWNrYWJsZS4gUmVxdWlyZWQgbWVzaGVzJyBwaWNrYWJsZSBzdGF0ZSB3aWxsIGJlIHNldCBsYXRlci5cclxuICAgICAgICAgICAgcmVzdWx0Lm1lc2hlcy5mb3JFYWNoKChtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBtLmlzUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNsaWRlckJhY2twbGF0ZU1vZGVsID0gcmVzdWx0Lm1lc2hlc1sxXTtcclxuICAgICAgICAgICAgY29uc3Qgc2xpZGVyQmFyTW9kZWwgPSByZXN1bHQubWVzaGVzWzFdLmNsb25lKGAke3RoaXMubmFtZX1fc2xpZGVyYmFyYCwgc2xpZGVyQmFja3BsYXRlKTtcclxuICAgICAgICAgICAgY29uc3Qgc2xpZGVyVGh1bWJNb2RlbCA9IHJlc3VsdC5tZXNoZXNbMV0uY2xvbmUoYCR7dGhpcy5uYW1lfV9zbGlkZXJ0aHVtYmAsIHNsaWRlckJhY2twbGF0ZSk7XHJcbiAgICAgICAgICAgIHNsaWRlckJhY2twbGF0ZU1vZGVsLnZpc2liaWxpdHkgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NsaWRlckJhY2twbGF0ZVZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlckJhY2twbGF0ZU1vZGVsLnZpc2liaWxpdHkgPSAxO1xyXG4gICAgICAgICAgICAgICAgc2xpZGVyQmFja3BsYXRlTW9kZWwubmFtZSA9IGAke3RoaXMubmFtZX1fc2xpZGVyYmFja3BsYXRlYDtcclxuICAgICAgICAgICAgICAgIHNsaWRlckJhY2twbGF0ZU1vZGVsLnNjYWxpbmcueCA9IDE7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXJCYWNrcGxhdGVNb2RlbC5zY2FsaW5nLnogPSAwLjI7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXJCYWNrcGxhdGVNb2RlbC5wYXJlbnQgPSBzbGlkZXJCYWNrcGxhdGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2xpZGVyQmFja3BsYXRlTWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXJCYWNrcGxhdGVNb2RlbC5tYXRlcmlhbCA9IHRoaXMuX3NsaWRlckJhY2twbGF0ZU1hdGVyaWFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2xpZGVyQmFja3BsYXRlID0gc2xpZGVyQmFja3BsYXRlTW9kZWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChzbGlkZXJCYXJNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgc2xpZGVyQmFyTW9kZWwucGFyZW50ID0gc2xpZGVyQmFja3BsYXRlO1xyXG4gICAgICAgICAgICAgICAgc2xpZGVyQmFyTW9kZWwucG9zaXRpb24ueiA9IC0wLjE7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXJCYXJNb2RlbC5zY2FsaW5nID0gbmV3IFZlY3RvcjMoU0xJREVSX1NDQUxJTkcgLSBTTElERVJfTUFSR0lOLCAwLjA0LCAwLjMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NsaWRlckJhck1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyQmFyTW9kZWwubWF0ZXJpYWwgPSB0aGlzLl9zbGlkZXJCYXJNYXRlcmlhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3NsaWRlckJhciA9IHNsaWRlckJhck1vZGVsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2xpZGVyVGh1bWJNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgc2xpZGVyVGh1bWJNb2RlbC5wYXJlbnQgPSBzbGlkZXJCYWNrcGxhdGU7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXJUaHVtYk1vZGVsLmlzUGlja2FibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc2xpZGVyVGh1bWJNb2RlbC5wb3NpdGlvbi56ID0gLTAuMTE1O1xyXG4gICAgICAgICAgICAgICAgc2xpZGVyVGh1bWJNb2RlbC5zY2FsaW5nID0gbmV3IFZlY3RvcjMoMC4wMjUsIDAuMywgMC42KTtcclxuICAgICAgICAgICAgICAgIHNsaWRlclRodW1iTW9kZWwucG9zaXRpb24ueCA9IHRoaXMuX2NvbnZlcnRUb1Bvc2l0aW9uKHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgc2xpZGVyVGh1bWJNb2RlbC5hZGRCZWhhdmlvcih0aGlzLl9jcmVhdGVCZWhhdmlvcigpKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zbGlkZXJUaHVtYk1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyVGh1bWJNb2RlbC5tYXRlcmlhbCA9IHRoaXMuX3NsaWRlclRodW1iTWF0ZXJpYWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zbGlkZXJUaHVtYiA9IHNsaWRlclRodW1iTW9kZWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2luamVjdEdVSTNEUmVzZXJ2ZWREYXRhU3RvcmUoc2xpZGVyQmFja3BsYXRlKS5jb250cm9sID0gdGhpcztcclxuICAgICAgICAgICAgc2xpZGVyQmFja3BsYXRlLmdldENoaWxkTWVzaGVzKCkuZm9yRWFjaCgobWVzaCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5qZWN0R1VJM0RSZXNlcnZlZERhdGFTdG9yZShtZXNoKS5jb250cm9sID0gdGhpcztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FmZmVjdE1hdGVyaWFsKHNsaWRlckJhY2twbGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIHNsaWRlckJhY2twbGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FmZmVjdE1hdGVyaWFsKG1lc2g6IEFic3RyYWN0TWVzaCkge1xyXG4gICAgICAgIHRoaXMuX3NsaWRlckJhY2twbGF0ZU1hdGVyaWFsID0gdGhpcy5fc2xpZGVyQmFja3BsYXRlTWF0ZXJpYWwgPz8gbmV3IE1SRExCYWNrcGxhdGVNYXRlcmlhbChgJHt0aGlzLm5hbWV9X3NsaWRlcmJhY2twbGF0ZV9tYXRlcmlhbGAsIG1lc2guZ2V0U2NlbmUoKSk7XHJcbiAgICAgICAgdGhpcy5fc2xpZGVyQmFyTWF0ZXJpYWwgPSB0aGlzLl9zbGlkZXJCYXJNYXRlcmlhbCA/PyBuZXcgTVJETFNsaWRlckJhck1hdGVyaWFsKGAke3RoaXMubmFtZX1fc2xpZGVyYmFyX21hdGVyaWFsYCwgbWVzaC5nZXRTY2VuZSgpKTtcclxuICAgICAgICB0aGlzLl9zbGlkZXJUaHVtYk1hdGVyaWFsID0gdGhpcy5fc2xpZGVyVGh1bWJNYXRlcmlhbCA/PyBuZXcgTVJETFNsaWRlclRodW1iTWF0ZXJpYWwoYCR7dGhpcy5uYW1lfV9zbGlkZXJ0aHVtYl9tYXRlcmlhbGAsIG1lc2guZ2V0U2NlbmUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlQmVoYXZpb3IoKTogUG9pbnRlckRyYWdCZWhhdmlvciB7XHJcbiAgICAgICAgY29uc3QgcG9pbnRlckRyYWdCZWhhdmlvciA9IG5ldyBQb2ludGVyRHJhZ0JlaGF2aW9yKHsgZHJhZ0F4aXM6IFZlY3RvcjMuUmlnaHQoKSB9KTtcclxuICAgICAgICBwb2ludGVyRHJhZ0JlaGF2aW9yLm1vdmVBdHRhY2hlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwb2ludGVyRHJhZ0JlaGF2aW9yLm9uRHJhZ1N0YXJ0T2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnZ2VkUG9zaXRpb24gPSB0aGlzLl9zbGlkZXJUaHVtYi5wb3NpdGlvbi54O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwb2ludGVyRHJhZ0JlaGF2aW9yLm9uRHJhZ09ic2VydmFibGUuYWRkKChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnZ2VkUG9zaXRpb24gKz0gZXZlbnQuZHJhZ0Rpc3RhbmNlIC8gdGhpcy5zY2FsaW5nLng7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLl9jb252ZXJ0VG9WYWx1ZSh0aGlzLl9kcmFnZ2VkUG9zaXRpb24pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcG9pbnRlckRyYWdCZWhhdmlvcjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jb252ZXJ0VG9Qb3NpdGlvbih2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9ICgodmFsdWUgLSB0aGlzLm1pbmltdW0pIC8gKHRoaXMubWF4aW11bSAtIHRoaXMubWluaW11bSkpICogKHRoaXMuZW5kIC0gdGhpcy5zdGFydCkgKyB0aGlzLnN0YXJ0O1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChwb3NpdGlvbiwgdGhpcy5zdGFydCksIHRoaXMuZW5kKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jb252ZXJ0VG9WYWx1ZShwb3NpdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSAoKHBvc2l0aW9uIC0gdGhpcy5zdGFydCkgLyAodGhpcy5lbmQgLSB0aGlzLnN0YXJ0KSkgKiAodGhpcy5tYXhpbXVtIC0gdGhpcy5taW5pbXVtKTtcclxuICAgICAgICB2YWx1ZSA9IHRoaXMuc3RlcCA/IE1hdGgucm91bmQodmFsdWUgLyB0aGlzLnN0ZXApICogdGhpcy5zdGVwIDogdmFsdWU7XHJcblxyXG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbih0aGlzLm1pbmltdW0gKyB2YWx1ZSwgdGhpcy5fbWF4aW11bSksIHRoaXMuX21pbmltdW0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVsZWFzZXMgYWxsIGFzc29jaWF0ZWQgcmVzb3VyY2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCkge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLl9zbGlkZXJCYXI/LmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLl9zbGlkZXJUaHVtYj8uZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX3NsaWRlckJhck1hdGVyaWFsPy5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5fc2xpZGVyVGh1bWJNYXRlcmlhbD8uZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX3NsaWRlckJhY2twbGF0ZT8uZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX3NsaWRlckJhY2twbGF0ZU1hdGVyaWFsPy5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVG9vbHMgfSBmcm9tIFwiY29yZS9NaXNjL3Rvb2xzXCI7XHJcbmltcG9ydCB7IE1hdHJpeCwgVG1wVmVjdG9ycywgVmVjdG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB0eXBlIHsgZmxvYXQgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5cclxuaW1wb3J0IHsgVm9sdW1lQmFzZWRQYW5lbCB9IGZyb20gXCIuL3ZvbHVtZUJhc2VkUGFuZWxcIjtcclxuaW1wb3J0IHR5cGUgeyBDb250cm9sM0QgfSBmcm9tIFwiLi9jb250cm9sM0RcIjtcclxuaW1wb3J0IHsgQ29udGFpbmVyM0QgfSBmcm9tIFwiLi9jb250YWluZXIzRFwiO1xyXG5pbXBvcnQgeyBBeGlzLCBTcGFjZSB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguYXhpc1wiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGEgY29udGFpbmVyIHBhbmVsIGRlcGxveWVkIG9uIHRoZSBzdXJmYWNlIG9mIGEgc3BoZXJlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3BoZXJlUGFuZWwgZXh0ZW5kcyBWb2x1bWVCYXNlZFBhbmVsIHtcclxuICAgIHByaXZhdGUgX3JhZGl1cyA9IDUuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgcmFkaXVzIG9mIHRoZSBzcGhlcmUgd2hlcmUgdG8gcHJvamVjdCBjb250cm9scyAoNSBieSBkZWZhdWx0KVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHJhZGl1cygpOiBmbG9hdCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhZGl1cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHJhZGl1cyh2YWx1ZTogZmxvYXQpIHtcclxuICAgICAgICBpZiAodGhpcy5fcmFkaXVzID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9yYWRpdXMgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgVG9vbHMuU2V0SW1tZWRpYXRlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fYXJyYW5nZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9tYXBHcmlkTm9kZShjb250cm9sOiBDb250cm9sM0QsIG5vZGVQb3NpdGlvbjogVmVjdG9yMykge1xyXG4gICAgICAgIGNvbnN0IG1lc2ggPSBjb250cm9sLm1lc2g7XHJcblxyXG4gICAgICAgIGlmICghbWVzaCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuZXdQb3MgPSB0aGlzLl9zcGhlcmljYWxNYXBwaW5nKG5vZGVQb3NpdGlvbik7XHJcbiAgICAgICAgY29udHJvbC5wb3NpdGlvbiA9IG5ld1BvcztcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLm9yaWVudGF0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udGFpbmVyM0QuRkFDRU9SSUdJTl9PUklFTlRBVElPTjpcclxuICAgICAgICAgICAgICAgIG1lc2gubG9va0F0KG5ldyBWZWN0b3IzKDIgKiBuZXdQb3MueCwgMiAqIG5ld1Bvcy55LCAyICogbmV3UG9zLnopKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRhaW5lcjNELkZBQ0VPUklHSU5SRVZFUlNFRF9PUklFTlRBVElPTjpcclxuICAgICAgICAgICAgICAgIG1lc2gubG9va0F0KG5ldyBWZWN0b3IzKC1uZXdQb3MueCwgLW5ld1Bvcy55LCAtbmV3UG9zLnopKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRhaW5lcjNELkZBQ0VGT1JXQVJEX09SSUVOVEFUSU9OOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udGFpbmVyM0QuRkFDRUZPUldBUkRSRVZFUlNFRF9PUklFTlRBVElPTjpcclxuICAgICAgICAgICAgICAgIG1lc2gucm90YXRlKEF4aXMuWSwgTWF0aC5QSSwgU3BhY2UuTE9DQUwpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NwaGVyaWNhbE1hcHBpbmcoc291cmNlOiBWZWN0b3IzKSB7XHJcbiAgICAgICAgY29uc3QgbmV3UG9zID0gbmV3IFZlY3RvcjMoMCwgMCwgdGhpcy5fcmFkaXVzKTtcclxuXHJcbiAgICAgICAgY29uc3QgeEFuZ2xlID0gc291cmNlLnkgLyB0aGlzLl9yYWRpdXM7XHJcbiAgICAgICAgY29uc3QgeUFuZ2xlID0gLShzb3VyY2UueCAvIHRoaXMuX3JhZGl1cyk7XHJcblxyXG4gICAgICAgIE1hdHJpeC5Sb3RhdGlvbllhd1BpdGNoUm9sbFRvUmVmKHlBbmdsZSwgeEFuZ2xlLCAwLCBUbXBWZWN0b3JzLk1hdHJpeFswXSk7XHJcblxyXG4gICAgICAgIHJldHVybiBWZWN0b3IzLlRyYW5zZm9ybU5vcm1hbChuZXdQb3MsIFRtcFZlY3RvcnMuTWF0cml4WzBdKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUb29scyB9IGZyb20gXCJjb3JlL01pc2MvdG9vbHNcIjtcclxuaW1wb3J0IHsgTWF0cml4LCBUbXBWZWN0b3JzLCBWZWN0b3IzIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuXHJcbmltcG9ydCB7IENvbnRhaW5lcjNEIH0gZnJvbSBcIi4vY29udGFpbmVyM0RcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIGNyZWF0ZSBhIHN0YWNrIHBhbmVsIGluIDNEIG9uIFhZIHBsYW5lXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RhY2tQYW5lbDNEIGV4dGVuZHMgQ29udGFpbmVyM0Qge1xyXG4gICAgcHJpdmF0ZSBfaXNWZXJ0aWNhbCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBzdGFjayBwYW5lbCBpcyB2ZXJ0aWNhbCBvciBob3Jpem9udGFsIChob3Jpem9udGFsIGJ5IGRlZmF1bHQpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNWZXJ0aWNhbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNWZXJ0aWNhbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGlzVmVydGljYWwodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5faXNWZXJ0aWNhbCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faXNWZXJ0aWNhbCA9IHZhbHVlO1xyXG5cclxuICAgICAgICBUb29scy5TZXRJbW1lZGlhdGUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9hcnJhbmdlQ2hpbGRyZW4oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZGlzdGFuY2UgYmV0d2VlbiBlbGVtZW50c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWFyZ2luID0gMC4xO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBuZXcgU3RhY2tQYW5lbFxyXG4gICAgICogQHBhcmFtIGlzVmVydGljYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGlzVmVydGljYWwgPSBmYWxzZSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2lzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYXJyYW5nZUNoaWxkcmVuKCkge1xyXG4gICAgICAgIGxldCB3aWR0aCA9IDA7XHJcbiAgICAgICAgbGV0IGhlaWdodCA9IDA7XHJcbiAgICAgICAgbGV0IGNvbnRyb2xDb3VudCA9IDA7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5kU2l6ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3QgY3VycmVudEludmVyc2VXb3JsZCA9IE1hdHJpeC5JbnZlcnQodGhpcy5ub2RlIS5jb21wdXRlV29ybGRNYXRyaXgodHJ1ZSkpO1xyXG5cclxuICAgICAgICAvLyBNZWFzdXJlXHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLl9jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoIWNoaWxkLm1lc2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb250cm9sQ291bnQrKztcclxuICAgICAgICAgICAgY2hpbGQubWVzaC5jb21wdXRlV29ybGRNYXRyaXgodHJ1ZSk7XHJcbiAgICAgICAgICAgIGNoaWxkLm1lc2guZ2V0V29ybGRNYXRyaXgoKS5tdWx0aXBseVRvUmVmKGN1cnJlbnRJbnZlcnNlV29ybGQsIFRtcFZlY3RvcnMuTWF0cml4WzBdKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kaW5nQm94ID0gY2hpbGQubWVzaC5nZXRCb3VuZGluZ0luZm8oKS5ib3VuZGluZ0JveDtcclxuICAgICAgICAgICAgY29uc3QgZXh0ZW5kU2l6ZSA9IFZlY3RvcjMuVHJhbnNmb3JtTm9ybWFsKGJvdW5kaW5nQm94LmV4dGVuZFNpemUsIFRtcFZlY3RvcnMuTWF0cml4WzBdKTtcclxuICAgICAgICAgICAgZXh0ZW5kU2l6ZXMucHVzaChleHRlbmRTaXplKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgKz0gZXh0ZW5kU2l6ZS55O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2lkdGggKz0gZXh0ZW5kU2l6ZS54O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgKz0gKChjb250cm9sQ291bnQgLSAxKSAqIHRoaXMubWFyZ2luKSAvIDI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2lkdGggKz0gKChjb250cm9sQ291bnQgLSAxKSAqIHRoaXMubWFyZ2luKSAvIDI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBcnJhbmdlXHJcbiAgICAgICAgbGV0IG9mZnNldDogbnVtYmVyO1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IC1oZWlnaHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gLXdpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuX2NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmICghY2hpbGQubWVzaCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udHJvbENvdW50LS07XHJcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuZFNpemUgPSBleHRlbmRTaXplc1tpbmRleCsrXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZC5wb3NpdGlvbi55ID0gb2Zmc2V0ICsgZXh0ZW5kU2l6ZS55O1xyXG4gICAgICAgICAgICAgICAgY2hpbGQucG9zaXRpb24ueCA9IDA7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gZXh0ZW5kU2l6ZS55ICogMjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkLnBvc2l0aW9uLnggPSBvZmZzZXQgKyBleHRlbmRTaXplLng7XHJcbiAgICAgICAgICAgICAgICBjaGlsZC5wb3NpdGlvbi55ID0gMDtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBleHRlbmRTaXplLnggKiAyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvZmZzZXQgKz0gY29udHJvbENvdW50ID4gMCA/IHRoaXMubWFyZ2luIDogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gQXNzdW1wdGlvbnM6IGFic29sdXRlIHBvc2l0aW9uIG9mIGJ1dHRvbiBtZXNoIGlzIGluc2lkZSB0aGUgbWVzaFxyXG5cclxuaW1wb3J0IHsgVmVjdG9yMywgVG1wVmVjdG9ycyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9tZXNoXCI7XHJcbmltcG9ydCB7IFBvaW50ZXJFdmVudFR5cGVzIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHR5cGUgeyBUcmFuc2Zvcm1Ob2RlIH0gZnJvbSBcImNvcmUvTWVzaGVzL3RyYW5zZm9ybU5vZGVcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcblxyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcblxyXG5pbXBvcnQgeyBCdXR0b24zRCB9IGZyb20gXCIuL2J1dHRvbjNEXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBjcmVhdGUgYSB0b3VjaGFibGUgYnV0dG9uIGluIDNEXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVG91Y2hCdXR0b24zRCBleHRlbmRzIEJ1dHRvbjNEIHtcclxuICAgIHByaXZhdGUgX2NvbGxpc2lvbk1lc2g6IE1lc2g7XHJcblxyXG4gICAgLy8gJ2Zyb250JyBkaXJlY3Rpb24uIElmIFZlY3RvcjMuWmVybywgdGhlcmUgaXMgbm8gZnJvbnQgYW5kIGFsbCBkaXJlY3Rpb25zIG9mIGludGVyYWN0aW9uIGFyZSBhY2NlcHRlZFxyXG4gICAgcHJpdmF0ZSBfY29sbGlkYWJsZUZyb250RGlyZWN0aW9uOiBWZWN0b3IzO1xyXG4gICAgcHJpdmF0ZSBfaXNOZWFyUHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfaW50ZXJhY3Rpb25TdXJmYWNlSGVpZ2h0ID0gMDtcclxuXHJcbiAgICBwcml2YXRlIF9pc1RvZ2dsZUJ1dHRvbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfdG9nZ2xlU3RhdGUgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX3RvZ2dsZUJ1dHRvbkNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX29uVG9nZ2xlKCF0aGlzLl90b2dnbGVTdGF0ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gZXZlbnQgdHJpZ2dlcmVkIHdoZW4gdGhlIGJ1dHRvbiBpcyB0b2dnbGVkLiBPbmx5IGZpcmVkIGlmICdpc1RvZ2dsZUJ1dHRvbicgaXMgdHJ1ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Ub2dnbGVPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8Ym9vbGVhbj4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgdG91Y2hhYmxlIGJ1dHRvblxyXG4gICAgICogQHBhcmFtIG5hbWUgZGVmaW5lcyB0aGUgY29udHJvbCBuYW1lXHJcbiAgICAgKiBAcGFyYW0gY29sbGlzaW9uTWVzaCBtZXNoIHRvIHRyYWNrIGNvbGxpc2lvbnMgd2l0aFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lPzogc3RyaW5nLCBjb2xsaXNpb25NZXNoPzogTWVzaCkge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbGxpZGFibGVGcm9udERpcmVjdGlvbiA9IFZlY3RvcjMuWmVybygpO1xyXG5cclxuICAgICAgICBpZiAoY29sbGlzaW9uTWVzaCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxpc2lvbk1lc2ggPSBjb2xsaXNpb25NZXNoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhlIGN1cnJlbnQgaW50ZXJhY3Rpb24gaXMgY2F1c2VkIGJ5IG5lYXIgaW50ZXJhY3Rpb24gb3Igbm90XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNBY3RpdmVOZWFySW50ZXJhY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzTmVhclByZXNzZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBmcm9udC1mYWNpbmcgZGlyZWN0aW9uIG9mIHRoZSBidXR0b24uIFBhc3MgaW4gVmVjdG9yMy5aZXJvIHRvIGFsbG93IGludGVyYWN0aW9ucyBmcm9tIGFueSBkaXJlY3Rpb25cclxuICAgICAqIEBwYXJhbSBmcm9udFdvcmxkRGlyIHRoZSBmb3J3YXJkIGRpcmVjdGlvbiBvZiB0aGUgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgY29sbGlkYWJsZUZyb250RGlyZWN0aW9uKGZyb250V29ybGREaXI6IFZlY3RvcjMpIHtcclxuICAgICAgICB0aGlzLl9jb2xsaWRhYmxlRnJvbnREaXJlY3Rpb24gPSBmcm9udFdvcmxkRGlyLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29sbGlzaW9uTWVzaCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbnZlcnQgPSBUbXBWZWN0b3JzLk1hdHJpeFswXTtcclxuXHJcbiAgICAgICAgICAgIGludmVydC5jb3B5RnJvbSh0aGlzLl9jb2xsaXNpb25NZXNoLmdldFdvcmxkTWF0cml4KCkpO1xyXG4gICAgICAgICAgICBpbnZlcnQuaW52ZXJ0KCk7XHJcbiAgICAgICAgICAgIFZlY3RvcjMuVHJhbnNmb3JtTm9ybWFsVG9SZWYodGhpcy5fY29sbGlkYWJsZUZyb250RGlyZWN0aW9uLCBpbnZlcnQsIHRoaXMuX2NvbGxpZGFibGVGcm9udERpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbGxpZGFibGVGcm9udERpcmVjdGlvbi5ub3JtYWxpemUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBmcm9udC1mYWNpbmcgZGlyZWN0aW9uIG9mIHRoZSBidXR0b24sIG9yIFZlY3RvcjMuWmVybyBpZiB0aGVyZSBpcyBubyAnZnJvbnQnXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgY29sbGlkYWJsZUZyb250RGlyZWN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb2xsaXNpb25NZXNoKSB7XHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgZnJvbnQgZGlyZWN0aW9uIHRvIHJlZmxlY3QgYW55IHJvdGF0aW9ucyBvZiB0aGUgY29sbGlzaW9uIG1lc2hcclxuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZWREaXJlY3Rpb24gPSBUbXBWZWN0b3JzLlZlY3RvcjNbMF07XHJcbiAgICAgICAgICAgIFZlY3RvcjMuVHJhbnNmb3JtTm9ybWFsVG9SZWYodGhpcy5fY29sbGlkYWJsZUZyb250RGlyZWN0aW9uLCB0aGlzLl9jb2xsaXNpb25NZXNoLmdldFdvcmxkTWF0cml4KCksIHRyYW5zZm9ybWVkRGlyZWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZERpcmVjdGlvbi5ub3JtYWxpemUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xsaWRhYmxlRnJvbnREaXJlY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBtZXNoIHVzZWQgZm9yIHRlc3RpbmcgaW5wdXQgY29sbGlzaW9uXHJcbiAgICAgKiBAcGFyYW0gY29sbGlzaW9uTWVzaCB0aGUgbmV3IGNvbGxpc2lvbiBtZXNoIGZvciB0aGUgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgY29sbGlzaW9uTWVzaChjb2xsaXNpb25NZXNoOiBNZXNoKSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBHVUkzRE1hbmFnZXIncyBkYXRhIGZyb20gdGhlIHByZXZpb3VzIGNvbGxpc2lvbiBtZXNoJ3MgcmVzZXJ2ZWQgZGF0YSBzdG9yZSwgYW5kIHJlc2V0IGludGVyYWN0YWJpbGl0eVxyXG4gICAgICAgIGlmICh0aGlzLl9jb2xsaXNpb25NZXNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbGxpc2lvbk1lc2guaXNOZWFyUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxpc2lvbk1lc2gucmVzZXJ2ZWREYXRhU3RvcmU/LkdVSTNEKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2xsaXNpb25NZXNoLnJlc2VydmVkRGF0YVN0b3JlLkdVSTNEID0ge307XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbGxpc2lvbk1lc2guZ2V0Q2hpbGRNZXNoZXMoKS5mb3JFYWNoKChtZXNoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBtZXNoLmlzTmVhclBpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAobWVzaC5yZXNlcnZlZERhdGFTdG9yZT8uR1VJM0QpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNoLnJlc2VydmVkRGF0YVN0b3JlLkdVSTNEID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29sbGlzaW9uTWVzaCA9IGNvbGxpc2lvbk1lc2g7XHJcbiAgICAgICAgdGhpcy5faW5qZWN0R1VJM0RSZXNlcnZlZERhdGFTdG9yZSh0aGlzLl9jb2xsaXNpb25NZXNoKS5jb250cm9sID0gdGhpcztcclxuICAgICAgICB0aGlzLl9jb2xsaXNpb25NZXNoLmlzTmVhclBpY2thYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29sbGlzaW9uTWVzaC5nZXRDaGlsZE1lc2hlcygpLmZvckVhY2goKG1lc2gpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faW5qZWN0R1VJM0RSZXNlcnZlZERhdGFTdG9yZShtZXNoKS5jb250cm9sID0gdGhpcztcclxuICAgICAgICAgICAgbWVzaC5pc05lYXJQaWNrYWJsZSA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb2xsaWRhYmxlRnJvbnREaXJlY3Rpb24gPSBjb2xsaXNpb25NZXNoLmZvcndhcmQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR0ZXIgZm9yIGlmIHRoaXMgVG91Y2hCdXR0b24zRCBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIHRvZ2dsZSBidXR0b25cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBJZiB0aGlzIFRvdWNoSG9sb2dyYXBoaWNCdXR0b24gc2hvdWxkIGFjdCBsaWtlIGEgdG9nZ2xlIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IGlzVG9nZ2xlQnV0dG9uKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzLl9pc1RvZ2dsZUJ1dHRvbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pc1RvZ2dsZUJ1dHRvbiA9IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5vblBvaW50ZXJVcE9ic2VydmFibGUuYWRkKHRoaXMuX3RvZ2dsZUJ1dHRvbkNhbGxiYWNrKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9uUG9pbnRlclVwT2JzZXJ2YWJsZS5yZW1vdmVDYWxsYmFjayh0aGlzLl90b2dnbGVCdXR0b25DYWxsYmFjayk7XHJcblxyXG4gICAgICAgICAgICAvLyBTYWZldHkgY2hlY2ssIHJlc2V0IHRoZSBidXR0b24gaWYgaXQncyB0b2dnbGVkIG9uIGJ1dCBubyBsb25nZXIgYSB0b2dnbGUgYnV0dG9uXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90b2dnbGVTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25Ub2dnbGUoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBpc1RvZ2dsZUJ1dHRvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNUb2dnbGVCdXR0b247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHB1YmxpYyBlbnRyeXBvaW50IHRvIHNldCB0aGUgdG9nZ2xlIHN0YXRlIG9mIHRoZSBUb3VjaEhvbG9ncmFwaGljQnV0dG9uLiBPbmx5IHdvcmtzIGlmICdpc1RvZ2dsZUJ1dHRvbicgaXMgdHJ1ZVxyXG4gICAgICogQHBhcmFtIG5ld1N0YXRlIFRoZSBuZXcgc3RhdGUgdG8gc2V0IHRoZSBUb3VjaEhvbG9ncmFwaGljQnV0dG9uJ3MgdG9nZ2xlIHN0YXRlIHRvXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgaXNUb2dnbGVkKG5ld1N0YXRlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzVG9nZ2xlQnV0dG9uICYmIHRoaXMuX3RvZ2dsZVN0YXRlICE9PSBuZXdTdGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vblRvZ2dsZShuZXdTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBpc1RvZ2dsZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvZ2dsZVN0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfb25Ub2dnbGUobmV3U3RhdGU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl90b2dnbGVTdGF0ZSA9IG5ld1N0YXRlO1xyXG4gICAgICAgIHRoaXMub25Ub2dnbGVPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhuZXdTdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBjb2xsaWRhYmxlIGlzIGluIGZyb250IG9mIHRoZSBidXR0b24sIG9yIGlmIHRoZSBidXR0b24gaGFzIG5vIGZyb250IGRpcmVjdGlvblxyXG4gICAgcHJpdmF0ZSBfaXNJbnRlcmFjdGlvbkluRnJvbnRPZkJ1dHRvbihjb2xsaWRhYmxlUG9zOiBWZWN0b3IzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEludGVyYWN0aW9uSGVpZ2h0KGNvbGxpZGFibGVQb3MsIHRoaXMuX2NvbGxpc2lvbk1lc2guZ2V0QWJzb2x1dGVQb3NpdGlvbigpKSA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGhlaWdodCBvZiB0aGUgdG91Y2hQb2ludCBmcm9tIHRoZSBjb2xsaWRhYmxlIHBhcnQgb2YgdGhlIGJ1dHRvblxyXG4gICAgICogQHBhcmFtIHRvdWNoUG9pbnQgdGhlIHBvaW50IHRvIGNvbXBhcmUgdG8gdGhlIGJ1dHRvbiwgaW4gYWJzb2x1dGUgcG9zaXRpb25cclxuICAgICAqIEByZXR1cm5zIHRoZSBkZXB0aCBvZiB0aGUgdG91Y2ggcG9pbnQgaW50byB0aGUgZnJvbnQgb2YgdGhlIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0UHJlc3NEZXB0aCh0b3VjaFBvaW50OiBWZWN0b3IzKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc05lYXJQcmVzc2VkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbnRlcmFjdGlvbkhlaWdodCA9IHRoaXMuX2dldEludGVyYWN0aW9uSGVpZ2h0KHRvdWNoUG9pbnQsIHRoaXMuX2NvbGxpc2lvbk1lc2guZ2V0QWJzb2x1dGVQb3NpdGlvbigpKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW50ZXJhY3Rpb25TdXJmYWNlSGVpZ2h0IC0gaW50ZXJhY3Rpb25IZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBjb2xsaWRhYmxlIGlzIGluIGZyb250IG9mIHRoZSBidXR0b24sIG9yIGlmIHRoZSBidXR0b24gaGFzIG5vIGZyb250IGRpcmVjdGlvblxyXG4gICAgcHJvdGVjdGVkIF9nZXRJbnRlcmFjdGlvbkhlaWdodChpbnRlcmFjdGlvblBvczogVmVjdG9yMywgYmFzZVBvczogVmVjdG9yMykge1xyXG4gICAgICAgIGNvbnN0IGZyb250RGlyID0gdGhpcy5jb2xsaWRhYmxlRnJvbnREaXJlY3Rpb247XHJcbiAgICAgICAgaWYgKGZyb250RGlyLmxlbmd0aCgpID09PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSBidXR0b24gaGFzIG5vIGZyb250LCBqdXN0IHJldHVybiB0aGUgZGlzdGFuY2UgdG8gdGhlIGJhc2VcclxuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjMuRGlzdGFuY2UoaW50ZXJhY3Rpb25Qb3MsIGJhc2VQb3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkID0gVmVjdG9yMy5Eb3QoYmFzZVBvcywgZnJvbnREaXIpO1xyXG4gICAgICAgIGNvbnN0IGFiYyA9IFZlY3RvcjMuRG90KGludGVyYWN0aW9uUG9zLCBmcm9udERpcik7XHJcblxyXG4gICAgICAgIHJldHVybiBhYmMgLSBkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfZ2VuZXJhdGVQb2ludGVyRXZlbnRUeXBlKHByb3ZpZGVkVHlwZTogbnVtYmVyLCBuZWFyTWVzaFBvc2l0aW9uOiBWZWN0b3IzLCBhY3RpdmVJbnRlcmFjdGlvbkNvdW50OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGlmIChwcm92aWRlZFR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJET1dOIHx8IHByb3ZpZGVkVHlwZSA9PT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUk1PVkUpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc0ludGVyYWN0aW9uSW5Gcm9udE9mQnV0dG9uKG5lYXJNZXNoUG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOZWFyIGludGVyYWN0aW9uIG1lc2ggaXMgYmVoaW5kIHRoZSBidXR0b24sIGRvbid0IHNlbmQgYSBwb2ludGVyIGRvd25cclxuICAgICAgICAgICAgICAgIHJldHVybiBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSTU9WRTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzTmVhclByZXNzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJhY3Rpb25TdXJmYWNlSGVpZ2h0ID0gdGhpcy5fZ2V0SW50ZXJhY3Rpb25IZWlnaHQobmVhck1lc2hQb3NpdGlvbiwgdGhpcy5fY29sbGlzaW9uTWVzaC5nZXRBYnNvbHV0ZVBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm92aWRlZFR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJVUCkge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlSW50ZXJhY3Rpb25Db3VudCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBnZXQgdGhlIHJlbGVhc2UgZm9yIHRoZSBkb3duIHdlIHN3YWxsb3dlZCBlYXJsaWVyLCBzd2FsbG93IGFzIHdlbGxcclxuICAgICAgICAgICAgICAgIHJldHVybiBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSTU9WRTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzTmVhclByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVkVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2dldFR5cGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiVG91Y2hCdXR0b24zRFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1lc2ggYXNzb2NpYXRpb25cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfY3JlYXRlTm9kZShzY2VuZTogU2NlbmUpOiBUcmFuc2Zvcm1Ob2RlIHtcclxuICAgICAgICByZXR1cm4gc3VwZXIuX2NyZWF0ZU5vZGUoc2NlbmUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVsZWFzZXMgYWxsIGFzc29jaWF0ZWQgcmVzb3VyY2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCkge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuXHJcbiAgICAgICAgLy8gQ2xlYW4gdXAgdG9nZ2xlIG9ic2VydmFibGVzXHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJVcE9ic2VydmFibGUucmVtb3ZlQ2FsbGJhY2sodGhpcy5fdG9nZ2xlQnV0dG9uQ2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMub25Ub2dnbGVPYnNlcnZhYmxlLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb2xsaXNpb25NZXNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbGxpc2lvbk1lc2guZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUgeyBPYnNlcnZlciB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHsgU3RhbmRhcmRNYXRlcmlhbCB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9zdGFuZGFyZE1hdGVyaWFsXCI7XHJcbmltcG9ydCB7IFRyYW5zZm9ybU5vZGUgfSBmcm9tIFwiY29yZS9NZXNoZXMvdHJhbnNmb3JtTm9kZVwiO1xyXG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHsgQ3JlYXRlUGxhbmUgfSBmcm9tIFwiY29yZS9NZXNoZXMvQnVpbGRlcnMvcGxhbmVCdWlsZGVyXCI7XHJcbmltcG9ydCB7IENyZWF0ZUJveCB9IGZyb20gXCJjb3JlL01lc2hlcy9CdWlsZGVycy9ib3hCdWlsZGVyXCI7XHJcbmltcG9ydCB7IEZhZGVJbk91dEJlaGF2aW9yIH0gZnJvbSBcImNvcmUvQmVoYXZpb3JzL01lc2hlcy9mYWRlSW5PdXRCZWhhdmlvclwiO1xyXG5pbXBvcnQgdHlwZSB7IFNjZW5lIH0gZnJvbSBcImNvcmUvc2NlbmVcIjtcclxuaW1wb3J0IHsgRmx1ZW50TWF0ZXJpYWwgfSBmcm9tIFwiLi4vbWF0ZXJpYWxzL2ZsdWVudC9mbHVlbnRNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBGbHVlbnRCdXR0b25NYXRlcmlhbCB9IGZyb20gXCIuLi9tYXRlcmlhbHMvZmx1ZW50QnV0dG9uL2ZsdWVudEJ1dHRvbk1hdGVyaWFsXCI7XHJcbmltcG9ydCB7IFN0YWNrUGFuZWwgfSBmcm9tIFwiLi4vLi4vMkQvY29udHJvbHMvc3RhY2tQYW5lbFwiO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gXCIuLi8uLi8yRC9jb250cm9scy9pbWFnZVwiO1xyXG5pbXBvcnQgeyBUZXh0QmxvY2sgfSBmcm9tIFwiLi4vLi4vMkQvY29udHJvbHMvdGV4dEJsb2NrXCI7XHJcbmltcG9ydCB7IEFkdmFuY2VkRHluYW1pY1RleHR1cmUgfSBmcm9tIFwiLi4vLi4vMkQvYWR2YW5jZWREeW5hbWljVGV4dHVyZVwiO1xyXG5pbXBvcnQgdHlwZSB7IENvbnRyb2wzRCB9IGZyb20gXCIuL2NvbnRyb2wzRFwiO1xyXG5pbXBvcnQgeyBDb2xvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbG9yXCI7XHJcbmltcG9ydCB7IFRvdWNoQnV0dG9uM0QgfSBmcm9tIFwiLi90b3VjaEJ1dHRvbjNEXCI7XHJcbmltcG9ydCB0eXBlIHsgQWJzdHJhY3RNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL2Fic3RyYWN0TWVzaFwiO1xyXG5pbXBvcnQgeyBTY2VuZUxvYWRlciB9IGZyb20gXCJjb3JlL0xvYWRpbmcvc2NlbmVMb2FkZXJcIjtcclxuaW1wb3J0IHsgSXNEb2N1bWVudEF2YWlsYWJsZSB9IGZyb20gXCJjb3JlL01pc2MvZG9tTWFuYWdlbWVudFwiO1xyXG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnNjYWxhclwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gY3JlYXRlIGEgaG9sb2dyYXBoaWMgYnV0dG9uIGluIDNEXHJcbiAqIEBzaW5jZSA1LjAuMFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRvdWNoSG9sb2dyYXBoaWNCdXR0b24gZXh0ZW5kcyBUb3VjaEJ1dHRvbjNEIHtcclxuICAgIC8qKlxyXG4gICAgICogQmFzZSBVcmwgZm9yIHRoZSBidXR0b24gbW9kZWwuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgTU9ERUxfQkFTRV9VUkw6IHN0cmluZyA9IFwiaHR0cHM6Ly9hc3NldHMuYmFieWxvbmpzLmNvbS9tZXNoZXMvTVJUSy9cIjtcclxuICAgIC8qKlxyXG4gICAgICogRmlsZSBuYW1lIGZvciB0aGUgYnV0dG9uIG1vZGVsLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIE1PREVMX0ZJTEVOQU1FOiBzdHJpbmcgPSBcIm1ydGstZmx1ZW50LWJ1dHRvbi5nbGJcIjtcclxuXHJcbiAgICBwcml2YXRlIF9iYWNrUGxhdGU6IE1lc2g7XHJcbiAgICBwcml2YXRlIF90ZXh0UGxhdGU6IE1lc2g7XHJcbiAgICBwcml2YXRlIF9mcm9udFBsYXRlOiBBYnN0cmFjdE1lc2g7XHJcbiAgICBwcml2YXRlIF90ZXh0OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9pbWFnZVVybDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfc2hhcmVNYXRlcmlhbHMgPSB0cnVlO1xyXG4gICAgcHJpdmF0ZSBfaXNCYWNrcGxhdGVWaXNpYmxlID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX2Zyb250TWF0ZXJpYWw6IEZsdWVudEJ1dHRvbk1hdGVyaWFsO1xyXG4gICAgcHJpdmF0ZSBfYmFja01hdGVyaWFsOiBGbHVlbnRNYXRlcmlhbDtcclxuICAgIHByaXZhdGUgX3BsYXRlTWF0ZXJpYWw6IFN0YW5kYXJkTWF0ZXJpYWw7XHJcbiAgICBwcml2YXRlIF9waWNrZWRQb2ludE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxOdWxsYWJsZTxWZWN0b3IzPj4+O1xyXG4gICAgcHJpdmF0ZSBfcG9pbnRlckhvdmVyT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPFZlY3RvcjM+PjtcclxuICAgIHByaXZhdGUgX2Zyb250UGxhdGVEZXB0aCA9IDAuNTtcclxuICAgIHByaXZhdGUgX2JhY2tQbGF0ZURlcHRoID0gMC4wNDtcclxuICAgIHByaXZhdGUgX2JhY2twbGF0ZUNvbG9yID0gbmV3IENvbG9yMygwLjA4LCAwLjE1LCAwLjU1KTtcclxuICAgIHByaXZhdGUgX2JhY2twbGF0ZVRvZ2dsZWRDb2xvciA9IG5ldyBDb2xvcjMoMC4yNSwgMC40LCAwLjk1KTtcclxuXHJcbiAgICAvLyBUb29sdGlwXHJcbiAgICBwcml2YXRlIF90b29sdGlwRmFkZTogTnVsbGFibGU8RmFkZUluT3V0QmVoYXZpb3I+O1xyXG4gICAgcHJpdmF0ZSBfdG9vbHRpcFRleHRCbG9jazogTnVsbGFibGU8VGV4dEJsb2NrPjtcclxuICAgIHByaXZhdGUgX3Rvb2x0aXBUZXh0dXJlOiBOdWxsYWJsZTxBZHZhbmNlZER5bmFtaWNUZXh0dXJlPjtcclxuICAgIHByaXZhdGUgX3Rvb2x0aXBNZXNoOiBOdWxsYWJsZTxNZXNoPjtcclxuICAgIHByaXZhdGUgX3Rvb2x0aXBIb3Zlck9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxDb250cm9sM0Q+PjtcclxuICAgIHByaXZhdGUgX3Rvb2x0aXBPdXRPYnNlcnZlcjogTnVsbGFibGU8T2JzZXJ2ZXI8Q29udHJvbDNEPj47XHJcblxyXG4gICAgcHJpdmF0ZSBfZGlzcG9zZVRvb2x0aXAoKSB7XHJcbiAgICAgICAgdGhpcy5fdG9vbHRpcEZhZGUgPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLl90b29sdGlwVGV4dEJsb2NrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2suZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fdG9vbHRpcFRleHR1cmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHR1cmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fdG9vbHRpcE1lc2gpIHtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcE1lc2guZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9uUG9pbnRlckVudGVyT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fdG9vbHRpcEhvdmVyT2JzZXJ2ZXIpO1xyXG4gICAgICAgIHRoaXMub25Qb2ludGVyT3V0T2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fdG9vbHRpcE91dE9ic2VydmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcmluZyBncm91bmQgaWQgb2YgYWxsIHRoZSBtZXNoIGluIHRoZSBidXR0b25cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCByZW5kZXJpbmdHcm91cElkKGlkOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUucmVuZGVyaW5nR3JvdXBJZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuX3RleHRQbGF0ZS5yZW5kZXJpbmdHcm91cElkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5fZnJvbnRQbGF0ZS5yZW5kZXJpbmdHcm91cElkID0gaWQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90b29sdGlwTWVzaCkge1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwTWVzaC5yZW5kZXJpbmdHcm91cElkID0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCByZW5kZXJpbmdHcm91cElkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tQbGF0ZS5yZW5kZXJpbmdHcm91cElkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbWVzaCB1c2VkIHRvIHJlbmRlciB0aGlzIGNvbnRyb2xcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldCBtZXNoKCk6IE51bGxhYmxlPEFic3RyYWN0TWVzaD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iYWNrUGxhdGUgYXMgQWJzdHJhY3RNZXNoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGV4dCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIHRvb2x0aXAgc2hvd24gd2hlbiBob3ZlcmluZyBvbiB0aGUgYnV0dG9uLiBXaGVuIHNldCB0byBudWxsIHRvb2x0aXAgaXMgZGlzYWJsZWQuIChEZWZhdWx0OiBudWxsKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IHRvb2x0aXBUZXh0KHRleHQ6IE51bGxhYmxlPHN0cmluZz4pIHtcclxuICAgICAgICBpZiAoIXRleHQpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGlzcG9zZVRvb2x0aXAoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuX3Rvb2x0aXBGYWRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0SGFuZGVkU2NlbmUgPSB0aGlzLl9iYWNrUGxhdGUuX3NjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtO1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdG9vbHRpcCB3aXRoIG1lc2ggYW5kIHRleHRcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcE1lc2ggPSBDcmVhdGVQbGFuZShcIlwiLCB7IHNpemU6IDEgfSwgdGhpcy5fYmFja1BsYXRlLl9zY2VuZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvb2x0aXBCYWNrZ3JvdW5kID0gQ3JlYXRlUGxhbmUoXCJcIiwgeyBzaXplOiAxLCBzaWRlT3JpZW50YXRpb246IE1lc2guRE9VQkxFU0lERSB9LCB0aGlzLl9iYWNrUGxhdGUuX3NjZW5lKTtcclxuICAgICAgICAgICAgY29uc3QgbWF0ID0gbmV3IFN0YW5kYXJkTWF0ZXJpYWwoXCJcIiwgdGhpcy5fYmFja1BsYXRlLl9zY2VuZSk7XHJcbiAgICAgICAgICAgIG1hdC5kaWZmdXNlQ29sb3IgPSBDb2xvcjMuRnJvbUhleFN0cmluZyhcIiMyMTIxMjFcIik7XHJcbiAgICAgICAgICAgIHRvb2x0aXBCYWNrZ3JvdW5kLm1hdGVyaWFsID0gbWF0O1xyXG4gICAgICAgICAgICB0b29sdGlwQmFja2dyb3VuZC5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBNZXNoLmFkZENoaWxkKHRvb2x0aXBCYWNrZ3JvdW5kKTtcclxuICAgICAgICAgICAgdG9vbHRpcEJhY2tncm91bmQucG9zaXRpb24gPSBWZWN0b3IzLkZvcndhcmQocmlnaHRIYW5kZWRTY2VuZSkuc2NhbGUoMC4wNSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBNZXNoLnNjYWxpbmcueSA9IDEgLyAzO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwTWVzaC5wb3NpdGlvbiA9IFZlY3RvcjMuVXAoKS5zY2FsZSgwLjcpLmFkZChWZWN0b3IzLkZvcndhcmQocmlnaHRIYW5kZWRTY2VuZSkuc2NhbGUoLTAuMTUpKTtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcE1lc2guaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwTWVzaC5wYXJlbnQgPSB0aGlzLl9iYWNrUGxhdGU7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGV4dCB0ZXh0dXJlIGZvciB0aGUgdG9vbHRpcFxyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwVGV4dHVyZSA9IEFkdmFuY2VkRHluYW1pY1RleHR1cmUuQ3JlYXRlRm9yTWVzaCh0aGlzLl90b29sdGlwTWVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2sgPSBuZXcgVGV4dEJsb2NrKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBUZXh0QmxvY2suc2NhbGVZID0gMztcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHRCbG9jay5jb2xvciA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHRCbG9jay5mb250U2l6ZSA9IDEzMDtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcFRleHR1cmUuYWRkQ29udHJvbCh0aGlzLl90b29sdGlwVGV4dEJsb2NrKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBob3ZlciBhY3Rpb24gdG8gdG9vbHRpcFxyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwRmFkZSA9IG5ldyBGYWRlSW5PdXRCZWhhdmlvcigpO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwRmFkZS5kZWxheSA9IDUwMDtcclxuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcE1lc2guYWRkQmVoYXZpb3IodGhpcy5fdG9vbHRpcEZhZGUpO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwSG92ZXJPYnNlcnZlciA9IHRoaXMub25Qb2ludGVyRW50ZXJPYnNlcnZhYmxlLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdG9vbHRpcEZhZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90b29sdGlwRmFkZS5mYWRlSW4odHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwT3V0T2JzZXJ2ZXIgPSB0aGlzLm9uUG9pbnRlck91dE9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90b29sdGlwRmFkZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBGYWRlLmZhZGVJbihmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fdG9vbHRpcFRleHRCbG9jaykge1xyXG4gICAgICAgICAgICB0aGlzLl90b29sdGlwVGV4dEJsb2NrLnRleHQgPSB0ZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHRvb2x0aXBUZXh0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl90b29sdGlwVGV4dEJsb2NrKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90b29sdGlwVGV4dEJsb2NrLnRleHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRleHQgZm9yIHRoZSBidXR0b25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB0ZXh0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGV4dCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdGV4dCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3JlYnVpbGRDb250ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGltYWdlIHVybCBmb3IgdGhlIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGltYWdlVXJsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlVXJsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaW1hZ2VVcmwodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9pbWFnZVVybCA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faW1hZ2VVcmwgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9yZWJ1aWxkQ29udGVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgYmFjayBtYXRlcmlhbCB1c2VkIGJ5IHRoaXMgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgYmFja01hdGVyaWFsKCk6IEZsdWVudE1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYmFja01hdGVyaWFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgZnJvbnQgbWF0ZXJpYWwgdXNlZCBieSB0aGlzIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGZyb250TWF0ZXJpYWwoKTogRmx1ZW50QnV0dG9uTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mcm9udE1hdGVyaWFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgcGxhdGUgbWF0ZXJpYWwgdXNlZCBieSB0aGlzIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHBsYXRlTWF0ZXJpYWwoKTogU3RhbmRhcmRNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsYXRlTWF0ZXJpYWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoaXMgYnV0dG9uIHNoYXJlcyBpdHMgbWF0ZXJpYWwgd2l0aCBvdGhlciBIb2xvZ3JhcGhpY0J1dHRvbnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBzaGFyZU1hdGVyaWFscygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2hhcmVNYXRlcmlhbHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHdoZXRoZXIgdGhlIGJhY2twbGF0ZSBpcyB2aXNpYmxlIG9yIGhpZGRlbi4gSGlkaW5nIHRoZSBiYWNrcGxhdGUgaXMgbm90IHJlY29tbWVuZGVkIHdpdGhvdXQgc29tZSBzb3J0IG9mIHJlcGxhY2VtZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgaXNCYWNrcGxhdGVWaXNpYmxlKGlzVmlzaWJsZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLm1lc2ggJiYgISF0aGlzLl9iYWNrTWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgaWYgKGlzVmlzaWJsZSAmJiAhdGhpcy5faXNCYWNrcGxhdGVWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWNrUGxhdGUudmlzaWJpbGl0eSA9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzVmlzaWJsZSAmJiB0aGlzLl9pc0JhY2twbGF0ZVZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhY2tQbGF0ZS52aXNpYmlsaXR5ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faXNCYWNrcGxhdGVWaXNpYmxlID0gaXNWaXNpYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBidXR0b25cclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIGNvbnRyb2wgbmFtZVxyXG4gICAgICogQHBhcmFtIHNoYXJlTWF0ZXJpYWxzXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU/OiBzdHJpbmcsIHNoYXJlTWF0ZXJpYWxzID0gdHJ1ZSkge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLl9zaGFyZU1hdGVyaWFscyA9IHNoYXJlTWF0ZXJpYWxzO1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJFbnRlckFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fZnJvbnRNYXRlcmlhbC5sZWZ0QmxvYkVuYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zyb250TWF0ZXJpYWwucmlnaHRCbG9iRW5hYmxlID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJPdXRBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zyb250TWF0ZXJpYWwubGVmdEJsb2JFbmFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fZnJvbnRNYXRlcmlhbC5yaWdodEJsb2JFbmFibGUgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ZXJEb3duQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZnJvbnRQbGF0ZSAmJiAhdGhpcy5pc0FjdGl2ZU5lYXJJbnRlcmFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJvbnRQbGF0ZS5zY2FsaW5nLnogPSB0aGlzLl9mcm9udFBsYXRlRGVwdGggKiAwLjI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcm9udFBsYXRlLnBvc2l0aW9uID0gVmVjdG9yMy5Gb3J3YXJkKHRoaXMuX2Zyb250UGxhdGUuX3NjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtKS5zY2FsZSgodGhpcy5fZnJvbnRQbGF0ZURlcHRoIC0gMC4yICogdGhpcy5fZnJvbnRQbGF0ZURlcHRoKSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dFBsYXRlLnBvc2l0aW9uID0gVmVjdG9yMy5Gb3J3YXJkKHRoaXMuX3RleHRQbGF0ZS5fc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW0pLnNjYWxlKC0odGhpcy5fYmFja1BsYXRlRGVwdGggKyAwLjIgKiB0aGlzLl9mcm9udFBsYXRlRGVwdGgpIC8gMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucG9pbnRlclVwQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZnJvbnRQbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJvbnRQbGF0ZS5zY2FsaW5nLnogPSB0aGlzLl9mcm9udFBsYXRlRGVwdGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcm9udFBsYXRlLnBvc2l0aW9uID0gVmVjdG9yMy5Gb3J3YXJkKHRoaXMuX2Zyb250UGxhdGUuX3NjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtKS5zY2FsZSgodGhpcy5fZnJvbnRQbGF0ZURlcHRoIC0gdGhpcy5fZnJvbnRQbGF0ZURlcHRoKSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dFBsYXRlLnBvc2l0aW9uID0gVmVjdG9yMy5Gb3J3YXJkKHRoaXMuX3RleHRQbGF0ZS5fc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW0pLnNjYWxlKC0odGhpcy5fYmFja1BsYXRlRGVwdGggKyB0aGlzLl9mcm9udFBsYXRlRGVwdGgpIC8gMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLm9uUG9pbnRlck1vdmVPYnNlcnZhYmxlLmFkZCgocG9zaXRpb24pID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Zyb250UGxhdGUgJiYgdGhpcy5pc0FjdGl2ZU5lYXJJbnRlcmFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBWZWN0b3IzLlplcm8oKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9iYWNrUGxhdGUuZ2V0V29ybGRNYXRyaXgoKS5kZWNvbXBvc2Uoc2NhbGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnRlcmFjdGlvbkhlaWdodCA9IHRoaXMuX2dldEludGVyYWN0aW9uSGVpZ2h0KHBvc2l0aW9uLCB0aGlzLl9iYWNrUGxhdGUuZ2V0QWJzb2x1dGVQb3NpdGlvbigpKSAvIHNjYWxlLno7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25IZWlnaHQgPSBTY2FsYXIuQ2xhbXAoaW50ZXJhY3Rpb25IZWlnaHQgLSB0aGlzLl9iYWNrUGxhdGVEZXB0aCAvIDIsIDAuMiAqIHRoaXMuX2Zyb250UGxhdGVEZXB0aCwgdGhpcy5fZnJvbnRQbGF0ZURlcHRoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJvbnRQbGF0ZS5zY2FsaW5nLnogPSBpbnRlcmFjdGlvbkhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mcm9udFBsYXRlLnBvc2l0aW9uID0gVmVjdG9yMy5Gb3J3YXJkKHRoaXMuX2Zyb250UGxhdGUuX3NjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtKS5zY2FsZSgodGhpcy5fZnJvbnRQbGF0ZURlcHRoIC0gaW50ZXJhY3Rpb25IZWlnaHQpIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dFBsYXRlLnBvc2l0aW9uID0gVmVjdG9yMy5Gb3J3YXJkKHRoaXMuX3RleHRQbGF0ZS5fc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW0pLnNjYWxlKC0odGhpcy5fYmFja1BsYXRlRGVwdGggKyBpbnRlcmFjdGlvbkhlaWdodCkgLyAyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9wb2ludGVySG92ZXJPYnNlcnZlciA9IHRoaXMub25Qb2ludGVyTW92ZU9ic2VydmFibGUuYWRkKChob3ZlclBvc2l0aW9uOiBWZWN0b3IzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zyb250TWF0ZXJpYWwuZ2xvYmFsTGVmdEluZGV4VGlwUG9zaXRpb24gPSBob3ZlclBvc2l0aW9uO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJUb3VjaEhvbG9ncmFwaGljQnV0dG9uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVidWlsZENvbnRlbnQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZGlzcG9zZUZhY2FkZVRleHR1cmUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgcGFuZWwgPSBuZXcgU3RhY2tQYW5lbCgpO1xyXG4gICAgICAgIHBhbmVsLmlzVmVydGljYWwgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoSXNEb2N1bWVudEF2YWlsYWJsZSgpICYmICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faW1hZ2VVcmwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5zb3VyY2UgPSB0aGlzLl9pbWFnZVVybDtcclxuICAgICAgICAgICAgICAgIGltYWdlLnBhZGRpbmdUb3AgPSBcIjQwcHhcIjtcclxuICAgICAgICAgICAgICAgIGltYWdlLmhlaWdodCA9IFwiMTgwcHhcIjtcclxuICAgICAgICAgICAgICAgIGltYWdlLndpZHRoID0gXCIxMDBweFwiO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2UucGFkZGluZ0JvdHRvbSA9IFwiNDBweFwiO1xyXG4gICAgICAgICAgICAgICAgcGFuZWwuYWRkQ29udHJvbChpbWFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90ZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dEJsb2NrKCk7XHJcbiAgICAgICAgICAgIHRleHQudGV4dCA9IHRoaXMuX3RleHQ7XHJcbiAgICAgICAgICAgIHRleHQuY29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIHRleHQuaGVpZ2h0ID0gXCIzMHB4XCI7XHJcbiAgICAgICAgICAgIHRleHQuZm9udFNpemUgPSAyNDtcclxuICAgICAgICAgICAgcGFuZWwuYWRkQ29udHJvbCh0ZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGVudCA9IHBhbmVsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1lc2ggYXNzb2NpYXRpb25cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfY3JlYXRlTm9kZShzY2VuZTogU2NlbmUpOiBUcmFuc2Zvcm1Ob2RlIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLm5hbWUgPz8gXCJUb3VjaEhvbG9ncmFwaGljQnV0dG9uXCI7XHJcbiAgICAgICAgY29uc3QgY29sbGlzaW9uTWVzaCA9IENyZWF0ZUJveChcclxuICAgICAgICAgICAgYCR7dGhpcy5uYW1lfV9jb2xsaXNpb25NZXNoYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEuMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMS4wLFxyXG4gICAgICAgICAgICAgICAgZGVwdGg6IHRoaXMuX2Zyb250UGxhdGVEZXB0aCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2NlbmVcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbGxpc2lvbk1lc2guaXNQaWNrYWJsZSA9IHRydWU7XHJcbiAgICAgICAgY29sbGlzaW9uTWVzaC5pc05lYXJQaWNrYWJsZSA9IHRydWU7XHJcbiAgICAgICAgY29sbGlzaW9uTWVzaC52aXNpYmlsaXR5ID0gMDtcclxuICAgICAgICBjb2xsaXNpb25NZXNoLnBvc2l0aW9uID0gVmVjdG9yMy5Gb3J3YXJkKHNjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtKS5zY2FsZSgtdGhpcy5fZnJvbnRQbGF0ZURlcHRoIC8gMik7XHJcblxyXG4gICAgICAgIFNjZW5lTG9hZGVyLkltcG9ydE1lc2hBc3luYyh1bmRlZmluZWQsIFRvdWNoSG9sb2dyYXBoaWNCdXR0b24uTU9ERUxfQkFTRV9VUkwsIFRvdWNoSG9sb2dyYXBoaWNCdXR0b24uTU9ERUxfRklMRU5BTUUsIHNjZW5lKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYWxwaGFNZXNoID0gQ3JlYXRlQm94KFxyXG4gICAgICAgICAgICAgICAgXCIke3RoaXMubmFtZX1fYWxwaGFNZXNoXCIsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEuMCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEuMCxcclxuICAgICAgICAgICAgICAgICAgICBkZXB0aDogMS4wLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNjZW5lXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGFscGhhTWVzaC5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFscGhhTWVzaC5tYXRlcmlhbCA9IG5ldyBTdGFuZGFyZE1hdGVyaWFsKFwiJHt0aGlzLm5hbWV9X2FscGhhTWVzaF9tYXRlcmlhbFwiLCBzY2VuZSk7XHJcbiAgICAgICAgICAgIGFscGhhTWVzaC5tYXRlcmlhbC5hbHBoYSA9IDAuMTU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpbXBvcnRlZEZyb250UGxhdGUgPSByZXN1bHQubWVzaGVzWzFdO1xyXG4gICAgICAgICAgICBpbXBvcnRlZEZyb250UGxhdGUubmFtZSA9IGAke3RoaXMubmFtZX1fZnJvbnRQbGF0ZWA7XHJcbiAgICAgICAgICAgIGltcG9ydGVkRnJvbnRQbGF0ZS5pc1BpY2thYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGltcG9ydGVkRnJvbnRQbGF0ZS5zY2FsaW5nLnogPSB0aGlzLl9mcm9udFBsYXRlRGVwdGg7XHJcbiAgICAgICAgICAgIGFscGhhTWVzaC5wYXJlbnQgPSBpbXBvcnRlZEZyb250UGxhdGU7XHJcbiAgICAgICAgICAgIGltcG9ydGVkRnJvbnRQbGF0ZS5wYXJlbnQgPSBjb2xsaXNpb25NZXNoO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZnJvbnRNYXRlcmlhbCkge1xyXG4gICAgICAgICAgICAgICAgaW1wb3J0ZWRGcm9udFBsYXRlLm1hdGVyaWFsID0gdGhpcy5fZnJvbnRNYXRlcmlhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9mcm9udFBsYXRlID0gaW1wb3J0ZWRGcm9udFBsYXRlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUgPSBDcmVhdGVCb3goXHJcbiAgICAgICAgICAgIGAke3RoaXMubmFtZX1fYmFja1BsYXRlYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEuMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMS4wLFxyXG4gICAgICAgICAgICAgICAgZGVwdGg6IHRoaXMuX2JhY2tQbGF0ZURlcHRoLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY2VuZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5wb3NpdGlvbiA9IFZlY3RvcjMuRm9yd2FyZChzY2VuZS51c2VSaWdodEhhbmRlZFN5c3RlbSkuc2NhbGUodGhpcy5fYmFja1BsYXRlRGVwdGggLyAyKTtcclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUuaXNQaWNrYWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUgPSA8TWVzaD5zdXBlci5fY3JlYXRlTm9kZShzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5fdGV4dFBsYXRlLm5hbWUgPSBgJHt0aGlzLm5hbWV9X3RleHRQbGF0ZWA7XHJcbiAgICAgICAgdGhpcy5fdGV4dFBsYXRlLmlzUGlja2FibGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl90ZXh0UGxhdGUucG9zaXRpb24gPSBWZWN0b3IzLkZvcndhcmQoc2NlbmUudXNlUmlnaHRIYW5kZWRTeXN0ZW0pLnNjYWxlKC10aGlzLl9mcm9udFBsYXRlRGVwdGggLyAyKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlLmFkZENoaWxkKGNvbGxpc2lvbk1lc2gpO1xyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5hZGRDaGlsZCh0aGlzLl90ZXh0UGxhdGUpO1xyXG5cclxuICAgICAgICBjb25zdCB0biA9IG5ldyBUcmFuc2Zvcm1Ob2RlKGB7dGhpcy5uYW1lfV9yb290YCwgc2NlbmUpO1xyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5zZXRQYXJlbnQodG4pO1xyXG5cclxuICAgICAgICB0aGlzLmNvbGxpc2lvbk1lc2ggPSBjb2xsaXNpb25NZXNoO1xyXG4gICAgICAgIHRoaXMuY29sbGlkYWJsZUZyb250RGlyZWN0aW9uID0gdGhpcy5fYmFja1BsYXRlLmZvcndhcmQubmVnYXRlKCk7IC8vIE1lc2ggaXMgZmFjaW5nIHRoZSB3cm9uZyB3YXlcclxuXHJcbiAgICAgICAgcmV0dXJuIHRuO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYXBwbHlGYWNhZGUoZmFjYWRlVGV4dHVyZTogQWR2YW5jZWREeW5hbWljVGV4dHVyZSkge1xyXG4gICAgICAgIHRoaXMuX3BsYXRlTWF0ZXJpYWwuZW1pc3NpdmVUZXh0dXJlID0gZmFjYWRlVGV4dHVyZTtcclxuICAgICAgICB0aGlzLl9wbGF0ZU1hdGVyaWFsLm9wYWNpdHlUZXh0dXJlID0gZmFjYWRlVGV4dHVyZTtcclxuICAgICAgICB0aGlzLl9wbGF0ZU1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IG5ldyBDb2xvcjMoMC40LCAwLjQsIDAuNCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlQmFja01hdGVyaWFsKG1lc2g6IE1lc2gpIHtcclxuICAgICAgICB0aGlzLl9iYWNrTWF0ZXJpYWwgPSBuZXcgRmx1ZW50TWF0ZXJpYWwodGhpcy5uYW1lICsgXCJiYWNrUGxhdGVNYXRlcmlhbFwiLCBtZXNoLmdldFNjZW5lKCkpO1xyXG4gICAgICAgIHRoaXMuX2JhY2tNYXRlcmlhbC5hbGJlZG9Db2xvciA9IHRoaXMuX2JhY2twbGF0ZUNvbG9yO1xyXG4gICAgICAgIHRoaXMuX2JhY2tNYXRlcmlhbC5yZW5kZXJCb3JkZXJzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9iYWNrTWF0ZXJpYWwucmVuZGVySG92ZXJMaWdodCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NyZWF0ZUZyb250TWF0ZXJpYWwobWVzaDogTWVzaCkge1xyXG4gICAgICAgIHRoaXMuX2Zyb250TWF0ZXJpYWwgPSBuZXcgRmx1ZW50QnV0dG9uTWF0ZXJpYWwodGhpcy5uYW1lICsgXCJGcm9udCBNYXRlcmlhbFwiLCBtZXNoLmdldFNjZW5lKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NyZWF0ZVBsYXRlTWF0ZXJpYWwobWVzaDogTWVzaCkge1xyXG4gICAgICAgIHRoaXMuX3BsYXRlTWF0ZXJpYWwgPSBuZXcgU3RhbmRhcmRNYXRlcmlhbCh0aGlzLm5hbWUgKyBcIlBsYXRlIE1hdGVyaWFsXCIsIG1lc2guZ2V0U2NlbmUoKSk7XHJcbiAgICAgICAgdGhpcy5fcGxhdGVNYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gQ29sb3IzLkJsYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9vblRvZ2dsZShuZXdTdGF0ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9iYWNrTWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgaWYgKG5ld1N0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWNrTWF0ZXJpYWwuYWxiZWRvQ29sb3IgPSB0aGlzLl9iYWNrcGxhdGVUb2dnbGVkQ29sb3I7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWNrTWF0ZXJpYWwuYWxiZWRvQ29sb3IgPSB0aGlzLl9iYWNrcGxhdGVDb2xvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIuX29uVG9nZ2xlKG5ld1N0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FmZmVjdE1hdGVyaWFsKG1lc2g6IE1lc2gpIHtcclxuICAgICAgICBpZiAodGhpcy5fc2hhcmVNYXRlcmlhbHMpIHtcclxuICAgICAgICAgICAgLy8gQmFja1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2hvc3QuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzW1wiYmFja0ZsdWVudE1hdGVyaWFsXCJdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVCYWNrTWF0ZXJpYWwobWVzaCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ob3N0Ll90b3VjaFNoYXJlZE1hdGVyaWFsc1tcImJhY2tGbHVlbnRNYXRlcmlhbFwiXSA9IHRoaXMuX2JhY2tNYXRlcmlhbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhY2tNYXRlcmlhbCA9IHRoaXMuX2hvc3QuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzW1wiYmFja0ZsdWVudE1hdGVyaWFsXCJdIGFzIEZsdWVudE1hdGVyaWFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBGcm9udFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2hvc3QuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzW1wiZnJvbnRGbHVlbnRNYXRlcmlhbFwiXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlRnJvbnRNYXRlcmlhbChtZXNoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3QuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzW1wiZnJvbnRGbHVlbnRNYXRlcmlhbFwiXSA9IHRoaXMuX2Zyb250TWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcm9udE1hdGVyaWFsID0gdGhpcy5faG9zdC5fdG91Y2hTaGFyZWRNYXRlcmlhbHNbXCJmcm9udEZsdWVudE1hdGVyaWFsXCJdIGFzIEZsdWVudEJ1dHRvbk1hdGVyaWFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlQmFja01hdGVyaWFsKG1lc2gpO1xyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVGcm9udE1hdGVyaWFsKG1lc2gpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY3JlYXRlUGxhdGVNYXRlcmlhbChtZXNoKTtcclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUubWF0ZXJpYWwgPSB0aGlzLl9iYWNrTWF0ZXJpYWw7XHJcbiAgICAgICAgdGhpcy5fdGV4dFBsYXRlLm1hdGVyaWFsID0gdGhpcy5fcGxhdGVNYXRlcmlhbDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0JhY2twbGF0ZVZpc2libGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmFja1BsYXRlLnZpc2liaWxpdHkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fZnJvbnRQbGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9mcm9udFBsYXRlLm1hdGVyaWFsID0gdGhpcy5fZnJvbnRNYXRlcmlhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3JlYnVpbGRDb250ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWxlYXNlcyBhbGwgYXNzb2NpYXRlZCByZXNvdXJjZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpOyAvLyB3aWxsIGRpc3Bvc2UgbWFpbiBtZXNoIGllLiBiYWNrIHBsYXRlXHJcblxyXG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VUb29sdGlwKCk7XHJcbiAgICAgICAgdGhpcy5vblBvaW50ZXJNb3ZlT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fcG9pbnRlckhvdmVyT2JzZXJ2ZXIpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuc2hhcmVNYXRlcmlhbHMpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmFja01hdGVyaWFsLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5fZnJvbnRNYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BsYXRlTWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BpY2tlZFBvaW50T2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3Qub25QaWNrZWRQb2ludENoYW5nZWRPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9waWNrZWRQb2ludE9ic2VydmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BpY2tlZFBvaW50T2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5pbXBvcnQgdHlwZSB7IFZlY3RvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IFRyYW5zZm9ybU5vZGUgfSBmcm9tIFwiY29yZS9NZXNoZXMvdHJhbnNmb3JtTm9kZVwiO1xyXG5pbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUgeyBDb250cm9sM0QgfSBmcm9tIFwiLi9jb250cm9sM0RcIjtcclxuaW1wb3J0IHsgVm9sdW1lQmFzZWRQYW5lbCB9IGZyb20gXCIuL3ZvbHVtZUJhc2VkUGFuZWxcIjtcclxuaW1wb3J0IHsgTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9tZXNoXCI7XHJcbmltcG9ydCB7IENyZWF0ZUJveCB9IGZyb20gXCJjb3JlL01lc2hlcy9CdWlsZGVycy9ib3hCdWlsZGVyXCI7XHJcbmltcG9ydCB0eXBlIHsgQWJzdHJhY3RNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL2Fic3RyYWN0TWVzaFwiO1xyXG5pbXBvcnQgeyBGbHVlbnRNYXRlcmlhbCB9IGZyb20gXCIuLi9tYXRlcmlhbHMvZmx1ZW50L2ZsdWVudE1hdGVyaWFsXCI7XHJcbmltcG9ydCB7IENvbG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguY29sb3JcIjtcclxuaW1wb3J0IHR5cGUgeyBPYnNlcnZlciB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiY29yZS9NaXNjL2xvZ2dlclwiO1xyXG5pbXBvcnQgdHlwZSB7IENvbnRhaW5lcjNEIH0gZnJvbSBcIi4vY29udGFpbmVyM0RcIjtcclxuaW1wb3J0IHR5cGUgeyBUb3VjaEhvbG9ncmFwaGljQnV0dG9uIH0gZnJvbSBcIi4vdG91Y2hIb2xvZ3JhcGhpY0J1dHRvblwiO1xyXG5cclxuLyoqXHJcbiAqIFNpbXBsZSBtZW51IHRoYXQgY2FuIGNvbnRhaW4gaG9sb2dyYXBoaWMgYnV0dG9uc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRvdWNoSG9sb2dyYXBoaWNNZW51IGV4dGVuZHMgVm9sdW1lQmFzZWRQYW5lbCB7XHJcbiAgICBwcm90ZWN0ZWQgX2JhY2tQbGF0ZTogTWVzaDtcclxuICAgIHByaXZhdGUgX2JhY2tQbGF0ZU1hdGVyaWFsOiBGbHVlbnRNYXRlcmlhbDtcclxuICAgIHByaXZhdGUgX3BpY2tlZFBvaW50T2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPE51bGxhYmxlPFZlY3RvcjM+Pj47XHJcblxyXG4gICAgcHJpdmF0ZSBfY3VycmVudE1pbjogTnVsbGFibGU8VmVjdG9yMz47XHJcbiAgICBwcml2YXRlIF9jdXJyZW50TWF4OiBOdWxsYWJsZTxWZWN0b3IzPjtcclxuXHJcbiAgICBwcml2YXRlIF9iYWNrUGxhdGVNYXJnaW4gPSAxLjI1O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2NhbGUgZm9yIHRoZSBidXR0b25zIGFkZGVkIHRvIHRoZSBtZW51XHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cclxuICAgIHByb3RlY3RlZCBzdGF0aWMgTUVOVV9CVVRUT05fU0NBTEU6IG51bWJlciA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG1hcmdpbiBzaXplIG9mIHRoZSBiYWNrcGxhdGUgaW4gYnV0dG9uIHNpemUgdW5pdHMuXHJcbiAgICAgKiBTZXR0aW5nIHRoaXMgdG8gMSwgd2lsbCBtYWtlIHRoZSBiYWNrUGxhdGUgbWFyZ2luIHRoZSBzaXplIG9mIDEgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgYmFja1BsYXRlTWFyZ2luKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JhY2tQbGF0ZU1hcmdpbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGJhY2tQbGF0ZU1hcmdpbih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlTWFyZ2luID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jaGlsZHJlbi5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGNvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUN1cnJlbnRNaW5NYXgoY29udHJvbC5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlTWFyZ2lucygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2NyZWF0ZU5vZGUoc2NlbmU6IFNjZW5lKTogTnVsbGFibGU8VHJhbnNmb3JtTm9kZT4ge1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgTWVzaChgbWVudV8ke3RoaXMubmFtZX1gLCBzY2VuZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZSA9IENyZWF0ZUJveChcImJhY2tQbGF0ZVwiICsgdGhpcy5uYW1lLCB7IHNpemU6IDEgfSwgc2NlbmUpO1xyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5wYXJlbnQgPSBub2RlO1xyXG5cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FmZmVjdE1hdGVyaWFsKG1lc2g6IEFic3RyYWN0TWVzaCkge1xyXG4gICAgICAgIHRoaXMuX2JhY2tQbGF0ZU1hdGVyaWFsID0gbmV3IEZsdWVudE1hdGVyaWFsKHRoaXMubmFtZSArIFwiYmFja1BsYXRlTWF0ZXJpYWxcIiwgbWVzaC5nZXRTY2VuZSgpKTtcclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGVNYXRlcmlhbC5hbGJlZG9Db2xvciA9IG5ldyBDb2xvcjMoMC4wOCwgMC4xNSwgMC41NSk7XHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlTWF0ZXJpYWwucmVuZGVyQm9yZGVycyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fYmFja1BsYXRlTWF0ZXJpYWwucmVuZGVySG92ZXJMaWdodCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuX3BpY2tlZFBvaW50T2JzZXJ2ZXIgPSB0aGlzLl9ob3N0Lm9uUGlja2VkUG9pbnRDaGFuZ2VkT2JzZXJ2YWJsZS5hZGQoKHBpY2tlZFBvaW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwaWNrZWRQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFja1BsYXRlTWF0ZXJpYWwuaG92ZXJQb3NpdGlvbiA9IHBpY2tlZFBvaW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFja1BsYXRlTWF0ZXJpYWwuaG92ZXJDb2xvci5hID0gMS4wO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFja1BsYXRlTWF0ZXJpYWwuaG92ZXJDb2xvci5hID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9iYWNrUGxhdGUubWF0ZXJpYWwgPSB0aGlzLl9iYWNrUGxhdGVNYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX21hcEdyaWROb2RlKGNvbnRyb2w6IENvbnRyb2wzRCwgbm9kZVBvc2l0aW9uOiBWZWN0b3IzKSB7XHJcbiAgICAgICAgLy8gU2ltcGxlIHBsYW5lIG1hcHBpbmcgZm9yIHRoZSBtZW51XHJcbiAgICAgICAgY29uc3QgbWVzaCA9IGNvbnRyb2wubWVzaDtcclxuXHJcbiAgICAgICAgaWYgKCFtZXNoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRyb2wucG9zaXRpb24gPSBub2RlUG9zaXRpb24uY2xvbmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlQ3VycmVudE1pbk1heChub2RlUG9zaXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZmluYWxQcm9jZXNzaW5nKCkge1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZU1hcmdpbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91cGRhdGVDdXJyZW50TWluTWF4KG5vZGVQb3NpdGlvbjogVmVjdG9yMykge1xyXG4gICAgICAgIGlmICghdGhpcy5fY3VycmVudE1pbikge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWluID0gbm9kZVBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRNYXggPSBub2RlUG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNaW4ubWluaW1pemVJblBsYWNlKG5vZGVQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudE1heCEubWF4aW1pemVJblBsYWNlKG5vZGVQb3NpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlTWFyZ2lucygpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50TWluIS5hZGRJblBsYWNlRnJvbUZsb2F0cygtdGhpcy5fY2VsbFdpZHRoIC8gMiwgLXRoaXMuX2NlbGxIZWlnaHQgLyAyLCAwKTtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1heCEuYWRkSW5QbGFjZUZyb21GbG9hdHModGhpcy5fY2VsbFdpZHRoIC8gMiwgdGhpcy5fY2VsbEhlaWdodCAvIDIsIDApO1xyXG4gICAgICAgICAgICBjb25zdCBleHRlbmRTaXplID0gdGhpcy5fY3VycmVudE1heCEuc3VidHJhY3QodGhpcy5fY3VycmVudE1pbiEpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWxzbyBhZGQgYSAlIG1hcmdpblxyXG4gICAgICAgICAgICB0aGlzLl9iYWNrUGxhdGUuc2NhbGluZy54ID0gZXh0ZW5kU2l6ZS54ICsgdGhpcy5fY2VsbFdpZHRoICogdGhpcy5iYWNrUGxhdGVNYXJnaW47XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5zY2FsaW5nLnkgPSBleHRlbmRTaXplLnkgKyB0aGlzLl9jZWxsSGVpZ2h0ICogdGhpcy5iYWNrUGxhdGVNYXJnaW47XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tQbGF0ZS5zY2FsaW5nLnogPSAwLjAwMTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuW2ldLnBvc2l0aW9uLnN1YnRyYWN0SW5QbGFjZSh0aGlzLl9jdXJyZW50TWluISkuc3VidHJhY3RJblBsYWNlKGV4dGVuZFNpemUuc2NhbGUoMC41KSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGlsZHJlbltpXS5wb3NpdGlvbi56IC09IDAuMDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNaW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRNYXggPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIGhvbG9ncmFwaGljIG1lbnUgR1VJIDNEIGNvbnRyb2xcclxuICAgICAqIEBwYXJhbSBuYW1lIG5hbWUgb2YgdGhlIG1lbnVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIGJ1dHRvbiB0byB0aGUgbWVudS5cclxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgdGhlIGJhY2sgbWF0ZXJpYWwgb2YgdGhlIGJ1dHRvbiB3aWxsIGJlIHNldCB0byB0cmFuc3BhcmVudCBhcyBpdCBpcyBhdHRhY2hlZCB0byB0aGUgbWVudS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYnV0dG9uIEJ1dHRvbiB0byBhZGRcclxuICAgICAqIEByZXR1cm5zIFRoaXMgbWVudVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkQnV0dG9uKGJ1dHRvbjogVG91Y2hIb2xvZ3JhcGhpY0J1dHRvbik6IFRvdWNoSG9sb2dyYXBoaWNNZW51IHtcclxuICAgICAgICAvLyBCbG9jayB1cGRhdGluZyB0aGUgbGF5b3V0IHVudGlsIHRoZSBidXR0b24gaXMgcmVzaXplZCAod2hpY2ggaGFzIHRvIGhhcHBlbiBhZnRlciBub2RlIGNyZWF0aW9uKVxyXG4gICAgICAgIGNvbnN0IHdhc0xheW91dEJsb2NrZWQgPSB0aGlzLmJsb2NrTGF5b3V0O1xyXG4gICAgICAgIGlmICghd2FzTGF5b3V0QmxvY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGF5b3V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyLmFkZENvbnRyb2woYnV0dG9uKTtcclxuXHJcbiAgICAgICAgYnV0dG9uLmlzQmFja3BsYXRlVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIGJ1dHRvbi5zY2FsaW5nLnNjYWxlSW5QbGFjZShUb3VjaEhvbG9ncmFwaGljTWVudS5NRU5VX0JVVFRPTl9TQ0FMRSk7XHJcblxyXG4gICAgICAgIC8vIFVuYmxvY2tpbmcgdGhlIGxheW91dCB0cmlnZ2VycyB0aGUgcGVuZGluZyBsYXlvdXQgdXBkYXRlIHRoYXQgdXNlcyB0aGUgc2l6ZSBvZiB0aGUgYnV0dG9ucyB0byBkZXRlcm1pbmUgdGhlIHNpemUgb2YgdGhlIGJhY2tpbmcgbWVzaFxyXG4gICAgICAgIGlmICghd2FzTGF5b3V0QmxvY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGF5b3V0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5LiBJdCBpcyBpbmhlcml0ZWQgZnJvbSBgQ29udGFpbmVyM0RgLlxyXG4gICAgICogUGxlYXNlIHVzZSBgYWRkQnV0dG9uYCBpbnN0ZWFkLlxyXG4gICAgICogQHBhcmFtIF9jb250cm9sIHRoZSBjb250cm9sIHRvIGFkZFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgY29udGFpbmVyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBhZGRDb250cm9sKF9jb250cm9sOiBDb250cm9sM0QpOiBDb250YWluZXIzRCB7XHJcbiAgICAgICAgTG9nZ2VyLldhcm4oXCJUb3VjaEhvbG9ncmFwaGljTWVudSBjYW4gb25seSBjb250YWluIGJ1dHRvbnMuIFBsZWFzZSB1c2UgdGhlIG1ldGhvZCBgYWRkQnV0dG9uYCBpbnN0ZWFkLlwiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNwb3NlcyB0aGUgbWVudVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpIHtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2hvc3Qub25QaWNrZWRQb2ludENoYW5nZWRPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9waWNrZWRQb2ludE9ic2VydmVyKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgdHlwZSB7IFRyYW5zZm9ybU5vZGUgfSBmcm9tIFwiY29yZS9NZXNoZXMvdHJhbnNmb3JtTm9kZVwiO1xyXG5pbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuXHJcbmltcG9ydCB7IFRvdWNoQnV0dG9uM0QgfSBmcm9tIFwiLi90b3VjaEJ1dHRvbjNEXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBjcmVhdGUgYW4gaW50ZXJhY3RhYmxlIG9iamVjdC4gSXQncyBhIHRvdWNoYWJsZSAzRCBidXR0b24gdXNpbmcgYSBtZXNoIGNvbWluZyBmcm9tIHRoZSBjdXJyZW50IHNjZW5lXHJcbiAqIEBzaW5jZSA1LjAuMFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRvdWNoTWVzaEJ1dHRvbjNEIGV4dGVuZHMgVG91Y2hCdXR0b24zRCB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgX2N1cnJlbnRNZXNoOiBNZXNoO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyAzRCBidXR0b24gYmFzZWQgb24gYSBtZXNoXHJcbiAgICAgKiBAcGFyYW0gbWVzaCBtZXNoIHRvIGJlY29tZSBhIDNEIGJ1dHRvbi4gQnkgZGVmYXVsdCB0aGlzIGlzIGFsc28gdGhlIG1lc2ggZm9yIG5lYXIgaW50ZXJhY3Rpb24gY29sbGlzaW9uIGNoZWNraW5nXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBkZWZpbmVzIHRoZSBjb250cm9sIG5hbWVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzaDogTWVzaCwgbmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG5hbWUsIG1lc2gpO1xyXG5cclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVzaCA9IG1lc2g7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFByb3ZpZGVzIGEgZGVmYXVsdCBiZWhhdmlvciBvbiBob3Zlci9vdXQgJiB1cC9kb3duXHJcbiAgICAgICAgICogT3ZlcnJpZGUgdGhvc2UgZnVuY3Rpb24gdG8gY3JlYXRlIHlvdXIgb3duIGRlc2lyZWQgYmVoYXZpb3Igc3BlY2lmaWMgdG8geW91ciBtZXNoXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wb2ludGVyRW50ZXJBbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tZXNoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tZXNoLnNjYWxpbmcuc2NhbGVJblBsYWNlKDEuMSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wb2ludGVyT3V0QW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubWVzaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubWVzaC5zY2FsaW5nLnNjYWxlSW5QbGFjZSgxLjAgLyAxLjEpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlckRvd25BbmltYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tZXNoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tZXNoLnNjYWxpbmcuc2NhbGVJblBsYWNlKDAuOTUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnRlclVwQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubWVzaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubWVzaC5zY2FsaW5nLnNjYWxlSW5QbGFjZSgxLjAgLyAwLjk1KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfZ2V0VHlwZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJUb3VjaE1lc2hCdXR0b24zRFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1lc2ggYXNzb2NpYXRpb25cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfY3JlYXRlTm9kZSgpOiBUcmFuc2Zvcm1Ob2RlIHtcclxuICAgICAgICB0aGlzLl9jdXJyZW50TWVzaC5nZXRDaGlsZE1lc2hlcygpLmZvckVhY2goKG1lc2gpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faW5qZWN0R1VJM0RSZXNlcnZlZERhdGFTdG9yZShtZXNoKS5jb250cm9sID0gdGhpcztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRNZXNoO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfYWZmZWN0TWF0ZXJpYWwobWVzaDogQWJzdHJhY3RNZXNoKSB7fVxyXG59XHJcbiIsImltcG9ydCB7IFRvb2xzIH0gZnJvbSBcImNvcmUvTWlzYy90b29sc1wiO1xyXG5pbXBvcnQgeyBNYXRyaXgsIFZlY3RvcjMsIFRtcFZlY3RvcnMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IGludCB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcblxyXG5pbXBvcnQgeyBDb250YWluZXIzRCB9IGZyb20gXCIuL2NvbnRhaW5lcjNEXCI7XHJcbmltcG9ydCB0eXBlIHsgQ29udHJvbDNEIH0gZnJvbSBcIi4vY29udHJvbDNEXCI7XHJcblxyXG4vKipcclxuICogQWJzdHJhY3QgY2xhc3MgdXNlZCB0byBjcmVhdGUgYSBjb250YWluZXIgcGFuZWwgZGVwbG95ZWQgb24gdGhlIHN1cmZhY2Ugb2YgYSB2b2x1bWVcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWb2x1bWVCYXNlZFBhbmVsIGV4dGVuZHMgQ29udGFpbmVyM0Qge1xyXG4gICAgcHJpdmF0ZSBfY29sdW1ucyA9IDEwO1xyXG4gICAgcHJpdmF0ZSBfcm93cyA9IDA7XHJcbiAgICBwcml2YXRlIF9yb3dUaGVuQ29sdW0gPSB0cnVlO1xyXG5cclxuICAgIHByaXZhdGUgX29yaWVudGF0aW9uID0gQ29udGFpbmVyM0QuRkFDRU9SSUdJTl9PUklFTlRBVElPTjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX2NlbGxXaWR0aDogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIF9jZWxsSGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGRpc3RhbmNlIGJldHdlZW4gZWxlbWVudHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hcmdpbiA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG9yaWVudGF0aW9uIHRvIGFwcGx5IHRvIGFsbCBjb250cm9scyAoQkFCWUxPTi5Db250YWluZXIzRC5GYWNlT3JpZ2luUmV2ZXJzZWRPcmllbnRhdGlvbiBieSBkZWZhdWx0KVxyXG4gICAgICogfCBWYWx1ZSB8IFR5cGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gfFxyXG4gICAgICogfCAtLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0gfFxyXG4gICAgICogfCAwICAgICB8IFVOU0VUX09SSUVOVEFUSU9OICAgICAgICAgICAgICAgICAgIHwgIENvbnRyb2wgcm90YXRpb24gd2lsbCByZW1haW4gdW5jaGFuZ2VkIHxcclxuICAgICAqIHwgMSAgICAgfCBGQUNFT1JJR0lOX09SSUVOVEFUSU9OICAgICAgICAgICAgICB8ICBDb250cm9sIHdpbGwgcm90YXRlIHRvIG1ha2UgaXQgbG9vayBhdCBzcGhlcmUgY2VudHJhbCBheGlzIHxcclxuICAgICAqIHwgMiAgICAgfCBGQUNFT1JJR0lOUkVWRVJTRURfT1JJRU5UQVRJT04gICAgICB8ICBDb250cm9sIHdpbGwgcm90YXRlIHRvIG1ha2UgaXQgbG9vayBiYWNrIGF0IHNwaGVyZSBjZW50cmFsIGF4aXMgfFxyXG4gICAgICogfCAzICAgICB8IEZBQ0VGT1JXQVJEX09SSUVOVEFUSU9OICAgICAgICAgICAgIHwgIENvbnRyb2wgd2lsbCByb3RhdGUgdG8gbG9vayBhdCB6IGF4aXMgKDAsIDAsIDEpIHxcclxuICAgICAqIHwgNCAgICAgfCBGQUNFRk9SV0FSRFJFVkVSU0VEX09SSUVOVEFUSU9OICAgICB8ICBDb250cm9sIHdpbGwgcm90YXRlIHRvIGxvb2sgYXQgbmVnYXRpdmUgeiBheGlzICgwLCAwLCAtMSkgfFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IG9yaWVudGF0aW9uKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yaWVudGF0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgb3JpZW50YXRpb24odmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9vcmllbnRhdGlvbiA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgVG9vbHMuU2V0SW1tZWRpYXRlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fYXJyYW5nZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG51bWJlciBvZiBjb2x1bW5zIHJlcXVlc3RlZCAoMTAgYnkgZGVmYXVsdCkuXHJcbiAgICAgKiBUaGUgcGFuZWwgd2lsbCBhdXRvbWF0aWNhbGx5IGNvbXB1dGUgdGhlIG51bWJlciBvZiByb3dzIGJhc2VkIG9uIG51bWJlciBvZiBjaGlsZCBjb250cm9scy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBjb2x1bW5zKCk6IGludCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBjb2x1bW5zKHZhbHVlOiBpbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fY29sdW1ucyA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29sdW1ucyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3Jvd1RoZW5Db2x1bSA9IHRydWU7XHJcblxyXG4gICAgICAgIFRvb2xzLlNldEltbWVkaWF0ZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FycmFuZ2VDaGlsZHJlbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgdGhlIG51bWJlciBvZiByb3dzIHJlcXVlc3RlZC5cclxuICAgICAqIFRoZSBwYW5lbCB3aWxsIGF1dG9tYXRpY2FsbHkgY29tcHV0ZSB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgYmFzZWQgb24gbnVtYmVyIG9mIGNoaWxkIGNvbnRyb2xzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHJvd3MoKTogaW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcm93cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHJvd3ModmFsdWU6IGludCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9yb3dzID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9yb3dzID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fcm93VGhlbkNvbHVtID0gZmFsc2U7XHJcblxyXG4gICAgICAgIFRvb2xzLlNldEltbWVkaWF0ZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FycmFuZ2VDaGlsZHJlbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBuZXcgVm9sdW1lQmFzZWRQYW5lbFxyXG4gICAgICogQHBhcmFtIG5hbWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2FycmFuZ2VDaGlsZHJlbigpIHtcclxuICAgICAgICB0aGlzLl9jZWxsV2lkdGggPSAwO1xyXG4gICAgICAgIHRoaXMuX2NlbGxIZWlnaHQgPSAwO1xyXG4gICAgICAgIGxldCByb3dzID0gMDtcclxuICAgICAgICBsZXQgY29sdW1ucyA9IDA7XHJcbiAgICAgICAgbGV0IGNvbnRyb2xDb3VudCA9IDA7XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRJbnZlcnNlV29ybGQgPSBNYXRyaXguSW52ZXJ0KHRoaXMubm9kZSEuY29tcHV0ZVdvcmxkTWF0cml4KHRydWUpKTtcclxuXHJcbiAgICAgICAgLy8gTWVhc3VyZVxyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKCFjaGlsZC5tZXNoKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udHJvbENvdW50Kys7XHJcbiAgICAgICAgICAgIGNoaWxkLm1lc2guY29tcHV0ZVdvcmxkTWF0cml4KHRydWUpO1xyXG4gICAgICAgICAgICAvLyAgIGNoaWxkLm1lc2guZ2V0V29ybGRNYXRyaXgoKS5tdWx0aXBseVRvUmVmKGN1cnJlbnRJbnZlcnNlV29ybGQsIFRtcC5NYXRyaXhbMF0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYm91bmRpbmdCb3ggPSBjaGlsZC5tZXNoLmdldEhpZXJhcmNoeUJvdW5kaW5nVmVjdG9ycygpO1xyXG4gICAgICAgICAgICBjb25zdCBleHRlbmRTaXplID0gVG1wVmVjdG9ycy5WZWN0b3IzWzBdO1xyXG4gICAgICAgICAgICBjb25zdCBkaWZmID0gVG1wVmVjdG9ycy5WZWN0b3IzWzFdO1xyXG5cclxuICAgICAgICAgICAgYm91bmRpbmdCb3gubWF4LnN1YnRyYWN0VG9SZWYoYm91bmRpbmdCb3gubWluLCBkaWZmKTtcclxuXHJcbiAgICAgICAgICAgIGRpZmYuc2NhbGVJblBsYWNlKDAuNSk7XHJcblxyXG4gICAgICAgICAgICBWZWN0b3IzLlRyYW5zZm9ybU5vcm1hbFRvUmVmKGRpZmYsIGN1cnJlbnRJbnZlcnNlV29ybGQsIGV4dGVuZFNpemUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fY2VsbFdpZHRoID0gTWF0aC5tYXgodGhpcy5fY2VsbFdpZHRoLCBleHRlbmRTaXplLnggKiAyKTtcclxuICAgICAgICAgICAgdGhpcy5fY2VsbEhlaWdodCA9IE1hdGgubWF4KHRoaXMuX2NlbGxIZWlnaHQsIGV4dGVuZFNpemUueSAqIDIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY2VsbFdpZHRoICs9IHRoaXMubWFyZ2luICogMjtcclxuICAgICAgICB0aGlzLl9jZWxsSGVpZ2h0ICs9IHRoaXMubWFyZ2luICogMjtcclxuXHJcbiAgICAgICAgLy8gQXJyYW5nZVxyXG4gICAgICAgIGlmICh0aGlzLl9yb3dUaGVuQ29sdW0pIHtcclxuICAgICAgICAgICAgY29sdW1ucyA9IHRoaXMuX2NvbHVtbnM7XHJcbiAgICAgICAgICAgIHJvd3MgPSBNYXRoLmNlaWwoY29udHJvbENvdW50IC8gdGhpcy5fY29sdW1ucyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcm93cyA9IHRoaXMuX3Jvd3M7XHJcbiAgICAgICAgICAgIGNvbHVtbnMgPSBNYXRoLmNlaWwoY29udHJvbENvdW50IC8gdGhpcy5fcm93cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzdGFydE9mZnNldFggPSBjb2x1bW5zICogMC41ICogdGhpcy5fY2VsbFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0WSA9IHJvd3MgKiAwLjUgKiB0aGlzLl9jZWxsSGVpZ2h0O1xyXG4gICAgICAgIGNvbnN0IG5vZGVHcmlkID0gW107XHJcbiAgICAgICAgbGV0IGNlbGxDb3VudGVyID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3Jvd1RoZW5Db2x1bSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCByID0gMDsgciA8IHJvd3M7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjb2x1bW5zOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlR3JpZC5wdXNoKG5ldyBWZWN0b3IzKGMgKiB0aGlzLl9jZWxsV2lkdGggLSBzdGFydE9mZnNldFggKyB0aGlzLl9jZWxsV2lkdGggLyAyLCByICogdGhpcy5fY2VsbEhlaWdodCAtIHN0YXJ0T2Zmc2V0WSArIHRoaXMuX2NlbGxIZWlnaHQgLyAyLCAwKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbENvdW50ZXIrKztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbENvdW50ZXIgPiBjb250cm9sQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjb2x1bW5zOyBjKyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgcm93czsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZUdyaWQucHVzaChuZXcgVmVjdG9yMyhjICogdGhpcy5fY2VsbFdpZHRoIC0gc3RhcnRPZmZzZXRYICsgdGhpcy5fY2VsbFdpZHRoIC8gMiwgciAqIHRoaXMuX2NlbGxIZWlnaHQgLSBzdGFydE9mZnNldFkgKyB0aGlzLl9jZWxsSGVpZ2h0IC8gMiwgMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxDb3VudGVyKys7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxDb3VudGVyID4gY29udHJvbENvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2VsbENvdW50ZXIgPSAwO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKCFjaGlsZC5tZXNoKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fbWFwR3JpZE5vZGUoY2hpbGQsIG5vZGVHcmlkW2NlbGxDb3VudGVyXSk7XHJcblxyXG4gICAgICAgICAgICBjZWxsQ291bnRlcisrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZmluYWxQcm9jZXNzaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIENoaWxkIGNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgdGhpcyBmdW5jdGlvbiB0byBwcm92aWRlIGNvcnJlY3QgY29udHJvbCBwb3NpdGlvbmluZyAqL1xyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9tYXBHcmlkTm9kZShjb250cm9sOiBDb250cm9sM0QsIG5vZGVQb3NpdGlvbjogVmVjdG9yMyk6IHZvaWQ7XHJcblxyXG4gICAgLyoqIENoaWxkIGNsYXNzZXMgY2FuIGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uIHRvIHByb3ZpZGUgYWRkaXRpb25hbCBwcm9jZXNzaW5nICovXHJcbiAgICBwcm90ZWN0ZWQgX2ZpbmFsUHJvY2Vzc2luZygpIHt9XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcbmltcG9ydCB7IENyZWF0ZUJveCB9IGZyb20gXCJjb3JlL01lc2hlcy9CdWlsZGVycy9ib3hCdWlsZGVyXCI7XHJcbmltcG9ydCB7IFRyYW5zZm9ybU5vZGUgfSBmcm9tIFwiY29yZS9NZXNoZXMvdHJhbnNmb3JtTm9kZVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHsgSGFuZGxlTWF0ZXJpYWwgfSBmcm9tIFwiLi4vbWF0ZXJpYWxzL2hhbmRsZS9oYW5kbGVNYXRlcmlhbFwiO1xyXG5pbXBvcnQgdHlwZSB7IFNsYXRlR2l6bW8gfSBmcm9tIFwiLi9zbGF0ZUdpem1vXCI7XHJcbmltcG9ydCB7IEJhc2VTaXhEb2ZEcmFnQmVoYXZpb3IgfSBmcm9tIFwiY29yZS9CZWhhdmlvcnMvTWVzaGVzL2Jhc2VTaXhEb2ZEcmFnQmVoYXZpb3JcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgT2JzZXJ2ZXIgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuXHJcbi8qKlxyXG4gKiBTdGF0ZSBvZiB0aGUgaGFuZGxlIHJlZ2FyZGluZyB1c2VyIGludGVyYWN0aW9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW51bSBIYW5kbGVTdGF0ZSB7XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSBpcyBpZGxlXHJcbiAgICAgKi9cclxuICAgIElETEUgPSAwLFxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgaXMgaG92ZXJlZFxyXG4gICAgICovXHJcbiAgICBIT1ZFUiA9IDEsXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSBpcyBkcmFnZ2VkXHJcbiAgICAgKi9cclxuICAgIERSQUcgPSAyLFxyXG59XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgU2xhdGVHaXptbyBoYW5kbGVzXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR2l6bW9IYW5kbGUge1xyXG4gICAgcHJvdGVjdGVkIF9zY2VuZTogU2NlbmU7XHJcbiAgICBwcm90ZWN0ZWQgX3N0YXRlOiBIYW5kbGVTdGF0ZSA9IEhhbmRsZVN0YXRlLklETEU7XHJcbiAgICBwcm90ZWN0ZWQgX21hdGVyaWFsczogSGFuZGxlTWF0ZXJpYWxbXSA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgX2RyYWdTdGFydE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxhbnk+PjtcclxuICAgIHByaXZhdGUgX2RyYWdnaW5nT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPGFueT4+O1xyXG4gICAgcHJpdmF0ZSBfZHJhZ0VuZE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxhbnk+PjtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBfZHJhZ0JlaGF2aW9yOiBCYXNlU2l4RG9mRHJhZ0JlaGF2aW9yO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGhhbmRsZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHN0YXRlKCk6IEhhbmRsZVN0YXRlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZ2l6bW86IFNsYXRlR2l6bW87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBnaXptbyBjYXJyeWluZyB0aGlzIGhhbmRsZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGdpem1vKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9naXptbztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgaG92ZXIgc3RhdGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCBob3Zlcih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSB8PSBIYW5kbGVTdGF0ZS5IT1ZFUjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSAmPSB+SGFuZGxlU3RhdGUuSE9WRVI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl91cGRhdGVNYXRlcmlhbCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIGRyYWcgc3RhdGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldCBkcmFnKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlIHw9IEhhbmRsZVN0YXRlLkRSQUc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgJj0gfkhhbmRsZVN0YXRlLkRSQUc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl91cGRhdGVNYXRlcmlhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTm9kZSBvZiB0aGlzIGhhbmRsZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbm9kZTogVHJhbnNmb3JtTm9kZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBoYW5kbGUgZm9yIGEgU2xhdGVHaXptb1xyXG4gICAgICogQHBhcmFtIGdpem1vIGFzc29jaWF0ZWQgU2xhdGVHaXptb1xyXG4gICAgICogQHBhcmFtIHNjZW5lIHNjZW5lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGdpem1vOiBTbGF0ZUdpem1vLCBzY2VuZTogU2NlbmUpIHtcclxuICAgICAgICB0aGlzLl9zY2VuZSA9IHNjZW5lO1xyXG4gICAgICAgIHRoaXMuX2dpem1vID0gZ2l6bW87XHJcblxyXG4gICAgICAgIHRoaXMubm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xyXG4gICAgICAgIHRoaXMubm9kZS5yZXNlcnZlZERhdGFTdG9yZSA9IHtcclxuICAgICAgICAgICAgaGFuZGxlOiB0aGlzLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9jcmVhdGVNYXRlcmlhbChwb3NpdGlvbk9mZnNldD86IFZlY3RvcjMpIHtcclxuICAgICAgICBjb25zdCBtYXQgPSBuZXcgSGFuZGxlTWF0ZXJpYWwoXCJoYW5kbGVcIiwgdGhpcy5fc2NlbmUpO1xyXG4gICAgICAgIGlmIChwb3NpdGlvbk9mZnNldCkge1xyXG4gICAgICAgICAgICBtYXQuX3Bvc2l0aW9uT2Zmc2V0ID0gcG9zaXRpb25PZmZzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlTWF0ZXJpYWwoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcclxuICAgICAgICBmb3IgKGNvbnN0IG1hdCBvZiB0aGlzLl9tYXRlcmlhbHMpIHtcclxuICAgICAgICAgICAgbWF0LmhvdmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG1hdC5kcmFnID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RhdGUgJiBIYW5kbGVTdGF0ZS5EUkFHKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWF0IG9mIHRoaXMuX21hdGVyaWFscykge1xyXG4gICAgICAgICAgICAgICAgbWF0LmRyYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSAmIEhhbmRsZVN0YXRlLkhPVkVSKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWF0IG9mIHRoaXMuX21hdGVyaWFscykge1xyXG4gICAgICAgICAgICAgICAgbWF0LmhvdmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEJpbmRzIGNhbGxiYWNrcyBmcm9tIGRyYWdnaW5nIGludGVyYWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gZHJhZ1N0YXJ0Rm4gRnVuY3Rpb24gdG8gY2FsbCBvbiBkcmFnIHN0YXJ0XHJcbiAgICAgKiBAcGFyYW0gZHJhZ0ZuIEZ1bmN0aW9uIHRvIGNhbGwgb24gZHJhZ1xyXG4gICAgICogQHBhcmFtIGRyYWdFbmRGbiBGdW5jdGlvbiB0byBjYWxsIG9uIGRyYWcgZW5kXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXREcmFnQmVoYXZpb3IoZHJhZ1N0YXJ0Rm46IChldmVudDogeyBwb3NpdGlvbjogVmVjdG9yMyB9KSA9PiB2b2lkLCBkcmFnRm46IChldmVudDogeyBwb3NpdGlvbjogVmVjdG9yMyB9KSA9PiB2b2lkLCBkcmFnRW5kRm46ICgpID0+IHZvaWQpIHtcclxuICAgICAgICBjb25zdCBkcmFnQmVoYXZpb3IgPSBuZXcgQmFzZVNpeERvZkRyYWdCZWhhdmlvcigpO1xyXG5cclxuICAgICAgICB0aGlzLl9kcmFnQmVoYXZpb3IgPSBkcmFnQmVoYXZpb3I7XHJcblxyXG4gICAgICAgIHRoaXMuX2RyYWdTdGFydE9ic2VydmVyID0gZHJhZ0JlaGF2aW9yLm9uRHJhZ1N0YXJ0T2JzZXJ2YWJsZS5hZGQoZHJhZ1N0YXJ0Rm4pO1xyXG4gICAgICAgIHRoaXMuX2RyYWdnaW5nT2JzZXJ2ZXIgPSBkcmFnQmVoYXZpb3Iub25EcmFnT2JzZXJ2YWJsZS5hZGQoZHJhZ0ZuKTtcclxuICAgICAgICB0aGlzLl9kcmFnRW5kT2JzZXJ2ZXIgPSBkcmFnQmVoYXZpb3Iub25EcmFnRW5kT2JzZXJ2YWJsZS5hZGQoZHJhZ0VuZEZuKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZHJhZ0JlaGF2aW9yLmF0dGFjaCh0aGlzLm5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgbWVzaGVzIGFuZCBwYXJlbnQgbm9kZSBvZiB0aGUgaGFuZGxlXHJcbiAgICAgKiBTaG91bGQgYmUgb3ZlcnJpZGRlbiBieSBjaGlsZCBjbGFzc2VzXHJcbiAgICAgKiBAcmV0dXJucyBjcmVhdGVkIG5vZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IGNyZWF0ZU5vZGUoKTogVHJhbnNmb3JtTm9kZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERpc3Bvc2VzIHRoZSBoYW5kbGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fZHJhZ0JlaGF2aW9yLm9uRHJhZ1N0YXJ0T2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fZHJhZ1N0YXJ0T2JzZXJ2ZXIpO1xyXG4gICAgICAgIHRoaXMuX2RyYWdCZWhhdmlvci5vbkRyYWdPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9kcmFnZ2luZ09ic2VydmVyKTtcclxuICAgICAgICB0aGlzLl9kcmFnQmVoYXZpb3Iub25EcmFnRW5kT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fZHJhZ0VuZE9ic2VydmVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZHJhZ0JlaGF2aW9yLmRldGFjaCgpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG1hdGVyaWFsIG9mIHRoaXMuX21hdGVyaWFscykge1xyXG4gICAgICAgICAgICBtYXRlcmlhbC5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubm9kZS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaWRlIGhhbmRsZSBjbGFzcyB0aGF0IHJvdGF0ZXMgdGhlIHNsYXRlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2lkZUhhbmRsZSBleHRlbmRzIEdpem1vSGFuZGxlIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgbWVzaGVzIGFuZCBwYXJlbnQgbm9kZSBvZiB0aGUgaGFuZGxlXHJcbiAgICAgKiBAcmV0dXJucyBjcmVhdGVkIG5vZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNyZWF0ZU5vZGUoKSB7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgc2ltcGxlIHZlcnRpY2FsIHJlY3RhbmdsZVxyXG4gICAgICAgIGNvbnN0IHZlcnRpY2FsQm94ID0gQ3JlYXRlQm94KFwic2lkZVZlcnRcIiwgeyB3aWR0aDogMSwgaGVpZ2h0OiAxMCwgZGVwdGg6IDAuMSB9LCB0aGlzLl9zY2VuZSk7XHJcbiAgICAgICAgY29uc3Qgc2lkZU5vZGUgPSBuZXcgVHJhbnNmb3JtTm9kZShcInNpZGVcIiwgdGhpcy5fc2NlbmUpO1xyXG4gICAgICAgIHZlcnRpY2FsQm94LnBhcmVudCA9IHNpZGVOb2RlO1xyXG5cclxuICAgICAgICBjb25zdCBtYXQgPSB0aGlzLl9jcmVhdGVNYXRlcmlhbCgpO1xyXG4gICAgICAgIHZlcnRpY2FsQm94Lm1hdGVyaWFsID0gbWF0O1xyXG4gICAgICAgIHZlcnRpY2FsQm94LmlzTmVhckdyYWJiYWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbWF0ZXJpYWxzLnB1c2gobWF0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNpZGVOb2RlO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ29ybmVyIGhhbmRsZSB0aGF0IHJlc2l6ZXMgdGhlIHNsYXRlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29ybmVySGFuZGxlIGV4dGVuZHMgR2l6bW9IYW5kbGUge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHRoZSBtZXNoZXMgYW5kIHBhcmVudCBub2RlIG9mIHRoZSBoYW5kbGVcclxuICAgICAqIEByZXR1cm5zIGNyZWF0ZWQgbm9kZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY3JlYXRlTm9kZSgpIHtcclxuICAgICAgICAvLyBDcmVhdGUgMiBib3hlcyBtYWtpbmcgYSBib3R0b20gbGVmdCBjb3JuZXJcclxuICAgICAgICBjb25zdCBob3Jpem9udGFsQm94ID0gQ3JlYXRlQm94KFwiYW5nbGVIb3JcIiwgeyB3aWR0aDogMywgaGVpZ2h0OiAxLCBkZXB0aDogMC4xIH0sIHRoaXMuX3NjZW5lKTtcclxuICAgICAgICBjb25zdCB2ZXJ0aWNhbEJveCA9IENyZWF0ZUJveChcImFuZ2xlVmVydFwiLCB7IHdpZHRoOiAxLCBoZWlnaHQ6IDMsIGRlcHRoOiAwLjEgfSwgdGhpcy5fc2NlbmUpO1xyXG5cclxuICAgICAgICBjb25zdCBhbmdsZU5vZGUgPSBuZXcgVHJhbnNmb3JtTm9kZShcImFuZ2xlXCIsIHRoaXMuX3NjZW5lKTtcclxuICAgICAgICBob3Jpem9udGFsQm94LnBhcmVudCA9IGFuZ2xlTm9kZTtcclxuICAgICAgICB2ZXJ0aWNhbEJveC5wYXJlbnQgPSBhbmdsZU5vZGU7XHJcblxyXG4gICAgICAgIGhvcml6b250YWxCb3gubWF0ZXJpYWwgPSB0aGlzLl9jcmVhdGVNYXRlcmlhbChuZXcgVmVjdG9yMygxLCAwLCAwKSk7XHJcbiAgICAgICAgdmVydGljYWxCb3gubWF0ZXJpYWwgPSB0aGlzLl9jcmVhdGVNYXRlcmlhbChuZXcgVmVjdG9yMygwLCAxLCAwKSk7XHJcbiAgICAgICAgdmVydGljYWxCb3guaXNOZWFyR3JhYmJhYmxlID0gdHJ1ZTtcclxuICAgICAgICBob3Jpem9udGFsQm94LmlzTmVhckdyYWJiYWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuX21hdGVyaWFscy5wdXNoKGhvcml6b250YWxCb3gubWF0ZXJpYWwgYXMgSGFuZGxlTWF0ZXJpYWwpO1xyXG4gICAgICAgIHRoaXMuX21hdGVyaWFscy5wdXNoKHZlcnRpY2FsQm94Lm1hdGVyaWFsIGFzIEhhbmRsZU1hdGVyaWFsKTtcclxuICAgICAgICByZXR1cm4gYW5nbGVOb2RlO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCAqIGZyb20gXCIuL3NsYXRlR2l6bW9cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZ2l6bW9IYW5kbGVcIjtcclxuIiwiaW1wb3J0IHsgR2l6bW8gfSBmcm9tIFwiY29yZS9HaXptb3MvZ2l6bW9cIjtcclxuaW1wb3J0IHsgRXBzaWxvbiB9IGZyb20gXCJjb3JlL01hdGhzL21hdGguY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IE1hdHJpeCwgUXVhdGVybmlvbiwgVG1wVmVjdG9ycywgVmVjdG9yMyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5pbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHsgVHJhbnNmb3JtTm9kZSB9IGZyb20gXCJjb3JlL01lc2hlcy90cmFuc2Zvcm1Ob2RlXCI7XHJcbmltcG9ydCB0eXBlIHsgT2JzZXJ2ZXIgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgUGl2b3RUb29scyB9IGZyb20gXCJjb3JlL01pc2MvcGl2b3RUb29sc1wiO1xyXG5pbXBvcnQgdHlwZSB7IFV0aWxpdHlMYXllclJlbmRlcmVyIH0gZnJvbSBcImNvcmUvUmVuZGVyaW5nL3V0aWxpdHlMYXllclJlbmRlcmVyXCI7XHJcbmltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5cclxuaW1wb3J0IHR5cGUgeyBIb2xvZ3JhcGhpY1NsYXRlIH0gZnJvbSBcIi4uL2NvbnRyb2xzL2hvbG9ncmFwaGljU2xhdGVcIjtcclxuaW1wb3J0IHR5cGUgeyBHaXptb0hhbmRsZSB9IGZyb20gXCIuL2dpem1vSGFuZGxlXCI7XHJcbmltcG9ydCB7IENvcm5lckhhbmRsZSwgU2lkZUhhbmRsZSB9IGZyb20gXCIuL2dpem1vSGFuZGxlXCI7XHJcblxyXG4vLyBNYXNrIGNvbnRhaW5zIHRoZSBpbmZsdWVuY2Ugb2YgdGhlIGRyYWcgb2Zmc2V0IHZlY3RvcnMgb24gZGltZW5zaW9ucyBvciBvcmlnaW4gb2YgdGhlIHNsYXRlXHJcbi8vIE1hc2sgdmVjdG9yIGlzIG11bHRpcGxpZWQgdG8gdGhlIG9mZnNldCB2ZWN0b3JcclxudHlwZSBIYW5kbGVNYXNrcyA9IHtcclxuICAgIGRpbWVuc2lvbnM6IFZlY3RvcjM7XHJcbiAgICBvcmlnaW46IFZlY3RvcjM7XHJcbn07XHJcblxyXG4vKipcclxuICogR2l6bW8gdG8gcmVzaXplIDJEIHNsYXRlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNsYXRlR2l6bW8gZXh0ZW5kcyBHaXptbyB7XHJcbiAgICBwcml2YXRlIF9ib3VuZGluZ0RpbWVuc2lvbnMgPSBuZXcgVmVjdG9yMygwLCAwLCAwKTtcclxuICAgIHByaXZhdGUgX3BpY2tlZFBvaW50T2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPE51bGxhYmxlPEFic3RyYWN0TWVzaD4+PjtcclxuICAgIHByaXZhdGUgX3JlbmRlck9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxTY2VuZT4+ID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIF90bXBRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcclxuICAgIHByaXZhdGUgX3RtcFZlY3RvciA9IG5ldyBWZWN0b3IzKDAsIDAsIDApO1xyXG5cclxuICAgIC8vIE9yZGVyZWQgYmwsIGJyLCB0ciwgdGxcclxuICAgIHByaXZhdGUgX2Nvcm5lcnM6IENvcm5lckhhbmRsZVtdID0gW107XHJcbiAgICAvLyBPcmRlcmVkIGxlZnQsIGJvdHRvbSwgcmlnaHQsIHRvcFxyXG4gICAgcHJpdmF0ZSBfc2lkZXM6IFNpZGVIYW5kbGVbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfaGFuZGxlc1BhcmVudDogVHJhbnNmb3JtTm9kZTtcclxuICAgIHByaXZhdGUgX2hhbmRsZUhvdmVyZWQ6IE51bGxhYmxlPEdpem1vSGFuZGxlPjtcclxuICAgIHByaXZhdGUgX2hhbmRsZURyYWdnZWQ6IE51bGxhYmxlPEdpem1vSGFuZGxlPjtcclxuXHJcbiAgICBwcml2YXRlIF9ib3VuZGluZ0JveEdpem1vID0ge1xyXG4gICAgICAgIG1pbjogbmV3IFZlY3RvcjMoKSxcclxuICAgICAgICBtYXg6IG5ldyBWZWN0b3IzKCksXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsdWUgd2UgdXNlIHRvIG9mZnNldCBoYW5kbGVzIGZyb20gbWVzaFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9tYXJnaW4gPSAwLjM1O1xyXG4gICAgcHJpdmF0ZSBfaGFuZGxlU2l6ZSA9IDAuMDc1O1xyXG4gICAgcHJpdmF0ZSBfYXR0YWNoZWRTbGF0ZTogTnVsbGFibGU8SG9sb2dyYXBoaWNTbGF0ZT4gPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfZXhpc3RpbmdTbGF0ZVNjYWxlID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIC8qKlxyXG4gICAgICogSWYgc2V0LCB0aGUgaGFuZGxlcyB3aWxsIGluY3JlYXNlIGluIHNpemUgYmFzZWQgb24gdGhlIGRpc3RhbmNlIGF3YXkgZnJvbSB0aGUgY2FtZXJhIHRvIGhhdmUgYSBjb25zaXN0ZW50IHNjcmVlbiBzaXplIChEZWZhdWx0OiB0cnVlKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZml4ZWRTY3JlZW5TaXplID0gZmFsc2U7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBkaXN0YW5jZSBhd2F5IGZyb20gdGhlIG9iamVjdCB3aGljaCB0aGUgZHJhZ2dhYmxlIG1lc2hlcyBzaG91bGQgYXBwZWFyIHdvcmxkIHNpemVkIHdoZW4gZml4ZWRTY3JlZW5TaXplIGlzIHNldCB0byB0cnVlIChkZWZhdWx0OiAxMClcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpeGVkU2NyZWVuU2l6ZURpc3RhbmNlRmFjdG9yID0gMTA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2xhdGUgYXR0YWNoZWQgdG8gdGhpcyBnaXptb1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IGF0dGFjaGVkU2xhdGUoY29udHJvbDogTnVsbGFibGU8SG9sb2dyYXBoaWNTbGF0ZT4pIHtcclxuICAgICAgICBpZiAoY29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjaGVkTWVzaCA9IGNvbnRyb2wubWVzaDtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVCb3VuZGluZ0JveCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcGlja2VkUG9pbnRPYnNlcnZlciA9IGNvbnRyb2wuX2hvc3Qub25QaWNraW5nT2JzZXJ2YWJsZS5hZGQoKHBpY2tlZE1lc2gpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oYW5kbGVIb3ZlcmVkICYmICghcGlja2VkTWVzaCB8fCBwaWNrZWRNZXNoLnBhcmVudCAhPT0gdGhpcy5faGFuZGxlSG92ZXJlZC5ub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUhvdmVyZWQuaG92ZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVIb3ZlcmVkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGlja2VkTWVzaCAmJiBwaWNrZWRNZXNoLnBhcmVudCAmJiBwaWNrZWRNZXNoLnBhcmVudC5yZXNlcnZlZERhdGFTdG9yZSAmJiBwaWNrZWRNZXNoLnBhcmVudC5yZXNlcnZlZERhdGFTdG9yZS5oYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGUgPSBwaWNrZWRNZXNoLnBhcmVudC5yZXNlcnZlZERhdGFTdG9yZS5oYW5kbGUgYXMgR2l6bW9IYW5kbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZS5naXptbyA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVIb3ZlcmVkID0gaGFuZGxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVIb3ZlcmVkLmhvdmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYXR0YWNoZWRTbGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9hdHRhY2hlZFNsYXRlLl9ob3N0Lm9uUGlja2luZ09ic2VydmFibGUucmVtb3ZlKHRoaXMuX3BpY2tlZFBvaW50T2JzZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9hdHRhY2hlZFNsYXRlID0gY29udHJvbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGF0dGFjaGVkU2xhdGUoKTogTnVsbGFibGU8SG9sb2dyYXBoaWNTbGF0ZT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdHRhY2hlZFNsYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHV0aWxpdHlMYXllcj86IFV0aWxpdHlMYXllclJlbmRlcmVyKSB7XHJcbiAgICAgICAgc3VwZXIodXRpbGl0eUxheWVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY3JlYXRlTm9kZSgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlU2NhbGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyT2JzZXJ2ZXIgPSB0aGlzLmdpem1vTGF5ZXIub3JpZ2luYWxTY2VuZS5vbkJlZm9yZVJlbmRlck9ic2VydmFibGUuYWRkKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gT25seSB1cGRhdGUgdGhlIGJvdW5kaW5nIGJveCBpZiBzY2FsaW5nIGhhcyBjaGFuZ2VkXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dGFjaGVkTWVzaCAmJiAhdGhpcy5fZXhpc3RpbmdTbGF0ZVNjYWxlLmVxdWFscyh0aGlzLmF0dGFjaGVkTWVzaC5zY2FsaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCb3VuZGluZ0JveCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlTm9kZSgpIHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVzUGFyZW50ID0gbmV3IFRyYW5zZm9ybU5vZGUoXCJoYW5kbGVzUGFyZW50XCIsIHRoaXMuZ2l6bW9MYXllci51dGlsaXR5TGF5ZXJTY2VuZSk7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlc1BhcmVudC5yb3RhdGlvblF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uLklkZW50aXR5KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1hc2tzQ29ybmVycyA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uczogbmV3IFZlY3RvcjMoLTEsIC0xLCAwKSxcclxuICAgICAgICAgICAgICAgIG9yaWdpbjogbmV3IFZlY3RvcjMoMSwgMCwgMCksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IG5ldyBWZWN0b3IzKDEsIC0xLCAwKSxcclxuICAgICAgICAgICAgICAgIG9yaWdpbjogbmV3IFZlY3RvcjMoMCwgMCwgMCksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IG5ldyBWZWN0b3IzKDEsIDEsIDApLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luOiBuZXcgVmVjdG9yMygwLCAxLCAwKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uczogbmV3IFZlY3RvcjMoLTEsIDEsIDApLFxyXG4gICAgICAgICAgICAgICAgb3JpZ2luOiBuZXcgVmVjdG9yMygxLCAxLCAwKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjb3JuZXIgPSBuZXcgQ29ybmVySGFuZGxlKHRoaXMsIHRoaXMuZ2l6bW9MYXllci51dGlsaXR5TGF5ZXJTY2VuZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2Nvcm5lcnMucHVzaChjb3JuZXIpO1xyXG4gICAgICAgICAgICBjb3JuZXIubm9kZS5yb3RhdGlvbi56ID0gKE1hdGguUEkgLyAyKSAqIGk7XHJcblxyXG4gICAgICAgICAgICBjb3JuZXIubm9kZS5wYXJlbnQgPSB0aGlzLl9oYW5kbGVzUGFyZW50O1xyXG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25EcmFnQmVoYXZpb3JDb3JuZXJzKFxyXG4gICAgICAgICAgICAgICAgY29ybmVyLFxyXG4gICAgICAgICAgICAgICAgKG9yaWdpblN0YXJ0OiBWZWN0b3IzLCBkaW1lbnNpb25zU3RhcnQ6IFZlY3RvcjMsIG9mZnNldDogVmVjdG9yMywgbWFza3M6IEhhbmRsZU1hc2tzKSA9PiB0aGlzLl9tb3ZlSGFuZGxlKG9yaWdpblN0YXJ0LCBkaW1lbnNpb25zU3RhcnQsIG9mZnNldCwgbWFza3MsIHRydWUpLFxyXG4gICAgICAgICAgICAgICAgbWFza3NDb3JuZXJzW2ldXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzaWRlID0gbmV3IFNpZGVIYW5kbGUodGhpcywgdGhpcy5naXptb0xheWVyLnV0aWxpdHlMYXllclNjZW5lKTtcclxuICAgICAgICAgICAgdGhpcy5fc2lkZXMucHVzaChzaWRlKTtcclxuICAgICAgICAgICAgc2lkZS5ub2RlLnJvdGF0aW9uLnogPSAoTWF0aC5QSSAvIDIpICogaTtcclxuICAgICAgICAgICAgc2lkZS5ub2RlLnBhcmVudCA9IHRoaXMuX2hhbmRsZXNQYXJlbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnbkRyYWdCZWhhdmlvclNpZGVzKHNpZGUsIGkgJSAyID09PSAwID8gbmV3IFZlY3RvcjMoMCwgMSwgMCkgOiBuZXcgVmVjdG9yMygxLCAwLCAwKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9oYW5kbGVzUGFyZW50LnBhcmVudCA9IHRoaXMuX3Jvb3RNZXNoO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2tlZXBBc3BlY3RSYXRpbyh2ZWN0b3I6IFZlY3RvcjMsIGFzcGVjdFJhdGlvOiBudW1iZXIsIGludmVydERpYWdvbmFsOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCBheGlzID0gVG1wVmVjdG9ycy5WZWN0b3IzWzBdO1xyXG4gICAgICAgIGF4aXMuY29weUZyb21GbG9hdHMoYXNwZWN0UmF0aW8sIDEsIDApLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgIGlmIChpbnZlcnREaWFnb25hbCkge1xyXG4gICAgICAgICAgICBheGlzLnkgKj0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRvdCA9IFZlY3RvcjMuRG90KHZlY3RvciwgYXhpcyk7XHJcbiAgICAgICAgdmVjdG9yLmNvcHlGcm9tKGF4aXMpLnNjYWxlSW5QbGFjZShkb3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NsYW1wRGltZW5zaW9ucyh2ZWN0b3I6IFZlY3RvcjMsIGRpbWVuc2lvbnM6IFZlY3RvcjMsIG1hc2s6IFZlY3RvcjMsIGtlZXBBc3BlY3RSYXRpbzogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgaW1wYWN0ID0gVG1wVmVjdG9ycy5WZWN0b3IzWzBdO1xyXG4gICAgICAgIGltcGFjdC5jb3B5RnJvbSh2ZWN0b3IpLm11bHRpcGx5SW5QbGFjZShtYXNrKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2xhbXBlZERpbWVuc2lvbnMgPSBUbXBWZWN0b3JzLlZlY3RvcjNbMV07XHJcbiAgICAgICAgY2xhbXBlZERpbWVuc2lvbnMuY29weUZyb21GbG9hdHMoXHJcbiAgICAgICAgICAgIE1hdGgubWF4KHRoaXMuX2F0dGFjaGVkU2xhdGUhLm1pbkRpbWVuc2lvbnMueCwgaW1wYWN0LnggKyBkaW1lbnNpb25zLngpLFxyXG4gICAgICAgICAgICBNYXRoLm1heCh0aGlzLl9hdHRhY2hlZFNsYXRlIS5taW5EaW1lbnNpb25zLnksIGltcGFjdC55ICsgZGltZW5zaW9ucy55KSxcclxuICAgICAgICAgICAgMFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmIChrZWVwQXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgICAgLy8gRXh0cmEgbG9naWMgdG8gZW5zdXJlIHRoZSByYXRpbyBpcyBtYWludGFpbmVkIHdoZW4gdGhlIHZlY3RvciBoYXMgYmVlbiBjbGFtcGVkXHJcbiAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gZGltZW5zaW9ucy54IC8gZGltZW5zaW9ucy55O1xyXG4gICAgICAgICAgICBjbGFtcGVkRGltZW5zaW9ucy54ID0gTWF0aC5tYXgoY2xhbXBlZERpbWVuc2lvbnMueCwgY2xhbXBlZERpbWVuc2lvbnMueSAqIHJhdGlvKTtcclxuICAgICAgICAgICAgY2xhbXBlZERpbWVuc2lvbnMueSA9IE1hdGgubWF4KGNsYW1wZWREaW1lbnNpb25zLnksIGNsYW1wZWREaW1lbnNpb25zLnggLyByYXRpbyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDYWxjdWxhdGluZyB0aGUgcmVhbCBpbXBhY3Qgb2YgdmVjdG9yIG9uIGNsYW1wZWQgZGltZW5zaW9uc1xyXG4gICAgICAgIGltcGFjdC5jb3B5RnJvbShjbGFtcGVkRGltZW5zaW9ucykuc3VidHJhY3RJblBsYWNlKGRpbWVuc2lvbnMpO1xyXG5cclxuICAgICAgICB2ZWN0b3IueCA9IE1hdGguc2lnbih2ZWN0b3IueCkgKiBNYXRoLmFicyhpbXBhY3QueCk7XHJcbiAgICAgICAgdmVjdG9yLnkgPSBNYXRoLnNpZ24odmVjdG9yLnkpICogTWF0aC5hYnMoaW1wYWN0LnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX21vdmVIYW5kbGUob3JpZ2luU3RhcnQ6IFZlY3RvcjMsIGRpbWVuc2lvbnNTdGFydDogVmVjdG9yMywgb2Zmc2V0OiBWZWN0b3IzLCBtYXNrczogSGFuZGxlTWFza3MsIGlzQ29ybmVyOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9hdHRhY2hlZFNsYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc0Nvcm5lcikge1xyXG4gICAgICAgICAgICBjb25zdCBhc3BlY3RSYXRpbyA9IGRpbWVuc2lvbnNTdGFydC54IC8gZGltZW5zaW9uc1N0YXJ0Lnk7XHJcbiAgICAgICAgICAgIHRoaXMuX2tlZXBBc3BlY3RSYXRpbyhvZmZzZXQsIGFzcGVjdFJhdGlvLCBtYXNrcy5kaW1lbnNpb25zLnggKiBtYXNrcy5kaW1lbnNpb25zLnkgPCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY2xhbXBEaW1lbnNpb25zKG9mZnNldCwgZGltZW5zaW9uc1N0YXJ0LCBtYXNrcy5kaW1lbnNpb25zLCBpc0Nvcm5lcik7XHJcblxyXG4gICAgICAgIGNvbnN0IG9mZnNldE9yaWdpbk1hc2tlZCA9IFRtcFZlY3RvcnMuVmVjdG9yM1swXTtcclxuICAgICAgICBjb25zdCBvZmZzZXREaW1lbnNpb25zTWFza2VkID0gVG1wVmVjdG9ycy5WZWN0b3IzWzFdO1xyXG4gICAgICAgIG9mZnNldE9yaWdpbk1hc2tlZC5jb3B5RnJvbShvZmZzZXQpLm11bHRpcGx5SW5QbGFjZShtYXNrcy5vcmlnaW4pO1xyXG4gICAgICAgIG9mZnNldERpbWVuc2lvbnNNYXNrZWQuY29weUZyb20ob2Zmc2V0KS5tdWx0aXBseUluUGxhY2UobWFza3MuZGltZW5zaW9ucyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2F0dGFjaGVkU2xhdGUub3JpZ2luLmNvcHlGcm9tKG9yaWdpblN0YXJ0KS5hZGRJblBsYWNlKG9mZnNldE9yaWdpbk1hc2tlZCk7XHJcbiAgICAgICAgdGhpcy5fYXR0YWNoZWRTbGF0ZS5kaW1lbnNpb25zLnNldChkaW1lbnNpb25zU3RhcnQueCArIG9mZnNldERpbWVuc2lvbnNNYXNrZWQueCwgZGltZW5zaW9uc1N0YXJ0LnkgKyBvZmZzZXREaW1lbnNpb25zTWFza2VkLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2Fzc2lnbkRyYWdCZWhhdmlvckNvcm5lcnMoXHJcbiAgICAgICAgaGFuZGxlOiBHaXptb0hhbmRsZSxcclxuICAgICAgICBtb3ZlRm46IChvcmlnaW5TdGFydDogVmVjdG9yMywgZGltZW5zaW9uc1N0YXJ0OiBWZWN0b3IzLCBvZmZzZXQ6IFZlY3RvcjMsIG1hc2tzOiBIYW5kbGVNYXNrcykgPT4gdm9pZCxcclxuICAgICAgICBtYXNrczogSGFuZGxlTWFza3NcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IGRpbWVuc2lvbnNTdGFydCA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luU3RhcnQgPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICAgIGNvbnN0IGRyYWdPcmlnaW4gPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICAgIGNvbnN0IHRvT2JqZWN0RnJhbWUgPSBuZXcgTWF0cml4KCk7XHJcbiAgICAgICAgY29uc3QgZHJhZ1BsYW5lTm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdFRvUmVmID0gKHBvc2l0aW9uOiBWZWN0b3IzLCBub3JtYWw6IFZlY3RvcjMsIG9yaWdpbjogVmVjdG9yMywgcmVmOiBWZWN0b3IzKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFByb2plY3RzIG9uIHRoZSBwbGFuZSB3aXRoIGl0cyBub3JtYWwgYW5kIG9yaWdpblxyXG4gICAgICAgICAgICBwb3NpdGlvbi5zdWJ0cmFjdFRvUmVmKG9yaWdpbiwgVG1wVmVjdG9ycy5WZWN0b3IzWzBdKTtcclxuICAgICAgICAgICAgY29uc3QgZG90ID0gVmVjdG9yMy5Eb3QoVG1wVmVjdG9ycy5WZWN0b3IzWzBdLCBub3JtYWwpO1xyXG4gICAgICAgICAgICBUbXBWZWN0b3JzLlZlY3RvcjNbMV0uY29weUZyb20obm9ybWFsKS5zY2FsZUluUGxhY2UoZG90KTtcclxuICAgICAgICAgICAgVG1wVmVjdG9ycy5WZWN0b3IzWzBdLnN1YnRyYWN0SW5QbGFjZShUbXBWZWN0b3JzLlZlY3RvcjNbMV0pO1xyXG4gICAgICAgICAgICBUbXBWZWN0b3JzLlZlY3RvcjNbMF0uYWRkVG9SZWYob3JpZ2luLCByZWYpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGRyYWdTdGFydCA9IChldmVudDogeyBwb3NpdGlvbjogVmVjdG9yMyB9KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dGFjaGVkU2xhdGUgJiYgdGhpcy5hdHRhY2hlZE1lc2gpIHtcclxuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnNTdGFydC5zZXQodGhpcy5hdHRhY2hlZFNsYXRlLmRpbWVuc2lvbnMueCwgdGhpcy5hdHRhY2hlZFNsYXRlLmRpbWVuc2lvbnMueSwgRXBzaWxvbik7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5TdGFydC5jb3B5RnJvbSh0aGlzLmF0dGFjaGVkU2xhdGUub3JpZ2luKTtcclxuICAgICAgICAgICAgICAgIGRyYWdPcmlnaW4uY29weUZyb20oZXZlbnQucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgdG9PYmplY3RGcmFtZS5jb3B5RnJvbSh0aGlzLmF0dGFjaGVkTWVzaC5jb21wdXRlV29ybGRNYXRyaXgodHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgdG9PYmplY3RGcmFtZS5pbnZlcnQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRTbGF0ZS5fZm9sbG93QnV0dG9uLmlzVG9nZ2xlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgVmVjdG9yMy5UcmFuc2Zvcm1Ob3JtYWxUb1JlZihWZWN0b3IzLkZvcndhcmQoKSwgdGhpcy5hdHRhY2hlZE1lc2guZ2V0V29ybGRNYXRyaXgoKSwgZHJhZ1BsYW5lTm9ybWFsKTtcclxuICAgICAgICAgICAgICAgIGRyYWdQbGFuZU5vcm1hbC5ub3JtYWxpemUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFuZGxlSG92ZXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZURyYWdnZWQgPSB0aGlzLl9oYW5kbGVIb3ZlcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZURyYWdnZWQuZHJhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBkcmFnZ2luZyA9IChldmVudDogeyBwb3NpdGlvbjogVmVjdG9yMyB9KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dGFjaGVkU2xhdGUgJiYgdGhpcy5hdHRhY2hlZE1lc2gpIHtcclxuICAgICAgICAgICAgICAgIHByb2plY3RUb1JlZihldmVudC5wb3NpdGlvbiwgZHJhZ1BsYW5lTm9ybWFsLCBkcmFnT3JpZ2luLCB0aGlzLl90bXBWZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdG1wVmVjdG9yLnN1YnRyYWN0SW5QbGFjZShkcmFnT3JpZ2luKTtcclxuICAgICAgICAgICAgICAgIFZlY3RvcjMuVHJhbnNmb3JtTm9ybWFsVG9SZWYodGhpcy5fdG1wVmVjdG9yLCB0b09iamVjdEZyYW1lLCB0aGlzLl90bXBWZWN0b3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIG1vdmVGbihvcmlnaW5TdGFydCwgZGltZW5zaW9uc1N0YXJ0LCB0aGlzLl90bXBWZWN0b3IsIG1hc2tzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRTbGF0ZS5fcG9zaXRpb25FbGVtZW50cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCb3VuZGluZ0JveCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgZHJhZ0VuZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWRTbGF0ZSAmJiB0aGlzLmF0dGFjaGVkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdHRhY2hlZFNsYXRlLl91cGRhdGVQaXZvdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oYW5kbGVEcmFnZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlRHJhZ2dlZC5kcmFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlRHJhZ2dlZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBoYW5kbGUuc2V0RHJhZ0JlaGF2aW9yKGRyYWdTdGFydCwgZHJhZ2dpbmcsIGRyYWdFbmQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2Fzc2lnbkRyYWdCZWhhdmlvclNpZGVzKGhhbmRsZTogR2l6bW9IYW5kbGUsIGRyYWdQbGFuZU5vcm1hbDogVmVjdG9yMykge1xyXG4gICAgICAgIGNvbnN0IHF1YXRlcm5pb25PcmlnaW4gPSBuZXcgUXVhdGVybmlvbigpO1xyXG4gICAgICAgIGNvbnN0IGRyYWdPcmlnaW4gPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbk9yaWdpbiA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgY29uc3Qgd29ybGRQaXZvdCA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgY29uc3Qgd29ybGRQbGFuZU5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRyYWdTdGFydCA9IChldmVudDogeyBwb3NpdGlvbjogVmVjdG9yMyB9KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dGFjaGVkU2xhdGUgJiYgdGhpcy5hdHRhY2hlZE1lc2gpIHtcclxuICAgICAgICAgICAgICAgIHF1YXRlcm5pb25PcmlnaW4uY29weUZyb20odGhpcy5hdHRhY2hlZE1lc2gucm90YXRpb25RdWF0ZXJuaW9uISk7XHJcbiAgICAgICAgICAgICAgICBkcmFnT3JpZ2luLmNvcHlGcm9tKGV2ZW50LnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHdvcmxkUGl2b3QuY29weUZyb20odGhpcy5hdHRhY2hlZE1lc2guZ2V0QWJzb2x1dGVQaXZvdFBvaW50KCkpO1xyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uT3JpZ2luLmNvcHlGcm9tKGRyYWdPcmlnaW4pLnN1YnRyYWN0SW5QbGFjZSh3b3JsZFBpdm90KS5ub3JtYWxpemUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRTbGF0ZS5fZm9sbG93QnV0dG9uLmlzVG9nZ2xlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgVmVjdG9yMy5UcmFuc2Zvcm1Ob3JtYWxUb1JlZihkcmFnUGxhbmVOb3JtYWwsIHRoaXMuYXR0YWNoZWRNZXNoLmdldFdvcmxkTWF0cml4KCksIHdvcmxkUGxhbmVOb3JtYWwpO1xyXG4gICAgICAgICAgICAgICAgd29ybGRQbGFuZU5vcm1hbC5ub3JtYWxpemUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFuZGxlSG92ZXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZURyYWdnZWQgPSB0aGlzLl9oYW5kbGVIb3ZlcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZURyYWdnZWQuZHJhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBkcmFnZ2luZyA9IChldmVudDogeyBwb3NpdGlvbjogVmVjdG9yMyB9KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dGFjaGVkU2xhdGUgJiYgdGhpcy5hdHRhY2hlZE1lc2gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RtcFZlY3Rvci5jb3B5RnJvbShldmVudC5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90bXBWZWN0b3Iuc3VidHJhY3RJblBsYWNlKHdvcmxkUGl2b3QpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdG1wVmVjdG9yLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGFuZ2xlID0gLVZlY3RvcjMuR2V0QW5nbGVCZXR3ZWVuVmVjdG9yc09uUGxhbmUodGhpcy5fdG1wVmVjdG9yLCBkaXJlY3Rpb25PcmlnaW4sIHdvcmxkUGxhbmVOb3JtYWwpO1xyXG4gICAgICAgICAgICAgICAgUXVhdGVybmlvbi5Sb3RhdGlvbkF4aXNUb1JlZihkcmFnUGxhbmVOb3JtYWwsIGFuZ2xlLCB0aGlzLl90bXBRdWF0ZXJuaW9uKTtcclxuICAgICAgICAgICAgICAgIHF1YXRlcm5pb25PcmlnaW4ubXVsdGlwbHlUb1JlZih0aGlzLl90bXBRdWF0ZXJuaW9uLCB0aGlzLmF0dGFjaGVkTWVzaC5yb3RhdGlvblF1YXRlcm5pb24hKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGRyYWdFbmQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dGFjaGVkU2xhdGUgJiYgdGhpcy5hdHRhY2hlZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRTbGF0ZS5fdXBkYXRlUGl2b3QoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFuZGxlRHJhZ2dlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZURyYWdnZWQuZHJhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZURyYWdnZWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaGFuZGxlLnNldERyYWdCZWhhdmlvcihkcmFnU3RhcnQsIGRyYWdnaW5nLCBkcmFnRW5kKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgX2F0dGFjaGVkTm9kZUNoYW5nZWQodmFsdWU6IE51bGxhYmxlPEFic3RyYWN0TWVzaD4pIHtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVCb3VuZGluZ0JveCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgdGhlIGJvdW5kaW5nIGJveCBpbmZvcm1hdGlvbiBmb3IgdGhlIGdpem1vXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGVCb3VuZGluZ0JveCgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdHRhY2hlZE1lc2gpIHtcclxuICAgICAgICAgICAgUGl2b3RUb29scy5fUmVtb3ZlQW5kU3RvcmVQaXZvdFBvaW50KHRoaXMuYXR0YWNoZWRNZXNoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN0b3JlIG9yaWdpbmFsIHBhcmVudFxyXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFBhcmVudCA9IHRoaXMuYXR0YWNoZWRNZXNoLnBhcmVudDtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZE1lc2guc2V0UGFyZW50KG51bGwpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBSb3RhdGUgYmFzZWQgb24gYXhpc1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYXR0YWNoZWRNZXNoLnJvdGF0aW9uUXVhdGVybmlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdHRhY2hlZE1lc2gucm90YXRpb25RdWF0ZXJuaW9uID0gUXVhdGVybmlvbi5Sb3RhdGlvbllhd1BpdGNoUm9sbCh0aGlzLmF0dGFjaGVkTWVzaC5yb3RhdGlvbi55LCB0aGlzLmF0dGFjaGVkTWVzaC5yb3RhdGlvbi54LCB0aGlzLmF0dGFjaGVkTWVzaC5yb3RhdGlvbi56KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU3RvcmUgb3JpZ2luYWwgcG9zaXRpb24gYW5kIHJlc2V0IG1lc2ggdG8gb3JpZ2luIGJlZm9yZSBjb21wdXRpbmcgdGhlIGJvdW5kaW5nIGJveFxyXG4gICAgICAgICAgICB0aGlzLl90bXBRdWF0ZXJuaW9uLmNvcHlGcm9tKHRoaXMuYXR0YWNoZWRNZXNoLnJvdGF0aW9uUXVhdGVybmlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuX3RtcFZlY3Rvci5jb3B5RnJvbSh0aGlzLmF0dGFjaGVkTWVzaC5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRNZXNoLnJvdGF0aW9uUXVhdGVybmlvbi5zZXQoMCwgMCwgMCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRNZXNoLnBvc2l0aW9uLnNldCgwLCAwLCAwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBib3VuZGluZyBkaW1lbnNpb25zL3Bvc2l0aW9uc1xyXG4gICAgICAgICAgICBjb25zdCBib3VuZGluZ01pbk1heCA9IHRoaXMuYXR0YWNoZWRNZXNoLmdldEhpZXJhcmNoeUJvdW5kaW5nVmVjdG9ycygpO1xyXG4gICAgICAgICAgICBib3VuZGluZ01pbk1heC5tYXguc3VidHJhY3RUb1JlZihib3VuZGluZ01pbk1heC5taW4sIHRoaXMuX2JvdW5kaW5nRGltZW5zaW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kaW5nQm94R2l6bW8ubWluID0gYm91bmRpbmdNaW5NYXgubWluO1xyXG4gICAgICAgICAgICB0aGlzLl9ib3VuZGluZ0JveEdpem1vLm1heCA9IGJvdW5kaW5nTWluTWF4Lm1heDtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBoYW5kbGVzIG9mIHRoZSBnaXptb1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIYW5kbGVzUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlSGFuZGxlc1NjYWxpbmcoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlc3RvcmUgcG9zaXRpb24vcm90YXRpb24gdmFsdWVzXHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRNZXNoLnJvdGF0aW9uUXVhdGVybmlvbi5jb3B5RnJvbSh0aGlzLl90bXBRdWF0ZXJuaW9uKTtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZE1lc2gucG9zaXRpb24uY29weUZyb20odGhpcy5fdG1wVmVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgIFBpdm90VG9vbHMuX1Jlc3RvcmVQaXZvdFBvaW50KHRoaXMuYXR0YWNoZWRNZXNoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgcGFyZW50XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRNZXNoLnNldFBhcmVudChvcmlnaW5hbFBhcmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRNZXNoLmNvbXB1dGVXb3JsZE1hdHJpeCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2V4aXN0aW5nU2xhdGVTY2FsZS5jb3B5RnJvbSh0aGlzLmF0dGFjaGVkTWVzaC5zY2FsaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlSGFuZGxlc1Bvc2l0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMuX2JvdW5kaW5nQm94R2l6bW8ubWluLmNsb25lKCk7XHJcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5fYm91bmRpbmdCb3hHaXptby5tYXguY2xvbmUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgaGFuZGxlU2NhbGluZyA9IHRoaXMuX2Nvcm5lcnNbMF0ubm9kZS5zY2FsaW5nLmxlbmd0aCgpO1xyXG4gICAgICAgIG1pbi54IC09IHRoaXMuX21hcmdpbiAqIGhhbmRsZVNjYWxpbmc7XHJcbiAgICAgICAgbWluLnkgLT0gdGhpcy5fbWFyZ2luICogaGFuZGxlU2NhbGluZztcclxuICAgICAgICBtYXgueCArPSB0aGlzLl9tYXJnaW4gKiBoYW5kbGVTY2FsaW5nO1xyXG4gICAgICAgIG1heC55ICs9IHRoaXMuX21hcmdpbiAqIGhhbmRsZVNjYWxpbmc7XHJcblxyXG4gICAgICAgIGNvbnN0IGNlbnRlciA9IG1pbi5hZGQobWF4KS5zY2FsZUluUGxhY2UoMC41KTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29ybmVyc1swXS5ub2RlLnBvc2l0aW9uLmNvcHlGcm9tRmxvYXRzKG1pbi54LCBtaW4ueSwgMCk7XHJcbiAgICAgICAgdGhpcy5fY29ybmVyc1sxXS5ub2RlLnBvc2l0aW9uLmNvcHlGcm9tRmxvYXRzKG1heC54LCBtaW4ueSwgMCk7XHJcbiAgICAgICAgdGhpcy5fY29ybmVyc1syXS5ub2RlLnBvc2l0aW9uLmNvcHlGcm9tRmxvYXRzKG1heC54LCBtYXgueSwgMCk7XHJcbiAgICAgICAgdGhpcy5fY29ybmVyc1szXS5ub2RlLnBvc2l0aW9uLmNvcHlGcm9tRmxvYXRzKG1pbi54LCBtYXgueSwgMCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NpZGVzWzBdLm5vZGUucG9zaXRpb24uY29weUZyb21GbG9hdHMobWluLngsIGNlbnRlci55LCAwKTtcclxuICAgICAgICB0aGlzLl9zaWRlc1sxXS5ub2RlLnBvc2l0aW9uLmNvcHlGcm9tRmxvYXRzKGNlbnRlci54LCBtaW4ueSwgMCk7XHJcbiAgICAgICAgdGhpcy5fc2lkZXNbMl0ubm9kZS5wb3NpdGlvbi5jb3B5RnJvbUZsb2F0cyhtYXgueCwgY2VudGVyLnksIDApO1xyXG4gICAgICAgIHRoaXMuX3NpZGVzWzNdLm5vZGUucG9zaXRpb24uY29weUZyb21GbG9hdHMoY2VudGVyLngsIG1heC55LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91cGRhdGVIYW5kbGVzU2NhbGluZygpIHtcclxuICAgICAgICBpZiAodGhpcy5fYXR0YWNoZWRTbGF0ZSAmJiB0aGlzLl9hdHRhY2hlZFNsYXRlLm1lc2gpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSB0aGlzLl9hdHRhY2hlZFNsYXRlLm1lc2guc2NhbGluZy54ICogdGhpcy5fYXR0YWNoZWRTbGF0ZS5kaW1lbnNpb25zLng7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IHRoaXMuX2F0dGFjaGVkU2xhdGUubWVzaC5zY2FsaW5nLnkgKiB0aGlzLl9hdHRhY2hlZFNsYXRlLmRpbWVuc2lvbnMueTtcclxuICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBNYXRoLm1pbihzY2FsZWRXaWR0aCwgc2NhbGVkSGVpZ2h0KSAqIHRoaXMuX2hhbmRsZVNpemU7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9jb3JuZXJzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29ybmVyc1tpbmRleF0ubm9kZS5zY2FsaW5nLnNldEFsbChzY2FsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3NpZGVzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2lkZXNbaW5kZXhdLm5vZGUuc2NhbGluZy5zZXRBbGwoc2NhbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfdXBkYXRlKCkge1xyXG4gICAgICAgIHN1cGVyLl91cGRhdGUoKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmdpem1vTGF5ZXIudXRpbGl0eUxheWVyU2NlbmUuYWN0aXZlQ2FtZXJhKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9hdHRhY2hlZFNsYXRlICYmIHRoaXMuX2F0dGFjaGVkU2xhdGUubWVzaCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maXhlZFNjcmVlblNpemUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2F0dGFjaGVkU2xhdGUubWVzaC5hYnNvbHV0ZVBvc2l0aW9uLnN1YnRyYWN0VG9SZWYodGhpcy5naXptb0xheWVyLnV0aWxpdHlMYXllclNjZW5lLmFjdGl2ZUNhbWVyYS5wb3NpdGlvbiwgdGhpcy5fdG1wVmVjdG9yKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlRnJvbUNhbWVyYSA9ICh0aGlzLl9oYW5kbGVTaXplICogdGhpcy5fdG1wVmVjdG9yLmxlbmd0aCgpKSAvIHRoaXMuZml4ZWRTY3JlZW5TaXplRGlzdGFuY2VGYWN0b3I7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2Nvcm5lcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb3JuZXJzW2ldLm5vZGUuc2NhbGluZy5zZXQoZGlzdGFuY2VGcm9tQ2FtZXJhLCBkaXN0YW5jZUZyb21DYW1lcmEsIGRpc3RhbmNlRnJvbUNhbWVyYSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NpZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2lkZXNbaV0ubm9kZS5zY2FsaW5nLnNldChkaXN0YW5jZUZyb21DYW1lcmEsIGRpc3RhbmNlRnJvbUNhbWVyYSwgZGlzdGFuY2VGcm9tQ2FtZXJhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIYW5kbGVzUG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5naXptb0xheWVyLm9yaWdpbmFsU2NlbmUub25CZWZvcmVSZW5kZXJPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9yZW5kZXJPYnNlcnZlcik7XHJcblxyXG4gICAgICAgIC8vIFdpbGwgZGlzcG9zZSByb290TWVzaCBhbmQgYWxsIGRlc2NlbmRhbnRzXHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNvcm5lciBvZiB0aGlzLl9jb3JuZXJzKSB7XHJcbiAgICAgICAgICAgIGNvcm5lci5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHNpZGUgb2YgdGhpcy5fc2lkZXMpIHtcclxuICAgICAgICAgICAgc2lkZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xyXG5pbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUgeyBPYnNlcnZlciB9IGZyb20gXCJjb3JlL01pc2Mvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImNvcmUvTWlzYy9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IFBvaW50ZXJJbmZvIH0gZnJvbSBcImNvcmUvRXZlbnRzL3BvaW50ZXJFdmVudHNcIjtcclxuaW1wb3J0IHsgUG9pbnRlckV2ZW50VHlwZXMgfSBmcm9tIFwiY29yZS9FdmVudHMvcG9pbnRlckV2ZW50c1wiO1xyXG5pbXBvcnQgdHlwZSB7IE1hdGVyaWFsIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IEhlbWlzcGhlcmljTGlnaHQgfSBmcm9tIFwiY29yZS9MaWdodHMvaGVtaXNwaGVyaWNMaWdodFwiO1xyXG5pbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHsgVXRpbGl0eUxheWVyUmVuZGVyZXIgfSBmcm9tIFwiY29yZS9SZW5kZXJpbmcvdXRpbGl0eUxheWVyUmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgRW5naW5lU3RvcmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL2VuZ2luZVN0b3JlXCI7XHJcbmltcG9ydCB0eXBlIHsgSURpc3Bvc2FibGUsIFNjZW5lIH0gZnJvbSBcImNvcmUvc2NlbmVcIjtcclxuXHJcbmltcG9ydCB7IENvbnRhaW5lcjNEIH0gZnJvbSBcIi4vY29udHJvbHMvY29udGFpbmVyM0RcIjtcclxuaW1wb3J0IHR5cGUgeyBDb250cm9sM0QgfSBmcm9tIFwiLi9jb250cm9scy9jb250cm9sM0RcIjtcclxuaW1wb3J0IHR5cGUgeyBJUG9pbnRlckV2ZW50IH0gZnJvbSBcImNvcmUvRXZlbnRzL2RldmljZUlucHV0RXZlbnRzXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBtYW5hZ2UgM0QgdXNlciBpbnRlcmZhY2VcclxuICogQHNlZSBodHRwczovL2RvYy5iYWJ5bG9uanMuY29tL2ZlYXR1cmVzL2ZlYXR1cmVzRGVlcERpdmUvZ3VpL2d1aTNEXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR1VJM0RNYW5hZ2VyIGltcGxlbWVudHMgSURpc3Bvc2FibGUge1xyXG4gICAgcHJpdmF0ZSBfc2NlbmU6IFNjZW5lO1xyXG4gICAgcHJpdmF0ZSBfc2NlbmVEaXNwb3NlT2JzZXJ2ZXI6IE51bGxhYmxlPE9ic2VydmVyPFNjZW5lPj47XHJcbiAgICBwcml2YXRlIF91dGlsaXR5TGF5ZXI6IE51bGxhYmxlPFV0aWxpdHlMYXllclJlbmRlcmVyPjtcclxuICAgIHByaXZhdGUgX3Jvb3RDb250YWluZXI6IENvbnRhaW5lcjNEO1xyXG4gICAgcHJpdmF0ZSBfcG9pbnRlck9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxQb2ludGVySW5mbz4+O1xyXG4gICAgcHJpdmF0ZSBfcG9pbnRlck91dE9ic2VydmVyOiBOdWxsYWJsZTxPYnNlcnZlcjxudW1iZXI+PjtcclxuICAgIHByaXZhdGUgX2N1c3RvbUNvbnRyb2xTY2FsaW5nID0gMS4wO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9sYXN0UGlja2VkQ29udHJvbDogQ29udHJvbDNEO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9sYXN0Q29udHJvbE92ZXI6IHsgW3BvaW50ZXJJZDogbnVtYmVyXTogQ29udHJvbDNEIH0gPSB7fTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfbGFzdENvbnRyb2xEb3duOiB7IFtwb2ludGVySWQ6IG51bWJlcl06IENvbnRyb2wzRCB9ID0ge307XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBNUlRLX1JFQUxJU1RJQ19TQ0FMSU5HOiBudW1iZXIgPSAwLjAzMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmFibGUgcmFpc2VkIHdoZW4gdGhlIHBvaW50IHBpY2tlZCBieSB0aGUgcG9pbnRlciBldmVudHMgY2hhbmdlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25QaWNrZWRQb2ludENoYW5nZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8TnVsbGFibGU8VmVjdG9yMz4+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPYnNlcnZhYmxlIHJhaXNlZCB3aGVuIGEgcGlja2luZyBoYXBwZW5zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblBpY2tpbmdPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8TnVsbGFibGU8QWJzdHJhY3RNZXNoPj4oKTtcclxuXHJcbiAgICAvLyBTaGFyZWQgcmVzb3VyY2VzXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3NoYXJlZE1hdGVyaWFsczogeyBba2V5OiBzdHJpbmddOiBNYXRlcmlhbCB9ID0ge307XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF90b3VjaFNoYXJlZE1hdGVyaWFsczogeyBba2V5OiBzdHJpbmddOiBNYXRlcmlhbCB9ID0ge307XHJcblxyXG4gICAgLyoqIEdldHMgdGhlIGhvc3Rpbmcgc2NlbmUgKi9cclxuICAgIHB1YmxpYyBnZXQgc2NlbmUoKTogU2NlbmUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zY2VuZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBhc3NvY2lhdGVkIHV0aWxpdHkgbGF5ZXIgKi9cclxuICAgIHB1YmxpYyBnZXQgdXRpbGl0eUxheWVyKCk6IE51bGxhYmxlPFV0aWxpdHlMYXllclJlbmRlcmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3V0aWxpdHlMYXllcjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyB0aGUgc2NhbGluZyBmb3IgYWxsIFVJIGVsZW1lbnRzIG93bmVkIGJ5IHRoaXMgbWFuYWdlciAqL1xyXG4gICAgcHVibGljIGdldCBjb250cm9sU2NhbGluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3VzdG9tQ29udHJvbFNjYWxpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFNldHMgdGhlIHNjYWxpbmcgYWRqdXN0bWVudCBmb3IgYWxsIFVJIGVsZW1lbnRzIG93bmVkIGJ5IHRoaXMgbWFuYWdlciAqL1xyXG4gICAgcHVibGljIHNldCBjb250cm9sU2NhbGluZyhuZXdTY2FsZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2N1c3RvbUNvbnRyb2xTY2FsaW5nICE9PSBuZXdTY2FsZSAmJiBuZXdTY2FsZSA+IDApIHtcclxuICAgICAgICAgICAgY29uc3Qgc2NhbGVSYXRpbyA9IG5ld1NjYWxlIC8gdGhpcy5fY3VzdG9tQ29udHJvbFNjYWxpbmc7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1c3RvbUNvbnRyb2xTY2FsaW5nID0gbmV3U2NhbGU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9yb290Q29udGFpbmVyLmNoaWxkcmVuLmZvckVhY2goKGNvbnRyb2w6IENvbnRyb2wzRCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbC5zY2FsaW5nLnNjYWxlSW5QbGFjZShzY2FsZVJhdGlvKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobmV3U2NhbGUgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sLl9pc1NjYWxlZEJ5TWFuYWdlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0cyBpZiBjb250cm9scyBhdHRhY2hlZCB0byB0aGlzIG1hbmFnZXIgYXJlIHJlYWxpc3RpY2FsbHkgc2l6ZWQsIGJhc2VkIG9uIHRoZSBmYWN0IHRoYXQgMSB1bml0IGxlbmd0aCBpcyAxIG1ldGVyICovXHJcbiAgICBwdWJsaWMgZ2V0IHVzZVJlYWxpc3RpY1NjYWxpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbFNjYWxpbmcgPT09IEdVSTNETWFuYWdlci5NUlRLX1JFQUxJU1RJQ19TQ0FMSU5HO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBTZXRzIGlmIGNvbnRyb2xzIGF0dGFjaGVkIHRvIHRoaXMgbWFuYWdlciBhcmUgcmVhbGlzdGljYWxseSBzaXplZCwgYmFzZWQgb24gdGhlIGZhY3QgdGhhdCAxIHVuaXQgbGVuZ3RoIGlzIDEgbWV0ZXIgKi9cclxuICAgIHB1YmxpYyBzZXQgdXNlUmVhbGlzdGljU2NhbGluZyhuZXdWYWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuY29udHJvbFNjYWxpbmcgPSBuZXdWYWx1ZSA/IEdVSTNETWFuYWdlci5NUlRLX1JFQUxJU1RJQ19TQ0FMSU5HIDogMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgR1VJM0RNYW5hZ2VyXHJcbiAgICAgKiBAcGFyYW0gc2NlbmVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHNjZW5lPzogU2NlbmUpIHtcclxuICAgICAgICB0aGlzLl9zY2VuZSA9IHNjZW5lIHx8IEVuZ2luZVN0b3JlLkxhc3RDcmVhdGVkU2NlbmUhO1xyXG4gICAgICAgIHRoaXMuX3NjZW5lRGlzcG9zZU9ic2VydmVyID0gdGhpcy5fc2NlbmUub25EaXNwb3NlT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9zY2VuZURpc3Bvc2VPYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3V0aWxpdHlMYXllciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl91dGlsaXR5TGF5ZXIgPSBVdGlsaXR5TGF5ZXJSZW5kZXJlci5fQ3JlYXRlRGVmYXVsdFV0aWxpdHlMYXllckZyb21TY2VuZSh0aGlzLl9zY2VuZSk7XHJcbiAgICAgICAgdGhpcy5fdXRpbGl0eUxheWVyLm9ubHlDaGVja1BvaW50ZXJEb3duRXZlbnRzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fdXRpbGl0eUxheWVyLnBpY2tVdGlsaXR5U2NlbmVGaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3V0aWxpdHlMYXllci5tYWluU2NlbmVUcmFja2VyUHJlZGljYXRlID0gKG1lc2g6IE51bGxhYmxlPEFic3RyYWN0TWVzaD4pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG1lc2ggJiYgbWVzaC5yZXNlcnZlZERhdGFTdG9yZT8uR1VJM0Q/LmNvbnRyb2w/Ll9ub2RlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIFJvb3RcclxuICAgICAgICB0aGlzLl9yb290Q29udGFpbmVyID0gbmV3IENvbnRhaW5lcjNEKFwiUm9vdENvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLl9yb290Q29udGFpbmVyLl9ob3N0ID0gdGhpcztcclxuICAgICAgICBjb25zdCB1dGlsaXR5TGF5ZXJTY2VuZSA9IHRoaXMuX3V0aWxpdHlMYXllci51dGlsaXR5TGF5ZXJTY2VuZTtcclxuXHJcbiAgICAgICAgLy8gRXZlbnRzXHJcbiAgICAgICAgdGhpcy5fcG9pbnRlck91dE9ic2VydmVyID0gdGhpcy5fdXRpbGl0eUxheWVyLm9uUG9pbnRlck91dE9ic2VydmFibGUuYWRkKChwb2ludGVySWQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlUG9pbnRlck91dChwb2ludGVySWQsIHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9wb2ludGVyT2JzZXJ2ZXIgPSB1dGlsaXR5TGF5ZXJTY2VuZS5vblBvaW50ZXJPYnNlcnZhYmxlLmFkZCgocGkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fZG9QaWNraW5nKHBpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU2NlbmVcclxuICAgICAgICB0aGlzLl91dGlsaXR5TGF5ZXIudXRpbGl0eUxheWVyU2NlbmUuYXV0b0NsZWFyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fdXRpbGl0eUxheWVyLnV0aWxpdHlMYXllclNjZW5lLmF1dG9DbGVhckRlcHRoQW5kU3RlbmNpbCA9IGZhbHNlO1xyXG4gICAgICAgIG5ldyBIZW1pc3BoZXJpY0xpZ2h0KFwiaGVtaVwiLCBWZWN0b3IzLlVwKCksIHRoaXMuX3V0aWxpdHlMYXllci51dGlsaXR5TGF5ZXJTY2VuZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaGFuZGxlUG9pbnRlck91dChwb2ludGVySWQ6IG51bWJlciwgaXNQb2ludGVyVXA6IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCBwcmV2aW91c0NvbnRyb2xPdmVyID0gdGhpcy5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF07XHJcbiAgICAgICAgaWYgKHByZXZpb3VzQ29udHJvbE92ZXIpIHtcclxuICAgICAgICAgICAgcHJldmlvdXNDb250cm9sT3Zlci5fb25Qb2ludGVyT3V0KHByZXZpb3VzQ29udHJvbE92ZXIpO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNQb2ludGVyVXApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xhc3RDb250cm9sRG93bltwb2ludGVySWRdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0Q29udHJvbERvd25bcG9pbnRlcklkXS5mb3JjZVBvaW50ZXJVcCgpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RDb250cm9sRG93bltwb2ludGVySWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9uUGlja2VkUG9pbnRDaGFuZ2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMobnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZG9QaWNraW5nKHBpOiBQb2ludGVySW5mbyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5fdXRpbGl0eUxheWVyIHx8ICF0aGlzLl91dGlsaXR5TGF5ZXIuc2hvdWxkUmVuZGVyIHx8ICF0aGlzLl91dGlsaXR5TGF5ZXIudXRpbGl0eUxheWVyU2NlbmUuYWN0aXZlQ2FtZXJhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBvaW50ZXJFdmVudCA9IDxJUG9pbnRlckV2ZW50PnBpLmV2ZW50O1xyXG5cclxuICAgICAgICBjb25zdCBwb2ludGVySWQgPSBwb2ludGVyRXZlbnQucG9pbnRlcklkIHx8IDA7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uSW5kZXggPSBwb2ludGVyRXZlbnQuYnV0dG9uO1xyXG5cclxuICAgICAgICBjb25zdCBwaWNraW5nSW5mbyA9IHBpLnBpY2tJbmZvO1xyXG4gICAgICAgIGlmIChwaWNraW5nSW5mbykge1xyXG4gICAgICAgICAgICB0aGlzLm9uUGlja2luZ09ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHBpY2tpbmdJbmZvLnBpY2tlZE1lc2gpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFwaWNraW5nSW5mbyB8fCAhcGlja2luZ0luZm8uaGl0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVBvaW50ZXJPdXQocG9pbnRlcklkLCBwaS50eXBlID09PSBQb2ludGVyRXZlbnRUeXBlcy5QT0lOVEVSVVApO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGlja2luZ0luZm8ucGlja2VkUG9pbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5vblBpY2tlZFBvaW50Q2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKHBpY2tpbmdJbmZvLnBpY2tlZFBvaW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRyb2wgPSA8Q29udHJvbDNEPnBpY2tpbmdJbmZvLnBpY2tlZE1lc2ghLnJlc2VydmVkRGF0YVN0b3JlPy5HVUkzRD8uY29udHJvbDtcclxuICAgICAgICBpZiAoISFjb250cm9sICYmICFjb250cm9sLl9wcm9jZXNzT2JzZXJ2YWJsZXMocGkudHlwZSwgcGlja2luZ0luZm8ucGlja2VkUG9pbnQhLCBwaWNraW5nSW5mby5vcmlnaW5NZXNoPy5wb3NpdGlvbiB8fCBudWxsLCBwb2ludGVySWQsIGJ1dHRvbkluZGV4KSkge1xyXG4gICAgICAgICAgICBpZiAocGkudHlwZSA9PT0gUG9pbnRlckV2ZW50VHlwZXMuUE9JTlRFUk1PVkUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0Q29udHJvbE92ZXJbcG9pbnRlcklkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RDb250cm9sT3Zlcltwb2ludGVySWRdLl9vblBvaW50ZXJPdXQodGhpcy5fbGFzdENvbnRyb2xPdmVyW3BvaW50ZXJJZF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9sYXN0Q29udHJvbE92ZXJbcG9pbnRlcklkXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBpLnR5cGUgPT09IFBvaW50ZXJFdmVudFR5cGVzLlBPSU5URVJVUCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGFzdENvbnRyb2xEb3duW3BvaW50ZXJFdmVudC5wb2ludGVySWRdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0Q29udHJvbERvd25bcG9pbnRlckV2ZW50LnBvaW50ZXJJZF0uZm9yY2VQb2ludGVyVXAoKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9sYXN0Q29udHJvbERvd25bcG9pbnRlckV2ZW50LnBvaW50ZXJJZF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwb2ludGVyRXZlbnQucG9pbnRlclR5cGUgPT09IFwidG91Y2hcIiB8fCAocG9pbnRlckV2ZW50LnBvaW50ZXJUeXBlID09PSBcInhyXCIgJiYgdGhpcy5fc2NlbmUuZ2V0RW5naW5lKCkuaG9zdEluZm9ybWF0aW9uLmlzTW9iaWxlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlUG9pbnRlck91dChwb2ludGVySWQsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSByb290IGNvbnRhaW5lclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHJvb3RDb250YWluZXIoKTogQ29udGFpbmVyM0Qge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yb290Q29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgZ2l2ZW4gY29udHJvbCBpcyBpbiB0aGUgcm9vdCBjaGlsZCBsaXN0XHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBkZWZpbmVzIHRoZSBjb250cm9sIHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBjb250cm9sIGlzIGluIHRoZSByb290IGNoaWxkIGxpc3RcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnRhaW5zQ29udHJvbChjb250cm9sOiBDb250cm9sM0QpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcm9vdENvbnRhaW5lci5jb250YWluc0NvbnRyb2woY29udHJvbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgY29udHJvbCB0byB0aGUgcm9vdCBjaGlsZCBsaXN0XHJcbiAgICAgKiBAcGFyYW0gY29udHJvbCBkZWZpbmVzIHRoZSBjb250cm9sIHRvIGFkZFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWFuYWdlclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkQ29udHJvbChjb250cm9sOiBDb250cm9sM0QpOiBHVUkzRE1hbmFnZXIge1xyXG4gICAgICAgIHRoaXMuX3Jvb3RDb250YWluZXIuYWRkQ29udHJvbChjb250cm9sKTtcclxuICAgICAgICBpZiAodGhpcy5fY3VzdG9tQ29udHJvbFNjYWxpbmcgIT09IDEpIHtcclxuICAgICAgICAgICAgY29udHJvbC5zY2FsaW5nLnNjYWxlSW5QbGFjZSh0aGlzLl9jdXN0b21Db250cm9sU2NhbGluZyk7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuX2lzU2NhbGVkQnlNYW5hZ2VyID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgY29udHJvbCBmcm9tIHRoZSByb290IGNoaWxkIGxpc3RcclxuICAgICAqIEBwYXJhbSBjb250cm9sIGRlZmluZXMgdGhlIGNvbnRyb2wgdG8gcmVtb3ZlXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBjb250YWluZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZUNvbnRyb2woY29udHJvbDogQ29udHJvbDNEKTogR1VJM0RNYW5hZ2VyIHtcclxuICAgICAgICB0aGlzLl9yb290Q29udGFpbmVyLnJlbW92ZUNvbnRyb2woY29udHJvbCk7XHJcbiAgICAgICAgaWYgKGNvbnRyb2wuX2lzU2NhbGVkQnlNYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wuc2NhbGluZy5zY2FsZUluUGxhY2UoMSAvIHRoaXMuX2N1c3RvbUNvbnRyb2xTY2FsaW5nKTtcclxuICAgICAgICAgICAgY29udHJvbC5faXNTY2FsZWRCeU1hbmFnZXIgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWxlYXNlcyBhbGwgYXNzb2NpYXRlZCByZXNvdXJjZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fcm9vdENvbnRhaW5lci5kaXNwb3NlKCk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgbWF0ZXJpYWxOYW1lIGluIHRoaXMuX3NoYXJlZE1hdGVyaWFscykge1xyXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9zaGFyZWRNYXRlcmlhbHMsIG1hdGVyaWFsTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zaGFyZWRNYXRlcmlhbHNbbWF0ZXJpYWxOYW1lXS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zaGFyZWRNYXRlcmlhbHMgPSB7fTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBtYXRlcmlhbE5hbWUgaW4gdGhpcy5fdG91Y2hTaGFyZWRNYXRlcmlhbHMpIHtcclxuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fdG91Y2hTaGFyZWRNYXRlcmlhbHMsIG1hdGVyaWFsTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90b3VjaFNoYXJlZE1hdGVyaWFsc1ttYXRlcmlhbE5hbWVdLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3RvdWNoU2hhcmVkTWF0ZXJpYWxzID0ge307XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9wb2ludGVyT3V0T2JzZXJ2ZXIgJiYgdGhpcy5fdXRpbGl0eUxheWVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3V0aWxpdHlMYXllci5vblBvaW50ZXJPdXRPYnNlcnZhYmxlLnJlbW92ZSh0aGlzLl9wb2ludGVyT3V0T2JzZXJ2ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9wb2ludGVyT3V0T2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vblBpY2tlZFBvaW50Q2hhbmdlZE9ic2VydmFibGUuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLm9uUGlja2luZ09ic2VydmFibGUuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgY29uc3QgdXRpbGl0eUxheWVyU2NlbmUgPSB0aGlzLl91dGlsaXR5TGF5ZXIgPyB0aGlzLl91dGlsaXR5TGF5ZXIudXRpbGl0eUxheWVyU2NlbmUgOiBudWxsO1xyXG5cclxuICAgICAgICBpZiAodXRpbGl0eUxheWVyU2NlbmUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BvaW50ZXJPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgdXRpbGl0eUxheWVyU2NlbmUub25Qb2ludGVyT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fcG9pbnRlck9ic2VydmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BvaW50ZXJPYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3NjZW5lKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zY2VuZURpc3Bvc2VPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2NlbmUub25EaXNwb3NlT2JzZXJ2YWJsZS5yZW1vdmUodGhpcy5fc2NlbmVEaXNwb3NlT2JzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2NlbmVEaXNwb3NlT2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdXRpbGl0eUxheWVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3V0aWxpdHlMYXllci5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1pbnRlcm5hbC1tb2R1bGVzICovXHJcbmV4cG9ydCAqIGZyb20gXCIuL2NvbnRyb2xzL2luZGV4XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21hdGVyaWFscy9pbmRleFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9naXptb3MvaW5kZXhcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2d1aTNETWFuYWdlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi92ZWN0b3IzV2l0aEluZm9cIjtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXHJcbmltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemVBc0NvbG9yNCwgc2VyaWFsaXplQXNWZWN0b3IzLCBzZXJpYWxpemVBc1RleHR1cmUsIHNlcmlhbGl6ZSwgZXhwYW5kVG9Qcm9wZXJ0eSwgc2VyaWFsaXplQXNDb2xvcjMgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHsgU2VyaWFsaXphdGlvbkhlbHBlciB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9ycy5zZXJpYWxpemF0aW9uXCI7XHJcbmltcG9ydCB0eXBlIHsgTWF0cml4IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHsgVmVjdG9yMywgVG1wVmVjdG9ycyB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB0eXBlIHsgQmFzZVRleHR1cmUgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvVGV4dHVyZXMvYmFzZVRleHR1cmVcIjtcclxuaW1wb3J0IHsgTWF0ZXJpYWxEZWZpbmVzIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL21hdGVyaWFsRGVmaW5lc1wiO1xyXG5pbXBvcnQgdHlwZSB7IElFZmZlY3RDcmVhdGlvbk9wdGlvbnMgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvZWZmZWN0XCI7XHJcbmltcG9ydCB7IFB1c2hNYXRlcmlhbCB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9wdXNoTWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgVmVydGV4QnVmZmVyIH0gZnJvbSBcImNvcmUvQnVmZmVycy9idWZmZXJcIjtcclxuaW1wb3J0IHR5cGUgeyBBYnN0cmFjdE1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvYWJzdHJhY3RNZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgU3ViTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9zdWJNZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9tZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHsgQ29sb3IzLCBDb2xvcjQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbG9yXCI7XHJcblxyXG5pbXBvcnQgXCIuL3NoYWRlcnMvZmx1ZW50LnZlcnRleFwiO1xyXG5pbXBvcnQgXCIuL3NoYWRlcnMvZmx1ZW50LmZyYWdtZW50XCI7XHJcbmltcG9ydCB7IFByZXBhcmVVbmlmb3Jtc0FuZFNhbXBsZXJzTGlzdCB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9tYXRlcmlhbEhlbHBlci5mdW5jdGlvbnNcIjtcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIEZsdWVudE1hdGVyaWFsRGVmaW5lcyBleHRlbmRzIE1hdGVyaWFsRGVmaW5lcyB7XHJcbiAgICBwdWJsaWMgSU5ORVJHTE9XID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgQk9SREVSID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgSE9WRVJMSUdIVCA9IGZhbHNlO1xyXG4gICAgcHVibGljIFRFWFRVUkUgPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMucmVidWlsZCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byByZW5kZXIgY29udHJvbHMgd2l0aCBmbHVlbnQgZGVzaWduXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmx1ZW50TWF0ZXJpYWwgZXh0ZW5kcyBQdXNoTWF0ZXJpYWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgaW5uZXIgZ2xvdyBpbnRlbnNpdHkuIEEgdmFsdWUgb2YgMCBtZWFucyBubyBnbG93IChkZWZhdWx0IGlzIDAuNSlcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBAZXhwYW5kVG9Qcm9wZXJ0eShcIl9tYXJrQWxsU3ViTWVzaGVzQXNUZXh0dXJlc0RpcnR5XCIpXHJcbiAgICBwdWJsaWMgaW5uZXJHbG93Q29sb3JJbnRlbnNpdHkgPSAwLjU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGlubmVyIGdsb3cgY29sb3IgKHdoaXRlIGJ5IGRlZmF1bHQpXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemVBc0NvbG9yMygpXHJcbiAgICBwdWJsaWMgaW5uZXJHbG93Q29sb3IgPSBuZXcgQ29sb3IzKDEuMCwgMS4wLCAxLjApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBhbGJlZG8gY29sb3IgKERlZmF1bHQgaXMgQ29sb3IzKDAuMywgMC4zNSwgMC40KSlcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZUFzQ29sb3IzKClcclxuICAgIHB1YmxpYyBhbGJlZG9Db2xvciA9IG5ldyBDb2xvcjMoMC4zLCAwLjM1LCAwLjQpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIGJvcmRlcnMgbXVzdCBiZSByZW5kZXJlZCAoZGVmYXVsdCBpcyBmYWxzZSlcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBAZXhwYW5kVG9Qcm9wZXJ0eShcIl9tYXJrQWxsU3ViTWVzaGVzQXNUZXh0dXJlc0RpcnR5XCIpXHJcbiAgICBwdWJsaWMgcmVuZGVyQm9yZGVycyA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGJvcmRlciB3aWR0aCAoZGVmYXVsdCBpcyAwLjUpXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJvcmRlcldpZHRoID0gMC41O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgc21vb3RoaW5nIHZhbHVlIGFwcGxpZWQgdG8gYm9yZGVyIGVkZ2VzICgwLjAyIGJ5IGRlZmF1bHQpXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGVkZ2VTbW9vdGhpbmdWYWx1ZSA9IDAuMDI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG1pbmltdW0gdmFsdWUgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBib3JkZXIgd2lkdGggKGRlZmF1bHQgaXMgMC4xKVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBib3JkZXJNaW5WYWx1ZSA9IDAuMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBob3ZlciBsaWdodCBtdXN0IGJlIHJlbmRlcmVkIChkZWZhdWx0IGlzIGZhbHNlKVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIEBleHBhbmRUb1Byb3BlcnR5KFwiX21hcmtBbGxTdWJNZXNoZXNBc1RleHR1cmVzRGlydHlcIilcclxuICAgIHB1YmxpYyByZW5kZXJIb3ZlckxpZ2h0ID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHJhZGl1cyB1c2VkIHRvIHJlbmRlciB0aGUgaG92ZXIgbGlnaHQgKGRlZmF1bHQgaXMgMC4wMSlcclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaG92ZXJSYWRpdXMgPSAwLjAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBjb2xvciB1c2VkIHRvIHJlbmRlciB0aGUgaG92ZXIgbGlnaHQgKGRlZmF1bHQgaXMgQ29sb3I0KDAuMywgMC4zLCAwLjMsIDEuMCkpXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemVBc0NvbG9yNCgpXHJcbiAgICBwdWJsaWMgaG92ZXJDb2xvciA9IG5ldyBDb2xvcjQoMC4zLCAwLjMsIDAuMywgMS4wKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaG92ZXIgbGlnaHQgcG9zaXRpb24gaW4gd29ybGQgc3BhY2UgKGRlZmF1bHQgaXMgVmVjdG9yMy5aZXJvKCkpXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemVBc1ZlY3RvcjMoKVxyXG4gICAgcHVibGljIGhvdmVyUG9zaXRpb24gPSBWZWN0b3IzLlplcm8oKTtcclxuXHJcbiAgICBAc2VyaWFsaXplQXNUZXh0dXJlKFwiYWxiZWRvVGV4dHVyZVwiKVxyXG4gICAgcHJpdmF0ZSBfYWxiZWRvVGV4dHVyZTogTnVsbGFibGU8QmFzZVRleHR1cmU+O1xyXG5cclxuICAgIC8qKiBHZXRzIG9yIHNldHMgdGhlIHRleHR1cmUgdG8gdXNlIGZvciBhbGJlZG8gY29sb3IgKi9cclxuICAgIEBleHBhbmRUb1Byb3BlcnR5KFwiX21hcmtBbGxTdWJNZXNoZXNBc1RleHR1cmVzQW5kTWlzY0RpcnR5XCIpXHJcbiAgICBwdWJsaWMgYWxiZWRvVGV4dHVyZTogTnVsbGFibGU8QmFzZVRleHR1cmU+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBGbHVlbnQgbWF0ZXJpYWxcclxuICAgICAqIEBwYXJhbSBuYW1lIGRlZmluZXMgdGhlIG5hbWUgb2YgdGhlIG1hdGVyaWFsXHJcbiAgICAgKiBAcGFyYW0gc2NlbmUgZGVmaW5lcyB0aGUgaG9zdGluZyBzY2VuZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHNjZW5lPzogU2NlbmUpIHtcclxuICAgICAgICBzdXBlcihuYW1lLCBzY2VuZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIG5lZWRBbHBoYUJsZW5kaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFscGhhICE9PSAxLjA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIG5lZWRBbHBoYVRlc3RpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRBbHBoYVRlc3RUZXh0dXJlKCk6IE51bGxhYmxlPEJhc2VUZXh0dXJlPiB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGlzUmVhZHlGb3JTdWJNZXNoKG1lc2g6IEFic3RyYWN0TWVzaCwgc3ViTWVzaDogU3ViTWVzaCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGRyYXdXcmFwcGVyID0gc3ViTWVzaC5fZHJhd1dyYXBwZXI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRnJvemVuKSB7XHJcbiAgICAgICAgICAgIGlmIChkcmF3V3JhcHBlci5lZmZlY3QgJiYgZHJhd1dyYXBwZXIuX3dhc1ByZXZpb3VzbHlSZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3ViTWVzaC5tYXRlcmlhbERlZmluZXMpIHtcclxuICAgICAgICAgICAgc3ViTWVzaC5tYXRlcmlhbERlZmluZXMgPSBuZXcgRmx1ZW50TWF0ZXJpYWxEZWZpbmVzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuICAgICAgICBjb25zdCBkZWZpbmVzID0gPEZsdWVudE1hdGVyaWFsRGVmaW5lcz5zdWJNZXNoLm1hdGVyaWFsRGVmaW5lcztcclxuICAgICAgICBpZiAoIXRoaXMuY2hlY2tSZWFkeU9uRXZlcnlDYWxsICYmIHN1Yk1lc2guZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLl9yZW5kZXJJZCA9PT0gc2NlbmUuZ2V0UmVuZGVySWQoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZWZpbmVzLl9hcmVUZXh0dXJlc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIGRlZmluZXMuSU5ORVJHTE9XID0gdGhpcy5pbm5lckdsb3dDb2xvckludGVuc2l0eSA+IDA7XHJcbiAgICAgICAgICAgIGRlZmluZXMuQk9SREVSID0gdGhpcy5yZW5kZXJCb3JkZXJzO1xyXG4gICAgICAgICAgICBkZWZpbmVzLkhPVkVSTElHSFQgPSB0aGlzLnJlbmRlckhvdmVyTGlnaHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWxiZWRvVGV4dHVyZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9hbGJlZG9UZXh0dXJlLmlzUmVhZHlPck5vdEJsb2NraW5nKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZXMuVEVYVFVSRSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzLlRFWFRVUkUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZW5naW5lID0gc2NlbmUuZ2V0RW5naW5lKCk7XHJcbiAgICAgICAgLy8gR2V0IGNvcnJlY3QgZWZmZWN0XHJcbiAgICAgICAgaWYgKGRlZmluZXMuaXNEaXJ0eSkge1xyXG4gICAgICAgICAgICBkZWZpbmVzLm1hcmtBc1Byb2Nlc3NlZCgpO1xyXG4gICAgICAgICAgICBzY2VuZS5yZXNldENhY2hlZE1hdGVyaWFsKCk7XHJcblxyXG4gICAgICAgICAgICAvL0F0dHJpYnV0ZXNcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlicyA9IFtWZXJ0ZXhCdWZmZXIuUG9zaXRpb25LaW5kXTtcclxuICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5Ob3JtYWxLaW5kKTtcclxuICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5VVktpbmQpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2hhZGVyTmFtZSA9IFwiZmx1ZW50XCI7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB1bmlmb3JtcyA9IFtcclxuICAgICAgICAgICAgICAgIFwid29ybGRcIixcclxuICAgICAgICAgICAgICAgIFwidmlld1Byb2plY3Rpb25cIixcclxuICAgICAgICAgICAgICAgIFwiaW5uZXJHbG93Q29sb3JcIixcclxuICAgICAgICAgICAgICAgIFwiYWxiZWRvQ29sb3JcIixcclxuICAgICAgICAgICAgICAgIFwiYm9yZGVyV2lkdGhcIixcclxuICAgICAgICAgICAgICAgIFwiZWRnZVNtb290aGluZ1ZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICBcInNjYWxlRmFjdG9yXCIsXHJcbiAgICAgICAgICAgICAgICBcImJvcmRlck1pblZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICBcImhvdmVyQ29sb3JcIixcclxuICAgICAgICAgICAgICAgIFwiaG92ZXJQb3NpdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJob3ZlclJhZGl1c1wiLFxyXG4gICAgICAgICAgICAgICAgXCJ0ZXh0dXJlTWF0cml4XCIsXHJcbiAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzYW1wbGVycyA9IFtcImFsYmVkb1NhbXBsZXJcIl07XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1CdWZmZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgUHJlcGFyZVVuaWZvcm1zQW5kU2FtcGxlcnNMaXN0KDxJRWZmZWN0Q3JlYXRpb25PcHRpb25zPntcclxuICAgICAgICAgICAgICAgIHVuaWZvcm1zTmFtZXM6IHVuaWZvcm1zLFxyXG4gICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICBzYW1wbGVyczogc2FtcGxlcnMsXHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzOiBkZWZpbmVzLFxyXG4gICAgICAgICAgICAgICAgbWF4U2ltdWx0YW5lb3VzTGlnaHRzOiA0LFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGpvaW4gPSBkZWZpbmVzLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHN1Yk1lc2guc2V0RWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgc2NlbmUuZ2V0RW5naW5lKCkuY3JlYXRlRWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRlck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgPElFZmZlY3RDcmVhdGlvbk9wdGlvbnM+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtc05hbWVzOiB1bmlmb3JtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZXJzOiBzYW1wbGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lczogam9pbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tzOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNvbXBpbGVkOiB0aGlzLm9uQ29tcGlsZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3I6IHRoaXMub25FcnJvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhQYXJhbWV0ZXJzOiB7IG1heFNpbXVsdGFuZW91c0xpZ2h0czogNCB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZW5naW5lXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgZGVmaW5lcyxcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsQ29udGV4dFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdWJNZXNoLmVmZmVjdCB8fCAhc3ViTWVzaC5lZmZlY3QuaXNSZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlZmluZXMuX3JlbmRlcklkID0gc2NlbmUuZ2V0UmVuZGVySWQoKTtcclxuICAgICAgICBkcmF3V3JhcHBlci5fd2FzUHJldmlvdXNseVJlYWR5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGJpbmRGb3JTdWJNZXNoKHdvcmxkOiBNYXRyaXgsIG1lc2g6IE1lc2gsIHN1Yk1lc2g6IFN1Yk1lc2gpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IDxGbHVlbnRNYXRlcmlhbERlZmluZXM+c3ViTWVzaC5tYXRlcmlhbERlZmluZXM7XHJcbiAgICAgICAgaWYgKCFkZWZpbmVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IHN1Yk1lc2guZWZmZWN0O1xyXG4gICAgICAgIGlmICghZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0ID0gZWZmZWN0O1xyXG5cclxuICAgICAgICAvLyBNYXRyaWNlc1xyXG4gICAgICAgIHRoaXMuYmluZE9ubHlXb3JsZE1hdHJpeCh3b3JsZCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldE1hdHJpeChcInZpZXdQcm9qZWN0aW9uXCIsIHNjZW5lLmdldFRyYW5zZm9ybU1hdHJpeCgpKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX211c3RSZWJpbmQoc2NlbmUsIGVmZmVjdCwgc3ViTWVzaCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldENvbG9yNChcImFsYmVkb0NvbG9yXCIsIHRoaXMuYWxiZWRvQ29sb3IsIHRoaXMuYWxwaGEpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuSU5ORVJHTE9XKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0Q29sb3I0KFwiaW5uZXJHbG93Q29sb3JcIiwgdGhpcy5pbm5lckdsb3dDb2xvciwgdGhpcy5pbm5lckdsb3dDb2xvckludGVuc2l0eSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLkJPUkRFUikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiYm9yZGVyV2lkdGhcIiwgdGhpcy5ib3JkZXJXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJlZGdlU21vb3RoaW5nVmFsdWVcIiwgdGhpcy5lZGdlU21vb3RoaW5nVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiYm9yZGVyTWluVmFsdWVcIiwgdGhpcy5ib3JkZXJNaW5WYWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbWVzaC5nZXRCb3VuZGluZ0luZm8oKS5ib3VuZGluZ0JveC5leHRlbmRTaXplLm11bHRpcGx5VG9SZWYobWVzaC5zY2FsaW5nLCBUbXBWZWN0b3JzLlZlY3RvcjNbMF0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjMoXCJzY2FsZUZhY3RvclwiLCBUbXBWZWN0b3JzLlZlY3RvcjNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5IT1ZFUkxJR0hUKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiaG92ZXJDb2xvclwiLCB0aGlzLmhvdmVyQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiaG92ZXJSYWRpdXNcIiwgdGhpcy5ob3ZlclJhZGl1cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcImhvdmVyUG9zaXRpb25cIiwgdGhpcy5ob3ZlclBvc2l0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuVEVYVFVSRSAmJiB0aGlzLl9hbGJlZG9UZXh0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VGV4dHVyZShcImFsYmVkb1NhbXBsZXJcIiwgdGhpcy5fYWxiZWRvVGV4dHVyZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRyaXggPSB0aGlzLl9hbGJlZG9UZXh0dXJlLmdldFRleHR1cmVNYXRyaXgoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRNYXRyaXgoXCJ0ZXh0dXJlTWF0cml4XCIsIG1hdHJpeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2FmdGVyQmluZChtZXNoLCB0aGlzLl9hY3RpdmVFZmZlY3QsIHN1Yk1lc2gpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRBY3RpdmVUZXh0dXJlcygpOiBCYXNlVGV4dHVyZVtdIHtcclxuICAgICAgICBjb25zdCBhY3RpdmVUZXh0dXJlcyA9IHN1cGVyLmdldEFjdGl2ZVRleHR1cmVzKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBhY3RpdmVUZXh0dXJlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgaGFzVGV4dHVyZSh0ZXh0dXJlOiBCYXNlVGV4dHVyZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChzdXBlci5oYXNUZXh0dXJlKHRleHR1cmUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKGZvcmNlRGlzcG9zZUVmZmVjdD86IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKGZvcmNlRGlzcG9zZUVmZmVjdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGNsb25lKG5hbWU6IHN0cmluZyk6IEZsdWVudE1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gU2VyaWFsaXphdGlvbkhlbHBlci5DbG9uZSgoKSA9PiBuZXcgRmx1ZW50TWF0ZXJpYWwobmFtZSwgdGhpcy5nZXRTY2VuZSgpKSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIHNlcmlhbGl6ZSgpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IHNlcmlhbGl6YXRpb25PYmplY3QgPSBzdXBlci5zZXJpYWxpemUoKTtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmN1c3RvbVR5cGUgPSBcIkJBQllMT04uR1VJLkZsdWVudE1hdGVyaWFsXCI7XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6YXRpb25PYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkZsdWVudE1hdGVyaWFsXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhdGljc1xyXG4gICAgcHVibGljIHN0YXRpYyBvdmVycmlkZSBQYXJzZShzb3VyY2U6IGFueSwgc2NlbmU6IFNjZW5lLCByb290VXJsOiBzdHJpbmcpOiBGbHVlbnRNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIFNlcmlhbGl6YXRpb25IZWxwZXIuUGFyc2UoKCkgPT4gbmV3IEZsdWVudE1hdGVyaWFsKHNvdXJjZS5uYW1lLCBzY2VuZSksIHNvdXJjZSwgc2NlbmUsIHJvb3RVcmwpO1xyXG4gICAgfVxyXG59XHJcblxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuRmx1ZW50TWF0ZXJpYWxcIiwgRmx1ZW50TWF0ZXJpYWwpO1xyXG4iLCJleHBvcnQgKiBmcm9tIFwiLi9mbHVlbnRNYXRlcmlhbFwiO1xyXG4iLCIvLyBEbyBub3QgZWRpdC5cbmltcG9ydCB7IFNoYWRlclN0b3JlIH0gZnJvbSBcImNvcmUvRW5naW5lcy9zaGFkZXJTdG9yZVwiO1xuXG5jb25zdCBuYW1lID0gXCJmbHVlbnRQaXhlbFNoYWRlclwiO1xuY29uc3Qgc2hhZGVyID0gYHByZWNpc2lvbiBoaWdocCBmbG9hdDt2YXJ5aW5nIHZlYzIgdlVWO3VuaWZvcm0gdmVjNCBhbGJlZG9Db2xvcjtcbiNpZmRlZiBJTk5FUkdMT1dcbnVuaWZvcm0gdmVjNCBpbm5lckdsb3dDb2xvcjtcbiNlbmRpZlxuI2lmZGVmIEJPUkRFUlxudmFyeWluZyB2ZWMyIHNjYWxlSW5mbzt1bmlmb3JtIGZsb2F0IGVkZ2VTbW9vdGhpbmdWYWx1ZTt1bmlmb3JtIGZsb2F0IGJvcmRlck1pblZhbHVlO1xuI2VuZGlmXG4jaWZkZWYgSE9WRVJMSUdIVFxudmFyeWluZyB2ZWMzIHdvcmxkUG9zaXRpb247dW5pZm9ybSB2ZWMzIGhvdmVyUG9zaXRpb247dW5pZm9ybSB2ZWM0IGhvdmVyQ29sb3I7dW5pZm9ybSBmbG9hdCBob3ZlclJhZGl1cztcbiNlbmRpZlxuI2lmZGVmIFRFWFRVUkVcbnVuaWZvcm0gc2FtcGxlcjJEIGFsYmVkb1NhbXBsZXI7dW5pZm9ybSBtYXQ0IHRleHR1cmVNYXRyaXg7dmVjMiBmaW5hbFVWO1xuI2VuZGlmXG52b2lkIG1haW4odm9pZCkge3ZlYzMgYWxiZWRvPWFsYmVkb0NvbG9yLnJnYjtmbG9hdCBhbHBoYT1hbGJlZG9Db2xvci5hO1xuI2lmZGVmIFRFWFRVUkVcbmZpbmFsVVY9dmVjMih0ZXh0dXJlTWF0cml4KnZlYzQodlVWLDEuMCwwLjApKTthbGJlZG89dGV4dHVyZTJEKGFsYmVkb1NhbXBsZXIsZmluYWxVVikucmdiO1xuI2VuZGlmXG4jaWZkZWYgSE9WRVJMSUdIVFxuZmxvYXQgcG9pbnRUb0hvdmVyPSgxLjAtY2xhbXAobGVuZ3RoKGhvdmVyUG9zaXRpb24td29ybGRQb3NpdGlvbikvaG92ZXJSYWRpdXMsMC4sMS4pKSpob3ZlckNvbG9yLmE7YWxiZWRvPWNsYW1wKGFsYmVkbytob3ZlckNvbG9yLnJnYipwb2ludFRvSG92ZXIsMC4sMS4pO1xuI2Vsc2VcbmZsb2F0IHBvaW50VG9Ib3Zlcj0xLjA7XG4jZW5kaWZcbiNpZmRlZiBCT1JERVIgXG5mbG9hdCBib3JkZXJQb3dlcj0xMC4wO2Zsb2F0IGludmVyc2VCb3JkZXJQb3dlcj0xLjAvYm9yZGVyUG93ZXI7dmVjMyBib3JkZXJDb2xvcj1hbGJlZG8qYm9yZGVyUG93ZXI7dmVjMiBkaXN0YW5jZVRvRWRnZTtkaXN0YW5jZVRvRWRnZS54PWFicyh2VVYueC0wLjUpKjIuMDtkaXN0YW5jZVRvRWRnZS55PWFicyh2VVYueS0wLjUpKjIuMDtmbG9hdCBib3JkZXJWYWx1ZT1tYXgoc21vb3Roc3RlcChzY2FsZUluZm8ueC1lZGdlU21vb3RoaW5nVmFsdWUsc2NhbGVJbmZvLngrZWRnZVNtb290aGluZ1ZhbHVlLGRpc3RhbmNlVG9FZGdlLngpLFxuc21vb3Roc3RlcChzY2FsZUluZm8ueS1lZGdlU21vb3RoaW5nVmFsdWUsc2NhbGVJbmZvLnkrZWRnZVNtb290aGluZ1ZhbHVlLGRpc3RhbmNlVG9FZGdlLnkpKTtib3JkZXJDb2xvcj1ib3JkZXJDb2xvcipib3JkZXJWYWx1ZSptYXgoYm9yZGVyTWluVmFsdWUqaW52ZXJzZUJvcmRlclBvd2VyLHBvaW50VG9Ib3Zlcik7IFxuYWxiZWRvKz1ib3JkZXJDb2xvcjthbHBoYT1tYXgoYWxwaGEsYm9yZGVyVmFsdWUpO1xuI2VuZGlmXG4jaWZkZWYgSU5ORVJHTE9XXG52ZWMyIHV2R2xvdz0odlVWLXZlYzIoMC41LDAuNSkpKihpbm5lckdsb3dDb2xvci5hKjIuMCk7dXZHbG93PXV2R2xvdyp1dkdsb3c7dXZHbG93PXV2R2xvdyp1dkdsb3c7YWxiZWRvKz1taXgodmVjMygwLjAsMC4wLDAuMCksaW5uZXJHbG93Q29sb3IucmdiLHV2R2xvdy54K3V2R2xvdy55KTsgXG4jZW5kaWZcbmdsX0ZyYWdDb2xvcj12ZWM0KGFsYmVkbyxhbHBoYSk7fWA7XG4vLyBTaWRlZWZmZWN0XG5TaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVbbmFtZV0gPSBzaGFkZXI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZmx1ZW50UGl4ZWxTaGFkZXIgPSB7IG5hbWUsIHNoYWRlciB9O1xuIiwiLy8gRG8gbm90IGVkaXQuXG5pbXBvcnQgeyBTaGFkZXJTdG9yZSB9IGZyb20gXCJjb3JlL0VuZ2luZXMvc2hhZGVyU3RvcmVcIjtcblxuY29uc3QgbmFtZSA9IFwiZmx1ZW50VmVydGV4U2hhZGVyXCI7XG5jb25zdCBzaGFkZXIgPSBgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO2F0dHJpYnV0ZSB2ZWMzIG5vcm1hbDthdHRyaWJ1dGUgdmVjMiB1djt1bmlmb3JtIG1hdDQgd29ybGQ7dW5pZm9ybSBtYXQ0IHZpZXdQcm9qZWN0aW9uO3ZhcnlpbmcgdmVjMiB2VVY7XG4jaWZkZWYgQk9SREVSXG52YXJ5aW5nIHZlYzIgc2NhbGVJbmZvO3VuaWZvcm0gZmxvYXQgYm9yZGVyV2lkdGg7dW5pZm9ybSB2ZWMzIHNjYWxlRmFjdG9yO1xuI2VuZGlmXG4jaWZkZWYgSE9WRVJMSUdIVFxudmFyeWluZyB2ZWMzIHdvcmxkUG9zaXRpb247XG4jZW5kaWZcbnZvaWQgbWFpbih2b2lkKSB7dlVWPXV2O1xuI2lmZGVmIEJPUkRFUlxudmVjMyBzY2FsZT1zY2FsZUZhY3RvcjtmbG9hdCBtaW5TY2FsZT1taW4obWluKHNjYWxlLngsc2NhbGUueSksc2NhbGUueik7ZmxvYXQgbWF4U2NhbGU9bWF4KG1heChzY2FsZS54LHNjYWxlLnkpLHNjYWxlLnopO2Zsb2F0IG1pbk92ZXJNaWRkbGVTY2FsZT1taW5TY2FsZS8oc2NhbGUueCtzY2FsZS55K3NjYWxlLnotbWluU2NhbGUtbWF4U2NhbGUpO2Zsb2F0IGFyZWFZWj1zY2FsZS55KnNjYWxlLno7ZmxvYXQgYXJlYVhaPXNjYWxlLngqc2NhbGUuejtmbG9hdCBhcmVhWFk9c2NhbGUueCpzY2FsZS55O2Zsb2F0IHNjYWxlZEJvcmRlcldpZHRoPWJvcmRlcldpZHRoOyBcbmlmIChhYnMobm9ybWFsLngpPT0xLjApIFxue3NjYWxlLng9c2NhbGUueTtzY2FsZS55PXNjYWxlLno7aWYgKGFyZWFZWj5hcmVhWFogJiYgYXJlYVlaPmFyZWFYWSlcbntzY2FsZWRCb3JkZXJXaWR0aCo9bWluT3Zlck1pZGRsZVNjYWxlO319XG5lbHNlIGlmIChhYnMobm9ybWFsLnkpPT0xLjApIFxue3NjYWxlLng9c2NhbGUuejtpZiAoYXJlYVhaPmFyZWFYWSAmJiBhcmVhWFo+YXJlYVlaKVxue3NjYWxlZEJvcmRlcldpZHRoKj1taW5PdmVyTWlkZGxlU2NhbGU7fX1cbmVsc2UgXG57aWYgKGFyZWFYWT5hcmVhWVogJiYgYXJlYVhZPmFyZWFYWilcbntzY2FsZWRCb3JkZXJXaWR0aCo9bWluT3Zlck1pZGRsZVNjYWxlO319XG5mbG9hdCBzY2FsZVJhdGlvPW1pbihzY2FsZS54LHNjYWxlLnkpL21heChzY2FsZS54LHNjYWxlLnkpO2lmIChzY2FsZS54PnNjYWxlLnkpXG57c2NhbGVJbmZvLng9MS4wLShzY2FsZWRCb3JkZXJXaWR0aCpzY2FsZVJhdGlvKTtzY2FsZUluZm8ueT0xLjAtc2NhbGVkQm9yZGVyV2lkdGg7fVxuZWxzZVxue3NjYWxlSW5mby54PTEuMC1zY2FsZWRCb3JkZXJXaWR0aDtzY2FsZUluZm8ueT0xLjAtKHNjYWxlZEJvcmRlcldpZHRoKnNjYWxlUmF0aW8pO30gXG4jZW5kaWYgXG52ZWM0IHdvcmxkUG9zPXdvcmxkKnZlYzQocG9zaXRpb24sMS4wKTtcbiNpZmRlZiBIT1ZFUkxJR0hUXG53b3JsZFBvc2l0aW9uPXdvcmxkUG9zLnh5ejtcbiNlbmRpZlxuZ2xfUG9zaXRpb249dmlld1Byb2plY3Rpb24qd29ybGRQb3M7fVxuYDtcbi8vIFNpZGVlZmZlY3RcblNoYWRlclN0b3JlLlNoYWRlcnNTdG9yZVtuYW1lXSA9IHNoYWRlcjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBmbHVlbnRWZXJ0ZXhTaGFkZXIgPSB7IG5hbWUsIHNoYWRlciB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXHJcbmltcG9ydCB0eXBlIHsgTnVsbGFibGUgfSBmcm9tIFwiY29yZS90eXBlc1wiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUsIHNlcmlhbGl6ZUFzVmVjdG9yMyB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9yc1wiO1xyXG5pbXBvcnQgeyBTZXJpYWxpemF0aW9uSGVscGVyIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzLnNlcmlhbGl6YXRpb25cIjtcclxuaW1wb3J0IHR5cGUgeyBNYXRyaXggfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzLCBWZWN0b3I0IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHR5cGUgeyBJQW5pbWF0YWJsZSB9IGZyb20gXCJjb3JlL0FuaW1hdGlvbnMvYW5pbWF0YWJsZS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHR5cGUgeyBCYXNlVGV4dHVyZSB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9UZXh0dXJlcy9iYXNlVGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL1RleHR1cmVzL3RleHR1cmVcIjtcclxuaW1wb3J0IHsgTWF0ZXJpYWxEZWZpbmVzIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL21hdGVyaWFsRGVmaW5lc1wiO1xyXG5pbXBvcnQgdHlwZSB7IElFZmZlY3RDcmVhdGlvbk9wdGlvbnMgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvZWZmZWN0XCI7XHJcbmltcG9ydCB7IFB1c2hNYXRlcmlhbCB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9wdXNoTWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgVmVydGV4QnVmZmVyIH0gZnJvbSBcImNvcmUvQnVmZmVycy9idWZmZXJcIjtcclxuaW1wb3J0IHR5cGUgeyBBYnN0cmFjdE1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvYWJzdHJhY3RNZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgU3ViTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9zdWJNZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9tZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHsgQ29sb3I0IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC5jb2xvclwiO1xyXG5pbXBvcnQgeyBFZmZlY3RGYWxsYmFja3MgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvZWZmZWN0RmFsbGJhY2tzXCI7XHJcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCJjb3JlL0VuZ2luZXMvY29uc3RhbnRzXCI7XHJcblxyXG5pbXBvcnQgXCIuL3NoYWRlcnMvZmx1ZW50QmFja3BsYXRlLmZyYWdtZW50XCI7XHJcbmltcG9ydCBcIi4vc2hhZGVycy9mbHVlbnRCYWNrcGxhdGUudmVydGV4XCI7XHJcbmltcG9ydCB7IEhhbmRsZUZhbGxiYWNrc0ZvclNoYWRvd3MsIFByZXBhcmVBdHRyaWJ1dGVzRm9ySW5zdGFuY2VzLCBQcmVwYXJlRGVmaW5lc0ZvckF0dHJpYnV0ZXMsIFByZXBhcmVVbmlmb3Jtc0FuZFNhbXBsZXJzTGlzdCB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9tYXRlcmlhbEhlbHBlci5mdW5jdGlvbnNcIjtcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuY2xhc3MgRmx1ZW50QmFja3BsYXRlTWF0ZXJpYWxEZWZpbmVzIGV4dGVuZHMgTWF0ZXJpYWxEZWZpbmVzIHtcclxuICAgIHB1YmxpYyBCTE9CX0VOQUJMRSA9IHRydWU7XHJcbiAgICBwdWJsaWMgQkxPQl9FTkFCTEVfMiA9IHRydWU7XHJcbiAgICBwdWJsaWMgU01PT1RIX0VER0VTID0gdHJ1ZTtcclxuICAgIHB1YmxpYyBJUklERVNDRU5UX01BUF9FTkFCTEUgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5fbmVlZE5vcm1hbHMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmVidWlsZCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byByZW5kZXIgc3F1YXJlIGJ1dHRvbnMgd2l0aCBmbHVlbnQgZGVzaWduXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmx1ZW50QmFja3BsYXRlTWF0ZXJpYWwgZXh0ZW5kcyBQdXNoTWF0ZXJpYWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBVUkwgcG9pbnRpbmcgdG8gdGhlIHRleHR1cmUgdXNlZCB0byBkZWZpbmUgdGhlIGNvbG9yaW5nIGZvciB0aGUgZmx1ZW50IGJsb2IgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEJMT0JfVEVYVFVSRV9VUkwgPSBcImh0dHBzOi8vYXNzZXRzLmJhYnlsb25qcy5jb20vbWVzaGVzL01SVEsvbXJ0ay1mbHVlbnQtYmFja3BsYXRlLWJsb2IucG5nXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVUkwgcG9pbnRpbmcgdG8gdGhlIHRleHR1cmUgdXNlZCB0byBkZWZpbmUgaXJpZGVzY2VudCBtYXAuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgSU1fVEVYVFVSRV9VUkwgPSBcImh0dHBzOi8vYXNzZXRzLmJhYnlsb25qcy5jb20vbWVzaGVzL01SVEsvbXJ0ay1mbHVlbnQtYmFja3BsYXRlLWlyaWRlc2NlbmNlLnBuZ1wiO1xyXG5cclxuICAgIHByaXZhdGUgX2Jsb2JUZXh0dXJlOiBUZXh0dXJlO1xyXG4gICAgcHJpdmF0ZSBfaXJpZGVzY2VudE1hcDogVGV4dHVyZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY29ybmVyIHJhZGl1cyBvbiB0aGUgYmFja3BsYXRlLiBCZXN0IHRvIGtlZXAgdGhpcyB2YWx1ZSBiZXR3ZWVuIDAuMDEgYW5kIDAuNS4gRGVmYXVsdCBpcyAwLjAzLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByYWRpdXMgPSAwLjAzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsaW5lIHdpZHRoIG9mIHRoZSBiYWNrcGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGxpbmVXaWR0aCA9IDAuMDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgd2hldGhlciB0byB1c2UgYWJzb2x1dGUgc2l6ZXMgd2hlbiBjYWxjdWxhdGluZyBlZmZlY3RzIG9uIHRoZSBiYWNrcGxhdGUuXHJcbiAgICAgKiBTaW5jZSBkZXNrdG9wIGFuZCBWUi9BUiBoYXZlIGRpZmZlcmVudCByZWxhdGl2ZSBzaXplcywgaXQncyB1c3VhbGx5IGJlc3QgdG8ga2VlcCB0aGlzIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBhYnNvbHV0ZVNpemVzID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9maWx0ZXJXaWR0aCA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJhc2UgY29sb3Igb2YgdGhlIGJhY2twbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmFzZUNvbG9yID0gbmV3IENvbG9yNCgwLjAzOTIxNTcsIDAuMDY2NjY2NywgMC4yMDc4NDMsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsaW5lIGNvbG9yIG9mIHRoZSBiYWNrcGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGxpbmVDb2xvciA9IG5ldyBDb2xvcjQoMC4xNDkwMiwgMC4xMzMzMzMsIDAuMzg0MzE0LCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBmbHVlbnQgaG92ZXIgZ2xvdyBlZmZlY3QuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JJbnRlbnNpdHkgPSAwLjk4O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBmYXIgc2l6ZSBvZiB0aGUgZmx1ZW50IGhvdmVyIGdsb3cgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iRmFyU2l6ZSA9IDAuMDQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGRpc3RhbmNlIGNvbnNpZGVyZWQgXCJuZWFyXCIgdG8gdGhlIGJhY2twbGF0ZSwgd2hpY2ggY29udHJvbHMgdGhlIHNpemUgb2YgdGhlIGZsdWVudCBob3ZlciBnbG93IGVmZmVjdCAoc2VlIGJsb2JOZWFyU2l6ZSkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JOZWFyRGlzdGFuY2UgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBkaXN0YW5jZSBjb25zaWRlcmVkIFwiZmFyXCIgZnJvbSB0aGUgYmFja3BsYXRlLCB3aGljaCBjb250cm9scyB0aGUgc2l6ZSBvZiB0aGUgZmx1ZW50IGhvdmVyIGdsb3cgZWZmZWN0IChzZWUgYmxvYkZhclNpemUpLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iRmFyRGlzdGFuY2UgPSAwLjA4O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsZW5ndGggb2YgdGhlIGZsdWVudCBob3ZlciBnbG93IGVmZmVjdCBmYWRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iRmFkZUxlbmd0aCA9IDAuMDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHNpemUgb2YgdGhlIGZsdWVudCBob3ZlciBnbG93IGVmZmVjdCB3aGVuIHRoZSBsZWZ0IHBvaW50ZXIgaXMgY29uc2lkZXJlZCBcIm5lYXJcIiB0byB0aGUgYmFja3BsYXRlIChzZWUgYmxvYk5lYXJEaXN0YW5jZSkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JOZWFyU2l6ZSA9IDAuMjI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHByb2dyZXNzIG9mIHRoZSBmbHVlbnQgaG92ZXIgZ2xvdyBlZmZlY3Qgc2VsZWN0aW9uIGFuaW1hdGlvbiBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHBvaW50ZXIgKDAuMCAtIDEuMCkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JQdWxzZSA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG9wYWNpdHkgb2YgdGhlIGZsdWVudCBob3ZlciBnbG93IGVmZmVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHBvaW50ZXIgKDAuMCAtIDEuMCkuIERlZmF1bHQgaXMgMC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYkZhZGUgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzaXplIG9mIHRoZSBmbHVlbnQgaG92ZXIgZ2xvdyBlZmZlY3Qgd2hlbiB0aGUgcmlnaHQgcG9pbnRlciBpcyBjb25zaWRlcmVkIFwibmVhclwiIHRvIHRoZSBiYWNrcGxhdGUgKHNlZSBibG9iTmVhckRpc3RhbmNlKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYk5lYXJTaXplMiA9IDAuMjI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHByb2dyZXNzIG9mIHRoZSBmbHVlbnQgaG92ZXIgZ2xvdyBlZmZlY3Qgc2VsZWN0aW9uIGFuaW1hdGlvbiBjb3JyZXNwb25kaW5nIHRvIHRoZSByaWdodCBwb2ludGVyICgwLjAgLSAxLjApLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iUHVsc2UyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgb3BhY2l0eSBvZiB0aGUgZmx1ZW50IGhvdmVyIGdsb3cgZWZmZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJpZ2h0IHBvaW50ZXIgKDAuMCAtIDEuMCkuIERlZmF1bHQgaXMgMC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYkZhZGUyID0gMDtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3JhdGUgPSAwLjEzNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY29sb3Igb2YgdGhlIGhpZ2hsaWdodHMgb24gdGhlIGJhY2twbGF0ZSBsaW5lLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBoaWdobGlnaHRDb2xvciA9IG5ldyBDb2xvcjQoMC45OCwgMC45OCwgMC45OCwgMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHdpZHRoIG9mIHRoZSBoaWdobGlnaHRzIG9uIHRoZSBiYWNrcGxhdGUgbGluZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaGlnaGxpZ2h0V2lkdGggPSAwLjI1O1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfaGlnaGxpZ2h0VHJhbnNmb3JtID0gbmV3IFZlY3RvcjQoMSwgMSwgMCwgMCk7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9oaWdobGlnaHQgPSAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBpbnRlbnNpdHkgb2YgdGhlIGlyaWRlc2NlbmNlIGVmZmVjdC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaXJpZGVzY2VuY2VJbnRlbnNpdHkgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBpbnRlbnNpdHkgb2YgdGhlIGlyaWRlc2NlbmNlIGVmZmVjdCBvbiB0aGUgYmFja3BsYXRlIGVkZ2VzLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBpcmlkZXNjZW5jZUVkZ2VJbnRlbnNpdHkgPSAxO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfYW5nbGUgPSAtNDU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG9wYWNpdHkgb2YgdGhlIGJhY2twbGF0ZSAoMC4wIC0gMS4wKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZmFkZU91dCA9IDE7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9yZWZsZWN0ZWQgPSB0cnVlO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfZnJlcXVlbmN5ID0gMTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3ZlcnRpY2FsT2Zmc2V0ID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgd29ybGQtc3BhY2UgcG9zaXRpb24gb2YgdGhlIHRpcCBvZiB0aGUgbGVmdCBpbmRleCBmaW5nZXIuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemVBc1ZlY3RvcjMoKVxyXG4gICAgcHVibGljIGdsb2JhbExlZnRJbmRleFRpcFBvc2l0aW9uID0gVmVjdG9yMy5aZXJvKCk7XHJcbiAgICBwcml2YXRlIF9nbG9iYWxMZWZ0SW5kZXhUaXBQb3NpdGlvbjQgPSBWZWN0b3I0Llplcm8oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgd29ybGQtc3BhY2UgcG9zaXRpb24gb2YgdGhlIHRpcCBvZiB0aGUgcmlnaHQgaW5kZXggZmluZ2VyLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplQXNWZWN0b3IzKClcclxuICAgIHB1YmxpYyBnbG9iYWxSaWdodEluZGV4VGlwUG9zaXRpb24gPSBWZWN0b3IzLlplcm8oKTtcclxuICAgIHByaXZhdGUgX2dsb2JhbFJpZ2h0SW5kZXhUaXBQb3NpdGlvbjQgPSBWZWN0b3I0Llplcm8oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHNjZW5lPzogU2NlbmUpIHtcclxuICAgICAgICBzdXBlcihuYW1lLCBzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5hbHBoYU1vZGUgPSBDb25zdGFudHMuQUxQSEFfRElTQUJMRTtcclxuICAgICAgICB0aGlzLmJhY2tGYWNlQ3VsbGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLl9ibG9iVGV4dHVyZSA9IG5ldyBUZXh0dXJlKEZsdWVudEJhY2twbGF0ZU1hdGVyaWFsLkJMT0JfVEVYVFVSRV9VUkwsIHRoaXMuZ2V0U2NlbmUoKSwgdHJ1ZSwgZmFsc2UsIFRleHR1cmUuTkVBUkVTVF9TQU1QTElOR01PREUpO1xyXG4gICAgICAgIHRoaXMuX2lyaWRlc2NlbnRNYXAgPSBuZXcgVGV4dHVyZShGbHVlbnRCYWNrcGxhdGVNYXRlcmlhbC5JTV9URVhUVVJFX1VSTCwgdGhpcy5nZXRTY2VuZSgpLCB0cnVlLCBmYWxzZSwgVGV4dHVyZS5ORUFSRVNUX1NBTVBMSU5HTU9ERSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIG5lZWRBbHBoYUJsZW5kaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgbmVlZEFscGhhVGVzdGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldEFscGhhVGVzdFRleHR1cmUoKTogTnVsbGFibGU8QmFzZVRleHR1cmU+IHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgaXNSZWFkeUZvclN1Yk1lc2gobWVzaDogQWJzdHJhY3RNZXNoLCBzdWJNZXNoOiBTdWJNZXNoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZHJhd1dyYXBwZXIgPSBzdWJNZXNoLl9kcmF3V3JhcHBlcjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNGcm96ZW4pIHtcclxuICAgICAgICAgICAgaWYgKGRyYXdXcmFwcGVyLmVmZmVjdCAmJiBkcmF3V3JhcHBlci5fd2FzUHJldmlvdXNseVJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcykge1xyXG4gICAgICAgICAgICBzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcyA9IG5ldyBGbHVlbnRCYWNrcGxhdGVNYXRlcmlhbERlZmluZXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSA8Rmx1ZW50QmFja3BsYXRlTWF0ZXJpYWxEZWZpbmVzPnN1Yk1lc2gubWF0ZXJpYWxEZWZpbmVzO1xyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5nZXRTY2VuZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNSZWFkeUZvclN1Yk1lc2goc3ViTWVzaCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBzY2VuZS5nZXRFbmdpbmUoKTtcclxuXHJcbiAgICAgICAgLy8gQXR0cmlic1xyXG4gICAgICAgIFByZXBhcmVEZWZpbmVzRm9yQXR0cmlidXRlcyhtZXNoLCBkZWZpbmVzLCBmYWxzZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyBHZXQgY29ycmVjdCBlZmZlY3RcclxuICAgICAgICBpZiAoZGVmaW5lcy5pc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIGRlZmluZXMubWFya0FzUHJvY2Vzc2VkKCk7XHJcblxyXG4gICAgICAgICAgICBzY2VuZS5yZXNldENhY2hlZE1hdGVyaWFsKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBGYWxsYmFja3NcclxuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tzID0gbmV3IEVmZmVjdEZhbGxiYWNrcygpO1xyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5GT0cpIHtcclxuICAgICAgICAgICAgICAgIGZhbGxiYWNrcy5hZGRGYWxsYmFjaygxLCBcIkZPR1wiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgSGFuZGxlRmFsbGJhY2tzRm9yU2hhZG93cyhkZWZpbmVzLCBmYWxsYmFja3MpO1xyXG5cclxuICAgICAgICAgICAgZGVmaW5lcy5JTUFHRVBST0NFU1NJTkdQT1NUUFJPQ0VTUyA9IHNjZW5lLmltYWdlUHJvY2Vzc2luZ0NvbmZpZ3VyYXRpb24uYXBwbHlCeVBvc3RQcm9jZXNzO1xyXG5cclxuICAgICAgICAgICAgLy9BdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnMgPSBbVmVydGV4QnVmZmVyLlBvc2l0aW9uS2luZF07XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5OT1JNQUwpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuTm9ybWFsS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlVWMSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5VVktpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5VVjIpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVVYyS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlZFUlRFWENPTE9SKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLkNvbG9yS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlRBTkdFTlQpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVGFuZ2VudEtpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQcmVwYXJlQXR0cmlidXRlc0Zvckluc3RhbmNlcyhhdHRyaWJzLCBkZWZpbmVzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIExlZ2FjeSBicm93c2VyIHBhdGNoXHJcbiAgICAgICAgICAgIGNvbnN0IHNoYWRlck5hbWUgPSBcImZsdWVudEJhY2twbGF0ZVwiO1xyXG4gICAgICAgICAgICBjb25zdCBqb2luID0gZGVmaW5lcy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBbXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkXCIsXHJcbiAgICAgICAgICAgICAgICBcInZpZXdQcm9qZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcImNhbWVyYVBvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9MaW5lX1dpZHRoX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQWJzb2x1dGVfU2l6ZXNfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9GaWx0ZXJfV2lkdGhfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CYXNlX0NvbG9yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfTGluZV9Db2xvcl9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JhZGl1c19Ub3BfTGVmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JhZGl1c19Ub3BfUmlnaHRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfQm90dG9tX0xlZnRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfQm90dG9tX1JpZ2h0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9Qb3NpdGlvbl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfSW50ZW5zaXR5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9OZWFyX1NpemVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0Zhcl9TaXplX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9OZWFyX0Rpc3RhbmNlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYXJfRGlzdGFuY2VfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0ZhZGVfTGVuZ3RoX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9QdWxzZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfRmFkZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfVGV4dHVyZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfUG9zaXRpb25fMl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfTmVhcl9TaXplXzJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX1B1bHNlXzJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0ZhZGVfMl9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JhdGVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9IaWdobGlnaHRfQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9IaWdobGlnaHRfV2lkdGhfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9IaWdobGlnaHRfVHJhbnNmb3JtX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSGlnaGxpZ2h0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSXJpZGVzY2VuY2VfSW50ZW5zaXR5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSXJpZGVzY2VuY2VfRWRnZV9JbnRlbnNpdHlfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9BbmdsZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0ZhZGVfT3V0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmVmbGVjdGVkX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfRnJlcXVlbmN5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfVmVydGljYWxfT2Zmc2V0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSXJpZGVzY2VudF9NYXBfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Vc2VfR2xvYmFsX0xlZnRfSW5kZXhfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Vc2VfR2xvYmFsX1JpZ2h0X0luZGV4X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb25cIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvblwiLFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBjb25zdCBzYW1wbGVyczogc3RyaW5nW10gPSBbXCJfQmxvYl9UZXh0dXJlX1wiLCBcIl9JcmlkZXNjZW50X01hcF9cIl07XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1CdWZmZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgUHJlcGFyZVVuaWZvcm1zQW5kU2FtcGxlcnNMaXN0KDxJRWZmZWN0Q3JlYXRpb25PcHRpb25zPntcclxuICAgICAgICAgICAgICAgIHVuaWZvcm1zTmFtZXM6IHVuaWZvcm1zLFxyXG4gICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICBzYW1wbGVyczogc2FtcGxlcnMsXHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzOiBkZWZpbmVzLFxyXG4gICAgICAgICAgICAgICAgbWF4U2ltdWx0YW5lb3VzTGlnaHRzOiA0LFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHN1Yk1lc2guc2V0RWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgc2NlbmUuZ2V0RW5naW5lKCkuY3JlYXRlRWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRlck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgPElFZmZlY3RDcmVhdGlvbk9wdGlvbnM+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtc05hbWVzOiB1bmlmb3JtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZXJzOiBzYW1wbGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lczogam9pbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tzOiBmYWxsYmFja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29tcGlsZWQ6IHRoaXMub25Db21waWxlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogdGhpcy5vbkVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleFBhcmFtZXRlcnM6IHsgbWF4U2ltdWx0YW5lb3VzTGlnaHRzOiA0IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBlbmdpbmVcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWxDb250ZXh0XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghc3ViTWVzaC5lZmZlY3QgfHwgIXN1Yk1lc2guZWZmZWN0LmlzUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZWZpbmVzLl9yZW5kZXJJZCA9IHNjZW5lLmdldFJlbmRlcklkKCk7XHJcbiAgICAgICAgZHJhd1dyYXBwZXIuX3dhc1ByZXZpb3VzbHlSZWFkeSA9IHRydWU7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBiaW5kRm9yU3ViTWVzaCh3b3JsZDogTWF0cml4LCBtZXNoOiBNZXNoLCBzdWJNZXNoOiBTdWJNZXNoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IDxGbHVlbnRCYWNrcGxhdGVNYXRlcmlhbERlZmluZXM+c3ViTWVzaC5tYXRlcmlhbERlZmluZXM7XHJcbiAgICAgICAgaWYgKCFkZWZpbmVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IHN1Yk1lc2guZWZmZWN0O1xyXG4gICAgICAgIGlmICghZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdCA9IGVmZmVjdDtcclxuXHJcbiAgICAgICAgLy8gTWF0cmljZXNcclxuICAgICAgICB0aGlzLmJpbmRPbmx5V29ybGRNYXRyaXgod29ybGQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRNYXRyaXgoXCJ2aWV3UHJvamVjdGlvblwiLCB0aGlzLmdldFNjZW5lKCkuZ2V0VHJhbnNmb3JtTWF0cml4KCkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3IzKFwiY2FtZXJhUG9zaXRpb25cIiwgdGhpcy5nZXRTY2VuZSgpLmFjdGl2ZUNhbWVyYT8ucG9zaXRpb24gPz8gVmVjdG9yMy5aZXJvUmVhZE9ubHkpO1xyXG5cclxuICAgICAgICAvLyBcIlJvdW5kIFJlY3RcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfXCIsIHRoaXMucmFkaXVzKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfTGluZV9XaWR0aF9cIiwgdGhpcy5saW5lV2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9BYnNvbHV0ZV9TaXplc19cIiwgdGhpcy5hYnNvbHV0ZVNpemVzID8gMS4wIDogMC4wKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRmlsdGVyX1dpZHRoX1wiLCB0aGlzLl9maWx0ZXJXaWR0aCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldERpcmVjdENvbG9yNChcIl9CYXNlX0NvbG9yX1wiLCB0aGlzLmJhc2VDb2xvcik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldERpcmVjdENvbG9yNChcIl9MaW5lX0NvbG9yX1wiLCB0aGlzLmxpbmVDb2xvcik7XHJcblxyXG4gICAgICAgIC8vIFwiUmFkaWkgTXVsdGlwbGllcnNcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfVG9wX0xlZnRfXCIsIDEpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfVG9wX1JpZ2h0X1wiLCAxLjApO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfQm90dG9tX0xlZnRfXCIsIDEuMCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JhZGl1c19Cb3R0b21fUmlnaHRfXCIsIDEuMCk7XHJcblxyXG4gICAgICAgIC8vIFwiQmxvYlwiXHJcbiAgICAgICAgLy9kZWZpbmUgQkxPQl9FTkFCTEUgdHJ1ZTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9JbnRlbnNpdHlfXCIsIHRoaXMuYmxvYkludGVuc2l0eSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfTmVhcl9TaXplX1wiLCB0aGlzLmJsb2JOZWFyU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFyX1NpemVfXCIsIHRoaXMuYmxvYkZhclNpemUpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX05lYXJfRGlzdGFuY2VfXCIsIHRoaXMuYmxvYk5lYXJEaXN0YW5jZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFyX0Rpc3RhbmNlX1wiLCB0aGlzLmJsb2JGYXJEaXN0YW5jZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFkZV9MZW5ndGhfXCIsIHRoaXMuYmxvYkZhZGVMZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX1B1bHNlX1wiLCB0aGlzLmJsb2JQdWxzZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFkZV9cIiwgdGhpcy5ibG9iRmFkZSk7XHJcblxyXG4gICAgICAgIC8vIFwiQmxvYiBUZXh0dXJlXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VGV4dHVyZShcIl9CbG9iX1RleHR1cmVfXCIsIHRoaXMuX2Jsb2JUZXh0dXJlKTtcclxuXHJcbiAgICAgICAgLy8gXCJCbG9iIDJcIlxyXG4gICAgICAgIC8vZGVmaW5lIEJMT0JfRU5BQkxFXzIgdHJ1ZTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9OZWFyX1NpemVfMl9cIiwgdGhpcy5ibG9iTmVhclNpemUyKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9QdWxzZV8yX1wiLCB0aGlzLmJsb2JQdWxzZTIpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0ZhZGVfMl9cIiwgdGhpcy5ibG9iRmFkZTIpO1xyXG5cclxuICAgICAgICAvLyBcIkxpbmUgSGlnaGxpZ2h0XCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmF0ZV9cIiwgdGhpcy5fcmF0ZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldERpcmVjdENvbG9yNChcIl9IaWdobGlnaHRfQ29sb3JfXCIsIHRoaXMuaGlnaGxpZ2h0Q29sb3IpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9IaWdobGlnaHRfV2lkdGhfXCIsIHRoaXMuaGlnaGxpZ2h0V2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3I0KFwiX0hpZ2hsaWdodF9UcmFuc2Zvcm1fXCIsIHRoaXMuX2hpZ2hsaWdodFRyYW5zZm9ybSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0hpZ2hsaWdodF9cIiwgdGhpcy5faGlnaGxpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gXCJJcmlkZXNjZW5jZVwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0lyaWRlc2NlbmNlX0ludGVuc2l0eV9cIiwgdGhpcy5pcmlkZXNjZW5jZUludGVuc2l0eSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0lyaWRlc2NlbmNlX0VkZ2VfSW50ZW5zaXR5X1wiLCB0aGlzLmlyaWRlc2NlbmNlRWRnZUludGVuc2l0eSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0FuZ2xlX1wiLCB0aGlzLl9hbmdsZSk7XHJcblxyXG4gICAgICAgIC8vIFwiRmFkZVwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0ZhZGVfT3V0X1wiLCB0aGlzLmZhZGVPdXQpO1xyXG5cclxuICAgICAgICAvLyBcIkFudGlhbGlhc2luZ1wiXHJcbiAgICAgICAgLy9kZWZpbmUgU01PT1RIX0VER0VTIHRydWU7XHJcblxyXG4gICAgICAgIC8vIFwiQ2hvb3NlQW5nbGVcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SZWZsZWN0ZWRfXCIsIHRoaXMuX3JlZmxlY3RlZCA/IDEuMCA6IDAuMCk7XHJcblxyXG4gICAgICAgIC8vIFwiTXVsdGlwbHlcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9GcmVxdWVuY3lfXCIsIHRoaXMuX2ZyZXF1ZW5jeSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1ZlcnRpY2FsX09mZnNldF9cIiwgdGhpcy5fdmVydGljYWxPZmZzZXQpO1xyXG5cclxuICAgICAgICAvLyBcIkNvbG9yIFRleHR1cmVcIlxyXG4gICAgICAgIC8vZGVmaW5lIElSSURFU0NFTlRfTUFQX0VOQUJMRSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRUZXh0dXJlKFwiX0lyaWRlc2NlbnRfTWFwX1wiLCB0aGlzLl9pcmlkZXNjZW50TWFwKTtcclxuXHJcbiAgICAgICAgLy8gXCJHbG9iYWxcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Vc2VfR2xvYmFsX0xlZnRfSW5kZXhfXCIsIDEuMCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1VzZV9HbG9iYWxfUmlnaHRfSW5kZXhfXCIsIDEuMCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2dsb2JhbExlZnRJbmRleFRpcFBvc2l0aW9uNC5zZXQodGhpcy5nbG9iYWxMZWZ0SW5kZXhUaXBQb3NpdGlvbi54LCB0aGlzLmdsb2JhbExlZnRJbmRleFRpcFBvc2l0aW9uLnksIHRoaXMuZ2xvYmFsTGVmdEluZGV4VGlwUG9zaXRpb24ueiwgMS4wKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yNChcIkdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qb3NpdGlvblwiLCB0aGlzLl9nbG9iYWxMZWZ0SW5kZXhUaXBQb3NpdGlvbjQpO1xyXG5cclxuICAgICAgICB0aGlzLl9nbG9iYWxSaWdodEluZGV4VGlwUG9zaXRpb240LnNldCh0aGlzLmdsb2JhbFJpZ2h0SW5kZXhUaXBQb3NpdGlvbi54LCB0aGlzLmdsb2JhbFJpZ2h0SW5kZXhUaXBQb3NpdGlvbi55LCB0aGlzLmdsb2JhbFJpZ2h0SW5kZXhUaXBQb3NpdGlvbi56LCAxLjApO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3I0KFwiR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvblwiLCB0aGlzLl9nbG9iYWxSaWdodEluZGV4VGlwUG9zaXRpb240KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWZ0ZXJCaW5kKG1lc2gsIHRoaXMuX2FjdGl2ZUVmZmVjdCwgc3ViTWVzaCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGxpc3Qgb2YgYW5pbWF0YWJsZXMgaW4gdGhlIG1hdGVyaWFsLlxyXG4gICAgICogQHJldHVybnMgdGhlIGxpc3Qgb2YgYW5pbWF0YWJsZXMgb2JqZWN0IHVzZWQgaW4gdGhlIG1hdGVyaWFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRBbmltYXRhYmxlcygpOiBJQW5pbWF0YWJsZVtdIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoZm9yY2VEaXNwb3NlRWZmZWN0PzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoZm9yY2VEaXNwb3NlRWZmZWN0KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYmxvYlRleHR1cmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX2lyaWRlc2NlbnRNYXAuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBjbG9uZShuYW1lOiBzdHJpbmcpOiBGbHVlbnRCYWNrcGxhdGVNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIFNlcmlhbGl6YXRpb25IZWxwZXIuQ2xvbmUoKCkgPT4gbmV3IEZsdWVudEJhY2twbGF0ZU1hdGVyaWFsKG5hbWUsIHRoaXMuZ2V0U2NlbmUoKSksIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXJpYWxpemUoKTogYW55IHtcclxuICAgICAgICBjb25zdCBzZXJpYWxpemF0aW9uT2JqZWN0ID0gc3VwZXIuc2VyaWFsaXplKCk7XHJcbiAgICAgICAgc2VyaWFsaXphdGlvbk9iamVjdC5jdXN0b21UeXBlID0gXCJCQUJZTE9OLkZsdWVudEJhY2twbGF0ZU1hdGVyaWFsXCI7XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6YXRpb25PYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIkZsdWVudEJhY2twbGF0ZU1hdGVyaWFsXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhdGljc1xyXG4gICAgcHVibGljIHN0YXRpYyBvdmVycmlkZSBQYXJzZShzb3VyY2U6IGFueSwgc2NlbmU6IFNjZW5lLCByb290VXJsOiBzdHJpbmcpOiBGbHVlbnRCYWNrcGxhdGVNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIFNlcmlhbGl6YXRpb25IZWxwZXIuUGFyc2UoKCkgPT4gbmV3IEZsdWVudEJhY2twbGF0ZU1hdGVyaWFsKHNvdXJjZS5uYW1lLCBzY2VuZSksIHNvdXJjZSwgc2NlbmUsIHJvb3RVcmwpO1xyXG4gICAgfVxyXG59XHJcblxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuRmx1ZW50QmFja3BsYXRlTWF0ZXJpYWxcIiwgRmx1ZW50QmFja3BsYXRlTWF0ZXJpYWwpO1xyXG4iLCJleHBvcnQgKiBmcm9tIFwiLi9mbHVlbnRCYWNrcGxhdGVNYXRlcmlhbFwiO1xyXG4iLCIvLyBEbyBub3QgZWRpdC5cbmltcG9ydCB7IFNoYWRlclN0b3JlIH0gZnJvbSBcImNvcmUvRW5naW5lcy9zaGFkZXJTdG9yZVwiO1xuXG5jb25zdCBuYW1lID0gXCJmbHVlbnRCYWNrcGxhdGVQaXhlbFNoYWRlclwiO1xuY29uc3Qgc2hhZGVyID0gYHVuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjt2YXJ5aW5nIHZlYzMgdlBvc2l0aW9uO3ZhcnlpbmcgdmVjMyB2Tm9ybWFsO3ZhcnlpbmcgdmVjMiB2VVY7dmFyeWluZyB2ZWMzIHZUYW5nZW50O3ZhcnlpbmcgdmVjMyB2Qmlub3JtYWw7dmFyeWluZyB2ZWM0IHZDb2xvcjt2YXJ5aW5nIHZlYzQgdkV4dHJhMTt2YXJ5aW5nIHZlYzQgdkV4dHJhMjt2YXJ5aW5nIHZlYzQgdkV4dHJhMzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfO3VuaWZvcm0gZmxvYXQgX0xpbmVfV2lkdGhfO3VuaWZvcm0gYm9vbCBfQWJzb2x1dGVfU2l6ZXNfO3VuaWZvcm0gZmxvYXQgX0ZpbHRlcl9XaWR0aF87dW5pZm9ybSB2ZWM0IF9CYXNlX0NvbG9yXzt1bmlmb3JtIHZlYzQgX0xpbmVfQ29sb3JfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Ub3BfTGVmdF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX1RvcF9SaWdodF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX0JvdHRvbV9MZWZ0Xzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfQm90dG9tX1JpZ2h0Xzt1bmlmb3JtIHZlYzMgX0Jsb2JfUG9zaXRpb25fO3VuaWZvcm0gZmxvYXQgX0Jsb2JfSW50ZW5zaXR5Xzt1bmlmb3JtIGZsb2F0IF9CbG9iX05lYXJfU2l6ZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfU2l6ZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX0Rpc3RhbmNlXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0Zhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlX0xlbmd0aF87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlXzt1bmlmb3JtIHNhbXBsZXIyRCBfQmxvYl9UZXh0dXJlXzt1bmlmb3JtIHZlYzMgX0Jsb2JfUG9zaXRpb25fMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX1NpemVfMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ZhZGVfMl87dW5pZm9ybSBmbG9hdCBfUmF0ZV87dW5pZm9ybSB2ZWM0IF9IaWdobGlnaHRfQ29sb3JfO3VuaWZvcm0gZmxvYXQgX0hpZ2hsaWdodF9XaWR0aF87dW5pZm9ybSB2ZWM0IF9IaWdobGlnaHRfVHJhbnNmb3JtXzt1bmlmb3JtIGZsb2F0IF9IaWdobGlnaHRfO3VuaWZvcm0gZmxvYXQgX0lyaWRlc2NlbmNlX0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfSXJpZGVzY2VuY2VfRWRnZV9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX0FuZ2xlXzt1bmlmb3JtIGZsb2F0IF9GYWRlX091dF87dW5pZm9ybSBib29sIF9SZWZsZWN0ZWRfO3VuaWZvcm0gZmxvYXQgX0ZyZXF1ZW5jeV87dW5pZm9ybSBmbG9hdCBfVmVydGljYWxfT2Zmc2V0Xzt1bmlmb3JtIHNhbXBsZXIyRCBfSXJpZGVzY2VudF9NYXBfO3VuaWZvcm0gYm9vbCBfVXNlX0dsb2JhbF9MZWZ0X0luZGV4Xzt1bmlmb3JtIGJvb2wgX1VzZV9HbG9iYWxfUmlnaHRfSW5kZXhfO3VuaWZvcm0gdmVjNCBHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb247dW5pZm9ybSB2ZWM0IEdsb2JhbF9SaWdodF9JbmRleF9UaXBfUG9zaXRpb247dm9pZCBSb3VuZF9SZWN0X0ZyYWdtZW50X0IzMShcbmZsb2F0IFJhZGl1cyxcbmZsb2F0IExpbmVfV2lkdGgsXG52ZWM0IExpbmVfQ29sb3IsXG5mbG9hdCBGaWx0ZXJfV2lkdGgsXG52ZWMyIFVWLFxuZmxvYXQgTGluZV9WaXNpYmlsaXR5LFxudmVjNCBSZWN0X1Bhcm1zLFxudmVjNCBGaWxsX0NvbG9yLFxub3V0IHZlYzQgQ29sb3IpXG57ZmxvYXQgZD1sZW5ndGgobWF4KGFicyhVViktUmVjdF9QYXJtcy54eSwwLjApKTtmbG9hdCBkeD1tYXgoZndpZHRoKGQpKkZpbHRlcl9XaWR0aCwwLjAwMDAxKTtmbG9hdCBnPW1pbihSZWN0X1Bhcm1zLnosUmVjdF9QYXJtcy53KTtmbG9hdCBkZ3JhZD1tYXgoZndpZHRoKGcpKkZpbHRlcl9XaWR0aCwwLjAwMDAxKTtmbG9hdCBJbnNpZGVfUmVjdD1jbGFtcChnL2RncmFkLDAuMCwxLjApO2Zsb2F0IGlubmVyPWNsYW1wKChkK2R4KjAuNS1tYXgoUmFkaXVzLUxpbmVfV2lkdGgsZC1keCowLjUpKS9keCwwLjAsMS4wKTtDb2xvcj1jbGFtcChtaXgoRmlsbF9Db2xvcixMaW5lX0NvbG9yLGlubmVyKSwwLjAsMS4wKSpJbnNpZGVfUmVjdDt9XG52b2lkIEJsb2JfRnJhZ21lbnRfQjcxKFxuc2FtcGxlcjJEIEJsb2JfVGV4dHVyZSxcbnZlYzQgQmxvYl9JbmZvMSxcbnZlYzQgQmxvYl9JbmZvMixcbm91dCB2ZWM0IEJsb2JfQ29sb3IpXG57ZmxvYXQgazE9ZG90KEJsb2JfSW5mbzEueHksQmxvYl9JbmZvMS54eSk7ZmxvYXQgazI9ZG90KEJsb2JfSW5mbzIueHksQmxvYl9JbmZvMi54eSk7dmVjMyBjbG9zZXI9azE8azIgPyB2ZWMzKGsxLEJsb2JfSW5mbzEueixCbG9iX0luZm8xLncpIDogdmVjMyhrMixCbG9iX0luZm8yLnosQmxvYl9JbmZvMi53KTtCbG9iX0NvbG9yPWNsb3Nlci56KnRleHR1cmUoQmxvYl9UZXh0dXJlLHZlYzIodmVjMihzcXJ0KGNsb3Nlci54KSxjbG9zZXIueSkueCwxLjAtdmVjMihzcXJ0KGNsb3Nlci54KSxjbG9zZXIueSkueSkpKmNsYW1wKDEuMC1jbG9zZXIueCwwLjAsMS4wKTt9XG52b2lkIExpbmVfRnJhZ21lbnRfQjQ4KFxudmVjNCBCYXNlX0NvbG9yLFxudmVjNCBIaWdobGlnaHRfQ29sb3IsXG5mbG9hdCBIaWdobGlnaHRfV2lkdGgsXG52ZWMzIExpbmVfVmVydGV4LFxuZmxvYXQgSGlnaGxpZ2h0LFxub3V0IHZlYzQgTGluZV9Db2xvcilcbntmbG9hdCBrMj0xLjAtY2xhbXAoYWJzKExpbmVfVmVydGV4LnkvSGlnaGxpZ2h0X1dpZHRoKSwwLjAsMS4wKTtMaW5lX0NvbG9yPW1peChCYXNlX0NvbG9yLEhpZ2hsaWdodF9Db2xvcixIaWdobGlnaHQqazIpO31cbnZvaWQgU2NhbGVfUkdCX0I1NChcbnZlYzQgQ29sb3IsXG5mbG9hdCBTY2FsYXIsXG5vdXQgdmVjNCBSZXN1bHQpXG57UmVzdWx0PXZlYzQoU2NhbGFyLFNjYWxhcixTY2FsYXIsMSkqQ29sb3I7fVxudm9pZCBDb25kaXRpb25hbF9GbG9hdF9CMzgoXG5ib29sIFdoaWNoLFxuZmxvYXQgSWZfVHJ1ZSxcbmZsb2F0IElmX0ZhbHNlLFxub3V0IGZsb2F0IFJlc3VsdClcbntSZXN1bHQ9V2hpY2ggPyBJZl9UcnVlIDogSWZfRmFsc2U7fVxudm9pZCBtYWluKClcbntmbG9hdCBSX1E3MjtmbG9hdCBHX1E3MjtmbG9hdCBCX1E3MjtmbG9hdCBBX1E3MjtSX1E3Mj12Q29sb3IucjsgR19RNzI9dkNvbG9yLmc7IEJfUTcyPXZDb2xvci5iOyBBX1E3Mj12Q29sb3IuYTt2ZWM0IEJsb2JfQ29sb3JfUTcxO1xuI2lmIEJMT0JfRU5BQkxFXG5mbG9hdCBrMT1kb3QodkV4dHJhMi54eSx2RXh0cmEyLnh5KTtmbG9hdCBrMj1kb3QodkV4dHJhMy54eSx2RXh0cmEzLnh5KTt2ZWMzIGNsb3Nlcj1rMTxrMiA/IHZlYzMoazEsdkV4dHJhMi56LHZFeHRyYTIudykgOiB2ZWMzKGsyLHZFeHRyYTMueix2RXh0cmEzLncpO0Jsb2JfQ29sb3JfUTcxPWNsb3Nlci56KnRleHR1cmUoX0Jsb2JfVGV4dHVyZV8sdmVjMih2ZWMyKHNxcnQoY2xvc2VyLngpLGNsb3Nlci55KS54LDEuMC12ZWMyKHNxcnQoY2xvc2VyLngpLGNsb3Nlci55KS55KSkqY2xhbXAoMS4wLWNsb3Nlci54LDAuMCwxLjApO1xuI2Vsc2VcbkJsb2JfQ29sb3JfUTcxPXZlYzQoMCwwLDAsMCk7XG4jZW5kaWZcbnZlYzQgTGluZV9Db2xvcl9RNDg7TGluZV9GcmFnbWVudF9CNDgoX0xpbmVfQ29sb3JfLF9IaWdobGlnaHRfQ29sb3JfLF9IaWdobGlnaHRfV2lkdGhfLHZUYW5nZW50LF9IaWdobGlnaHRfLExpbmVfQ29sb3JfUTQ4KTtmbG9hdCBYX1E2NztmbG9hdCBZX1E2NztYX1E2Nz12VVYueDtZX1E2Nz12VVYueTt2ZWMzIEluY2lkZW50X1E2Nj1ub3JtYWxpemUodlBvc2l0aW9uLWNhbWVyYVBvc2l0aW9uKTt2ZWMzIFJlZmxlY3RlZF9RNjA9cmVmbGVjdChJbmNpZGVudF9RNjYsdkJpbm9ybWFsKTtmbG9hdCBQcm9kdWN0X1E2Mz1ZX1E2NypfVmVydGljYWxfT2Zmc2V0XztmbG9hdCBEb3RfUTY4PWRvdChJbmNpZGVudF9RNjYsIFJlZmxlY3RlZF9RNjApO2Zsb2F0IERvdF9RNTc9ZG90KHZOb3JtYWwsIEluY2lkZW50X1E2Nik7ZmxvYXQgUmVzdWx0X1EzODtDb25kaXRpb25hbF9GbG9hdF9CMzgoX1JlZmxlY3RlZF8sRG90X1E2OCxEb3RfUTU3LFJlc3VsdF9RMzgpO2Zsb2F0IFByb2R1Y3RfUTY0PVJlc3VsdF9RMzgqX0ZyZXF1ZW5jeV87ZmxvYXQgU3VtX1E2OT1Qcm9kdWN0X1E2NCsxLjA7ZmxvYXQgUHJvZHVjdF9RNzA9U3VtX1E2OSowLjU7ZmxvYXQgU3VtX1E2Mj1Qcm9kdWN0X1E2MytQcm9kdWN0X1E3MDtmbG9hdCBGcmFjdEZfUTU5PWZyYWN0KFN1bV9RNjIpO3ZlYzIgVmVjMl9RNjU9dmVjMihGcmFjdEZfUTU5LDAuNSk7dmVjNCBDb2xvcl9RNTg7XG4jaWYgSVJJREVTQ0VOVF9NQVBfRU5BQkxFXG5Db2xvcl9RNTg9dGV4dHVyZShfSXJpZGVzY2VudF9NYXBfLFZlYzJfUTY1KTtcbiNlbHNlXG5Db2xvcl9RNTg9dmVjNCgwLDAsMCwwKTtcbiNlbmRpZlxudmVjNCBSZXN1bHRfUTU0O1NjYWxlX1JHQl9CNTQoQ29sb3JfUTU4LF9JcmlkZXNjZW5jZV9FZGdlX0ludGVuc2l0eV8sUmVzdWx0X1E1NCk7dmVjNCBSZXN1bHRfUTU1O1NjYWxlX1JHQl9CNTQoQ29sb3JfUTU4LF9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfLFJlc3VsdF9RNTUpO3ZlYzQgQmFzZV9BbmRfSXJpZGVzY2VudF9RNTM7QmFzZV9BbmRfSXJpZGVzY2VudF9RNTM9TGluZV9Db2xvcl9RNDgrdmVjNChSZXN1bHRfUTU0LnJnYiwwLjApO3ZlYzQgQmFzZV9BbmRfSXJpZGVzY2VudF9RNTY7QmFzZV9BbmRfSXJpZGVzY2VudF9RNTY9X0Jhc2VfQ29sb3JfK3ZlYzQoUmVzdWx0X1E1NS5yZ2IsMC4wKTt2ZWM0IFJlc3VsdF9RNTI9QmFzZV9BbmRfSXJpZGVzY2VudF9RNTM7IFJlc3VsdF9RNTIuYT0xLjA7dmVjNCBSZXN1bHRfUTM1PUJsb2JfQ29sb3JfUTcxKygxLjAtQmxvYl9Db2xvcl9RNzEuYSkqQmFzZV9BbmRfSXJpZGVzY2VudF9RNTY7dmVjNCBDb2xvcl9RMzE7Um91bmRfUmVjdF9GcmFnbWVudF9CMzEoUl9RNzIsR19RNzIsUmVzdWx0X1E1MixfRmlsdGVyX1dpZHRoXyx2VVYsMS4wLHZFeHRyYTEsUmVzdWx0X1EzNSxDb2xvcl9RMzEpO3ZlYzQgUmVzdWx0X1E0Nz1fRmFkZV9PdXRfKkNvbG9yX1EzMTt2ZWM0IE91dF9Db2xvcj1SZXN1bHRfUTQ3O2Zsb2F0IENsaXBfVGhyZXNob2xkPTAuMDAxO2Jvb2wgVG9fc1JHQj1mYWxzZTtnbF9GcmFnQ29sb3I9T3V0X0NvbG9yO31gO1xuLy8gU2lkZWVmZmVjdFxuU2hhZGVyU3RvcmUuU2hhZGVyc1N0b3JlW25hbWVdID0gc2hhZGVyO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGZsdWVudEJhY2twbGF0ZVBpeGVsU2hhZGVyID0geyBuYW1lLCBzaGFkZXIgfTtcbiIsIi8vIERvIG5vdCBlZGl0LlxuaW1wb3J0IHsgU2hhZGVyU3RvcmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL3NoYWRlclN0b3JlXCI7XG5cbmNvbnN0IG5hbWUgPSBcImZsdWVudEJhY2twbGF0ZVZlcnRleFNoYWRlclwiO1xuY29uc3Qgc2hhZGVyID0gYHVuaWZvcm0gbWF0NCB3b3JsZDt1bmlmb3JtIG1hdDQgdmlld1Byb2plY3Rpb247dW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO2F0dHJpYnV0ZSB2ZWMzIG5vcm1hbDtcbiNpZmRlZiBUQU5HRU5UXG5hdHRyaWJ1dGUgdmVjMyB0YW5nZW50O1xuI2Vsc2VcbmNvbnN0IHZlYzMgdGFuZ2VudD12ZWMzKDAuKTtcbiNlbmRpZlxudW5pZm9ybSBmbG9hdCBfUmFkaXVzXzt1bmlmb3JtIGZsb2F0IF9MaW5lX1dpZHRoXzt1bmlmb3JtIGJvb2wgX0Fic29sdXRlX1NpemVzXzt1bmlmb3JtIGZsb2F0IF9GaWx0ZXJfV2lkdGhfO3VuaWZvcm0gdmVjNCBfQmFzZV9Db2xvcl87dW5pZm9ybSB2ZWM0IF9MaW5lX0NvbG9yXzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfVG9wX0xlZnRfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Ub3BfUmlnaHRfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Cb3R0b21fTGVmdF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX0JvdHRvbV9SaWdodF87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV9MZW5ndGhfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfUHVsc2VfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV87dW5pZm9ybSBzYW1wbGVyMkQgX0Jsb2JfVGV4dHVyZV87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzJfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9TaXplXzJfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfUHVsc2VfMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlXzJfO3VuaWZvcm0gZmxvYXQgX1JhdGVfO3VuaWZvcm0gdmVjNCBfSGlnaGxpZ2h0X0NvbG9yXzt1bmlmb3JtIGZsb2F0IF9IaWdobGlnaHRfV2lkdGhfO3VuaWZvcm0gdmVjNCBfSGlnaGxpZ2h0X1RyYW5zZm9ybV87dW5pZm9ybSBmbG9hdCBfSGlnaGxpZ2h0Xzt1bmlmb3JtIGZsb2F0IF9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX0lyaWRlc2NlbmNlX0VkZ2VfSW50ZW5zaXR5Xzt1bmlmb3JtIGZsb2F0IF9BbmdsZV87dW5pZm9ybSBmbG9hdCBfRmFkZV9PdXRfO3VuaWZvcm0gYm9vbCBfUmVmbGVjdGVkXzt1bmlmb3JtIGZsb2F0IF9GcmVxdWVuY3lfO3VuaWZvcm0gZmxvYXQgX1ZlcnRpY2FsX09mZnNldF87dW5pZm9ybSBzYW1wbGVyMkQgX0lyaWRlc2NlbnRfTWFwXzt1bmlmb3JtIGJvb2wgX1VzZV9HbG9iYWxfTGVmdF9JbmRleF87dW5pZm9ybSBib29sIF9Vc2VfR2xvYmFsX1JpZ2h0X0luZGV4Xzt1bmlmb3JtIHZlYzQgR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Bvc2l0aW9uO3VuaWZvcm0gdmVjNCBHbG9iYWxfUmlnaHRfSW5kZXhfVGlwX1Bvc2l0aW9uO3ZhcnlpbmcgdmVjMyB2UG9zaXRpb247dmFyeWluZyB2ZWMzIHZOb3JtYWw7dmFyeWluZyB2ZWMyIHZVVjt2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7dmFyeWluZyB2ZWMzIHZCaW5vcm1hbDt2YXJ5aW5nIHZlYzQgdkNvbG9yO3ZhcnlpbmcgdmVjNCB2RXh0cmExO3ZhcnlpbmcgdmVjNCB2RXh0cmEyO3ZhcnlpbmcgdmVjNCB2RXh0cmEzO3ZvaWQgT2JqZWN0X1RvX1dvcmxkX1Bvc19CMTE1KFxudmVjMyBQb3NfT2JqZWN0LFxub3V0IHZlYzMgUG9zX1dvcmxkKVxue1Bvc19Xb3JsZD0od29ybGQqdmVjNChQb3NfT2JqZWN0LDEuMCkpLnh5ejt9XG52b2lkIFBpY2tEaXJfQjE0MChcbmZsb2F0IERlZ3JlZXMsXG52ZWMzIERpclgsXG52ZWMzIERpclksXG5vdXQgdmVjMyBEaXIpXG57ZmxvYXQgYT1EZWdyZWVzKjMuMTQxNTkvMTgwLjA7RGlyPWNvcyhhKSpEaXJYK3NpbihhKSpEaXJZO31cbnZvaWQgUm91bmRfUmVjdF9WZXJ0ZXhfQjEzOShcbnZlYzIgVVYsXG5mbG9hdCBSYWRpdXMsXG5mbG9hdCBNYXJnaW4sXG5mbG9hdCBBbmlzb3Ryb3B5LFxuZmxvYXQgR3JhZGllbnQxLFxuZmxvYXQgR3JhZGllbnQyLFxub3V0IHZlYzIgUmVjdF9VVixcbm91dCB2ZWM0IFJlY3RfUGFybXMsXG5vdXQgdmVjMiBTY2FsZV9YWSxcbm91dCB2ZWMyIExpbmVfVVYpXG57U2NhbGVfWFk9dmVjMihBbmlzb3Ryb3B5LDEuMCk7TGluZV9VVj0oVVYtdmVjMigwLjUsMC41KSk7UmVjdF9VVj1MaW5lX1VWKlNjYWxlX1hZO1JlY3RfUGFybXMueHk9U2NhbGVfWFkqMC41LXZlYzIoUmFkaXVzLFJhZGl1cyktdmVjMihNYXJnaW4sTWFyZ2luKTtSZWN0X1Bhcm1zLno9R3JhZGllbnQxOyBcblJlY3RfUGFybXMudz1HcmFkaWVudDI7fVxudm9pZCBMaW5lX1ZlcnRleF9CMTM1KFxudmVjMiBTY2FsZV9YWSxcbnZlYzIgVVYsXG5mbG9hdCBUaW1lLFxuZmxvYXQgUmF0ZSxcbnZlYzQgSGlnaGxpZ2h0X1RyYW5zZm9ybSxcbm91dCB2ZWMzIExpbmVfVmVydGV4KVxue2Zsb2F0IGFuZ2xlMj0oUmF0ZSpUaW1lKSoyLjAqMy4xNDE2O2Zsb2F0IHNpbkFuZ2xlMj1zaW4oYW5nbGUyKTtmbG9hdCBjb3NBbmdsZTI9Y29zKGFuZ2xlMik7dmVjMiB4Zm9ybVVWPVVWKkhpZ2hsaWdodF9UcmFuc2Zvcm0ueHkrSGlnaGxpZ2h0X1RyYW5zZm9ybS56dztMaW5lX1ZlcnRleC54PTAuMDtMaW5lX1ZlcnRleC55PWNvc0FuZ2xlMip4Zm9ybVVWLngtc2luQW5nbGUyKnhmb3JtVVYueTtMaW5lX1ZlcnRleC56PTAuMDsgfVxudm9pZCBCbG9iX1ZlcnRleF9CMTgwKFxudmVjMyBQb3NpdGlvbixcbnZlYzMgTm9ybWFsLFxudmVjMyBUYW5nZW50LFxudmVjMyBCaXRhbmdlbnQsXG52ZWMzIEJsb2JfUG9zaXRpb24sXG5mbG9hdCBJbnRlbnNpdHksXG5mbG9hdCBCbG9iX05lYXJfU2l6ZSxcbmZsb2F0IEJsb2JfRmFyX1NpemUsXG5mbG9hdCBCbG9iX05lYXJfRGlzdGFuY2UsXG5mbG9hdCBCbG9iX0Zhcl9EaXN0YW5jZSxcbmZsb2F0IEJsb2JfRmFkZV9MZW5ndGgsXG5mbG9hdCBCbG9iX1B1bHNlLFxuZmxvYXQgQmxvYl9GYWRlLFxub3V0IHZlYzQgQmxvYl9JbmZvKVxue3ZlYzMgYmxvYj1CbG9iX1Bvc2l0aW9uO3ZlYzMgZGVsdGE9YmxvYi1Qb3NpdGlvbjtmbG9hdCBkaXN0PWRvdChOb3JtYWwsZGVsdGEpO2Zsb2F0IGxlcnBWYWx1ZT1jbGFtcCgoYWJzKGRpc3QpLUJsb2JfTmVhcl9EaXN0YW5jZSkvKEJsb2JfRmFyX0Rpc3RhbmNlLUJsb2JfTmVhcl9EaXN0YW5jZSksMC4wLDEuMCk7ZmxvYXQgZmFkZVZhbHVlPTEuMC1jbGFtcCgoYWJzKGRpc3QpLUJsb2JfRmFyX0Rpc3RhbmNlKS9CbG9iX0ZhZGVfTGVuZ3RoLDAuMCwxLjApO2Zsb2F0IHNpemU9QmxvYl9OZWFyX1NpemUrKEJsb2JfRmFyX1NpemUtQmxvYl9OZWFyX1NpemUpKmxlcnBWYWx1ZTt2ZWMyIGJsb2JYWT12ZWMyKGRvdChkZWx0YSxUYW5nZW50KSxkb3QoZGVsdGEsQml0YW5nZW50KSkvKDAuMDAwMStzaXplKTtmbG9hdCBGYWRlPWZhZGVWYWx1ZSpJbnRlbnNpdHkqQmxvYl9GYWRlO2Zsb2F0IERpc3RhbmNlPShsZXJwVmFsdWUqMC41KzAuNSkqKDEuMC1CbG9iX1B1bHNlKTtCbG9iX0luZm89dmVjNChibG9iWFkueCxibG9iWFkueSxEaXN0YW5jZSxGYWRlKTt9XG52b2lkIE1vdmVfVmVydHNfQjEyOShcbmZsb2F0IEFuaXNvdHJvcHksXG52ZWMzIFAsXG5mbG9hdCBSYWRpdXMsXG5vdXQgdmVjMyBOZXdfUCxcbm91dCB2ZWMyIE5ld19VVixcbm91dCBmbG9hdCBSYWRpYWxfR3JhZGllbnQsXG5vdXQgdmVjMyBSYWRpYWxfRGlyKVxue3ZlYzIgVVY9UC54eSoyLjArMC41O3ZlYzIgY2VudGVyPWNsYW1wKFVWLDAuMCwxLjApO3ZlYzIgZGVsdGE9VVYtY2VudGVyO3ZlYzIgcjI9Mi4wKnZlYzIoUmFkaXVzL0FuaXNvdHJvcHksUmFkaXVzKTtOZXdfVVY9Y2VudGVyK3IyKihVVi0yLjAqY2VudGVyKzAuNSk7TmV3X1A9dmVjMyhOZXdfVVYtMC41LFAueik7UmFkaWFsX0dyYWRpZW50PTEuMC1sZW5ndGgoZGVsdGEpKjIuMDtSYWRpYWxfRGlyPXZlYzMoZGVsdGEqcjIsMC4wKTt9XG52b2lkIE9iamVjdF9Ub19Xb3JsZF9EaXJfQjEzMihcbnZlYzMgRGlyX09iamVjdCxcbm91dCB2ZWMzIEJpbm9ybWFsX1dvcmxkLFxub3V0IHZlYzMgQmlub3JtYWxfV29ybGRfTixcbm91dCBmbG9hdCBCaW5vcm1hbF9MZW5ndGgpXG57Qmlub3JtYWxfV29ybGQ9KHdvcmxkKnZlYzQoRGlyX09iamVjdCwwLjApKS54eXo7Qmlub3JtYWxfTGVuZ3RoPWxlbmd0aChCaW5vcm1hbF9Xb3JsZCk7Qmlub3JtYWxfV29ybGRfTj1CaW5vcm1hbF9Xb3JsZC9CaW5vcm1hbF9MZW5ndGg7fVxudm9pZCBSZWxhdGl2ZU9yQWJzb2x1dGVEZXRhaWxfQjE0NyhcbmZsb2F0IE5vbWluYWxfUmFkaXVzLFxuZmxvYXQgTm9taW5hbF9MaW5lV2lkdGgsXG5ib29sIEFic29sdXRlX01lYXN1cmVtZW50cyxcbmZsb2F0IEhlaWdodCxcbm91dCBmbG9hdCBSYWRpdXMsXG5vdXQgZmxvYXQgTGluZV9XaWR0aClcbntmbG9hdCBzY2FsZT1BYnNvbHV0ZV9NZWFzdXJlbWVudHMgPyAxLjAvSGVpZ2h0IDogMS4wO1JhZGl1cz1Ob21pbmFsX1JhZGl1cypzY2FsZTtMaW5lX1dpZHRoPU5vbWluYWxfTGluZVdpZHRoKnNjYWxlO31cbnZvaWQgRWRnZV9BQV9WZXJ0ZXhfQjEzMChcbnZlYzMgUG9zaXRpb25fV29ybGQsXG52ZWMzIFBvc2l0aW9uX09iamVjdCxcbnZlYzMgTm9ybWFsX09iamVjdCxcbnZlYzMgRXllLFxuZmxvYXQgUmFkaWFsX0dyYWRpZW50LFxudmVjMyBSYWRpYWxfRGlyLFxudmVjMyBUYW5nZW50LFxub3V0IGZsb2F0IEdyYWRpZW50MSxcbm91dCBmbG9hdCBHcmFkaWVudDIpXG57dmVjMyBJPShFeWUtUG9zaXRpb25fV29ybGQpO3ZlYzMgVD0od29ybGQqIHZlYzQoVGFuZ2VudCwwLjApKS54eXo7ZmxvYXQgZz0oZG90KFQsSSk8MC4wKSA/IDAuMCA6IDEuMDtpZiAoTm9ybWFsX09iamVjdC56PT0wLjApIHsgXG5HcmFkaWVudDE9UG9zaXRpb25fT2JqZWN0Lno+MC4wID8gZyA6IDEuMDtHcmFkaWVudDI9UG9zaXRpb25fT2JqZWN0Lno+MC4wID8gMS4wIDogZzt9IGVsc2Uge0dyYWRpZW50MT1nKygxLjAtZykqKFJhZGlhbF9HcmFkaWVudCk7R3JhZGllbnQyPTEuMDt9fVxudm9pZCBQaWNrX1JhZGl1c19CMTQ0KFxuZmxvYXQgUmFkaXVzLFxuZmxvYXQgUmFkaXVzX1RvcF9MZWZ0LFxuZmxvYXQgUmFkaXVzX1RvcF9SaWdodCxcbmZsb2F0IFJhZGl1c19Cb3R0b21fTGVmdCxcbmZsb2F0IFJhZGl1c19Cb3R0b21fUmlnaHQsXG52ZWMzIFBvc2l0aW9uLFxub3V0IGZsb2F0IFJlc3VsdClcbntib29sIHdoaWNoWT1Qb3NpdGlvbi55PjAuMDtSZXN1bHQ9UG9zaXRpb24ueDwwLjAgPyAod2hpY2hZID8gUmFkaXVzX1RvcF9MZWZ0IDogUmFkaXVzX0JvdHRvbV9MZWZ0KSA6ICh3aGljaFkgPyBSYWRpdXNfVG9wX1JpZ2h0IDogUmFkaXVzX0JvdHRvbV9SaWdodCk7UmVzdWx0Kj1SYWRpdXM7fVxudm9pZCBtYWluKClcbnt2ZWMzIE5ybV9Xb3JsZF9RMTI4O05ybV9Xb3JsZF9RMTI4PW5vcm1hbGl6ZSgod29ybGQqdmVjNChub3JtYWwsMC4wKSkueHl6KTt2ZWMzIFRhbmdlbnRfV29ybGRfUTEzMTt2ZWMzIFRhbmdlbnRfV29ybGRfTl9RMTMxO2Zsb2F0IFRhbmdlbnRfTGVuZ3RoX1ExMzE7VGFuZ2VudF9Xb3JsZF9RMTMxPSh3b3JsZCp2ZWM0KHZlYzMoMSwwLDApLDAuMCkpLnh5ejtUYW5nZW50X0xlbmd0aF9RMTMxPWxlbmd0aChUYW5nZW50X1dvcmxkX1ExMzEpO1RhbmdlbnRfV29ybGRfTl9RMTMxPVRhbmdlbnRfV29ybGRfUTEzMS9UYW5nZW50X0xlbmd0aF9RMTMxO3ZlYzMgQmlub3JtYWxfV29ybGRfUTEzMjt2ZWMzIEJpbm9ybWFsX1dvcmxkX05fUTEzMjtmbG9hdCBCaW5vcm1hbF9MZW5ndGhfUTEzMjtPYmplY3RfVG9fV29ybGRfRGlyX0IxMzIodmVjMygwLDEsMCksQmlub3JtYWxfV29ybGRfUTEzMixCaW5vcm1hbF9Xb3JsZF9OX1ExMzIsQmlub3JtYWxfTGVuZ3RoX1ExMzIpO2Zsb2F0IEFuaXNvdHJvcHlfUTEzMz1UYW5nZW50X0xlbmd0aF9RMTMxL0Jpbm9ybWFsX0xlbmd0aF9RMTMyO3ZlYzMgUmVzdWx0X1ExNzc7UmVzdWx0X1ExNzc9bWl4KF9CbG9iX1Bvc2l0aW9uXyxHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb24ueHl6LGZsb2F0KF9Vc2VfR2xvYmFsX0xlZnRfSW5kZXhfKSk7dmVjMyBSZXN1bHRfUTE3ODtSZXN1bHRfUTE3OD1taXgoX0Jsb2JfUG9zaXRpb25fMl8sR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvbi54eXosZmxvYXQoX1VzZV9HbG9iYWxfUmlnaHRfSW5kZXhfKSk7ZmxvYXQgUmVzdWx0X1ExNDQ7UGlja19SYWRpdXNfQjE0NChfUmFkaXVzXyxfUmFkaXVzX1RvcF9MZWZ0XyxfUmFkaXVzX1RvcF9SaWdodF8sX1JhZGl1c19Cb3R0b21fTGVmdF8sX1JhZGl1c19Cb3R0b21fUmlnaHRfLHBvc2l0aW9uLFJlc3VsdF9RMTQ0KTt2ZWMzIERpcl9RMTQwO1BpY2tEaXJfQjE0MChfQW5nbGVfLFRhbmdlbnRfV29ybGRfTl9RMTMxLEJpbm9ybWFsX1dvcmxkX05fUTEzMixEaXJfUTE0MCk7ZmxvYXQgUmFkaXVzX1ExNDc7ZmxvYXQgTGluZV9XaWR0aF9RMTQ3O1JlbGF0aXZlT3JBYnNvbHV0ZURldGFpbF9CMTQ3KFJlc3VsdF9RMTQ0LF9MaW5lX1dpZHRoXyxfQWJzb2x1dGVfU2l6ZXNfLEJpbm9ybWFsX0xlbmd0aF9RMTMyLFJhZGl1c19RMTQ3LExpbmVfV2lkdGhfUTE0Nyk7dmVjNCBPdXRfQ29sb3JfUTE0NT12ZWM0KFJhZGl1c19RMTQ3LExpbmVfV2lkdGhfUTE0NywwLDEpO3ZlYzMgTmV3X1BfUTEyOTt2ZWMyIE5ld19VVl9RMTI5O2Zsb2F0IFJhZGlhbF9HcmFkaWVudF9RMTI5O3ZlYzMgUmFkaWFsX0Rpcl9RMTI5O01vdmVfVmVydHNfQjEyOShBbmlzb3Ryb3B5X1ExMzMscG9zaXRpb24sUmFkaXVzX1ExNDcsTmV3X1BfUTEyOSxOZXdfVVZfUTEyOSxSYWRpYWxfR3JhZGllbnRfUTEyOSxSYWRpYWxfRGlyX1ExMjkpO3ZlYzMgUG9zX1dvcmxkX1ExMTU7T2JqZWN0X1RvX1dvcmxkX1Bvc19CMTE1KE5ld19QX1ExMjksUG9zX1dvcmxkX1ExMTUpO3ZlYzQgQmxvYl9JbmZvX1ExODA7XG4jaWYgQkxPQl9FTkFCTEVcbkJsb2JfVmVydGV4X0IxODAoUG9zX1dvcmxkX1ExMTUsTnJtX1dvcmxkX1ExMjgsVGFuZ2VudF9Xb3JsZF9OX1ExMzEsQmlub3JtYWxfV29ybGRfTl9RMTMyLFJlc3VsdF9RMTc3LF9CbG9iX0ludGVuc2l0eV8sX0Jsb2JfTmVhcl9TaXplXyxfQmxvYl9GYXJfU2l6ZV8sX0Jsb2JfTmVhcl9EaXN0YW5jZV8sX0Jsb2JfRmFyX0Rpc3RhbmNlXyxfQmxvYl9GYWRlX0xlbmd0aF8sX0Jsb2JfUHVsc2VfLF9CbG9iX0ZhZGVfLEJsb2JfSW5mb19RMTgwKTtcbiNlbHNlXG5CbG9iX0luZm9fUTE4MD12ZWM0KDAsMCwwLDApO1xuI2VuZGlmXG52ZWM0IEJsb2JfSW5mb19RMTgxO1xuI2lmIEJMT0JfRU5BQkxFXzJcbkJsb2JfVmVydGV4X0IxODAoUG9zX1dvcmxkX1ExMTUsTnJtX1dvcmxkX1ExMjgsVGFuZ2VudF9Xb3JsZF9OX1ExMzEsQmlub3JtYWxfV29ybGRfTl9RMTMyLFJlc3VsdF9RMTc4LF9CbG9iX0ludGVuc2l0eV8sX0Jsb2JfTmVhcl9TaXplXzJfLF9CbG9iX0Zhcl9TaXplXyxfQmxvYl9OZWFyX0Rpc3RhbmNlXyxfQmxvYl9GYXJfRGlzdGFuY2VfLF9CbG9iX0ZhZGVfTGVuZ3RoXyxfQmxvYl9QdWxzZV8yXyxfQmxvYl9GYWRlXzJfLEJsb2JfSW5mb19RMTgxKTtcbiNlbHNlXG5CbG9iX0luZm9fUTE4MT12ZWM0KDAsMCwwLDApO1xuI2VuZGlmXG5mbG9hdCBHcmFkaWVudDFfUTEzMDtmbG9hdCBHcmFkaWVudDJfUTEzMDtcbiNpZiBTTU9PVEhfRURHRVNcbkVkZ2VfQUFfVmVydGV4X0IxMzAoUG9zX1dvcmxkX1ExMTUscG9zaXRpb24sbm9ybWFsLGNhbWVyYVBvc2l0aW9uLFJhZGlhbF9HcmFkaWVudF9RMTI5LFJhZGlhbF9EaXJfUTEyOSx0YW5nZW50LEdyYWRpZW50MV9RMTMwLEdyYWRpZW50Ml9RMTMwKTtcbiNlbHNlXG5HcmFkaWVudDFfUTEzMD0xLjA7R3JhZGllbnQyX1ExMzA9MS4wO1xuI2VuZGlmXG52ZWMyIFJlY3RfVVZfUTEzOTt2ZWM0IFJlY3RfUGFybXNfUTEzOTt2ZWMyIFNjYWxlX1hZX1ExMzk7dmVjMiBMaW5lX1VWX1ExMzk7Um91bmRfUmVjdF9WZXJ0ZXhfQjEzOShOZXdfVVZfUTEyOSxSYWRpdXNfUTE0NywwLjAsQW5pc290cm9weV9RMTMzLEdyYWRpZW50MV9RMTMwLEdyYWRpZW50Ml9RMTMwLFJlY3RfVVZfUTEzOSxSZWN0X1Bhcm1zX1ExMzksU2NhbGVfWFlfUTEzOSxMaW5lX1VWX1ExMzkpO3ZlYzMgTGluZV9WZXJ0ZXhfUTEzNTtMaW5lX1ZlcnRleF9CMTM1KFNjYWxlX1hZX1ExMzksTGluZV9VVl9RMTM5LDAuMCxfUmF0ZV8sX0hpZ2hsaWdodF9UcmFuc2Zvcm1fLExpbmVfVmVydGV4X1ExMzUpO3ZlYzMgUG9zaXRpb249UG9zX1dvcmxkX1ExMTU7dmVjMyBOb3JtYWw9RGlyX1ExNDA7dmVjMiBVVj1SZWN0X1VWX1ExMzk7dmVjMyBUYW5nZW50PUxpbmVfVmVydGV4X1ExMzU7dmVjMyBCaW5vcm1hbD1Ocm1fV29ybGRfUTEyODt2ZWM0IENvbG9yPU91dF9Db2xvcl9RMTQ1O3ZlYzQgRXh0cmExPVJlY3RfUGFybXNfUTEzOTt2ZWM0IEV4dHJhMj1CbG9iX0luZm9fUTE4MDt2ZWM0IEV4dHJhMz1CbG9iX0luZm9fUTE4MTtnbF9Qb3NpdGlvbj12aWV3UHJvamVjdGlvbip2ZWM0KFBvc2l0aW9uLDEpO3ZQb3NpdGlvbj1Qb3NpdGlvbjt2Tm9ybWFsPU5vcm1hbDt2VVY9VVY7dlRhbmdlbnQ9VGFuZ2VudDt2Qmlub3JtYWw9Qmlub3JtYWw7dkNvbG9yPUNvbG9yO3ZFeHRyYTE9RXh0cmExO3ZFeHRyYTI9RXh0cmEyO3ZFeHRyYTM9RXh0cmEzO31gO1xuLy8gU2lkZWVmZmVjdFxuU2hhZGVyU3RvcmUuU2hhZGVyc1N0b3JlW25hbWVdID0gc2hhZGVyO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGZsdWVudEJhY2twbGF0ZVZlcnRleFNoYWRlciA9IHsgbmFtZSwgc2hhZGVyIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB7IHNlcmlhbGl6ZUFzQ29sb3I0LCBzZXJpYWxpemVBc1ZlY3RvcjMsIHNlcmlhbGl6ZSB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9yc1wiO1xyXG5pbXBvcnQgeyBTZXJpYWxpemF0aW9uSGVscGVyIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzLnNlcmlhbGl6YXRpb25cIjtcclxuaW1wb3J0IHR5cGUgeyBNYXRyaXggfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzLCBWZWN0b3I0IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHR5cGUgeyBJQW5pbWF0YWJsZSB9IGZyb20gXCJjb3JlL0FuaW1hdGlvbnMvYW5pbWF0YWJsZS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHR5cGUgeyBCYXNlVGV4dHVyZSB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9UZXh0dXJlcy9iYXNlVGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL1RleHR1cmVzL3RleHR1cmVcIjtcclxuaW1wb3J0IHsgTWF0ZXJpYWxEZWZpbmVzIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL21hdGVyaWFsRGVmaW5lc1wiO1xyXG5pbXBvcnQgdHlwZSB7IElFZmZlY3RDcmVhdGlvbk9wdGlvbnMgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvZWZmZWN0XCI7XHJcbmltcG9ydCB7IFB1c2hNYXRlcmlhbCB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9wdXNoTWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgVmVydGV4QnVmZmVyIH0gZnJvbSBcImNvcmUvQnVmZmVycy9idWZmZXJcIjtcclxuaW1wb3J0IHR5cGUgeyBBYnN0cmFjdE1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvYWJzdHJhY3RNZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgU3ViTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9zdWJNZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9tZXNoXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHsgQ29sb3IzLCBDb2xvcjQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbG9yXCI7XHJcbmltcG9ydCB7IEVmZmVjdEZhbGxiYWNrcyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9lZmZlY3RGYWxsYmFja3NcIjtcclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcImNvcmUvRW5naW5lcy9jb25zdGFudHNcIjtcclxuXHJcbmltcG9ydCBcIi4vc2hhZGVycy9mbHVlbnRCdXR0b24uZnJhZ21lbnRcIjtcclxuaW1wb3J0IFwiLi9zaGFkZXJzL2ZsdWVudEJ1dHRvbi52ZXJ0ZXhcIjtcclxuaW1wb3J0IHsgSGFuZGxlRmFsbGJhY2tzRm9yU2hhZG93cywgUHJlcGFyZUF0dHJpYnV0ZXNGb3JJbnN0YW5jZXMsIFByZXBhcmVEZWZpbmVzRm9yQXR0cmlidXRlcywgUHJlcGFyZVVuaWZvcm1zQW5kU2FtcGxlcnNMaXN0IH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL21hdGVyaWFsSGVscGVyLmZ1bmN0aW9uc1wiO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5jbGFzcyBGbHVlbnRCdXR0b25NYXRlcmlhbERlZmluZXMgZXh0ZW5kcyBNYXRlcmlhbERlZmluZXMge1xyXG4gICAgcHVibGljIFJFTEFUSVZFX1dJRFRIID0gdHJ1ZTtcclxuICAgIHB1YmxpYyBFTkFCTEVfRkFERSA9IHRydWU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLl9uZWVkTm9ybWFscyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbmVlZFVWcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWJ1aWxkKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIHJlbmRlciBzcXVhcmUgYnV0dG9ucyB3aXRoIGZsdWVudCBkZXNpZ25cclxuICogQHNpbmNlIDUuMC4wXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmx1ZW50QnV0dG9uTWF0ZXJpYWwgZXh0ZW5kcyBQdXNoTWF0ZXJpYWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBVUkwgcG9pbnRpbmcgdG8gdGhlIHRleHR1cmUgdXNlZCB0byBkZWZpbmUgdGhlIGNvbG9yaW5nIGZvciB0aGUgZmx1ZW50IGJsb2IgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEJMT0JfVEVYVFVSRV9VUkwgPSBcImh0dHBzOi8vYXNzZXRzLmJhYnlsb25qcy5jb20vbWVzaGVzL01SVEsvbXJ0ay1mbHVlbnQtYnV0dG9uLWJsb2IucG5nXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHdpZHRoIG9mIHRoZSBnbG93aW5nIGVkZ2UsIHJlbGF0aXZlIHRvIHRoZSBzY2FsZSBvZiB0aGUgYnV0dG9uLlxyXG4gICAgICogKERlZmF1bHQgaXMgNCUgb2YgdGhlIGhlaWdodCkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGVkZ2VXaWR0aCA9IDAuMDQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGNvbG9yIG9mIHRoZSBnbG93aW5nIGVkZ2UuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemVBc0NvbG9yNCgpXHJcbiAgICBwdWJsaWMgZWRnZUNvbG9yID0gbmV3IENvbG9yNCgwLjU5MjE1NywgMC41OTIxNTcsIDAuNTkyMTU3LCAxLjApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBtYXhpbXVtIGludGVuc2l0eSBvZiB0aGUgcHJveGltaXR5IGxpZ2h0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBwcm94aW1pdHlNYXhJbnRlbnNpdHkgPSAwLjQ1O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBtYXhpbXVtIGRpc3RhbmNlIGZvciB0aGUgcHJveGltaXR5IGxpZ2h0IChEZWZhdWx0IGlzIDE2bW0pLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBwcm94aW1pdHlGYXJEaXN0YW5jZSA9IDAuMTY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHJhZGl1cyBvZiB0aGUgcHJveGltaXR5IGxpZ2h0IHdoZW4gbmVhciB0byB0aGUgc3VyZmFjZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcHJveGltaXR5TmVhclJhZGl1cyA9IDEuNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYW5pc290cm9weSBvZiB0aGUgcHJveGltaXR5IGxpZ2h0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBwcm94aW1pdHlBbmlzb3Ryb3B5ID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYW1vdW50IG9mIGZ1enppbmcgaW4gdGhlIHNlbGVjdGlvbiBmb2N1cy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc2VsZWN0aW9uRnV6eiA9IDAuNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhbiBvdmVycmlkZSB2YWx1ZSB0byBkaXNwbGF5IHRoZSBidXR0b24gYXMgc2VsZWN0ZWQuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHNlbGVjdGVkID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBhIHZhbHVlIHRvIG1hbnVhbGx5IGZhZGUgdGhlIGJsb2Igc2l6ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc2VsZWN0aW9uRmFkZSA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSB0byBtYW51YWxseSBzaHJpbmsgdGhlIGJsb2Igc2l6ZSBhcyBpdCBmYWRlcyAoc2VlIHNlbGVjdGlvbkZhZGUpLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBzZWxlY3Rpb25GYWRlU2l6ZSA9IDAuMztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgYnV0dG9uIHRoZSBjdXJzb3Igc2hvdWxkIGJlIGZvciB0aGUgYnV0dG9uXHJcbiAgICAgKiB0byBhcHBlYXIgc2VsZWN0ZWQgKERlZmF1bHQgaXMgOGNtKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc2VsZWN0ZWREaXN0YW5jZSA9IDAuMDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZhbGwtb2ZmIGRpc3RhbmNlIGZvciB0aGUgc2VsZWN0aW9uIGZhZGUgKERlZmF1bHQgaXMgOGNtKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc2VsZWN0ZWRGYWRlTGVuZ3RoID0gMC4wODtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBsdW1pbm91cyBibG9iIChSYW5nZXMgMC0xLCBkZWZhdWx0IGlzIDAuNSkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JJbnRlbnNpdHkgPSAwLjU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2l6ZSBvZiB0aGUgYmxvYiB3aGVuIHRoZSBwb2ludGVyIGlzIGF0IHRoZSBibG9iRmFyRGlzdGFuY2UgKERlZmF1bHQgaXMgNWNtKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYkZhclNpemUgPSAwLjA1O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGRpc3RhbmNlIGF0IHdoaWNoIHRoZSBwb2ludGVyIGlzIGNvbnNpZGVyZWQgbmVhci4gU2VlIFtsZWZ0fHJpZ2h0XUJsb2JOZWFyU2l6ZS4gKERlZmF1bHQgaXMgMGNtKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYk5lYXJEaXN0YW5jZSA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGlzdGFuY2UgYXQgd2hpY2ggdGhlIHBvaW50ZXIgaXMgY29uc2lkZXJlZCBmYXIuIFNlZSBbbGVmdHxyaWdodF1CbG9iRmFyU2l6ZS4gKERlZmF1bHQgaXMgOGNtKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYkZhckRpc3RhbmNlID0gMC4wODtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBkaXN0YW5jZSBvdmVyIHdoaWNoIHRoZSBibG9iIGludGVuc2l0eSBmYWRlcyBmcm9tIGZ1bGwgdG8gbm9uZSAoRGVmYXVsdCBpcyA4Y20pLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iRmFkZUxlbmd0aCA9IDAuMDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgd2hldGhlciB0aGUgYmxvYiBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IGluZGV4IGZpbmdlciBpcyBlbmFibGVkLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBsZWZ0QmxvYkVuYWJsZSA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHNpemUgb2YgdGhlIGxlZnQgYmxvYiB3aGVuIHRoZSBsZWZ0IHBvaW50ZXIgaXMgY29uc2lkZXJlZCBuZWFyLiBTZWUgYmxvYk5lYXJEaXN0YW5jZS4gKERlZmF1bHQgaXMgMi41Y20pLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBsZWZ0QmxvYk5lYXJTaXplID0gMC4wMjU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHByb2dyZXNzIG9mIHRoZSBwdWxzZSBhbmltYXRpb24gb24gdGhlIGxlZnQgYmxvYiAoUmFuZ2VzIDAtMSkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGxlZnRCbG9iUHVsc2UgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBmYWRlIGZhY3RvciBvbiB0aGUgbGVmdCBibG9iLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBsZWZ0QmxvYkZhZGUgPSAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBpbm5lciBmYWRlIG9uIHRoZSBsZWZ0IGJsb2I7XHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGxlZnRCbG9iSW5uZXJGYWRlID0gMC4wMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB3aGV0aGVyIHRoZSBibG9iIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJpZ2h0IGluZGV4IGZpbmdlciBpcyBlbmFibGVkLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByaWdodEJsb2JFbmFibGUgPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzaXplIG9mIHRoZSByaWdodCBibG9iIHdoZW4gdGhlIHJpZ2h0IHBvaW50ZXIgaXMgY29uc2lkZXJlZCBuZWFyLiBTZWUgYmxvYk5lYXJEaXN0YW5jZS4gKERlZmF1bHQgaXMgMi41Y20pLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByaWdodEJsb2JOZWFyU2l6ZSA9IDAuMDI1O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBwcm9ncmVzcyBvZiB0aGUgcHVsc2UgYW5pbWF0aW9uIG9uIHRoZSByaWdodCBibG9iIChSYW5nZXMgMC0xKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmlnaHRCbG9iUHVsc2UgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBmYWRlIGZhY3RvciBvbiB0aGUgcmlnaHQgYmxvYi5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmlnaHRCbG9iRmFkZSA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGlubmVyIGZhZGUgb24gdGhlIHJpZ2h0IGJsb2I7XHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJpZ2h0QmxvYklubmVyRmFkZSA9IDAuMDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgYWN0aXZlIGZhY2UgYmVmb3JlIHRoZSB3b3JsZCB0cmFuc2Zvcm0gaXMgYXBwbGllZC5cclxuICAgICAqIFRoaXMgc2hvdWxkIGFsbW9zdCBhbHdheXMgYmUgc2V0IHRvIC16LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplQXNWZWN0b3IzKClcclxuICAgIHB1YmxpYyBhY3RpdmVGYWNlRGlyID0gbmV3IFZlY3RvcjMoMCwgMCwgLTEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBidXR0b24ncyB1cCBkaXJlY3Rpb24gYmVmb3JlIHRoZSB3b3JsZCB0cmFuc2Zvcm0gaXMgYXBwbGllZC5cclxuICAgICAqIFRoaXMgc2hvdWxkIGFsbW9zdCBhbHdheXMgYmUgc2V0IHRvICt5LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplQXNWZWN0b3IzKClcclxuICAgIHB1YmxpYyBhY3RpdmVGYWNlVXAgPSBuZXcgVmVjdG9yMygwLCAxLCAwKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB3aGV0aGVyIHRoZSBlZGdlIGZhZGUgZWZmZWN0IGlzIGVuYWJsZWQuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGVuYWJsZUZhZGUgPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGEgdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgd2lkdGggb2YgdGhlIGVkZ2UgZmFkZSBlZmZlY3QgKERlZmF1bHQgMS41KS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZmFkZVdpZHRoID0gMS41O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHdoZXRoZXIgdGhlIGFjdGl2ZSBmYWNlIGlzIHNtb290aGx5IGludGVycG9sYXRlZC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc21vb3RoQWN0aXZlRmFjZSA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgd2hldGhlciB0aGUgZnJhbWUgb2YgdGhlIGZsdWVudCBidXR0b24gbW9kZWwgaXMgdmlzaWJsZS5cclxuICAgICAqIFRoaXMgaXMgdXN1YWxseSBvbmx5IGVuYWJsZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc2hvd0ZyYW1lID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgd2hldGhlciB0aGUgYmxvYiBjb2xvciB0ZXh0dXJlIGlzIHVzZWQgZm9yIHRoZSBwcm94aW1pdHlcclxuICAgICAqIGxpZ2h0IGVmZmVjdC4gVGhpcyBpcyB1c3VhbGx5IG9ubHkgZGlzYWJsZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgdXNlQmxvYlRleHR1cmUgPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSB3b3JsZC1zcGFjZSBwb3NpdGlvbiBvZiB0aGUgdGlwIG9mIHRoZSBsZWZ0IGluZGV4IGZpbmdlci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZUFzVmVjdG9yMygpXHJcbiAgICBwdWJsaWMgZ2xvYmFsTGVmdEluZGV4VGlwUG9zaXRpb24gPSBWZWN0b3IzLlplcm8oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgd29ybGQtc3BhY2UgcG9zaXRpb24gb2YgdGhlIHRpcCBvZiB0aGUgcmlnaHQgaW5kZXggZmluZ2VyLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplQXNWZWN0b3IzKClcclxuICAgIHB1YmxpYyBnbG9iYWxSaWdodEluZGV4VGlwUG9zaXRpb24gPSBWZWN0b3IzLlplcm8oKTtcclxuXHJcbiAgICBwcml2YXRlIF9ibG9iVGV4dHVyZTogVGV4dHVyZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHNjZW5lPzogU2NlbmUpIHtcclxuICAgICAgICBzdXBlcihuYW1lLCBzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5hbHBoYU1vZGUgPSBDb25zdGFudHMuQUxQSEFfQUREO1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZURlcHRoV3JpdGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYmFja0ZhY2VDdWxsaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuX2Jsb2JUZXh0dXJlID0gbmV3IFRleHR1cmUoRmx1ZW50QnV0dG9uTWF0ZXJpYWwuQkxPQl9URVhUVVJFX1VSTCwgdGhpcy5nZXRTY2VuZSgpLCB0cnVlLCBmYWxzZSwgVGV4dHVyZS5ORUFSRVNUX1NBTVBMSU5HTU9ERSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIG5lZWRBbHBoYUJsZW5kaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBuZWVkQWxwaGFUZXN0aW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRBbHBoYVRlc3RUZXh0dXJlKCk6IE51bGxhYmxlPEJhc2VUZXh0dXJlPiB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWV0aG9kc1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGlzUmVhZHlGb3JTdWJNZXNoKG1lc2g6IEFic3RyYWN0TWVzaCwgc3ViTWVzaDogU3ViTWVzaCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGRyYXdXcmFwcGVyID0gc3ViTWVzaC5fZHJhd1dyYXBwZXI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRnJvemVuKSB7XHJcbiAgICAgICAgICAgIGlmIChkcmF3V3JhcHBlci5lZmZlY3QgJiYgZHJhd1dyYXBwZXIuX3dhc1ByZXZpb3VzbHlSZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3ViTWVzaC5tYXRlcmlhbERlZmluZXMpIHtcclxuICAgICAgICAgICAgc3ViTWVzaC5tYXRlcmlhbERlZmluZXMgPSBuZXcgRmx1ZW50QnV0dG9uTWF0ZXJpYWxEZWZpbmVzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkZWZpbmVzID0gPEZsdWVudEJ1dHRvbk1hdGVyaWFsRGVmaW5lcz5zdWJNZXNoLm1hdGVyaWFsRGVmaW5lcztcclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUmVhZHlGb3JTdWJNZXNoKHN1Yk1lc2gpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZW5naW5lID0gc2NlbmUuZ2V0RW5naW5lKCk7XHJcblxyXG4gICAgICAgIC8vIEF0dHJpYnNcclxuICAgICAgICBQcmVwYXJlRGVmaW5lc0ZvckF0dHJpYnV0ZXMobWVzaCwgZGVmaW5lcywgdHJ1ZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyBHZXQgY29ycmVjdCBlZmZlY3RcclxuICAgICAgICBpZiAoZGVmaW5lcy5pc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIGRlZmluZXMubWFya0FzUHJvY2Vzc2VkKCk7XHJcblxyXG4gICAgICAgICAgICBzY2VuZS5yZXNldENhY2hlZE1hdGVyaWFsKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBGYWxsYmFja3NcclxuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tzID0gbmV3IEVmZmVjdEZhbGxiYWNrcygpO1xyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5GT0cpIHtcclxuICAgICAgICAgICAgICAgIGZhbGxiYWNrcy5hZGRGYWxsYmFjaygxLCBcIkZPR1wiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgSGFuZGxlRmFsbGJhY2tzRm9yU2hhZG93cyhkZWZpbmVzLCBmYWxsYmFja3MpO1xyXG5cclxuICAgICAgICAgICAgZGVmaW5lcy5JTUFHRVBST0NFU1NJTkdQT1NUUFJPQ0VTUyA9IHNjZW5lLmltYWdlUHJvY2Vzc2luZ0NvbmZpZ3VyYXRpb24uYXBwbHlCeVBvc3RQcm9jZXNzO1xyXG5cclxuICAgICAgICAgICAgLy9BdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnMgPSBbVmVydGV4QnVmZmVyLlBvc2l0aW9uS2luZF07XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5OT1JNQUwpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuTm9ybWFsS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlVWMSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5VVktpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5VVjIpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVVYyS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlZFUlRFWENPTE9SKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLkNvbG9yS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlRBTkdFTlQpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVGFuZ2VudEtpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQcmVwYXJlQXR0cmlidXRlc0Zvckluc3RhbmNlcyhhdHRyaWJzLCBkZWZpbmVzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIExlZ2FjeSBicm93c2VyIHBhdGNoXHJcbiAgICAgICAgICAgIGNvbnN0IHNoYWRlck5hbWUgPSBcImZsdWVudEJ1dHRvblwiO1xyXG4gICAgICAgICAgICBjb25zdCBqb2luID0gZGVmaW5lcy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBbXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkXCIsXHJcbiAgICAgICAgICAgICAgICBcInZpZXdQcm9qZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcImNhbWVyYVBvc2l0aW9uXCIsXHJcblxyXG4gICAgICAgICAgICAgICAgXCJfRWRnZV9XaWR0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0VkZ2VfQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SZWxhdGl2ZV9XaWR0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1Byb3hpbWl0eV9NYXhfSW50ZW5zaXR5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUHJveGltaXR5X0Zhcl9EaXN0YW5jZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX1Byb3hpbWl0eV9OZWFyX1JhZGl1c19cIixcclxuICAgICAgICAgICAgICAgIFwiX1Byb3hpbWl0eV9Bbmlzb3Ryb3B5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU2VsZWN0aW9uX0Z1enpfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9TZWxlY3RlZF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1NlbGVjdGlvbl9GYWRlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU2VsZWN0aW9uX0ZhZGVfU2l6ZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX1NlbGVjdGVkX0Rpc3RhbmNlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU2VsZWN0ZWRfRmFkZV9MZW5ndGhfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0VuYWJsZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfUG9zaXRpb25fXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0ludGVuc2l0eV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfTmVhcl9TaXplX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYXJfU2l6ZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfTmVhcl9EaXN0YW5jZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfRmFyX0Rpc3RhbmNlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYWRlX0xlbmd0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfSW5uZXJfRmFkZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfUHVsc2VfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0ZhZGVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX1RleHR1cmVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0VuYWJsZV8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9Qb3NpdGlvbl8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9OZWFyX1NpemVfMl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfSW5uZXJfRmFkZV8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9QdWxzZV8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYWRlXzJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9BY3RpdmVfRmFjZV9EaXJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9BY3RpdmVfRmFjZV9VcF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0VuYWJsZV9GYWRlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfRmFkZV9XaWR0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1Ntb290aF9BY3RpdmVfRmFjZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX1Nob3dfRnJhbWVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Vc2VfQmxvYl9UZXh0dXJlX1wiLFxyXG5cclxuICAgICAgICAgICAgICAgIFwiVXNlX0dsb2JhbF9MZWZ0X0luZGV4XCIsXHJcbiAgICAgICAgICAgICAgICBcIlVzZV9HbG9iYWxfUmlnaHRfSW5kZXhcIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Bvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIkdsb2JhbF9SaWdodF9JbmRleF9UaXBfUG9zaXRpb25cIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX0xlZnRfVGh1bWJfVGlwX1Bvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIkdsb2JhbF9SaWdodF9UaHVtYl9UaXBfUG9zaXRpb25cIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Byb3hpbWl0eVwiLFxyXG4gICAgICAgICAgICAgICAgXCJHbG9iYWxfUmlnaHRfSW5kZXhfVGlwX1Byb3hpbWl0eVwiLFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBjb25zdCBzYW1wbGVyczogc3RyaW5nW10gPSBbXCJfQmxvYl9UZXh0dXJlX1wiXTtcclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybUJ1ZmZlcnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgICAgICBQcmVwYXJlVW5pZm9ybXNBbmRTYW1wbGVyc0xpc3QoPElFZmZlY3RDcmVhdGlvbk9wdGlvbnM+e1xyXG4gICAgICAgICAgICAgICAgdW5pZm9ybXNOYW1lczogdW5pZm9ybXMsXHJcbiAgICAgICAgICAgICAgICB1bmlmb3JtQnVmZmVyc05hbWVzOiB1bmlmb3JtQnVmZmVycyxcclxuICAgICAgICAgICAgICAgIHNhbXBsZXJzOiBzYW1wbGVycyxcclxuICAgICAgICAgICAgICAgIGRlZmluZXM6IGRlZmluZXMsXHJcbiAgICAgICAgICAgICAgICBtYXhTaW11bHRhbmVvdXNMaWdodHM6IDQsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc3ViTWVzaC5zZXRFZmZlY3QoXHJcbiAgICAgICAgICAgICAgICBzY2VuZS5nZXRFbmdpbmUoKS5jcmVhdGVFZmZlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgc2hhZGVyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICA8SUVmZmVjdENyZWF0aW9uT3B0aW9ucz57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zTmFtZXM6IHVuaWZvcm1zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3JtQnVmZmVyc05hbWVzOiB1bmlmb3JtQnVmZmVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlcnM6IHNhbXBsZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVzOiBqb2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFja3M6IGZhbGxiYWNrcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db21waWxlZDogdGhpcy5vbkNvbXBpbGVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yOiB0aGlzLm9uRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4UGFyYW1ldGVyczogeyBtYXhTaW11bHRhbmVvdXNMaWdodHM6IDQgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZVxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgIGRlZmluZXMsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbENvbnRleHRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzdWJNZXNoLmVmZmVjdCB8fCAhc3ViTWVzaC5lZmZlY3QuaXNSZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlZmluZXMuX3JlbmRlcklkID0gc2NlbmUuZ2V0UmVuZGVySWQoKTtcclxuICAgICAgICBkcmF3V3JhcHBlci5fd2FzUHJldmlvdXNseVJlYWR5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGJpbmRGb3JTdWJNZXNoKHdvcmxkOiBNYXRyaXgsIG1lc2g6IE1lc2gsIHN1Yk1lc2g6IFN1Yk1lc2gpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IDxGbHVlbnRCdXR0b25NYXRlcmlhbERlZmluZXM+c3ViTWVzaC5tYXRlcmlhbERlZmluZXM7XHJcbiAgICAgICAgaWYgKCFkZWZpbmVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IHN1Yk1lc2guZWZmZWN0O1xyXG4gICAgICAgIGlmICghZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdCA9IGVmZmVjdDtcclxuXHJcbiAgICAgICAgLy8gTWF0cmljZXNcclxuICAgICAgICB0aGlzLmJpbmRPbmx5V29ybGRNYXRyaXgod29ybGQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRNYXRyaXgoXCJ2aWV3UHJvamVjdGlvblwiLCBzY2VuZS5nZXRUcmFuc2Zvcm1NYXRyaXgoKSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjMoXCJjYW1lcmFQb3NpdGlvblwiLCBzY2VuZS5hY3RpdmVDYW1lcmEhLnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gXCJCbG9iIFRleHR1cmVcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRUZXh0dXJlKFwiX0Jsb2JfVGV4dHVyZV9cIiwgdGhpcy5fYmxvYlRleHR1cmUpO1xyXG5cclxuICAgICAgICAvLyBcIldpcmVmcmFtZVwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0VkZ2VfV2lkdGhfXCIsIHRoaXMuZWRnZVdpZHRoKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0Q29sb3I0KFwiX0VkZ2VfQ29sb3JfXCIsIG5ldyBDb2xvcjModGhpcy5lZGdlQ29sb3IuciwgdGhpcy5lZGdlQ29sb3IuZywgdGhpcy5lZGdlQ29sb3IuYiksIHRoaXMuZWRnZUNvbG9yLmEpO1xyXG4gICAgICAgIC8vZGVmaW5lIF9SZWxhdGl2ZV9XaWR0aF8gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gXCJQcm94aW1pdHlcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Qcm94aW1pdHlfTWF4X0ludGVuc2l0eV9cIiwgdGhpcy5wcm94aW1pdHlNYXhJbnRlbnNpdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Qcm94aW1pdHlfRmFyX0Rpc3RhbmNlX1wiLCB0aGlzLnByb3hpbWl0eUZhckRpc3RhbmNlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUHJveGltaXR5X05lYXJfUmFkaXVzX1wiLCB0aGlzLnByb3hpbWl0eU5lYXJSYWRpdXMpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Qcm94aW1pdHlfQW5pc290cm9weV9cIiwgdGhpcy5wcm94aW1pdHlBbmlzb3Ryb3B5KTtcclxuXHJcbiAgICAgICAgLy8gXCJTZWxlY3Rpb25cIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TZWxlY3Rpb25fRnV6el9cIiwgdGhpcy5zZWxlY3Rpb25GdXp6KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU2VsZWN0ZWRfXCIsIHRoaXMuc2VsZWN0ZWQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TZWxlY3Rpb25fRmFkZV9cIiwgdGhpcy5zZWxlY3Rpb25GYWRlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU2VsZWN0aW9uX0ZhZGVfU2l6ZV9cIiwgdGhpcy5zZWxlY3Rpb25GYWRlU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1NlbGVjdGVkX0Rpc3RhbmNlX1wiLCB0aGlzLnNlbGVjdGVkRGlzdGFuY2UpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TZWxlY3RlZF9GYWRlX0xlbmd0aF9cIiwgdGhpcy5zZWxlY3RlZEZhZGVMZW5ndGgpO1xyXG5cclxuICAgICAgICAvLyBcIkJsb2JcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0VuYWJsZV9cIiwgdGhpcy5sZWZ0QmxvYkVuYWJsZSA/IDEuMCA6IDAuMCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfSW50ZW5zaXR5X1wiLCB0aGlzLmJsb2JJbnRlbnNpdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX05lYXJfU2l6ZV9cIiwgdGhpcy5sZWZ0QmxvYk5lYXJTaXplKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9GYXJfU2l6ZV9cIiwgdGhpcy5ibG9iRmFyU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfTmVhcl9EaXN0YW5jZV9cIiwgdGhpcy5ibG9iTmVhckRpc3RhbmNlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9GYXJfRGlzdGFuY2VfXCIsIHRoaXMuYmxvYkZhckRpc3RhbmNlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9GYWRlX0xlbmd0aF9cIiwgdGhpcy5ibG9iRmFkZUxlbmd0aCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfSW5uZXJfRmFkZV9cIiwgdGhpcy5sZWZ0QmxvYklubmVyRmFkZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfUHVsc2VfXCIsIHRoaXMubGVmdEJsb2JQdWxzZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFkZV9cIiwgdGhpcy5sZWZ0QmxvYkZhZGUpO1xyXG5cclxuICAgICAgICAvLyBcIkJsb2IgMlwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRW5hYmxlXzJfXCIsIHRoaXMucmlnaHRCbG9iRW5hYmxlID8gMS4wIDogMC4wKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9OZWFyX1NpemVfMl9cIiwgdGhpcy5yaWdodEJsb2JOZWFyU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfSW5uZXJfRmFkZV8yX1wiLCB0aGlzLnJpZ2h0QmxvYklubmVyRmFkZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfUHVsc2VfMl9cIiwgdGhpcy5yaWdodEJsb2JQdWxzZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFkZV8yX1wiLCB0aGlzLnJpZ2h0QmxvYkZhZGUpO1xyXG5cclxuICAgICAgICAvLyBcIkFjdGl2ZSBGYWNlXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcIl9BY3RpdmVfRmFjZV9EaXJfXCIsIHRoaXMuYWN0aXZlRmFjZURpcik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjMoXCJfQWN0aXZlX0ZhY2VfVXBfXCIsIHRoaXMuYWN0aXZlRmFjZVVwKTtcclxuXHJcbiAgICAgICAgLy8gXCJIb2xvbGVucyBFZGdlIEZhZGVcIlxyXG4gICAgICAgIC8vZGVmaW5lIF9FbmFibGVfRmFkZV8gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRmFkZV9XaWR0aF9cIiwgdGhpcy5mYWRlV2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TbW9vdGhfQWN0aXZlX0ZhY2VfXCIsIHRoaXMuc21vb3RoQWN0aXZlRmFjZSA/IDEuMCA6IDAuMCk7XHJcblxyXG4gICAgICAgIC8vIFwiRGVidWdcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TaG93X0ZyYW1lX1wiLCB0aGlzLnNob3dGcmFtZSA/IDEuMCA6IDAuMCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1VzZV9CbG9iX1RleHR1cmVfXCIsIHRoaXMudXNlQmxvYlRleHR1cmUgPyAxLjAgOiAwLjApO1xyXG5cclxuICAgICAgICAvLyBHbG9iYWwgaW5wdXRzXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiVXNlX0dsb2JhbF9MZWZ0X0luZGV4XCIsIDEuMCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiVXNlX0dsb2JhbF9SaWdodF9JbmRleFwiLCAxLjApO1xyXG5cclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yNChcclxuICAgICAgICAgICAgXCJHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb25cIixcclxuICAgICAgICAgICAgbmV3IFZlY3RvcjQodGhpcy5nbG9iYWxMZWZ0SW5kZXhUaXBQb3NpdGlvbi54LCB0aGlzLmdsb2JhbExlZnRJbmRleFRpcFBvc2l0aW9uLnksIHRoaXMuZ2xvYmFsTGVmdEluZGV4VGlwUG9zaXRpb24ueiwgMS4wKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjQoXHJcbiAgICAgICAgICAgIFwiR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvblwiLFxyXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCh0aGlzLmdsb2JhbFJpZ2h0SW5kZXhUaXBQb3NpdGlvbi54LCB0aGlzLmdsb2JhbFJpZ2h0SW5kZXhUaXBQb3NpdGlvbi55LCB0aGlzLmdsb2JhbFJpZ2h0SW5kZXhUaXBQb3NpdGlvbi56LCAxLjApXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWZ0ZXJCaW5kKG1lc2gsIHRoaXMuX2FjdGl2ZUVmZmVjdCwgc3ViTWVzaCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGxpc3Qgb2YgYW5pbWF0YWJsZXMgaW4gdGhlIG1hdGVyaWFsLlxyXG4gICAgICogQHJldHVybnMgdGhlIGxpc3Qgb2YgYW5pbWF0YWJsZXMgb2JqZWN0IHVzZWQgaW4gdGhlIG1hdGVyaWFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRBbmltYXRhYmxlcygpOiBJQW5pbWF0YWJsZVtdIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoZm9yY2VEaXNwb3NlRWZmZWN0PzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoZm9yY2VEaXNwb3NlRWZmZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgY2xvbmUobmFtZTogc3RyaW5nKTogRmx1ZW50QnV0dG9uTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiBTZXJpYWxpemF0aW9uSGVscGVyLkNsb25lKCgpID0+IG5ldyBGbHVlbnRCdXR0b25NYXRlcmlhbChuYW1lLCB0aGlzLmdldFNjZW5lKCkpLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2VyaWFsaXplKCk6IGFueSB7XHJcbiAgICAgICAgY29uc3Qgc2VyaWFsaXphdGlvbk9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZSgpO1xyXG4gICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QuY3VzdG9tVHlwZSA9IFwiQkFCWUxPTi5GbHVlbnRCdXR0b25NYXRlcmlhbFwiO1xyXG4gICAgICAgIHJldHVybiBzZXJpYWxpemF0aW9uT2JqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRDbGFzc05hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJGbHVlbnRCdXR0b25NYXRlcmlhbFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0YXRpY3NcclxuICAgIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgUGFyc2Uoc291cmNlOiBhbnksIHNjZW5lOiBTY2VuZSwgcm9vdFVybDogc3RyaW5nKTogRmx1ZW50QnV0dG9uTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiBTZXJpYWxpemF0aW9uSGVscGVyLlBhcnNlKCgpID0+IG5ldyBGbHVlbnRCdXR0b25NYXRlcmlhbChzb3VyY2UubmFtZSwgc2NlbmUpLCBzb3VyY2UsIHNjZW5lLCByb290VXJsKTtcclxuICAgIH1cclxufVxyXG5cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLkZsdWVudEJ1dHRvbk1hdGVyaWFsXCIsIEZsdWVudEJ1dHRvbk1hdGVyaWFsKTtcclxuIiwiZXhwb3J0ICogZnJvbSBcIi4vZmx1ZW50QnV0dG9uTWF0ZXJpYWxcIjtcclxuIiwiLy8gRG8gbm90IGVkaXQuXG5pbXBvcnQgeyBTaGFkZXJTdG9yZSB9IGZyb20gXCJjb3JlL0VuZ2luZXMvc2hhZGVyU3RvcmVcIjtcblxuY29uc3QgbmFtZSA9IFwiZmx1ZW50QnV0dG9uUGl4ZWxTaGFkZXJcIjtcbmNvbnN0IHNoYWRlciA9IGB1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247dmFyeWluZyB2ZWMzIHZQb3NpdGlvbjt2YXJ5aW5nIHZlYzMgdk5vcm1hbDt2YXJ5aW5nIHZlYzIgdlVWO3ZhcnlpbmcgdmVjMyB2VGFuZ2VudDt2YXJ5aW5nIHZlYzMgdkJpbm9ybWFsO3ZhcnlpbmcgdmVjNCB2Q29sb3I7dmFyeWluZyB2ZWM0IHZFeHRyYTE7dW5pZm9ybSBmbG9hdCBfRWRnZV9XaWR0aF87dW5pZm9ybSB2ZWM0IF9FZGdlX0NvbG9yXzt1bmlmb3JtIGJvb2wgX1JlbGF0aXZlX1dpZHRoXzt1bmlmb3JtIGZsb2F0IF9Qcm94aW1pdHlfTWF4X0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfUHJveGltaXR5X0Zhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfUHJveGltaXR5X05lYXJfUmFkaXVzXzt1bmlmb3JtIGZsb2F0IF9Qcm94aW1pdHlfQW5pc290cm9weV87dW5pZm9ybSBmbG9hdCBfU2VsZWN0aW9uX0Z1enpfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGVkXzt1bmlmb3JtIGZsb2F0IF9TZWxlY3Rpb25fRmFkZV87dW5pZm9ybSBmbG9hdCBfU2VsZWN0aW9uX0ZhZGVfU2l6ZV87dW5pZm9ybSBmbG9hdCBfU2VsZWN0ZWRfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGVkX0ZhZGVfTGVuZ3RoXzt1bmlmb3JtIGJvb2wgX0Jsb2JfRW5hYmxlXzt1bmlmb3JtIHZlYzMgX0Jsb2JfUG9zaXRpb25fO3VuaWZvcm0gZmxvYXQgX0Jsb2JfSW50ZW5zaXR5Xzt1bmlmb3JtIGZsb2F0IF9CbG9iX05lYXJfU2l6ZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfU2l6ZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX0Rpc3RhbmNlXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0Zhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlX0xlbmd0aF87dW5pZm9ybSBmbG9hdCBfQmxvYl9Jbm5lcl9GYWRlXzt1bmlmb3JtIGZsb2F0IF9CbG9iX1B1bHNlXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ZhZGVfO3VuaWZvcm0gc2FtcGxlcjJEIF9CbG9iX1RleHR1cmVfO3VuaWZvcm0gYm9vbCBfQmxvYl9FbmFibGVfMl87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzJfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9TaXplXzJfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfSW5uZXJfRmFkZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX1B1bHNlXzJfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV8yXzt1bmlmb3JtIHZlYzMgX0FjdGl2ZV9GYWNlX0Rpcl87dW5pZm9ybSB2ZWMzIF9BY3RpdmVfRmFjZV9VcF87dW5pZm9ybSBib29sIEVuYWJsZV9GYWRlO3VuaWZvcm0gZmxvYXQgX0ZhZGVfV2lkdGhfO3VuaWZvcm0gYm9vbCBfU21vb3RoX0FjdGl2ZV9GYWNlXzt1bmlmb3JtIGJvb2wgX1Nob3dfRnJhbWVfO3VuaWZvcm0gYm9vbCBfVXNlX0Jsb2JfVGV4dHVyZV87dW5pZm9ybSBib29sIFVzZV9HbG9iYWxfTGVmdF9JbmRleDt1bmlmb3JtIGJvb2wgVXNlX0dsb2JhbF9SaWdodF9JbmRleDt1bmlmb3JtIHZlYzQgR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Bvc2l0aW9uO3VuaWZvcm0gdmVjNCBHbG9iYWxfUmlnaHRfSW5kZXhfVGlwX1Bvc2l0aW9uO3VuaWZvcm0gdmVjNCBHbG9iYWxfTGVmdF9UaHVtYl9UaXBfUG9zaXRpb247dW5pZm9ybSB2ZWM0IEdsb2JhbF9SaWdodF9UaHVtYl9UaXBfUG9zaXRpb247dW5pZm9ybSBmbG9hdCBHbG9iYWxfTGVmdF9JbmRleF9UaXBfUHJveGltaXR5O3VuaWZvcm0gZmxvYXQgR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qcm94aW1pdHk7dm9pZCBIb2xvX0VkZ2VfRnJhZ21lbnRfQjM1KFxudmVjNCBFZGdlcyxcbmZsb2F0IEVkZ2VfV2lkdGgsXG5vdXQgZmxvYXQgTm90RWRnZSlcbnt2ZWMyIGM9dmVjMihtaW4oRWRnZXMucixFZGdlcy5nKSxtaW4oRWRnZXMuYixFZGdlcy5hKSk7dmVjMiBkZj1md2lkdGgoYykqRWRnZV9XaWR0aDt2ZWMyIGc9Y2xhbXAoYy9kZiwwLjAsMS4wKTtOb3RFZGdlPWcueCpnLnk7fVxudm9pZCBCbG9iX0ZyYWdtZW50X0IzOShcbnZlYzIgVVYsXG52ZWMzIEJsb2JfSW5mbyxcbnNhbXBsZXIyRCBCbG9iX1RleHR1cmUsXG5vdXQgdmVjNCBCbG9iX0NvbG9yKVxue2Zsb2F0IGs9ZG90KFVWLFVWKTtCbG9iX0NvbG9yPUJsb2JfSW5mby55KnRleHR1cmUoQmxvYl9UZXh0dXJlLHZlYzIodmVjMihzcXJ0KGspLEJsb2JfSW5mby54KS54LDEuMC12ZWMyKHNxcnQoayksQmxvYl9JbmZvLngpLnkpKSooMS4wLWNsYW1wKGssMC4wLDEuMCkpO31cbnZlYzIgRmlsdGVyU3RlcCh2ZWMyIEVkZ2UsdmVjMiBYKVxue3ZlYzIgZFg9bWF4KGZ3aWR0aChYKSx2ZWMyKDAuMDAwMDEsMC4wMDAwMSkpO3JldHVybiBjbGFtcCggKFgrZFgtbWF4KEVkZ2UsWC1kWCkpLyhkWCoyLjApLDAuMCwxLjApO31cbnZvaWQgV2lyZWZyYW1lX0ZyYWdtZW50X0I1OShcbnZlYzMgV2lkdGhzLFxudmVjMiBVVixcbmZsb2F0IFByb3hpbWl0eSxcbnZlYzQgRWRnZV9Db2xvcixcbm91dCB2ZWM0IFdpcmVmcmFtZSlcbnt2ZWMyIGM9bWluKFVWLHZlYzIoMS4wLDEuMCktVVYpO3ZlYzIgZz1GaWx0ZXJTdGVwKFdpZHRocy54eSowLjUsYyk7IFxuV2lyZWZyYW1lPSgxLjAtbWluKGcueCxnLnkpKSpQcm94aW1pdHkqRWRnZV9Db2xvcjt9XG52b2lkIFByb3hpbWl0eV9CNTMoXG52ZWMzIFByb3hpbWl0eV9DZW50ZXIsXG52ZWMzIFByb3hpbWl0eV9DZW50ZXJfMixcbmZsb2F0IFByb3hpbWl0eV9NYXhfSW50ZW5zaXR5LFxuZmxvYXQgUHJveGltaXR5X05lYXJfUmFkaXVzLFxudmVjMyBQb3NpdGlvbixcbnZlYzMgU2hvd19TZWxlY3Rpb24sXG52ZWM0IEV4dHJhMSxcbmZsb2F0IERpc3RfVG9fRmFjZSxcbmZsb2F0IEludGVuc2l0eSxcbm91dCBmbG9hdCBQcm94aW1pdHkpXG57dmVjMiBkZWx0YTE9RXh0cmExLnh5O3ZlYzIgZGVsdGEyPUV4dHJhMS56dztmbG9hdCBkMj1zcXJ0KG1pbihkb3QoZGVsdGExLGRlbHRhMSksZG90KGRlbHRhMixkZWx0YTIpKStEaXN0X1RvX0ZhY2UqRGlzdF9Ub19GYWNlKTtQcm94aW1pdHk9SW50ZW5zaXR5KlByb3hpbWl0eV9NYXhfSW50ZW5zaXR5KigxLjAtY2xhbXAoZDIvUHJveGltaXR5X05lYXJfUmFkaXVzLDAuMCwxLjApKSooMS4wLVNob3dfU2VsZWN0aW9uLngpK1Nob3dfU2VsZWN0aW9uLng7fVxudm9pZCBUb19YWVpfQjQ2KFxudmVjMyBWZWMzLFxub3V0IGZsb2F0IFgsXG5vdXQgZmxvYXQgWSxcbm91dCBmbG9hdCBaKVxue1g9VmVjMy54O1k9VmVjMy55O1o9VmVjMy56O31cbnZvaWQgbWFpbigpXG57ZmxvYXQgTm90RWRnZV9RMzU7XG4jaWYgRU5BQkxFX0ZBREVcbkhvbG9fRWRnZV9GcmFnbWVudF9CMzUodkNvbG9yLF9GYWRlX1dpZHRoXyxOb3RFZGdlX1EzNSk7XG4jZWxzZVxuTm90RWRnZV9RMzU9MS4wO1xuI2VuZGlmXG52ZWM0IEJsb2JfQ29sb3JfUTM5O2Zsb2F0IGs9ZG90KHZVVix2VVYpO3ZlYzIgYmxvYlRleHR1cmVDb29yZD12ZWMyKHZlYzIoc3FydChrKSx2VGFuZ2VudC54KS54LDEuMC12ZWMyKHNxcnQoayksdlRhbmdlbnQueCkueSk7dmVjNCBibG9iQ29sb3I9bWl4KHZlYzQoMS4wLDEuMCwxLjAsMS4wKSpzdGVwKDEuMC12VGFuZ2VudC54LGNsYW1wKHNxcnQoaykrMC4xLDAuMCwxLjApKSx0ZXh0dXJlKF9CbG9iX1RleHR1cmVfLGJsb2JUZXh0dXJlQ29vcmQpLGZsb2F0KF9Vc2VfQmxvYl9UZXh0dXJlXykpO0Jsb2JfQ29sb3JfUTM5PXZUYW5nZW50LnkqYmxvYkNvbG9yKigxLjAtY2xhbXAoaywwLjAsMS4wKSk7ZmxvYXQgSXNfUXVhZF9RMjQ7SXNfUXVhZF9RMjQ9dk5vcm1hbC56O3ZlYzMgQmxvYl9Qb3NpdGlvbl9RNDE9IG1peChfQmxvYl9Qb3NpdGlvbl8sR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Bvc2l0aW9uLnh5eixmbG9hdChVc2VfR2xvYmFsX0xlZnRfSW5kZXgpKTt2ZWMzIEJsb2JfUG9zaXRpb25fUTQyPSBtaXgoX0Jsb2JfUG9zaXRpb25fMl8sR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvbi54eXosZmxvYXQoVXNlX0dsb2JhbF9SaWdodF9JbmRleCkpO2Zsb2F0IFhfUTQ2O2Zsb2F0IFlfUTQ2O2Zsb2F0IFpfUTQ2O1RvX1hZWl9CNDYodkJpbm9ybWFsLFhfUTQ2LFlfUTQ2LFpfUTQ2KTtmbG9hdCBQcm94aW1pdHlfUTUzO1Byb3hpbWl0eV9CNTMoQmxvYl9Qb3NpdGlvbl9RNDEsQmxvYl9Qb3NpdGlvbl9RNDIsX1Byb3hpbWl0eV9NYXhfSW50ZW5zaXR5XyxfUHJveGltaXR5X05lYXJfUmFkaXVzXyx2UG9zaXRpb24sdkJpbm9ybWFsLHZFeHRyYTEsWV9RNDYsWl9RNDYsUHJveGltaXR5X1E1Myk7dmVjNCBXaXJlZnJhbWVfUTU5O1dpcmVmcmFtZV9GcmFnbWVudF9CNTkodk5vcm1hbCx2VVYsUHJveGltaXR5X1E1MyxfRWRnZV9Db2xvcl8sV2lyZWZyYW1lX1E1OSk7dmVjNCBXaXJlX09yX0Jsb2JfUTIzPW1peChXaXJlZnJhbWVfUTU5LEJsb2JfQ29sb3JfUTM5LElzX1F1YWRfUTI0KTt2ZWM0IFJlc3VsdF9RMjI7UmVzdWx0X1EyMj1taXgoV2lyZV9Pcl9CbG9iX1EyMyx2ZWM0KDAuMywwLjMsMC4zLDAuMyksZmxvYXQoX1Nob3dfRnJhbWVfKSk7dmVjNCBGaW5hbF9Db2xvcl9RMzc9Tm90RWRnZV9RMzUqUmVzdWx0X1EyMjt2ZWM0IE91dF9Db2xvcj1GaW5hbF9Db2xvcl9RMzc7ZmxvYXQgQ2xpcF9UaHJlc2hvbGQ9MC4wO2Jvb2wgVG9fc1JHQj1mYWxzZTtnbF9GcmFnQ29sb3I9T3V0X0NvbG9yO31gO1xuLy8gU2lkZWVmZmVjdFxuU2hhZGVyU3RvcmUuU2hhZGVyc1N0b3JlW25hbWVdID0gc2hhZGVyO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGZsdWVudEJ1dHRvblBpeGVsU2hhZGVyID0geyBuYW1lLCBzaGFkZXIgfTtcbiIsIi8vIERvIG5vdCBlZGl0LlxuaW1wb3J0IHsgU2hhZGVyU3RvcmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL3NoYWRlclN0b3JlXCI7XG5cbmNvbnN0IG5hbWUgPSBcImZsdWVudEJ1dHRvblZlcnRleFNoYWRlclwiO1xuY29uc3Qgc2hhZGVyID0gYHVuaWZvcm0gbWF0NCB3b3JsZDt1bmlmb3JtIG1hdDQgdmlld1Byb2plY3Rpb247dW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO2F0dHJpYnV0ZSB2ZWMzIG5vcm1hbDthdHRyaWJ1dGUgdmVjMiB1djthdHRyaWJ1dGUgdmVjMyB0YW5nZW50O2F0dHJpYnV0ZSB2ZWM0IGNvbG9yO3VuaWZvcm0gZmxvYXQgX0VkZ2VfV2lkdGhfO3VuaWZvcm0gdmVjNCBfRWRnZV9Db2xvcl87dW5pZm9ybSBmbG9hdCBfUHJveGltaXR5X01heF9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX1Byb3hpbWl0eV9GYXJfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX1Byb3hpbWl0eV9OZWFyX1JhZGl1c187dW5pZm9ybSBmbG9hdCBfUHJveGltaXR5X0FuaXNvdHJvcHlfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGlvbl9GdXp6Xzt1bmlmb3JtIGZsb2F0IF9TZWxlY3RlZF87dW5pZm9ybSBmbG9hdCBfU2VsZWN0aW9uX0ZhZGVfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGlvbl9GYWRlX1NpemVfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGVkX0Rpc3RhbmNlXzt1bmlmb3JtIGZsb2F0IF9TZWxlY3RlZF9GYWRlX0xlbmd0aF87dW5pZm9ybSBib29sIF9CbG9iX0VuYWJsZV87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV9MZW5ndGhfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfSW5uZXJfRmFkZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlXzt1bmlmb3JtIHNhbXBsZXIyRCBfQmxvYl9UZXh0dXJlXzt1bmlmb3JtIGJvb2wgX0Jsb2JfRW5hYmxlXzJfO3VuaWZvcm0gdmVjMyBfQmxvYl9Qb3NpdGlvbl8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX05lYXJfU2l6ZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0lubmVyX0ZhZGVfMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ZhZGVfMl87dW5pZm9ybSB2ZWMzIF9BY3RpdmVfRmFjZV9EaXJfO3VuaWZvcm0gdmVjMyBfQWN0aXZlX0ZhY2VfVXBfO3VuaWZvcm0gYm9vbCBfRW5hYmxlX0ZhZGVfO3VuaWZvcm0gZmxvYXQgX0ZhZGVfV2lkdGhfO3VuaWZvcm0gYm9vbCBfU21vb3RoX0FjdGl2ZV9GYWNlXzt1bmlmb3JtIGJvb2wgX1Nob3dfRnJhbWVfO3VuaWZvcm0gYm9vbCBVc2VfR2xvYmFsX0xlZnRfSW5kZXg7dW5pZm9ybSBib29sIFVzZV9HbG9iYWxfUmlnaHRfSW5kZXg7dW5pZm9ybSB2ZWM0IEdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qb3NpdGlvbjt1bmlmb3JtIHZlYzQgR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvbjt1bmlmb3JtIHZlYzQgR2xvYmFsX0xlZnRfVGh1bWJfVGlwX1Bvc2l0aW9uO3VuaWZvcm0gdmVjNCBHbG9iYWxfUmlnaHRfVGh1bWJfVGlwX1Bvc2l0aW9uO3VuaWZvcm0gZmxvYXQgR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Byb3hpbWl0eTt1bmlmb3JtIGZsb2F0IEdsb2JhbF9SaWdodF9JbmRleF9UaXBfUHJveGltaXR5O3ZhcnlpbmcgdmVjMyB2UG9zaXRpb247dmFyeWluZyB2ZWMzIHZOb3JtYWw7dmFyeWluZyB2ZWMyIHZVVjt2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7dmFyeWluZyB2ZWMzIHZCaW5vcm1hbDt2YXJ5aW5nIHZlYzQgdkNvbG9yO3ZhcnlpbmcgdmVjNCB2RXh0cmExO3ZvaWQgQmxvYl9WZXJ0ZXhfQjQ3KFxudmVjMyBQb3NpdGlvbixcbnZlYzMgTm9ybWFsLFxudmVjMyBUYW5nZW50LFxudmVjMyBCaXRhbmdlbnQsXG52ZWMzIEJsb2JfUG9zaXRpb24sXG5mbG9hdCBJbnRlbnNpdHksXG5mbG9hdCBCbG9iX05lYXJfU2l6ZSxcbmZsb2F0IEJsb2JfRmFyX1NpemUsXG5mbG9hdCBCbG9iX05lYXJfRGlzdGFuY2UsXG5mbG9hdCBCbG9iX0Zhcl9EaXN0YW5jZSxcbnZlYzQgVnhfQ29sb3IsXG52ZWMyIFVWLFxudmVjMyBGYWNlX0NlbnRlcixcbnZlYzIgRmFjZV9TaXplLFxudmVjMiBJbl9VVixcbmZsb2F0IEJsb2JfRmFkZV9MZW5ndGgsXG5mbG9hdCBTZWxlY3Rpb25fRmFkZSxcbmZsb2F0IFNlbGVjdGlvbl9GYWRlX1NpemUsXG5mbG9hdCBJbm5lcl9GYWRlLFxudmVjMyBBY3RpdmVfRmFjZV9DZW50ZXIsXG5mbG9hdCBCbG9iX1B1bHNlLFxuZmxvYXQgQmxvYl9GYWRlLFxuZmxvYXQgQmxvYl9FbmFibGVkLFxub3V0IHZlYzMgT3V0X1Bvc2l0aW9uLFxub3V0IHZlYzIgT3V0X1VWLFxub3V0IHZlYzMgQmxvYl9JbmZvKVxue2Zsb2F0IGJsb2JTaXplLGZhZGVJbjt2ZWMzIEhpdF9Qb3NpdGlvbjtCbG9iX0luZm89dmVjMygwLjAsMC4wLDAuMCk7ZmxvYXQgSGl0X0Rpc3RhbmNlPWRvdChCbG9iX1Bvc2l0aW9uLUZhY2VfQ2VudGVyLE5vcm1hbCk7SGl0X1Bvc2l0aW9uPUJsb2JfUG9zaXRpb24tSGl0X0Rpc3RhbmNlKk5vcm1hbDtmbG9hdCBhYnNEPWFicyhIaXRfRGlzdGFuY2UpO2Zsb2F0IGxlcnBWYWw9Y2xhbXAoKGFic0QtQmxvYl9OZWFyX0Rpc3RhbmNlKS8oQmxvYl9GYXJfRGlzdGFuY2UtQmxvYl9OZWFyX0Rpc3RhbmNlKSwwLjAsMS4wKTtmYWRlSW49MS4wLWNsYW1wKChhYnNELUJsb2JfRmFyX0Rpc3RhbmNlKS9CbG9iX0ZhZGVfTGVuZ3RoLDAuMCwxLjApO2Zsb2F0IGlubmVyRmFkZT0xLjAtY2xhbXAoLUhpdF9EaXN0YW5jZS9Jbm5lcl9GYWRlLDAuMCwxLjApO2Zsb2F0IGZhckNsaXA9Y2xhbXAoMS4wLXN0ZXAoQmxvYl9GYXJfRGlzdGFuY2UrQmxvYl9GYWRlX0xlbmd0aCxhYnNEKSwwLjAsMS4wKTtmbG9hdCBzaXplPW1peChCbG9iX05lYXJfU2l6ZSxCbG9iX0Zhcl9TaXplLGxlcnBWYWwpKmZhckNsaXA7YmxvYlNpemU9bWl4KHNpemUsU2VsZWN0aW9uX0ZhZGVfU2l6ZSxTZWxlY3Rpb25fRmFkZSkqaW5uZXJGYWRlKkJsb2JfRW5hYmxlZDtCbG9iX0luZm8ueD1sZXJwVmFsKjAuNSswLjU7QmxvYl9JbmZvLnk9ZmFkZUluKkludGVuc2l0eSooMS4wLVNlbGVjdGlvbl9GYWRlKSpCbG9iX0ZhZGU7QmxvYl9JbmZvLngqPSgxLjAtQmxvYl9QdWxzZSk7dmVjMyBkZWx0YT1IaXRfUG9zaXRpb24tRmFjZV9DZW50ZXI7dmVjMiBibG9iQ2VudGVyWFk9dmVjMihkb3QoZGVsdGEsVGFuZ2VudCksZG90KGRlbHRhLEJpdGFuZ2VudCkpO3ZlYzIgcXVhZFVWaW49Mi4wKlVWLTEuMDsgXG52ZWMyIGJsb2JYWT1ibG9iQ2VudGVyWFkrcXVhZFVWaW4qYmxvYlNpemU7dmVjMiBibG9iQ2xpcHBlZD1jbGFtcChibG9iWFksLUZhY2VfU2l6ZSowLjUsRmFjZV9TaXplKjAuNSk7dmVjMiBibG9iVVY9KGJsb2JDbGlwcGVkLWJsb2JDZW50ZXJYWSkvbWF4KGJsb2JTaXplLDAuMDAwMSkqMi4wO3ZlYzMgYmxvYkNvcm5lcj1GYWNlX0NlbnRlcitibG9iQ2xpcHBlZC54KlRhbmdlbnQrYmxvYkNsaXBwZWQueSpCaXRhbmdlbnQ7T3V0X1Bvc2l0aW9uPW1peChQb3NpdGlvbixibG9iQ29ybmVyLFZ4X0NvbG9yLnJycik7T3V0X1VWPW1peChJbl9VVixibG9iVVYsVnhfQ29sb3IucnIpO31cbnZlYzIgUHJvamVjdFByb3hpbWl0eShcbnZlYzMgYmxvYlBvc2l0aW9uLFxudmVjMyBwb3NpdGlvbixcbnZlYzMgY2VudGVyLFxudmVjMyBkaXIsXG52ZWMzIHhkaXIsXG52ZWMzIHlkaXIsXG5vdXQgZmxvYXQgdmRpc3RhbmNlXG4pXG57dmVjMyBkZWx0YT1ibG9iUG9zaXRpb24tcG9zaXRpb247dmVjMiB4eT12ZWMyKGRvdChkZWx0YSx4ZGlyKSxkb3QoZGVsdGEseWRpcikpO3ZkaXN0YW5jZT1hYnMoZG90KGRlbHRhLGRpcikpO3JldHVybiB4eTt9XG52b2lkIFByb3hpbWl0eV9WZXJ0ZXhfQjY2KFxudmVjMyBCbG9iX1Bvc2l0aW9uLFxudmVjMyBCbG9iX1Bvc2l0aW9uXzIsXG52ZWMzIEFjdGl2ZV9GYWNlX0NlbnRlcixcbnZlYzMgQWN0aXZlX0ZhY2VfRGlyLFxudmVjMyBQb3NpdGlvbixcbmZsb2F0IFByb3hpbWl0eV9GYXJfRGlzdGFuY2UsXG5mbG9hdCBSZWxhdGl2ZV9TY2FsZSxcbmZsb2F0IFByb3hpbWl0eV9Bbmlzb3Ryb3B5LFxudmVjMyBVcCxcbm91dCB2ZWM0IEV4dHJhMSxcbm91dCBmbG9hdCBEaXN0YW5jZV9Ub19GYWNlLFxub3V0IGZsb2F0IEludGVuc2l0eSlcbnt2ZWMzIEFjdGl2ZV9GYWNlX0Rpcl9YPW5vcm1hbGl6ZShjcm9zcyhBY3RpdmVfRmFjZV9EaXIsVXApKTt2ZWMzIEFjdGl2ZV9GYWNlX0Rpcl9ZPWNyb3NzKEFjdGl2ZV9GYWNlX0RpcixBY3RpdmVfRmFjZV9EaXJfWCk7ZmxvYXQgZGlzdHoxLGRpc3R6MjtFeHRyYTEueHk9UHJvamVjdFByb3hpbWl0eShCbG9iX1Bvc2l0aW9uLFBvc2l0aW9uLEFjdGl2ZV9GYWNlX0NlbnRlcixBY3RpdmVfRmFjZV9EaXIsQWN0aXZlX0ZhY2VfRGlyX1gqUHJveGltaXR5X0FuaXNvdHJvcHksQWN0aXZlX0ZhY2VfRGlyX1ksZGlzdHoxKS9SZWxhdGl2ZV9TY2FsZTtFeHRyYTEuenc9UHJvamVjdFByb3hpbWl0eShCbG9iX1Bvc2l0aW9uXzIsUG9zaXRpb24sQWN0aXZlX0ZhY2VfQ2VudGVyLEFjdGl2ZV9GYWNlX0RpcixBY3RpdmVfRmFjZV9EaXJfWCpQcm94aW1pdHlfQW5pc290cm9weSxBY3RpdmVfRmFjZV9EaXJfWSxkaXN0ejIpL1JlbGF0aXZlX1NjYWxlO0Rpc3RhbmNlX1RvX0ZhY2U9ZG90KEFjdGl2ZV9GYWNlX0RpcixQb3NpdGlvbi1BY3RpdmVfRmFjZV9DZW50ZXIpO0ludGVuc2l0eT0xLjAtY2xhbXAobWluKGRpc3R6MSxkaXN0ejIpL1Byb3hpbWl0eV9GYXJfRGlzdGFuY2UsMC4wLDEuMCk7fVxudm9pZCBIb2xvX0VkZ2VfVmVydGV4X0I0NChcbnZlYzMgSW5jaWRlbnQsXG52ZWMzIE5vcm1hbCxcbnZlYzIgVVYsXG52ZWMzIFRhbmdlbnQsXG52ZWMzIEJpdGFuZ2VudCxcbmJvb2wgU21vb3RoX0FjdGl2ZV9GYWNlLFxuZmxvYXQgQWN0aXZlLFxub3V0IHZlYzQgSG9sb19FZGdlcylcbntmbG9hdCBOZG90ST1kb3QoSW5jaWRlbnQsTm9ybWFsKTt2ZWMyIGZsaXA9KFVWLXZlYzIoMC41LDAuNSkpO2Zsb2F0IHVkb3Q9ZG90KEluY2lkZW50LFRhbmdlbnQpKmZsaXAueCpOZG90STtmbG9hdCB1dmFsPTEuMC1mbG9hdCh1ZG90PjAuMCk7ZmxvYXQgdmRvdD0tZG90KEluY2lkZW50LEJpdGFuZ2VudCkqZmxpcC55Kk5kb3RJO2Zsb2F0IHZ2YWw9MS4wLWZsb2F0KHZkb3Q+MC4wKTtmbG9hdCBTbW9vdGhfQW5kX0FjdGl2ZT1zdGVwKDEuMCxmbG9hdChTbW9vdGhfQWN0aXZlX0ZhY2UgJiYgQWN0aXZlPjAuMCkpO3V2YWw9bWl4KHV2YWwsbWF4KDEuMCx1dmFsKSxTbW9vdGhfQW5kX0FjdGl2ZSk7IFxudnZhbD1taXgodnZhbCxtYXgoMS4wLHZ2YWwpLFNtb290aF9BbmRfQWN0aXZlKTtIb2xvX0VkZ2VzPXZlYzQoMS4wLDEuMCwxLjAsMS4wKS12ZWM0KHV2YWwqVVYueCx1dmFsKigxLjAtVVYueCksdnZhbCpVVi55LHZ2YWwqKDEuMC1VVi55KSk7fVxudm9pZCBPYmplY3RfVG9fV29ybGRfUG9zX0IxMyhcbnZlYzMgUG9zX09iamVjdCxcbm91dCB2ZWMzIFBvc19Xb3JsZClcbntQb3NfV29ybGQ9KHdvcmxkKnZlYzQoUG9zX09iamVjdCwxLjApKS54eXo7fVxudm9pZCBDaG9vc2VfQmxvYl9CMzgoXG52ZWM0IFZ4X0NvbG9yLFxudmVjMyBQb3NpdGlvbjEsXG52ZWMzIFBvc2l0aW9uMixcbmJvb2wgQmxvYl9FbmFibGVfMSxcbmJvb2wgQmxvYl9FbmFibGVfMixcbmZsb2F0IE5lYXJfU2l6ZV8xLFxuZmxvYXQgTmVhcl9TaXplXzIsXG5mbG9hdCBCbG9iX0lubmVyX0ZhZGVfMSxcbmZsb2F0IEJsb2JfSW5uZXJfRmFkZV8yLFxuZmxvYXQgQmxvYl9QdWxzZV8xLFxuZmxvYXQgQmxvYl9QdWxzZV8yLFxuZmxvYXQgQmxvYl9GYWRlXzEsXG5mbG9hdCBCbG9iX0ZhZGVfMixcbm91dCB2ZWMzIFBvc2l0aW9uLFxub3V0IGZsb2F0IE5lYXJfU2l6ZSxcbm91dCBmbG9hdCBJbm5lcl9GYWRlLFxub3V0IGZsb2F0IEJsb2JfRW5hYmxlLFxub3V0IGZsb2F0IEZhZGUsXG5vdXQgZmxvYXQgUHVsc2UpXG57UG9zaXRpb249UG9zaXRpb24xKigxLjAtVnhfQ29sb3IuZykrVnhfQ29sb3IuZypQb3NpdGlvbjI7ZmxvYXQgYjE9ZmxvYXQoQmxvYl9FbmFibGVfMSk7ZmxvYXQgYjI9ZmxvYXQoQmxvYl9FbmFibGVfMik7QmxvYl9FbmFibGU9YjErKGIyLWIxKSpWeF9Db2xvci5nO1B1bHNlPUJsb2JfUHVsc2VfMSooMS4wLVZ4X0NvbG9yLmcpK1Z4X0NvbG9yLmcqQmxvYl9QdWxzZV8yO0ZhZGU9QmxvYl9GYWRlXzEqKDEuMC1WeF9Db2xvci5nKStWeF9Db2xvci5nKkJsb2JfRmFkZV8yO05lYXJfU2l6ZT1OZWFyX1NpemVfMSooMS4wLVZ4X0NvbG9yLmcpK1Z4X0NvbG9yLmcqTmVhcl9TaXplXzI7SW5uZXJfRmFkZT1CbG9iX0lubmVyX0ZhZGVfMSooMS4wLVZ4X0NvbG9yLmcpK1Z4X0NvbG9yLmcqQmxvYl9Jbm5lcl9GYWRlXzI7fVxudm9pZCBXaXJlZnJhbWVfVmVydGV4X0I1MShcbnZlYzMgUG9zaXRpb24sXG52ZWMzIE5vcm1hbCxcbnZlYzMgVGFuZ2VudCxcbnZlYzMgQml0YW5nZW50LFxuZmxvYXQgRWRnZV9XaWR0aCxcbnZlYzIgRmFjZV9TaXplLFxub3V0IHZlYzMgV2lyZV9WeF9Qb3MsXG5vdXQgdmVjMiBVVixcbm91dCB2ZWMyIFdpZHRocylcbntXaWR0aHMueHk9RWRnZV9XaWR0aC9GYWNlX1NpemU7ZmxvYXQgeD1kb3QoUG9zaXRpb24sVGFuZ2VudCk7ZmxvYXQgeT1kb3QoUG9zaXRpb24sQml0YW5nZW50KTtmbG9hdCBkeD0wLjUtYWJzKHgpO2Zsb2F0IG5ld3g9KDAuNS1keCpXaWR0aHMueCoyLjApKnNpZ24oeCk7ZmxvYXQgZHk9MC41LWFicyh5KTtmbG9hdCBuZXd5PSgwLjUtZHkqV2lkdGhzLnkqMi4wKSpzaWduKHkpO1dpcmVfVnhfUG9zPU5vcm1hbCowLjUrbmV3eCpUYW5nZW50K25ld3kqQml0YW5nZW50O1VWLng9ZG90KFdpcmVfVnhfUG9zLFRhbmdlbnQpKzAuNTtVVi55PWRvdChXaXJlX1Z4X1BvcyxCaXRhbmdlbnQpKzAuNTt9XG52ZWMyIHJhbXAyKHZlYzIgc3RhcnQsdmVjMiBlbmQsdmVjMiB4KVxue3JldHVybiBjbGFtcCgoeC1zdGFydCkvKGVuZC1zdGFydCksdmVjMigwLjAsMC4wKSx2ZWMyKDEuMCwxLjApKTt9XG5mbG9hdCBjb21wdXRlU2VsZWN0aW9uKFxudmVjMyBibG9iUG9zaXRpb24sXG52ZWMzIG5vcm1hbCxcbnZlYzMgdGFuZ2VudCxcbnZlYzMgYml0YW5nZW50LFxudmVjMyBmYWNlQ2VudGVyLFxudmVjMiBmYWNlU2l6ZSxcbmZsb2F0IHNlbGVjdGlvbkZ1enosXG5mbG9hdCBmYXJEaXN0YW5jZSxcbmZsb2F0IGZhZGVMZW5ndGhcbilcbnt2ZWMzIGRlbHRhPWJsb2JQb3NpdGlvbi1mYWNlQ2VudGVyO2Zsb2F0IGFic0Q9YWJzKGRvdChkZWx0YSxub3JtYWwpKTtmbG9hdCBmYWRlSW49MS4wLWNsYW1wKChhYnNELWZhckRpc3RhbmNlKS9mYWRlTGVuZ3RoLDAuMCwxLjApO3ZlYzIgYmxvYkNlbnRlclhZPXZlYzIoZG90KGRlbHRhLHRhbmdlbnQpLGRvdChkZWx0YSxiaXRhbmdlbnQpKTt2ZWMyIGlubmVyRmFjZT1mYWNlU2l6ZSooMS4wLXNlbGVjdGlvbkZ1enopKjAuNTt2ZWMyIHNlbGVjdFB1bHNlPXJhbXAyKC1mYWNlU2l6ZSowLjUsLWlubmVyRmFjZSxibG9iQ2VudGVyWFkpLXJhbXAyKGlubmVyRmFjZSxmYWNlU2l6ZSowLjUsYmxvYkNlbnRlclhZKTtyZXR1cm4gc2VsZWN0UHVsc2UueCpzZWxlY3RQdWxzZS55KmZhZGVJbjt9XG52b2lkIFNlbGVjdGlvbl9WZXJ0ZXhfQjQ4KFxudmVjMyBCbG9iX1Bvc2l0aW9uLFxudmVjMyBCbG9iX1Bvc2l0aW9uXzIsXG52ZWMzIEZhY2VfQ2VudGVyLFxudmVjMiBGYWNlX1NpemUsXG52ZWMzIE5vcm1hbCxcbnZlYzMgVGFuZ2VudCxcbnZlYzMgQml0YW5nZW50LFxuZmxvYXQgU2VsZWN0aW9uX0Z1enosXG5mbG9hdCBTZWxlY3RlZCxcbmZsb2F0IEZhcl9EaXN0YW5jZSxcbmZsb2F0IEZhZGVfTGVuZ3RoLFxudmVjMyBBY3RpdmVfRmFjZV9EaXIsXG5vdXQgZmxvYXQgU2hvd19TZWxlY3Rpb24pXG57ZmxvYXQgc2VsZWN0MT1jb21wdXRlU2VsZWN0aW9uKEJsb2JfUG9zaXRpb24sTm9ybWFsLFRhbmdlbnQsQml0YW5nZW50LEZhY2VfQ2VudGVyLEZhY2VfU2l6ZSxTZWxlY3Rpb25fRnV6eixGYXJfRGlzdGFuY2UsRmFkZV9MZW5ndGgpO2Zsb2F0IHNlbGVjdDI9Y29tcHV0ZVNlbGVjdGlvbihCbG9iX1Bvc2l0aW9uXzIsTm9ybWFsLFRhbmdlbnQsQml0YW5nZW50LEZhY2VfQ2VudGVyLEZhY2VfU2l6ZSxTZWxlY3Rpb25fRnV6eixGYXJfRGlzdGFuY2UsRmFkZV9MZW5ndGgpO2Zsb2F0IEFjdGl2ZT1tYXgoMC4wLGRvdChBY3RpdmVfRmFjZV9EaXIsTm9ybWFsKSk7U2hvd19TZWxlY3Rpb249bWl4KG1heChzZWxlY3QxLHNlbGVjdDIpLDEuMCxTZWxlY3RlZCkqQWN0aXZlO31cbnZvaWQgUHJveGltaXR5X1Zpc2liaWxpdHlfQjU0KFxuZmxvYXQgU2VsZWN0aW9uLFxudmVjMyBQcm94aW1pdHlfQ2VudGVyLFxudmVjMyBQcm94aW1pdHlfQ2VudGVyXzIsXG5mbG9hdCBJbnB1dF9XaWR0aCxcbmZsb2F0IFByb3hpbWl0eV9GYXJfRGlzdGFuY2UsXG5mbG9hdCBQcm94aW1pdHlfUmFkaXVzLFxudmVjMyBBY3RpdmVfRmFjZV9DZW50ZXIsXG52ZWMzIEFjdGl2ZV9GYWNlX0Rpcixcbm91dCBmbG9hdCBXaWR0aClcbnt2ZWMzIGJveEVkZ2VzPSh3b3JsZCp2ZWM0KHZlYzMoMC41LDAuNSwwLjUpLDAuMCkpLnh5ejtmbG9hdCBib3hNYXhTaXplPWxlbmd0aChib3hFZGdlcyk7ZmxvYXQgZDE9ZG90KFByb3hpbWl0eV9DZW50ZXItQWN0aXZlX0ZhY2VfQ2VudGVyLEFjdGl2ZV9GYWNlX0Rpcik7dmVjMyBibG9iMT1Qcm94aW1pdHlfQ2VudGVyLWQxKkFjdGl2ZV9GYWNlX0RpcjtmbG9hdCBkMj1kb3QoUHJveGltaXR5X0NlbnRlcl8yLUFjdGl2ZV9GYWNlX0NlbnRlcixBY3RpdmVfRmFjZV9EaXIpO3ZlYzMgYmxvYjI9UHJveGltaXR5X0NlbnRlcl8yLWQyKkFjdGl2ZV9GYWNlX0Rpcjt2ZWMzIGRlbHRhMT1ibG9iMS1BY3RpdmVfRmFjZV9DZW50ZXI7dmVjMyBkZWx0YTI9YmxvYjItQWN0aXZlX0ZhY2VfQ2VudGVyO2Zsb2F0IGRpc3QxPWRvdChkZWx0YTEsZGVsdGExKTtmbG9hdCBkaXN0Mj1kb3QoZGVsdGEyLGRlbHRhMik7ZmxvYXQgbmVhcmVzdFByb3hEaXN0PXNxcnQobWluKGRpc3QxLGRpc3QyKSk7V2lkdGg9SW5wdXRfV2lkdGgqKDEuMC1zdGVwKGJveE1heFNpemUrUHJveGltaXR5X1JhZGl1cyxuZWFyZXN0UHJveERpc3QpKSooMS4wLXN0ZXAoUHJveGltaXR5X0Zhcl9EaXN0YW5jZSxtaW4oZDEsZDIpKSooMS4wLXN0ZXAoMC4wMDAxLFNlbGVjdGlvbikpKTt9XG52b2lkIE9iamVjdF9Ub19Xb3JsZF9EaXJfQjY3KFxudmVjMyBEaXJfT2JqZWN0LFxub3V0IHZlYzMgRGlyX1dvcmxkKVxue0Rpcl9Xb3JsZD0od29ybGQqdmVjNChEaXJfT2JqZWN0LDAuMCkpLnh5ejt9XG52b2lkIG1haW4oKVxue3ZlYzMgQWN0aXZlX0ZhY2VfQ2VudGVyX1E0OTtBY3RpdmVfRmFjZV9DZW50ZXJfUTQ5PSh3b3JsZCp2ZWM0KF9BY3RpdmVfRmFjZV9EaXJfKjAuNSwxLjApKS54eXo7dmVjMyBCbG9iX1Bvc2l0aW9uX1E0MT0gbWl4KF9CbG9iX1Bvc2l0aW9uXyxHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb24ueHl6LGZsb2F0KFVzZV9HbG9iYWxfTGVmdF9JbmRleCkpO3ZlYzMgQmxvYl9Qb3NpdGlvbl9RNDI9IG1peChfQmxvYl9Qb3NpdGlvbl8yXyxHbG9iYWxfUmlnaHRfSW5kZXhfVGlwX1Bvc2l0aW9uLnh5eixmbG9hdChVc2VfR2xvYmFsX1JpZ2h0X0luZGV4KSk7dmVjMyBBY3RpdmVfRmFjZV9EaXJfUTY0PW5vcm1hbGl6ZSgod29ybGQqdmVjNChfQWN0aXZlX0ZhY2VfRGlyXywwLjApKS54eXopO2Zsb2F0IFJlbGF0aXZlX1NjYWxlX1E1NztcbiNpZiBSRUxBVElWRV9XSURUSFxuUmVsYXRpdmVfU2NhbGVfUTU3PWxlbmd0aCgod29ybGQqdmVjNCh2ZWMzKDAsMSwwKSwwLjApKS54eXopO1xuI2Vsc2VcblJlbGF0aXZlX1NjYWxlX1E1Nz0xLjA7XG4jZW5kaWZcbnZlYzMgVGFuZ2VudF9Xb3JsZF9RMzA7VGFuZ2VudF9Xb3JsZF9RMzA9KHdvcmxkKnZlYzQodGFuZ2VudCwwLjApKS54eXo7dmVjMyBCaW5vcm1hbF9Xb3JsZF9RMzE7Qmlub3JtYWxfV29ybGRfUTMxPSh3b3JsZCp2ZWM0KChjcm9zcyhub3JtYWwsdGFuZ2VudCkpLDAuMCkpLnh5ejt2ZWMzIE5vcm1hbF9Xb3JsZF9RNjA7Tm9ybWFsX1dvcmxkX1E2MD0od29ybGQqdmVjNChub3JtYWwsMC4wKSkueHl6O3ZlYzMgUmVzdWx0X1ExOD0wLjUqbm9ybWFsO3ZlYzMgRGlyX1dvcmxkX1E2NztPYmplY3RfVG9fV29ybGRfRGlyX0I2NyhfQWN0aXZlX0ZhY2VfVXBfLERpcl9Xb3JsZF9RNjcpO2Zsb2F0IFByb2R1Y3RfUTU2PV9FZGdlX1dpZHRoXypSZWxhdGl2ZV9TY2FsZV9RNTc7dmVjMyBOb3JtYWxfV29ybGRfTl9RMjk9bm9ybWFsaXplKE5vcm1hbF9Xb3JsZF9RNjApO3ZlYzMgVGFuZ2VudF9Xb3JsZF9OX1EyOD1ub3JtYWxpemUoVGFuZ2VudF9Xb3JsZF9RMzApO3ZlYzMgQmlub3JtYWxfV29ybGRfTl9RMzI9bm9ybWFsaXplKEJpbm9ybWFsX1dvcmxkX1EzMSk7dmVjMyBQb3NpdGlvbl9RMzg7ZmxvYXQgTmVhcl9TaXplX1EzODtmbG9hdCBJbm5lcl9GYWRlX1EzODtmbG9hdCBCbG9iX0VuYWJsZV9RMzg7ZmxvYXQgRmFkZV9RMzg7ZmxvYXQgUHVsc2VfUTM4O0Nob29zZV9CbG9iX0IzOChjb2xvcixCbG9iX1Bvc2l0aW9uX1E0MSxCbG9iX1Bvc2l0aW9uX1E0MixfQmxvYl9FbmFibGVfLF9CbG9iX0VuYWJsZV8yXyxfQmxvYl9OZWFyX1NpemVfLF9CbG9iX05lYXJfU2l6ZV8yXyxfQmxvYl9Jbm5lcl9GYWRlXyxfQmxvYl9Jbm5lcl9GYWRlXzJfLF9CbG9iX1B1bHNlXyxfQmxvYl9QdWxzZV8yXyxfQmxvYl9GYWRlXyxfQmxvYl9GYWRlXzJfLFBvc2l0aW9uX1EzOCxOZWFyX1NpemVfUTM4LElubmVyX0ZhZGVfUTM4LEJsb2JfRW5hYmxlX1EzOCxGYWRlX1EzOCxQdWxzZV9RMzgpO3ZlYzMgRmFjZV9DZW50ZXJfUTMzO0ZhY2VfQ2VudGVyX1EzMz0od29ybGQqdmVjNChSZXN1bHRfUTE4LDEuMCkpLnh5ejt2ZWMyIEZhY2VfU2l6ZV9RNTA9dmVjMihsZW5ndGgoVGFuZ2VudF9Xb3JsZF9RMzApLGxlbmd0aChCaW5vcm1hbF9Xb3JsZF9RMzEpKTtmbG9hdCBTaG93X1NlbGVjdGlvbl9RNDg7U2VsZWN0aW9uX1ZlcnRleF9CNDgoQmxvYl9Qb3NpdGlvbl9RNDEsQmxvYl9Qb3NpdGlvbl9RNDIsRmFjZV9DZW50ZXJfUTMzLEZhY2VfU2l6ZV9RNTAsTm9ybWFsX1dvcmxkX05fUTI5LFRhbmdlbnRfV29ybGRfTl9RMjgsQmlub3JtYWxfV29ybGRfTl9RMzIsX1NlbGVjdGlvbl9GdXp6XyxfU2VsZWN0ZWRfLF9TZWxlY3RlZF9EaXN0YW5jZV8sX1NlbGVjdGVkX0ZhZGVfTGVuZ3RoXyxBY3RpdmVfRmFjZV9EaXJfUTY0LFNob3dfU2VsZWN0aW9uX1E0OCk7dmVjMyBOb3JtYWxpemVkX1E3Mj1ub3JtYWxpemUoRGlyX1dvcmxkX1E2Nyk7ZmxvYXQgQWN0aXZlX1EzND1tYXgoMC4wLGRvdChBY3RpdmVfRmFjZV9EaXJfUTY0LE5vcm1hbF9Xb3JsZF9OX1EyOSkpO2Zsb2F0IFdpZHRoX1E1NDtQcm94aW1pdHlfVmlzaWJpbGl0eV9CNTQoU2hvd19TZWxlY3Rpb25fUTQ4LEJsb2JfUG9zaXRpb25fUTQxLEJsb2JfUG9zaXRpb25fUTQyLFByb2R1Y3RfUTU2LF9Qcm94aW1pdHlfRmFyX0Rpc3RhbmNlXyxfUHJveGltaXR5X05lYXJfUmFkaXVzXyxBY3RpdmVfRmFjZV9DZW50ZXJfUTQ5LEFjdGl2ZV9GYWNlX0Rpcl9RNjQsV2lkdGhfUTU0KTt2ZWMzIFdpcmVfVnhfUG9zX1E1MTt2ZWMyIFVWX1E1MTt2ZWMyIFdpZHRoc19RNTE7V2lyZWZyYW1lX1ZlcnRleF9CNTEocG9zaXRpb24sbm9ybWFsLHRhbmdlbnQsKGNyb3NzKG5vcm1hbCx0YW5nZW50KSksV2lkdGhfUTU0LEZhY2VfU2l6ZV9RNTAsV2lyZV9WeF9Qb3NfUTUxLFVWX1E1MSxXaWR0aHNfUTUxKTt2ZWMzIFZlYzNfUTI3PXZlYzMoV2lkdGhzX1E1MS54LFdpZHRoc19RNTEueSxjb2xvci5yKTt2ZWMzIFBvc19Xb3JsZF9RMTM7T2JqZWN0X1RvX1dvcmxkX1Bvc19CMTMoV2lyZV9WeF9Qb3NfUTUxLFBvc19Xb3JsZF9RMTMpO3ZlYzMgSW5jaWRlbnRfUTM2PW5vcm1hbGl6ZShQb3NfV29ybGRfUTEzLWNhbWVyYVBvc2l0aW9uKTt2ZWMzIE91dF9Qb3NpdGlvbl9RNDc7dmVjMiBPdXRfVVZfUTQ3O3ZlYzMgQmxvYl9JbmZvX1E0NztCbG9iX1ZlcnRleF9CNDcoUG9zX1dvcmxkX1ExMyxOb3JtYWxfV29ybGRfTl9RMjksVGFuZ2VudF9Xb3JsZF9OX1EyOCxCaW5vcm1hbF9Xb3JsZF9OX1EzMixQb3NpdGlvbl9RMzgsX0Jsb2JfSW50ZW5zaXR5XyxOZWFyX1NpemVfUTM4LF9CbG9iX0Zhcl9TaXplXyxfQmxvYl9OZWFyX0Rpc3RhbmNlXyxfQmxvYl9GYXJfRGlzdGFuY2VfLGNvbG9yLHV2LEZhY2VfQ2VudGVyX1EzMyxGYWNlX1NpemVfUTUwLFVWX1E1MSxfQmxvYl9GYWRlX0xlbmd0aF8sX1NlbGVjdGlvbl9GYWRlXyxfU2VsZWN0aW9uX0ZhZGVfU2l6ZV8sSW5uZXJfRmFkZV9RMzgsQWN0aXZlX0ZhY2VfQ2VudGVyX1E0OSxQdWxzZV9RMzgsRmFkZV9RMzgsQmxvYl9FbmFibGVfUTM4LE91dF9Qb3NpdGlvbl9RNDcsT3V0X1VWX1E0NyxCbG9iX0luZm9fUTQ3KTt2ZWM0IEV4dHJhMV9RNjY7ZmxvYXQgRGlzdGFuY2VfVG9fRmFjZV9RNjY7ZmxvYXQgSW50ZW5zaXR5X1E2NjtQcm94aW1pdHlfVmVydGV4X0I2NihCbG9iX1Bvc2l0aW9uX1E0MSxCbG9iX1Bvc2l0aW9uX1E0MixBY3RpdmVfRmFjZV9DZW50ZXJfUTQ5LEFjdGl2ZV9GYWNlX0Rpcl9RNjQsUG9zX1dvcmxkX1ExMyxfUHJveGltaXR5X0Zhcl9EaXN0YW5jZV8sUmVsYXRpdmVfU2NhbGVfUTU3LF9Qcm94aW1pdHlfQW5pc290cm9weV8sTm9ybWFsaXplZF9RNzIsRXh0cmExX1E2NixEaXN0YW5jZV9Ub19GYWNlX1E2NixJbnRlbnNpdHlfUTY2KTt2ZWM0IEhvbG9fRWRnZXNfUTQ0O0hvbG9fRWRnZV9WZXJ0ZXhfQjQ0KEluY2lkZW50X1EzNixOb3JtYWxfV29ybGRfTl9RMjksdXYsVGFuZ2VudF9Xb3JsZF9RMzAsQmlub3JtYWxfV29ybGRfUTMxLF9TbW9vdGhfQWN0aXZlX0ZhY2VfLEFjdGl2ZV9RMzQsSG9sb19FZGdlc19RNDQpO3ZlYzMgVmVjM19RMTk9dmVjMyhTaG93X1NlbGVjdGlvbl9RNDgsRGlzdGFuY2VfVG9fRmFjZV9RNjYsSW50ZW5zaXR5X1E2Nik7dmVjMyBQb3NpdGlvbj1PdXRfUG9zaXRpb25fUTQ3O3ZlYzIgVVY9T3V0X1VWX1E0Nzt2ZWMzIFRhbmdlbnQ9QmxvYl9JbmZvX1E0Nzt2ZWMzIEJpbm9ybWFsPVZlYzNfUTE5O3ZlYzMgTm9ybWFsPVZlYzNfUTI3O3ZlYzQgRXh0cmExPUV4dHJhMV9RNjY7dmVjNCBDb2xvcj1Ib2xvX0VkZ2VzX1E0NDtnbF9Qb3NpdGlvbj12aWV3UHJvamVjdGlvbip2ZWM0KFBvc2l0aW9uLDEpO3ZQb3NpdGlvbj1Qb3NpdGlvbjt2Tm9ybWFsPU5vcm1hbDt2VVY9VVY7dlRhbmdlbnQ9VGFuZ2VudDt2Qmlub3JtYWw9Qmlub3JtYWw7dkNvbG9yPUNvbG9yO3ZFeHRyYTE9RXh0cmExO31gO1xuLy8gU2lkZWVmZmVjdFxuU2hhZGVyU3RvcmUuU2hhZGVyc1N0b3JlW25hbWVdID0gc2hhZGVyO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGZsdWVudEJ1dHRvblZlcnRleFNoYWRlciA9IHsgbmFtZSwgc2hhZGVyIH07XG4iLCJpbXBvcnQgeyBTaGFkZXJNYXRlcmlhbCB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9zaGFkZXJNYXRlcmlhbFwiO1xyXG5pbXBvcnQgdHlwZSB7IFNjZW5lIH0gZnJvbSBcImNvcmUvc2NlbmVcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgT2JzZXJ2ZXIgfSBmcm9tIFwiY29yZS9NaXNjL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgQ29sb3IzLCBUbXBDb2xvcnMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbG9yXCI7XHJcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5cclxuaW1wb3J0IFwiLi9zaGFkZXJzL2hhbmRsZS52ZXJ0ZXhcIjtcclxuaW1wb3J0IFwiLi9zaGFkZXJzL2hhbmRsZS5mcmFnbWVudFwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gcmVuZGVyIGdpem1vIGhhbmRsZXMgd2l0aCBmbHVlbnQgZGVzaWduXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSGFuZGxlTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJNYXRlcmlhbCB7XHJcbiAgICBwcml2YXRlIF9ob3ZlcjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfZHJhZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfb25CZWZvcmVSZW5kZXI6IE51bGxhYmxlPE9ic2VydmVyPFNjZW5lPj47XHJcbiAgICBwcml2YXRlIF9jb2xvcjogQ29sb3IzID0gbmV3IENvbG9yMygpO1xyXG4gICAgcHJpdmF0ZSBfc2NhbGU6IG51bWJlciA9IDE7XHJcbiAgICBwcml2YXRlIF90YXJnZXRDb2xvcjogQ29sb3IzO1xyXG4gICAgcHJpdmF0ZSBfdGFyZ2V0U2NhbGU6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2xhc3RUaWNrID0gLTE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJcyB0aGUgbWF0ZXJpYWwgaW5kaWNhdGluZyBob3ZlcmluZyBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGhvdmVyKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ob3ZlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGhvdmVyKGI6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9ob3ZlciA9IGI7XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUludGVycG9sYXRpb25UYXJnZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIElzIHRoZSBtYXRlcmlhbCBpbmRpY2F0aW5nIGRyYWcgc3RhdGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBkcmFnKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kcmFnO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZHJhZyhiOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fZHJhZyA9IGI7XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUludGVycG9sYXRpb25UYXJnZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExlbmd0aCBvZiBhbmltYXRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFuaW1hdGlvbkxlbmd0aDogbnVtYmVyID0gMTAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29sb3Igb2YgdGhlIGhhbmRsZSB3aGVuIGhvdmVyZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGhvdmVyQ29sb3I6IENvbG9yMyA9IG5ldyBDb2xvcjMoMCwgMC40NjcsIDAuODQpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29sb3Igb2YgdGhlIGhhbmRsZSB3aGVuIGlkbGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGJhc2VDb2xvcjogQ29sb3IzID0gbmV3IENvbG9yMygxLCAxLCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlIG9mIHRoZSBoYW5kbGUgd2hlbiBob3ZlcmVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBob3ZlclNjYWxlOiBudW1iZXIgPSAwLjc1O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2NhbGUgb2YgdGhlIGhhbmRsZSB3aGVuIGlkbGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGJhc2VTY2FsZTogbnVtYmVyID0gMC4zNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlIG9mIHRoZSBoYW5kbGUgd2hlbiBkcmFnZ2VkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkcmFnU2NhbGU6IG51bWJlciA9IDAuNTU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIF9wb3NpdGlvbk9mZnNldDogVmVjdG9yMyA9IFZlY3RvcjMuWmVybygpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIGhhbmRsZSBtYXRlcmlhbFxyXG4gICAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgbWF0ZXJpYWxcclxuICAgICAqIEBwYXJhbSBzY2VuZSBTY2VuZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHNjZW5lOiBTY2VuZSkge1xyXG4gICAgICAgIHN1cGVyKG5hbWUsIHNjZW5lLCBcImhhbmRsZVwiLCB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IFtcInBvc2l0aW9uXCJdLFxyXG4gICAgICAgICAgICB1bmlmb3JtczogW1wid29ybGRWaWV3UHJvamVjdGlvblwiLCBcImNvbG9yXCIsIFwic2NhbGVcIiwgXCJwb3NpdGlvbk9mZnNldFwiXSxcclxuICAgICAgICAgICAgbmVlZEFscGhhQmxlbmRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBuZWVkQWxwaGFUZXN0aW5nOiBmYWxzZSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlSW50ZXJwb2xhdGlvblRhcmdldCgpO1xyXG5cclxuICAgICAgICAvLyBSZWdpc3RlciBjYWxsYmFjayBmb3Igc2NlbmUgYWZ0ZXIgcmVuZGVyXHJcbiAgICAgICAgdGhpcy5fbGFzdFRpY2sgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMuX29uQmVmb3JlUmVuZGVyID0gdGhpcy5nZXRTY2VuZSgpLm9uQmVmb3JlUmVuZGVyT2JzZXJ2YWJsZS5hZGQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0aWNrID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSB0aWNrIC0gdGhpcy5fbGFzdFRpY2s7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzY2FsZURpZmYgPSB0aGlzLl90YXJnZXRTY2FsZSAtIHRoaXMuX3NjYWxlO1xyXG4gICAgICAgICAgICBjb25zdCBjb2xvckRpZmYgPSBUbXBDb2xvcnMuQ29sb3IzWzBdLmNvcHlGcm9tKHRoaXMuX3RhcmdldENvbG9yKS5zdWJ0cmFjdFRvUmVmKHRoaXMuX2NvbG9yLCBUbXBDb2xvcnMuQ29sb3IzWzBdKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3NjYWxlID0gdGhpcy5fc2NhbGUgKyAoc2NhbGVEaWZmICogZGVsdGEpIC8gdGhpcy5hbmltYXRpb25MZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbG9yRGlmZi5zY2FsZVRvUmVmKGRlbHRhIC8gdGhpcy5hbmltYXRpb25MZW5ndGgsIGNvbG9yRGlmZik7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbG9yLmFkZFRvUmVmKGNvbG9yRGlmZiwgdGhpcy5fY29sb3IpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRDb2xvcjMoXCJjb2xvclwiLCB0aGlzLl9jb2xvcik7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RmxvYXQoXCJzY2FsZVwiLCB0aGlzLl9zY2FsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmVjdG9yMyhcInBvc2l0aW9uT2Zmc2V0XCIsIHRoaXMuX3Bvc2l0aW9uT2Zmc2V0KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RUaWNrID0gdGljaztcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91cGRhdGVJbnRlcnBvbGF0aW9uVGFyZ2V0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRyYWcpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0Q29sb3IgPSB0aGlzLmhvdmVyQ29sb3I7XHJcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFNjYWxlID0gdGhpcy5kcmFnU2NhbGU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvdmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldENvbG9yID0gdGhpcy5ob3ZlckNvbG9yO1xyXG4gICAgICAgICAgICB0aGlzLl90YXJnZXRTY2FsZSA9IHRoaXMuaG92ZXJTY2FsZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl90YXJnZXRDb2xvciA9IHRoaXMuYmFzZUNvbG9yO1xyXG4gICAgICAgICAgICB0aGlzLl90YXJnZXRTY2FsZSA9IHRoaXMuYmFzZVNjYWxlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERpc3Bvc2VzIHRoZSBoYW5kbGUgbWF0ZXJpYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuZ2V0U2NlbmUoKS5vbkJlZm9yZVJlbmRlck9ic2VydmFibGUucmVtb3ZlKHRoaXMuX29uQmVmb3JlUmVuZGVyKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgKiBmcm9tIFwiLi9oYW5kbGVNYXRlcmlhbFwiO1xyXG4iLCIvLyBEbyBub3QgZWRpdC5cbmltcG9ydCB7IFNoYWRlclN0b3JlIH0gZnJvbSBcImNvcmUvRW5naW5lcy9zaGFkZXJTdG9yZVwiO1xuXG5jb25zdCBuYW1lID0gXCJoYW5kbGVQaXhlbFNoYWRlclwiO1xuY29uc3Qgc2hhZGVyID0gYHVuaWZvcm0gdmVjMyBjb2xvcjt2b2lkIG1haW4odm9pZCkge2dsX0ZyYWdDb2xvcj12ZWM0KGNvbG9yLDEuMCk7fWA7XG4vLyBTaWRlZWZmZWN0XG5TaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVbbmFtZV0gPSBzaGFkZXI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgaGFuZGxlUGl4ZWxTaGFkZXIgPSB7IG5hbWUsIHNoYWRlciB9O1xuIiwiLy8gRG8gbm90IGVkaXQuXG5pbXBvcnQgeyBTaGFkZXJTdG9yZSB9IGZyb20gXCJjb3JlL0VuZ2luZXMvc2hhZGVyU3RvcmVcIjtcblxuY29uc3QgbmFtZSA9IFwiaGFuZGxlVmVydGV4U2hhZGVyXCI7XG5jb25zdCBzaGFkZXIgPSBgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO3VuaWZvcm0gdmVjMyBwb3NpdGlvbk9mZnNldDt1bmlmb3JtIG1hdDQgd29ybGRWaWV3UHJvamVjdGlvbjt1bmlmb3JtIGZsb2F0IHNjYWxlO3ZvaWQgbWFpbih2b2lkKSB7dmVjNCB2UG9zPXZlYzQoKHZlYzMocG9zaXRpb24pK3Bvc2l0aW9uT2Zmc2V0KSpzY2FsZSwxLjApO2dsX1Bvc2l0aW9uPXdvcmxkVmlld1Byb2plY3Rpb24qdlBvczt9YDtcbi8vIFNpZGVlZmZlY3RcblNoYWRlclN0b3JlLlNoYWRlcnNTdG9yZVtuYW1lXSA9IHNoYWRlcjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVWZXJ0ZXhTaGFkZXIgPSB7IG5hbWUsIHNoYWRlciB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWludGVybmFsLW1vZHVsZXMgKi9cclxuZXhwb3J0ICogZnJvbSBcIi4vZmx1ZW50L2luZGV4XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2ZsdWVudEJ1dHRvbi9pbmRleFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9mbHVlbnRCYWNrcGxhdGUvaW5kZXhcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vaGFuZGxlL2luZGV4XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21yZGwvaW5kZXhcIjtcclxuIiwiZXhwb3J0ICogZnJvbSBcIi4vbXJkbFNsaWRlckJhck1hdGVyaWFsXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21yZGxTbGlkZXJUaHVtYk1hdGVyaWFsXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL21yZGxCYWNrcGxhdGVNYXRlcmlhbFwiO1xyXG4iLCJpbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBCYXNlVGV4dHVyZSB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9UZXh0dXJlcy9iYXNlVGV4dHVyZVwiO1xyXG5pbXBvcnQgdHlwZSB7IElBbmltYXRhYmxlIH0gZnJvbSBcImNvcmUvQW5pbWF0aW9ucy9hbmltYXRhYmxlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgdHlwZSB7IElFZmZlY3RDcmVhdGlvbk9wdGlvbnMgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvZWZmZWN0XCI7XHJcbmltcG9ydCB0eXBlIHsgTWF0cml4IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHR5cGUgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5pbXBvcnQgdHlwZSB7IFN1Yk1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvc3ViTWVzaFwiO1xyXG5cclxuaW1wb3J0IHsgQ29sb3I0IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC5jb2xvclwiO1xyXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiY29yZS9FbmdpbmVzL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBFZmZlY3RGYWxsYmFja3MgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvZWZmZWN0RmFsbGJhY2tzXCI7XHJcbmltcG9ydCB7IE1hdGVyaWFsRGVmaW5lcyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9tYXRlcmlhbERlZmluZXNcIjtcclxuaW1wb3J0IHsgUHVzaE1hdGVyaWFsIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL3B1c2hNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB7IFNlcmlhbGl6YXRpb25IZWxwZXIgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnMuc2VyaWFsaXphdGlvblwiO1xyXG5pbXBvcnQgeyBWZXJ0ZXhCdWZmZXIgfSBmcm9tIFwiY29yZS9CdWZmZXJzL2J1ZmZlclwiO1xyXG5cclxuaW1wb3J0IFwiLi9zaGFkZXJzL21yZGxCYWNrZ2xvdy5mcmFnbWVudFwiO1xyXG5pbXBvcnQgXCIuL3NoYWRlcnMvbXJkbEJhY2tnbG93LnZlcnRleFwiO1xyXG5pbXBvcnQgeyBIYW5kbGVGYWxsYmFja3NGb3JTaGFkb3dzLCBQcmVwYXJlQXR0cmlidXRlc0Zvckluc3RhbmNlcywgUHJlcGFyZURlZmluZXNGb3JBdHRyaWJ1dGVzLCBQcmVwYXJlVW5pZm9ybXNBbmRTYW1wbGVyc0xpc3QgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvbWF0ZXJpYWxIZWxwZXIuZnVuY3Rpb25zXCI7XHJcblxyXG4vKiogQGhpZGRlbiAqL1xyXG5jbGFzcyBNUkRMQmFja2dsb3dNYXRlcmlhbERlZmluZXMgZXh0ZW5kcyBNYXRlcmlhbERlZmluZXMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLl9uZWVkTm9ybWFscyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbmVlZFVWcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWJ1aWxkKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNUkRMQmFja2dsb3dNYXRlcmlhbCBleHRlbmRzIFB1c2hNYXRlcmlhbCB7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYmV2ZWwgcmFkaXVzIG9uIHRoZSBiYWNrZ2xvdy4gSWYgdGhpcyB2YWx1ZSBpcyBjaGFuZ2VkLCB1cGRhdGUgdGhlIGxpbmVXaWR0aCB0byBtYXRjaC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmV2ZWxSYWRpdXMgPSAwLjE2O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsaW5lIHdpZHRoIG9mIHRoZSBiYWNrZ2xvdy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgbGluZVdpZHRoID0gMC4xNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB3aGV0aGVyIHRvIHVzZSBhYnNvbHV0ZSBzaXplcyB3aGVuIGNhbGN1bGF0aW5nIGVmZmVjdHMgb24gdGhlIGJhY2tnbG93LlxyXG4gICAgICogU2luY2UgZGVza3RvcCBhbmQgVlIvQVIgaGF2ZSBkaWZmZXJlbnQgcmVsYXRpdmUgc2l6ZXMsIGl0J3MgdXN1YWxseSBiZXN0IHRvIGtlZXAgdGhpcyBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYWJzb2x1dGVTaXplcyA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSB0dW5pbmcgbW90aW9uIG9mIHRoZSBiYWNrZ2xvdy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgdHVuaW5nTW90aW9uID0gMC4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBtb3Rpb24gb2YgdGhlIGJhY2tnbG93LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBtb3Rpb24gPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG1heGltdW0gaW50ZW5zaXR5IG9mIHRoZSBiYWNrZ2xvdy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgbWF4SW50ZW5zaXR5ID0gMC43O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBmYWRlLWluIGV4cG9uZW50IG9mIHRoZSBpbnRlbnNpdHkgb2YgdGhlIGJhY2tnbG93LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBpbnRlbnNpdHlGYWRlSW5FeHBvbmVudCA9IDIuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgc3RhcnQgb2YgdGhlIG91dGVyIGZ1enogZWZmZWN0IG9uIHRoZSBiYWNrZ2xvdy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgb3V0ZXJGdXp6U3RhcnQgPSAwLjA0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBlbmQgb2YgdGhlIG91dGVyIGZ1enogZWZmZWN0IG9uIHRoZSBiYWNrZ2xvdy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgb3V0ZXJGdXp6RW5kID0gMC4wNDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY29sb3Igb2YgdGhlIGJhY2tnbG93LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBjb2xvcjogQ29sb3I0ID0gbmV3IENvbG9yNCgwLjY4MjM1MywgMC42OTgwMzksIDEsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBpbm5lciBjb2xvciBvZiB0aGUgYmFja2dsb3cuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGlubmVyQ29sb3I6IENvbG9yNCA9IG5ldyBDb2xvcjQoMC4zNTY4NjMsIDAuMzkyMTU3LCAwLjc5NjA3OCwgMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJsZW5kIGV4cG9uZW50IG9mIHRoZSBiYWNrZ2xvdy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxlbmRFeHBvbmVudCA9IDEuNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZmFsbG9mZiBvZiB0aGUgYmFja2dsb3cuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGZhbGxvZmYgPSAyLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJpYXMgb2YgdGhlIGJhY2tnbG93LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBiaWFzID0gMC41O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgc2NlbmU6IFNjZW5lKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSwgc2NlbmUpO1xyXG4gICAgICAgIHRoaXMuYWxwaGFNb2RlID0gQ29uc3RhbnRzLkFMUEhBX0FERDtcclxuICAgICAgICB0aGlzLmRpc2FibGVEZXB0aFdyaXRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmJhY2tGYWNlQ3VsbGluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBuZWVkQWxwaGFCbGVuZGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgbmVlZEFscGhhVGVzdGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldEFscGhhVGVzdFRleHR1cmUoKTogTnVsbGFibGU8QmFzZVRleHR1cmU+IHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNZXRob2RzXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgaXNSZWFkeUZvclN1Yk1lc2gobWVzaDogQWJzdHJhY3RNZXNoLCBzdWJNZXNoOiBTdWJNZXNoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZHJhd1dyYXBwZXIgPSBzdWJNZXNoLl9kcmF3V3JhcHBlcjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNGcm96ZW4pIHtcclxuICAgICAgICAgICAgaWYgKGRyYXdXcmFwcGVyLmVmZmVjdCAmJiBkcmF3V3JhcHBlci5fd2FzUHJldmlvdXNseVJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcykge1xyXG4gICAgICAgICAgICBzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcyA9IG5ldyBNUkRMQmFja2dsb3dNYXRlcmlhbERlZmluZXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSA8TVJETEJhY2tnbG93TWF0ZXJpYWxEZWZpbmVzPnN1Yk1lc2gubWF0ZXJpYWxEZWZpbmVzO1xyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5nZXRTY2VuZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNSZWFkeUZvclN1Yk1lc2goc3ViTWVzaCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBzY2VuZS5nZXRFbmdpbmUoKTtcclxuXHJcbiAgICAgICAgLy8gQXR0cmlic1xyXG4gICAgICAgIFByZXBhcmVEZWZpbmVzRm9yQXR0cmlidXRlcyhtZXNoLCBkZWZpbmVzLCBmYWxzZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyBHZXQgY29ycmVjdCBlZmZlY3RcclxuICAgICAgICBpZiAoZGVmaW5lcy5pc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIGRlZmluZXMubWFya0FzUHJvY2Vzc2VkKCk7XHJcblxyXG4gICAgICAgICAgICBzY2VuZS5yZXNldENhY2hlZE1hdGVyaWFsKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBGYWxsYmFja3NcclxuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tzID0gbmV3IEVmZmVjdEZhbGxiYWNrcygpO1xyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5GT0cpIHtcclxuICAgICAgICAgICAgICAgIGZhbGxiYWNrcy5hZGRGYWxsYmFjaygxLCBcIkZPR1wiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgSGFuZGxlRmFsbGJhY2tzRm9yU2hhZG93cyhkZWZpbmVzLCBmYWxsYmFja3MpO1xyXG5cclxuICAgICAgICAgICAgZGVmaW5lcy5JTUFHRVBST0NFU1NJTkdQT1NUUFJPQ0VTUyA9IHNjZW5lLmltYWdlUHJvY2Vzc2luZ0NvbmZpZ3VyYXRpb24uYXBwbHlCeVBvc3RQcm9jZXNzO1xyXG5cclxuICAgICAgICAgICAgLy9BdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnMgPSBbVmVydGV4QnVmZmVyLlBvc2l0aW9uS2luZF07XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5OT1JNQUwpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuTm9ybWFsS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlVWMSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5VVktpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5VVjIpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVVYyS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlZFUlRFWENPTE9SKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLkNvbG9yS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlRBTkdFTlQpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVGFuZ2VudEtpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQcmVwYXJlQXR0cmlidXRlc0Zvckluc3RhbmNlcyhhdHRyaWJzLCBkZWZpbmVzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIExlZ2FjeSBicm93c2VyIHBhdGNoXHJcbiAgICAgICAgICAgIGNvbnN0IHNoYWRlck5hbWUgPSBcIm1yZGxCYWNrZ2xvd1wiO1xyXG4gICAgICAgICAgICBjb25zdCBqb2luID0gZGVmaW5lcy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBbXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkXCIsXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkVmlld1wiLFxyXG4gICAgICAgICAgICAgICAgXCJ3b3JsZFZpZXdQcm9qZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcInZpZXdcIixcclxuICAgICAgICAgICAgICAgIFwicHJvamVjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJ2aWV3UHJvamVjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJjYW1lcmFQb3NpdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmV2ZWxfUmFkaXVzX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfTGluZV9XaWR0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Fic29sdXRlX1NpemVzX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfVHVuaW5nX01vdGlvbl9cIixcclxuICAgICAgICAgICAgICAgIFwiX01vdGlvbl9cIixcclxuICAgICAgICAgICAgICAgIFwiX01heF9JbnRlbnNpdHlfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9JbnRlbnNpdHlfRmFkZV9Jbl9FeHBvbmVudF9cIixcclxuICAgICAgICAgICAgICAgIFwiX091dGVyX0Z1enpfU3RhcnRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9PdXRlcl9GdXp6X0VuZF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0NvbG9yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSW5uZXJfQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbGVuZF9FeHBvbmVudF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0ZhbGxvZmZfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CaWFzX1wiLFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBjb25zdCBzYW1wbGVyczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybUJ1ZmZlcnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgICAgICBQcmVwYXJlVW5pZm9ybXNBbmRTYW1wbGVyc0xpc3QoPElFZmZlY3RDcmVhdGlvbk9wdGlvbnM+e1xyXG4gICAgICAgICAgICAgICAgdW5pZm9ybXNOYW1lczogdW5pZm9ybXMsXHJcbiAgICAgICAgICAgICAgICB1bmlmb3JtQnVmZmVyc05hbWVzOiB1bmlmb3JtQnVmZmVycyxcclxuICAgICAgICAgICAgICAgIHNhbXBsZXJzOiBzYW1wbGVycyxcclxuICAgICAgICAgICAgICAgIGRlZmluZXM6IGRlZmluZXMsXHJcbiAgICAgICAgICAgICAgICBtYXhTaW11bHRhbmVvdXNMaWdodHM6IDQsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc3ViTWVzaC5zZXRFZmZlY3QoXHJcbiAgICAgICAgICAgICAgICBzY2VuZS5nZXRFbmdpbmUoKS5jcmVhdGVFZmZlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgc2hhZGVyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICA8SUVmZmVjdENyZWF0aW9uT3B0aW9ucz57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zTmFtZXM6IHVuaWZvcm1zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3JtQnVmZmVyc05hbWVzOiB1bmlmb3JtQnVmZmVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlcnM6IHNhbXBsZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVzOiBqb2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFja3M6IGZhbGxiYWNrcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db21waWxlZDogdGhpcy5vbkNvbXBpbGVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yOiB0aGlzLm9uRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4UGFyYW1ldGVyczogeyBtYXhTaW11bHRhbmVvdXNMaWdodHM6IDQgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZVxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgIGRlZmluZXNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzdWJNZXNoLmVmZmVjdCB8fCAhc3ViTWVzaC5lZmZlY3QuaXNSZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlZmluZXMuX3JlbmRlcklkID0gc2NlbmUuZ2V0UmVuZGVySWQoKTtcclxuICAgICAgICBkcmF3V3JhcHBlci5fd2FzUHJldmlvdXNseVJlYWR5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGJpbmRGb3JTdWJNZXNoKHdvcmxkOiBNYXRyaXgsIG1lc2g6IE1lc2gsIHN1Yk1lc2g6IFN1Yk1lc2gpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IDxNUkRMQmFja2dsb3dNYXRlcmlhbERlZmluZXM+c3ViTWVzaC5tYXRlcmlhbERlZmluZXM7XHJcbiAgICAgICAgaWYgKCFkZWZpbmVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IHN1Yk1lc2guZWZmZWN0O1xyXG4gICAgICAgIGlmICghZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdCA9IGVmZmVjdDtcclxuXHJcbiAgICAgICAgLy8gTWF0cmljZXNcclxuICAgICAgICB0aGlzLmJpbmRPbmx5V29ybGRNYXRyaXgod29ybGQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRNYXRyaXgoXCJ2aWV3UHJvamVjdGlvblwiLCBzY2VuZS5nZXRUcmFuc2Zvcm1NYXRyaXgoKSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjMoXCJjYW1lcmFQb3NpdGlvblwiLCBzY2VuZS5hY3RpdmVDYW1lcmEhLnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gXCJSb3VuZGVkIFJlY3RhbmdsZVwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0JldmVsX1JhZGl1c19cIiwgdGhpcy5iZXZlbFJhZGl1cyk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0xpbmVfV2lkdGhfXCIsIHRoaXMubGluZVdpZHRoKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQWJzb2x1dGVfU2l6ZXNfXCIsIHRoaXMuYWJzb2x1dGVTaXplcyA/IDEuMCA6IDAuMCk7XHJcblxyXG4gICAgICAgIC8vIFwiQW5pbWF0aW9uXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfVHVuaW5nX01vdGlvbl9cIiwgdGhpcy50dW5pbmdNb3Rpb24pO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Nb3Rpb25fXCIsIHRoaXMubW90aW9uKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfTWF4X0ludGVuc2l0eV9cIiwgdGhpcy5tYXhJbnRlbnNpdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9JbnRlbnNpdHlfRmFkZV9Jbl9FeHBvbmVudF9cIiwgdGhpcy5pbnRlbnNpdHlGYWRlSW5FeHBvbmVudCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX091dGVyX0Z1enpfU3RhcnRfXCIsIHRoaXMub3V0ZXJGdXp6U3RhcnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9PdXRlcl9GdXp6X0VuZF9cIiwgdGhpcy5vdXRlckZ1enpFbmQpO1xyXG5cclxuICAgICAgICAvLyBcIkNvbG9yXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX0NvbG9yX1wiLCB0aGlzLmNvbG9yKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX0lubmVyX0NvbG9yX1wiLCB0aGlzLmlubmVyQ29sb3IpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbGVuZF9FeHBvbmVudF9cIiwgdGhpcy5ibGVuZEV4cG9uZW50KTtcclxuXHJcbiAgICAgICAgLy8gXCJJbm5lciBUcmFuc2l0aW9uXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRmFsbG9mZl9cIiwgdGhpcy5mYWxsb2ZmKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmlhc19cIiwgdGhpcy5iaWFzKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWZ0ZXJCaW5kKG1lc2gsIHRoaXMuX2FjdGl2ZUVmZmVjdCwgc3ViTWVzaCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGxpc3Qgb2YgYW5pbWF0YWJsZXMgaW4gdGhlIG1hdGVyaWFsLlxyXG4gICAgICogQHJldHVybnMgdGhlIGxpc3Qgb2YgYW5pbWF0YWJsZXMgb2JqZWN0IHVzZWQgaW4gdGhlIG1hdGVyaWFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRBbmltYXRhYmxlcygpOiBJQW5pbWF0YWJsZVtdIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoZm9yY2VEaXNwb3NlRWZmZWN0PzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoZm9yY2VEaXNwb3NlRWZmZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgY2xvbmUobmFtZTogc3RyaW5nKTogTVJETEJhY2tnbG93TWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiBTZXJpYWxpemF0aW9uSGVscGVyLkNsb25lKCgpID0+IG5ldyBNUkRMQmFja2dsb3dNYXRlcmlhbChuYW1lLCB0aGlzLmdldFNjZW5lKCkpLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2VyaWFsaXplKCk6IHVua25vd24ge1xyXG4gICAgICAgIGNvbnN0IHNlcmlhbGl6YXRpb25PYmplY3QgPSBTZXJpYWxpemF0aW9uSGVscGVyLlNlcmlhbGl6ZSh0aGlzKTtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmN1c3RvbVR5cGUgPSBcIkJBQllMT04uTVJETEJhY2tnbG93TWF0ZXJpYWxcIjtcclxuICAgICAgICByZXR1cm4gc2VyaWFsaXphdGlvbk9iamVjdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0Q2xhc3NOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFwiTVJETEJhY2tnbG93TWF0ZXJpYWxcIjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdGF0aWNzXHJcbiAgICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIFBhcnNlKHNvdXJjZTogYW55LCBzY2VuZTogU2NlbmUsIHJvb3RVcmw6IHN0cmluZyk6IE1SRExCYWNrZ2xvd01hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gU2VyaWFsaXphdGlvbkhlbHBlci5QYXJzZSgoKSA9PiBuZXcgTVJETEJhY2tnbG93TWF0ZXJpYWwoc291cmNlLm5hbWUsIHNjZW5lKSwgc291cmNlLCBzY2VuZSwgcm9vdFVybCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblJlZ2lzdGVyQ2xhc3MoXCJCQUJZTE9OLkdVSS5NUkRMQmFja2dsb3dNYXRlcmlhbFwiLCBNUkRMQmFja2dsb3dNYXRlcmlhbCk7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xyXG5pbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB7IFNlcmlhbGl6YXRpb25IZWxwZXIgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnMuc2VyaWFsaXphdGlvblwiO1xyXG5pbXBvcnQgdHlwZSB7IE1hdHJpeCB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IElBbmltYXRhYmxlIH0gZnJvbSBcImNvcmUvQW5pbWF0aW9ucy9hbmltYXRhYmxlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgdHlwZSB7IEJhc2VUZXh0dXJlIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL1RleHR1cmVzL2Jhc2VUZXh0dXJlXCI7XHJcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvVGV4dHVyZXMvdGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBNYXRlcmlhbERlZmluZXMgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvbWF0ZXJpYWxEZWZpbmVzXCI7XHJcbmltcG9ydCB0eXBlIHsgSUVmZmVjdENyZWF0aW9uT3B0aW9ucyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9lZmZlY3RcIjtcclxuaW1wb3J0IHsgUHVzaE1hdGVyaWFsIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL3B1c2hNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBWZXJ0ZXhCdWZmZXIgfSBmcm9tIFwiY29yZS9CdWZmZXJzL2J1ZmZlclwiO1xyXG5pbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBTdWJNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL3N1Yk1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBDb2xvcjQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbG9yXCI7XHJcbmltcG9ydCB7IEVmZmVjdEZhbGxiYWNrcyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9lZmZlY3RGYWxsYmFja3NcIjtcclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcImNvcmUvRW5naW5lcy9jb25zdGFudHNcIjtcclxuXHJcbmltcG9ydCBcIi4vc2hhZGVycy9tcmRsQmFja3BsYXRlLmZyYWdtZW50XCI7XHJcbmltcG9ydCBcIi4vc2hhZGVycy9tcmRsQmFja3BsYXRlLnZlcnRleFwiO1xyXG5pbXBvcnQgeyBIYW5kbGVGYWxsYmFja3NGb3JTaGFkb3dzLCBQcmVwYXJlQXR0cmlidXRlc0Zvckluc3RhbmNlcywgUHJlcGFyZURlZmluZXNGb3JBdHRyaWJ1dGVzLCBQcmVwYXJlVW5pZm9ybXNBbmRTYW1wbGVyc0xpc3QgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvbWF0ZXJpYWxIZWxwZXIuZnVuY3Rpb25zXCI7XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmNsYXNzIE1SRExCYWNrcGxhdGVNYXRlcmlhbERlZmluZXMgZXh0ZW5kcyBNYXRlcmlhbERlZmluZXMge1xyXG4gICAgLypcclxuICAgICAgICBcIklSSURFU0NFTkNFX0VOQUJMRVwiLCBcIlNNT09USF9FREdFU1wiXHJcbiAgICAqL1xyXG4gICAgcHVibGljIElSSURFU0NFTkNFX0VOQUJMRSA9IHRydWU7XHJcbiAgICBwdWJsaWMgU01PT1RIX0VER0VTID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX25lZWROb3JtYWxzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlYnVpbGQoKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gcmVuZGVyIGJhY2twbGF0ZSBtYXRlcmlhbCB3aXRoIE1SRExcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNUkRMQmFja3BsYXRlTWF0ZXJpYWwgZXh0ZW5kcyBQdXNoTWF0ZXJpYWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBVUkwgcG9pbnRpbmcgdG8gdGhlIHRleHR1cmUgdXNlZCB0byBkZWZpbmUgdGhlIGNvbG9yaW5nIGZvciB0aGUgSXJpZGVzY2VudCBNYXAgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIElSSURFU0NFTlRfTUFQX1RFWFRVUkVfVVJMID0gXCJodHRwczovL2Fzc2V0cy5iYWJ5bG9uanMuY29tL21lc2hlcy9NUlRLL01SREwvbXJ0ay1tcmRsLWJhY2twbGF0ZS1pcmlkZXNjZW5jZS5wbmdcIjtcclxuICAgIHByaXZhdGUgX2lyaWRlc2NlbnRNYXBUZXh0dXJlOiBUZXh0dXJlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBjb3JuZXIgcmFkaXVzIG9uIHRoZSBiYWNrcGxhdGUuIElmIHRoaXMgdmFsdWUgaXMgY2hhbmdlZCwgdXBkYXRlIHRoZSBsaW5lV2lkdGggdG8gbWF0Y2guXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJhZGl1cyA9IDAuMztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgbGluZSB3aWR0aCBvZiB0aGUgYmFja3BsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBsaW5lV2lkdGggPSAwLjAwMztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB3aGV0aGVyIHRvIHVzZSBhYnNvbHV0ZSBzaXplcyB3aGVuIGNhbGN1bGF0aW5nIGVmZmVjdHMgb24gdGhlIGJhY2twbGF0ZS5cclxuICAgICAqIFNpbmNlIGRlc2t0b3AgYW5kIFZSL0FSIGhhdmUgZGlmZmVyZW50IHJlbGF0aXZlIHNpemVzLCBpdCdzIHVzdWFsbHkgYmVzdCB0byBrZWVwIHRoaXMgZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGFic29sdXRlU2l6ZXMgPSBmYWxzZTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2ZpbHRlcldpZHRoID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYmFzZSBjb2xvciBvZiB0aGUgYmFja3BsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBiYXNlQ29sb3IgPSBuZXcgQ29sb3I0KDAsIDAsIDAsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsaW5lIGNvbG9yIG9mIHRoZSBiYWNrcGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGxpbmVDb2xvciA9IG5ldyBDb2xvcjQoMC4yLCAwLjI2Mjc0NSwgMC40LCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIGxlZnQgUmFkaWkgTXVsdGlwbGllci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmFkaXVzVG9wTGVmdCA9IDEuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIGxlZnQgUmFkaWkgTXVsdGlwbGllci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmFkaXVzVG9wUmlnaHQgPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRvcCBsZWZ0IFJhZGlpIE11bHRpcGxpZXIuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJhZGl1c0JvdHRvbUxlZnQgPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRvcCBsZWZ0IFJhZGlpIE11bHRpcGxpZXIuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJhZGl1c0JvdHRvbVJpZ2h0ID0gMS4wO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfcmF0ZSA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGNvbG9yIG9mIHRoZSBoaWdobGlnaHRzIG9uIHRoZSBiYWNrcGxhdGUgbGluZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaGlnaGxpZ2h0Q29sb3IgPSBuZXcgQ29sb3I0KDAuMjM5MjE2LCAwLjQzNTI5NCwgMC44Mjc0NTEsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSB3aWR0aCBvZiB0aGUgaGlnaGxpZ2h0cyBvbiB0aGUgYmFja3BsYXRlIGxpbmUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGhpZ2hsaWdodFdpZHRoID0gMDtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX2hpZ2hsaWdodFRyYW5zZm9ybSA9IG5ldyBWZWN0b3I0KDEsIDEsIDAsIDApO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfaGlnaGxpZ2h0ID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBpcmlkZXNjZW5jZSBlZmZlY3QuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGlyaWRlc2NlbmNlSW50ZW5zaXR5ID0gMC40NTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBpcmlkZXNjZW5jZSBlZmZlY3Qgb24gdGhlIGJhY2twbGF0ZSBlZGdlcy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaXJpZGVzY2VuY2VFZGdlSW50ZW5zaXR5ID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgVGludCBvZiB0aGUgaXJpZGVzY2VuY2UgZWZmZWN0IG9uIHRoZSBiYWNrcGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGlyaWRlc2NlbmNlVGludCA9IG5ldyBDb2xvcjQoMSwgMSwgMSwgMSk7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9hbmdsZSA9IC00NTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgb3BhY2l0eSBvZiB0aGUgYmFja3BsYXRlICgwLjAgLSAxLjApLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBmYWRlT3V0ID0gMTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwdWJsaWMgX3JlZmxlY3RlZCA9IHRydWU7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHVibGljIF9mcmVxdWVuY3kgPSAxO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHB1YmxpYyBfdmVydGljYWxPZmZzZXQgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBncmFkaWVudCBjb2xvciBlZmZlY3Qgb24gdGhlIGJhY2twbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ3JhZGllbnRDb2xvciA9IG5ldyBDb2xvcjQoMC43NDkwMiwgMC43NDkwMiwgMC43NDkwMiwgMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRvcCBsZWZ0IGdyYWRpZW50IGNvbG9yIGVmZmVjdCBvbiB0aGUgYmFja3BsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyB0b3BMZWZ0R3JhZGllbnRDb2xvciA9IG5ldyBDb2xvcjQoMC4wMDc4NDMxNCwgMC4yOTQxMTgsIDAuNTgwMzkyLCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIHJpZ2h0IGdyYWRpZW50IGNvbG9yIGVmZmVjdCBvbiB0aGUgYmFja3BsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyB0b3BSaWdodEdyYWRpZW50Q29sb3IgPSBuZXcgQ29sb3I0KDAuMzA1ODgyLCAwLCAxLCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYm90dG9tIGxlZnQgZ3JhZGllbnQgY29sb3IgZWZmZWN0IG9uIHRoZSBiYWNrcGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJvdHRvbUxlZnRHcmFkaWVudENvbG9yID0gbmV3IENvbG9yNCgwLjEzMzMzMywgMC4yNTg4MjQsIDAuOTkyMTU3LCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYm90dG9tIHJpZ2h0IGdyYWRpZW50IGNvbG9yIGVmZmVjdCBvbiB0aGUgYmFja3BsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBib3R0b21SaWdodEdyYWRpZW50Q29sb3IgPSBuZXcgQ29sb3I0KDAuMTc2NDcxLCAwLjE3NjQ3MSwgMC42MTk2MDgsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBlZGdlIHdpZHRoIG9mIHRoZSBiYWNrcGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGVkZ2VXaWR0aCA9IDAuNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZWRnZSB3aWR0aCBvZiB0aGUgYmFja3BsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBlZGdlUG93ZXIgPSAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBlZGdlIHdpZHRoIG9mIHRoZSBiYWNrcGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGVkZ2VMaW5lR3JhZGllbnRCbGVuZCA9IDAuNTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHNjZW5lPzogU2NlbmUpIHtcclxuICAgICAgICBzdXBlcihuYW1lLCBzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5hbHBoYU1vZGUgPSBDb25zdGFudHMuQUxQSEFfRElTQUJMRTtcclxuICAgICAgICB0aGlzLmJhY2tGYWNlQ3VsbGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLl9pcmlkZXNjZW50TWFwVGV4dHVyZSA9IG5ldyBUZXh0dXJlKE1SRExCYWNrcGxhdGVNYXRlcmlhbC5JUklERVNDRU5UX01BUF9URVhUVVJFX1VSTCwgdGhpcy5nZXRTY2VuZSgpLCB0cnVlLCBmYWxzZSwgVGV4dHVyZS5ORUFSRVNUX1NBTVBMSU5HTU9ERSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIG5lZWRBbHBoYUJsZW5kaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgbmVlZEFscGhhVGVzdGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldEFscGhhVGVzdFRleHR1cmUoKTogTnVsbGFibGU8QmFzZVRleHR1cmU+IHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNZXRob2RzXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgaXNSZWFkeUZvclN1Yk1lc2gobWVzaDogQWJzdHJhY3RNZXNoLCBzdWJNZXNoOiBTdWJNZXNoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZHJhd1dyYXBwZXIgPSBzdWJNZXNoLl9kcmF3V3JhcHBlcjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNGcm96ZW4pIHtcclxuICAgICAgICAgICAgaWYgKGRyYXdXcmFwcGVyLmVmZmVjdCAmJiBkcmF3V3JhcHBlci5fd2FzUHJldmlvdXNseVJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcykge1xyXG4gICAgICAgICAgICBzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcyA9IG5ldyBNUkRMQmFja3BsYXRlTWF0ZXJpYWxEZWZpbmVzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkZWZpbmVzID0gPE1SRExCYWNrcGxhdGVNYXRlcmlhbERlZmluZXM+c3ViTWVzaC5tYXRlcmlhbERlZmluZXM7XHJcbiAgICAgICAgY29uc3Qgc2NlbmUgPSB0aGlzLmdldFNjZW5lKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc1JlYWR5Rm9yU3ViTWVzaChzdWJNZXNoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVuZ2luZSA9IHNjZW5lLmdldEVuZ2luZSgpO1xyXG5cclxuICAgICAgICAvLyBBdHRyaWJzXHJcbiAgICAgICAgUHJlcGFyZURlZmluZXNGb3JBdHRyaWJ1dGVzKG1lc2gsIGRlZmluZXMsIGZhbHNlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIEdldCBjb3JyZWN0IGVmZmVjdFxyXG4gICAgICAgIGlmIChkZWZpbmVzLmlzRGlydHkpIHtcclxuICAgICAgICAgICAgZGVmaW5lcy5tYXJrQXNQcm9jZXNzZWQoKTtcclxuXHJcbiAgICAgICAgICAgIHNjZW5lLnJlc2V0Q2FjaGVkTWF0ZXJpYWwoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrc1xyXG4gICAgICAgICAgICBjb25zdCBmYWxsYmFja3MgPSBuZXcgRWZmZWN0RmFsbGJhY2tzKCk7XHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLkZPRykge1xyXG4gICAgICAgICAgICAgICAgZmFsbGJhY2tzLmFkZEZhbGxiYWNrKDEsIFwiRk9HXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBIYW5kbGVGYWxsYmFja3NGb3JTaGFkb3dzKGRlZmluZXMsIGZhbGxiYWNrcyk7XHJcblxyXG4gICAgICAgICAgICBkZWZpbmVzLklNQUdFUFJPQ0VTU0lOR1BPU1RQUk9DRVNTID0gc2NlbmUuaW1hZ2VQcm9jZXNzaW5nQ29uZmlndXJhdGlvbi5hcHBseUJ5UG9zdFByb2Nlc3M7XHJcblxyXG4gICAgICAgICAgICAvL0F0dHJpYnV0ZXNcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlicyA9IFtWZXJ0ZXhCdWZmZXIuUG9zaXRpb25LaW5kXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLk5PUk1BTCkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5Ob3JtYWxLaW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuVVYxKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLlVWS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlVWMikge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5VVjJLaW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuVkVSVEVYQ09MT1IpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuQ29sb3JLaW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuVEFOR0VOVCkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5UYW5nZW50S2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFByZXBhcmVBdHRyaWJ1dGVzRm9ySW5zdGFuY2VzKGF0dHJpYnMsIGRlZmluZXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gTGVnYWN5IGJyb3dzZXIgcGF0Y2hcclxuICAgICAgICAgICAgY29uc3Qgc2hhZGVyTmFtZSA9IFwibXJkbEJhY2twbGF0ZVwiO1xyXG4gICAgICAgICAgICBjb25zdCBqb2luID0gZGVmaW5lcy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBbXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkXCIsXHJcbiAgICAgICAgICAgICAgICBcInZpZXdQcm9qZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcImNhbWVyYVBvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9MaW5lX1dpZHRoX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQWJzb2x1dGVfU2l6ZXNfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9GaWx0ZXJfV2lkdGhfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CYXNlX0NvbG9yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfTGluZV9Db2xvcl9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JhZGl1c19Ub3BfTGVmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JhZGl1c19Ub3BfUmlnaHRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfQm90dG9tX0xlZnRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfQm90dG9tX1JpZ2h0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmF0ZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0hpZ2hsaWdodF9Db2xvcl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0hpZ2hsaWdodF9XaWR0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0hpZ2hsaWdodF9UcmFuc2Zvcm1fXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9IaWdobGlnaHRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9JcmlkZXNjZW5jZV9FZGdlX0ludGVuc2l0eV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0lyaWRlc2NlbmNlX1RpbnRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9JcmlkZXNjZW50X01hcF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0FuZ2xlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmVmbGVjdGVkX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfRnJlcXVlbmN5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfVmVydGljYWxfT2Zmc2V0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfR3JhZGllbnRfQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Ub3BfTGVmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1RvcF9SaWdodF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0JvdHRvbV9MZWZ0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQm90dG9tX1JpZ2h0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfRWRnZV9XaWR0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0VkZ2VfUG93ZXJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9MaW5lX0dyYWRpZW50X0JsZW5kX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfRmFkZV9PdXRfXCIsXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZXJzOiBzdHJpbmdbXSA9IFtcIl9JcmlkZXNjZW50X01hcF9cIl07XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1CdWZmZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgUHJlcGFyZVVuaWZvcm1zQW5kU2FtcGxlcnNMaXN0KDxJRWZmZWN0Q3JlYXRpb25PcHRpb25zPntcclxuICAgICAgICAgICAgICAgIHVuaWZvcm1zTmFtZXM6IHVuaWZvcm1zLFxyXG4gICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICBzYW1wbGVyczogc2FtcGxlcnMsXHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzOiBkZWZpbmVzLFxyXG4gICAgICAgICAgICAgICAgbWF4U2ltdWx0YW5lb3VzTGlnaHRzOiA0LFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHN1Yk1lc2guc2V0RWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgc2NlbmUuZ2V0RW5naW5lKCkuY3JlYXRlRWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRlck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgPElFZmZlY3RDcmVhdGlvbk9wdGlvbnM+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtc05hbWVzOiB1bmlmb3JtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZXJzOiBzYW1wbGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lczogam9pbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tzOiBmYWxsYmFja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29tcGlsZWQ6IHRoaXMub25Db21waWxlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogdGhpcy5vbkVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleFBhcmFtZXRlcnM6IHsgbWF4U2ltdWx0YW5lb3VzTGlnaHRzOiA0IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBlbmdpbmVcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghc3ViTWVzaC5lZmZlY3QgfHwgIXN1Yk1lc2guZWZmZWN0LmlzUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZWZpbmVzLl9yZW5kZXJJZCA9IHNjZW5lLmdldFJlbmRlcklkKCk7XHJcbiAgICAgICAgZHJhd1dyYXBwZXIuX3dhc1ByZXZpb3VzbHlSZWFkeSA9IHRydWU7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBiaW5kRm9yU3ViTWVzaCh3b3JsZDogTWF0cml4LCBtZXNoOiBNZXNoLCBzdWJNZXNoOiBTdWJNZXNoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IDxNUkRMQmFja3BsYXRlTWF0ZXJpYWxEZWZpbmVzPnN1Yk1lc2gubWF0ZXJpYWxEZWZpbmVzO1xyXG4gICAgICAgIGlmICghZGVmaW5lcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlZmZlY3QgPSBzdWJNZXNoLmVmZmVjdDtcclxuICAgICAgICBpZiAoIWVmZmVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3QgPSBlZmZlY3Q7XHJcblxyXG4gICAgICAgIC8vIE1hdHJpY2VzXHJcbiAgICAgICAgdGhpcy5iaW5kT25seVdvcmxkTWF0cml4KHdvcmxkKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0TWF0cml4KFwidmlld1Byb2plY3Rpb25cIiwgdGhpcy5nZXRTY2VuZSgpLmdldFRyYW5zZm9ybU1hdHJpeCgpKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcImNhbWVyYVBvc2l0aW9uXCIsIHRoaXMuZ2V0U2NlbmUoKS5hY3RpdmVDYW1lcmEhLnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gXCJSb3VuZCBSZWN0XCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmFkaXVzX1wiLCB0aGlzLnJhZGl1cyk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0xpbmVfV2lkdGhfXCIsIHRoaXMubGluZVdpZHRoKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQWJzb2x1dGVfU2l6ZXNfXCIsIHRoaXMuYWJzb2x1dGVTaXplcyA/IDEuMCA6IDAuMCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0ZpbHRlcl9XaWR0aF9cIiwgdGhpcy5fZmlsdGVyV2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXREaXJlY3RDb2xvcjQoXCJfQmFzZV9Db2xvcl9cIiwgdGhpcy5iYXNlQ29sb3IpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXREaXJlY3RDb2xvcjQoXCJfTGluZV9Db2xvcl9cIiwgdGhpcy5saW5lQ29sb3IpO1xyXG5cclxuICAgICAgICAvLyBcIlJhZGlpIE11bHRpcGxpZXJzXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmFkaXVzX1RvcF9MZWZ0X1wiLCB0aGlzLnJhZGl1c1RvcExlZnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfVG9wX1JpZ2h0X1wiLCB0aGlzLnJhZGl1c1RvcFJpZ2h0KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmFkaXVzX0JvdHRvbV9MZWZ0X1wiLCB0aGlzLnJhZGl1c0JvdHRvbUxlZnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfQm90dG9tX1JpZ2h0X1wiLCB0aGlzLnJhZGl1c0JvdHRvbVJpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gXCJMaW5lIEhpZ2hsaWdodFwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JhdGVfXCIsIHRoaXMuX3JhdGUpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXREaXJlY3RDb2xvcjQoXCJfSGlnaGxpZ2h0X0NvbG9yX1wiLCB0aGlzLmhpZ2hsaWdodENvbG9yKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfSGlnaGxpZ2h0X1dpZHRoX1wiLCB0aGlzLmhpZ2hsaWdodFdpZHRoKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yNChcIl9IaWdobGlnaHRfVHJhbnNmb3JtX1wiLCB0aGlzLl9oaWdobGlnaHRUcmFuc2Zvcm0pO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9IaWdobGlnaHRfXCIsIHRoaXMuX2hpZ2hsaWdodCk7XHJcblxyXG4gICAgICAgIC8vIFwiSXJpZGVzY2VuY2VcIlxyXG4gICAgICAgIC8vZGVmaW5lIElSSURFU0NFTkNFX0VOQUJMRSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfXCIsIHRoaXMuaXJpZGVzY2VuY2VJbnRlbnNpdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9JcmlkZXNjZW5jZV9FZGdlX0ludGVuc2l0eV9cIiwgdGhpcy5pcmlkZXNjZW5jZUVkZ2VJbnRlbnNpdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXREaXJlY3RDb2xvcjQoXCJfSXJpZGVzY2VuY2VfVGludF9cIiwgdGhpcy5pcmlkZXNjZW5jZVRpbnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRUZXh0dXJlKFwiX0lyaWRlc2NlbnRfTWFwX1wiLCB0aGlzLl9pcmlkZXNjZW50TWFwVGV4dHVyZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0FuZ2xlX1wiLCB0aGlzLl9hbmdsZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JlZmxlY3RlZF9cIiwgdGhpcy5fcmVmbGVjdGVkID8gMS4wIDogMC4wKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRnJlcXVlbmN5X1wiLCB0aGlzLl9mcmVxdWVuY3kpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9WZXJ0aWNhbF9PZmZzZXRfXCIsIHRoaXMuX3ZlcnRpY2FsT2Zmc2V0KTtcclxuXHJcbiAgICAgICAgLy8gXCJHcmFkaWVudFwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldERpcmVjdENvbG9yNChcIl9HcmFkaWVudF9Db2xvcl9cIiwgdGhpcy5ncmFkaWVudENvbG9yKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX1RvcF9MZWZ0X1wiLCB0aGlzLnRvcExlZnRHcmFkaWVudENvbG9yKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX1RvcF9SaWdodF9cIiwgdGhpcy50b3BSaWdodEdyYWRpZW50Q29sb3IpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXREaXJlY3RDb2xvcjQoXCJfQm90dG9tX0xlZnRfXCIsIHRoaXMuYm90dG9tTGVmdEdyYWRpZW50Q29sb3IpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXREaXJlY3RDb2xvcjQoXCJfQm90dG9tX1JpZ2h0X1wiLCB0aGlzLmJvdHRvbVJpZ2h0R3JhZGllbnRDb2xvcik7XHJcbiAgICAgICAgLy9kZWZpbmUgRURHRV9PTkxZIGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9FZGdlX1dpZHRoX1wiLCB0aGlzLmVkZ2VXaWR0aCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0VkZ2VfUG93ZXJfXCIsIHRoaXMuZWRnZVBvd2VyKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfTGluZV9HcmFkaWVudF9CbGVuZF9cIiwgdGhpcy5lZGdlTGluZUdyYWRpZW50QmxlbmQpO1xyXG5cclxuICAgICAgICAvLyBcIkZhZGVcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9GYWRlX091dF9cIiwgdGhpcy5mYWRlT3V0KTtcclxuXHJcbiAgICAgICAgLy8gXCJBbnRpYWxpYXNpbmdcIlxyXG4gICAgICAgIC8vZGVmaW5lIFNNT09USF9FREdFUyB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLl9hZnRlckJpbmQobWVzaCwgdGhpcy5fYWN0aXZlRWZmZWN0LCBzdWJNZXNoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgbGlzdCBvZiBhbmltYXRhYmxlcyBpbiB0aGUgbWF0ZXJpYWwuXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgbGlzdCBvZiBhbmltYXRhYmxlcyBvYmplY3QgdXNlZCBpbiB0aGUgbWF0ZXJpYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldEFuaW1hdGFibGVzKCk6IElBbmltYXRhYmxlW10ge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZShmb3JjZURpc3Bvc2VFZmZlY3Q/OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZShmb3JjZURpc3Bvc2VFZmZlY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBjbG9uZShuYW1lOiBzdHJpbmcpOiBNUkRMQmFja3BsYXRlTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiBTZXJpYWxpemF0aW9uSGVscGVyLkNsb25lKCgpID0+IG5ldyBNUkRMQmFja3BsYXRlTWF0ZXJpYWwobmFtZSwgdGhpcy5nZXRTY2VuZSgpKSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIHNlcmlhbGl6ZSgpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IHNlcmlhbGl6YXRpb25PYmplY3QgPSBzdXBlci5zZXJpYWxpemUoKTtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmN1c3RvbVR5cGUgPSBcIkJBQllMT04uTVJETEJhY2twbGF0ZU1hdGVyaWFsXCI7XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6YXRpb25PYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIk1SRExCYWNrcGxhdGVNYXRlcmlhbFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0YXRpY3NcclxuICAgIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgUGFyc2Uoc291cmNlOiBhbnksIHNjZW5lOiBTY2VuZSwgcm9vdFVybDogc3RyaW5nKTogTVJETEJhY2twbGF0ZU1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gU2VyaWFsaXphdGlvbkhlbHBlci5QYXJzZSgoKSA9PiBuZXcgTVJETEJhY2twbGF0ZU1hdGVyaWFsKHNvdXJjZS5uYW1lLCBzY2VuZSksIHNvdXJjZSwgc2NlbmUsIHJvb3RVcmwpO1xyXG4gICAgfVxyXG59XHJcblxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuTVJETEJhY2twbGF0ZU1hdGVyaWFsXCIsIE1SRExCYWNrcGxhdGVNYXRlcmlhbCk7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xyXG5pbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBCYXNlVGV4dHVyZSB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9UZXh0dXJlcy9iYXNlVGV4dHVyZVwiO1xyXG5pbXBvcnQgdHlwZSB7IElBbmltYXRhYmxlIH0gZnJvbSBcImNvcmUvQW5pbWF0aW9ucy9hbmltYXRhYmxlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgdHlwZSB7IElFZmZlY3RDcmVhdGlvbk9wdGlvbnMgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvZWZmZWN0XCI7XHJcbmltcG9ydCB0eXBlIHsgTWF0cml4IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHR5cGUgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBOdWxsYWJsZSB9IGZyb20gXCJjb3JlL3R5cGVzXCI7XHJcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tIFwiY29yZS9zY2VuZVwiO1xyXG5pbXBvcnQgdHlwZSB7IFN1Yk1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvc3ViTWVzaFwiO1xyXG5cclxuaW1wb3J0IHsgQ29sb3I0IH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC5jb2xvclwiO1xyXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiY29yZS9FbmdpbmVzL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBFZmZlY3RGYWxsYmFja3MgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvZWZmZWN0RmFsbGJhY2tzXCI7XHJcbmltcG9ydCB7IE1hdGVyaWFsRGVmaW5lcyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9tYXRlcmlhbERlZmluZXNcIjtcclxuaW1wb3J0IHsgUHVzaE1hdGVyaWFsIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL3B1c2hNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBSZWdpc3RlckNsYXNzIH0gZnJvbSBcImNvcmUvTWlzYy90eXBlU3RvcmVcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB7IFNlcmlhbGl6YXRpb25IZWxwZXIgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnMuc2VyaWFsaXphdGlvblwiO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcImNvcmUvTWF0aHMvbWF0aC52ZWN0b3JcIjtcclxuaW1wb3J0IHsgVmVydGV4QnVmZmVyIH0gZnJvbSBcImNvcmUvQnVmZmVycy9idWZmZXJcIjtcclxuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9UZXh0dXJlcy90ZXh0dXJlXCI7XHJcblxyXG5pbXBvcnQgXCIuL3NoYWRlcnMvbXJkbEZyb250cGxhdGUuZnJhZ21lbnRcIjtcclxuaW1wb3J0IFwiLi9zaGFkZXJzL21yZGxGcm9udHBsYXRlLnZlcnRleFwiO1xyXG5pbXBvcnQgeyBIYW5kbGVGYWxsYmFja3NGb3JTaGFkb3dzLCBQcmVwYXJlQXR0cmlidXRlc0Zvckluc3RhbmNlcywgUHJlcGFyZURlZmluZXNGb3JBdHRyaWJ1dGVzLCBQcmVwYXJlVW5pZm9ybXNBbmRTYW1wbGVyc0xpc3QgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvbWF0ZXJpYWxIZWxwZXIuZnVuY3Rpb25zXCI7XHJcblxyXG4vKiogQGhpZGRlbiAqL1xyXG5jbGFzcyBNUkRMRnJvbnRwbGF0ZU1hdGVyaWFsRGVmaW5lcyBleHRlbmRzIE1hdGVyaWFsRGVmaW5lcyB7XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgZGVmYXVsdCB2YWx1ZSBmb3IgXCJTTU9PVEhfRURHRVNcIlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgU01PT1RIX0VER0VTID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX25lZWROb3JtYWxzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9uZWVkVVZzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlYnVpbGQoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1SRExGcm9udHBsYXRlTWF0ZXJpYWwgZXh0ZW5kcyBQdXNoTWF0ZXJpYWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGNvcm5lciByYWRpdXMgb24gdGhlIGZyb250cGxhdGUuIElmIHRoaXMgdmFsdWUgaXMgY2hhbmdlZCwgdXBkYXRlIHRoZSBsaW5lV2lkdGggdG8gbWF0Y2guXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJhZGl1cyA9IDAuMTI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGxpbmUgd2lkdGggb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGxpbmVXaWR0aCA9IDAuMDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgd2hldGhlciB0aGUgc2NhbGUgaXMgcmVsYXRpdmUgdG8gdGhlIGZyb250cGxhdGUgaGVpZ2h0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByZWxhdGl2ZVRvSGVpZ2h0ID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIEBoaWRkZW4gKi9cclxuICAgIHB1YmxpYyBfZmlsdGVyV2lkdGggPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGVkZ2UgY29sb3Igb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGVkZ2VDb2xvcjogQ29sb3I0ID0gbmV3IENvbG9yNCgwLjUzLCAwLjUzLCAwLjUzLCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBibG9iIGVmZmVjdHMgb24gdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JFbmFibGUgPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBibG9iIHBvc2l0aW9uIG9uIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iUG9zaXRpb246IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygxMDAsIDEwMCwgMTAwKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYmxvYiBpbnRlbnNpdHkgb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JJbnRlbnNpdHkgPSAwLjU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJsb2IgbmVhciBzaXplIG9mIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iTmVhclNpemUgPSAwLjAzMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYmxvYiBmYXIgc2l6ZSBvZiB0aGUgZnJvbnRwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYkZhclNpemUgPSAwLjA0ODtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYmxvYiBuZWFyIGRpc3RhbmNlIG9mIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iTmVhckRpc3RhbmNlID0gMC4wMDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJsb2IgZmFyIGRpc3RhbmNlIG9mIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iRmFyRGlzdGFuY2UgPSAwLjA2NDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYmxvYiBmYWRlIGxlbmd0aCBvZiB0aGUgZnJvbnRwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYkZhZGVMZW5ndGggPSAwLjA0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBibG9iIGlubmVyIGZhZGUgb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JJbm5lckZhZGUgPSAwLjAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBibG9iIHB1bHNlIG9mIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iUHVsc2UgPSAwLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJsb2IgZmFkZSBlZmZlY3Qgb24gdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JGYWRlID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBtYXhpbXVtIHNpemUgb2YgdGhlIGJsb2IgcHVsc2Ugb24gdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JQdWxzZU1heFNpemUgPSAwLjA1O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHdoZXRoZXIgdG8gZW5hYmxlIGV4dHJhIGJsb2IgZWZmZWN0cyBvZiB0aGUgZnJvbnRwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYkVuYWJsZTIgPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIGJsb2IyIHBvc2l0aW9uIG9mIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iUG9zaXRpb24yOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoMTAsIDEwLjEsIC0wLjYpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBibG9iMiBuZWFyIHNpemUgb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JOZWFyU2l6ZTIgPSAwLjAwODtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYmxvYjIgaW5uZXIgZmFkZSBvZiB0aGUgZnJvbnRwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYklubmVyRmFkZTIgPSAwLjE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJsb2IyIHB1bHNlIG9mIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iUHVsc2UyID0gMC4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBibG9iMiBmYWRlIGVmZmVjdCBvbiB0aGUgZnJvbnRwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYkZhZGUyID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBnYXplIGludGVuc2l0eSBvZiB0aGUgZnJvbnRwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2F6ZUludGVuc2l0eSA9IDAuODtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZ2F6ZSBmb2N1cyBvZiB0aGUgZnJvbnRwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ2F6ZUZvY3VzID0gMC4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzZWxlY3Rpb24gZnV6eiBvZiB0aGUgZnJvbnRwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc2VsZWN0aW9uRnV6eiA9IDAuNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZmFkZSBpbnRlbnNpdHkgb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHNlbGVjdGVkID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzZWxlY3Rpb24gZmFkZSBpbnRlbnNpdHkgb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHNlbGVjdGlvbkZhZGUgPSAwLjI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHNlbGVjdGlvbiBmYWRlIHNpemUgb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHNlbGVjdGlvbkZhZGVTaXplID0gMC4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzZWxlY3RlZCBkaXN0YW5jZSBvZiB0aGUgZnJvbnRwbGF0ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc2VsZWN0ZWREaXN0YW5jZSA9IDAuMDg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHNlbGVjdGVkIGZhZGUgbGVuZ3RoIG9mIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBzZWxlY3RlZEZhZGVMZW5ndGggPSAwLjA4O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBwcm94aW1pdHkgbWF4aW11bSBpbnRlbnNpdHkgb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHByb3hpbWl0eU1heEludGVuc2l0eSA9IDAuNDU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHByb3hpbWl0eSBmYXIgZGlzdGFuY2Ugb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHByb3hpbWl0eUZhckRpc3RhbmNlID0gMC4xNjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgcHJveGltaXR5IG5lYXIgcmFkaXVzIG9mIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBwcm94aW1pdHlOZWFyUmFkaXVzID0gMC4wMTY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHByb3hpbWl0eSBhbmlzb3Ryb3B5IG9mIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBwcm94aW1pdHlBbmlzb3Ryb3B5ID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHdoZXRoZXIgdG8gdXNlIGdsb2JhbCBsZWZ0IGluZGV4IG9uIHRoZSBmcm9udHBsYXRlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyB1c2VHbG9iYWxMZWZ0SW5kZXggPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzICB3aGV0aGVyIHRvIHVzZSBnbG9iYWwgcmlnaHQgaW5kZXggb2YgdGhlIGZyb250cGxhdGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHVzZUdsb2JhbFJpZ2h0SW5kZXggPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVVJMIHBvaW50aW5nIHRvIHRoZSB0ZXh0dXJlIHVzZWQgdG8gZGVmaW5lIHRoZSBjb2xvcmluZyBmb3IgdGhlIEJMT0IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQkxPQl9URVhUVVJFX1VSTCA9IFwiXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG9wYWNpdHkgb2YgdGhlIGZyb250cGxhdGUgKDAuMCAtIDEuMCkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmYWRlT3V0ID0gMS4wO1xyXG5cclxuICAgIHByaXZhdGUgX2Jsb2JUZXh0dXJlOiBUZXh0dXJlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgc2NlbmU6IFNjZW5lKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSwgc2NlbmUpO1xyXG4gICAgICAgIHRoaXMuYWxwaGFNb2RlID0gQ29uc3RhbnRzLkFMUEhBX0FERDtcclxuICAgICAgICB0aGlzLmRpc2FibGVEZXB0aFdyaXRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmJhY2tGYWNlQ3VsbGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2Jsb2JUZXh0dXJlID0gbmV3IFRleHR1cmUoTVJETEZyb250cGxhdGVNYXRlcmlhbC5CTE9CX1RFWFRVUkVfVVJMLCBzY2VuZSwgdHJ1ZSwgZmFsc2UsIFRleHR1cmUuTkVBUkVTVF9TQU1QTElOR01PREUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBuZWVkQWxwaGFCbGVuZGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgbmVlZEFscGhhVGVzdGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldEFscGhhVGVzdFRleHR1cmUoKTogTnVsbGFibGU8QmFzZVRleHR1cmU+IHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNZXRob2RzXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgaXNSZWFkeUZvclN1Yk1lc2gobWVzaDogQWJzdHJhY3RNZXNoLCBzdWJNZXNoOiBTdWJNZXNoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZHJhd1dyYXBwZXIgPSBzdWJNZXNoLl9kcmF3V3JhcHBlcjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNGcm96ZW4pIHtcclxuICAgICAgICAgICAgaWYgKGRyYXdXcmFwcGVyLmVmZmVjdCAmJiBkcmF3V3JhcHBlci5fd2FzUHJldmlvdXNseVJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcykge1xyXG4gICAgICAgICAgICBzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcyA9IG5ldyBNUkRMRnJvbnRwbGF0ZU1hdGVyaWFsRGVmaW5lcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IDxNUkRMRnJvbnRwbGF0ZU1hdGVyaWFsRGVmaW5lcz5zdWJNZXNoLm1hdGVyaWFsRGVmaW5lcztcclxuICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMuZ2V0U2NlbmUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUmVhZHlGb3JTdWJNZXNoKHN1Yk1lc2gpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZW5naW5lID0gc2NlbmUuZ2V0RW5naW5lKCk7XHJcblxyXG4gICAgICAgIC8vIEF0dHJpYnNcclxuICAgICAgICBQcmVwYXJlRGVmaW5lc0ZvckF0dHJpYnV0ZXMobWVzaCwgZGVmaW5lcywgZmFsc2UsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IGNvcnJlY3QgZWZmZWN0XHJcbiAgICAgICAgaWYgKGRlZmluZXMuaXNEaXJ0eSkge1xyXG4gICAgICAgICAgICBkZWZpbmVzLm1hcmtBc1Byb2Nlc3NlZCgpO1xyXG5cclxuICAgICAgICAgICAgc2NlbmUucmVzZXRDYWNoZWRNYXRlcmlhbCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gRmFsbGJhY2tzXHJcbiAgICAgICAgICAgIGNvbnN0IGZhbGxiYWNrcyA9IG5ldyBFZmZlY3RGYWxsYmFja3MoKTtcclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuRk9HKSB7XHJcbiAgICAgICAgICAgICAgICBmYWxsYmFja3MuYWRkRmFsbGJhY2soMSwgXCJGT0dcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEhhbmRsZUZhbGxiYWNrc0ZvclNoYWRvd3MoZGVmaW5lcywgZmFsbGJhY2tzKTtcclxuXHJcbiAgICAgICAgICAgIGRlZmluZXMuSU1BR0VQUk9DRVNTSU5HUE9TVFBST0NFU1MgPSBzY2VuZS5pbWFnZVByb2Nlc3NpbmdDb25maWd1cmF0aW9uLmFwcGx5QnlQb3N0UHJvY2VzcztcclxuXHJcbiAgICAgICAgICAgIC8vQXR0cmlidXRlc1xyXG4gICAgICAgICAgICBjb25zdCBhdHRyaWJzID0gW1ZlcnRleEJ1ZmZlci5Qb3NpdGlvbktpbmRdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuTk9STUFMKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLk5vcm1hbEtpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5VVjEpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVVZLaW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuVVYyKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLlVWMktpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5WRVJURVhDT0xPUikge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5Db2xvcktpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5UQU5HRU5UKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLlRhbmdlbnRLaW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgUHJlcGFyZUF0dHJpYnV0ZXNGb3JJbnN0YW5jZXMoYXR0cmlicywgZGVmaW5lcyk7XHJcblxyXG4gICAgICAgICAgICAvLyBMZWdhY3kgYnJvd3NlciBwYXRjaFxyXG4gICAgICAgICAgICBjb25zdCBzaGFkZXJOYW1lID0gXCJtcmRsRnJvbnRwbGF0ZVwiO1xyXG4gICAgICAgICAgICBjb25zdCBqb2luID0gZGVmaW5lcy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBbXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkXCIsXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkVmlld1wiLFxyXG4gICAgICAgICAgICAgICAgXCJ3b3JsZFZpZXdQcm9qZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcInZpZXdcIixcclxuICAgICAgICAgICAgICAgIFwicHJvamVjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJ2aWV3UHJvamVjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJjYW1lcmFQb3NpdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmFkaXVzX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfTGluZV9XaWR0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JlbGF0aXZlX1RvX0hlaWdodF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0ZpbHRlcl9XaWR0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0VkZ2VfQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9GYWRlX091dF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1Ntb290aF9FZGdlc19cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfRW5hYmxlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9Qb3NpdGlvbl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfSW50ZW5zaXR5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9OZWFyX1NpemVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0Zhcl9TaXplX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9OZWFyX0Rpc3RhbmNlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYXJfRGlzdGFuY2VfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0ZhZGVfTGVuZ3RoX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9Jbm5lcl9GYWRlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9QdWxzZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfRmFkZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfUHVsc2VfTWF4X1NpemVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0VuYWJsZV8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9Qb3NpdGlvbl8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9OZWFyX1NpemVfMl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfSW5uZXJfRmFkZV8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9QdWxzZV8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYWRlXzJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9HYXplX0ludGVuc2l0eV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0dhemVfRm9jdXNfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX1RleHR1cmVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9TZWxlY3Rpb25fRnV6el9cIixcclxuICAgICAgICAgICAgICAgIFwiX1NlbGVjdGVkX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU2VsZWN0aW9uX0ZhZGVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9TZWxlY3Rpb25fRmFkZV9TaXplX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU2VsZWN0ZWRfRGlzdGFuY2VfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9TZWxlY3RlZF9GYWRlX0xlbmd0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1Byb3hpbWl0eV9NYXhfSW50ZW5zaXR5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUHJveGltaXR5X0Zhcl9EaXN0YW5jZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX1Byb3hpbWl0eV9OZWFyX1JhZGl1c19cIixcclxuICAgICAgICAgICAgICAgIFwiX1Byb3hpbWl0eV9Bbmlzb3Ryb3B5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb25cIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJfVXNlX0dsb2JhbF9MZWZ0X0luZGV4X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfVXNlX0dsb2JhbF9SaWdodF9JbmRleF9cIixcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgY29uc3Qgc2FtcGxlcnM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1CdWZmZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgUHJlcGFyZVVuaWZvcm1zQW5kU2FtcGxlcnNMaXN0KDxJRWZmZWN0Q3JlYXRpb25PcHRpb25zPntcclxuICAgICAgICAgICAgICAgIHVuaWZvcm1zTmFtZXM6IHVuaWZvcm1zLFxyXG4gICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICBzYW1wbGVyczogc2FtcGxlcnMsXHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzOiBkZWZpbmVzLFxyXG4gICAgICAgICAgICAgICAgbWF4U2ltdWx0YW5lb3VzTGlnaHRzOiA0LFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHN1Yk1lc2guc2V0RWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgc2NlbmUuZ2V0RW5naW5lKCkuY3JlYXRlRWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRlck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgPElFZmZlY3RDcmVhdGlvbk9wdGlvbnM+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtc05hbWVzOiB1bmlmb3JtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZXJzOiBzYW1wbGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lczogam9pbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tzOiBmYWxsYmFja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29tcGlsZWQ6IHRoaXMub25Db21waWxlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogdGhpcy5vbkVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleFBhcmFtZXRlcnM6IHsgbWF4U2ltdWx0YW5lb3VzTGlnaHRzOiA0IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBlbmdpbmVcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghc3ViTWVzaC5lZmZlY3QgfHwgIXN1Yk1lc2guZWZmZWN0LmlzUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZWZpbmVzLl9yZW5kZXJJZCA9IHNjZW5lLmdldFJlbmRlcklkKCk7XHJcbiAgICAgICAgZHJhd1dyYXBwZXIuX3dhc1ByZXZpb3VzbHlSZWFkeSA9IHRydWU7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBiaW5kRm9yU3ViTWVzaCh3b3JsZDogTWF0cml4LCBtZXNoOiBNZXNoLCBzdWJNZXNoOiBTdWJNZXNoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgc2NlbmUgPSB0aGlzLmdldFNjZW5lKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSA8TVJETEZyb250cGxhdGVNYXRlcmlhbERlZmluZXM+c3ViTWVzaC5tYXRlcmlhbERlZmluZXM7XHJcbiAgICAgICAgaWYgKCFkZWZpbmVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IHN1Yk1lc2guZWZmZWN0O1xyXG4gICAgICAgIGlmICghZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdCA9IGVmZmVjdDtcclxuXHJcbiAgICAgICAgLy8gTWF0cmljZXNcclxuICAgICAgICB0aGlzLmJpbmRPbmx5V29ybGRNYXRyaXgod29ybGQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRNYXRyaXgoXCJ2aWV3UHJvamVjdGlvblwiLCBzY2VuZS5nZXRUcmFuc2Zvcm1NYXRyaXgoKSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjMoXCJjYW1lcmFQb3NpdGlvblwiLCBzY2VuZS5hY3RpdmVDYW1lcmEhLnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gXCJSb3VuZCBSZWN0XCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmFkaXVzX1wiLCB0aGlzLnJhZGl1cyk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0xpbmVfV2lkdGhfXCIsIHRoaXMubGluZVdpZHRoKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmVsYXRpdmVfVG9fSGVpZ2h0X1wiLCB0aGlzLnJlbGF0aXZlVG9IZWlnaHQgPyAxLjAgOiAwLjApO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9GaWx0ZXJfV2lkdGhfXCIsIHRoaXMuX2ZpbHRlcldpZHRoKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX0VkZ2VfQ29sb3JfXCIsIHRoaXMuZWRnZUNvbG9yKTtcclxuXHJcbiAgICAgICAgLy8gXCJGYWRlXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRmFkZV9PdXRfXCIsIHRoaXMuZmFkZU91dCk7XHJcblxyXG4gICAgICAgIC8vIFwiQmxvYlwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRW5hYmxlX1wiLCB0aGlzLmJsb2JFbmFibGUgPyAxLjAgOiAwLjApO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3IzKFwiX0Jsb2JfUG9zaXRpb25fXCIsIHRoaXMuYmxvYlBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9JbnRlbnNpdHlfXCIsIHRoaXMuYmxvYkludGVuc2l0eSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfTmVhcl9TaXplX1wiLCB0aGlzLmJsb2JOZWFyU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFyX1NpemVfXCIsIHRoaXMuYmxvYkZhclNpemUpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX05lYXJfRGlzdGFuY2VfXCIsIHRoaXMuYmxvYk5lYXJEaXN0YW5jZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFyX0Rpc3RhbmNlX1wiLCB0aGlzLmJsb2JGYXJEaXN0YW5jZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFkZV9MZW5ndGhfXCIsIHRoaXMuYmxvYkZhZGVMZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0lubmVyX0ZhZGVfXCIsIHRoaXMuYmxvYklubmVyRmFkZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfUHVsc2VfXCIsIHRoaXMuYmxvYlB1bHNlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9GYWRlX1wiLCB0aGlzLmJsb2JGYWRlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9QdWxzZV9NYXhfU2l6ZV9cIiwgdGhpcy5ibG9iUHVsc2VNYXhTaXplKTtcclxuXHJcbiAgICAgICAgLy8gXCJCbG9iIDJcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0VuYWJsZV8yX1wiLCB0aGlzLmJsb2JFbmFibGUyID8gMS4wIDogMC4wKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcIl9CbG9iX1Bvc2l0aW9uXzJfXCIsIHRoaXMuYmxvYlBvc2l0aW9uMik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfTmVhcl9TaXplXzJfXCIsIHRoaXMuYmxvYk5lYXJTaXplMik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfSW5uZXJfRmFkZV8yX1wiLCB0aGlzLmJsb2JJbm5lckZhZGUyKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9QdWxzZV8yX1wiLCB0aGlzLmJsb2JQdWxzZTIpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0ZhZGVfMl9cIiwgdGhpcy5ibG9iRmFkZTIpO1xyXG5cclxuICAgICAgICAvLyBcIkdhemVcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9HYXplX0ludGVuc2l0eV9cIiwgdGhpcy5nYXplSW50ZW5zaXR5KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfR2F6ZV9Gb2N1c19cIiwgdGhpcy5nYXplRm9jdXMpO1xyXG5cclxuICAgICAgICAvLyBcIkJsb2IgVGV4dHVyZVwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFRleHR1cmUoXCJfQmxvYl9UZXh0dXJlX1wiLCB0aGlzLl9ibG9iVGV4dHVyZSk7XHJcblxyXG4gICAgICAgIC8vIFwiU2VsZWN0aW9uXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU2VsZWN0aW9uX0Z1enpfXCIsIHRoaXMuc2VsZWN0aW9uRnV6eik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1NlbGVjdGVkX1wiLCB0aGlzLnNlbGVjdGVkKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU2VsZWN0aW9uX0ZhZGVfXCIsIHRoaXMuc2VsZWN0aW9uRmFkZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1NlbGVjdGlvbl9GYWRlX1NpemVfXCIsIHRoaXMuc2VsZWN0aW9uRmFkZVNpemUpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TZWxlY3RlZF9EaXN0YW5jZV9cIiwgdGhpcy5zZWxlY3RlZERpc3RhbmNlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU2VsZWN0ZWRfRmFkZV9MZW5ndGhfXCIsIHRoaXMuc2VsZWN0ZWRGYWRlTGVuZ3RoKTtcclxuXHJcbiAgICAgICAgLy8gXCJQcm94aW1pdHlcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Qcm94aW1pdHlfTWF4X0ludGVuc2l0eV9cIiwgdGhpcy5wcm94aW1pdHlNYXhJbnRlbnNpdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Qcm94aW1pdHlfRmFyX0Rpc3RhbmNlX1wiLCB0aGlzLnByb3hpbWl0eUZhckRpc3RhbmNlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUHJveGltaXR5X05lYXJfUmFkaXVzX1wiLCB0aGlzLnByb3hpbWl0eU5lYXJSYWRpdXMpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Qcm94aW1pdHlfQW5pc290cm9weV9cIiwgdGhpcy5wcm94aW1pdHlBbmlzb3Ryb3B5KTtcclxuXHJcbiAgICAgICAgLy8gXCJHbG9iYWxcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Vc2VfR2xvYmFsX0xlZnRfSW5kZXhfXCIsIHRoaXMudXNlR2xvYmFsTGVmdEluZGV4ID8gMS4wIDogMC4wKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfVXNlX0dsb2JhbF9SaWdodF9JbmRleF9cIiwgdGhpcy51c2VHbG9iYWxSaWdodEluZGV4ID8gMS4wIDogMC4wKTtcclxuXHJcbiAgICAgICAgLy8gXCJBbnRpYWxpYXNpbmdcIlxyXG4gICAgICAgIC8vZGVmaW5lIFNNT09USF9FREdFUyB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLl9hZnRlckJpbmQobWVzaCwgdGhpcy5fYWN0aXZlRWZmZWN0LCBzdWJNZXNoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgbGlzdCBvZiBhbmltYXRhYmxlcyBpbiB0aGUgbWF0ZXJpYWwuXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgbGlzdCBvZiBhbmltYXRhYmxlcyBvYmplY3QgdXNlZCBpbiB0aGUgbWF0ZXJpYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldEFuaW1hdGFibGVzKCk6IElBbmltYXRhYmxlW10ge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZShmb3JjZURpc3Bvc2VFZmZlY3Q/OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZShmb3JjZURpc3Bvc2VFZmZlY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBjbG9uZShuYW1lOiBzdHJpbmcpOiBNUkRMRnJvbnRwbGF0ZU1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gU2VyaWFsaXphdGlvbkhlbHBlci5DbG9uZSgoKSA9PiBuZXcgTVJETEZyb250cGxhdGVNYXRlcmlhbChuYW1lLCB0aGlzLmdldFNjZW5lKCkpLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2VyaWFsaXplKCk6IHVua25vd24ge1xyXG4gICAgICAgIGNvbnN0IHNlcmlhbGl6YXRpb25PYmplY3QgPSBTZXJpYWxpemF0aW9uSGVscGVyLlNlcmlhbGl6ZSh0aGlzKTtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmN1c3RvbVR5cGUgPSBcIkJBQllMT04uTVJETEZyb250cGxhdGVNYXRlcmlhbFwiO1xyXG4gICAgICAgIHJldHVybiBzZXJpYWxpemF0aW9uT2JqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRDbGFzc05hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJNUkRMRnJvbnRwbGF0ZU1hdGVyaWFsXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhdGljc1xyXG4gICAgcHVibGljIHN0YXRpYyBvdmVycmlkZSBQYXJzZShzb3VyY2U6IGFueSwgc2NlbmU6IFNjZW5lLCByb290VXJsOiBzdHJpbmcpOiBNUkRMRnJvbnRwbGF0ZU1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gU2VyaWFsaXphdGlvbkhlbHBlci5QYXJzZSgoKSA9PiBuZXcgTVJETEZyb250cGxhdGVNYXRlcmlhbChzb3VyY2UubmFtZSwgc2NlbmUpLCBzb3VyY2UsIHNjZW5lLCByb290VXJsKTtcclxuICAgIH1cclxufVxyXG5cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLk1SRExGcm9udHBsYXRlTWF0ZXJpYWxcIiwgTVJETEZyb250cGxhdGVNYXRlcmlhbCk7XHJcbiIsImltcG9ydCB0eXBlIHsgQWJzdHJhY3RNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL2Fic3RyYWN0TWVzaFwiO1xyXG5pbXBvcnQgdHlwZSB7IEJhc2VUZXh0dXJlIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL1RleHR1cmVzL2Jhc2VUZXh0dXJlXCI7XHJcbmltcG9ydCB0eXBlIHsgSUFuaW1hdGFibGUgfSBmcm9tIFwiY29yZS9BbmltYXRpb25zL2FuaW1hdGFibGUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB0eXBlIHsgSUVmZmVjdENyZWF0aW9uT3B0aW9ucyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9lZmZlY3RcIjtcclxuaW1wb3J0IHR5cGUgeyBNYXRyaXggfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IE1lc2ggfSBmcm9tIFwiY29yZS9NZXNoZXMvbWVzaFwiO1xyXG5pbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcbmltcG9ydCB0eXBlIHsgU3ViTWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9zdWJNZXNoXCI7XHJcblxyXG5pbXBvcnQgeyBDb2xvcjQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbG9yXCI7XHJcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCJjb3JlL0VuZ2luZXMvY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IEVmZmVjdEZhbGxiYWNrcyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9lZmZlY3RGYWxsYmFja3NcIjtcclxuaW1wb3J0IHsgTWF0ZXJpYWxEZWZpbmVzIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL21hdGVyaWFsRGVmaW5lc1wiO1xyXG5pbXBvcnQgeyBQdXNoTWF0ZXJpYWwgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvcHVzaE1hdGVyaWFsXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBzZXJpYWxpemUgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnNcIjtcclxuaW1wb3J0IHsgU2VyaWFsaXphdGlvbkhlbHBlciB9IGZyb20gXCJjb3JlL01pc2MvZGVjb3JhdG9ycy5zZXJpYWxpemF0aW9uXCI7XHJcbmltcG9ydCB7IFZlcnRleEJ1ZmZlciB9IGZyb20gXCJjb3JlL0J1ZmZlcnMvYnVmZmVyXCI7XHJcblxyXG5pbXBvcnQgXCIuL3NoYWRlcnMvbXJkbElubmVycXVhZC5mcmFnbWVudFwiO1xyXG5pbXBvcnQgXCIuL3NoYWRlcnMvbXJkbElubmVycXVhZC52ZXJ0ZXhcIjtcclxuaW1wb3J0IHsgSGFuZGxlRmFsbGJhY2tzRm9yU2hhZG93cywgUHJlcGFyZUF0dHJpYnV0ZXNGb3JJbnN0YW5jZXMsIFByZXBhcmVEZWZpbmVzRm9yQXR0cmlidXRlcywgUHJlcGFyZVVuaWZvcm1zQW5kU2FtcGxlcnNMaXN0IH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL21hdGVyaWFsSGVscGVyLmZ1bmN0aW9uc1wiO1xyXG5cclxuY2xhc3MgTVJETElubmVycXVhZE1hdGVyaWFsRGVmaW5lcyBleHRlbmRzIE1hdGVyaWFsRGVmaW5lcyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX25lZWROb3JtYWxzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9uZWVkVVZzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlYnVpbGQoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1SRExJbm5lcnF1YWRNYXRlcmlhbCBleHRlbmRzIFB1c2hNYXRlcmlhbCB7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY29sb3Igb2YgdGhlIGlubmVycXVhZC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgY29sb3I6IENvbG9yNCA9IG5ldyBDb2xvcjQoMSwgMSwgMSwgMC4wNSk7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY29ybmVyIHJhZGl1cyBvbiB0aGUgaW5uZXJxdWFkLiBJZiB0aGlzIHZhbHVlIGlzIGNoYW5nZWQsIHVwZGF0ZSB0aGUgbGluZVdpZHRoIHRvIG1hdGNoLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByYWRpdXMgPSAwLjEyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHdoZXRoZXIgdGhlIHJhZGl1cyBvZiB0aGUgaW5uZXJxdWFkIHNob3VsZCBiZSBmaXhlZC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZml4ZWRSYWRpdXMgPSB0cnVlO1xyXG5cclxuICAgIC8qKiBAaGlkZGVuICovXHJcbiAgICBwdWJsaWMgX2ZpbHRlcldpZHRoID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBnbG93IGZyYWN0aW9uIG9mIHRoZSBpbm5lcnF1YWQuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdsb3dGcmFjdGlvbiA9IDAuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgbWF4aW11bSBnbG93IGludGVuc2l0eSBvZiB0aGUgaW5uZXJxdWFkLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBnbG93TWF4ID0gMC41O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBnbG93IGZhbGxvZmYgZWZmZWN0IG9mIHRoZSBpbm5lcnF1YWQuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGdsb3dGYWxsb2ZmID0gMi4wO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgc2NlbmU6IFNjZW5lKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSwgc2NlbmUpO1xyXG4gICAgICAgIHRoaXMuYWxwaGFNb2RlID0gQ29uc3RhbnRzLkFMUEhBX0NPTUJJTkU7XHJcbiAgICAgICAgdGhpcy5iYWNrRmFjZUN1bGxpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgbmVlZEFscGhhQmxlbmRpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIG5lZWRBbHBoYVRlc3RpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRBbHBoYVRlc3RUZXh0dXJlKCk6IE51bGxhYmxlPEJhc2VUZXh0dXJlPiB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWV0aG9kc1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGlzUmVhZHlGb3JTdWJNZXNoKG1lc2g6IEFic3RyYWN0TWVzaCwgc3ViTWVzaDogU3ViTWVzaCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGRyYXdXcmFwcGVyID0gc3ViTWVzaC5fZHJhd1dyYXBwZXI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRnJvemVuKSB7XHJcbiAgICAgICAgICAgIGlmIChkcmF3V3JhcHBlci5lZmZlY3QgJiYgZHJhd1dyYXBwZXIuX3dhc1ByZXZpb3VzbHlSZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3ViTWVzaC5tYXRlcmlhbERlZmluZXMpIHtcclxuICAgICAgICAgICAgc3ViTWVzaC5tYXRlcmlhbERlZmluZXMgPSBuZXcgTVJETElubmVycXVhZE1hdGVyaWFsRGVmaW5lcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IDxNUkRMSW5uZXJxdWFkTWF0ZXJpYWxEZWZpbmVzPnN1Yk1lc2gubWF0ZXJpYWxEZWZpbmVzO1xyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5nZXRTY2VuZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNSZWFkeUZvclN1Yk1lc2goc3ViTWVzaCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBzY2VuZS5nZXRFbmdpbmUoKTtcclxuXHJcbiAgICAgICAgLy8gQXR0cmlic1xyXG4gICAgICAgIFByZXBhcmVEZWZpbmVzRm9yQXR0cmlidXRlcyhtZXNoLCBkZWZpbmVzLCB0cnVlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIEdldCBjb3JyZWN0IGVmZmVjdFxyXG4gICAgICAgIGlmIChkZWZpbmVzLmlzRGlydHkpIHtcclxuICAgICAgICAgICAgZGVmaW5lcy5tYXJrQXNQcm9jZXNzZWQoKTtcclxuXHJcbiAgICAgICAgICAgIHNjZW5lLnJlc2V0Q2FjaGVkTWF0ZXJpYWwoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrc1xyXG4gICAgICAgICAgICBjb25zdCBmYWxsYmFja3MgPSBuZXcgRWZmZWN0RmFsbGJhY2tzKCk7XHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLkZPRykge1xyXG4gICAgICAgICAgICAgICAgZmFsbGJhY2tzLmFkZEZhbGxiYWNrKDEsIFwiRk9HXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBIYW5kbGVGYWxsYmFja3NGb3JTaGFkb3dzKGRlZmluZXMsIGZhbGxiYWNrcyk7XHJcblxyXG4gICAgICAgICAgICBkZWZpbmVzLklNQUdFUFJPQ0VTU0lOR1BPU1RQUk9DRVNTID0gc2NlbmUuaW1hZ2VQcm9jZXNzaW5nQ29uZmlndXJhdGlvbi5hcHBseUJ5UG9zdFByb2Nlc3M7XHJcblxyXG4gICAgICAgICAgICAvL0F0dHJpYnV0ZXNcclxuICAgICAgICAgICAgY29uc3QgYXR0cmlicyA9IFtWZXJ0ZXhCdWZmZXIuUG9zaXRpb25LaW5kXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLk5PUk1BTCkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5Ob3JtYWxLaW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuVVYxKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLlVWS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlVWMikge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5VVjJLaW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuVkVSVEVYQ09MT1IpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuQ29sb3JLaW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuVEFOR0VOVCkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5UYW5nZW50S2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFByZXBhcmVBdHRyaWJ1dGVzRm9ySW5zdGFuY2VzKGF0dHJpYnMsIGRlZmluZXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gTGVnYWN5IGJyb3dzZXIgcGF0Y2hcclxuICAgICAgICAgICAgY29uc3Qgc2hhZGVyTmFtZSA9IFwibXJkbElubmVycXVhZFwiO1xyXG4gICAgICAgICAgICBjb25zdCBqb2luID0gZGVmaW5lcy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBbXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkXCIsXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkVmlld1wiLFxyXG4gICAgICAgICAgICAgICAgXCJ3b3JsZFZpZXdQcm9qZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcInZpZXdcIixcclxuICAgICAgICAgICAgICAgIFwicHJvamVjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJ2aWV3UHJvamVjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJjYW1lcmFQb3NpdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJfQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9GaXhlZF9SYWRpdXNfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9GaWx0ZXJfV2lkdGhfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9HbG93X0ZyYWN0aW9uX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfR2xvd19NYXhfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9HbG93X0ZhbGxvZmZfXCIsXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCB1bmlmb3JtQnVmZmVyczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgICAgIFByZXBhcmVVbmlmb3Jtc0FuZFNhbXBsZXJzTGlzdCg8SUVmZmVjdENyZWF0aW9uT3B0aW9ucz57XHJcbiAgICAgICAgICAgICAgICB1bmlmb3Jtc05hbWVzOiB1bmlmb3JtcyxcclxuICAgICAgICAgICAgICAgIHVuaWZvcm1CdWZmZXJzTmFtZXM6IHVuaWZvcm1CdWZmZXJzLFxyXG4gICAgICAgICAgICAgICAgc2FtcGxlcnM6IHNhbXBsZXJzLFxyXG4gICAgICAgICAgICAgICAgZGVmaW5lczogZGVmaW5lcyxcclxuICAgICAgICAgICAgICAgIG1heFNpbXVsdGFuZW91c0xpZ2h0czogNCxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzdWJNZXNoLnNldEVmZmVjdChcclxuICAgICAgICAgICAgICAgIHNjZW5lLmdldEVuZ2luZSgpLmNyZWF0ZUVmZmVjdChcclxuICAgICAgICAgICAgICAgICAgICBzaGFkZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIDxJRWZmZWN0Q3JlYXRpb25PcHRpb25zPntcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogYXR0cmlicyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXNOYW1lczogdW5pZm9ybXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaWZvcm1CdWZmZXJzTmFtZXM6IHVuaWZvcm1CdWZmZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYW1wbGVyczogc2FtcGxlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZXM6IGpvaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrczogZmFsbGJhY2tzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNvbXBpbGVkOiB0aGlzLm9uQ29tcGlsZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3I6IHRoaXMub25FcnJvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhQYXJhbWV0ZXJzOiB7IG1heFNpbXVsdGFuZW91c0xpZ2h0czogNCB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZW5naW5lXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgZGVmaW5lc1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXN1Yk1lc2guZWZmZWN0IHx8ICFzdWJNZXNoLmVmZmVjdC5pc1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGVmaW5lcy5fcmVuZGVySWQgPSBzY2VuZS5nZXRSZW5kZXJJZCgpO1xyXG4gICAgICAgIGRyYXdXcmFwcGVyLl93YXNQcmV2aW91c2x5UmVhZHkgPSB0cnVlO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgYmluZEZvclN1Yk1lc2god29ybGQ6IE1hdHJpeCwgbWVzaDogTWVzaCwgc3ViTWVzaDogU3ViTWVzaCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5nZXRTY2VuZSgpO1xyXG5cclxuICAgICAgICBjb25zdCBkZWZpbmVzID0gPE1SRExJbm5lcnF1YWRNYXRlcmlhbERlZmluZXM+c3ViTWVzaC5tYXRlcmlhbERlZmluZXM7XHJcbiAgICAgICAgaWYgKCFkZWZpbmVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IHN1Yk1lc2guZWZmZWN0O1xyXG4gICAgICAgIGlmICghZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdCA9IGVmZmVjdDtcclxuXHJcbiAgICAgICAgLy8gTWF0cmljZXNcclxuICAgICAgICB0aGlzLmJpbmRPbmx5V29ybGRNYXRyaXgod29ybGQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRNYXRyaXgoXCJ2aWV3UHJvamVjdGlvblwiLCBzY2VuZS5nZXRUcmFuc2Zvcm1NYXRyaXgoKSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjMoXCJjYW1lcmFQb3NpdGlvblwiLCBzY2VuZS5hY3RpdmVDYW1lcmEhLnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gXCJDb2xvclwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldERpcmVjdENvbG9yNChcIl9Db2xvcl9cIiwgdGhpcy5jb2xvcik7XHJcblxyXG4gICAgICAgIC8vIFwiU2hhcGVcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfXCIsIHRoaXMucmFkaXVzKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRml4ZWRfUmFkaXVzX1wiLCB0aGlzLmZpeGVkUmFkaXVzID8gMS4wIDogMC4wKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRmlsdGVyX1dpZHRoX1wiLCB0aGlzLl9maWx0ZXJXaWR0aCk7XHJcblxyXG4gICAgICAgIC8vIFwiR2xvd1wiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0dsb3dfRnJhY3Rpb25fXCIsIHRoaXMuZ2xvd0ZyYWN0aW9uKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfR2xvd19NYXhfXCIsIHRoaXMuZ2xvd01heCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0dsb3dfRmFsbG9mZl9cIiwgdGhpcy5nbG93RmFsbG9mZik7XHJcblxyXG4gICAgICAgIHRoaXMuX2FmdGVyQmluZChtZXNoLCB0aGlzLl9hY3RpdmVFZmZlY3QsIHN1Yk1lc2gpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBsaXN0IG9mIGFuaW1hdGFibGVzIGluIHRoZSBtYXRlcmlhbC5cclxuICAgICAqIEByZXR1cm5zIHRoZSBsaXN0IG9mIGFuaW1hdGFibGVzIG9iamVjdCB1c2VkIGluIHRoZSBtYXRlcmlhbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0QW5pbWF0YWJsZXMoKTogSUFuaW1hdGFibGVbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKGZvcmNlRGlzcG9zZUVmZmVjdD86IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKGZvcmNlRGlzcG9zZUVmZmVjdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGNsb25lKG5hbWU6IHN0cmluZyk6IE1SRExJbm5lcnF1YWRNYXRlcmlhbCB7XHJcbiAgICAgICAgcmV0dXJuIFNlcmlhbGl6YXRpb25IZWxwZXIuQ2xvbmUoKCkgPT4gbmV3IE1SRExJbm5lcnF1YWRNYXRlcmlhbChuYW1lLCB0aGlzLmdldFNjZW5lKCkpLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2VyaWFsaXplKCk6IHVua25vd24ge1xyXG4gICAgICAgIGNvbnN0IHNlcmlhbGl6YXRpb25PYmplY3QgPSBTZXJpYWxpemF0aW9uSGVscGVyLlNlcmlhbGl6ZSh0aGlzKTtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmN1c3RvbVR5cGUgPSBcIkJBQllMT04uTVJETElubmVycXVhZE1hdGVyaWFsXCI7XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6YXRpb25PYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIk1SRExJbm5lcnF1YWRNYXRlcmlhbFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0YXRpY3NcclxuICAgIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgUGFyc2Uoc291cmNlOiBhbnksIHNjZW5lOiBTY2VuZSwgcm9vdFVybDogc3RyaW5nKTogTVJETElubmVycXVhZE1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gU2VyaWFsaXphdGlvbkhlbHBlci5QYXJzZSgoKSA9PiBuZXcgTVJETElubmVycXVhZE1hdGVyaWFsKHNvdXJjZS5uYW1lLCBzY2VuZSksIHNvdXJjZSwgc2NlbmUsIHJvb3RVcmwpO1xyXG4gICAgfVxyXG59XHJcblxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuTVJETElubmVycXVhZE1hdGVyaWFsXCIsIE1SRExJbm5lcnF1YWRNYXRlcmlhbCk7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xyXG5pbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB7IFNlcmlhbGl6YXRpb25IZWxwZXIgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnMuc2VyaWFsaXphdGlvblwiO1xyXG5pbXBvcnQgdHlwZSB7IE1hdHJpeCB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB7IFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IElBbmltYXRhYmxlIH0gZnJvbSBcImNvcmUvQW5pbWF0aW9ucy9hbmltYXRhYmxlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgdHlwZSB7IEJhc2VUZXh0dXJlIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL1RleHR1cmVzL2Jhc2VUZXh0dXJlXCI7XHJcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvVGV4dHVyZXMvdGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBNYXRlcmlhbERlZmluZXMgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvbWF0ZXJpYWxEZWZpbmVzXCI7XHJcbmltcG9ydCB0eXBlIHsgSUVmZmVjdENyZWF0aW9uT3B0aW9ucyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9lZmZlY3RcIjtcclxuaW1wb3J0IHsgUHVzaE1hdGVyaWFsIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL3B1c2hNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBWZXJ0ZXhCdWZmZXIgfSBmcm9tIFwiY29yZS9CdWZmZXJzL2J1ZmZlclwiO1xyXG5pbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBTdWJNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL3N1Yk1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBDb2xvcjQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbG9yXCI7XHJcbmltcG9ydCB7IEVmZmVjdEZhbGxiYWNrcyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9lZmZlY3RGYWxsYmFja3NcIjtcclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcImNvcmUvRW5naW5lcy9jb25zdGFudHNcIjtcclxuXHJcbmltcG9ydCBcIi4vc2hhZGVycy9tcmRsU2xpZGVyQmFyLmZyYWdtZW50XCI7XHJcbmltcG9ydCBcIi4vc2hhZGVycy9tcmRsU2xpZGVyQmFyLnZlcnRleFwiO1xyXG5pbXBvcnQgeyBIYW5kbGVGYWxsYmFja3NGb3JTaGFkb3dzLCBQcmVwYXJlQXR0cmlidXRlc0Zvckluc3RhbmNlcywgUHJlcGFyZURlZmluZXNGb3JBdHRyaWJ1dGVzLCBQcmVwYXJlVW5pZm9ybXNBbmRTYW1wbGVyc0xpc3QgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvbWF0ZXJpYWxIZWxwZXIuZnVuY3Rpb25zXCI7XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmNsYXNzIE1SRExTbGlkZXJCYXJNYXRlcmlhbERlZmluZXMgZXh0ZW5kcyBNYXRlcmlhbERlZmluZXMge1xyXG4gICAgLypcclxuICAgICAgICBcIlNLWV9FTkFCTEVEXCIsIFwiQkxPQl9FTkFCTEVfMlwiLCBcIklSSURFU0NFTkNFX0VOQUJMRURcIlxyXG4gICAgKi9cclxuICAgIHB1YmxpYyBTS1lfRU5BQkxFRCA9IHRydWU7XHJcbiAgICBwdWJsaWMgQkxPQl9FTkFCTEVfMiA9IHRydWU7XHJcbiAgICBwdWJsaWMgSVJJREVTQ0VOQ0VfRU5BQkxFRCA9IHRydWU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLl9uZWVkTm9ybWFscyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbmVlZFVWcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWJ1aWxkKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIHJlbmRlciBTbGlkZXIgQmFyIG1hdGVyaWFsIHdpdGggTVJETFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1SRExTbGlkZXJCYXJNYXRlcmlhbCBleHRlbmRzIFB1c2hNYXRlcmlhbCB7XHJcbiAgICAvKipcclxuICAgICAqIFVSTCBwb2ludGluZyB0byB0aGUgdGV4dHVyZSB1c2VkIHRvIGRlZmluZSB0aGUgY29sb3JpbmcgZm9yIHRoZSBJcmlkZXNjZW50IE1hcCBlZmZlY3QuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQkxVRV9HUkFESUVOVF9URVhUVVJFX1VSTCA9IFwiaHR0cHM6Ly9hc3NldHMuYmFieWxvbmpzLmNvbS9tZXNoZXMvTVJUSy9NUkRML21ydGstbXJkbC1ibHVlLWdyYWRpZW50LnBuZ1wiO1xyXG4gICAgcHJpdmF0ZSBfYmx1ZUdyYWRpZW50VGV4dHVyZTogVGV4dHVyZTtcclxuICAgIHByaXZhdGUgX2RlY2FsVGV4dHVyZTogVGV4dHVyZTtcclxuICAgIHByaXZhdGUgX3JlZmxlY3Rpb25NYXBUZXh0dXJlOiBUZXh0dXJlO1xyXG4gICAgcHJpdmF0ZSBfaW5kaXJlY3RFbnZUZXh0dXJlOiBUZXh0dXJlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBjb3JuZXIgUmFkaXVzIG9uIHRoZSBzbGlkZXIgYmFyLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByYWRpdXMgPSAwLjY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIEJldmVsIEZyb250IG9uIHRoZSBzbGlkZXIgYmFyLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBiZXZlbEZyb250ID0gMC42O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBCZXZlbCBGcm9udCBTdHJldGNoIG9uIHRoZSBzbGlkZXIgYmFyLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBiZXZlbEZyb250U3RyZXRjaCA9IDAuMDc3O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBCZXZlbCBCYWNrIG9uIHRoZSBzbGlkZXIgYmFyLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBiZXZlbEJhY2sgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBCZXZlbCBCYWNrIFN0cmV0Y2ggb24gdGhlIHNsaWRlciBiYXIuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJldmVsQmFja1N0cmV0Y2ggPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSB0b3AgbGVmdCBSYWRpaSBNdWx0aXBsaWVyLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByYWRpdXNUb3BMZWZ0ID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSB0b3AgbGVmdCBSYWRpaSBNdWx0aXBsaWVyLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByYWRpdXNUb3BSaWdodCA9IDEuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIGxlZnQgUmFkaWkgTXVsdGlwbGllci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmFkaXVzQm90dG9tTGVmdCA9IDEuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIGxlZnQgUmFkaWkgTXVsdGlwbGllci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmFkaXVzQm90dG9tUmlnaHQgPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgd2hldGhlciBCdWxnZSBpcyBlbmFibGVkLlxyXG4gICAgICogRGVmYXVsdCBpcyBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYnVsZ2VFbmFibGVkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIEJ1bGdlIEhlaWdodC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYnVsZ2VIZWlnaHQgPSAtMC4zMjM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIEJ1bGdlIFJhZGl1cy5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYnVsZ2VSYWRpdXMgPSAwLjczO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBTdW4gSW50ZW5zaXR5LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBzdW5JbnRlbnNpdHkgPSAxLjEwMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgU3VuIFRoZXRhLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBzdW5UaGV0YSA9IDAuNzY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIFN1biBQaGkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHN1blBoaSA9IDAuNTI2O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBJbmRpcmVjdCBEaWZmdXNlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBpbmRpcmVjdERpZmZ1c2UgPSAwLjY1ODtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYmFzZSBhbGJlZG8uXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGFsYmVkbyA9IG5ldyBDb2xvcjQoMC4wMTE3NjQ3LCAwLjUwNTg4MiwgMC45OTYwNzgsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBTcGVjdWxhciB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc3BlY3VsYXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBTaGluaW5lc3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHNoaW5pbmVzcyA9IDEwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBTaGFycG5lc3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHNoYXJwbmVzcyA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIFN1YnN1cmZhY2UgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHN1YnN1cmZhY2UgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsZWZ0IGdyYWRpZW50IGNvbG9yLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBsZWZ0R3JhZGllbnRDb2xvciA9IG5ldyBDb2xvcjQoMC4wMTE3NjQ3LCAwLjUwNTg4MiwgMC45OTYwNzgsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSByaWdodCBncmFkaWVudCBjb2xvci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmlnaHRHcmFkaWVudENvbG9yID0gbmV3IENvbG9yNCgwLjAxMTc2NDcsIDAuNTA1ODgyLCAwLjk5NjA3OCwgMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHJlZmxlY3Rpb24gdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJlZmxlY3Rpb24gPSAwLjc0OTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZnJvbnQgcmVmbGVjdCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZnJvbnRSZWZsZWN0ID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZWRnZSByZWZsZWN0IHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBlZGdlUmVmbGVjdCA9IDAuMDk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHBvd2VyIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBwb3dlciA9IDguMTM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHNreSBjb2xvci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc2t5Q29sb3IgPSBuZXcgQ29sb3I0KDAuMDExNzY0NywgMC45NjQ3MDYsIDAuOTk2MDc4LCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaG9yaXpvbiBjb2xvci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaG9yaXpvbkNvbG9yID0gbmV3IENvbG9yNCgwLjAxMTc2NDcsIDAuMzMzMzMzLCAwLjk5NjA3OCwgMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGdyb3VuZCBjb2xvci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3I0KDAsIDAuMjU0OTAyLCAwLjk5NjA3OCwgMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGhvcml6b24gcG93ZXIgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGhvcml6b25Qb3dlciA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZpbmdlciBvY2NsdXNpb24gd2lkdGggdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHdpZHRoID0gMC4wMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZmluZ2VyIG9jY2x1c2lvbiBmdXp6IHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBmdXp6ID0gMC41O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBtaW5pbXVtIGZpbmdlciBvY2NsdXNpb24gZnV6eiB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgbWluRnV6eiA9IDAuMDAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBmaW5nZXIgb2NjbHVzaW9uIGNsaXAgZmFkZSB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgY2xpcEZhZGUgPSAwLjAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBodWUgc2hpZnQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGh1ZVNoaWZ0ID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgc2F0dXJhdGlvbiBzaGlmdCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc2F0dXJhdGlvblNoaWZ0ID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdmFsdWUgc2hpZnQuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHZhbHVlU2hpZnQgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgaG92ZXIgZ2xvdyBlZmZlY3QuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKDAsIDAsIDAuMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGludGVuc2l0eSBvZiB0aGUgaG92ZXIgZ2xvdyBlZmZlY3QuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JJbnRlbnNpdHkgPSAwLjU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG5lYXIgc2l6ZSBvZiB0aGUgaG92ZXIgZ2xvdyBlZmZlY3QuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JOZWFyU2l6ZSA9IDAuMDE7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZmFyIHNpemUgb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iRmFyU2l6ZSA9IDAuMDM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGRpc3RhbmNlIGNvbnNpZGVyZWQgXCJuZWFyXCIgdG8gdGhlIG1lc2gsIHdoaWNoIGNvbnRyb2xzIHRoZSBzaXplIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCAoc2VlIGJsb2JOZWFyU2l6ZSkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JOZWFyRGlzdGFuY2UgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBkaXN0YW5jZSBjb25zaWRlcmVkIFwiZmFyXCIgZnJvbSB0aGUgbWVzaCwgd2hpY2ggY29udHJvbHMgdGhlIHNpemUgb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0IChzZWUgYmxvYkZhclNpemUpLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iRmFyRGlzdGFuY2UgPSAwLjA4O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsZW5ndGggb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0IGZhZGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JGYWRlTGVuZ3RoID0gMC41NzY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHByb2dyZXNzIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCBzZWxlY3Rpb24gYW5pbWF0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxlZnQgcG9pbnRlciAoMC4wIC0gMS4wKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYlB1bHNlID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgb3BhY2l0eSBvZiB0aGUgaG92ZXIgZ2xvdyBlZmZlY3QgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCBwb2ludGVyICgwLjAgLSAxLjApLiBEZWZhdWx0IGlzIDAuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JGYWRlID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iUG9zaXRpb24yID0gbmV3IFZlY3RvcjMoMC4yLCAwLCAwLjEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzaXplIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCB3aGVuIHRoZSByaWdodCBwb2ludGVyIGlzIGNvbnNpZGVyZWQgXCJuZWFyXCIgdG8gdGhlIG1lc2ggKHNlZSBibG9iTmVhckRpc3RhbmNlKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYk5lYXJTaXplMiA9IDAuMDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHByb2dyZXNzIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCBzZWxlY3Rpb24gYW5pbWF0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJpZ2h0IHBvaW50ZXIgKDAuMCAtIDEuMCkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JQdWxzZTIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBvcGFjaXR5IG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSByaWdodCBwb2ludGVyICgwLjAgLSAxLjApLiBEZWZhdWx0IGlzIDEuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JGYWRlMiA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRleHR1cmUgb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iVGV4dHVyZSA9IG5ldyBUZXh0dXJlKFwiXCIsIHRoaXMuZ2V0U2NlbmUoKSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZpbmdlciBwb3NpdGlvbiBmb3IgbGVmdCBpbmRleC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgbGVmdEluZGV4UG9zaXRpb24gPSBuZXcgVmVjdG9yMygwLCAwLCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZmluZ2VyIHBvc2l0aW9uIGZvciByaWdodCBpbmRleC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmlnaHRJbmRleFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoLTEsIC0xLCAtMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZpbmdlciBwb3NpdGlvbiBmb3IgbGVmdCBpbmRleCBtaWRkbGUgcG9zaXRpb24uXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGxlZnRJbmRleE1pZGRsZVBvc2l0aW9uID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZpbmdlciBwb3NpdGlvbiBmb3IgcmlnaHQgaW5kZXggbWlkZGxlIHBvc2l0aW9uLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByaWdodEluZGV4TWlkZGxlUG9zaXRpb24gPSBuZXcgVmVjdG9yMygwLCAwLCAwKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgRGVjYWwgU2NsZSBmb3IgWFkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGRlY2FsU2NhbGVYWSA9IG5ldyBWZWN0b3IyKDEuNSwgMS41KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyBkZWNhbEZyb250T25seVxyXG4gICAgICogRGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGRlY2FsRnJvbnRPbmx5ID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgUmltIExpZ2h0IGludGVuc2l0eS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmltSW50ZW5zaXR5ID0gMC4yODc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIFJpbSBMaWdodCBodWUgc2hpZnQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJpbUh1ZVNoaWZ0ID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgUmltIExpZ2h0IHNhdHVyYXRpb24gc2hpZnQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJpbVNhdHVyYXRpb25TaGlmdCA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIFJpbSBMaWdodCB2YWx1ZSBzaGlmdC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmltVmFsdWVTaGlmdCA9IC0xO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBpbnRlbnNpdHkgb2YgdGhlIGlyaWRlc2NlbmNlIGVmZmVjdC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaXJpZGVzY2VuY2VJbnRlbnNpdHkgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1c2VHbG9iYWxMZWZ0SW5kZXggPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVzZUdsb2JhbFJpZ2h0SW5kZXggPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdsb2JhbExlZnRJbmRleFRpcFByb3hpbWl0eSA9IDAuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2xvYmFsUmlnaHRJbmRleFRpcFByb3hpbWl0eSA9IDAuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2xvYmFsTGVmdEluZGV4VGlwUG9zaXRpb24gPSBuZXcgVmVjdG9yNCgwLjUsIDAuMCwgLTAuNTUsIDEuMCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdsb2JhUmlnaHRJbmRleFRpcFBvc2l0aW9uID0gbmV3IFZlY3RvcjQoMC4wLCAwLjAsIDAuMCwgMS4wKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2xvYmFsTGVmdFRodW1iVGlwUG9zaXRpb24gPSBuZXcgVmVjdG9yNCgwLjUsIDAuMCwgLTAuNTUsIDEuMCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdsb2JhbFJpZ2h0VGh1bWJUaXBQb3NpdGlvbiA9IG5ldyBWZWN0b3I0KDAuMCwgMC4wLCAwLjAsIDEuMCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdsb2JhbExlZnRJbmRleE1pZGRsZVBvc2l0aW9uID0gbmV3IFZlY3RvcjQoMC41LCAwLjAsIC0wLjU1LCAxLjApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnbG9iYWxSaWdodEluZGV4TWlkZGxlUG9zaXRpb24gPSBuZXcgVmVjdG9yNCgwLjAsIDAuMCwgMC4wLCAxLjApO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgc2NlbmU/OiBTY2VuZSkge1xyXG4gICAgICAgIHN1cGVyKG5hbWUsIHNjZW5lKTtcclxuICAgICAgICB0aGlzLmFscGhhTW9kZSA9IENvbnN0YW50cy5BTFBIQV9ESVNBQkxFO1xyXG4gICAgICAgIHRoaXMuYmFja0ZhY2VDdWxsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fYmx1ZUdyYWRpZW50VGV4dHVyZSA9IG5ldyBUZXh0dXJlKE1SRExTbGlkZXJCYXJNYXRlcmlhbC5CTFVFX0dSQURJRU5UX1RFWFRVUkVfVVJMLCB0aGlzLmdldFNjZW5lKCksIHRydWUsIGZhbHNlLCBUZXh0dXJlLk5FQVJFU1RfU0FNUExJTkdNT0RFKTtcclxuICAgICAgICB0aGlzLl9kZWNhbFRleHR1cmUgPSBuZXcgVGV4dHVyZShcIlwiLCB0aGlzLmdldFNjZW5lKCkpO1xyXG4gICAgICAgIHRoaXMuX3JlZmxlY3Rpb25NYXBUZXh0dXJlID0gbmV3IFRleHR1cmUoXCJcIiwgdGhpcy5nZXRTY2VuZSgpKTtcclxuICAgICAgICB0aGlzLl9pbmRpcmVjdEVudlRleHR1cmUgPSBuZXcgVGV4dHVyZShcIlwiLCB0aGlzLmdldFNjZW5lKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBuZWVkQWxwaGFCbGVuZGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIG5lZWRBbHBoYVRlc3RpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRBbHBoYVRlc3RUZXh0dXJlKCk6IE51bGxhYmxlPEJhc2VUZXh0dXJlPiB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWV0aG9kc1xyXG4gICAgcHVibGljIG92ZXJyaWRlIGlzUmVhZHlGb3JTdWJNZXNoKG1lc2g6IEFic3RyYWN0TWVzaCwgc3ViTWVzaDogU3ViTWVzaCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGRyYXdXcmFwcGVyID0gc3ViTWVzaC5fZHJhd1dyYXBwZXI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRnJvemVuKSB7XHJcbiAgICAgICAgICAgIGlmIChkcmF3V3JhcHBlci5lZmZlY3QgJiYgZHJhd1dyYXBwZXIuX3dhc1ByZXZpb3VzbHlSZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3ViTWVzaC5tYXRlcmlhbERlZmluZXMpIHtcclxuICAgICAgICAgICAgc3ViTWVzaC5tYXRlcmlhbERlZmluZXMgPSBuZXcgTVJETFNsaWRlckJhck1hdGVyaWFsRGVmaW5lcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IDxNUkRMU2xpZGVyQmFyTWF0ZXJpYWxEZWZpbmVzPnN1Yk1lc2gubWF0ZXJpYWxEZWZpbmVzO1xyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5nZXRTY2VuZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNSZWFkeUZvclN1Yk1lc2goc3ViTWVzaCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBzY2VuZS5nZXRFbmdpbmUoKTtcclxuXHJcbiAgICAgICAgLy8gQXR0cmlic1xyXG4gICAgICAgIFByZXBhcmVEZWZpbmVzRm9yQXR0cmlidXRlcyhtZXNoLCBkZWZpbmVzLCBmYWxzZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyBHZXQgY29ycmVjdCBlZmZlY3RcclxuICAgICAgICBpZiAoZGVmaW5lcy5pc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIGRlZmluZXMubWFya0FzUHJvY2Vzc2VkKCk7XHJcblxyXG4gICAgICAgICAgICBzY2VuZS5yZXNldENhY2hlZE1hdGVyaWFsKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBGYWxsYmFja3NcclxuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tzID0gbmV3IEVmZmVjdEZhbGxiYWNrcygpO1xyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5GT0cpIHtcclxuICAgICAgICAgICAgICAgIGZhbGxiYWNrcy5hZGRGYWxsYmFjaygxLCBcIkZPR1wiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgSGFuZGxlRmFsbGJhY2tzRm9yU2hhZG93cyhkZWZpbmVzLCBmYWxsYmFja3MpO1xyXG5cclxuICAgICAgICAgICAgZGVmaW5lcy5JTUFHRVBST0NFU1NJTkdQT1NUUFJPQ0VTUyA9IHNjZW5lLmltYWdlUHJvY2Vzc2luZ0NvbmZpZ3VyYXRpb24uYXBwbHlCeVBvc3RQcm9jZXNzO1xyXG5cclxuICAgICAgICAgICAgLy9BdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnMgPSBbVmVydGV4QnVmZmVyLlBvc2l0aW9uS2luZF07XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5OT1JNQUwpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuTm9ybWFsS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlVWMSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5VVktpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5VVjIpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVVYyS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlZFUlRFWENPTE9SKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLkNvbG9yS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlRBTkdFTlQpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVGFuZ2VudEtpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQcmVwYXJlQXR0cmlidXRlc0Zvckluc3RhbmNlcyhhdHRyaWJzLCBkZWZpbmVzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIExlZ2FjeSBicm93c2VyIHBhdGNoXHJcbiAgICAgICAgICAgIGNvbnN0IHNoYWRlck5hbWUgPSBcIm1yZGxTbGlkZXJCYXJcIjtcclxuICAgICAgICAgICAgY29uc3Qgam9pbiA9IGRlZmluZXMudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1zID0gW1xyXG4gICAgICAgICAgICAgICAgXCJ3b3JsZFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ2aWV3UHJvamVjdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJjYW1lcmFQb3NpdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmFkaXVzX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmV2ZWxfRnJvbnRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CZXZlbF9Gcm9udF9TdHJldGNoX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmV2ZWxfQmFja19cIixcclxuICAgICAgICAgICAgICAgIFwiX0JldmVsX0JhY2tfU3RyZXRjaF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JhZGl1c19Ub3BfTGVmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JhZGl1c19Ub3BfUmlnaHRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfQm90dG9tX0xlZnRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfQm90dG9tX1JpZ2h0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQnVsZ2VfRW5hYmxlZF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0J1bGdlX0hlaWdodF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0J1bGdlX1JhZGl1c19cIixcclxuICAgICAgICAgICAgICAgIFwiX1N1bl9JbnRlbnNpdHlfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9TdW5fVGhldGFfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9TdW5fUGhpX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSW5kaXJlY3RfRGlmZnVzZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0FsYmVkb19cIixcclxuICAgICAgICAgICAgICAgIFwiX1NwZWN1bGFyX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU2hpbmluZXNzX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU2hhcnBuZXNzX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU3Vic3VyZmFjZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0xlZnRfQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SaWdodF9Db2xvcl9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JlZmxlY3Rpb25fXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Gcm9udF9SZWZsZWN0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfRWRnZV9SZWZsZWN0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUG93ZXJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Ta3lfQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Ib3Jpem9uX0NvbG9yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfR3JvdW5kX0NvbG9yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSG9yaXpvbl9Qb3dlcl9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JlZmxlY3Rpb25fTWFwX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSW5kaXJlY3RfRW52aXJvbm1lbnRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9XaWR0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Z1enpfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9NaW5fRnV6el9cIixcclxuICAgICAgICAgICAgICAgIFwiX0NsaXBfRmFkZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0h1ZV9TaGlmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1NhdHVyYXRpb25fU2hpZnRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9WYWx1ZV9TaGlmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfUG9zaXRpb25fXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0ludGVuc2l0eV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfTmVhcl9TaXplX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYXJfU2l6ZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfTmVhcl9EaXN0YW5jZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfRmFyX0Rpc3RhbmNlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYWRlX0xlbmd0aF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfUHVsc2VfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0ZhZGVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX1RleHR1cmVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX1Bvc2l0aW9uXzJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX05lYXJfU2l6ZV8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9QdWxzZV8yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYWRlXzJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9MZWZ0X0luZGV4X1Bvc19cIixcclxuICAgICAgICAgICAgICAgIFwiX1JpZ2h0X0luZGV4X1Bvc19cIixcclxuICAgICAgICAgICAgICAgIFwiX0xlZnRfSW5kZXhfTWlkZGxlX1Bvc19cIixcclxuICAgICAgICAgICAgICAgIFwiX1JpZ2h0X0luZGV4X01pZGRsZV9Qb3NfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9EZWNhbF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0RlY2FsX1NjYWxlX1hZX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfRGVjYWxfRnJvbnRfT25seV9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JpbV9JbnRlbnNpdHlfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SaW1fVGV4dHVyZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JpbV9IdWVfU2hpZnRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SaW1fU2F0dXJhdGlvbl9TaGlmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JpbV9WYWx1ZV9TaGlmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0lyaWRlc2NlbmNlX0ludGVuc2l0eV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0lyaWRlc2NlbmNlX1RleHR1cmVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIlVzZV9HbG9iYWxfTGVmdF9JbmRleFwiLFxyXG4gICAgICAgICAgICAgICAgXCJVc2VfR2xvYmFsX1JpZ2h0X0luZGV4XCIsXHJcbiAgICAgICAgICAgICAgICBcIkdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qb3NpdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJHbG9iYWxfUmlnaHRfSW5kZXhfVGlwX1Bvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIkdsb2JhbF9MZWZ0X1RodW1iX1RpcF9Qb3NpdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJHbG9iYWxfUmlnaHRfVGh1bWJfVGlwX1Bvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIkdsb2JhbF9MZWZ0X0luZGV4X01pZGRsZV9Qb3NpdGlvbjtcIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX1JpZ2h0X0luZGV4X01pZGRsZV9Qb3NpdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgXCJHbG9iYWxfTGVmdF9JbmRleF9UaXBfUHJveGltaXR5XCIsXHJcbiAgICAgICAgICAgICAgICBcIkdsb2JhbF9SaWdodF9JbmRleF9UaXBfUHJveGltaXR5XCIsXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZXJzOiBzdHJpbmdbXSA9IFtcIl9SaW1fVGV4dHVyZV9cIiwgXCJfSXJpZGVzY2VuY2VfVGV4dHVyZV9cIl07XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1CdWZmZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgUHJlcGFyZVVuaWZvcm1zQW5kU2FtcGxlcnNMaXN0KDxJRWZmZWN0Q3JlYXRpb25PcHRpb25zPntcclxuICAgICAgICAgICAgICAgIHVuaWZvcm1zTmFtZXM6IHVuaWZvcm1zLFxyXG4gICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICBzYW1wbGVyczogc2FtcGxlcnMsXHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzOiBkZWZpbmVzLFxyXG4gICAgICAgICAgICAgICAgbWF4U2ltdWx0YW5lb3VzTGlnaHRzOiA0LFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHN1Yk1lc2guc2V0RWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgc2NlbmUuZ2V0RW5naW5lKCkuY3JlYXRlRWZmZWN0KFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRlck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgPElFZmZlY3RDcmVhdGlvbk9wdGlvbnM+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtc05hbWVzOiB1bmlmb3JtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybUJ1ZmZlcnNOYW1lczogdW5pZm9ybUJ1ZmZlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZXJzOiBzYW1wbGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lczogam9pbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tzOiBmYWxsYmFja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29tcGlsZWQ6IHRoaXMub25Db21waWxlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogdGhpcy5vbkVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleFBhcmFtZXRlcnM6IHsgbWF4U2ltdWx0YW5lb3VzTGlnaHRzOiA0IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBlbmdpbmVcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWxDb250ZXh0XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghc3ViTWVzaC5lZmZlY3QgfHwgIXN1Yk1lc2guZWZmZWN0LmlzUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZWZpbmVzLl9yZW5kZXJJZCA9IHNjZW5lLmdldFJlbmRlcklkKCk7XHJcbiAgICAgICAgZHJhd1dyYXBwZXIuX3dhc1ByZXZpb3VzbHlSZWFkeSA9IHRydWU7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBiaW5kRm9yU3ViTWVzaCh3b3JsZDogTWF0cml4LCBtZXNoOiBNZXNoLCBzdWJNZXNoOiBTdWJNZXNoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IDxNUkRMU2xpZGVyQmFyTWF0ZXJpYWxEZWZpbmVzPnN1Yk1lc2gubWF0ZXJpYWxEZWZpbmVzO1xyXG4gICAgICAgIGlmICghZGVmaW5lcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlZmZlY3QgPSBzdWJNZXNoLmVmZmVjdDtcclxuICAgICAgICBpZiAoIWVmZmVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3QgPSBlZmZlY3Q7XHJcblxyXG4gICAgICAgIC8vIE1hdHJpY2VzXHJcbiAgICAgICAgdGhpcy5iaW5kT25seVdvcmxkTWF0cml4KHdvcmxkKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0TWF0cml4KFwidmlld1Byb2plY3Rpb25cIiwgdGhpcy5nZXRTY2VuZSgpLmdldFRyYW5zZm9ybU1hdHJpeCgpKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcImNhbWVyYVBvc2l0aW9uXCIsIHRoaXMuZ2V0U2NlbmUoKS5hY3RpdmVDYW1lcmEhLnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gXCJSb3VuZCBSZWN0XCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmFkaXVzX1wiLCB0aGlzLnJhZGl1cyk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0JldmVsX0Zyb250X1wiLCB0aGlzLmJldmVsRnJvbnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CZXZlbF9Gcm9udF9TdHJldGNoX1wiLCB0aGlzLmJldmVsRnJvbnRTdHJldGNoKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmV2ZWxfQmFja19cIiwgdGhpcy5iZXZlbEJhY2spO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CZXZlbF9CYWNrX1N0cmV0Y2hfXCIsIHRoaXMuYmV2ZWxCYWNrU3RyZXRjaCk7XHJcblxyXG4gICAgICAgIC8vIFwiUmFkaWkgTXVsdGlwbGllcnNcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfVG9wX0xlZnRfXCIsIHRoaXMucmFkaXVzVG9wTGVmdCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JhZGl1c19Ub3BfUmlnaHRfXCIsIHRoaXMucmFkaXVzVG9wUmlnaHQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfQm90dG9tX0xlZnRfXCIsIHRoaXMucmFkaXVzQm90dG9tTGVmdCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JhZGl1c19Cb3R0b21fUmlnaHRfXCIsIHRoaXMucmFkaXVzQm90dG9tUmlnaHQpO1xyXG5cclxuICAgICAgICAvLyBcIkJ1bGdlXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQnVsZ2VfRW5hYmxlZF9cIiwgdGhpcy5idWxnZUVuYWJsZWQgPyAxLjAgOiAwLjApO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CdWxnZV9IZWlnaHRfXCIsIHRoaXMuYnVsZ2VIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CdWxnZV9SYWRpdXNfXCIsIHRoaXMuYnVsZ2VSYWRpdXMpO1xyXG5cclxuICAgICAgICAvLyBcIlN1blwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1N1bl9JbnRlbnNpdHlfXCIsIHRoaXMuc3VuSW50ZW5zaXR5KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU3VuX1RoZXRhX1wiLCB0aGlzLnN1blRoZXRhKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU3VuX1BoaV9cIiwgdGhpcy5zdW5QaGkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9JbmRpcmVjdF9EaWZmdXNlX1wiLCB0aGlzLmluZGlyZWN0RGlmZnVzZSk7XHJcblxyXG4gICAgICAgIC8vIFwiRGlmZnVzZSBBbmQgU3BlY3VsYXJcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXREaXJlY3RDb2xvcjQoXCJfQWxiZWRvX1wiLCB0aGlzLmFsYmVkbyk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1NwZWN1bGFyX1wiLCB0aGlzLnNwZWN1bGFyKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU2hpbmluZXNzX1wiLCB0aGlzLnNoaW5pbmVzcyk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1NoYXJwbmVzc19cIiwgdGhpcy5zaGFycG5lc3MpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TdWJzdXJmYWNlX1wiLCB0aGlzLnN1YnN1cmZhY2UpO1xyXG5cclxuICAgICAgICAvLyBcIkdyYWRpZW50XCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX0xlZnRfQ29sb3JfXCIsIHRoaXMubGVmdEdyYWRpZW50Q29sb3IpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXREaXJlY3RDb2xvcjQoXCJfUmlnaHRfQ29sb3JfXCIsIHRoaXMucmlnaHRHcmFkaWVudENvbG9yKTtcclxuXHJcbiAgICAgICAgLy8gXCJSZWZsZWN0aW9uXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmVmbGVjdGlvbl9cIiwgdGhpcy5yZWZsZWN0aW9uKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRnJvbnRfUmVmbGVjdF9cIiwgdGhpcy5mcm9udFJlZmxlY3QpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9FZGdlX1JlZmxlY3RfXCIsIHRoaXMuZWRnZVJlZmxlY3QpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Qb3dlcl9cIiwgdGhpcy5wb3dlcik7XHJcblxyXG4gICAgICAgIC8vIFwiU2t5IEVudmlyb25tZW50XCJcclxuICAgICAgICAvL2RlZmluZSBTS1lfRU5BQkxFRCB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXREaXJlY3RDb2xvcjQoXCJfU2t5X0NvbG9yX1wiLCB0aGlzLnNreUNvbG9yKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX0hvcml6b25fQ29sb3JfXCIsIHRoaXMuaG9yaXpvbkNvbG9yKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX0dyb3VuZF9Db2xvcl9cIiwgdGhpcy5ncm91bmRDb2xvcik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0hvcml6b25fUG93ZXJfXCIsIHRoaXMuaG9yaXpvblBvd2VyKTtcclxuXHJcbiAgICAgICAgLy8gXCJNYXBwZWQgRW52aXJvbm1lbnRcIlxyXG4gICAgICAgIC8vZGVmaW5lIEVOVl9FTkFCTEUgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFRleHR1cmUoXCJfUmVmbGVjdGlvbl9NYXBfXCIsIHRoaXMuX3JlZmxlY3Rpb25NYXBUZXh0dXJlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VGV4dHVyZShcIl9JbmRpcmVjdF9FbnZpcm9ubWVudF9cIiwgdGhpcy5faW5kaXJlY3RFbnZUZXh0dXJlKTtcclxuXHJcbiAgICAgICAgLy8gXCJGaW5nZXJPY2NsdXNpb25cIlxyXG4gICAgICAgIC8vZGVmaW5lIE9DQ0xVU0lPTl9FTkFCTEVEIGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9XaWR0aF9cIiwgdGhpcy53aWR0aCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Z1enpfXCIsIHRoaXMuZnV6eik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX01pbl9GdXp6X1wiLCB0aGlzLm1pbkZ1enopO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9DbGlwX0ZhZGVfXCIsIHRoaXMuY2xpcEZhZGUpO1xyXG5cclxuICAgICAgICAvLyBcIlZpZXcgQmFzZWQgQ29sb3IgU2hpZnRcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9IdWVfU2hpZnRfXCIsIHRoaXMuaHVlU2hpZnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TYXR1cmF0aW9uX1NoaWZ0X1wiLCB0aGlzLnNhdHVyYXRpb25TaGlmdCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1ZhbHVlX1NoaWZ0X1wiLCB0aGlzLnZhbHVlU2hpZnQpO1xyXG5cclxuICAgICAgICAvLyBcIkJsb2JcIlxyXG4gICAgICAgIC8vZGVmaW5lIEJMT0JfRU5BQkxFIGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3IzKFwiX0Jsb2JfUG9zaXRpb25fXCIsIHRoaXMuYmxvYlBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9JbnRlbnNpdHlfXCIsIHRoaXMuYmxvYkludGVuc2l0eSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfTmVhcl9TaXplX1wiLCB0aGlzLmJsb2JOZWFyU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFyX1NpemVfXCIsIHRoaXMuYmxvYkZhclNpemUpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX05lYXJfRGlzdGFuY2VfXCIsIHRoaXMuYmxvYk5lYXJEaXN0YW5jZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFyX0Rpc3RhbmNlX1wiLCB0aGlzLmJsb2JGYXJEaXN0YW5jZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFkZV9MZW5ndGhfXCIsIHRoaXMuYmxvYkZhZGVMZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX1B1bHNlX1wiLCB0aGlzLmJsb2JQdWxzZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfRmFkZV9cIiwgdGhpcy5ibG9iRmFkZSk7XHJcblxyXG4gICAgICAgIC8vIFwiQmxvYiBUZXh0dXJlXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VGV4dHVyZShcIl9CbG9iX1RleHR1cmVfXCIsIHRoaXMuYmxvYlRleHR1cmUpO1xyXG5cclxuICAgICAgICAvLyBcIkJsb2IgMlwiXHJcbiAgICAgICAgLy9kZWZpbmUgQkxPQl9FTkFCTEVfMiB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3IzKFwiX0Jsb2JfUG9zaXRpb25fMl9cIiwgdGhpcy5ibG9iUG9zaXRpb24yKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9OZWFyX1NpemVfMl9cIiwgdGhpcy5ibG9iTmVhclNpemUyKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9QdWxzZV8yX1wiLCB0aGlzLmJsb2JQdWxzZTIpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0ZhZGVfMl9cIiwgdGhpcy5ibG9iRmFkZTIpO1xyXG5cclxuICAgICAgICAvLyBcIkZpbmdlciBQb3NpdGlvbnNcIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3IzKFwiX0xlZnRfSW5kZXhfUG9zX1wiLCB0aGlzLmxlZnRJbmRleFBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcIl9SaWdodF9JbmRleF9Qb3NfXCIsIHRoaXMucmlnaHRJbmRleFBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcIl9MZWZ0X0luZGV4X01pZGRsZV9Qb3NfXCIsIHRoaXMubGVmdEluZGV4TWlkZGxlUG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3IzKFwiX1JpZ2h0X0luZGV4X01pZGRsZV9Qb3NfXCIsIHRoaXMucmlnaHRJbmRleE1pZGRsZVBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gXCJEZWNhbCBUZXh0dXJlXCJcclxuICAgICAgICAvL2RlZmluZSBERUNBTF9FTkFCTEUgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFRleHR1cmUoXCJfRGVjYWxfXCIsIHRoaXMuX2RlY2FsVGV4dHVyZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjIoXCJfRGVjYWxfU2NhbGVfWFlfXCIsIHRoaXMuZGVjYWxTY2FsZVhZKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRGVjYWxfRnJvbnRfT25seV9cIiwgdGhpcy5kZWNhbEZyb250T25seSA/IDEuMCA6IDAuMCk7XHJcblxyXG4gICAgICAgIC8vIFwiUmltIExpZ2h0XCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmltX0ludGVuc2l0eV9cIiwgdGhpcy5yaW1JbnRlbnNpdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRUZXh0dXJlKFwiX1JpbV9UZXh0dXJlX1wiLCB0aGlzLl9ibHVlR3JhZGllbnRUZXh0dXJlKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmltX0h1ZV9TaGlmdF9cIiwgdGhpcy5yaW1IdWVTaGlmdCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JpbV9TYXR1cmF0aW9uX1NoaWZ0X1wiLCB0aGlzLnJpbVNhdHVyYXRpb25TaGlmdCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JpbV9WYWx1ZV9TaGlmdF9cIiwgdGhpcy5yaW1WYWx1ZVNoaWZ0KTtcclxuXHJcbiAgICAgICAgLy8gXCJJcmlkZXNjZW5jZVwiXHJcbiAgICAgICAgLy9kZWZpbmUgSVJJREVTQ0VOQ0VfRU5BQkxFRCB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfXCIsIHRoaXMuaXJpZGVzY2VuY2VJbnRlbnNpdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRUZXh0dXJlKFwiX0lyaWRlc2NlbmNlX1RleHR1cmVfXCIsIHRoaXMuX2JsdWVHcmFkaWVudFRleHR1cmUpO1xyXG5cclxuICAgICAgICAvLyBHbG9iYWwgaW5wdXRzXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiVXNlX0dsb2JhbF9MZWZ0X0luZGV4XCIsIHRoaXMudXNlR2xvYmFsTGVmdEluZGV4KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJVc2VfR2xvYmFsX1JpZ2h0X0luZGV4XCIsIHRoaXMudXNlR2xvYmFsUmlnaHRJbmRleCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3I0KFwiR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Bvc2l0aW9uXCIsIHRoaXMuZ2xvYmFsTGVmdEluZGV4VGlwUG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3I0KFwiR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvblwiLCB0aGlzLmdsb2JhUmlnaHRJbmRleFRpcFBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjQoXCJHbG9iYWxfTGVmdF9UaHVtYl9UaXBfUG9zaXRpb25cIiwgdGhpcy5nbG9iYWxMZWZ0VGh1bWJUaXBQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjQoXCJHbG9iYWxfUmlnaHRfVGh1bWJfVGlwX1Bvc2l0aW9uXCIsIHRoaXMuZ2xvYmFsUmlnaHRUaHVtYlRpcFBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjQoXCJHbG9iYWxfTGVmdF9JbmRleF9NaWRkbGVfUG9zaXRpb25cIiwgdGhpcy5nbG9iYWxMZWZ0SW5kZXhNaWRkbGVQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjQoXCJHbG9iYWxfUmlnaHRfSW5kZXhfTWlkZGxlX1Bvc2l0aW9uXCIsIHRoaXMuZ2xvYmFsUmlnaHRJbmRleE1pZGRsZVBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Byb3hpbWl0eVwiLCB0aGlzLmdsb2JhbExlZnRJbmRleFRpcFByb3hpbWl0eSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qcm94aW1pdHlcIiwgdGhpcy5nbG9iYWxSaWdodEluZGV4VGlwUHJveGltaXR5KTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWZ0ZXJCaW5kKG1lc2gsIHRoaXMuX2FjdGl2ZUVmZmVjdCwgc3ViTWVzaCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGxpc3Qgb2YgYW5pbWF0YWJsZXMgaW4gdGhlIG1hdGVyaWFsLlxyXG4gICAgICogQHJldHVybnMgdGhlIGxpc3Qgb2YgYW5pbWF0YWJsZXMgb2JqZWN0IHVzZWQgaW4gdGhlIG1hdGVyaWFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRBbmltYXRhYmxlcygpOiBJQW5pbWF0YWJsZVtdIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoZm9yY2VEaXNwb3NlRWZmZWN0PzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoZm9yY2VEaXNwb3NlRWZmZWN0KTtcclxuICAgICAgICB0aGlzLl9yZWZsZWN0aW9uTWFwVGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5faW5kaXJlY3RFbnZUZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLl9ibHVlR3JhZGllbnRUZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLl9kZWNhbFRleHR1cmUuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBjbG9uZShuYW1lOiBzdHJpbmcpOiBNUkRMU2xpZGVyQmFyTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiBTZXJpYWxpemF0aW9uSGVscGVyLkNsb25lKCgpID0+IG5ldyBNUkRMU2xpZGVyQmFyTWF0ZXJpYWwobmFtZSwgdGhpcy5nZXRTY2VuZSgpKSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIHNlcmlhbGl6ZSgpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IHNlcmlhbGl6YXRpb25PYmplY3QgPSBzdXBlci5zZXJpYWxpemUoKTtcclxuICAgICAgICBzZXJpYWxpemF0aW9uT2JqZWN0LmN1c3RvbVR5cGUgPSBcIkJBQllMT04uTVJETFNsaWRlckJhck1hdGVyaWFsXCI7XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6YXRpb25PYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldENsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIk1SRExTbGlkZXJCYXJNYXRlcmlhbFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0YXRpY3NcclxuICAgIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgUGFyc2Uoc291cmNlOiBhbnksIHNjZW5lOiBTY2VuZSwgcm9vdFVybDogc3RyaW5nKTogTVJETFNsaWRlckJhck1hdGVyaWFsIHtcclxuICAgICAgICByZXR1cm4gU2VyaWFsaXphdGlvbkhlbHBlci5QYXJzZSgoKSA9PiBuZXcgTVJETFNsaWRlckJhck1hdGVyaWFsKHNvdXJjZS5uYW1lLCBzY2VuZSksIHNvdXJjZSwgc2NlbmUsIHJvb3RVcmwpO1xyXG4gICAgfVxyXG59XHJcblxyXG5SZWdpc3RlckNsYXNzKFwiQkFCWUxPTi5HVUkuTVJETFNsaWRlckJhck1hdGVyaWFsXCIsIE1SRExTbGlkZXJCYXJNYXRlcmlhbCk7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xyXG5pbXBvcnQgdHlwZSB7IE51bGxhYmxlIH0gZnJvbSBcImNvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSBcImNvcmUvTWlzYy9kZWNvcmF0b3JzXCI7XHJcbmltcG9ydCB7IFNlcmlhbGl6YXRpb25IZWxwZXIgfSBmcm9tIFwiY29yZS9NaXNjL2RlY29yYXRvcnMuc2VyaWFsaXphdGlvblwiO1xyXG5pbXBvcnQgdHlwZSB7IE1hdHJpeCB9IGZyb20gXCJjb3JlL01hdGhzL21hdGgudmVjdG9yXCI7XHJcbmltcG9ydCB7IFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5pbXBvcnQgdHlwZSB7IElBbmltYXRhYmxlIH0gZnJvbSBcImNvcmUvQW5pbWF0aW9ucy9hbmltYXRhYmxlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgdHlwZSB7IEJhc2VUZXh0dXJlIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL1RleHR1cmVzL2Jhc2VUZXh0dXJlXCI7XHJcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvVGV4dHVyZXMvdGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBNYXRlcmlhbERlZmluZXMgfSBmcm9tIFwiY29yZS9NYXRlcmlhbHMvbWF0ZXJpYWxEZWZpbmVzXCI7XHJcbmltcG9ydCB0eXBlIHsgSUVmZmVjdENyZWF0aW9uT3B0aW9ucyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9lZmZlY3RcIjtcclxuaW1wb3J0IHsgUHVzaE1hdGVyaWFsIH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL3B1c2hNYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBWZXJ0ZXhCdWZmZXIgfSBmcm9tIFwiY29yZS9CdWZmZXJzL2J1ZmZlclwiO1xyXG5pbXBvcnQgdHlwZSB7IEFic3RyYWN0TWVzaCB9IGZyb20gXCJjb3JlL01lc2hlcy9hYnN0cmFjdE1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBTdWJNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL3N1Yk1lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBNZXNoIH0gZnJvbSBcImNvcmUvTWVzaGVzL21lc2hcIjtcclxuaW1wb3J0IHR5cGUgeyBTY2VuZSB9IGZyb20gXCJjb3JlL3NjZW5lXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyQ2xhc3MgfSBmcm9tIFwiY29yZS9NaXNjL3R5cGVTdG9yZVwiO1xyXG5pbXBvcnQgeyBDb2xvcjQgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLmNvbG9yXCI7XHJcbmltcG9ydCB7IEVmZmVjdEZhbGxiYWNrcyB9IGZyb20gXCJjb3JlL01hdGVyaWFscy9lZmZlY3RGYWxsYmFja3NcIjtcclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcImNvcmUvRW5naW5lcy9jb25zdGFudHNcIjtcclxuXHJcbmltcG9ydCBcIi4vc2hhZGVycy9tcmRsU2xpZGVyVGh1bWIuZnJhZ21lbnRcIjtcclxuaW1wb3J0IFwiLi9zaGFkZXJzL21yZGxTbGlkZXJUaHVtYi52ZXJ0ZXhcIjtcclxuaW1wb3J0IHsgSGFuZGxlRmFsbGJhY2tzRm9yU2hhZG93cywgUHJlcGFyZUF0dHJpYnV0ZXNGb3JJbnN0YW5jZXMsIFByZXBhcmVEZWZpbmVzRm9yQXR0cmlidXRlcywgUHJlcGFyZVVuaWZvcm1zQW5kU2FtcGxlcnNMaXN0IH0gZnJvbSBcImNvcmUvTWF0ZXJpYWxzL21hdGVyaWFsSGVscGVyLmZ1bmN0aW9uc1wiO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5jbGFzcyBNUkRMU2xpZGVyVGh1bWJNYXRlcmlhbERlZmluZXMgZXh0ZW5kcyBNYXRlcmlhbERlZmluZXMge1xyXG4gICAgLypcclxuICAgICAgICBcIlNLWV9FTkFCTEVEXCIsIFwiQkxPQl9FTkFCTEVfMlwiLCBcIklSSURFU0NFTkNFX0VOQUJMRURcIlxyXG4gICAgKi9cclxuICAgIHB1YmxpYyBTS1lfRU5BQkxFRCA9IHRydWU7XHJcbiAgICBwdWJsaWMgQkxPQl9FTkFCTEVfMiA9IHRydWU7XHJcbiAgICBwdWJsaWMgSVJJREVTQ0VOQ0VfRU5BQkxFRCA9IHRydWU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLl9uZWVkTm9ybWFscyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbmVlZFVWcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWJ1aWxkKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIHJlbmRlciBTbGlkZXIgVGh1bWIgbWF0ZXJpYWwgd2l0aCBNUkRMXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTVJETFNsaWRlclRodW1iTWF0ZXJpYWwgZXh0ZW5kcyBQdXNoTWF0ZXJpYWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBVUkwgcG9pbnRpbmcgdG8gdGhlIHRleHR1cmUgdXNlZCB0byBkZWZpbmUgdGhlIGNvbG9yaW5nIGZvciB0aGUgSXJpZGVzY2VudCBNYXAgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEJMVUVfR1JBRElFTlRfVEVYVFVSRV9VUkwgPSBcImh0dHBzOi8vYXNzZXRzLmJhYnlsb25qcy5jb20vbWVzaGVzL01SVEsvTVJETC9tcnRrLW1yZGwtYmx1ZS1ncmFkaWVudC5wbmdcIjtcclxuICAgIHByaXZhdGUgX2JsdWVHcmFkaWVudFRleHR1cmU6IFRleHR1cmU7XHJcbiAgICBwcml2YXRlIF9kZWNhbFRleHR1cmU6IFRleHR1cmU7XHJcbiAgICBwcml2YXRlIF9yZWZsZWN0aW9uTWFwVGV4dHVyZTogVGV4dHVyZTtcclxuICAgIHByaXZhdGUgX2luZGlyZWN0RW52VGV4dHVyZTogVGV4dHVyZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgY29ybmVyIFJhZGl1cyBvbiB0aGUgc2xpZGVyIHRodW1iLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByYWRpdXMgPSAwLjE1NztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgQmV2ZWwgRnJvbnQgb24gdGhlIHNsaWRlciB0aHVtYi5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmV2ZWxGcm9udCA9IDAuMDY1O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBCZXZlbCBGcm9udCBTdHJldGNoIG9uIHRoZSBzbGlkZXIgdGh1bWIuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJldmVsRnJvbnRTdHJldGNoID0gMC4wNzc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIEJldmVsIEJhY2sgb24gdGhlIHNsaWRlciB0aHVtYi5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmV2ZWxCYWNrID0gMC4wMzE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIEJldmVsIEJhY2sgU3RyZXRjaCBvbiB0aGUgc2xpZGVyIHRodW1iLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBiZXZlbEJhY2tTdHJldGNoID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIGxlZnQgUmFkaWkgTXVsdGlwbGllci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmFkaXVzVG9wTGVmdCA9IDEuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIGxlZnQgUmFkaWkgTXVsdGlwbGllci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmFkaXVzVG9wUmlnaHQgPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRvcCBsZWZ0IFJhZGlpIE11bHRpcGxpZXIuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJhZGl1c0JvdHRvbUxlZnQgPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRvcCBsZWZ0IFJhZGlpIE11bHRpcGxpZXIuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJhZGl1c0JvdHRvbVJpZ2h0ID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHdoZXRoZXIgQnVsZ2UgaXMgZW5hYmxlZC5cclxuICAgICAqIERlZmF1bHQgaXMgZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJ1bGdlRW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBCdWxnZSBIZWlnaHQuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJ1bGdlSGVpZ2h0ID0gLTAuMzIzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBCdWxnZSBSYWRpdXMuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJ1bGdlUmFkaXVzID0gMC43MztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgU3VuIEludGVuc2l0eS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc3VuSW50ZW5zaXR5ID0gMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgU3VuIFRoZXRhLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBzdW5UaGV0YSA9IDAuOTM3O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBTdW4gUGhpLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBzdW5QaGkgPSAwLjU1NTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgSW5kaXJlY3QgRGlmZnVzZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaW5kaXJlY3REaWZmdXNlID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYmFzZSBhbGJlZG8uXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGFsYmVkbyA9IG5ldyBDb2xvcjQoMC4wMTE3NjQ3LCAwLjUwNTg4MiwgMC45OTYwNzgsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBTcGVjdWxhciB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgc3BlY3VsYXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBTaGluaW5lc3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHNoaW5pbmVzcyA9IDEwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBTaGFycG5lc3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHNoYXJwbmVzcyA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIFN1YnN1cmZhY2UgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHN1YnN1cmZhY2UgPSAwLjMxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsZWZ0IGdyYWRpZW50IGNvbG9yLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBsZWZ0R3JhZGllbnRDb2xvciA9IG5ldyBDb2xvcjQoMC4wMTE3NjQ3LCAwLjUwNTg4MiwgMC45OTYwNzgsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSByaWdodCBncmFkaWVudCBjb2xvci5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmlnaHRHcmFkaWVudENvbG9yID0gbmV3IENvbG9yNCgwLjAxMTc2NDcsIDAuNTA1ODgyLCAwLjk5NjA3OCwgMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHJlZmxlY3Rpb24gdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJlZmxlY3Rpb24gPSAwLjc0OTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZnJvbnQgcmVmbGVjdCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgZnJvbnRSZWZsZWN0ID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZWRnZSByZWZsZWN0IHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBlZGdlUmVmbGVjdCA9IDAuMDk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHBvd2VyIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBwb3dlciA9IDguMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgc2t5IGNvbG9yLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBza3lDb2xvciA9IG5ldyBDb2xvcjQoMC4wMTE3NjQ3LCAwLjk2MDc4NCwgMC45OTYwNzgsIDEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBob3Jpem9uIGNvbG9yLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBob3Jpem9uQ29sb3IgPSBuZXcgQ29sb3I0KDAuMDExNzY0NywgMC4zMzMzMzMsIDAuOTk2MDc4LCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZ3JvdW5kIGNvbG9yLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBncm91bmRDb2xvciA9IG5ldyBDb2xvcjQoMCwgMC4yNTQ5MDIsIDAuOTk2MDc4LCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaG9yaXpvbiBwb3dlciB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaG9yaXpvblBvd2VyID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZmluZ2VyIG9jY2x1c2lvbiB3aWR0aCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgd2lkdGggPSAwLjAyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBmaW5nZXIgb2NjbHVzaW9uIGZ1enogdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGZ1enogPSAwLjU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG1pbmltdW0gZmluZ2VyIG9jY2x1c2lvbiBmdXp6IHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBtaW5GdXp6ID0gMC4wMDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZpbmdlciBvY2NsdXNpb24gY2xpcCBmYWRlIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBjbGlwRmFkZSA9IDAuMDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGh1ZSBzaGlmdCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgaHVlU2hpZnQgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzYXR1cmF0aW9uIHNoaWZ0IHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBzYXR1cmF0aW9uU2hpZnQgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSB2YWx1ZSBzaGlmdC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgdmFsdWVTaGlmdCA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYlBvc2l0aW9uID0gbmV3IFZlY3RvcjMoMCwgMCwgMC4xKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYkludGVuc2l0eSA9IDAuNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgbmVhciBzaXplIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYk5lYXJTaXplID0gMC4wMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZmFyIHNpemUgb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iRmFyU2l6ZSA9IDAuMDM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGRpc3RhbmNlIGNvbnNpZGVyZWQgXCJuZWFyXCIgdG8gdGhlIG1lc2gsIHdoaWNoIGNvbnRyb2xzIHRoZSBzaXplIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCAoc2VlIGJsb2JOZWFyU2l6ZSkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JOZWFyRGlzdGFuY2UgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBkaXN0YW5jZSBjb25zaWRlcmVkIFwiZmFyXCIgZnJvbSB0aGUgbWVzaCwgd2hpY2ggY29udHJvbHMgdGhlIHNpemUgb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0IChzZWUgYmxvYkZhclNpemUpLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iRmFyRGlzdGFuY2UgPSAwLjA4O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBsZW5ndGggb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0IGZhZGUuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JGYWRlTGVuZ3RoID0gMC41NzY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHByb2dyZXNzIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCBzZWxlY3Rpb24gYW5pbWF0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxlZnQgcG9pbnRlciAoMC4wIC0gMS4wKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYlB1bHNlID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgb3BhY2l0eSBvZiB0aGUgaG92ZXIgZ2xvdyBlZmZlY3QgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCBwb2ludGVyICgwLjAgLSAxLjApLiBEZWZhdWx0IGlzIDAuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JGYWRlID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iUG9zaXRpb24yID0gbmV3IFZlY3RvcjMoMC4yLCAwLCAwLjEpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBzaXplIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCB3aGVuIHRoZSByaWdodCBwb2ludGVyIGlzIGNvbnNpZGVyZWQgXCJuZWFyXCIgdG8gdGhlIG1lc2ggKHNlZSBibG9iTmVhckRpc3RhbmNlKS5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgYmxvYk5lYXJTaXplMiA9IDAuMDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHByb2dyZXNzIG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCBzZWxlY3Rpb24gYW5pbWF0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJpZ2h0IHBvaW50ZXIgKDAuMCAtIDEuMCkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JQdWxzZTIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBvcGFjaXR5IG9mIHRoZSBob3ZlciBnbG93IGVmZmVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSByaWdodCBwb2ludGVyICgwLjAgLSAxLjApLiBEZWZhdWx0IGlzIDEuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGJsb2JGYWRlMiA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRleHR1cmUgb2YgdGhlIGhvdmVyIGdsb3cgZWZmZWN0LlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBibG9iVGV4dHVyZSA9IG5ldyBUZXh0dXJlKFwiXCIsIHRoaXMuZ2V0U2NlbmUoKSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZpbmdlciBwb3NpdGlvbiBmb3IgbGVmdCBpbmRleC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgbGVmdEluZGV4UG9zaXRpb24gPSBuZXcgVmVjdG9yMygwLCAwLCAxKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZmluZ2VyIHBvc2l0aW9uIGZvciByaWdodCBpbmRleC5cclxuICAgICAqL1xyXG4gICAgQHNlcmlhbGl6ZSgpXHJcbiAgICBwdWJsaWMgcmlnaHRJbmRleFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoLTEsIC0xLCAtMSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZpbmdlciBwb3NpdGlvbiBmb3IgbGVmdCBpbmRleCBtaWRkbGUgcG9zaXRpb24uXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGxlZnRJbmRleE1pZGRsZVBvc2l0aW9uID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGZpbmdlciBwb3NpdGlvbiBmb3IgcmlnaHQgaW5kZXggbWlkZGxlIHBvc2l0aW9uLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByaWdodEluZGV4TWlkZGxlUG9zaXRpb24gPSBuZXcgVmVjdG9yMygwLCAwLCAwKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgRGVjYWwgU2NhbGUgZm9yIFhZLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBkZWNhbFNjYWxlWFkgPSBuZXcgVmVjdG9yMigxLjUsIDEuNSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgZGVjYWxGcm9udE9ubHlcclxuICAgICAqIERlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyBkZWNhbEZyb250T25seSA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIFJpbSBMaWdodCBpbnRlbnNpdHkuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJpbUludGVuc2l0eSA9IDAuMjg3O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBSaW0gTGlnaHQgaHVlIHNoaWZ0IHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByaW1IdWVTaGlmdCA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIFJpbSBMaWdodCBzYXR1cmF0aW9uIHNoaWZ0IHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBAc2VyaWFsaXplKClcclxuICAgIHB1YmxpYyByaW1TYXR1cmF0aW9uU2hpZnQgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBSaW0gTGlnaHQgdmFsdWUgc2hpZnQuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIHJpbVZhbHVlU2hpZnQgPSAtMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBpcmlkZXNjZW5jZSBlZmZlY3QuXHJcbiAgICAgKi9cclxuICAgIEBzZXJpYWxpemUoKVxyXG4gICAgcHVibGljIGlyaWRlc2NlbmNlSW50ZW5zaXR5ID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXNlR2xvYmFsTGVmdEluZGV4ID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1c2VHbG9iYWxSaWdodEluZGV4ID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnbG9iYWxMZWZ0SW5kZXhUaXBQcm94aW1pdHkgPSAwLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdsb2JhbFJpZ2h0SW5kZXhUaXBQcm94aW1pdHkgPSAwLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdsb2JhbExlZnRJbmRleFRpcFBvc2l0aW9uID0gbmV3IFZlY3RvcjQoMC41LCAwLjAsIC0wLjU1LCAxLjApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnbG9iYVJpZ2h0SW5kZXhUaXBQb3NpdGlvbiA9IG5ldyBWZWN0b3I0KDAuMCwgMC4wLCAwLjAsIDEuMCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdsb2JhbExlZnRUaHVtYlRpcFBvc2l0aW9uID0gbmV3IFZlY3RvcjQoMC41LCAwLjAsIC0wLjU1LCAxLjApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnbG9iYWxSaWdodFRodW1iVGlwUG9zaXRpb24gPSBuZXcgVmVjdG9yNCgwLjAsIDAuMCwgMC4wLCAxLjApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnbG9iYWxMZWZ0SW5kZXhNaWRkbGVQb3NpdGlvbiA9IG5ldyBWZWN0b3I0KDAuNSwgMC4wLCAtMC41NSwgMS4wKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2xvYmFsUmlnaHRJbmRleE1pZGRsZVBvc2l0aW9uID0gbmV3IFZlY3RvcjQoMC4wLCAwLjAsIDAuMCwgMS4wKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHNjZW5lPzogU2NlbmUpIHtcclxuICAgICAgICBzdXBlcihuYW1lLCBzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5hbHBoYU1vZGUgPSBDb25zdGFudHMuQUxQSEFfRElTQUJMRTtcclxuICAgICAgICB0aGlzLmJhY2tGYWNlQ3VsbGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2JsdWVHcmFkaWVudFRleHR1cmUgPSBuZXcgVGV4dHVyZShNUkRMU2xpZGVyVGh1bWJNYXRlcmlhbC5CTFVFX0dSQURJRU5UX1RFWFRVUkVfVVJMLCBzY2VuZSwgdHJ1ZSwgZmFsc2UsIFRleHR1cmUuTkVBUkVTVF9TQU1QTElOR01PREUpO1xyXG4gICAgICAgIHRoaXMuX2RlY2FsVGV4dHVyZSA9IG5ldyBUZXh0dXJlKFwiXCIsIHRoaXMuZ2V0U2NlbmUoKSk7XHJcbiAgICAgICAgdGhpcy5fcmVmbGVjdGlvbk1hcFRleHR1cmUgPSBuZXcgVGV4dHVyZShcIlwiLCB0aGlzLmdldFNjZW5lKCkpO1xyXG4gICAgICAgIHRoaXMuX2luZGlyZWN0RW52VGV4dHVyZSA9IG5ldyBUZXh0dXJlKFwiXCIsIHRoaXMuZ2V0U2NlbmUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIG5lZWRBbHBoYUJsZW5kaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgbmVlZEFscGhhVGVzdGluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGdldEFscGhhVGVzdFRleHR1cmUoKTogTnVsbGFibGU8QmFzZVRleHR1cmU+IHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNZXRob2RzXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgaXNSZWFkeUZvclN1Yk1lc2gobWVzaDogQWJzdHJhY3RNZXNoLCBzdWJNZXNoOiBTdWJNZXNoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZHJhd1dyYXBwZXIgPSBzdWJNZXNoLl9kcmF3V3JhcHBlcjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNGcm96ZW4pIHtcclxuICAgICAgICAgICAgaWYgKGRyYXdXcmFwcGVyLmVmZmVjdCAmJiBkcmF3V3JhcHBlci5fd2FzUHJldmlvdXNseVJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcykge1xyXG4gICAgICAgICAgICBzdWJNZXNoLm1hdGVyaWFsRGVmaW5lcyA9IG5ldyBNUkRMU2xpZGVyVGh1bWJNYXRlcmlhbERlZmluZXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSA8TVJETFNsaWRlclRodW1iTWF0ZXJpYWxEZWZpbmVzPnN1Yk1lc2gubWF0ZXJpYWxEZWZpbmVzO1xyXG4gICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5nZXRTY2VuZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNSZWFkeUZvclN1Yk1lc2goc3ViTWVzaCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBzY2VuZS5nZXRFbmdpbmUoKTtcclxuXHJcbiAgICAgICAgLy8gQXR0cmlic1xyXG4gICAgICAgIFByZXBhcmVEZWZpbmVzRm9yQXR0cmlidXRlcyhtZXNoLCBkZWZpbmVzLCBmYWxzZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyBHZXQgY29ycmVjdCBlZmZlY3RcclxuICAgICAgICBpZiAoZGVmaW5lcy5pc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIGRlZmluZXMubWFya0FzUHJvY2Vzc2VkKCk7XHJcblxyXG4gICAgICAgICAgICBzY2VuZS5yZXNldENhY2hlZE1hdGVyaWFsKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBGYWxsYmFja3NcclxuICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tzID0gbmV3IEVmZmVjdEZhbGxiYWNrcygpO1xyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5GT0cpIHtcclxuICAgICAgICAgICAgICAgIGZhbGxiYWNrcy5hZGRGYWxsYmFjaygxLCBcIkZPR1wiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgSGFuZGxlRmFsbGJhY2tzRm9yU2hhZG93cyhkZWZpbmVzLCBmYWxsYmFja3MpO1xyXG5cclxuICAgICAgICAgICAgZGVmaW5lcy5JTUFHRVBST0NFU1NJTkdQT1NUUFJPQ0VTUyA9IHNjZW5lLmltYWdlUHJvY2Vzc2luZ0NvbmZpZ3VyYXRpb24uYXBwbHlCeVBvc3RQcm9jZXNzO1xyXG5cclxuICAgICAgICAgICAgLy9BdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnMgPSBbVmVydGV4QnVmZmVyLlBvc2l0aW9uS2luZF07XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5OT1JNQUwpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuTm9ybWFsS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlVWMSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlicy5wdXNoKFZlcnRleEJ1ZmZlci5VVktpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5lcy5VVjIpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVVYyS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlZFUlRFWENPTE9SKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJzLnB1c2goVmVydGV4QnVmZmVyLkNvbG9yS2luZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbmVzLlRBTkdFTlQpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnMucHVzaChWZXJ0ZXhCdWZmZXIuVGFuZ2VudEtpbmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQcmVwYXJlQXR0cmlidXRlc0Zvckluc3RhbmNlcyhhdHRyaWJzLCBkZWZpbmVzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIExlZ2FjeSBicm93c2VyIHBhdGNoXHJcbiAgICAgICAgICAgIGNvbnN0IHNoYWRlck5hbWUgPSBcIm1yZGxTbGlkZXJUaHVtYlwiO1xyXG4gICAgICAgICAgICBjb25zdCBqb2luID0gZGVmaW5lcy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBbXHJcbiAgICAgICAgICAgICAgICBcIndvcmxkXCIsXHJcbiAgICAgICAgICAgICAgICBcInZpZXdQcm9qZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcImNhbWVyYVBvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9SYWRpdXNfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CZXZlbF9Gcm9udF9cIixcclxuICAgICAgICAgICAgICAgIFwiX0JldmVsX0Zyb250X1N0cmV0Y2hfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CZXZlbF9CYWNrX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmV2ZWxfQmFja19TdHJldGNoX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmFkaXVzX1RvcF9MZWZ0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmFkaXVzX1RvcF9SaWdodF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JhZGl1c19Cb3R0b21fTGVmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JhZGl1c19Cb3R0b21fUmlnaHRfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CdWxnZV9FbmFibGVkX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQnVsZ2VfSGVpZ2h0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQnVsZ2VfUmFkaXVzX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU3VuX0ludGVuc2l0eV9cIixcclxuICAgICAgICAgICAgICAgIFwiX1N1bl9UaGV0YV9cIixcclxuICAgICAgICAgICAgICAgIFwiX1N1bl9QaGlfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9JbmRpcmVjdF9EaWZmdXNlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQWxiZWRvX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU3BlY3VsYXJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9TaGluaW5lc3NfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9TaGFycG5lc3NfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9TdWJzdXJmYWNlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfTGVmdF9Db2xvcl9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JpZ2h0X0NvbG9yX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmVmbGVjdGlvbl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Zyb250X1JlZmxlY3RfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9FZGdlX1JlZmxlY3RfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Qb3dlcl9cIixcclxuICAgICAgICAgICAgICAgIFwiX1NreV9Db2xvcl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0hvcml6b25fQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Hcm91bmRfQ29sb3JfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9Ib3Jpem9uX1Bvd2VyX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmVmbGVjdGlvbl9NYXBfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9JbmRpcmVjdF9FbnZpcm9ubWVudF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1dpZHRoX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfRnV6el9cIixcclxuICAgICAgICAgICAgICAgIFwiX01pbl9GdXp6X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQ2xpcF9GYWRlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSHVlX1NoaWZ0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfU2F0dXJhdGlvbl9TaGlmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1ZhbHVlX1NoaWZ0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9Qb3NpdGlvbl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfSW50ZW5zaXR5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9OZWFyX1NpemVfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0Zhcl9TaXplX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9OZWFyX0Rpc3RhbmNlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9GYXJfRGlzdGFuY2VfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0ZhZGVfTGVuZ3RoX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfQmxvYl9QdWxzZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfRmFkZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfVGV4dHVyZV9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfUG9zaXRpb25fMl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0Jsb2JfTmVhcl9TaXplXzJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX1B1bHNlXzJfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9CbG9iX0ZhZGVfMl9cIixcclxuICAgICAgICAgICAgICAgIFwiX0xlZnRfSW5kZXhfUG9zX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmlnaHRfSW5kZXhfUG9zX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfTGVmdF9JbmRleF9NaWRkbGVfUG9zX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmlnaHRfSW5kZXhfTWlkZGxlX1Bvc19cIixcclxuICAgICAgICAgICAgICAgIFwiX0RlY2FsX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfRGVjYWxfU2NhbGVfWFlfXCIsXHJcbiAgICAgICAgICAgICAgICBcIl9EZWNhbF9Gcm9udF9Pbmx5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmltX0ludGVuc2l0eV9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JpbV9UZXh0dXJlX1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmltX0h1ZV9TaGlmdF9cIixcclxuICAgICAgICAgICAgICAgIFwiX1JpbV9TYXR1cmF0aW9uX1NoaWZ0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfUmltX1ZhbHVlX1NoaWZ0X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSXJpZGVzY2VuY2VfSW50ZW5zaXR5X1wiLFxyXG4gICAgICAgICAgICAgICAgXCJfSXJpZGVzY2VuY2VfVGV4dHVyZV9cIixcclxuICAgICAgICAgICAgICAgIFwiVXNlX0dsb2JhbF9MZWZ0X0luZGV4XCIsXHJcbiAgICAgICAgICAgICAgICBcIlVzZV9HbG9iYWxfUmlnaHRfSW5kZXhcIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Bvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIkdsb2JhbF9SaWdodF9JbmRleF9UaXBfUG9zaXRpb25cIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX0xlZnRfVGh1bWJfVGlwX1Bvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIkdsb2JhbF9SaWdodF9UaHVtYl9UaXBfUG9zaXRpb25cIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX0xlZnRfSW5kZXhfTWlkZGxlX1Bvc2l0aW9uO1wiLFxyXG4gICAgICAgICAgICAgICAgXCJHbG9iYWxfUmlnaHRfSW5kZXhfTWlkZGxlX1Bvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBcIkdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qcm94aW1pdHlcIixcclxuICAgICAgICAgICAgICAgIFwiR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qcm94aW1pdHlcIixcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgY29uc3Qgc2FtcGxlcnM6IHN0cmluZ1tdID0gW1wiX1JpbV9UZXh0dXJlX1wiLCBcIl9JcmlkZXNjZW5jZV9UZXh0dXJlX1wiXTtcclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybUJ1ZmZlcnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgICAgICBQcmVwYXJlVW5pZm9ybXNBbmRTYW1wbGVyc0xpc3QoPElFZmZlY3RDcmVhdGlvbk9wdGlvbnM+e1xyXG4gICAgICAgICAgICAgICAgdW5pZm9ybXNOYW1lczogdW5pZm9ybXMsXHJcbiAgICAgICAgICAgICAgICB1bmlmb3JtQnVmZmVyc05hbWVzOiB1bmlmb3JtQnVmZmVycyxcclxuICAgICAgICAgICAgICAgIHNhbXBsZXJzOiBzYW1wbGVycyxcclxuICAgICAgICAgICAgICAgIGRlZmluZXM6IGRlZmluZXMsXHJcbiAgICAgICAgICAgICAgICBtYXhTaW11bHRhbmVvdXNMaWdodHM6IDQsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc3ViTWVzaC5zZXRFZmZlY3QoXHJcbiAgICAgICAgICAgICAgICBzY2VuZS5nZXRFbmdpbmUoKS5jcmVhdGVFZmZlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgc2hhZGVyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICA8SUVmZmVjdENyZWF0aW9uT3B0aW9ucz57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zTmFtZXM6IHVuaWZvcm1zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3JtQnVmZmVyc05hbWVzOiB1bmlmb3JtQnVmZmVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlcnM6IHNhbXBsZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVzOiBqb2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFja3M6IGZhbGxiYWNrcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db21waWxlZDogdGhpcy5vbkNvbXBpbGVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yOiB0aGlzLm9uRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4UGFyYW1ldGVyczogeyBtYXhTaW11bHRhbmVvdXNMaWdodHM6IDQgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZVxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgIGRlZmluZXNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzdWJNZXNoLmVmZmVjdCB8fCAhc3ViTWVzaC5lZmZlY3QuaXNSZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlZmluZXMuX3JlbmRlcklkID0gc2NlbmUuZ2V0UmVuZGVySWQoKTtcclxuICAgICAgICBkcmF3V3JhcHBlci5fd2FzUHJldmlvdXNseVJlYWR5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG92ZXJyaWRlIGJpbmRGb3JTdWJNZXNoKHdvcmxkOiBNYXRyaXgsIG1lc2g6IE1lc2gsIHN1Yk1lc2g6IFN1Yk1lc2gpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBkZWZpbmVzID0gPE1SRExTbGlkZXJUaHVtYk1hdGVyaWFsRGVmaW5lcz5zdWJNZXNoLm1hdGVyaWFsRGVmaW5lcztcclxuICAgICAgICBpZiAoIWRlZmluZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gc3ViTWVzaC5lZmZlY3Q7XHJcbiAgICAgICAgaWYgKCFlZmZlY3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0ID0gZWZmZWN0O1xyXG5cclxuICAgICAgICAvLyBNYXRyaWNlc1xyXG4gICAgICAgIHRoaXMuYmluZE9ubHlXb3JsZE1hdHJpeCh3b3JsZCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldE1hdHJpeChcInZpZXdQcm9qZWN0aW9uXCIsIHRoaXMuZ2V0U2NlbmUoKS5nZXRUcmFuc2Zvcm1NYXRyaXgoKSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjMoXCJjYW1lcmFQb3NpdGlvblwiLCB0aGlzLmdldFNjZW5lKCkuYWN0aXZlQ2FtZXJhIS5wb3NpdGlvbik7XHJcblxyXG4gICAgICAgIC8vIFwiUm91bmQgUmVjdFwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JhZGl1c19cIiwgdGhpcy5yYWRpdXMpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CZXZlbF9Gcm9udF9cIiwgdGhpcy5iZXZlbEZyb250KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmV2ZWxfRnJvbnRfU3RyZXRjaF9cIiwgdGhpcy5iZXZlbEZyb250U3RyZXRjaCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0JldmVsX0JhY2tfXCIsIHRoaXMuYmV2ZWxCYWNrKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmV2ZWxfQmFja19TdHJldGNoX1wiLCB0aGlzLmJldmVsQmFja1N0cmV0Y2gpO1xyXG5cclxuICAgICAgICAvLyBcIlJhZGlpIE11bHRpcGxpZXJzXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmFkaXVzX1RvcF9MZWZ0X1wiLCB0aGlzLnJhZGl1c1RvcExlZnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfVG9wX1JpZ2h0X1wiLCB0aGlzLnJhZGl1c1RvcFJpZ2h0KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUmFkaXVzX0JvdHRvbV9MZWZ0X1wiLCB0aGlzLnJhZGl1c0JvdHRvbUxlZnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SYWRpdXNfQm90dG9tX1JpZ2h0X1wiLCB0aGlzLnJhZGl1c0JvdHRvbVJpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gXCJCdWxnZVwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0J1bGdlX0VuYWJsZWRfXCIsIHRoaXMuYnVsZ2VFbmFibGVkID8gMS4wIDogMC4wKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQnVsZ2VfSGVpZ2h0X1wiLCB0aGlzLmJ1bGdlSGVpZ2h0KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQnVsZ2VfUmFkaXVzX1wiLCB0aGlzLmJ1bGdlUmFkaXVzKTtcclxuXHJcbiAgICAgICAgLy8gXCJTdW5cIlxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TdW5fSW50ZW5zaXR5X1wiLCB0aGlzLnN1bkludGVuc2l0eSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1N1bl9UaGV0YV9cIiwgdGhpcy5zdW5UaGV0YSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1N1bl9QaGlfXCIsIHRoaXMuc3VuUGhpKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfSW5kaXJlY3RfRGlmZnVzZV9cIiwgdGhpcy5pbmRpcmVjdERpZmZ1c2UpO1xyXG5cclxuICAgICAgICAvLyBcIkRpZmZ1c2UgQW5kIFNwZWN1bGFyXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX0FsYmVkb19cIiwgdGhpcy5hbGJlZG8pO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TcGVjdWxhcl9cIiwgdGhpcy5zcGVjdWxhcik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1NoaW5pbmVzc19cIiwgdGhpcy5zaGluaW5lc3MpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9TaGFycG5lc3NfXCIsIHRoaXMuc2hhcnBuZXNzKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU3Vic3VyZmFjZV9cIiwgdGhpcy5zdWJzdXJmYWNlKTtcclxuXHJcbiAgICAgICAgLy8gXCJHcmFkaWVudFwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldERpcmVjdENvbG9yNChcIl9MZWZ0X0NvbG9yX1wiLCB0aGlzLmxlZnRHcmFkaWVudENvbG9yKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX1JpZ2h0X0NvbG9yX1wiLCB0aGlzLnJpZ2h0R3JhZGllbnRDb2xvcik7XHJcblxyXG4gICAgICAgIC8vIFwiUmVmbGVjdGlvblwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JlZmxlY3Rpb25fXCIsIHRoaXMucmVmbGVjdGlvbik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Zyb250X1JlZmxlY3RfXCIsIHRoaXMuZnJvbnRSZWZsZWN0KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfRWRnZV9SZWZsZWN0X1wiLCB0aGlzLmVkZ2VSZWZsZWN0KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfUG93ZXJfXCIsIHRoaXMucG93ZXIpO1xyXG5cclxuICAgICAgICAvLyBcIlNreSBFbnZpcm9ubWVudFwiXHJcbiAgICAgICAgLy9kZWZpbmUgU0tZX0VOQUJMRUQgdHJ1ZTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RGlyZWN0Q29sb3I0KFwiX1NreV9Db2xvcl9cIiwgdGhpcy5za3lDb2xvcik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldERpcmVjdENvbG9yNChcIl9Ib3Jpem9uX0NvbG9yX1wiLCB0aGlzLmhvcml6b25Db2xvcik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldERpcmVjdENvbG9yNChcIl9Hcm91bmRfQ29sb3JfXCIsIHRoaXMuZ3JvdW5kQ29sb3IpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9Ib3Jpem9uX1Bvd2VyX1wiLCB0aGlzLmhvcml6b25Qb3dlcik7XHJcblxyXG4gICAgICAgIC8vIFwiTWFwcGVkIEVudmlyb25tZW50XCJcclxuICAgICAgICAvL2RlZmluZSBFTlZfRU5BQkxFIGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRUZXh0dXJlKFwiX1JlZmxlY3Rpb25fTWFwX1wiLCB0aGlzLl9yZWZsZWN0aW9uTWFwVGV4dHVyZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFRleHR1cmUoXCJfSW5kaXJlY3RfRW52aXJvbm1lbnRfXCIsIHRoaXMuX2luZGlyZWN0RW52VGV4dHVyZSk7XHJcblxyXG4gICAgICAgIC8vIFwiRmluZ2VyT2NjbHVzaW9uXCJcclxuICAgICAgICAvL2RlZmluZSBPQ0NMVVNJT05fRU5BQkxFRCBmYWxzZTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfV2lkdGhfXCIsIHRoaXMud2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9GdXp6X1wiLCB0aGlzLmZ1enopO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9NaW5fRnV6el9cIiwgdGhpcy5taW5GdXp6KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQ2xpcF9GYWRlX1wiLCB0aGlzLmNsaXBGYWRlKTtcclxuXHJcbiAgICAgICAgLy8gXCJWaWV3IEJhc2VkIENvbG9yIFNoaWZ0XCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfSHVlX1NoaWZ0X1wiLCB0aGlzLmh1ZVNoaWZ0KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfU2F0dXJhdGlvbl9TaGlmdF9cIiwgdGhpcy5zYXR1cmF0aW9uU2hpZnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9WYWx1ZV9TaGlmdF9cIiwgdGhpcy52YWx1ZVNoaWZ0KTtcclxuXHJcbiAgICAgICAgLy8gXCJCbG9iXCJcclxuICAgICAgICAvL2RlZmluZSBCTE9CX0VOQUJMRSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcIl9CbG9iX1Bvc2l0aW9uX1wiLCB0aGlzLmJsb2JQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfSW50ZW5zaXR5X1wiLCB0aGlzLmJsb2JJbnRlbnNpdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX05lYXJfU2l6ZV9cIiwgdGhpcy5ibG9iTmVhclNpemUpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0Zhcl9TaXplX1wiLCB0aGlzLmJsb2JGYXJTaXplKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9OZWFyX0Rpc3RhbmNlX1wiLCB0aGlzLmJsb2JOZWFyRGlzdGFuY2UpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0Zhcl9EaXN0YW5jZV9cIiwgdGhpcy5ibG9iRmFyRGlzdGFuY2UpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0ZhZGVfTGVuZ3RoX1wiLCB0aGlzLmJsb2JGYWRlTGVuZ3RoKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9QdWxzZV9cIiwgdGhpcy5ibG9iUHVsc2UpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9CbG9iX0ZhZGVfXCIsIHRoaXMuYmxvYkZhZGUpO1xyXG5cclxuICAgICAgICAvLyBcIkJsb2IgVGV4dHVyZVwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFRleHR1cmUoXCJfQmxvYl9UZXh0dXJlX1wiLCB0aGlzLmJsb2JUZXh0dXJlKTtcclxuXHJcbiAgICAgICAgLy8gXCJCbG9iIDJcIlxyXG4gICAgICAgIC8vZGVmaW5lIEJMT0JfRU5BQkxFXzIgdHJ1ZTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcIl9CbG9iX1Bvc2l0aW9uXzJfXCIsIHRoaXMuYmxvYlBvc2l0aW9uMik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfTmVhcl9TaXplXzJfXCIsIHRoaXMuYmxvYk5lYXJTaXplMik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0Jsb2JfUHVsc2VfMl9cIiwgdGhpcy5ibG9iUHVsc2UyKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfQmxvYl9GYWRlXzJfXCIsIHRoaXMuYmxvYkZhZGUyKTtcclxuXHJcbiAgICAgICAgLy8gXCJGaW5nZXIgUG9zaXRpb25zXCJcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcIl9MZWZ0X0luZGV4X1Bvc19cIiwgdGhpcy5sZWZ0SW5kZXhQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjMoXCJfUmlnaHRfSW5kZXhfUG9zX1wiLCB0aGlzLnJpZ2h0SW5kZXhQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldFZlY3RvcjMoXCJfTGVmdF9JbmRleF9NaWRkbGVfUG9zX1wiLCB0aGlzLmxlZnRJbmRleE1pZGRsZVBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yMyhcIl9SaWdodF9JbmRleF9NaWRkbGVfUG9zX1wiLCB0aGlzLnJpZ2h0SW5kZXhNaWRkbGVQb3NpdGlvbik7XHJcblxyXG4gICAgICAgIC8vIFwiRGVjYWwgVGV4dHVyZVwiXHJcbiAgICAgICAgLy9kZWZpbmUgREVDQUxfRU5BQkxFIGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRUZXh0dXJlKFwiX0RlY2FsX1wiLCB0aGlzLl9kZWNhbFRleHR1cmUpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3IyKFwiX0RlY2FsX1NjYWxlX1hZX1wiLCB0aGlzLmRlY2FsU2NhbGVYWSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX0RlY2FsX0Zyb250X09ubHlfXCIsIHRoaXMuZGVjYWxGcm9udE9ubHkgPyAxLjAgOiAwLjApO1xyXG5cclxuICAgICAgICAvLyBcIlJpbSBMaWdodFwiXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JpbV9JbnRlbnNpdHlfXCIsIHRoaXMucmltSW50ZW5zaXR5KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VGV4dHVyZShcIl9SaW1fVGV4dHVyZV9cIiwgdGhpcy5fYmx1ZUdyYWRpZW50VGV4dHVyZSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiX1JpbV9IdWVfU2hpZnRfXCIsIHRoaXMucmltSHVlU2hpZnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SaW1fU2F0dXJhdGlvbl9TaGlmdF9cIiwgdGhpcy5yaW1TYXR1cmF0aW9uU2hpZnQpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIl9SaW1fVmFsdWVfU2hpZnRfXCIsIHRoaXMucmltVmFsdWVTaGlmdCk7XHJcblxyXG4gICAgICAgIC8vIFwiSXJpZGVzY2VuY2VcIlxyXG4gICAgICAgIC8vZGVmaW5lIElSSURFU0NFTkNFX0VOQUJMRUQgdHJ1ZTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0RmxvYXQoXCJfSXJpZGVzY2VuY2VfSW50ZW5zaXR5X1wiLCB0aGlzLmlyaWRlc2NlbmNlSW50ZW5zaXR5KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VGV4dHVyZShcIl9JcmlkZXNjZW5jZV9UZXh0dXJlX1wiLCB0aGlzLl9ibHVlR3JhZGllbnRUZXh0dXJlKTtcclxuXHJcbiAgICAgICAgLy8gR2xvYmFsIGlucHV0c1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIlVzZV9HbG9iYWxfTGVmdF9JbmRleFwiLCB0aGlzLnVzZUdsb2JhbExlZnRJbmRleCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWZmZWN0LnNldEZsb2F0KFwiVXNlX0dsb2JhbF9SaWdodF9JbmRleFwiLCB0aGlzLnVzZUdsb2JhbFJpZ2h0SW5kZXgpO1xyXG5cclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yNChcIkdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qb3NpdGlvblwiLCB0aGlzLmdsb2JhbExlZnRJbmRleFRpcFBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFZmZlY3Quc2V0VmVjdG9yNChcIkdsb2JhbF9SaWdodF9JbmRleF9UaXBfUG9zaXRpb25cIiwgdGhpcy5nbG9iYVJpZ2h0SW5kZXhUaXBQb3NpdGlvbik7XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3I0KFwiR2xvYmFsX0xlZnRfVGh1bWJfVGlwX1Bvc2l0aW9uXCIsIHRoaXMuZ2xvYmFsTGVmdFRodW1iVGlwUG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3I0KFwiR2xvYmFsX1JpZ2h0X1RodW1iX1RpcF9Qb3NpdGlvblwiLCB0aGlzLmdsb2JhbFJpZ2h0VGh1bWJUaXBQb3NpdGlvbik7XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3I0KFwiR2xvYmFsX0xlZnRfSW5kZXhfTWlkZGxlX1Bvc2l0aW9uXCIsIHRoaXMuZ2xvYmFsTGVmdEluZGV4TWlkZGxlUG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRWZWN0b3I0KFwiR2xvYmFsX1JpZ2h0X0luZGV4X01pZGRsZV9Qb3NpdGlvblwiLCB0aGlzLmdsb2JhbFJpZ2h0SW5kZXhNaWRkbGVQb3NpdGlvbik7XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIkdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qcm94aW1pdHlcIiwgdGhpcy5nbG9iYWxMZWZ0SW5kZXhUaXBQcm94aW1pdHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVmZmVjdC5zZXRGbG9hdChcIkdsb2JhbF9SaWdodF9JbmRleF9UaXBfUHJveGltaXR5XCIsIHRoaXMuZ2xvYmFsUmlnaHRJbmRleFRpcFByb3hpbWl0eSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FmdGVyQmluZChtZXNoLCB0aGlzLl9hY3RpdmVFZmZlY3QsIHN1Yk1lc2gpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBsaXN0IG9mIGFuaW1hdGFibGVzIGluIHRoZSBtYXRlcmlhbC5cclxuICAgICAqIEByZXR1cm5zIHRoZSBsaXN0IG9mIGFuaW1hdGFibGVzIG9iamVjdCB1c2VkIGluIHRoZSBtYXRlcmlhbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0QW5pbWF0YWJsZXMoKTogSUFuaW1hdGFibGVbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKGZvcmNlRGlzcG9zZUVmZmVjdD86IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKGZvcmNlRGlzcG9zZUVmZmVjdCk7XHJcbiAgICAgICAgdGhpcy5fcmVmbGVjdGlvbk1hcFRleHR1cmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX2luZGlyZWN0RW52VGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5fYmx1ZUdyYWRpZW50VGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5fZGVjYWxUZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgY2xvbmUobmFtZTogc3RyaW5nKTogTVJETFNsaWRlclRodW1iTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiBTZXJpYWxpemF0aW9uSGVscGVyLkNsb25lKCgpID0+IG5ldyBNUkRMU2xpZGVyVGh1bWJNYXRlcmlhbChuYW1lLCB0aGlzLmdldFNjZW5lKCkpLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgc2VyaWFsaXplKCk6IGFueSB7XHJcbiAgICAgICAgY29uc3Qgc2VyaWFsaXphdGlvbk9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZSgpO1xyXG4gICAgICAgIHNlcmlhbGl6YXRpb25PYmplY3QuY3VzdG9tVHlwZSA9IFwiQkFCWUxPTi5NUkRMU2xpZGVyVGh1bWJNYXRlcmlhbFwiO1xyXG4gICAgICAgIHJldHVybiBzZXJpYWxpemF0aW9uT2JqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXRDbGFzc05hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCJNUkRMU2xpZGVyVGh1bWJNYXRlcmlhbFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0YXRpY3NcclxuICAgIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgUGFyc2Uoc291cmNlOiBhbnksIHNjZW5lOiBTY2VuZSwgcm9vdFVybDogc3RyaW5nKTogTVJETFNsaWRlclRodW1iTWF0ZXJpYWwge1xyXG4gICAgICAgIHJldHVybiBTZXJpYWxpemF0aW9uSGVscGVyLlBhcnNlKCgpID0+IG5ldyBNUkRMU2xpZGVyVGh1bWJNYXRlcmlhbChzb3VyY2UubmFtZSwgc2NlbmUpLCBzb3VyY2UsIHNjZW5lLCByb290VXJsKTtcclxuICAgIH1cclxufVxyXG5cclxuUmVnaXN0ZXJDbGFzcyhcIkJBQllMT04uR1VJLk1SRExTbGlkZXJUaHVtYk1hdGVyaWFsXCIsIE1SRExTbGlkZXJUaHVtYk1hdGVyaWFsKTtcclxuIiwiLy8gRG8gbm90IGVkaXQuXG5pbXBvcnQgeyBTaGFkZXJTdG9yZSB9IGZyb20gXCJjb3JlL0VuZ2luZXMvc2hhZGVyU3RvcmVcIjtcblxuY29uc3QgbmFtZSA9IFwibXJkbEJhY2tnbG93UGl4ZWxTaGFkZXJcIjtcbmNvbnN0IHNoYWRlciA9IGB1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247dmFyeWluZyB2ZWMzIHZOb3JtYWw7dmFyeWluZyB2ZWMyIHZVVjt1bmlmb3JtIGZsb2F0IF9CZXZlbF9SYWRpdXNfO3VuaWZvcm0gZmxvYXQgX0xpbmVfV2lkdGhfO3VuaWZvcm0gYm9vbCBfQWJzb2x1dGVfU2l6ZXNfO3VuaWZvcm0gZmxvYXQgX1R1bmluZ19Nb3Rpb25fO3VuaWZvcm0gZmxvYXQgX01vdGlvbl87dW5pZm9ybSBmbG9hdCBfTWF4X0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfSW50ZW5zaXR5X0ZhZGVfSW5fRXhwb25lbnRfO3VuaWZvcm0gZmxvYXQgX091dGVyX0Z1enpfU3RhcnRfO3VuaWZvcm0gZmxvYXQgX091dGVyX0Z1enpfRW5kXzt1bmlmb3JtIHZlYzQgX0NvbG9yXzt1bmlmb3JtIHZlYzQgX0lubmVyX0NvbG9yXzt1bmlmb3JtIGZsb2F0IF9CbGVuZF9FeHBvbmVudF87dW5pZm9ybSBmbG9hdCBfRmFsbG9mZl87dW5pZm9ybSBmbG9hdCBfQmlhc187ZmxvYXQgQmlhc0Z1bmMoZmxvYXQgYixmbG9hdCB2KSB7cmV0dXJuIHBvdyh2LGxvZyhjbGFtcChiLDAuMDAxLDAuOTk5KSkvbG9nKDAuNSkpO31cbnZvaWQgRnV6enlfUm91bmRfUmVjdF9CMzMoXG5mbG9hdCBTaXplX1gsXG5mbG9hdCBTaXplX1ksXG5mbG9hdCBSYWRpdXNfWCxcbmZsb2F0IFJhZGl1c19ZLFxuZmxvYXQgTGluZV9XaWR0aCxcbnZlYzIgVVYsXG5mbG9hdCBPdXRlcl9GdXp6LFxuZmxvYXQgTWF4X091dGVyX0Z1enosXG5vdXQgZmxvYXQgUmVjdF9EaXN0YW5jZSxcbm91dCBmbG9hdCBJbm5lcl9EaXN0YW5jZSlcbnt2ZWMyIGhhbGZTaXplPXZlYzIoU2l6ZV9YLFNpemVfWSkqMC41O3ZlYzIgcj1tYXgobWluKHZlYzIoUmFkaXVzX1gsUmFkaXVzX1kpLGhhbGZTaXplKSx2ZWMyKDAuMDAxLDAuMDAxKSk7ZmxvYXQgcmFkaXVzPW1pbihyLngsci55KS1NYXhfT3V0ZXJfRnV6ejt2ZWMyIHY9YWJzKFVWKTt2ZWMyIG5lYXJlc3RwPW1pbih2LGhhbGZTaXplLXIpO2Zsb2F0IGQ9ZGlzdGFuY2UobmVhcmVzdHAsdik7SW5uZXJfRGlzdGFuY2U9Y2xhbXAoMS4wLShyYWRpdXMtZCkvTGluZV9XaWR0aCwwLjAsMS4wKTtSZWN0X0Rpc3RhbmNlPWNsYW1wKDEuMC0oZC1yYWRpdXMpL091dGVyX0Z1enosMC4wLDEuMCkqSW5uZXJfRGlzdGFuY2U7fVxudm9pZCBtYWluKClcbntmbG9hdCBYX1E0MjtmbG9hdCBZX1E0MjtYX1E0Mj12Tm9ybWFsLng7WV9RNDI9dk5vcm1hbC55O2Zsb2F0IE1heEFCX1EyND1tYXgoX1R1bmluZ19Nb3Rpb25fLF9Nb3Rpb25fKTtmbG9hdCBTcXJ0X0ZfUTI3PXNxcnQoTWF4QUJfUTI0KTtmbG9hdCBQb3dlcl9RNDM9cG93KE1heEFCX1EyNCxfSW50ZW5zaXR5X0ZhZGVfSW5fRXhwb25lbnRfKTtmbG9hdCBWYWx1ZV9BdF9UX1EyNj1taXgoX091dGVyX0Z1enpfU3RhcnRfLF9PdXRlcl9GdXp6X0VuZF8sU3FydF9GX1EyNyk7ZmxvYXQgUHJvZHVjdF9RMjM9X01heF9JbnRlbnNpdHlfKlBvd2VyX1E0MztmbG9hdCBSZWN0X0Rpc3RhbmNlX1EzMztmbG9hdCBJbm5lcl9EaXN0YW5jZV9RMzM7RnV6enlfUm91bmRfUmVjdF9CMzMoWF9RNDIsWV9RNDIsX0JldmVsX1JhZGl1c18sX0JldmVsX1JhZGl1c18sX0xpbmVfV2lkdGhfLHZVVixWYWx1ZV9BdF9UX1EyNixfT3V0ZXJfRnV6el9TdGFydF8sUmVjdF9EaXN0YW5jZV9RMzMsSW5uZXJfRGlzdGFuY2VfUTMzKTtmbG9hdCBQb3dlcl9RNDQ9cG93KElubmVyX0Rpc3RhbmNlX1EzMyxfQmxlbmRfRXhwb25lbnRfKTtmbG9hdCBSZXN1bHRfUTQ1PXBvdyhCaWFzRnVuYyhfQmlhc18sUmVjdF9EaXN0YW5jZV9RMzMpLF9GYWxsb2ZmXyk7dmVjNCBDb2xvcl9BdF9UX1EyNT1taXgoX0lubmVyX0NvbG9yXyxfQ29sb3JfLFBvd2VyX1E0NCk7ZmxvYXQgUHJvZHVjdF9RMjI9UmVzdWx0X1E0NSpQcm9kdWN0X1EyMzt2ZWM0IFJlc3VsdF9RMjg9UHJvZHVjdF9RMjIqQ29sb3JfQXRfVF9RMjU7dmVjNCBPdXRfQ29sb3I9UmVzdWx0X1EyODtmbG9hdCBDbGlwX1RocmVzaG9sZD0wLjA7Z2xfRnJhZ0NvbG9yPU91dF9Db2xvcjt9YDtcbi8vIFNpZGVlZmZlY3RcblNoYWRlclN0b3JlLlNoYWRlcnNTdG9yZVtuYW1lXSA9IHNoYWRlcjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBtcmRsQmFja2dsb3dQaXhlbFNoYWRlciA9IHsgbmFtZSwgc2hhZGVyIH07XG4iLCIvLyBEbyBub3QgZWRpdC5cbmltcG9ydCB7IFNoYWRlclN0b3JlIH0gZnJvbSBcImNvcmUvRW5naW5lcy9zaGFkZXJTdG9yZVwiO1xuXG5jb25zdCBuYW1lID0gXCJtcmRsQmFja2dsb3dWZXJ0ZXhTaGFkZXJcIjtcbmNvbnN0IHNoYWRlciA9IGB1bmlmb3JtIG1hdDQgd29ybGQ7dW5pZm9ybSBtYXQ0IHZpZXdQcm9qZWN0aW9uO3VuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjthdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjthdHRyaWJ1dGUgdmVjMyBub3JtYWw7YXR0cmlidXRlIHZlYzIgdXY7YXR0cmlidXRlIHZlYzMgdGFuZ2VudDt1bmlmb3JtIGZsb2F0IF9CZXZlbF9SYWRpdXNfO3VuaWZvcm0gZmxvYXQgX0xpbmVfV2lkdGhfO3VuaWZvcm0gYm9vbCBfQWJzb2x1dGVfU2l6ZXNfO3VuaWZvcm0gZmxvYXQgX1R1bmluZ19Nb3Rpb25fO3VuaWZvcm0gZmxvYXQgX01vdGlvbl87dW5pZm9ybSBmbG9hdCBfTWF4X0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfSW50ZW5zaXR5X0ZhZGVfSW5fRXhwb25lbnRfO3VuaWZvcm0gZmxvYXQgX091dGVyX0Z1enpfU3RhcnRfO3VuaWZvcm0gZmxvYXQgX091dGVyX0Z1enpfRW5kXzt1bmlmb3JtIHZlYzQgX0NvbG9yXzt1bmlmb3JtIHZlYzQgX0lubmVyX0NvbG9yXzt1bmlmb3JtIGZsb2F0IF9CbGVuZF9FeHBvbmVudF87dW5pZm9ybSBmbG9hdCBfRmFsbG9mZl87dW5pZm9ybSBmbG9hdCBfQmlhc187dmFyeWluZyB2ZWMzIHZOb3JtYWw7dmFyeWluZyB2ZWMyIHZVVjt2b2lkIG1haW4oKVxue3ZlYzMgRGlyX1dvcmxkX1E0MT0od29ybGQqdmVjNCh0YW5nZW50LDAuMCkpLnh5ejt2ZWMzIERpcl9Xb3JsZF9RNDA9KHdvcmxkKnZlYzQoKGNyb3NzKG5vcm1hbCx0YW5nZW50KSksMC4wKSkueHl6O2Zsb2F0IE1heEFCX1EyND1tYXgoX1R1bmluZ19Nb3Rpb25fLF9Nb3Rpb25fKTtmbG9hdCBMZW5ndGhfUTE2PWxlbmd0aChEaXJfV29ybGRfUTQxKTtmbG9hdCBMZW5ndGhfUTE3PWxlbmd0aChEaXJfV29ybGRfUTQwKTtib29sIEdyZWF0ZXJfVGhhbl9RMzc9TWF4QUJfUTI0PjAuMDt2ZWMzIFNpemVzX1EzNTt2ZWMyIFhZX1EzNTtTaXplc19RMzU9KF9BYnNvbHV0ZV9TaXplc18gPyB2ZWMzKExlbmd0aF9RMTYsTGVuZ3RoX1ExNywwKSA6IHZlYzMoTGVuZ3RoX1ExNi9MZW5ndGhfUTE3LDEsMCkpO1hZX1EzNT0odXYtdmVjMigwLjUsMC41KSkqU2l6ZXNfUTM1Lnh5O3ZlYzMgUmVzdWx0X1EzOD1HcmVhdGVyX1RoYW5fUTM3ID8gcG9zaXRpb24gOiB2ZWMzKDAsMCwwKTt2ZWMzIFBvc19Xb3JsZF9RMzk9KHdvcmxkKnZlYzQoUmVzdWx0X1EzOCwxLjApKS54eXo7dmVjMyBQb3NpdGlvbj1Qb3NfV29ybGRfUTM5O3ZlYzMgTm9ybWFsPVNpemVzX1EzNTt2ZWMyIFVWPVhZX1EzNTt2ZWMzIFRhbmdlbnQ9dmVjMygwLDAsMCk7dmVjMyBCaW5vcm1hbD12ZWMzKDAsMCwwKTt2ZWM0IENvbG9yPXZlYzQoMSwxLDEsMSk7Z2xfUG9zaXRpb249dmlld1Byb2plY3Rpb24qdmVjNChQb3NpdGlvbiwxKTt2Tm9ybWFsPU5vcm1hbDt2VVY9VVY7fWA7XG4vLyBTaWRlZWZmZWN0XG5TaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVbbmFtZV0gPSBzaGFkZXI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbXJkbEJhY2tnbG93VmVydGV4U2hhZGVyID0geyBuYW1lLCBzaGFkZXIgfTtcbiIsIi8vIERvIG5vdCBlZGl0LlxuaW1wb3J0IHsgU2hhZGVyU3RvcmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL3NoYWRlclN0b3JlXCI7XG5cbmNvbnN0IG5hbWUgPSBcIm1yZGxCYWNrcGxhdGVQaXhlbFNoYWRlclwiO1xuY29uc3Qgc2hhZGVyID0gYHVuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjt2YXJ5aW5nIHZlYzMgdlBvc2l0aW9uO3ZhcnlpbmcgdmVjMyB2Tm9ybWFsO3ZhcnlpbmcgdmVjMiB2VVY7dmFyeWluZyB2ZWMzIHZUYW5nZW50O3ZhcnlpbmcgdmVjMyB2Qmlub3JtYWw7dmFyeWluZyB2ZWM0IHZFeHRyYTE7dmFyeWluZyB2ZWM0IHZFeHRyYTI7dW5pZm9ybSBmbG9hdCBfUmFkaXVzXzt1bmlmb3JtIGZsb2F0IF9MaW5lX1dpZHRoXzt1bmlmb3JtIGJvb2wgX0Fic29sdXRlX1NpemVzXzt1bmlmb3JtIGZsb2F0IF9GaWx0ZXJfV2lkdGhfO3VuaWZvcm0gdmVjNCBfQmFzZV9Db2xvcl87dW5pZm9ybSB2ZWM0IF9MaW5lX0NvbG9yXzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfVG9wX0xlZnRfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Ub3BfUmlnaHRfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Cb3R0b21fTGVmdF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX0JvdHRvbV9SaWdodF87dW5pZm9ybSBmbG9hdCBfUmF0ZV87dW5pZm9ybSB2ZWM0IF9IaWdobGlnaHRfQ29sb3JfO3VuaWZvcm0gZmxvYXQgX0hpZ2hsaWdodF9XaWR0aF87dW5pZm9ybSB2ZWM0IF9IaWdobGlnaHRfVHJhbnNmb3JtXzt1bmlmb3JtIGZsb2F0IF9IaWdobGlnaHRfO3VuaWZvcm0gZmxvYXQgX0lyaWRlc2NlbmNlX0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfSXJpZGVzY2VuY2VfRWRnZV9JbnRlbnNpdHlfO3VuaWZvcm0gdmVjNCBfSXJpZGVzY2VuY2VfVGludF87dW5pZm9ybSBzYW1wbGVyMkQgX0lyaWRlc2NlbnRfTWFwXzt1bmlmb3JtIGZsb2F0IF9BbmdsZV87dW5pZm9ybSBib29sIF9SZWZsZWN0ZWRfO3VuaWZvcm0gZmxvYXQgX0ZyZXF1ZW5jeV87dW5pZm9ybSBmbG9hdCBfVmVydGljYWxfT2Zmc2V0Xzt1bmlmb3JtIHZlYzQgX0dyYWRpZW50X0NvbG9yXzt1bmlmb3JtIHZlYzQgX1RvcF9MZWZ0Xzt1bmlmb3JtIHZlYzQgX1RvcF9SaWdodF87dW5pZm9ybSB2ZWM0IF9Cb3R0b21fTGVmdF87dW5pZm9ybSB2ZWM0IF9Cb3R0b21fUmlnaHRfO3VuaWZvcm0gZmxvYXQgX0VkZ2VfV2lkdGhfO3VuaWZvcm0gZmxvYXQgX0VkZ2VfUG93ZXJfO3VuaWZvcm0gZmxvYXQgX0xpbmVfR3JhZGllbnRfQmxlbmRfO3VuaWZvcm0gZmxvYXQgX0ZhZGVfT3V0Xzt2b2lkIEZhc3RMaW5lYXJUb3NSR0JfQjM1MyhcbnZlYzQgTGluZWFyLFxub3V0IHZlYzQgc1JHQilcbntzUkdCLnJnYj1zcXJ0KGNsYW1wKExpbmVhci5yZ2IsMC4wLDEuMCkpO3NSR0IuYT1MaW5lYXIuYTt9XG52b2lkIFJvdW5kX1JlY3RfRnJhZ21lbnRfQjMzMihcbmZsb2F0IFJhZGl1cyxcbmZsb2F0IExpbmVfV2lkdGgsXG52ZWM0IExpbmVfQ29sb3IsXG5mbG9hdCBGaWx0ZXJfV2lkdGgsXG52ZWMyIFVWLFxuZmxvYXQgTGluZV9WaXNpYmlsaXR5LFxudmVjNCBSZWN0X1Bhcm1zLFxudmVjNCBGaWxsX0NvbG9yLFxub3V0IHZlYzQgQ29sb3IpXG57ZmxvYXQgZD1sZW5ndGgobWF4KGFicyhVViktUmVjdF9QYXJtcy54eSwwLjApKTtmbG9hdCBkeD1tYXgoZndpZHRoKGQpKkZpbHRlcl9XaWR0aCwwLjAwMDAxKTtmbG9hdCBnPW1pbihSZWN0X1Bhcm1zLnosUmVjdF9QYXJtcy53KTtmbG9hdCBkZ3JhZD1tYXgoZndpZHRoKGcpKkZpbHRlcl9XaWR0aCwwLjAwMDAxKTtmbG9hdCBJbnNpZGVfUmVjdD1jbGFtcChnL2RncmFkLDAuMCwxLjApO2Zsb2F0IGlubmVyPWNsYW1wKChkK2R4KjAuNS1tYXgoUmFkaXVzLUxpbmVfV2lkdGgsZC1keCowLjUpKS9keCwwLjAsMS4wKTtDb2xvcj1jbGFtcChtaXgoRmlsbF9Db2xvcixMaW5lX0NvbG9yLGlubmVyKSwwLjAsMS4wKSpJbnNpZGVfUmVjdDt9XG52b2lkIElyaWRlc2NlbmNlX0IzNDMoXG52ZWMzIFBvc2l0aW9uLFxudmVjMyBOb3JtYWwsXG52ZWMyIFVWLFxudmVjMyBBeGlzLFxudmVjMyBFeWUsXG52ZWM0IFRpbnQsXG5zYW1wbGVyMkQgVGV4dHVyZSxcbmJvb2wgUmVmbGVjdGVkLFxuZmxvYXQgRnJlcXVlbmN5LFxuZmxvYXQgVmVydGljYWxfT2Zmc2V0LFxub3V0IHZlYzQgQ29sb3IpXG57dmVjMyBpPW5vcm1hbGl6ZShQb3NpdGlvbi1FeWUpO3ZlYzMgcj1yZWZsZWN0KGksTm9ybWFsKTtmbG9hdCBpZG90YT1kb3QoaSxBeGlzKTtmbG9hdCBpZG90cj1kb3QoaSxyKTtmbG9hdCB4PVJlZmxlY3RlZCA/IGlkb3RyIDogaWRvdGE7dmVjMiB4eTt4eS54PWZyYWN0KCh4KkZyZXF1ZW5jeSsxLjApKjAuNStVVi55KlZlcnRpY2FsX09mZnNldCk7eHkueT0wLjU7Q29sb3I9dGV4dHVyZShUZXh0dXJlLHh5KTtDb2xvci5yZ2IqPVRpbnQucmdiO31cbnZvaWQgU2NhbGVfUkdCX0IzNDYoXG52ZWM0IENvbG9yLFxuZmxvYXQgU2NhbGFyLFxub3V0IHZlYzQgUmVzdWx0KVxue1Jlc3VsdD12ZWM0KFNjYWxhcixTY2FsYXIsU2NhbGFyLDEpKkNvbG9yO31cbnZvaWQgU2NhbGVfUkdCX0IzNDQoXG5mbG9hdCBTY2FsYXIsXG52ZWM0IENvbG9yLFxub3V0IHZlYzQgUmVzdWx0KVxue1Jlc3VsdD12ZWM0KFNjYWxhcixTY2FsYXIsU2NhbGFyLDEpKkNvbG9yO31cbnZvaWQgTGluZV9GcmFnbWVudF9CMzYyKFxudmVjNCBCYXNlX0NvbG9yLFxudmVjNCBIaWdobGlnaHRfQ29sb3IsXG5mbG9hdCBIaWdobGlnaHRfV2lkdGgsXG52ZWMzIExpbmVfVmVydGV4LFxuZmxvYXQgSGlnaGxpZ2h0LFxub3V0IHZlYzQgTGluZV9Db2xvcilcbntmbG9hdCBrMj0xLjAtY2xhbXAoYWJzKExpbmVfVmVydGV4LnkvSGlnaGxpZ2h0X1dpZHRoKSwwLjAsMS4wKTtMaW5lX0NvbG9yPW1peChCYXNlX0NvbG9yLEhpZ2hsaWdodF9Db2xvcixIaWdobGlnaHQqazIpO31cbnZvaWQgRWRnZV9CMzU2KFxudmVjNCBSZWN0UGFybXMsXG5mbG9hdCBSYWRpdXMsXG5mbG9hdCBMaW5lX1dpZHRoLFxudmVjMiBVVixcbmZsb2F0IEVkZ2VfV2lkdGgsXG5mbG9hdCBFZGdlX1Bvd2VyLFxub3V0IGZsb2F0IFJlc3VsdClcbntmbG9hdCBkPWxlbmd0aChtYXgoYWJzKFVWKS1SZWN0UGFybXMueHksMC4wKSk7ZmxvYXQgZWRnZT0xLjAtY2xhbXAoKDEuMC1kLyhSYWRpdXMtTGluZV9XaWR0aCkpL0VkZ2VfV2lkdGgsMC4wLDEuMCk7UmVzdWx0PXBvdyhlZGdlLEVkZ2VfUG93ZXIpO31cbnZvaWQgR3JhZGllbnRfQjM1NShcbnZlYzQgR3JhZGllbnRfQ29sb3IsXG52ZWM0IFRvcF9MZWZ0LFxudmVjNCBUb3BfUmlnaHQsXG52ZWM0IEJvdHRvbV9MZWZ0LFxudmVjNCBCb3R0b21fUmlnaHQsXG52ZWMyIFVWLFxub3V0IHZlYzQgUmVzdWx0KVxue3ZlYzMgdG9wPVRvcF9MZWZ0LnJnYisoVG9wX1JpZ2h0LnJnYi1Ub3BfTGVmdC5yZ2IpKlVWLng7dmVjMyBib3R0b209Qm90dG9tX0xlZnQucmdiKyhCb3R0b21fUmlnaHQucmdiLUJvdHRvbV9MZWZ0LnJnYikqVVYueDtSZXN1bHQucmdiPUdyYWRpZW50X0NvbG9yLnJnYiooYm90dG9tKyh0b3AtYm90dG9tKSpVVi55KTtSZXN1bHQuYT0xLjA7fVxudm9pZCBtYWluKClcbntmbG9hdCBYX1EzMzg7ZmxvYXQgWV9RMzM4O2Zsb2F0IFpfUTMzODtmbG9hdCBXX1EzMzg7WF9RMzM4PXZFeHRyYTIueDtZX1EzMzg9dkV4dHJhMi55O1pfUTMzOD12RXh0cmEyLno7V19RMzM4PXZFeHRyYTIudzt2ZWM0IENvbG9yX1EzNDM7XG4jaWYgSVJJREVTQ0VOQ0VfRU5BQkxFXG5JcmlkZXNjZW5jZV9CMzQzKHZQb3NpdGlvbix2Tm9ybWFsLHZVVix2Qmlub3JtYWwsY2FtZXJhUG9zaXRpb24sX0lyaWRlc2NlbmNlX1RpbnRfLF9JcmlkZXNjZW50X01hcF8sX1JlZmxlY3RlZF8sX0ZyZXF1ZW5jeV8sX1ZlcnRpY2FsX09mZnNldF8sQ29sb3JfUTM0Myk7XG4jZWxzZVxuQ29sb3JfUTM0Mz12ZWM0KDAsMCwwLDApO1xuI2VuZGlmXG52ZWM0IFJlc3VsdF9RMzQ0O1NjYWxlX1JHQl9CMzQ0KF9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfLENvbG9yX1EzNDMsUmVzdWx0X1EzNDQpO3ZlYzQgTGluZV9Db2xvcl9RMzYyO0xpbmVfRnJhZ21lbnRfQjM2MihfTGluZV9Db2xvcl8sX0hpZ2hsaWdodF9Db2xvcl8sX0hpZ2hsaWdodF9XaWR0aF8sdlRhbmdlbnQsX0hpZ2hsaWdodF8sTGluZV9Db2xvcl9RMzYyKTtmbG9hdCBSZXN1bHRfUTM1NjtcbiNpZiBFREdFX09OTFlcbkVkZ2VfQjM1Nih2RXh0cmExLFpfUTMzOCxXX1EzMzgsdlVWLF9FZGdlX1dpZHRoXyxfRWRnZV9Qb3dlcl8sUmVzdWx0X1EzNTYpO1xuI2Vsc2VcblJlc3VsdF9RMzU2PTEuMDtcbiNlbmRpZlxudmVjMiBWZWMyX1EzMzk9dmVjMihYX1EzMzgsWV9RMzM4KTt2ZWM0IFJlc3VsdF9RMzU1O0dyYWRpZW50X0IzNTUoX0dyYWRpZW50X0NvbG9yXyxfVG9wX0xlZnRfLF9Ub3BfUmlnaHRfLF9Cb3R0b21fTGVmdF8sX0JvdHRvbV9SaWdodF8sVmVjMl9RMzM5LFJlc3VsdF9RMzU1KTt2ZWM0IExpbmVhcl9RMzQ4O0xpbmVhcl9RMzQ4LnJnYj1jbGFtcChSZXN1bHRfUTM1NS5yZ2IqUmVzdWx0X1EzNTUucmdiLDAuMCwxLjApO0xpbmVhcl9RMzQ4LmE9UmVzdWx0X1EzNTUuYTt2ZWM0IFJlc3VsdF9RMzQ2O1NjYWxlX1JHQl9CMzQ2KExpbmVhcl9RMzQ4LFJlc3VsdF9RMzU2LFJlc3VsdF9RMzQ2KTt2ZWM0IFN1bV9RMzQ1PVJlc3VsdF9RMzQ2K1Jlc3VsdF9RMzQ0O3ZlYzQgQ29sb3JfQXRfVF9RMzQ3PW1peChMaW5lX0NvbG9yX1EzNjIsUmVzdWx0X1EzNDYsX0xpbmVfR3JhZGllbnRfQmxlbmRfKTt2ZWM0IEJhc2VfQW5kX0lyaWRlc2NlbnRfUTM1MDtCYXNlX0FuZF9JcmlkZXNjZW50X1EzNTA9X0Jhc2VfQ29sb3JfK3ZlYzQoU3VtX1EzNDUucmdiLDAuMCk7dmVjNCBTdW1fUTM0OT1Db2xvcl9BdF9UX1EzNDcrX0lyaWRlc2NlbmNlX0VkZ2VfSW50ZW5zaXR5XypDb2xvcl9RMzQzO3ZlYzQgUmVzdWx0X1EzNTE9U3VtX1EzNDk7IFJlc3VsdF9RMzUxLmE9MS4wO3ZlYzQgQ29sb3JfUTMzMjtSb3VuZF9SZWN0X0ZyYWdtZW50X0IzMzIoWl9RMzM4LFdfUTMzOCxSZXN1bHRfUTM1MSxfRmlsdGVyX1dpZHRoXyx2VVYsMS4wLHZFeHRyYTEsQmFzZV9BbmRfSXJpZGVzY2VudF9RMzUwLENvbG9yX1EzMzIpO3ZlYzQgUmVzdWx0X1EzNTQ9X0ZhZGVfT3V0XypDb2xvcl9RMzMyO3ZlYzQgc1JHQl9RMzUzO0Zhc3RMaW5lYXJUb3NSR0JfQjM1MyhSZXN1bHRfUTM1NCxzUkdCX1EzNTMpO3ZlYzQgT3V0X0NvbG9yPXNSR0JfUTM1MztmbG9hdCBDbGlwX1RocmVzaG9sZD0wLjAwMTtib29sIFRvX3NSR0I9ZmFsc2U7Z2xfRnJhZ0NvbG9yPU91dF9Db2xvcjt9YDtcbi8vIFNpZGVlZmZlY3RcblNoYWRlclN0b3JlLlNoYWRlcnNTdG9yZVtuYW1lXSA9IHNoYWRlcjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBtcmRsQmFja3BsYXRlUGl4ZWxTaGFkZXIgPSB7IG5hbWUsIHNoYWRlciB9O1xuIiwiLy8gRG8gbm90IGVkaXQuXG5pbXBvcnQgeyBTaGFkZXJTdG9yZSB9IGZyb20gXCJjb3JlL0VuZ2luZXMvc2hhZGVyU3RvcmVcIjtcblxuY29uc3QgbmFtZSA9IFwibXJkbEJhY2twbGF0ZVZlcnRleFNoYWRlclwiO1xuY29uc3Qgc2hhZGVyID0gYHVuaWZvcm0gbWF0NCB3b3JsZDt1bmlmb3JtIG1hdDQgdmlld1Byb2plY3Rpb247dW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO2F0dHJpYnV0ZSB2ZWMzIG5vcm1hbDthdHRyaWJ1dGUgdmVjMyB0YW5nZW50O3VuaWZvcm0gZmxvYXQgX1JhZGl1c187dW5pZm9ybSBmbG9hdCBfTGluZV9XaWR0aF87dW5pZm9ybSBib29sIF9BYnNvbHV0ZV9TaXplc187dW5pZm9ybSBmbG9hdCBfRmlsdGVyX1dpZHRoXzt1bmlmb3JtIHZlYzQgX0Jhc2VfQ29sb3JfO3VuaWZvcm0gdmVjNCBfTGluZV9Db2xvcl87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX1RvcF9MZWZ0Xzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfVG9wX1JpZ2h0Xzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfQm90dG9tX0xlZnRfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Cb3R0b21fUmlnaHRfO3VuaWZvcm0gZmxvYXQgX1JhdGVfO3VuaWZvcm0gdmVjNCBfSGlnaGxpZ2h0X0NvbG9yXzt1bmlmb3JtIGZsb2F0IF9IaWdobGlnaHRfV2lkdGhfO3VuaWZvcm0gdmVjNCBfSGlnaGxpZ2h0X1RyYW5zZm9ybV87dW5pZm9ybSBmbG9hdCBfSGlnaGxpZ2h0Xzt1bmlmb3JtIGZsb2F0IF9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX0lyaWRlc2NlbmNlX0VkZ2VfSW50ZW5zaXR5Xzt1bmlmb3JtIHZlYzQgX0lyaWRlc2NlbmNlX1RpbnRfO3VuaWZvcm0gc2FtcGxlcjJEIF9JcmlkZXNjZW50X01hcF87dW5pZm9ybSBmbG9hdCBfQW5nbGVfO3VuaWZvcm0gYm9vbCBfUmVmbGVjdGVkXzt1bmlmb3JtIGZsb2F0IF9GcmVxdWVuY3lfO3VuaWZvcm0gZmxvYXQgX1ZlcnRpY2FsX09mZnNldF87dW5pZm9ybSB2ZWM0IF9HcmFkaWVudF9Db2xvcl87dW5pZm9ybSB2ZWM0IF9Ub3BfTGVmdF87dW5pZm9ybSB2ZWM0IF9Ub3BfUmlnaHRfO3VuaWZvcm0gdmVjNCBfQm90dG9tX0xlZnRfO3VuaWZvcm0gdmVjNCBfQm90dG9tX1JpZ2h0Xzt1bmlmb3JtIGZsb2F0IF9FZGdlX1dpZHRoXzt1bmlmb3JtIGZsb2F0IF9FZGdlX1Bvd2VyXzt1bmlmb3JtIGZsb2F0IF9MaW5lX0dyYWRpZW50X0JsZW5kXzt1bmlmb3JtIGZsb2F0IF9GYWRlX091dF87dmFyeWluZyB2ZWMzIHZQb3NpdGlvbjt2YXJ5aW5nIHZlYzMgdk5vcm1hbDt2YXJ5aW5nIHZlYzIgdlVWO3ZhcnlpbmcgdmVjMyB2VGFuZ2VudDt2YXJ5aW5nIHZlYzMgdkJpbm9ybWFsO3ZhcnlpbmcgdmVjNCB2RXh0cmExO3ZhcnlpbmcgdmVjNCB2RXh0cmEyO3ZvaWQgT2JqZWN0X1RvX1dvcmxkX1Bvc19CMzE0KFxudmVjMyBQb3NfT2JqZWN0LFxub3V0IHZlYzMgUG9zX1dvcmxkKVxue1Bvc19Xb3JsZD0od29ybGQqdmVjNChQb3NfT2JqZWN0LDEuMCkpLnh5ejt9XG52b2lkIFJvdW5kX1JlY3RfVmVydGV4X0IzNTcoXG52ZWMyIFVWLFxuZmxvYXQgUmFkaXVzLFxuZmxvYXQgTWFyZ2luLFxuZmxvYXQgQW5pc290cm9weSxcbmZsb2F0IEdyYWRpZW50MSxcbmZsb2F0IEdyYWRpZW50MixcbnZlYzMgTm9ybWFsLFxudmVjNCBDb2xvcl9TY2FsZV9UcmFuc2xhdGUsXG5vdXQgdmVjMiBSZWN0X1VWLFxub3V0IHZlYzQgUmVjdF9QYXJtcyxcbm91dCB2ZWMyIFNjYWxlX1hZLFxub3V0IHZlYzIgTGluZV9VVixcbm91dCB2ZWMyIENvbG9yX1VWX0luZm8pXG57U2NhbGVfWFk9dmVjMihBbmlzb3Ryb3B5LDEuMCk7TGluZV9VVj0oVVYtdmVjMigwLjUsMC41KSk7UmVjdF9VVj1MaW5lX1VWKlNjYWxlX1hZO1JlY3RfUGFybXMueHk9U2NhbGVfWFkqMC41LXZlYzIoUmFkaXVzLFJhZGl1cyktdmVjMihNYXJnaW4sTWFyZ2luKTtSZWN0X1Bhcm1zLno9R3JhZGllbnQxOyBcblJlY3RfUGFybXMudz1HcmFkaWVudDI7Q29sb3JfVVZfSW5mbz0oTGluZV9VVit2ZWMyKDAuNSwwLjUpKSpDb2xvcl9TY2FsZV9UcmFuc2xhdGUueHkrQ29sb3JfU2NhbGVfVHJhbnNsYXRlLnp3O31cbnZvaWQgTGluZV9WZXJ0ZXhfQjMzMyhcbnZlYzIgU2NhbGVfWFksXG52ZWMyIFVWLFxuZmxvYXQgVGltZSxcbmZsb2F0IFJhdGUsXG52ZWM0IEhpZ2hsaWdodF9UcmFuc2Zvcm0sXG5vdXQgdmVjMyBMaW5lX1ZlcnRleClcbntmbG9hdCBhbmdsZTI9KFJhdGUqVGltZSkqMi4wKjMuMTQxNjtmbG9hdCBzaW5BbmdsZTI9c2luKGFuZ2xlMik7ZmxvYXQgY29zQW5nbGUyPWNvcyhhbmdsZTIpO3ZlYzIgeGZvcm1VVj1VVipIaWdobGlnaHRfVHJhbnNmb3JtLnh5K0hpZ2hsaWdodF9UcmFuc2Zvcm0uenc7TGluZV9WZXJ0ZXgueD0wLjA7TGluZV9WZXJ0ZXgueT1jb3NBbmdsZTIqeGZvcm1VVi54LXNpbkFuZ2xlMip4Zm9ybVVWLnk7TGluZV9WZXJ0ZXguej0wLjA7IH1cbnZvaWQgUGlja0Rpcl9CMzM0KFxuZmxvYXQgRGVncmVlcyxcbnZlYzMgRGlyWCxcbnZlYzMgRGlyWSxcbm91dCB2ZWMzIERpcilcbntmbG9hdCBhPURlZ3JlZXMqMy4xNDE1OS8xODAuMDtEaXI9Y29zKGEpKkRpclgrc2luKGEpKkRpclk7fVxudm9pZCBNb3ZlX1ZlcnRzX0IzMjcoXG5mbG9hdCBBbmlzb3Ryb3B5LFxudmVjMyBQLFxuZmxvYXQgUmFkaXVzLFxub3V0IHZlYzMgTmV3X1AsXG5vdXQgdmVjMiBOZXdfVVYsXG5vdXQgZmxvYXQgUmFkaWFsX0dyYWRpZW50LFxub3V0IHZlYzMgUmFkaWFsX0Rpcilcbnt2ZWMyIFVWPVAueHkqMi4wKzAuNTt2ZWMyIGNlbnRlcj1jbGFtcChVViwwLjAsMS4wKTt2ZWMyIGRlbHRhPVVWLWNlbnRlcjt2ZWMyIHIyPTIuMCp2ZWMyKFJhZGl1cy9Bbmlzb3Ryb3B5LFJhZGl1cyk7TmV3X1VWPWNlbnRlcityMiooVVYtMi4wKmNlbnRlciswLjUpO05ld19QPXZlYzMoTmV3X1VWLTAuNSxQLnopO1JhZGlhbF9HcmFkaWVudD0xLjAtbGVuZ3RoKGRlbHRhKSoyLjA7UmFkaWFsX0Rpcj12ZWMzKGRlbHRhKnIyLDAuMCk7fVxudm9pZCBQaWNrX1JhZGl1c19CMzM2KFxuZmxvYXQgUmFkaXVzLFxuZmxvYXQgUmFkaXVzX1RvcF9MZWZ0LFxuZmxvYXQgUmFkaXVzX1RvcF9SaWdodCxcbmZsb2F0IFJhZGl1c19Cb3R0b21fTGVmdCxcbmZsb2F0IFJhZGl1c19Cb3R0b21fUmlnaHQsXG52ZWMzIFBvc2l0aW9uLFxub3V0IGZsb2F0IFJlc3VsdClcbntib29sIHdoaWNoWT1Qb3NpdGlvbi55PjAuMDtSZXN1bHQ9UG9zaXRpb24ueDwwLjAgPyAod2hpY2hZID8gUmFkaXVzX1RvcF9MZWZ0IDogUmFkaXVzX0JvdHRvbV9MZWZ0KSA6ICh3aGljaFkgPyBSYWRpdXNfVG9wX1JpZ2h0IDogUmFkaXVzX0JvdHRvbV9SaWdodCk7UmVzdWx0Kj1SYWRpdXM7fVxudm9pZCBFZGdlX0FBX1ZlcnRleF9CMzI4KFxudmVjMyBQb3NpdGlvbl9Xb3JsZCxcbnZlYzMgUG9zaXRpb25fT2JqZWN0LFxudmVjMyBOb3JtYWxfT2JqZWN0LFxudmVjMyBFeWUsXG5mbG9hdCBSYWRpYWxfR3JhZGllbnQsXG52ZWMzIFJhZGlhbF9EaXIsXG52ZWMzIFRhbmdlbnQsXG5vdXQgZmxvYXQgR3JhZGllbnQxLFxub3V0IGZsb2F0IEdyYWRpZW50Milcbnt2ZWMzIEk9KEV5ZS1Qb3NpdGlvbl9Xb3JsZCk7dmVjMyBUPSh2ZWM0KFRhbmdlbnQsMC4wKSkueHl6O2Zsb2F0IGc9KGRvdChULEkpPDAuMCkgPyAwLjAgOiAxLjA7aWYgKE5vcm1hbF9PYmplY3Quej09MC4wKSB7IFxuR3JhZGllbnQxPVBvc2l0aW9uX09iamVjdC56PjAuMCA/IGcgOiAxLjA7R3JhZGllbnQyPVBvc2l0aW9uX09iamVjdC56PjAuMCA/IDEuMCA6IGc7fSBlbHNlIHtHcmFkaWVudDE9ZysoMS4wLWcpKihSYWRpYWxfR3JhZGllbnQpO0dyYWRpZW50Mj0xLjA7fX1cbnZvaWQgT2JqZWN0X1RvX1dvcmxkX0Rpcl9CMzMwKFxudmVjMyBEaXJfT2JqZWN0LFxub3V0IHZlYzMgQmlub3JtYWxfV29ybGQsXG5vdXQgdmVjMyBCaW5vcm1hbF9Xb3JsZF9OLFxub3V0IGZsb2F0IEJpbm9ybWFsX0xlbmd0aClcbntCaW5vcm1hbF9Xb3JsZD0od29ybGQqdmVjNChEaXJfT2JqZWN0LDAuMCkpLnh5ejtCaW5vcm1hbF9MZW5ndGg9bGVuZ3RoKEJpbm9ybWFsX1dvcmxkKTtCaW5vcm1hbF9Xb3JsZF9OPUJpbm9ybWFsX1dvcmxkL0Jpbm9ybWFsX0xlbmd0aDt9XG52b2lkIFJlbGF0aXZlT3JBYnNvbHV0ZURldGFpbF9CMzQxKFxuZmxvYXQgTm9taW5hbF9SYWRpdXMsXG5mbG9hdCBOb21pbmFsX0xpbmVXaWR0aCxcbmJvb2wgQWJzb2x1dGVfTWVhc3VyZW1lbnRzLFxuZmxvYXQgSGVpZ2h0LFxub3V0IGZsb2F0IFJhZGl1cyxcbm91dCBmbG9hdCBMaW5lX1dpZHRoKVxue2Zsb2F0IHNjYWxlPUFic29sdXRlX01lYXN1cmVtZW50cyA/IDEuMC9IZWlnaHQgOiAxLjA7UmFkaXVzPU5vbWluYWxfUmFkaXVzKnNjYWxlO0xpbmVfV2lkdGg9Tm9taW5hbF9MaW5lV2lkdGgqc2NhbGU7fVxudm9pZCBtYWluKClcbnt2ZWMzIE5ybV9Xb3JsZF9RMzI2O05ybV9Xb3JsZF9RMzI2PW5vcm1hbGl6ZSgod29ybGQqdmVjNChub3JtYWwsMC4wKSkueHl6KTt2ZWMzIFRhbmdlbnRfV29ybGRfUTMyOTt2ZWMzIFRhbmdlbnRfV29ybGRfTl9RMzI5O2Zsb2F0IFRhbmdlbnRfTGVuZ3RoX1EzMjk7VGFuZ2VudF9Xb3JsZF9RMzI5PSh3b3JsZCp2ZWM0KHZlYzMoMSwwLDApLDAuMCkpLnh5ejtUYW5nZW50X0xlbmd0aF9RMzI5PWxlbmd0aChUYW5nZW50X1dvcmxkX1EzMjkpO1RhbmdlbnRfV29ybGRfTl9RMzI5PVRhbmdlbnRfV29ybGRfUTMyOS9UYW5nZW50X0xlbmd0aF9RMzI5O3ZlYzMgQmlub3JtYWxfV29ybGRfUTMzMDt2ZWMzIEJpbm9ybWFsX1dvcmxkX05fUTMzMDtmbG9hdCBCaW5vcm1hbF9MZW5ndGhfUTMzMDtPYmplY3RfVG9fV29ybGRfRGlyX0IzMzAodmVjMygwLDEsMCksQmlub3JtYWxfV29ybGRfUTMzMCxCaW5vcm1hbF9Xb3JsZF9OX1EzMzAsQmlub3JtYWxfTGVuZ3RoX1EzMzApO2Zsb2F0IFJhZGl1c19RMzQxO2Zsb2F0IExpbmVfV2lkdGhfUTM0MTtSZWxhdGl2ZU9yQWJzb2x1dGVEZXRhaWxfQjM0MShfUmFkaXVzXyxfTGluZV9XaWR0aF8sX0Fic29sdXRlX1NpemVzXyxCaW5vcm1hbF9MZW5ndGhfUTMzMCxSYWRpdXNfUTM0MSxMaW5lX1dpZHRoX1EzNDEpO3ZlYzMgRGlyX1EzMzQ7UGlja0Rpcl9CMzM0KF9BbmdsZV8sVGFuZ2VudF9Xb3JsZF9OX1EzMjksQmlub3JtYWxfV29ybGRfTl9RMzMwLERpcl9RMzM0KTtmbG9hdCBSZXN1bHRfUTMzNjtQaWNrX1JhZGl1c19CMzM2KFJhZGl1c19RMzQxLF9SYWRpdXNfVG9wX0xlZnRfLF9SYWRpdXNfVG9wX1JpZ2h0XyxfUmFkaXVzX0JvdHRvbV9MZWZ0XyxfUmFkaXVzX0JvdHRvbV9SaWdodF8scG9zaXRpb24sUmVzdWx0X1EzMzYpO2Zsb2F0IEFuaXNvdHJvcHlfUTMzMT1UYW5nZW50X0xlbmd0aF9RMzI5L0Jpbm9ybWFsX0xlbmd0aF9RMzMwO3ZlYzQgT3V0X0NvbG9yX1EzMzc9dmVjNChSZXN1bHRfUTMzNixMaW5lX1dpZHRoX1EzNDEsMCwxKTt2ZWMzIE5ld19QX1EzMjc7dmVjMiBOZXdfVVZfUTMyNztmbG9hdCBSYWRpYWxfR3JhZGllbnRfUTMyNzt2ZWMzIFJhZGlhbF9EaXJfUTMyNztNb3ZlX1ZlcnRzX0IzMjcoQW5pc290cm9weV9RMzMxLHBvc2l0aW9uLFJlc3VsdF9RMzM2LE5ld19QX1EzMjcsTmV3X1VWX1EzMjcsUmFkaWFsX0dyYWRpZW50X1EzMjcsUmFkaWFsX0Rpcl9RMzI3KTt2ZWMzIFBvc19Xb3JsZF9RMzE0O09iamVjdF9Ub19Xb3JsZF9Qb3NfQjMxNChOZXdfUF9RMzI3LFBvc19Xb3JsZF9RMzE0KTtmbG9hdCBHcmFkaWVudDFfUTMyODtmbG9hdCBHcmFkaWVudDJfUTMyODtcbiNpZiBTTU9PVEhfRURHRVNcbkVkZ2VfQUFfVmVydGV4X0IzMjgoUG9zX1dvcmxkX1EzMTQscG9zaXRpb24sbm9ybWFsLGNhbWVyYVBvc2l0aW9uLFJhZGlhbF9HcmFkaWVudF9RMzI3LFJhZGlhbF9EaXJfUTMyNyx0YW5nZW50LEdyYWRpZW50MV9RMzI4LEdyYWRpZW50Ml9RMzI4KTtcbiNlbHNlXG5HcmFkaWVudDFfUTMyOD0xLjA7R3JhZGllbnQyX1EzMjg9MS4wO1xuI2VuZGlmXG52ZWMyIFJlY3RfVVZfUTM1Nzt2ZWM0IFJlY3RfUGFybXNfUTM1Nzt2ZWMyIFNjYWxlX1hZX1EzNTc7dmVjMiBMaW5lX1VWX1EzNTc7dmVjMiBDb2xvcl9VVl9JbmZvX1EzNTc7Um91bmRfUmVjdF9WZXJ0ZXhfQjM1NyhOZXdfVVZfUTMyNyxSZXN1bHRfUTMzNiwwLjAsQW5pc290cm9weV9RMzMxLEdyYWRpZW50MV9RMzI4LEdyYWRpZW50Ml9RMzI4LG5vcm1hbCx2ZWM0KDEsMSwwLDApLFJlY3RfVVZfUTM1NyxSZWN0X1Bhcm1zX1EzNTcsU2NhbGVfWFlfUTM1NyxMaW5lX1VWX1EzNTcsQ29sb3JfVVZfSW5mb19RMzU3KTt2ZWMzIExpbmVfVmVydGV4X1EzMzM7TGluZV9WZXJ0ZXhfQjMzMyhTY2FsZV9YWV9RMzU3LExpbmVfVVZfUTM1NywoMjAuMCksX1JhdGVfLF9IaWdobGlnaHRfVHJhbnNmb3JtXyxMaW5lX1ZlcnRleF9RMzMzKTtmbG9hdCBYX1EzNTk7ZmxvYXQgWV9RMzU5O1hfUTM1OT1Db2xvcl9VVl9JbmZvX1EzNTcueDtZX1EzNTk9Q29sb3JfVVZfSW5mb19RMzU3Lnk7dmVjNCBWZWM0X1EzNTg9dmVjNChYX1EzNTksWV9RMzU5LFJlc3VsdF9RMzM2LExpbmVfV2lkdGhfUTM0MSk7dmVjMyBQb3NpdGlvbj1Qb3NfV29ybGRfUTMxNDt2ZWMzIE5vcm1hbD1Ocm1fV29ybGRfUTMyNjt2ZWMyIFVWPVJlY3RfVVZfUTM1Nzt2ZWMzIFRhbmdlbnQ9TGluZV9WZXJ0ZXhfUTMzMzt2ZWMzIEJpbm9ybWFsPURpcl9RMzM0O3ZlYzQgQ29sb3I9T3V0X0NvbG9yX1EzMzc7dmVjNCBFeHRyYTE9UmVjdF9QYXJtc19RMzU3O3ZlYzQgRXh0cmEyPVZlYzRfUTM1ODt2ZWM0IEV4dHJhMz12ZWM0KDAsMCwwLDApO2dsX1Bvc2l0aW9uPXZpZXdQcm9qZWN0aW9uKnZlYzQoUG9zaXRpb24sMSk7dlBvc2l0aW9uPVBvc2l0aW9uO3ZOb3JtYWw9Tm9ybWFsO3ZVVj1VVjt2VGFuZ2VudD1UYW5nZW50O3ZCaW5vcm1hbD1CaW5vcm1hbDt2RXh0cmExPUV4dHJhMTt2RXh0cmEyPUV4dHJhMjt9YDtcbi8vIFNpZGVlZmZlY3RcblNoYWRlclN0b3JlLlNoYWRlcnNTdG9yZVtuYW1lXSA9IHNoYWRlcjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBtcmRsQmFja3BsYXRlVmVydGV4U2hhZGVyID0geyBuYW1lLCBzaGFkZXIgfTtcbiIsIi8vIERvIG5vdCBlZGl0LlxuaW1wb3J0IHsgU2hhZGVyU3RvcmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL3NoYWRlclN0b3JlXCI7XG5cbmNvbnN0IG5hbWUgPSBcIm1yZGxGcm9udHBsYXRlUGl4ZWxTaGFkZXJcIjtcbmNvbnN0IHNoYWRlciA9IGB1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247dmFyeWluZyB2ZWMzIHZOb3JtYWw7dmFyeWluZyB2ZWMyIHZVVjt2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7dmFyeWluZyB2ZWM0IHZFeHRyYTE7dmFyeWluZyB2ZWM0IHZFeHRyYTI7dmFyeWluZyB2ZWM0IHZFeHRyYTM7dW5pZm9ybSBmbG9hdCBfUmFkaXVzXzt1bmlmb3JtIGZsb2F0IF9MaW5lX1dpZHRoXzt1bmlmb3JtIGJvb2wgX1JlbGF0aXZlX1RvX0hlaWdodF87dW5pZm9ybSBmbG9hdCBfRmlsdGVyX1dpZHRoXzt1bmlmb3JtIHZlYzQgX0VkZ2VfQ29sb3JfO3VuaWZvcm0gZmxvYXQgX0ZhZGVfT3V0Xzt1bmlmb3JtIGJvb2wgX1Ntb290aF9FZGdlc187dW5pZm9ybSBib29sIF9CbG9iX0VuYWJsZV87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV9MZW5ndGhfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfSW5uZXJfRmFkZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlXzt1bmlmb3JtIGZsb2F0IF9CbG9iX1B1bHNlX01heF9TaXplXzt1bmlmb3JtIGJvb2wgX0Jsb2JfRW5hYmxlXzJfO3VuaWZvcm0gdmVjMyBfQmxvYl9Qb3NpdGlvbl8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX05lYXJfU2l6ZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0lubmVyX0ZhZGVfMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ZhZGVfMl87dW5pZm9ybSBmbG9hdCBfR2F6ZV9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX0dhemVfRm9jdXNfO3VuaWZvcm0gc2FtcGxlcjJEIF9CbG9iX1RleHR1cmVfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGlvbl9GdXp6Xzt1bmlmb3JtIGZsb2F0IF9TZWxlY3RlZF87dW5pZm9ybSBmbG9hdCBfU2VsZWN0aW9uX0ZhZGVfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGlvbl9GYWRlX1NpemVfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGVkX0Rpc3RhbmNlXzt1bmlmb3JtIGZsb2F0IF9TZWxlY3RlZF9GYWRlX0xlbmd0aF87dW5pZm9ybSBmbG9hdCBfUHJveGltaXR5X01heF9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX1Byb3hpbWl0eV9GYXJfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX1Byb3hpbWl0eV9OZWFyX1JhZGl1c187dW5pZm9ybSBmbG9hdCBfUHJveGltaXR5X0FuaXNvdHJvcHlfO3VuaWZvcm0gYm9vbCBfVXNlX0dsb2JhbF9MZWZ0X0luZGV4Xzt1bmlmb3JtIGJvb2wgX1VzZV9HbG9iYWxfUmlnaHRfSW5kZXhfO3VuaWZvcm0gdmVjNCBHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb247dW5pZm9ybSB2ZWM0IEdsb2JhbF9SaWdodF9JbmRleF9UaXBfUG9zaXRpb247dm9pZCBTY2FsZV9Db2xvcl9CNTQoXG52ZWM0IENvbG9yLFxuZmxvYXQgU2NhbGFyLFxub3V0IHZlYzQgUmVzdWx0KVxue1Jlc3VsdD1TY2FsYXIqQ29sb3I7fVxudm9pZCBTY2FsZV9SR0JfQjUwKFxudmVjNCBDb2xvcixcbmZsb2F0IFNjYWxhcixcbm91dCB2ZWM0IFJlc3VsdClcbntSZXN1bHQ9dmVjNChTY2FsYXIsU2NhbGFyLFNjYWxhciwxKSpDb2xvcjt9XG52b2lkIFByb3hpbWl0eV9GcmFnbWVudF9CNTEoXG5mbG9hdCBQcm94aW1pdHlfTWF4X0ludGVuc2l0eSxcbmZsb2F0IFByb3hpbWl0eV9OZWFyX1JhZGl1cyxcbnZlYzQgRGVsdGFzLFxuZmxvYXQgU2hvd19TZWxlY3Rpb24sXG5mbG9hdCBEaXN0YW5jZV9GYWRlMSxcbmZsb2F0IERpc3RhbmNlX0ZhZGUyLFxuZmxvYXQgU3RyZW5ndGgsXG5vdXQgZmxvYXQgUHJveGltaXR5KVxue2Zsb2F0IHByb3hpbWl0eTE9KDEuMC1jbGFtcChsZW5ndGgoRGVsdGFzLnh5KS9Qcm94aW1pdHlfTmVhcl9SYWRpdXMsMC4wLDEuMCkpKkRpc3RhbmNlX0ZhZGUxO2Zsb2F0IHByb3hpbWl0eTI9KDEuMC1jbGFtcChsZW5ndGgoRGVsdGFzLnp3KS9Qcm94aW1pdHlfTmVhcl9SYWRpdXMsMC4wLDEuMCkpKkRpc3RhbmNlX0ZhZGUyO1Byb3hpbWl0eT1TdHJlbmd0aCooUHJveGltaXR5X01heF9JbnRlbnNpdHkqbWF4KHByb3hpbWl0eTEscHJveGltaXR5MikgKigxLjAtU2hvd19TZWxlY3Rpb24pK1Nob3dfU2VsZWN0aW9uKTt9XG52b2lkIEJsb2JfRnJhZ21lbnRfQjU2KFxudmVjMiBVVixcbnZlYzMgQmxvYl9JbmZvLFxuc2FtcGxlcjJEIEJsb2JfVGV4dHVyZSxcbm91dCB2ZWM0IEJsb2JfQ29sb3IpXG57ZmxvYXQgaz1kb3QoVVYsVVYpO0Jsb2JfQ29sb3I9QmxvYl9JbmZvLnkqdGV4dHVyZShCbG9iX1RleHR1cmUsdmVjMih2ZWMyKHNxcnQoayksQmxvYl9JbmZvLngpLngsMS4wLXZlYzIoc3FydChrKSxCbG9iX0luZm8ueCkueSkpKigxLjAtY2xhbXAoaywwLjAsMS4wKSk7fVxudm9pZCBSb3VuZF9SZWN0X0ZyYWdtZW50X0I2MShcbmZsb2F0IFJhZGl1cyxcbnZlYzQgTGluZV9Db2xvcixcbmZsb2F0IEZpbHRlcl9XaWR0aCxcbmZsb2F0IExpbmVfVmlzaWJpbGl0eSxcbnZlYzQgRmlsbF9Db2xvcixcbmJvb2wgU21vb3RoX0VkZ2VzLFxudmVjNCBSZWN0X1Bhcm1zLFxub3V0IGZsb2F0IEluc2lkZV9SZWN0KVxue2Zsb2F0IGQ9bGVuZ3RoKG1heChhYnMoUmVjdF9QYXJtcy56dyktUmVjdF9QYXJtcy54eSwwLjApKTtmbG9hdCBkeD1tYXgoZndpZHRoKGQpKkZpbHRlcl9XaWR0aCwwLjAwMDAxKTtJbnNpZGVfUmVjdD1TbW9vdGhfRWRnZXMgPyBjbGFtcCgoUmFkaXVzLWQpL2R4LDAuMCwxLjApIDogMS4wLXN0ZXAoUmFkaXVzLGQpO31cbnZvaWQgbWFpbigpXG57ZmxvYXQgSXNfUXVhZF9RNTM7SXNfUXVhZF9RNTM9dk5vcm1hbC56O3ZlYzQgQmxvYl9Db2xvcl9RNTY7QmxvYl9GcmFnbWVudF9CNTYodlVWLHZUYW5nZW50LF9CbG9iX1RleHR1cmVfLEJsb2JfQ29sb3JfUTU2KTtmbG9hdCBYX1E1MjtmbG9hdCBZX1E1MjtmbG9hdCBaX1E1MjtmbG9hdCBXX1E1MjtYX1E1Mj12RXh0cmEzLng7WV9RNTI9dkV4dHJhMy55O1pfUTUyPXZFeHRyYTMuejtXX1E1Mj12RXh0cmEzLnc7ZmxvYXQgUHJveGltaXR5X1E1MTtQcm94aW1pdHlfRnJhZ21lbnRfQjUxKF9Qcm94aW1pdHlfTWF4X0ludGVuc2l0eV8sX1Byb3hpbWl0eV9OZWFyX1JhZGl1c18sdkV4dHJhMixYX1E1MixZX1E1MixaX1E1MiwxLjAsUHJveGltaXR5X1E1MSk7ZmxvYXQgSW5zaWRlX1JlY3RfUTYxO1JvdW5kX1JlY3RfRnJhZ21lbnRfQjYxKFdfUTUyLHZlYzQoMSwxLDEsMSksX0ZpbHRlcl9XaWR0aF8sMS4wLHZlYzQoMCwwLDAsMCksX1Ntb290aF9FZGdlc18sdkV4dHJhMSxJbnNpZGVfUmVjdF9RNjEpO3ZlYzQgUmVzdWx0X1E1MDtTY2FsZV9SR0JfQjUwKF9FZGdlX0NvbG9yXyxQcm94aW1pdHlfUTUxLFJlc3VsdF9RNTApO3ZlYzQgUmVzdWx0X1E0Nz1JbnNpZGVfUmVjdF9RNjEqQmxvYl9Db2xvcl9RNTY7dmVjNCBDb2xvcl9BdF9UX1E0OD1taXgoUmVzdWx0X1E1MCxSZXN1bHRfUTQ3LElzX1F1YWRfUTUzKTt2ZWM0IFJlc3VsdF9RNTQ7U2NhbGVfQ29sb3JfQjU0KENvbG9yX0F0X1RfUTQ4LF9GYWRlX091dF8sUmVzdWx0X1E1NCk7dmVjNCBPdXRfQ29sb3I9UmVzdWx0X1E1NDtmbG9hdCBDbGlwX1RocmVzaG9sZD0wLjAwMTtib29sIFRvX3NSR0I9ZmFsc2U7Z2xfRnJhZ0NvbG9yPU91dF9Db2xvcjt9YDtcbi8vIFNpZGVlZmZlY3RcblNoYWRlclN0b3JlLlNoYWRlcnNTdG9yZVtuYW1lXSA9IHNoYWRlcjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBtcmRsRnJvbnRwbGF0ZVBpeGVsU2hhZGVyID0geyBuYW1lLCBzaGFkZXIgfTtcbiIsIi8vIERvIG5vdCBlZGl0LlxuaW1wb3J0IHsgU2hhZGVyU3RvcmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL3NoYWRlclN0b3JlXCI7XG5cbmNvbnN0IG5hbWUgPSBcIm1yZGxGcm9udHBsYXRlVmVydGV4U2hhZGVyXCI7XG5jb25zdCBzaGFkZXIgPSBgdW5pZm9ybSBtYXQ0IHdvcmxkO3VuaWZvcm0gbWF0NCB2aWV3UHJvamVjdGlvbjt1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247YXR0cmlidXRlIHZlYzMgcG9zaXRpb247YXR0cmlidXRlIHZlYzMgbm9ybWFsO2F0dHJpYnV0ZSB2ZWMyIHV2O2F0dHJpYnV0ZSB2ZWMzIHRhbmdlbnQ7YXR0cmlidXRlIHZlYzQgY29sb3I7dW5pZm9ybSBmbG9hdCBfUmFkaXVzXzt1bmlmb3JtIGZsb2F0IF9MaW5lX1dpZHRoXzt1bmlmb3JtIGJvb2wgX1JlbGF0aXZlX1RvX0hlaWdodF87dW5pZm9ybSBmbG9hdCBfRmlsdGVyX1dpZHRoXzt1bmlmb3JtIHZlYzQgX0VkZ2VfQ29sb3JfO3VuaWZvcm0gZmxvYXQgX0ZhZGVfT3V0Xzt1bmlmb3JtIGJvb2wgX1Ntb290aF9FZGdlc187dW5pZm9ybSBib29sIF9CbG9iX0VuYWJsZV87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV9MZW5ndGhfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfSW5uZXJfRmFkZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlXzt1bmlmb3JtIGZsb2F0IF9CbG9iX1B1bHNlX01heF9TaXplXzt1bmlmb3JtIGJvb2wgX0Jsb2JfRW5hYmxlXzJfO3VuaWZvcm0gdmVjMyBfQmxvYl9Qb3NpdGlvbl8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX05lYXJfU2l6ZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0lubmVyX0ZhZGVfMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ZhZGVfMl87dW5pZm9ybSBmbG9hdCBfR2F6ZV9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX0dhemVfRm9jdXNfO3VuaWZvcm0gc2FtcGxlcjJEIF9CbG9iX1RleHR1cmVfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGlvbl9GdXp6Xzt1bmlmb3JtIGZsb2F0IF9TZWxlY3RlZF87dW5pZm9ybSBmbG9hdCBfU2VsZWN0aW9uX0ZhZGVfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGlvbl9GYWRlX1NpemVfO3VuaWZvcm0gZmxvYXQgX1NlbGVjdGVkX0Rpc3RhbmNlXzt1bmlmb3JtIGZsb2F0IF9TZWxlY3RlZF9GYWRlX0xlbmd0aF87dW5pZm9ybSBmbG9hdCBfUHJveGltaXR5X01heF9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX1Byb3hpbWl0eV9GYXJfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX1Byb3hpbWl0eV9OZWFyX1JhZGl1c187dW5pZm9ybSBmbG9hdCBfUHJveGltaXR5X0FuaXNvdHJvcHlfO3VuaWZvcm0gYm9vbCBfVXNlX0dsb2JhbF9MZWZ0X0luZGV4Xzt1bmlmb3JtIGJvb2wgX1VzZV9HbG9iYWxfUmlnaHRfSW5kZXhfO3VuaWZvcm0gdmVjNCBHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb247dW5pZm9ybSB2ZWM0IEdsb2JhbF9SaWdodF9JbmRleF9UaXBfUG9zaXRpb247dmFyeWluZyB2ZWMzIHZOb3JtYWw7dmFyeWluZyB2ZWMyIHZVVjt2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7dmFyeWluZyB2ZWM0IHZFeHRyYTE7dmFyeWluZyB2ZWM0IHZFeHRyYTI7dmFyeWluZyB2ZWM0IHZFeHRyYTM7dm9pZCBCbG9iX1ZlcnRleF9CNDAoXG52ZWMzIFBvc2l0aW9uLFxudmVjMyBOb3JtYWwsXG52ZWMzIFRhbmdlbnQsXG52ZWMzIEJpdGFuZ2VudCxcbnZlYzMgQmxvYl9Qb3NpdGlvbixcbmZsb2F0IEludGVuc2l0eSxcbmZsb2F0IEJsb2JfTmVhcl9TaXplLFxuZmxvYXQgQmxvYl9GYXJfU2l6ZSxcbmZsb2F0IEJsb2JfTmVhcl9EaXN0YW5jZSxcbmZsb2F0IEJsb2JfRmFyX0Rpc3RhbmNlLFxudmVjNCBWeF9Db2xvcixcbnZlYzIgVVYsXG52ZWMzIEZhY2VfQ2VudGVyLFxudmVjMiBGYWNlX1NpemUsXG52ZWMyIEluX1VWLFxuZmxvYXQgQmxvYl9GYWRlX0xlbmd0aCxcbmZsb2F0IFNlbGVjdGlvbl9GYWRlLFxuZmxvYXQgU2VsZWN0aW9uX0ZhZGVfU2l6ZSxcbmZsb2F0IElubmVyX0ZhZGUsXG5mbG9hdCBCbG9iX1B1bHNlLFxuZmxvYXQgQmxvYl9GYWRlLFxuZmxvYXQgQmxvYl9FbmFibGVkLFxuZmxvYXQgRGlzdGFuY2VPZmZzZXQsXG5vdXQgdmVjMyBPdXRfUG9zaXRpb24sXG5vdXQgdmVjMiBPdXRfVVYsXG5vdXQgdmVjMyBCbG9iX0luZm8sXG5vdXQgdmVjMiBCbG9iX1JlbGF0aXZlX1VWKVxue2Zsb2F0IGJsb2JTaXplLGZhZGVJbjt2ZWMzIEhpdF9Qb3NpdGlvbjtCbG9iX0luZm89dmVjMygwLjAsMC4wLDAuMCk7ZmxvYXQgSGl0X0Rpc3RhbmNlPWRvdChCbG9iX1Bvc2l0aW9uLUZhY2VfQ2VudGVyLE5vcm1hbCkrRGlzdGFuY2VPZmZzZXQqQmxvYl9GYXJfRGlzdGFuY2U7SGl0X1Bvc2l0aW9uPUJsb2JfUG9zaXRpb24tSGl0X0Rpc3RhbmNlKk5vcm1hbDtmbG9hdCBhYnNEPWFicyhIaXRfRGlzdGFuY2UpO2Zsb2F0IGxlcnBWYWw9Y2xhbXAoKGFic0QtQmxvYl9OZWFyX0Rpc3RhbmNlKS8oQmxvYl9GYXJfRGlzdGFuY2UtQmxvYl9OZWFyX0Rpc3RhbmNlKSwwLjAsMS4wKTtmYWRlSW49MS4wLWNsYW1wKChhYnNELUJsb2JfRmFyX0Rpc3RhbmNlKS9CbG9iX0ZhZGVfTGVuZ3RoLDAuMCwxLjApO2Zsb2F0IGlubmVyRmFkZT0xLjAtY2xhbXAoLUhpdF9EaXN0YW5jZS9Jbm5lcl9GYWRlLDAuMCwxLjApO2Zsb2F0IGZhckNsaXA9Y2xhbXAoMS4wLXN0ZXAoQmxvYl9GYXJfRGlzdGFuY2UrQmxvYl9GYWRlX0xlbmd0aCxhYnNEKSwwLjAsMS4wKTtmbG9hdCBzaXplPW1peChCbG9iX05lYXJfU2l6ZSxCbG9iX0Zhcl9TaXplLGxlcnBWYWwpKmZhckNsaXA7YmxvYlNpemU9bWl4KHNpemUsU2VsZWN0aW9uX0ZhZGVfU2l6ZSxTZWxlY3Rpb25fRmFkZSkqaW5uZXJGYWRlKkJsb2JfRW5hYmxlZDtCbG9iX0luZm8ueD1sZXJwVmFsKjAuNSswLjU7QmxvYl9JbmZvLnk9ZmFkZUluKkludGVuc2l0eSooMS4wLVNlbGVjdGlvbl9GYWRlKSpCbG9iX0ZhZGU7QmxvYl9JbmZvLngqPSgxLjAtQmxvYl9QdWxzZSk7dmVjMyBkZWx0YT1IaXRfUG9zaXRpb24tRmFjZV9DZW50ZXI7dmVjMiBibG9iQ2VudGVyWFk9dmVjMihkb3QoZGVsdGEsVGFuZ2VudCksZG90KGRlbHRhLEJpdGFuZ2VudCkpO3ZlYzIgcXVhZFVWaW49Mi4wKlVWLTEuMDsgXG52ZWMyIGJsb2JYWT1ibG9iQ2VudGVyWFkrcXVhZFVWaW4qYmxvYlNpemU7dmVjMiBibG9iQ2xpcHBlZD1jbGFtcChibG9iWFksLUZhY2VfU2l6ZSowLjUsRmFjZV9TaXplKjAuNSk7dmVjMiBibG9iVVY9KGJsb2JDbGlwcGVkLWJsb2JDZW50ZXJYWSkvbWF4KGJsb2JTaXplLDAuMDAwMSkqMi4wO3ZlYzMgYmxvYkNvcm5lcj1GYWNlX0NlbnRlcitibG9iQ2xpcHBlZC54KlRhbmdlbnQrYmxvYkNsaXBwZWQueSpCaXRhbmdlbnQ7T3V0X1Bvc2l0aW9uPW1peChQb3NpdGlvbixibG9iQ29ybmVyLFZ4X0NvbG9yLnJycik7T3V0X1VWPW1peChJbl9VVixibG9iVVYsVnhfQ29sb3IucnIpO0Jsb2JfUmVsYXRpdmVfVVY9YmxvYkNsaXBwZWQvRmFjZV9TaXplLnk7fVxudm9pZCBSb3VuZF9SZWN0X1ZlcnRleF9CMzYoXG52ZWMyIFVWLFxudmVjMyBUYW5nZW50LFxudmVjMyBCaW5vcm1hbCxcbmZsb2F0IFJhZGl1cyxcbmZsb2F0IEFuaXNvdHJvcHksXG52ZWMyIEJsb2JfQ2VudGVyX1VWLFxub3V0IHZlYzIgUmVjdF9VVixcbm91dCB2ZWMyIFNjYWxlX1hZLFxub3V0IHZlYzQgUmVjdF9QYXJtcylcbntTY2FsZV9YWT12ZWMyKEFuaXNvdHJvcHksMS4wKTtSZWN0X1VWPShVVi12ZWMyKDAuNSwwLjUpKSpTY2FsZV9YWTtSZWN0X1Bhcm1zLnh5PVNjYWxlX1hZKjAuNS12ZWMyKFJhZGl1cyxSYWRpdXMpO1JlY3RfUGFybXMuenc9QmxvYl9DZW50ZXJfVVY7fVxudmVjMiBQcm9qZWN0UHJveGltaXR5KFxudmVjMyBibG9iUG9zaXRpb24sXG52ZWMzIHBvc2l0aW9uLFxudmVjMyBjZW50ZXIsXG52ZWMzIGRpcixcbnZlYzMgeGRpcixcbnZlYzMgeWRpcixcbm91dCBmbG9hdCB2ZGlzdGFuY2Vcbilcbnt2ZWMzIGRlbHRhPWJsb2JQb3NpdGlvbi1wb3NpdGlvbjt2ZWMyIHh5PXZlYzIoZG90KGRlbHRhLHhkaXIpLGRvdChkZWx0YSx5ZGlyKSk7dmRpc3RhbmNlPWFicyhkb3QoZGVsdGEsZGlyKSk7cmV0dXJuIHh5O31cbnZvaWQgUHJveGltaXR5X1ZlcnRleF9CMzMoXG52ZWMzIEJsb2JfUG9zaXRpb24sXG52ZWMzIEJsb2JfUG9zaXRpb25fMixcbnZlYzMgRmFjZV9DZW50ZXIsXG52ZWMzIFBvc2l0aW9uLFxuZmxvYXQgUHJveGltaXR5X0Zhcl9EaXN0YW5jZSxcbmZsb2F0IFJlbGF0aXZlX1NjYWxlLFxuZmxvYXQgUHJveGltaXR5X0FuaXNvdHJvcHksXG52ZWMzIE5vcm1hbCxcbnZlYzMgVGFuZ2VudCxcbnZlYzMgQmlub3JtYWwsXG5vdXQgdmVjNCBFeHRyYSxcbm91dCBmbG9hdCBEaXN0YW5jZV9Ub19GYWNlLFxub3V0IGZsb2F0IERpc3RhbmNlX0ZhZGUxLFxub3V0IGZsb2F0IERpc3RhbmNlX0ZhZGUyKVxue2Zsb2F0IGRpc3R6MSxkaXN0ejI7RXh0cmEueHk9UHJvamVjdFByb3hpbWl0eShCbG9iX1Bvc2l0aW9uLFBvc2l0aW9uLEZhY2VfQ2VudGVyLE5vcm1hbCxUYW5nZW50KlByb3hpbWl0eV9Bbmlzb3Ryb3B5LEJpbm9ybWFsLGRpc3R6MSkvUmVsYXRpdmVfU2NhbGU7RXh0cmEuenc9UHJvamVjdFByb3hpbWl0eShCbG9iX1Bvc2l0aW9uXzIsUG9zaXRpb24sRmFjZV9DZW50ZXIsTm9ybWFsLFRhbmdlbnQqUHJveGltaXR5X0FuaXNvdHJvcHksQmlub3JtYWwsZGlzdHoyKS9SZWxhdGl2ZV9TY2FsZTtEaXN0YW5jZV9Ub19GYWNlPWRvdChOb3JtYWwsUG9zaXRpb24tRmFjZV9DZW50ZXIpO0Rpc3RhbmNlX0ZhZGUxPTEuMC1jbGFtcChkaXN0ejEvUHJveGltaXR5X0Zhcl9EaXN0YW5jZSwwLjAsMS4wKTtEaXN0YW5jZV9GYWRlMj0xLjAtY2xhbXAoZGlzdHoyL1Byb3hpbWl0eV9GYXJfRGlzdGFuY2UsMC4wLDEuMCk7fVxudm9pZCBPYmplY3RfVG9fV29ybGRfUG9zX0IxMihcbnZlYzMgUG9zX09iamVjdCxcbm91dCB2ZWMzIFBvc19Xb3JsZClcbntQb3NfV29ybGQ9KHdvcmxkKnZlYzQoUG9zX09iamVjdCwxLjApKS54eXo7fVxudm9pZCBDaG9vc2VfQmxvYl9CMjcoXG52ZWM0IFZ4X0NvbG9yLFxudmVjMyBQb3NpdGlvbjEsXG52ZWMzIFBvc2l0aW9uMixcbmJvb2wgQmxvYl9FbmFibGVfMSxcbmJvb2wgQmxvYl9FbmFibGVfMixcbmZsb2F0IE5lYXJfU2l6ZV8xLFxuZmxvYXQgTmVhcl9TaXplXzIsXG5mbG9hdCBCbG9iX0lubmVyX0ZhZGVfMSxcbmZsb2F0IEJsb2JfSW5uZXJfRmFkZV8yLFxuZmxvYXQgQmxvYl9QdWxzZV8xLFxuZmxvYXQgQmxvYl9QdWxzZV8yLFxuZmxvYXQgQmxvYl9GYWRlXzEsXG5mbG9hdCBCbG9iX0ZhZGVfMixcbm91dCB2ZWMzIFBvc2l0aW9uLFxub3V0IGZsb2F0IE5lYXJfU2l6ZSxcbm91dCBmbG9hdCBJbm5lcl9GYWRlLFxub3V0IGZsb2F0IEJsb2JfRW5hYmxlLFxub3V0IGZsb2F0IEZhZGUsXG5vdXQgZmxvYXQgUHVsc2UpXG57UG9zaXRpb249UG9zaXRpb24xKigxLjAtVnhfQ29sb3IuZykrVnhfQ29sb3IuZypQb3NpdGlvbjI7ZmxvYXQgYjE9QmxvYl9FbmFibGVfMSA/IDEuMCA6IDAuMDtmbG9hdCBiMj1CbG9iX0VuYWJsZV8yID8gMS4wIDogMC4wO0Jsb2JfRW5hYmxlPWIxKyhiMi1iMSkqVnhfQ29sb3IuZztQdWxzZT1CbG9iX1B1bHNlXzEqKDEuMC1WeF9Db2xvci5nKStWeF9Db2xvci5nKkJsb2JfUHVsc2VfMjtGYWRlPUJsb2JfRmFkZV8xKigxLjAtVnhfQ29sb3IuZykrVnhfQ29sb3IuZypCbG9iX0ZhZGVfMjtOZWFyX1NpemU9TmVhcl9TaXplXzEqKDEuMC1WeF9Db2xvci5nKStWeF9Db2xvci5nKk5lYXJfU2l6ZV8yO0lubmVyX0ZhZGU9QmxvYl9Jbm5lcl9GYWRlXzEqKDEuMC1WeF9Db2xvci5nKStWeF9Db2xvci5nKkJsb2JfSW5uZXJfRmFkZV8yO31cbnZvaWQgTW92ZV9WZXJ0c19CMzIoXG52ZWMyIFVWLFxuZmxvYXQgUmFkaXVzLFxuZmxvYXQgQW5pc290cm9weSxcbmZsb2F0IExpbmVfV2lkdGgsXG5mbG9hdCBWaXNpYmxlLFxub3V0IHZlYzMgTmV3X1AsXG5vdXQgdmVjMiBOZXdfVVYpXG57dmVjMiB4eT0yLjAqVVYtdmVjMigwLjUsMC41KTt2ZWMyIGNlbnRlcj1jbGFtcCh4eSwwLjAsMS4wKTt2ZWMyIGRlbHRhPTIuMCooeHktY2VudGVyKTtmbG9hdCBkZWx0YUxlbmd0aD1sZW5ndGgoZGVsdGEpO3ZlYzIgYW5pc289dmVjMigxLjAvQW5pc290cm9weSwxLjApO2NlbnRlcj0oY2VudGVyLXZlYzIoMC41LDAuNSkpKigxLjAtMi4wKlJhZGl1cyphbmlzbyk7TmV3X1VWPXZlYzIoKDIuMC0yLjAqZGVsdGFMZW5ndGgpKlZpc2libGUsMC4wKTtmbG9hdCBkZWx0YVJhZGl1cz0gKFJhZGl1cy1MaW5lX1dpZHRoKk5ld19VVi54KTtOZXdfUC54eT0oY2VudGVyK2RlbHRhUmFkaXVzL2RlbHRhTGVuZ3RoICphbmlzbypkZWx0YSk7TmV3X1Auej0wLjA7fVxudm9pZCBPYmplY3RfVG9fV29ybGRfRGlyX0IxNChcbnZlYzMgRGlyX09iamVjdCxcbm91dCB2ZWMzIEJpbm9ybWFsX1dvcmxkKVxue0Jpbm9ybWFsX1dvcmxkPSh3b3JsZCp2ZWM0KERpcl9PYmplY3QsMC4wKSkueHl6O31cbnZvaWQgUHJveGltaXR5X1Zpc2liaWxpdHlfQjU1KFxuZmxvYXQgU2VsZWN0aW9uLFxudmVjMyBQcm94aW1pdHlfQ2VudGVyLFxudmVjMyBQcm94aW1pdHlfQ2VudGVyXzIsXG5mbG9hdCBQcm94aW1pdHlfRmFyX0Rpc3RhbmNlLFxuZmxvYXQgUHJveGltaXR5X1JhZGl1cyxcbnZlYzMgRmFjZV9DZW50ZXIsXG52ZWMzIE5vcm1hbCxcbnZlYzIgRmFjZV9TaXplLFxuZmxvYXQgR2F6ZSxcbm91dCBmbG9hdCBXaWR0aClcbntmbG9hdCBib3hNYXhTaXplPWxlbmd0aChGYWNlX1NpemUpKjAuNTtmbG9hdCBkMT1kb3QoUHJveGltaXR5X0NlbnRlci1GYWNlX0NlbnRlcixOb3JtYWwpO3ZlYzMgYmxvYjE9UHJveGltaXR5X0NlbnRlci1kMSpOb3JtYWw7ZmxvYXQgZDI9ZG90KFByb3hpbWl0eV9DZW50ZXJfMi1GYWNlX0NlbnRlcixOb3JtYWwpO3ZlYzMgYmxvYjI9UHJveGltaXR5X0NlbnRlcl8yLWQyKk5vcm1hbDt2ZWMzIGRlbHRhMT1ibG9iMS1GYWNlX0NlbnRlcjt2ZWMzIGRlbHRhMj1ibG9iMi1GYWNlX0NlbnRlcjtmbG9hdCBkaXN0MT1kb3QoZGVsdGExLGRlbHRhMSk7ZmxvYXQgZGlzdDI9ZG90KGRlbHRhMixkZWx0YTIpO2Zsb2F0IG5lYXJlc3RQcm94RGlzdD1zcXJ0KG1pbihkaXN0MSxkaXN0MikpO1dpZHRoPSgxLjAtc3RlcChib3hNYXhTaXplK1Byb3hpbWl0eV9SYWRpdXMsbmVhcmVzdFByb3hEaXN0KSkqKDEuMC1zdGVwKFByb3hpbWl0eV9GYXJfRGlzdGFuY2UsbWluKGQxLGQyKSkqKDEuMC1zdGVwKDAuMDAwMSxTZWxlY3Rpb24pKSk7V2lkdGg9bWF4KEdhemUsV2lkdGgpO31cbnZlYzIgcmFtcDIodmVjMiBzdGFydCx2ZWMyIGVuZCx2ZWMyIHgpXG57cmV0dXJuIGNsYW1wKCh4LXN0YXJ0KS8oZW5kLXN0YXJ0KSx2ZWMyKDAuMCwwLjApLHZlYzIoMS4wLDEuMCkpO31cbmZsb2F0IGNvbXB1dGVTZWxlY3Rpb24oXG52ZWMzIGJsb2JQb3NpdGlvbixcbnZlYzMgbm9ybWFsLFxudmVjMyB0YW5nZW50LFxudmVjMyBiaXRhbmdlbnQsXG52ZWMzIGZhY2VDZW50ZXIsXG52ZWMyIGZhY2VTaXplLFxuZmxvYXQgc2VsZWN0aW9uRnV6eixcbmZsb2F0IGZhckRpc3RhbmNlLFxuZmxvYXQgZmFkZUxlbmd0aFxuKVxue3ZlYzMgZGVsdGE9YmxvYlBvc2l0aW9uLWZhY2VDZW50ZXI7ZmxvYXQgYWJzRD1hYnMoZG90KGRlbHRhLG5vcm1hbCkpO2Zsb2F0IGZhZGVJbj0xLjAtY2xhbXAoKGFic0QtZmFyRGlzdGFuY2UpL2ZhZGVMZW5ndGgsMC4wLDEuMCk7dmVjMiBibG9iQ2VudGVyWFk9dmVjMihkb3QoZGVsdGEsdGFuZ2VudCksZG90KGRlbHRhLGJpdGFuZ2VudCkpO3ZlYzIgaW5uZXJGYWNlPWZhY2VTaXplKigxLjAtc2VsZWN0aW9uRnV6eikqMC41O3ZlYzIgc2VsZWN0UHVsc2U9cmFtcDIoLWZhY2VTaXplKjAuNSwtaW5uZXJGYWNlLGJsb2JDZW50ZXJYWSktcmFtcDIoaW5uZXJGYWNlLGZhY2VTaXplKjAuNSxibG9iQ2VudGVyWFkpO3JldHVybiBzZWxlY3RQdWxzZS54KnNlbGVjdFB1bHNlLnkqZmFkZUluO31cbnZvaWQgU2VsZWN0aW9uX1ZlcnRleF9CMzEoXG52ZWMzIEJsb2JfUG9zaXRpb24sXG52ZWMzIEJsb2JfUG9zaXRpb25fMixcbnZlYzMgRmFjZV9DZW50ZXIsXG52ZWMyIEZhY2VfU2l6ZSxcbnZlYzMgTm9ybWFsLFxudmVjMyBUYW5nZW50LFxudmVjMyBCaXRhbmdlbnQsXG5mbG9hdCBTZWxlY3Rpb25fRnV6eixcbmZsb2F0IFNlbGVjdGVkLFxuZmxvYXQgRmFyX0Rpc3RhbmNlLFxuZmxvYXQgRmFkZV9MZW5ndGgsXG52ZWMzIEFjdGl2ZV9GYWNlX0Rpcixcbm91dCBmbG9hdCBTaG93X1NlbGVjdGlvbilcbntmbG9hdCBzZWxlY3QxPWNvbXB1dGVTZWxlY3Rpb24oQmxvYl9Qb3NpdGlvbixOb3JtYWwsVGFuZ2VudCxCaXRhbmdlbnQsRmFjZV9DZW50ZXIsRmFjZV9TaXplLFNlbGVjdGlvbl9GdXp6LEZhcl9EaXN0YW5jZSxGYWRlX0xlbmd0aCk7ZmxvYXQgc2VsZWN0Mj1jb21wdXRlU2VsZWN0aW9uKEJsb2JfUG9zaXRpb25fMixOb3JtYWwsVGFuZ2VudCxCaXRhbmdlbnQsRmFjZV9DZW50ZXIsRmFjZV9TaXplLFNlbGVjdGlvbl9GdXp6LEZhcl9EaXN0YW5jZSxGYWRlX0xlbmd0aCk7U2hvd19TZWxlY3Rpb249bWl4KG1heChzZWxlY3QxLHNlbGVjdDIpLDEuMCxTZWxlY3RlZCk7fVxudm9pZCBtYWluKClcbnt2ZWMzIFZlYzNfUTI5PXZlYzModmVjMigwLDApLngsdmVjMigwLDApLnksY29sb3Iucik7dmVjMyBOcm1fV29ybGRfUTI0O05ybV9Xb3JsZF9RMjQ9bm9ybWFsaXplKCh3b3JsZCp2ZWM0KG5vcm1hbCwwLjApKS54eXopO3ZlYzMgRmFjZV9DZW50ZXJfUTMwO0ZhY2VfQ2VudGVyX1EzMD0od29ybGQqdmVjNCh2ZWMzKDAsMCwwKSwxLjApKS54eXo7dmVjMyBUYW5nZW50X1dvcmxkX1ExMztUYW5nZW50X1dvcmxkX1ExMz0od29ybGQqdmVjNCh0YW5nZW50LDAuMCkpLnh5ejt2ZWMzIFJlc3VsdF9RNDI7UmVzdWx0X1E0Mj1fVXNlX0dsb2JhbF9MZWZ0X0luZGV4XyA/IEdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qb3NpdGlvbi54eXogOiBfQmxvYl9Qb3NpdGlvbl87dmVjMyBSZXN1bHRfUTQzO1Jlc3VsdF9RNDM9X1VzZV9HbG9iYWxfUmlnaHRfSW5kZXhfID8gR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvbi54eXogOiBfQmxvYl9Qb3NpdGlvbl8yXztmbG9hdCBWYWx1ZV9BdF9UX1E1OD1taXgoX0Jsb2JfTmVhcl9TaXplXyxfQmxvYl9QdWxzZV9NYXhfU2l6ZV8sX0Jsb2JfUHVsc2VfKTtmbG9hdCBWYWx1ZV9BdF9UX1E1OT1taXgoX0Jsb2JfTmVhcl9TaXplXzJfLF9CbG9iX1B1bHNlX01heF9TaXplXyxfQmxvYl9QdWxzZV8yXyk7dmVjMyBDcm9zc19RNzA9Y3Jvc3Mobm9ybWFsLHRhbmdlbnQpO2Zsb2F0IFByb2R1Y3RfUTQ1PV9HYXplX0ludGVuc2l0eV8qX0dhemVfRm9jdXNfO2Zsb2F0IFN0ZXBfUTQ2PXN0ZXAoMC4wMDAxLFByb2R1Y3RfUTQ1KTt2ZWMzIFRhbmdlbnRfV29ybGRfTl9RMTU9bm9ybWFsaXplKFRhbmdlbnRfV29ybGRfUTEzKTt2ZWMzIFBvc2l0aW9uX1EyNztmbG9hdCBOZWFyX1NpemVfUTI3O2Zsb2F0IElubmVyX0ZhZGVfUTI3O2Zsb2F0IEJsb2JfRW5hYmxlX1EyNztmbG9hdCBGYWRlX1EyNztmbG9hdCBQdWxzZV9RMjc7Q2hvb3NlX0Jsb2JfQjI3KGNvbG9yLFJlc3VsdF9RNDIsUmVzdWx0X1E0MyxfQmxvYl9FbmFibGVfLF9CbG9iX0VuYWJsZV8yXyxWYWx1ZV9BdF9UX1E1OCxWYWx1ZV9BdF9UX1E1OSxfQmxvYl9Jbm5lcl9GYWRlXyxfQmxvYl9Jbm5lcl9GYWRlXzJfLF9CbG9iX1B1bHNlXyxfQmxvYl9QdWxzZV8yXyxfQmxvYl9GYWRlXyxfQmxvYl9GYWRlXzJfLFBvc2l0aW9uX1EyNyxOZWFyX1NpemVfUTI3LElubmVyX0ZhZGVfUTI3LEJsb2JfRW5hYmxlX1EyNyxGYWRlX1EyNyxQdWxzZV9RMjcpO3ZlYzMgQmlub3JtYWxfV29ybGRfUTE0O09iamVjdF9Ub19Xb3JsZF9EaXJfQjE0KENyb3NzX1E3MCxCaW5vcm1hbF9Xb3JsZF9RMTQpO2Zsb2F0IEFuaXNvdHJvcHlfUTIxPWxlbmd0aChUYW5nZW50X1dvcmxkX1ExMykvbGVuZ3RoKEJpbm9ybWFsX1dvcmxkX1ExNCk7dmVjMyBCaW5vcm1hbF9Xb3JsZF9OX1ExNj1ub3JtYWxpemUoQmlub3JtYWxfV29ybGRfUTE0KTt2ZWMyIEZhY2VfU2l6ZV9RMzU7ZmxvYXQgU2NhbGVZX1EzNTtGYWNlX1NpemVfUTM1PXZlYzIobGVuZ3RoKFRhbmdlbnRfV29ybGRfUTEzKSxsZW5ndGgoQmlub3JtYWxfV29ybGRfUTE0KSk7U2NhbGVZX1EzNT1GYWNlX1NpemVfUTM1Lnk7ZmxvYXQgT3V0X1JhZGl1c19RMzg7ZmxvYXQgT3V0X0xpbmVfV2lkdGhfUTM4O091dF9SYWRpdXNfUTM4PV9SZWxhdGl2ZV9Ub19IZWlnaHRfID8gX1JhZGl1c18gOiBfUmFkaXVzXy9TY2FsZVlfUTM1O091dF9MaW5lX1dpZHRoX1EzOD1fUmVsYXRpdmVfVG9fSGVpZ2h0XyA/IF9MaW5lX1dpZHRoXyA6IF9MaW5lX1dpZHRoXy9TY2FsZVlfUTM1O2Zsb2F0IFNob3dfU2VsZWN0aW9uX1EzMTtTZWxlY3Rpb25fVmVydGV4X0IzMShSZXN1bHRfUTQyLFJlc3VsdF9RNDMsRmFjZV9DZW50ZXJfUTMwLEZhY2VfU2l6ZV9RMzUsTnJtX1dvcmxkX1EyNCxUYW5nZW50X1dvcmxkX05fUTE1LEJpbm9ybWFsX1dvcmxkX05fUTE2LF9TZWxlY3Rpb25fRnV6el8sX1NlbGVjdGVkXyxfU2VsZWN0ZWRfRGlzdGFuY2VfLF9TZWxlY3RlZF9GYWRlX0xlbmd0aF8sdmVjMygwLDAsLTEpLFNob3dfU2VsZWN0aW9uX1EzMSk7ZmxvYXQgTWF4QUJfUTQxPW1heChTaG93X1NlbGVjdGlvbl9RMzEsUHJvZHVjdF9RNDUpO2Zsb2F0IFdpZHRoX1E1NTtQcm94aW1pdHlfVmlzaWJpbGl0eV9CNTUoU2hvd19TZWxlY3Rpb25fUTMxLFJlc3VsdF9RNDIsUmVzdWx0X1E0MyxfUHJveGltaXR5X0Zhcl9EaXN0YW5jZV8sX1Byb3hpbWl0eV9OZWFyX1JhZGl1c18sRmFjZV9DZW50ZXJfUTMwLE5ybV9Xb3JsZF9RMjQsRmFjZV9TaXplX1EzNSxTdGVwX1E0NixXaWR0aF9RNTUpO3ZlYzMgTmV3X1BfUTMyO3ZlYzIgTmV3X1VWX1EzMjtNb3ZlX1ZlcnRzX0IzMih1dixPdXRfUmFkaXVzX1EzOCxBbmlzb3Ryb3B5X1EyMSxPdXRfTGluZV9XaWR0aF9RMzgsV2lkdGhfUTU1LE5ld19QX1EzMixOZXdfVVZfUTMyKTt2ZWMzIFBvc19Xb3JsZF9RMTI7T2JqZWN0X1RvX1dvcmxkX1Bvc19CMTIoTmV3X1BfUTMyLFBvc19Xb3JsZF9RMTIpO3ZlYzMgT3V0X1Bvc2l0aW9uX1E0MDt2ZWMyIE91dF9VVl9RNDA7dmVjMyBCbG9iX0luZm9fUTQwO3ZlYzIgQmxvYl9SZWxhdGl2ZV9VVl9RNDA7QmxvYl9WZXJ0ZXhfQjQwKFBvc19Xb3JsZF9RMTIsTnJtX1dvcmxkX1EyNCxUYW5nZW50X1dvcmxkX05fUTE1LEJpbm9ybWFsX1dvcmxkX05fUTE2LFBvc2l0aW9uX1EyNyxfQmxvYl9JbnRlbnNpdHlfLE5lYXJfU2l6ZV9RMjcsX0Jsb2JfRmFyX1NpemVfLF9CbG9iX05lYXJfRGlzdGFuY2VfLF9CbG9iX0Zhcl9EaXN0YW5jZV8sY29sb3IsdXYsRmFjZV9DZW50ZXJfUTMwLEZhY2VfU2l6ZV9RMzUsTmV3X1VWX1EzMixfQmxvYl9GYWRlX0xlbmd0aF8sX1NlbGVjdGlvbl9GYWRlXyxfU2VsZWN0aW9uX0ZhZGVfU2l6ZV8sSW5uZXJfRmFkZV9RMjcsUHVsc2VfUTI3LEZhZGVfUTI3LEJsb2JfRW5hYmxlX1EyNywwLjAsT3V0X1Bvc2l0aW9uX1E0MCxPdXRfVVZfUTQwLEJsb2JfSW5mb19RNDAsQmxvYl9SZWxhdGl2ZV9VVl9RNDApO3ZlYzIgUmVjdF9VVl9RMzY7dmVjMiBTY2FsZV9YWV9RMzY7dmVjNCBSZWN0X1Bhcm1zX1EzNjtSb3VuZF9SZWN0X1ZlcnRleF9CMzYoTmV3X1VWX1EzMixUYW5nZW50X1dvcmxkX1ExMyxCaW5vcm1hbF9Xb3JsZF9RMTQsT3V0X1JhZGl1c19RMzgsQW5pc290cm9weV9RMjEsQmxvYl9SZWxhdGl2ZV9VVl9RNDAsUmVjdF9VVl9RMzYsU2NhbGVfWFlfUTM2LFJlY3RfUGFybXNfUTM2KTt2ZWM0IEV4dHJhX1EzMztmbG9hdCBEaXN0YW5jZV9Ub19GYWNlX1EzMztmbG9hdCBEaXN0YW5jZV9GYWRlMV9RMzM7ZmxvYXQgRGlzdGFuY2VfRmFkZTJfUTMzO1Byb3hpbWl0eV9WZXJ0ZXhfQjMzKFJlc3VsdF9RNDIsUmVzdWx0X1E0MyxGYWNlX0NlbnRlcl9RMzAsUG9zX1dvcmxkX1ExMixfUHJveGltaXR5X0Zhcl9EaXN0YW5jZV8sMS4wLF9Qcm94aW1pdHlfQW5pc290cm9weV8sTnJtX1dvcmxkX1EyNCxUYW5nZW50X1dvcmxkX05fUTE1LEJpbm9ybWFsX1dvcmxkX05fUTE2LEV4dHJhX1EzMyxEaXN0YW5jZV9Ub19GYWNlX1EzMyxEaXN0YW5jZV9GYWRlMV9RMzMsRGlzdGFuY2VfRmFkZTJfUTMzKTt2ZWM0IFZlYzRfUTM3PXZlYzQoTWF4QUJfUTQxLERpc3RhbmNlX0ZhZGUxX1EzMyxEaXN0YW5jZV9GYWRlMl9RMzMsT3V0X1JhZGl1c19RMzgpO3ZlYzMgUG9zaXRpb249T3V0X1Bvc2l0aW9uX1E0MDt2ZWMzIE5vcm1hbD1WZWMzX1EyOTt2ZWMyIFVWPU91dF9VVl9RNDA7dmVjMyBUYW5nZW50PUJsb2JfSW5mb19RNDA7dmVjMyBCaW5vcm1hbD12ZWMzKDAsMCwwKTt2ZWM0IENvbG9yPXZlYzQoMSwxLDEsMSk7dmVjNCBFeHRyYTE9UmVjdF9QYXJtc19RMzY7dmVjNCBFeHRyYTI9RXh0cmFfUTMzO3ZlYzQgRXh0cmEzPVZlYzRfUTM3O2dsX1Bvc2l0aW9uPXZpZXdQcm9qZWN0aW9uKnZlYzQoUG9zaXRpb24sMSk7dk5vcm1hbD1Ob3JtYWw7dlVWPVVWO3ZUYW5nZW50PVRhbmdlbnQ7dkV4dHJhMT1FeHRyYTE7dkV4dHJhMj1FeHRyYTI7dkV4dHJhMz1FeHRyYTM7fWA7XG4vLyBTaWRlZWZmZWN0XG5TaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVbbmFtZV0gPSBzaGFkZXI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbXJkbEZyb250cGxhdGVWZXJ0ZXhTaGFkZXIgPSB7IG5hbWUsIHNoYWRlciB9O1xuIiwiLy8gRG8gbm90IGVkaXQuXG5pbXBvcnQgeyBTaGFkZXJTdG9yZSB9IGZyb20gXCJjb3JlL0VuZ2luZXMvc2hhZGVyU3RvcmVcIjtcblxuY29uc3QgbmFtZSA9IFwibXJkbElubmVycXVhZFBpeGVsU2hhZGVyXCI7XG5jb25zdCBzaGFkZXIgPSBgdW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO3ZhcnlpbmcgdmVjMiB2VVY7dmFyeWluZyB2ZWMzIHZUYW5nZW50O3VuaWZvcm0gdmVjNCBfQ29sb3JfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c187dW5pZm9ybSBib29sIF9GaXhlZF9SYWRpdXNfO3VuaWZvcm0gZmxvYXQgX0ZpbHRlcl9XaWR0aF87dW5pZm9ybSBmbG9hdCBfR2xvd19GcmFjdGlvbl87dW5pZm9ybSBmbG9hdCBfR2xvd19NYXhfO3VuaWZvcm0gZmxvYXQgX0dsb3dfRmFsbG9mZl87ZmxvYXQgRmlsdGVyU3RlcF9CaWQxOTQoZmxvYXQgZWRnZSxmbG9hdCB4LGZsb2F0IGZpbHRlcldpZHRoKVxue2Zsb2F0IGR4PW1heCgxLjBFLTUsZndpZHRoKHgpKmZpbHRlcldpZHRoKTtyZXR1cm4gbWF4KCh4K2R4KjAuNS1tYXgoZWRnZSx4LWR4KjAuNSkpL2R4LDAuMCk7fVxudm9pZCBSb3VuZF9SZWN0X0IxOTQoXG5mbG9hdCBTaXplX1gsXG5mbG9hdCBTaXplX1ksXG5mbG9hdCBSYWRpdXMsXG52ZWM0IFJlY3RfQ29sb3IsXG5mbG9hdCBGaWx0ZXJfV2lkdGgsXG52ZWMyIFVWLFxuZmxvYXQgR2xvd19GcmFjdGlvbixcbmZsb2F0IEdsb3dfTWF4LFxuZmxvYXQgR2xvd19GYWxsb2ZmLFxub3V0IHZlYzQgQ29sb3IpXG57dmVjMiBoYWxmU2l6ZT12ZWMyKFNpemVfWCxTaXplX1kpKjAuNTt2ZWMyIHI9bWF4KG1pbih2ZWMyKFJhZGl1cyxSYWRpdXMpLGhhbGZTaXplKSx2ZWMyKDAuMDEsMC4wMSkpO3ZlYzIgdj1hYnMoVVYpO3ZlYzIgbmVhcmVzdHA9bWluKHYsaGFsZlNpemUtcik7dmVjMiBkZWx0YT0odi1uZWFyZXN0cCkvbWF4KHZlYzIoMC4wMSwwLjAxKSxyKTtmbG9hdCBEaXN0YW5jZT1sZW5ndGgoZGVsdGEpO2Zsb2F0IGluc2lkZVJlY3Q9MS4wLUZpbHRlclN0ZXBfQmlkMTk0KDEuMC1HbG93X0ZyYWN0aW9uLERpc3RhbmNlLEZpbHRlcl9XaWR0aCk7ZmxvYXQgZ2xvdz1jbGFtcCgoMS4wLURpc3RhbmNlKS9HbG93X0ZyYWN0aW9uLDAuMCwxLjApO2dsb3c9cG93KGdsb3csR2xvd19GYWxsb2ZmKTtDb2xvcj1SZWN0X0NvbG9yKm1heChpbnNpZGVSZWN0LGdsb3cqR2xvd19NYXgpO31cbnZvaWQgbWFpbigpXG57ZmxvYXQgWF9RMTkyO2Zsb2F0IFlfUTE5MjtmbG9hdCBaX1ExOTI7WF9RMTkyPXZUYW5nZW50Lng7WV9RMTkyPXZUYW5nZW50Lnk7Wl9RMTkyPXZUYW5nZW50Lno7dmVjNCBDb2xvcl9RMTk0O1JvdW5kX1JlY3RfQjE5NChYX1ExOTIsMS4wLFlfUTE5MixfQ29sb3JfLF9GaWx0ZXJfV2lkdGhfLHZVVixfR2xvd19GcmFjdGlvbl8sX0dsb3dfTWF4XyxfR2xvd19GYWxsb2ZmXyxDb2xvcl9RMTk0KTt2ZWM0IE91dF9Db2xvcj1Db2xvcl9RMTk0O2Zsb2F0IENsaXBfVGhyZXNob2xkPTAuMDtnbF9GcmFnQ29sb3I9T3V0X0NvbG9yO31cbmA7XG4vLyBTaWRlZWZmZWN0XG5TaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVbbmFtZV0gPSBzaGFkZXI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbXJkbElubmVycXVhZFBpeGVsU2hhZGVyID0geyBuYW1lLCBzaGFkZXIgfTtcbiIsIi8vIERvIG5vdCBlZGl0LlxuaW1wb3J0IHsgU2hhZGVyU3RvcmUgfSBmcm9tIFwiY29yZS9FbmdpbmVzL3NoYWRlclN0b3JlXCI7XG5cbmNvbnN0IG5hbWUgPSBcIm1yZGxJbm5lcnF1YWRWZXJ0ZXhTaGFkZXJcIjtcbmNvbnN0IHNoYWRlciA9IGB1bmlmb3JtIG1hdDQgd29ybGQ7dW5pZm9ybSBtYXQ0IHZpZXdQcm9qZWN0aW9uO3VuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjthdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjthdHRyaWJ1dGUgdmVjMyBub3JtYWw7YXR0cmlidXRlIHZlYzIgdXY7YXR0cmlidXRlIHZlYzMgdGFuZ2VudDthdHRyaWJ1dGUgdmVjNCBjb2xvcjt1bmlmb3JtIHZlYzQgX0NvbG9yXzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfO3VuaWZvcm0gYm9vbCBfRml4ZWRfUmFkaXVzXzt1bmlmb3JtIGZsb2F0IF9GaWx0ZXJfV2lkdGhfO3VuaWZvcm0gZmxvYXQgX0dsb3dfRnJhY3Rpb25fO3VuaWZvcm0gZmxvYXQgX0dsb3dfTWF4Xzt1bmlmb3JtIGZsb2F0IF9HbG93X0ZhbGxvZmZfO3ZhcnlpbmcgdmVjMiB2VVY7dmFyeWluZyB2ZWMzIHZUYW5nZW50O3ZvaWQgbWFpbigpXG57dmVjMyBQb3NfV29ybGRfUTE4OTtQb3NfV29ybGRfUTE4OT0od29ybGQqdmVjNChwb3NpdGlvbiwxLjApKS54eXo7dmVjMyBEaXJfV29ybGRfUTE5MDtEaXJfV29ybGRfUTE5MD0od29ybGQqdmVjNCh0YW5nZW50LDAuMCkpLnh5ejt2ZWMzIERpcl9Xb3JsZF9RMTkxO0Rpcl9Xb3JsZF9RMTkxPSh3b3JsZCp2ZWM0KChjcm9zcyhub3JtYWwsdGFuZ2VudCkpLDAuMCkpLnh5ejtmbG9hdCBMZW5ndGhfUTE4MD1sZW5ndGgoRGlyX1dvcmxkX1ExOTApO2Zsb2F0IExlbmd0aF9RMTgxPWxlbmd0aChEaXJfV29ybGRfUTE5MSk7ZmxvYXQgUXVvdGllbnRfUTE4ND1MZW5ndGhfUTE4MC9MZW5ndGhfUTE4MTtmbG9hdCBRdW90aWVudF9RMTk1PV9SYWRpdXNfL0xlbmd0aF9RMTgxO3ZlYzIgUmVzdWx0X1ExOTM7UmVzdWx0X1ExOTM9dmVjMigodXYueC0wLjUpKkxlbmd0aF9RMTgwL0xlbmd0aF9RMTgxLCh1di55LTAuNSkpO2Zsb2F0IFJlc3VsdF9RMTk4PV9GaXhlZF9SYWRpdXNfID8gUXVvdGllbnRfUTE5NSA6IF9SYWRpdXNfO3ZlYzMgVmVjM19RMTgzPXZlYzMoUXVvdGllbnRfUTE4NCxSZXN1bHRfUTE5OCwwKTt2ZWMzIFBvc2l0aW9uPVBvc19Xb3JsZF9RMTg5O3ZlYzMgTm9ybWFsPXZlYzMoMCwwLDApO3ZlYzIgVVY9UmVzdWx0X1ExOTM7dmVjMyBUYW5nZW50PVZlYzNfUTE4Mzt2ZWMzIEJpbm9ybWFsPXZlYzMoMCwwLDApO3ZlYzQgQ29sb3I9Y29sb3I7Z2xfUG9zaXRpb249dmlld1Byb2plY3Rpb24qdmVjNChQb3NpdGlvbiwxKTt2VVY9VVY7dlRhbmdlbnQ9VGFuZ2VudDt9XG5gO1xuLy8gU2lkZWVmZmVjdFxuU2hhZGVyU3RvcmUuU2hhZGVyc1N0b3JlW25hbWVdID0gc2hhZGVyO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IG1yZGxJbm5lcnF1YWRWZXJ0ZXhTaGFkZXIgPSB7IG5hbWUsIHNoYWRlciB9O1xuIiwiLy8gRG8gbm90IGVkaXQuXG5pbXBvcnQgeyBTaGFkZXJTdG9yZSB9IGZyb20gXCJjb3JlL0VuZ2luZXMvc2hhZGVyU3RvcmVcIjtcblxuY29uc3QgbmFtZSA9IFwibXJkbFNsaWRlckJhclBpeGVsU2hhZGVyXCI7XG5jb25zdCBzaGFkZXIgPSBgdW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO3ZhcnlpbmcgdmVjMyB2UG9zaXRpb247dmFyeWluZyB2ZWMzIHZOb3JtYWw7dmFyeWluZyB2ZWMyIHZVVjt2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7dmFyeWluZyB2ZWMzIHZCaW5vcm1hbDt2YXJ5aW5nIHZlYzQgdkNvbG9yO3ZhcnlpbmcgdmVjNCB2RXh0cmExO3ZhcnlpbmcgdmVjNCB2RXh0cmEyO3ZhcnlpbmcgdmVjNCB2RXh0cmEzO3VuaWZvcm0gZmxvYXQgX1JhZGl1c187dW5pZm9ybSBmbG9hdCBfQmV2ZWxfRnJvbnRfO3VuaWZvcm0gZmxvYXQgX0JldmVsX0Zyb250X1N0cmV0Y2hfO3VuaWZvcm0gZmxvYXQgX0JldmVsX0JhY2tfO3VuaWZvcm0gZmxvYXQgX0JldmVsX0JhY2tfU3RyZXRjaF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX1RvcF9MZWZ0Xzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfVG9wX1JpZ2h0Xzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfQm90dG9tX0xlZnRfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Cb3R0b21fUmlnaHRfO3VuaWZvcm0gYm9vbCBfQnVsZ2VfRW5hYmxlZF87dW5pZm9ybSBmbG9hdCBfQnVsZ2VfSGVpZ2h0Xzt1bmlmb3JtIGZsb2F0IF9CdWxnZV9SYWRpdXNfO3VuaWZvcm0gZmxvYXQgX1N1bl9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX1N1bl9UaGV0YV87dW5pZm9ybSBmbG9hdCBfU3VuX1BoaV87dW5pZm9ybSBmbG9hdCBfSW5kaXJlY3RfRGlmZnVzZV87dW5pZm9ybSB2ZWM0IF9BbGJlZG9fO3VuaWZvcm0gZmxvYXQgX1NwZWN1bGFyXzt1bmlmb3JtIGZsb2F0IF9TaGluaW5lc3NfO3VuaWZvcm0gZmxvYXQgX1NoYXJwbmVzc187dW5pZm9ybSBmbG9hdCBfU3Vic3VyZmFjZV87dW5pZm9ybSB2ZWM0IF9MZWZ0X0NvbG9yXzt1bmlmb3JtIHZlYzQgX1JpZ2h0X0NvbG9yXzt1bmlmb3JtIGZsb2F0IF9SZWZsZWN0aW9uXzt1bmlmb3JtIGZsb2F0IF9Gcm9udF9SZWZsZWN0Xzt1bmlmb3JtIGZsb2F0IF9FZGdlX1JlZmxlY3RfO3VuaWZvcm0gZmxvYXQgX1Bvd2VyXzt1bmlmb3JtIHZlYzQgX1NreV9Db2xvcl87dW5pZm9ybSB2ZWM0IF9Ib3Jpem9uX0NvbG9yXzt1bmlmb3JtIHZlYzQgX0dyb3VuZF9Db2xvcl87dW5pZm9ybSBmbG9hdCBfSG9yaXpvbl9Qb3dlcl87dW5pZm9ybSBzYW1wbGVyMkQgX1JlZmxlY3Rpb25fTWFwXzt1bmlmb3JtIHNhbXBsZXIyRCBfSW5kaXJlY3RfRW52aXJvbm1lbnRfO3VuaWZvcm0gZmxvYXQgX1dpZHRoXzt1bmlmb3JtIGZsb2F0IF9GdXp6Xzt1bmlmb3JtIGZsb2F0IF9NaW5fRnV6el87dW5pZm9ybSBmbG9hdCBfQ2xpcF9GYWRlXzt1bmlmb3JtIGZsb2F0IF9IdWVfU2hpZnRfO3VuaWZvcm0gZmxvYXQgX1NhdHVyYXRpb25fU2hpZnRfO3VuaWZvcm0gZmxvYXQgX1ZhbHVlX1NoaWZ0Xzt1bmlmb3JtIHZlYzMgX0Jsb2JfUG9zaXRpb25fO3VuaWZvcm0gZmxvYXQgX0Jsb2JfSW50ZW5zaXR5Xzt1bmlmb3JtIGZsb2F0IF9CbG9iX05lYXJfU2l6ZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfU2l6ZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX0Rpc3RhbmNlXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0Zhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlX0xlbmd0aF87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlXzt1bmlmb3JtIHNhbXBsZXIyRCBfQmxvYl9UZXh0dXJlXzt1bmlmb3JtIHZlYzMgX0Jsb2JfUG9zaXRpb25fMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX1NpemVfMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ZhZGVfMl87dW5pZm9ybSB2ZWMzIF9MZWZ0X0luZGV4X1Bvc187dW5pZm9ybSB2ZWMzIF9SaWdodF9JbmRleF9Qb3NfO3VuaWZvcm0gdmVjMyBfTGVmdF9JbmRleF9NaWRkbGVfUG9zXzt1bmlmb3JtIHZlYzMgX1JpZ2h0X0luZGV4X01pZGRsZV9Qb3NfO3VuaWZvcm0gc2FtcGxlcjJEIF9EZWNhbF87dW5pZm9ybSB2ZWMyIF9EZWNhbF9TY2FsZV9YWV87dW5pZm9ybSBib29sIF9EZWNhbF9Gcm9udF9Pbmx5Xzt1bmlmb3JtIGZsb2F0IF9SaW1fSW50ZW5zaXR5Xzt1bmlmb3JtIHNhbXBsZXIyRCBfUmltX1RleHR1cmVfO3VuaWZvcm0gZmxvYXQgX1JpbV9IdWVfU2hpZnRfO3VuaWZvcm0gZmxvYXQgX1JpbV9TYXR1cmF0aW9uX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9SaW1fVmFsdWVfU2hpZnRfO3VuaWZvcm0gZmxvYXQgX0lyaWRlc2NlbmNlX0ludGVuc2l0eV87dW5pZm9ybSBzYW1wbGVyMkQgX0lyaWRlc2NlbmNlX1RleHR1cmVfO3VuaWZvcm0gYm9vbCBVc2VfR2xvYmFsX0xlZnRfSW5kZXg7dW5pZm9ybSBib29sIFVzZV9HbG9iYWxfUmlnaHRfSW5kZXg7dW5pZm9ybSB2ZWM0IEdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qb3NpdGlvbjt1bmlmb3JtIHZlYzQgR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvbjt1bmlmb3JtIHZlYzQgR2xvYmFsX0xlZnRfVGh1bWJfVGlwX1Bvc2l0aW9uO3VuaWZvcm0gdmVjNCBHbG9iYWxfUmlnaHRfVGh1bWJfVGlwX1Bvc2l0aW9uO3VuaWZvcm0gdmVjNCBHbG9iYWxfTGVmdF9JbmRleF9NaWRkbGVfUG9zaXRpb247dW5pZm9ybSB2ZWM0IEdsb2JhbF9SaWdodF9JbmRleF9NaWRkbGVfUG9zaXRpb247dW5pZm9ybSBmbG9hdCBHbG9iYWxfTGVmdF9JbmRleF9UaXBfUHJveGltaXR5O3VuaWZvcm0gZmxvYXQgR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qcm94aW1pdHk7dm9pZCBCbG9iX0ZyYWdtZW50X0IzMChcbnNhbXBsZXIyRCBCbG9iX1RleHR1cmUsXG52ZWM0IEJsb2JfSW5mbzEsXG52ZWM0IEJsb2JfSW5mbzIsXG5vdXQgdmVjNCBCbG9iX0NvbG9yKVxue2Zsb2F0IGsxPWRvdChCbG9iX0luZm8xLnh5LEJsb2JfSW5mbzEueHkpO2Zsb2F0IGsyPWRvdChCbG9iX0luZm8yLnh5LEJsb2JfSW5mbzIueHkpO3ZlYzMgY2xvc2VyPWsxPGsyID8gdmVjMyhrMSxCbG9iX0luZm8xLnosQmxvYl9JbmZvMS53KSA6IHZlYzMoazIsQmxvYl9JbmZvMi56LEJsb2JfSW5mbzIudyk7QmxvYl9Db2xvcj1jbG9zZXIueip0ZXh0dXJlKEJsb2JfVGV4dHVyZSx2ZWMyKHZlYzIoc3FydChjbG9zZXIueCksY2xvc2VyLnkpLngsMS4wLXZlYzIoc3FydChjbG9zZXIueCksY2xvc2VyLnkpLnkpKSpjbGFtcCgxLjAtY2xvc2VyLngsMC4wLDEuMCk7fVxudm9pZCBGYXN0TGluZWFyVG9zUkdCX0I0MihcbnZlYzQgTGluZWFyLFxub3V0IHZlYzQgc1JHQilcbntzUkdCLnJnYj1zcXJ0KGNsYW1wKExpbmVhci5yZ2IsMC4wLDEuMCkpO3NSR0IuYT1MaW5lYXIuYTt9XG52b2lkIFNjYWxlX1JHQl9CNTkoXG52ZWM0IENvbG9yLFxuZmxvYXQgU2NhbGFyLFxub3V0IHZlYzQgUmVzdWx0KVxue1Jlc3VsdD12ZWM0KFNjYWxhcixTY2FsYXIsU2NhbGFyLDEpKkNvbG9yO31cbnZvaWQgRnJhZ21lbnRfTWFpbl9CMTIxKFxuZmxvYXQgU3VuX0ludGVuc2l0eSxcbmZsb2F0IFN1bl9UaGV0YSxcbmZsb2F0IFN1bl9QaGksXG52ZWMzIE5vcm1hbCxcbnZlYzQgQWxiZWRvLFxuZmxvYXQgRnJlc25lbF9SZWZsZWN0LFxuZmxvYXQgU2hpbmluZXNzLFxudmVjMyBJbmNpZGVudCxcbnZlYzQgSG9yaXpvbl9Db2xvcixcbnZlYzQgU2t5X0NvbG9yLFxudmVjNCBHcm91bmRfQ29sb3IsXG5mbG9hdCBJbmRpcmVjdF9EaWZmdXNlLFxuZmxvYXQgU3BlY3VsYXIsXG5mbG9hdCBIb3Jpem9uX1Bvd2VyLFxuZmxvYXQgUmVmbGVjdGlvbixcbnZlYzQgUmVmbGVjdGlvbl9TYW1wbGUsXG52ZWM0IEluZGlyZWN0X1NhbXBsZSxcbmZsb2F0IFNoYXJwbmVzcyxcbmZsb2F0IFNTUyxcbmZsb2F0IFN1YnN1cmZhY2UsXG52ZWM0IFRyYW5zbHVjZW5jZSxcbnZlYzQgUmltX0xpZ2h0LFxudmVjNCBJcmlkZXNjZW5jZSxcbm91dCB2ZWM0IFJlc3VsdClcbntmbG9hdCB0aGV0YT1TdW5fVGhldGEqMi4wKjMuMTQxNTk7ZmxvYXQgcGhpPVN1bl9QaGkqMy4xNDE1OTt2ZWMzIGxpZ2h0RGlyPSB2ZWMzKGNvcyhwaGkpKmNvcyh0aGV0YSksc2luKHBoaSksY29zKHBoaSkqc2luKHRoZXRhKSk7ZmxvYXQgTmRvdEw9bWF4KGRvdChsaWdodERpcixOb3JtYWwpLDAuMCk7dmVjMyBSPXJlZmxlY3QoSW5jaWRlbnQsTm9ybWFsKTtmbG9hdCBSZG90TD1tYXgoMC4wLGRvdChSLGxpZ2h0RGlyKSk7ZmxvYXQgc3BlY3VsYXI9cG93KFJkb3RMLFNoaW5pbmVzcyk7c3BlY3VsYXI9bWl4KHNwZWN1bGFyLHNtb290aHN0ZXAoMC40OTUqU2hhcnBuZXNzLDEuMC0wLjQ5NSpTaGFycG5lc3Msc3BlY3VsYXIpLFNoYXJwbmVzcyk7dmVjNCBnaT1taXgoR3JvdW5kX0NvbG9yLFNreV9Db2xvcixOb3JtYWwueSowLjUrMC41KTtSZXN1bHQ9KChTdW5fSW50ZW5zaXR5Kk5kb3RMK0luZGlyZWN0X1NhbXBsZSpJbmRpcmVjdF9EaWZmdXNlK1RyYW5zbHVjZW5jZSkqKDEuMCtTU1MqU3Vic3VyZmFjZSkpKkFsYmVkbyooMS4wLUZyZXNuZWxfUmVmbGVjdCkrKFN1bl9JbnRlbnNpdHkqc3BlY3VsYXIqU3BlY3VsYXIrRnJlc25lbF9SZWZsZWN0KlJlZmxlY3Rpb24qUmVmbGVjdGlvbl9TYW1wbGUpK0ZyZXNuZWxfUmVmbGVjdCpSaW1fTGlnaHQrSXJpZGVzY2VuY2U7fVxudm9pZCBCdWxnZV9CNzkoXG5ib29sIEVuYWJsZWQsXG52ZWMzIE5vcm1hbCxcbnZlYzMgVGFuZ2VudCxcbmZsb2F0IEJ1bGdlX0hlaWdodCxcbnZlYzQgVVYsXG5mbG9hdCBCdWxnZV9SYWRpdXMsXG52ZWMzIEJ1dHRvbk4sXG5vdXQgdmVjMyBOZXdfTm9ybWFsKVxue3ZlYzIgeHk9Y2xhbXAoVVYueHkqMi4wLHZlYzIoLTEsLTEpLHZlYzIoMSwxKSk7dmVjMyBCPShjcm9zcyhOb3JtYWwsVGFuZ2VudCkpO2Zsb2F0IGs9LWNsYW1wKDEuMC1sZW5ndGgoeHkpL0J1bGdlX1JhZGl1cywwLjAsMS4wKSpCdWxnZV9IZWlnaHQ7az1zaW4oayozLjE0MTU5KjAuNSk7ayo9c21vb3Roc3RlcCgwLjk5OTgsMC45OTk5LGFicyhkb3QoQnV0dG9uTixOb3JtYWwpKSk7TmV3X05vcm1hbD1Ob3JtYWwqc3FydCgxLjAtayprKSsoeHkueCpUYW5nZW50K3h5LnkqQikqaztOZXdfTm9ybWFsPUVuYWJsZWQgPyBOZXdfTm9ybWFsIDogTm9ybWFsO31cbnZvaWQgU1NTX0I3NyhcbnZlYzMgQnV0dG9uTixcbnZlYzMgTm9ybWFsLFxudmVjMyBJbmNpZGVudCxcbm91dCBmbG9hdCBSZXN1bHQpXG57ZmxvYXQgTmRvdEk9YWJzKGRvdChOb3JtYWwsSW5jaWRlbnQpKTtmbG9hdCBCZG90ST1hYnMoZG90KEJ1dHRvbk4sSW5jaWRlbnQpKTtSZXN1bHQ9KGFicyhOZG90SS1CZG90SSkpOyB9XG52b2lkIEZpbmdlck9jY2x1c2lvbl9CNjcoXG5mbG9hdCBXaWR0aCxcbmZsb2F0IERpc3RUb0NlbnRlcixcbmZsb2F0IEZ1enosXG5mbG9hdCBNaW5fRnV6eixcbnZlYzMgUG9zaXRpb24sXG52ZWMzIEZvcndhcmQsXG52ZWMzIE5lYXJlc3QsXG5mbG9hdCBGYWRlX091dCxcbm91dCBmbG9hdCBOb3RJblNoYWRvdylcbntmbG9hdCBkPWRvdCgoTmVhcmVzdC1Qb3NpdGlvbiksRm9yd2FyZCk7ZmxvYXQgc2g9c21vb3Roc3RlcChXaWR0aCowLjUsV2lkdGgqMC41K0Z1enoqbWF4KGQsMC4wKStNaW5fRnV6eixEaXN0VG9DZW50ZXIpO05vdEluU2hhZG93PTEuMC0oMS4wLXNoKSpzbW9vdGhzdGVwKC1GYWRlX091dCwwLjAsZCk7fVxudm9pZCBGaW5nZXJPY2NsdXNpb25fQjY4KFxuZmxvYXQgV2lkdGgsXG5mbG9hdCBEaXN0VG9DZW50ZXIsXG5mbG9hdCBGdXp6LFxuZmxvYXQgTWluX0Z1enosXG52ZWMzIFBvc2l0aW9uLFxudmVjMyBGb3J3YXJkLFxudmVjMyBOZWFyZXN0LFxuZmxvYXQgRmFkZV9PdXQsXG5vdXQgZmxvYXQgTm90SW5TaGFkb3cpXG57ZmxvYXQgZD1kb3QoKE5lYXJlc3QtUG9zaXRpb24pLEZvcndhcmQpO2Zsb2F0IHNoPXNtb290aHN0ZXAoV2lkdGgqMC41LFdpZHRoKjAuNStGdXp6Km1heChkLDAuMCkrTWluX0Z1enosRGlzdFRvQ2VudGVyKTtOb3RJblNoYWRvdz0xLjAtKDEuMC1zaCkqc21vb3Roc3RlcCgtRmFkZV9PdXQsMC4wLGQpO31cbnZvaWQgU2NhbGVfQ29sb3JfQjkxKFxudmVjNCBDb2xvcixcbmZsb2F0IFNjYWxhcixcbm91dCB2ZWM0IFJlc3VsdClcbntSZXN1bHQ9U2NhbGFyKkNvbG9yO31cbnZvaWQgRnJvbV9IU1ZfQjczKFxuZmxvYXQgSHVlLFxuZmxvYXQgU2F0dXJhdGlvbixcbmZsb2F0IFZhbHVlLFxuZmxvYXQgQWxwaGEsXG5vdXQgdmVjNCBDb2xvcilcbnt2ZWM0IEs9dmVjNCgxLjAsMi4wLzMuMCwxLjAvMy4wLDMuMCk7dmVjMyBwPWFicyhmcmFjdCh2ZWMzKEh1ZSxIdWUsSHVlKStLLnh5eikqNi4wLUsud3d3KTtDb2xvci5yZ2I9VmFsdWUqbWl4KEsueHh4LGNsYW1wKHAtSy54eHgsMC4wLDEuMCksU2F0dXJhdGlvbik7Q29sb3IuYT1BbHBoYTt9XG52b2lkIEZhc3RfRnJlc25lbF9CMTIyKFxuZmxvYXQgRnJvbnRfUmVmbGVjdCxcbmZsb2F0IEVkZ2VfUmVmbGVjdCxcbmZsb2F0IFBvd2VyLFxudmVjMyBOb3JtYWwsXG52ZWMzIEluY2lkZW50LFxub3V0IGZsb2F0IFRyYW5zbWl0LFxub3V0IGZsb2F0IFJlZmxlY3QpXG57ZmxvYXQgZD1tYXgoLWRvdChJbmNpZGVudCxOb3JtYWwpLDAuMCk7UmVmbGVjdD1Gcm9udF9SZWZsZWN0KyhFZGdlX1JlZmxlY3QtRnJvbnRfUmVmbGVjdCkqcG93KC4wMS1kLFBvd2VyKTtUcmFuc21pdD0xLjAtUmVmbGVjdDt9XG52b2lkIE1hcHBlZF9FbnZpcm9ubWVudF9CNTEoXG5zYW1wbGVyMkQgUmVmbGVjdGVkX0Vudmlyb25tZW50LFxuc2FtcGxlcjJEIEluZGlyZWN0X0Vudmlyb25tZW50LFxudmVjMyBEaXIsXG5vdXQgdmVjNCBSZWZsZWN0ZWRfQ29sb3IsXG5vdXQgdmVjNCBJbmRpcmVjdF9EaWZmdXNlKVxue1JlZmxlY3RlZF9Db2xvcj10ZXh0dXJlKFJlZmxlY3RlZF9FbnZpcm9ubWVudCx2ZWMyKGF0YW4oRGlyLnosRGlyLngpLzMuMTQxNTkqMC41LGFzaW4oRGlyLnkpLzMuMTQxNTkrMC41KSk7SW5kaXJlY3RfRGlmZnVzZT10ZXh0dXJlKEluZGlyZWN0X0Vudmlyb25tZW50LHZlYzIoYXRhbihEaXIueixEaXIueCkvMy4xNDE1OSowLjUsYXNpbihEaXIueSkvMy4xNDE1OSswLjUpKTt9XG52ZWM0IFNhbXBsZUVudl9CaWQ1MCh2ZWMzIEQsdmVjNCBTLHZlYzQgSCx2ZWM0IEcsZmxvYXQgZXhwb25lbnQpXG57ZmxvYXQgaz1wb3coYWJzKEQueSksZXhwb25lbnQpO3ZlYzQgQztpZiAoRC55PjAuMCkge0M9bWl4KEgsUyxrKTt9IGVsc2Uge0M9bWl4KEgsRyxrKTsgfVxucmV0dXJuIEM7fVxudm9pZCBTa3lfRW52aXJvbm1lbnRfQjUwKFxudmVjMyBOb3JtYWwsXG52ZWMzIFJlZmxlY3RlZCxcbnZlYzQgU2t5X0NvbG9yLFxudmVjNCBIb3Jpem9uX0NvbG9yLFxudmVjNCBHcm91bmRfQ29sb3IsXG5mbG9hdCBIb3Jpem9uX1Bvd2VyLFxub3V0IHZlYzQgUmVmbGVjdGVkX0NvbG9yLFxub3V0IHZlYzQgSW5kaXJlY3RfQ29sb3IpXG57UmVmbGVjdGVkX0NvbG9yPVNhbXBsZUVudl9CaWQ1MChSZWZsZWN0ZWQsU2t5X0NvbG9yLEhvcml6b25fQ29sb3IsR3JvdW5kX0NvbG9yLEhvcml6b25fUG93ZXIpO0luZGlyZWN0X0NvbG9yPW1peChHcm91bmRfQ29sb3IsU2t5X0NvbG9yLE5vcm1hbC55KjAuNSswLjUpO31cbnZvaWQgTWluX1NlZ21lbnRfRGlzdGFuY2VfQjY1KFxudmVjMyBQMCxcbnZlYzMgUDEsXG52ZWMzIFEwLFxudmVjMyBRMSxcbm91dCB2ZWMzIE5lYXJQLFxub3V0IHZlYzMgTmVhclEsXG5vdXQgZmxvYXQgRGlzdGFuY2UpXG57dmVjMyB1PVAxLVAwO3ZlYzMgdj1RMS1RMDt2ZWMzIHc9UDAtUTA7ZmxvYXQgYT1kb3QodSx1KTtmbG9hdCBiPWRvdCh1LHYpO2Zsb2F0IGM9ZG90KHYsdik7ZmxvYXQgZD1kb3QodSx3KTtmbG9hdCBlPWRvdCh2LHcpO2Zsb2F0IEQ9YSpjLWIqYjtmbG9hdCBzRD1EO2Zsb2F0IHREPUQ7ZmxvYXQgc2Msc04sdGMsdE47aWYgKEQ8MC4wMDAwMSkge3NOPTAuMDtzRD0xLjA7dE49ZTt0RD1jO30gZWxzZSB7c049KGIqZS1jKmQpO3ROPShhKmUtYipkKTtpZiAoc048MC4wKSB7c049MC4wO3ROPWU7dEQ9Yzt9IGVsc2UgaWYgKHNOPnNEKSB7c049c0Q7dE49ZStiO3REPWM7fX1cbmlmICh0TjwwLjApIHt0Tj0wLjA7aWYgKC1kPDAuMCkge3NOPTAuMDt9IGVsc2UgaWYgKC1kPmEpIHtzTj1zRDt9IGVsc2Uge3NOPS1kO3NEPWE7fX0gZWxzZSBpZiAodE4+dEQpIHt0Tj10RDtpZiAoKC1kK2IpPDAuMCkge3NOPTAuMDt9IGVsc2UgaWYgKCgtZCtiKT5hKSB7c049c0Q7fSBlbHNlIHtzTj0oLWQrYik7c0Q9YTt9fVxuc2M9YWJzKHNOKTwwLjAwMDAwMSA/IDAuMCA6IHNOL3NEO3RjPWFicyh0Tik8MC4wMDAwMDEgPyAwLjAgOiB0Ti90RDtOZWFyUD1QMCtzYyp1O05lYXJRPVEwK3RjKnY7RGlzdGFuY2U9ZGlzdGFuY2UoTmVhclAsTmVhclEpO31cbnZvaWQgVG9fWFlaX0I3NChcbnZlYzMgVmVjMyxcbm91dCBmbG9hdCBYLFxub3V0IGZsb2F0IFksXG5vdXQgZmxvYXQgWilcbntYPVZlYzMueDtZPVZlYzMueTtaPVZlYzMuejt9XG52b2lkIEZpbmdlcl9Qb3NpdGlvbnNfQjY0KFxudmVjMyBMZWZ0X0luZGV4X1BvcyxcbnZlYzMgUmlnaHRfSW5kZXhfUG9zLFxudmVjMyBMZWZ0X0luZGV4X01pZGRsZV9Qb3MsXG52ZWMzIFJpZ2h0X0luZGV4X01pZGRsZV9Qb3MsXG5vdXQgdmVjMyBMZWZ0X0luZGV4LFxub3V0IHZlYzMgUmlnaHRfSW5kZXgsXG5vdXQgdmVjMyBMZWZ0X0luZGV4X01pZGRsZSxcbm91dCB2ZWMzIFJpZ2h0X0luZGV4X01pZGRsZSlcbntMZWZ0X0luZGV4PSAoVXNlX0dsb2JhbF9MZWZ0X0luZGV4ID8gR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Bvc2l0aW9uLnh5eiA6IExlZnRfSW5kZXhfUG9zKTtSaWdodF9JbmRleD0gKFVzZV9HbG9iYWxfUmlnaHRfSW5kZXggPyBHbG9iYWxfUmlnaHRfSW5kZXhfVGlwX1Bvc2l0aW9uLnh5eiA6IFJpZ2h0X0luZGV4X1Bvcyk7TGVmdF9JbmRleF9NaWRkbGU9IChVc2VfR2xvYmFsX0xlZnRfSW5kZXggPyBHbG9iYWxfTGVmdF9JbmRleF9NaWRkbGVfUG9zaXRpb24ueHl6IDogTGVmdF9JbmRleF9NaWRkbGVfUG9zKTtSaWdodF9JbmRleF9NaWRkbGU9IChVc2VfR2xvYmFsX1JpZ2h0X0luZGV4ID8gR2xvYmFsX1JpZ2h0X0luZGV4X01pZGRsZV9Qb3NpdGlvbi54eXogOiBSaWdodF9JbmRleF9NaWRkbGVfUG9zKTt9XG52b2lkIFZhcnlIU1ZfQjEwOChcbnZlYzMgSFNWX0luLFxuZmxvYXQgSHVlX1NoaWZ0LFxuZmxvYXQgU2F0dXJhdGlvbl9TaGlmdCxcbmZsb2F0IFZhbHVlX1NoaWZ0LFxub3V0IHZlYzMgSFNWX091dClcbntIU1ZfT3V0PXZlYzMoZnJhY3QoSFNWX0luLngrSHVlX1NoaWZ0KSxjbGFtcChIU1ZfSW4ueStTYXR1cmF0aW9uX1NoaWZ0LDAuMCwxLjApLGNsYW1wKEhTVl9Jbi56K1ZhbHVlX1NoaWZ0LDAuMCwxLjApKTt9XG52b2lkIFJlbWFwX1JhbmdlX0IxMTQoXG5mbG9hdCBJbl9NaW4sXG5mbG9hdCBJbl9NYXgsXG5mbG9hdCBPdXRfTWluLFxuZmxvYXQgT3V0X01heCxcbmZsb2F0IEluLFxub3V0IGZsb2F0IE91dClcbntPdXQ9bWl4KE91dF9NaW4sT3V0X01heCxjbGFtcCgoSW4tSW5fTWluKS8oSW5fTWF4LUluX01pbiksMC4wLDEuMCkpO31cbnZvaWQgVG9fSFNWX0I3NShcbnZlYzQgQ29sb3IsXG5vdXQgZmxvYXQgSHVlLFxub3V0IGZsb2F0IFNhdHVyYXRpb24sXG5vdXQgZmxvYXQgVmFsdWUsXG5vdXQgZmxvYXQgQWxwaGEsXG5vdXQgdmVjMyBIU1YpXG57dmVjNCBLPXZlYzQoMC4wLC0xLjAvMy4wLDIuMC8zLjAsLTEuMCk7dmVjNCBwPUNvbG9yLmc8Q29sb3IuYiA/IHZlYzQoQ29sb3IuYmcsSy53eikgOiB2ZWM0KENvbG9yLmdiLEsueHkpO3ZlYzQgcT1Db2xvci5yPHAueCA/IHZlYzQocC54eXcsQ29sb3IucikgOiB2ZWM0KENvbG9yLnIscC55engpO2Zsb2F0IGQ9cS54LW1pbihxLncscS55KTtmbG9hdCBlPTEuMGUtMTA7SHVlPWFicyhxLnorKHEudy1xLnkpLyg2LjAqZCtlKSk7U2F0dXJhdGlvbj1kLyhxLngrZSk7VmFsdWU9cS54O0FscGhhPUNvbG9yLmE7SFNWPXZlYzMoSHVlLFNhdHVyYXRpb24sVmFsdWUpO31cbnZvaWQgQ29kZV9CMTEwKFxuZmxvYXQgWCxcbm91dCBmbG9hdCBSZXN1bHQpXG57UmVzdWx0PShhY29zKFgpLzMuMTQxNTktMC41KSoyLjA7fVxudm9pZCBSaW1fTGlnaHRfQjEzMihcbnZlYzMgRnJvbnQsXG52ZWMzIE5vcm1hbCxcbnZlYzMgSW5jaWRlbnQsXG5mbG9hdCBSaW1fSW50ZW5zaXR5LFxuc2FtcGxlcjJEIFRleHR1cmUsXG5vdXQgdmVjNCBSZXN1bHQpXG57dmVjMyBSPXJlZmxlY3QoSW5jaWRlbnQsTm9ybWFsKTtmbG9hdCBSZG90Rj1kb3QoUixGcm9udCk7ZmxvYXQgUmRvdEw9c3FydCgxLjAtUmRvdEYqUmRvdEYpO3ZlYzIgVVY9dmVjMihSLnkqMC41KzAuNSwwLjUpO3ZlYzQgQ29sb3I9dGV4dHVyZShUZXh0dXJlLFVWKTtSZXN1bHQ9Q29sb3I7fVxudm9pZCBtYWluKClcbnt2ZWM0IEJsb2JfQ29sb3JfUTMwO1xuI2lmIEJMT0JfRU5BQkxFXG5CbG9iX0ZyYWdtZW50X0IzMChfQmxvYl9UZXh0dXJlXyx2RXh0cmEyLHZFeHRyYTMsQmxvYl9Db2xvcl9RMzApO1xuI2Vsc2VcbkJsb2JfQ29sb3JfUTMwPXZlYzQoMCwwLDAsMCk7XG4jZW5kaWZcbnZlYzMgSW5jaWRlbnRfUTM5PW5vcm1hbGl6ZSh2UG9zaXRpb24tY2FtZXJhUG9zaXRpb24pO3ZlYzMgTm9ybWFsaXplZF9RMzg9bm9ybWFsaXplKHZOb3JtYWwpO3ZlYzMgTm9ybWFsaXplZF9RNzE9bm9ybWFsaXplKHZUYW5nZW50KTt2ZWM0IENvbG9yX1E4MztcbiNpZiBERUNBTF9FTkFCTEVcbkNvbG9yX1E4Mz10ZXh0dXJlKF9EZWNhbF8sdlVWKTtcbiNlbHNlXG5Db2xvcl9RODM9dmVjNCgwLDAsMCwwKTtcbiNlbmRpZlxuZmxvYXQgWF9ROTA7ZmxvYXQgWV9ROTA7ZmxvYXQgWl9ROTA7ZmxvYXQgV19ROTA7WF9ROTA9dkV4dHJhMS54O1lfUTkwPXZFeHRyYTEueTtaX1E5MD12RXh0cmExLno7V19ROTA9dkV4dHJhMS53O3ZlYzQgTGluZWFyX1E0MztMaW5lYXJfUTQzLnJnYj1jbGFtcChfU2t5X0NvbG9yXy5yZ2IqX1NreV9Db2xvcl8ucmdiLDAuMCwxLjApO0xpbmVhcl9RNDMuYT1fU2t5X0NvbG9yXy5hO3ZlYzQgTGluZWFyX1E0NDtMaW5lYXJfUTQ0LnJnYj1jbGFtcChfSG9yaXpvbl9Db2xvcl8ucmdiKl9Ib3Jpem9uX0NvbG9yXy5yZ2IsMC4wLDEuMCk7TGluZWFyX1E0NC5hPV9Ib3Jpem9uX0NvbG9yXy5hO3ZlYzQgTGluZWFyX1E0NTtMaW5lYXJfUTQ1LnJnYj1jbGFtcChfR3JvdW5kX0NvbG9yXy5yZ2IqX0dyb3VuZF9Db2xvcl8ucmdiLDAuMCwxLjApO0xpbmVhcl9RNDUuYT1fR3JvdW5kX0NvbG9yXy5hO3ZlYzMgTGVmdF9JbmRleF9RNjQ7dmVjMyBSaWdodF9JbmRleF9RNjQ7dmVjMyBMZWZ0X0luZGV4X01pZGRsZV9RNjQ7dmVjMyBSaWdodF9JbmRleF9NaWRkbGVfUTY0O0Zpbmdlcl9Qb3NpdGlvbnNfQjY0KF9MZWZ0X0luZGV4X1Bvc18sX1JpZ2h0X0luZGV4X1Bvc18sX0xlZnRfSW5kZXhfTWlkZGxlX1Bvc18sX1JpZ2h0X0luZGV4X01pZGRsZV9Qb3NfLExlZnRfSW5kZXhfUTY0LFJpZ2h0X0luZGV4X1E2NCxMZWZ0X0luZGV4X01pZGRsZV9RNjQsUmlnaHRfSW5kZXhfTWlkZGxlX1E2NCk7dmVjNCBMaW5lYXJfUTQ2O0xpbmVhcl9RNDYucmdiPWNsYW1wKF9BbGJlZG9fLnJnYipfQWxiZWRvXy5yZ2IsMC4wLDEuMCk7TGluZWFyX1E0Ni5hPV9BbGJlZG9fLmE7dmVjMyBOb3JtYWxpemVkX1ExMDc9bm9ybWFsaXplKHZCaW5vcm1hbCk7dmVjMyBJbmNpZGVudF9RNzA9bm9ybWFsaXplKHZQb3NpdGlvbi1jYW1lcmFQb3NpdGlvbik7dmVjMyBOZXdfTm9ybWFsX1E3OTtCdWxnZV9CNzkoX0J1bGdlX0VuYWJsZWRfLE5vcm1hbGl6ZWRfUTM4LE5vcm1hbGl6ZWRfUTcxLF9CdWxnZV9IZWlnaHRfLHZDb2xvcixfQnVsZ2VfUmFkaXVzXyx2Qmlub3JtYWwsTmV3X05vcm1hbF9RNzkpO2Zsb2F0IFJlc3VsdF9RNzc7U1NTX0I3Nyh2Qmlub3JtYWwsTmV3X05vcm1hbF9RNzksSW5jaWRlbnRfUTM5LFJlc3VsdF9RNzcpO3ZlYzQgUmVzdWx0X1E5MTtTY2FsZV9Db2xvcl9COTEoQ29sb3JfUTgzLFhfUTkwLFJlc3VsdF9ROTEpO2Zsb2F0IFRyYW5zbWl0X1ExMjI7ZmxvYXQgUmVmbGVjdF9RMTIyO0Zhc3RfRnJlc25lbF9CMTIyKF9Gcm9udF9SZWZsZWN0XyxfRWRnZV9SZWZsZWN0XyxfUG93ZXJfLE5ld19Ob3JtYWxfUTc5LEluY2lkZW50X1EzOSxUcmFuc21pdF9RMTIyLFJlZmxlY3RfUTEyMik7ZmxvYXQgUHJvZHVjdF9RMTI1PVlfUTkwKllfUTkwO3ZlYzMgTmVhclBfUTY1O3ZlYzMgTmVhclFfUTY1O2Zsb2F0IERpc3RhbmNlX1E2NTtNaW5fU2VnbWVudF9EaXN0YW5jZV9CNjUoTGVmdF9JbmRleF9RNjQsTGVmdF9JbmRleF9NaWRkbGVfUTY0LHZQb3NpdGlvbixjYW1lcmFQb3NpdGlvbixOZWFyUF9RNjUsTmVhclFfUTY1LERpc3RhbmNlX1E2NSk7dmVjMyBOZWFyUF9RNjM7dmVjMyBOZWFyUV9RNjM7ZmxvYXQgRGlzdGFuY2VfUTYzO01pbl9TZWdtZW50X0Rpc3RhbmNlX0I2NShSaWdodF9JbmRleF9RNjQsUmlnaHRfSW5kZXhfTWlkZGxlX1E2NCx2UG9zaXRpb24sY2FtZXJhUG9zaXRpb24sTmVhclBfUTYzLE5lYXJRX1E2MyxEaXN0YW5jZV9RNjMpO3ZlYzMgUmVmbGVjdGVkX1E0Nz1yZWZsZWN0KEluY2lkZW50X1EzOSxOZXdfTm9ybWFsX1E3OSk7dmVjNCBQcm9kdWN0X1ExMDM9TGluZWFyX1E0Nip2ZWM0KDEsMSwxLDEpO3ZlYzQgUmVzdWx0X1ExMzI7UmltX0xpZ2h0X0IxMzIoTm9ybWFsaXplZF9RMTA3LE5vcm1hbGl6ZWRfUTM4LEluY2lkZW50X1E3MCxfUmltX0ludGVuc2l0eV8sX1JpbV9UZXh0dXJlXyxSZXN1bHRfUTEzMik7ZmxvYXQgRG90X1E3Mj1kb3QoSW5jaWRlbnRfUTcwLCBOb3JtYWxpemVkX1E3MSk7ZmxvYXQgTWF4QUJfUTEyMz1tYXgoUmVmbGVjdF9RMTIyLFByb2R1Y3RfUTEyNSk7ZmxvYXQgTm90SW5TaGFkb3dfUTY3O1xuI2lmIE9DQ0xVU0lPTl9FTkFCTEVEXG5GaW5nZXJPY2NsdXNpb25fQjY3KF9XaWR0aF8sRGlzdGFuY2VfUTY1LF9GdXp6XyxfTWluX0Z1enpfLHZQb3NpdGlvbix2Qmlub3JtYWwsTmVhclBfUTY1LF9DbGlwX0ZhZGVfLE5vdEluU2hhZG93X1E2Nyk7XG4jZWxzZVxuTm90SW5TaGFkb3dfUTY3PTEuMDtcbiNlbmRpZlxuZmxvYXQgTm90SW5TaGFkb3dfUTY4O1xuI2lmIE9DQ0xVU0lPTl9FTkFCTEVEXG5GaW5nZXJPY2NsdXNpb25fQjY4KF9XaWR0aF8sRGlzdGFuY2VfUTYzLF9GdXp6XyxfTWluX0Z1enpfLHZQb3NpdGlvbix2Qmlub3JtYWwsTmVhclBfUTYzLF9DbGlwX0ZhZGVfLE5vdEluU2hhZG93X1E2OCk7XG4jZWxzZVxuTm90SW5TaGFkb3dfUTY4PTEuMDtcbiNlbmRpZlxudmVjNCBSZWZsZWN0ZWRfQ29sb3JfUTUxO3ZlYzQgSW5kaXJlY3RfRGlmZnVzZV9RNTE7XG4jaWYgRU5WX0VOQUJMRVxuTWFwcGVkX0Vudmlyb25tZW50X0I1MShfUmVmbGVjdGlvbl9NYXBfLF9JbmRpcmVjdF9FbnZpcm9ubWVudF8sUmVmbGVjdGVkX1E0NyxSZWZsZWN0ZWRfQ29sb3JfUTUxLEluZGlyZWN0X0RpZmZ1c2VfUTUxKTtcbiNlbHNlXG5SZWZsZWN0ZWRfQ29sb3JfUTUxPXZlYzQoMCwwLDAsMSk7SW5kaXJlY3RfRGlmZnVzZV9RNTE9dmVjNCgwLDAsMCwxKTtcbiNlbmRpZlxudmVjNCBSZWZsZWN0ZWRfQ29sb3JfUTUwO3ZlYzQgSW5kaXJlY3RfQ29sb3JfUTUwO1xuI2lmIFNLWV9FTkFCTEVEXG5Ta3lfRW52aXJvbm1lbnRfQjUwKE5ld19Ob3JtYWxfUTc5LFJlZmxlY3RlZF9RNDcsTGluZWFyX1E0MyxMaW5lYXJfUTQ0LExpbmVhcl9RNDUsX0hvcml6b25fUG93ZXJfLFJlZmxlY3RlZF9Db2xvcl9RNTAsSW5kaXJlY3RfQ29sb3JfUTUwKTtcbiNlbHNlXG5SZWZsZWN0ZWRfQ29sb3JfUTUwPXZlYzQoMCwwLDAsMSk7SW5kaXJlY3RfQ29sb3JfUTUwPXZlYzQoMCwwLDAsMSk7XG4jZW5kaWZcbmZsb2F0IEh1ZV9RNzU7ZmxvYXQgU2F0dXJhdGlvbl9RNzU7ZmxvYXQgVmFsdWVfUTc1O2Zsb2F0IEFscGhhX1E3NTt2ZWMzIEhTVl9RNzU7VG9fSFNWX0I3NShQcm9kdWN0X1ExMDMsSHVlX1E3NSxTYXR1cmF0aW9uX1E3NSxWYWx1ZV9RNzUsQWxwaGFfUTc1LEhTVl9RNzUpO2Zsb2F0IEh1ZV9RMTI3O2Zsb2F0IFNhdHVyYXRpb25fUTEyNztmbG9hdCBWYWx1ZV9RMTI3O2Zsb2F0IEFscGhhX1ExMjc7dmVjMyBIU1ZfUTEyNztUb19IU1ZfQjc1KFJlc3VsdF9RMTMyLEh1ZV9RMTI3LFNhdHVyYXRpb25fUTEyNyxWYWx1ZV9RMTI3LEFscGhhX1ExMjcsSFNWX1ExMjcpO2Zsb2F0IFJlc3VsdF9RMTEwO0NvZGVfQjExMChEb3RfUTcyLFJlc3VsdF9RMTEwKTtmbG9hdCBBYnNBX1E3Nj1hYnMoUmVzdWx0X1ExMTApO2Zsb2F0IE1pbkFCX1E1OD1taW4oTm90SW5TaGFkb3dfUTY3LE5vdEluU2hhZG93X1E2OCk7dmVjNCBTdW1fUTQ4PVJlZmxlY3RlZF9Db2xvcl9RNTErUmVmbGVjdGVkX0NvbG9yX1E1MDt2ZWM0IFN1bV9RNDk9SW5kaXJlY3RfRGlmZnVzZV9RNTErSW5kaXJlY3RfQ29sb3JfUTUwO3ZlYzMgSFNWX091dF9RMTI2O1ZhcnlIU1ZfQjEwOChIU1ZfUTEyNyxfUmltX0h1ZV9TaGlmdF8sX1JpbV9TYXR1cmF0aW9uX1NoaWZ0XyxfUmltX1ZhbHVlX1NoaWZ0XyxIU1ZfT3V0X1ExMjYpO2Zsb2F0IE91dF9RMTE0O1JlbWFwX1JhbmdlX0IxMTQoLTEuMCwxLjAsMC4wLDEuMCxSZXN1bHRfUTExMCxPdXRfUTExNCk7ZmxvYXQgUHJvZHVjdF9RMTA2O1Byb2R1Y3RfUTEwNj1BYnNBX1E3NipfSHVlX1NoaWZ0XztmbG9hdCBYX1ExMjg7ZmxvYXQgWV9RMTI4O2Zsb2F0IFpfUTEyODtUb19YWVpfQjc0KEhTVl9PdXRfUTEyNixYX1ExMjgsWV9RMTI4LFpfUTEyOCk7dmVjMiBWZWMyX1ExMTI9dmVjMihPdXRfUTExNCwwLjUpO3ZlYzMgSFNWX091dF9RMTA4O1ZhcnlIU1ZfQjEwOChIU1ZfUTc1LFByb2R1Y3RfUTEwNixfU2F0dXJhdGlvbl9TaGlmdF8sX1ZhbHVlX1NoaWZ0XyxIU1ZfT3V0X1ExMDgpO3ZlYzQgQ29sb3JfUTEyOTtGcm9tX0hTVl9CNzMoWF9RMTI4LFlfUTEyOCxaX1ExMjgsMC4wLENvbG9yX1ExMjkpO3ZlYzQgQ29sb3JfUTExMTtcbiNpZiBJUklERVNDRU5DRV9FTkFCTEVEXG5Db2xvcl9RMTExPXRleHR1cmUoX0lyaWRlc2NlbmNlX1RleHR1cmVfLFZlYzJfUTExMik7XG4jZWxzZVxuQ29sb3JfUTExMT12ZWM0KDAsMCwwLDApO1xuI2VuZGlmXG5mbG9hdCBYX1E3NDtmbG9hdCBZX1E3NDtmbG9hdCBaX1E3NDtUb19YWVpfQjc0KEhTVl9PdXRfUTEwOCxYX1E3NCxZX1E3NCxaX1E3NCk7dmVjNCBSZXN1bHRfUTEzMT1fUmltX0ludGVuc2l0eV8qQ29sb3JfUTEyOTt2ZWM0IFJlc3VsdF9RMTEzPV9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfKkNvbG9yX1ExMTE7dmVjNCBDb2xvcl9RNzM7RnJvbV9IU1ZfQjczKFhfUTc0LFlfUTc0LFpfUTc0LDAuMCxDb2xvcl9RNzMpO3ZlYzQgUmVzdWx0X1E4ND1SZXN1bHRfUTkxKygxLjAtUmVzdWx0X1E5MS5hKSpDb2xvcl9RNzM7dmVjNCBSZXN1bHRfUTEyMTtGcmFnbWVudF9NYWluX0IxMjEoX1N1bl9JbnRlbnNpdHlfLF9TdW5fVGhldGFfLF9TdW5fUGhpXyxOZXdfTm9ybWFsX1E3OSxSZXN1bHRfUTg0LE1heEFCX1ExMjMsX1NoaW5pbmVzc18sSW5jaWRlbnRfUTM5LF9Ib3Jpem9uX0NvbG9yXyxfU2t5X0NvbG9yXyxfR3JvdW5kX0NvbG9yXyxfSW5kaXJlY3RfRGlmZnVzZV8sX1NwZWN1bGFyXyxfSG9yaXpvbl9Qb3dlcl8sX1JlZmxlY3Rpb25fLFN1bV9RNDgsU3VtX1E0OSxfU2hhcnBuZXNzXyxSZXN1bHRfUTc3LF9TdWJzdXJmYWNlXyx2ZWM0KDAsMCwwLDApLFJlc3VsdF9RMTMxLFJlc3VsdF9RMTEzLFJlc3VsdF9RMTIxKTt2ZWM0IFJlc3VsdF9RNTk7U2NhbGVfUkdCX0I1OShSZXN1bHRfUTEyMSxNaW5BQl9RNTgsUmVzdWx0X1E1OSk7dmVjNCBzUkdCX1E0MjtGYXN0TGluZWFyVG9zUkdCX0I0MihSZXN1bHRfUTU5LHNSR0JfUTQyKTt2ZWM0IFJlc3VsdF9RMzE9QmxvYl9Db2xvcl9RMzArKDEuMC1CbG9iX0NvbG9yX1EzMC5hKSpzUkdCX1E0Mjt2ZWM0IFJlc3VsdF9RNDA9UmVzdWx0X1EzMTsgUmVzdWx0X1E0MC5hPTEuMDt2ZWM0IE91dF9Db2xvcj1SZXN1bHRfUTQwO2Zsb2F0IENsaXBfVGhyZXNob2xkPTAuMDAxO2Jvb2wgVG9fc1JHQj1mYWxzZTtnbF9GcmFnQ29sb3I9T3V0X0NvbG9yO31gO1xuLy8gU2lkZWVmZmVjdFxuU2hhZGVyU3RvcmUuU2hhZGVyc1N0b3JlW25hbWVdID0gc2hhZGVyO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IG1yZGxTbGlkZXJCYXJQaXhlbFNoYWRlciA9IHsgbmFtZSwgc2hhZGVyIH07XG4iLCIvLyBEbyBub3QgZWRpdC5cbmltcG9ydCB7IFNoYWRlclN0b3JlIH0gZnJvbSBcImNvcmUvRW5naW5lcy9zaGFkZXJTdG9yZVwiO1xuXG5jb25zdCBuYW1lID0gXCJtcmRsU2xpZGVyQmFyVmVydGV4U2hhZGVyXCI7XG5jb25zdCBzaGFkZXIgPSBgdW5pZm9ybSBtYXQ0IHdvcmxkO3VuaWZvcm0gbWF0NCB2aWV3UHJvamVjdGlvbjt1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247YXR0cmlidXRlIHZlYzMgcG9zaXRpb247YXR0cmlidXRlIHZlYzMgbm9ybWFsO2F0dHJpYnV0ZSB2ZWMyIHV2O1xuI2lmZGVmIFRBTkdFTlRcbmF0dHJpYnV0ZSB2ZWMzIHRhbmdlbnQ7XG4jZWxzZVxuY29uc3QgdmVjMyB0YW5nZW50PXZlYzMoMC4pO1xuI2VuZGlmXG51bmlmb3JtIGZsb2F0IF9SYWRpdXNfO3VuaWZvcm0gZmxvYXQgX0JldmVsX0Zyb250Xzt1bmlmb3JtIGZsb2F0IF9CZXZlbF9Gcm9udF9TdHJldGNoXzt1bmlmb3JtIGZsb2F0IF9CZXZlbF9CYWNrXzt1bmlmb3JtIGZsb2F0IF9CZXZlbF9CYWNrX1N0cmV0Y2hfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Ub3BfTGVmdF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX1RvcF9SaWdodF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX0JvdHRvbV9MZWZ0Xzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfQm90dG9tX1JpZ2h0Xzt1bmlmb3JtIGJvb2wgX0J1bGdlX0VuYWJsZWRfO3VuaWZvcm0gZmxvYXQgX0J1bGdlX0hlaWdodF87dW5pZm9ybSBmbG9hdCBfQnVsZ2VfUmFkaXVzXzt1bmlmb3JtIGZsb2F0IF9TdW5fSW50ZW5zaXR5Xzt1bmlmb3JtIGZsb2F0IF9TdW5fVGhldGFfO3VuaWZvcm0gZmxvYXQgX1N1bl9QaGlfO3VuaWZvcm0gZmxvYXQgX0luZGlyZWN0X0RpZmZ1c2VfO3VuaWZvcm0gdmVjNCBfQWxiZWRvXzt1bmlmb3JtIGZsb2F0IF9TcGVjdWxhcl87dW5pZm9ybSBmbG9hdCBfU2hpbmluZXNzXzt1bmlmb3JtIGZsb2F0IF9TaGFycG5lc3NfO3VuaWZvcm0gZmxvYXQgX1N1YnN1cmZhY2VfO3VuaWZvcm0gdmVjNCBfTGVmdF9Db2xvcl87dW5pZm9ybSB2ZWM0IF9SaWdodF9Db2xvcl87dW5pZm9ybSBmbG9hdCBfUmVmbGVjdGlvbl87dW5pZm9ybSBmbG9hdCBfRnJvbnRfUmVmbGVjdF87dW5pZm9ybSBmbG9hdCBfRWRnZV9SZWZsZWN0Xzt1bmlmb3JtIGZsb2F0IF9Qb3dlcl87dW5pZm9ybSB2ZWM0IF9Ta3lfQ29sb3JfO3VuaWZvcm0gdmVjNCBfSG9yaXpvbl9Db2xvcl87dW5pZm9ybSB2ZWM0IF9Hcm91bmRfQ29sb3JfO3VuaWZvcm0gZmxvYXQgX0hvcml6b25fUG93ZXJfO3VuaWZvcm0gc2FtcGxlcjJEIF9SZWZsZWN0aW9uX01hcF87dW5pZm9ybSBzYW1wbGVyMkQgX0luZGlyZWN0X0Vudmlyb25tZW50Xzt1bmlmb3JtIGZsb2F0IF9XaWR0aF87dW5pZm9ybSBmbG9hdCBfRnV6el87dW5pZm9ybSBmbG9hdCBfTWluX0Z1enpfO3VuaWZvcm0gZmxvYXQgX0NsaXBfRmFkZV87dW5pZm9ybSBmbG9hdCBfSHVlX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9TYXR1cmF0aW9uX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9WYWx1ZV9TaGlmdF87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV9MZW5ndGhfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfUHVsc2VfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV87dW5pZm9ybSBzYW1wbGVyMkQgX0Jsb2JfVGV4dHVyZV87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzJfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9TaXplXzJfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfUHVsc2VfMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlXzJfO3VuaWZvcm0gdmVjMyBfTGVmdF9JbmRleF9Qb3NfO3VuaWZvcm0gdmVjMyBfUmlnaHRfSW5kZXhfUG9zXzt1bmlmb3JtIHZlYzMgX0xlZnRfSW5kZXhfTWlkZGxlX1Bvc187dW5pZm9ybSB2ZWMzIF9SaWdodF9JbmRleF9NaWRkbGVfUG9zXzt1bmlmb3JtIHNhbXBsZXIyRCBfRGVjYWxfO3VuaWZvcm0gdmVjMiBfRGVjYWxfU2NhbGVfWFlfO3VuaWZvcm0gYm9vbCBfRGVjYWxfRnJvbnRfT25seV87dW5pZm9ybSBmbG9hdCBfUmltX0ludGVuc2l0eV87dW5pZm9ybSBzYW1wbGVyMkQgX1JpbV9UZXh0dXJlXzt1bmlmb3JtIGZsb2F0IF9SaW1fSHVlX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9SaW1fU2F0dXJhdGlvbl9TaGlmdF87dW5pZm9ybSBmbG9hdCBfUmltX1ZhbHVlX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfO3VuaWZvcm0gc2FtcGxlcjJEIF9JcmlkZXNjZW5jZV9UZXh0dXJlXzt1bmlmb3JtIGJvb2wgVXNlX0dsb2JhbF9MZWZ0X0luZGV4O3VuaWZvcm0gYm9vbCBVc2VfR2xvYmFsX1JpZ2h0X0luZGV4O3VuaWZvcm0gdmVjNCBHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb247dW5pZm9ybSB2ZWM0IEdsb2JhbF9SaWdodF9JbmRleF9UaXBfUG9zaXRpb247dW5pZm9ybSB2ZWM0IEdsb2JhbF9MZWZ0X1RodW1iX1RpcF9Qb3NpdGlvbjt1bmlmb3JtIHZlYzQgR2xvYmFsX1JpZ2h0X1RodW1iX1RpcF9Qb3NpdGlvbjt1bmlmb3JtIGZsb2F0IEdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qcm94aW1pdHk7dW5pZm9ybSBmbG9hdCBHbG9iYWxfUmlnaHRfSW5kZXhfVGlwX1Byb3hpbWl0eTt2YXJ5aW5nIHZlYzMgdlBvc2l0aW9uO3ZhcnlpbmcgdmVjMyB2Tm9ybWFsO3ZhcnlpbmcgdmVjMiB2VVY7dmFyeWluZyB2ZWMzIHZUYW5nZW50O3ZhcnlpbmcgdmVjMyB2Qmlub3JtYWw7dmFyeWluZyB2ZWM0IHZDb2xvcjt2YXJ5aW5nIHZlYzQgdkV4dHJhMTt2YXJ5aW5nIHZlYzQgdkV4dHJhMjt2YXJ5aW5nIHZlYzQgdkV4dHJhMzt2b2lkIE9iamVjdF9Ub19Xb3JsZF9Qb3NfQjEyKFxudmVjMyBQb3NfT2JqZWN0LFxub3V0IHZlYzMgUG9zX1dvcmxkKVxue1Bvc19Xb3JsZD0od29ybGQqdmVjNChQb3NfT2JqZWN0LDEuMCkpLnh5ejt9XG52b2lkIE9iamVjdF9Ub19Xb3JsZF9Ob3JtYWxfQjMyKFxudmVjMyBOcm1fT2JqZWN0LFxub3V0IHZlYzMgTnJtX1dvcmxkKVxue05ybV9Xb3JsZD0odmVjNChOcm1fT2JqZWN0LDAuMCkpLnh5ejt9XG52b2lkIEJsb2JfVmVydGV4X0IyMyhcbnZlYzMgUG9zaXRpb24sXG52ZWMzIE5vcm1hbCxcbnZlYzMgVGFuZ2VudCxcbnZlYzMgQml0YW5nZW50LFxudmVjMyBCbG9iX1Bvc2l0aW9uLFxuZmxvYXQgSW50ZW5zaXR5LFxuZmxvYXQgQmxvYl9OZWFyX1NpemUsXG5mbG9hdCBCbG9iX0Zhcl9TaXplLFxuZmxvYXQgQmxvYl9OZWFyX0Rpc3RhbmNlLFxuZmxvYXQgQmxvYl9GYXJfRGlzdGFuY2UsXG5mbG9hdCBCbG9iX0ZhZGVfTGVuZ3RoLFxuZmxvYXQgQmxvYl9QdWxzZSxcbmZsb2F0IEJsb2JfRmFkZSxcbm91dCB2ZWM0IEJsb2JfSW5mbylcbnt2ZWMzIGJsb2I9IChVc2VfR2xvYmFsX0xlZnRfSW5kZXggPyBHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb24ueHl6IDogQmxvYl9Qb3NpdGlvbik7dmVjMyBkZWx0YT1ibG9iLVBvc2l0aW9uO2Zsb2F0IGRpc3Q9ZG90KE5vcm1hbCxkZWx0YSk7ZmxvYXQgbGVycFZhbHVlPWNsYW1wKChhYnMoZGlzdCktQmxvYl9OZWFyX0Rpc3RhbmNlKS8oQmxvYl9GYXJfRGlzdGFuY2UtQmxvYl9OZWFyX0Rpc3RhbmNlKSwwLjAsMS4wKTtmbG9hdCBmYWRlVmFsdWU9MS4wLWNsYW1wKChhYnMoZGlzdCktQmxvYl9GYXJfRGlzdGFuY2UpL0Jsb2JfRmFkZV9MZW5ndGgsMC4wLDEuMCk7ZmxvYXQgc2l6ZT1CbG9iX05lYXJfU2l6ZSsoQmxvYl9GYXJfU2l6ZS1CbG9iX05lYXJfU2l6ZSkqbGVycFZhbHVlO3ZlYzIgYmxvYlhZPXZlYzIoZG90KGRlbHRhLFRhbmdlbnQpLGRvdChkZWx0YSxCaXRhbmdlbnQpKS8oMC4wMDAxK3NpemUpO2Zsb2F0IEZhZGU9ZmFkZVZhbHVlKkludGVuc2l0eSpCbG9iX0ZhZGU7ZmxvYXQgRGlzdGFuY2U9KGxlcnBWYWx1ZSowLjUrMC41KSooMS4wLUJsb2JfUHVsc2UpO0Jsb2JfSW5mbz12ZWM0KGJsb2JYWS54LGJsb2JYWS55LERpc3RhbmNlLEZhZGUpO31cbnZvaWQgQmxvYl9WZXJ0ZXhfQjI0KFxudmVjMyBQb3NpdGlvbixcbnZlYzMgTm9ybWFsLFxudmVjMyBUYW5nZW50LFxudmVjMyBCaXRhbmdlbnQsXG52ZWMzIEJsb2JfUG9zaXRpb24sXG5mbG9hdCBJbnRlbnNpdHksXG5mbG9hdCBCbG9iX05lYXJfU2l6ZSxcbmZsb2F0IEJsb2JfRmFyX1NpemUsXG5mbG9hdCBCbG9iX05lYXJfRGlzdGFuY2UsXG5mbG9hdCBCbG9iX0Zhcl9EaXN0YW5jZSxcbmZsb2F0IEJsb2JfRmFkZV9MZW5ndGgsXG5mbG9hdCBCbG9iX1B1bHNlLFxuZmxvYXQgQmxvYl9GYWRlLFxub3V0IHZlYzQgQmxvYl9JbmZvKVxue3ZlYzMgYmxvYj0gKFVzZV9HbG9iYWxfUmlnaHRfSW5kZXggPyBHbG9iYWxfUmlnaHRfSW5kZXhfVGlwX1Bvc2l0aW9uLnh5eiA6IEJsb2JfUG9zaXRpb24pO3ZlYzMgZGVsdGE9YmxvYi1Qb3NpdGlvbjtmbG9hdCBkaXN0PWRvdChOb3JtYWwsZGVsdGEpO2Zsb2F0IGxlcnBWYWx1ZT1jbGFtcCgoYWJzKGRpc3QpLUJsb2JfTmVhcl9EaXN0YW5jZSkvKEJsb2JfRmFyX0Rpc3RhbmNlLUJsb2JfTmVhcl9EaXN0YW5jZSksMC4wLDEuMCk7ZmxvYXQgZmFkZVZhbHVlPTEuMC1jbGFtcCgoYWJzKGRpc3QpLUJsb2JfRmFyX0Rpc3RhbmNlKS9CbG9iX0ZhZGVfTGVuZ3RoLDAuMCwxLjApO2Zsb2F0IHNpemU9QmxvYl9OZWFyX1NpemUrKEJsb2JfRmFyX1NpemUtQmxvYl9OZWFyX1NpemUpKmxlcnBWYWx1ZTt2ZWMyIGJsb2JYWT12ZWMyKGRvdChkZWx0YSxUYW5nZW50KSxkb3QoZGVsdGEsQml0YW5nZW50KSkvKDAuMDAwMStzaXplKTtmbG9hdCBGYWRlPWZhZGVWYWx1ZSpJbnRlbnNpdHkqQmxvYl9GYWRlO2Zsb2F0IERpc3RhbmNlPShsZXJwVmFsdWUqMC41KzAuNSkqKDEuMC1CbG9iX1B1bHNlKTtCbG9iX0luZm89dmVjNChibG9iWFkueCxibG9iWFkueSxEaXN0YW5jZSxGYWRlKTt9XG52b2lkIE1vdmVfVmVydHNfQjEzMChcbmZsb2F0IEFuaXNvdHJvcHksXG52ZWMzIFAsXG5mbG9hdCBSYWRpdXMsXG5mbG9hdCBCZXZlbCxcbnZlYzMgTm9ybWFsX09iamVjdCxcbmZsb2F0IFNjYWxlWixcbmZsb2F0IFN0cmV0Y2gsXG5vdXQgdmVjMyBOZXdfUCxcbm91dCB2ZWMyIE5ld19VVixcbm91dCBmbG9hdCBSYWRpYWxfR3JhZGllbnQsXG5vdXQgdmVjMyBSYWRpYWxfRGlyLFxub3V0IHZlYzMgTmV3X05vcm1hbClcbnt2ZWMyIFVWPVAueHkqMi4wKzAuNTt2ZWMyIGNlbnRlcj1jbGFtcChVViwwLjAsMS4wKTt2ZWMyIGRlbHRhPVVWLWNlbnRlcjtmbG9hdCBkZWx0YWQ9KGxlbmd0aChkZWx0YSkqMi4wKTtmbG9hdCBmPShCZXZlbCsoUmFkaXVzLUJldmVsKSpTdHJldGNoKS9SYWRpdXM7ZmxvYXQgaW5uZXJkPWNsYW1wKGRlbHRhZCoyLjAsMC4wLDEuMCk7ZmxvYXQgb3V0ZXJkPWNsYW1wKGRlbHRhZCoyLjAtMS4wLDAuMCwxLjApO2Zsb2F0IGJldmVsQW5nbGU9b3V0ZXJkKjMuMTQxNTkqMC41O2Zsb2F0IHNpbmI9c2luKGJldmVsQW5nbGUpO2Zsb2F0IGNvc2I9Y29zKGJldmVsQW5nbGUpO2Zsb2F0IGJldmVsZD0oMS4wLWYpKmlubmVyZCtmKnNpbmI7ZmxvYXQgYnI9b3V0ZXJkO3ZlYzIgcjI9Mi4wKnZlYzIoUmFkaXVzL0FuaXNvdHJvcHksUmFkaXVzKTtmbG9hdCBkaXI9UC56PDAuMDAwMSA/IDEuMCA6IC0xLjA7TmV3X1VWPWNlbnRlcityMiooKDAuNS1jZW50ZXIpK25vcm1hbGl6ZShkZWx0YSt2ZWMyKDAuMCwwLjAwMDAwMSkpKmJldmVsZCowLjUpO05ld19QPXZlYzMoTmV3X1VWLTAuNSxQLnorZGlyKigxLjAtY29zYikqQmV2ZWwqU2NhbGVaKTtSYWRpYWxfR3JhZGllbnQ9Y2xhbXAoKGRlbHRhZC0wLjUpKjIuMCwwLjAsMS4wKTtSYWRpYWxfRGlyPXZlYzMoZGVsdGEqcjIsMC4wKTt2ZWMzIGJldmVsZWROb3JtYWw9Y29zYipOb3JtYWxfT2JqZWN0K3NpbmIqdmVjMyhkZWx0YS54LGRlbHRhLnksMC4wKTtOZXdfTm9ybWFsPU5vcm1hbF9PYmplY3Quej09MC4wID8gTm9ybWFsX09iamVjdCA6IGJldmVsZWROb3JtYWw7fVxudm9pZCBPYmplY3RfVG9fV29ybGRfRGlyX0I2MChcbnZlYzMgRGlyX09iamVjdCxcbm91dCB2ZWMzIE5vcm1hbF9Xb3JsZCxcbm91dCB2ZWMzIE5vcm1hbF9Xb3JsZF9OLFxub3V0IGZsb2F0IE5vcm1hbF9MZW5ndGgpXG57Tm9ybWFsX1dvcmxkPSh3b3JsZCp2ZWM0KERpcl9PYmplY3QsMC4wKSkueHl6O05vcm1hbF9MZW5ndGg9bGVuZ3RoKE5vcm1hbF9Xb3JsZCk7Tm9ybWFsX1dvcmxkX049Tm9ybWFsX1dvcmxkL05vcm1hbF9MZW5ndGg7fVxudm9pZCBUb19YWVpfQjc4KFxudmVjMyBWZWMzLFxub3V0IGZsb2F0IFgsXG5vdXQgZmxvYXQgWSxcbm91dCBmbG9hdCBaKVxue1g9VmVjMy54O1k9VmVjMy55O1o9VmVjMy56O31cbnZvaWQgQ29uZGl0aW9uYWxfRmxvYXRfQjkzKFxuYm9vbCBXaGljaCxcbmZsb2F0IElmX1RydWUsXG5mbG9hdCBJZl9GYWxzZSxcbm91dCBmbG9hdCBSZXN1bHQpXG57UmVzdWx0PVdoaWNoID8gSWZfVHJ1ZSA6IElmX0ZhbHNlO31cbnZvaWQgT2JqZWN0X1RvX1dvcmxkX0Rpcl9CMjgoXG52ZWMzIERpcl9PYmplY3QsXG5vdXQgdmVjMyBCaW5vcm1hbF9Xb3JsZCxcbm91dCB2ZWMzIEJpbm9ybWFsX1dvcmxkX04sXG5vdXQgZmxvYXQgQmlub3JtYWxfTGVuZ3RoKVxue0Jpbm9ybWFsX1dvcmxkPSh3b3JsZCp2ZWM0KERpcl9PYmplY3QsMC4wKSkueHl6O0Jpbm9ybWFsX0xlbmd0aD1sZW5ndGgoQmlub3JtYWxfV29ybGQpO0Jpbm9ybWFsX1dvcmxkX049Qmlub3JtYWxfV29ybGQvQmlub3JtYWxfTGVuZ3RoO31cbnZvaWQgUGlja19SYWRpdXNfQjY5KFxuZmxvYXQgUmFkaXVzLFxuZmxvYXQgUmFkaXVzX1RvcF9MZWZ0LFxuZmxvYXQgUmFkaXVzX1RvcF9SaWdodCxcbmZsb2F0IFJhZGl1c19Cb3R0b21fTGVmdCxcbmZsb2F0IFJhZGl1c19Cb3R0b21fUmlnaHQsXG52ZWMzIFBvc2l0aW9uLFxub3V0IGZsb2F0IFJlc3VsdClcbntib29sIHdoaWNoWT1Qb3NpdGlvbi55PjAuMDtSZXN1bHQ9UG9zaXRpb24ueDwwLjAgPyAod2hpY2hZID8gUmFkaXVzX1RvcF9MZWZ0IDogUmFkaXVzX0JvdHRvbV9MZWZ0KSA6ICh3aGljaFkgPyBSYWRpdXNfVG9wX1JpZ2h0IDogUmFkaXVzX0JvdHRvbV9SaWdodCk7UmVzdWx0Kj1SYWRpdXM7fVxudm9pZCBDb25kaXRpb25hbF9GbG9hdF9CMzYoXG5ib29sIFdoaWNoLFxuZmxvYXQgSWZfVHJ1ZSxcbmZsb2F0IElmX0ZhbHNlLFxub3V0IGZsb2F0IFJlc3VsdClcbntSZXN1bHQ9V2hpY2ggPyBJZl9UcnVlIDogSWZfRmFsc2U7fVxudm9pZCBHcmVhdGVyX1RoYW5fQjM3KFxuZmxvYXQgTGVmdCxcbmZsb2F0IFJpZ2h0LFxub3V0IGJvb2wgTm90X0dyZWF0ZXJfVGhhbixcbm91dCBib29sIEdyZWF0ZXJfVGhhbilcbntHcmVhdGVyX1RoYW49TGVmdD5SaWdodDtOb3RfR3JlYXRlcl9UaGFuPSFHcmVhdGVyX1RoYW47fVxudm9pZCBSZW1hcF9SYW5nZV9CMTA1KFxuZmxvYXQgSW5fTWluLFxuZmxvYXQgSW5fTWF4LFxuZmxvYXQgT3V0X01pbixcbmZsb2F0IE91dF9NYXgsXG5mbG9hdCBJbixcbm91dCBmbG9hdCBPdXQpXG57T3V0PW1peChPdXRfTWluLE91dF9NYXgsY2xhbXAoKEluLUluX01pbikvKEluX01heC1Jbl9NaW4pLDAuMCwxLjApKTt9XG52b2lkIG1haW4oKVxue3ZlYzIgWFlfUTg1O1hZX1E4NT0odXYtdmVjMigwLjUsMC41KSkqX0RlY2FsX1NjYWxlX1hZXyt2ZWMyKDAuNSwwLjUpO3ZlYzMgVGFuZ2VudF9Xb3JsZF9RMjc7dmVjMyBUYW5nZW50X1dvcmxkX05fUTI3O2Zsb2F0IFRhbmdlbnRfTGVuZ3RoX1EyNztUYW5nZW50X1dvcmxkX1EyNz0od29ybGQqdmVjNCh2ZWMzKDEsMCwwKSwwLjApKS54eXo7VGFuZ2VudF9MZW5ndGhfUTI3PWxlbmd0aChUYW5nZW50X1dvcmxkX1EyNyk7VGFuZ2VudF9Xb3JsZF9OX1EyNz1UYW5nZW50X1dvcmxkX1EyNy9UYW5nZW50X0xlbmd0aF9RMjc7dmVjMyBOb3JtYWxfV29ybGRfUTYwO3ZlYzMgTm9ybWFsX1dvcmxkX05fUTYwO2Zsb2F0IE5vcm1hbF9MZW5ndGhfUTYwO09iamVjdF9Ub19Xb3JsZF9EaXJfQjYwKHZlYzMoMCwwLDEpLE5vcm1hbF9Xb3JsZF9RNjAsTm9ybWFsX1dvcmxkX05fUTYwLE5vcm1hbF9MZW5ndGhfUTYwKTtmbG9hdCBYX1E3ODtmbG9hdCBZX1E3ODtmbG9hdCBaX1E3ODtUb19YWVpfQjc4KHBvc2l0aW9uLFhfUTc4LFlfUTc4LFpfUTc4KTt2ZWMzIE5ybV9Xb3JsZF9RMjY7TnJtX1dvcmxkX1EyNj1ub3JtYWxpemUoKHdvcmxkKnZlYzQobm9ybWFsLDAuMCkpLnh5eik7dmVjMyBCaW5vcm1hbF9Xb3JsZF9RMjg7dmVjMyBCaW5vcm1hbF9Xb3JsZF9OX1EyODtmbG9hdCBCaW5vcm1hbF9MZW5ndGhfUTI4O09iamVjdF9Ub19Xb3JsZF9EaXJfQjI4KHZlYzMoMCwxLDApLEJpbm9ybWFsX1dvcmxkX1EyOCxCaW5vcm1hbF9Xb3JsZF9OX1EyOCxCaW5vcm1hbF9MZW5ndGhfUTI4KTtmbG9hdCBBbmlzb3Ryb3B5X1EyOT1UYW5nZW50X0xlbmd0aF9RMjcvQmlub3JtYWxfTGVuZ3RoX1EyODtmbG9hdCBSZXN1bHRfUTY5O1BpY2tfUmFkaXVzX0I2OShfUmFkaXVzXyxfUmFkaXVzX1RvcF9MZWZ0XyxfUmFkaXVzX1RvcF9SaWdodF8sX1JhZGl1c19Cb3R0b21fTGVmdF8sX1JhZGl1c19Cb3R0b21fUmlnaHRfLHBvc2l0aW9uLFJlc3VsdF9RNjkpO2Zsb2F0IEFuaXNvdHJvcHlfUTUzPUJpbm9ybWFsX0xlbmd0aF9RMjgvTm9ybWFsX0xlbmd0aF9RNjA7Ym9vbCBOb3RfR3JlYXRlcl9UaGFuX1EzNztib29sIEdyZWF0ZXJfVGhhbl9RMzc7R3JlYXRlcl9UaGFuX0IzNyhaX1E3OCwwLjAsTm90X0dyZWF0ZXJfVGhhbl9RMzcsR3JlYXRlcl9UaGFuX1EzNyk7dmVjNCBMaW5lYXJfUTEwMTtMaW5lYXJfUTEwMS5yZ2I9Y2xhbXAoX0xlZnRfQ29sb3JfLnJnYipfTGVmdF9Db2xvcl8ucmdiLDAuMCwxLjApO0xpbmVhcl9RMTAxLmE9X0xlZnRfQ29sb3JfLmE7dmVjNCBMaW5lYXJfUTEwMjtMaW5lYXJfUTEwMi5yZ2I9Y2xhbXAoX1JpZ2h0X0NvbG9yXy5yZ2IqX1JpZ2h0X0NvbG9yXy5yZ2IsMC4wLDEuMCk7TGluZWFyX1ExMDIuYT1fUmlnaHRfQ29sb3JfLmE7dmVjMyBEaWZmZXJlbmNlX1E2MT12ZWMzKDAsMCwwKS1Ob3JtYWxfV29ybGRfTl9RNjA7dmVjNCBPdXRfQ29sb3JfUTM0PXZlYzQoWF9RNzgsWV9RNzgsWl9RNzgsMSk7ZmxvYXQgUmVzdWx0X1EzNjtDb25kaXRpb25hbF9GbG9hdF9CMzYoR3JlYXRlcl9UaGFuX1EzNyxfQmV2ZWxfQmFja18sX0JldmVsX0Zyb250XyxSZXN1bHRfUTM2KTtmbG9hdCBSZXN1bHRfUTk0O0NvbmRpdGlvbmFsX0Zsb2F0X0IzNihHcmVhdGVyX1RoYW5fUTM3LF9CZXZlbF9CYWNrX1N0cmV0Y2hfLF9CZXZlbF9Gcm9udF9TdHJldGNoXyxSZXN1bHRfUTk0KTt2ZWMzIE5ld19QX1ExMzA7dmVjMiBOZXdfVVZfUTEzMDtmbG9hdCBSYWRpYWxfR3JhZGllbnRfUTEzMDt2ZWMzIFJhZGlhbF9EaXJfUTEzMDt2ZWMzIE5ld19Ob3JtYWxfUTEzMDtNb3ZlX1ZlcnRzX0IxMzAoQW5pc290cm9weV9RMjkscG9zaXRpb24sUmVzdWx0X1E2OSxSZXN1bHRfUTM2LG5vcm1hbCxBbmlzb3Ryb3B5X1E1MyxSZXN1bHRfUTk0LE5ld19QX1ExMzAsTmV3X1VWX1ExMzAsUmFkaWFsX0dyYWRpZW50X1ExMzAsUmFkaWFsX0Rpcl9RMTMwLE5ld19Ob3JtYWxfUTEzMCk7ZmxvYXQgWF9ROTg7ZmxvYXQgWV9ROTg7WF9ROTg9TmV3X1VWX1ExMzAueDtZX1E5OD1OZXdfVVZfUTEzMC55O3ZlYzMgUG9zX1dvcmxkX1ExMjtPYmplY3RfVG9fV29ybGRfUG9zX0IxMihOZXdfUF9RMTMwLFBvc19Xb3JsZF9RMTIpO3ZlYzMgTnJtX1dvcmxkX1EzMjtPYmplY3RfVG9fV29ybGRfTm9ybWFsX0IzMihOZXdfTm9ybWFsX1ExMzAsTnJtX1dvcmxkX1EzMik7dmVjNCBCbG9iX0luZm9fUTIzO1xuI2lmIEJMT0JfRU5BQkxFXG5CbG9iX1ZlcnRleF9CMjMoUG9zX1dvcmxkX1ExMixOcm1fV29ybGRfUTI2LFRhbmdlbnRfV29ybGRfTl9RMjcsQmlub3JtYWxfV29ybGRfTl9RMjgsX0Jsb2JfUG9zaXRpb25fLF9CbG9iX0ludGVuc2l0eV8sX0Jsb2JfTmVhcl9TaXplXyxfQmxvYl9GYXJfU2l6ZV8sX0Jsb2JfTmVhcl9EaXN0YW5jZV8sX0Jsb2JfRmFyX0Rpc3RhbmNlXyxfQmxvYl9GYWRlX0xlbmd0aF8sX0Jsb2JfUHVsc2VfLF9CbG9iX0ZhZGVfLEJsb2JfSW5mb19RMjMpO1xuI2Vsc2VcbkJsb2JfSW5mb19RMjM9dmVjNCgwLDAsMCwwKTtcbiNlbmRpZlxudmVjNCBCbG9iX0luZm9fUTI0O1xuI2lmIEJMT0JfRU5BQkxFXzJcbkJsb2JfVmVydGV4X0IyNChQb3NfV29ybGRfUTEyLE5ybV9Xb3JsZF9RMjYsVGFuZ2VudF9Xb3JsZF9OX1EyNyxCaW5vcm1hbF9Xb3JsZF9OX1EyOCxfQmxvYl9Qb3NpdGlvbl8yXyxfQmxvYl9JbnRlbnNpdHlfLF9CbG9iX05lYXJfU2l6ZV8yXyxfQmxvYl9GYXJfU2l6ZV8sX0Jsb2JfTmVhcl9EaXN0YW5jZV8sX0Jsb2JfRmFyX0Rpc3RhbmNlXyxfQmxvYl9GYWRlX0xlbmd0aF8sX0Jsb2JfUHVsc2VfMl8sX0Jsb2JfRmFkZV8yXyxCbG9iX0luZm9fUTI0KTtcbiNlbHNlXG5CbG9iX0luZm9fUTI0PXZlYzQoMCwwLDAsMCk7XG4jZW5kaWZcbmZsb2F0IE91dF9RMTA1O1JlbWFwX1JhbmdlX0IxMDUoMC4wLDEuMCwwLjAsMS4wLFhfUTk4LE91dF9RMTA1KTtmbG9hdCBYX1E4NjtmbG9hdCBZX1E4NjtmbG9hdCBaX1E4NjtUb19YWVpfQjc4KE5ybV9Xb3JsZF9RMzIsWF9RODYsWV9RODYsWl9RODYpO3ZlYzQgQ29sb3JfQXRfVF9ROTc9bWl4KExpbmVhcl9RMTAxLExpbmVhcl9RMTAyLE91dF9RMTA1KTtmbG9hdCBNaW51c19GX1E4Nz0tWl9RODY7ZmxvYXQgUl9ROTk7ZmxvYXQgR19ROTk7ZmxvYXQgQl9ROTk7ZmxvYXQgQV9ROTk7Ul9ROTk9Q29sb3JfQXRfVF9ROTcucjsgR19ROTk9Q29sb3JfQXRfVF9ROTcuZzsgQl9ROTk9Q29sb3JfQXRfVF9ROTcuYjsgQV9ROTk9Q29sb3JfQXRfVF9ROTcuYTtmbG9hdCBDbGFtcEZfUTg4PWNsYW1wKDAuMCxNaW51c19GX1E4NywxLjApO2Zsb2F0IFJlc3VsdF9ROTM7Q29uZGl0aW9uYWxfRmxvYXRfQjkzKF9EZWNhbF9Gcm9udF9Pbmx5XyxDbGFtcEZfUTg4LDEuMCxSZXN1bHRfUTkzKTt2ZWM0IFZlYzRfUTg5PXZlYzQoUmVzdWx0X1E5MyxSYWRpYWxfR3JhZGllbnRfUTEzMCxHX1E5OSxCX1E5OSk7dmVjMyBQb3NpdGlvbj1Qb3NfV29ybGRfUTEyO3ZlYzMgTm9ybWFsPU5ybV9Xb3JsZF9RMzI7dmVjMiBVVj1YWV9RODU7dmVjMyBUYW5nZW50PVRhbmdlbnRfV29ybGRfTl9RMjc7dmVjMyBCaW5vcm1hbD1EaWZmZXJlbmNlX1E2MTt2ZWM0IENvbG9yPU91dF9Db2xvcl9RMzQ7dmVjNCBFeHRyYTE9VmVjNF9RODk7dmVjNCBFeHRyYTI9QmxvYl9JbmZvX1EyMzt2ZWM0IEV4dHJhMz1CbG9iX0luZm9fUTI0O2dsX1Bvc2l0aW9uPXZpZXdQcm9qZWN0aW9uKnZlYzQoUG9zaXRpb24sMSk7dlBvc2l0aW9uPVBvc2l0aW9uO3ZOb3JtYWw9Tm9ybWFsO3ZVVj1VVjt2VGFuZ2VudD1UYW5nZW50O3ZCaW5vcm1hbD1CaW5vcm1hbDt2Q29sb3I9Q29sb3I7dkV4dHJhMT1FeHRyYTE7dkV4dHJhMj1FeHRyYTI7dkV4dHJhMz1FeHRyYTM7fWA7XG4vLyBTaWRlZWZmZWN0XG5TaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVbbmFtZV0gPSBzaGFkZXI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbXJkbFNsaWRlckJhclZlcnRleFNoYWRlciA9IHsgbmFtZSwgc2hhZGVyIH07XG4iLCIvLyBEbyBub3QgZWRpdC5cbmltcG9ydCB7IFNoYWRlclN0b3JlIH0gZnJvbSBcImNvcmUvRW5naW5lcy9zaGFkZXJTdG9yZVwiO1xuXG5jb25zdCBuYW1lID0gXCJtcmRsU2xpZGVyVGh1bWJQaXhlbFNoYWRlclwiO1xuY29uc3Qgc2hhZGVyID0gYHVuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjt2YXJ5aW5nIHZlYzMgdlBvc2l0aW9uO3ZhcnlpbmcgdmVjMyB2Tm9ybWFsO3ZhcnlpbmcgdmVjMiB2VVY7dmFyeWluZyB2ZWMzIHZUYW5nZW50O3ZhcnlpbmcgdmVjMyB2Qmlub3JtYWw7dmFyeWluZyB2ZWM0IHZDb2xvcjt2YXJ5aW5nIHZlYzQgdkV4dHJhMTt2YXJ5aW5nIHZlYzQgdkV4dHJhMjt2YXJ5aW5nIHZlYzQgdkV4dHJhMzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfO3VuaWZvcm0gZmxvYXQgX0JldmVsX0Zyb250Xzt1bmlmb3JtIGZsb2F0IF9CZXZlbF9Gcm9udF9TdHJldGNoXzt1bmlmb3JtIGZsb2F0IF9CZXZlbF9CYWNrXzt1bmlmb3JtIGZsb2F0IF9CZXZlbF9CYWNrX1N0cmV0Y2hfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Ub3BfTGVmdF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX1RvcF9SaWdodF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX0JvdHRvbV9MZWZ0Xzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfQm90dG9tX1JpZ2h0Xzt1bmlmb3JtIGJvb2wgX0J1bGdlX0VuYWJsZWRfO3VuaWZvcm0gZmxvYXQgX0J1bGdlX0hlaWdodF87dW5pZm9ybSBmbG9hdCBfQnVsZ2VfUmFkaXVzXzt1bmlmb3JtIGZsb2F0IF9TdW5fSW50ZW5zaXR5Xzt1bmlmb3JtIGZsb2F0IF9TdW5fVGhldGFfO3VuaWZvcm0gZmxvYXQgX1N1bl9QaGlfO3VuaWZvcm0gZmxvYXQgX0luZGlyZWN0X0RpZmZ1c2VfO3VuaWZvcm0gdmVjNCBfQWxiZWRvXzt1bmlmb3JtIGZsb2F0IF9TcGVjdWxhcl87dW5pZm9ybSBmbG9hdCBfU2hpbmluZXNzXzt1bmlmb3JtIGZsb2F0IF9TaGFycG5lc3NfO3VuaWZvcm0gZmxvYXQgX1N1YnN1cmZhY2VfO3VuaWZvcm0gdmVjNCBfTGVmdF9Db2xvcl87dW5pZm9ybSB2ZWM0IF9SaWdodF9Db2xvcl87dW5pZm9ybSBmbG9hdCBfUmVmbGVjdGlvbl87dW5pZm9ybSBmbG9hdCBfRnJvbnRfUmVmbGVjdF87dW5pZm9ybSBmbG9hdCBfRWRnZV9SZWZsZWN0Xzt1bmlmb3JtIGZsb2F0IF9Qb3dlcl87dW5pZm9ybSB2ZWM0IF9Ta3lfQ29sb3JfO3VuaWZvcm0gdmVjNCBfSG9yaXpvbl9Db2xvcl87dW5pZm9ybSB2ZWM0IF9Hcm91bmRfQ29sb3JfO3VuaWZvcm0gZmxvYXQgX0hvcml6b25fUG93ZXJfO3VuaWZvcm0gc2FtcGxlcjJEIF9SZWZsZWN0aW9uX01hcF87dW5pZm9ybSBzYW1wbGVyMkQgX0luZGlyZWN0X0Vudmlyb25tZW50Xzt1bmlmb3JtIGZsb2F0IF9XaWR0aF87dW5pZm9ybSBmbG9hdCBfRnV6el87dW5pZm9ybSBmbG9hdCBfTWluX0Z1enpfO3VuaWZvcm0gZmxvYXQgX0NsaXBfRmFkZV87dW5pZm9ybSBmbG9hdCBfSHVlX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9TYXR1cmF0aW9uX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9WYWx1ZV9TaGlmdF87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ludGVuc2l0eV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFyX1NpemVfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfRGlzdGFuY2VfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV9MZW5ndGhfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfUHVsc2VfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfRmFkZV87dW5pZm9ybSBzYW1wbGVyMkQgX0Jsb2JfVGV4dHVyZV87dW5pZm9ybSB2ZWMzIF9CbG9iX1Bvc2l0aW9uXzJfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfTmVhcl9TaXplXzJfO3VuaWZvcm0gZmxvYXQgX0Jsb2JfUHVsc2VfMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlXzJfO3VuaWZvcm0gdmVjMyBfTGVmdF9JbmRleF9Qb3NfO3VuaWZvcm0gdmVjMyBfUmlnaHRfSW5kZXhfUG9zXzt1bmlmb3JtIHZlYzMgX0xlZnRfSW5kZXhfTWlkZGxlX1Bvc187dW5pZm9ybSB2ZWMzIF9SaWdodF9JbmRleF9NaWRkbGVfUG9zXzt1bmlmb3JtIHNhbXBsZXIyRCBfRGVjYWxfO3VuaWZvcm0gdmVjMiBfRGVjYWxfU2NhbGVfWFlfO3VuaWZvcm0gYm9vbCBfRGVjYWxfRnJvbnRfT25seV87dW5pZm9ybSBmbG9hdCBfUmltX0ludGVuc2l0eV87dW5pZm9ybSBzYW1wbGVyMkQgX1JpbV9UZXh0dXJlXzt1bmlmb3JtIGZsb2F0IF9SaW1fSHVlX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9SaW1fU2F0dXJhdGlvbl9TaGlmdF87dW5pZm9ybSBmbG9hdCBfUmltX1ZhbHVlX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9JcmlkZXNjZW5jZV9JbnRlbnNpdHlfO3VuaWZvcm0gc2FtcGxlcjJEIF9JcmlkZXNjZW5jZV9UZXh0dXJlXzt1bmlmb3JtIGJvb2wgVXNlX0dsb2JhbF9MZWZ0X0luZGV4O3VuaWZvcm0gYm9vbCBVc2VfR2xvYmFsX1JpZ2h0X0luZGV4O3VuaWZvcm0gdmVjNCBHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb247dW5pZm9ybSB2ZWM0IEdsb2JhbF9SaWdodF9JbmRleF9UaXBfUG9zaXRpb247dW5pZm9ybSB2ZWM0IEdsb2JhbF9MZWZ0X1RodW1iX1RpcF9Qb3NpdGlvbjt1bmlmb3JtIHZlYzQgR2xvYmFsX1JpZ2h0X1RodW1iX1RpcF9Qb3NpdGlvbjt1bmlmb3JtIHZlYzQgR2xvYmFsX0xlZnRfSW5kZXhfTWlkZGxlX1Bvc2l0aW9uO3VuaWZvcm0gdmVjNCBHbG9iYWxfUmlnaHRfSW5kZXhfTWlkZGxlX1Bvc2l0aW9uO3VuaWZvcm0gZmxvYXQgR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Byb3hpbWl0eTt1bmlmb3JtIGZsb2F0IEdsb2JhbF9SaWdodF9JbmRleF9UaXBfUHJveGltaXR5O3ZvaWQgQmxvYl9GcmFnbWVudF9CMTgwKFxuc2FtcGxlcjJEIEJsb2JfVGV4dHVyZSxcbnZlYzQgQmxvYl9JbmZvMSxcbnZlYzQgQmxvYl9JbmZvMixcbm91dCB2ZWM0IEJsb2JfQ29sb3IpXG57ZmxvYXQgazE9ZG90KEJsb2JfSW5mbzEueHksQmxvYl9JbmZvMS54eSk7ZmxvYXQgazI9ZG90KEJsb2JfSW5mbzIueHksQmxvYl9JbmZvMi54eSk7dmVjMyBjbG9zZXI9azE8azIgPyB2ZWMzKGsxLEJsb2JfSW5mbzEueixCbG9iX0luZm8xLncpIDogdmVjMyhrMixCbG9iX0luZm8yLnosQmxvYl9JbmZvMi53KTtCbG9iX0NvbG9yPWNsb3Nlci56KnRleHR1cmUoQmxvYl9UZXh0dXJlLHZlYzIodmVjMihzcXJ0KGNsb3Nlci54KSxjbG9zZXIueSkueCwxLjAtdmVjMihzcXJ0KGNsb3Nlci54KSxjbG9zZXIueSkueSkpKmNsYW1wKDEuMC1jbG9zZXIueCwwLjAsMS4wKTt9XG52b2lkIEZhc3RMaW5lYXJUb3NSR0JfQjE5MihcbnZlYzQgTGluZWFyLFxub3V0IHZlYzQgc1JHQilcbntzUkdCLnJnYj1zcXJ0KGNsYW1wKExpbmVhci5yZ2IsMC4wLDEuMCkpO3NSR0IuYT1MaW5lYXIuYTt9XG52b2lkIFNjYWxlX1JHQl9CMjA5KFxudmVjNCBDb2xvcixcbmZsb2F0IFNjYWxhcixcbm91dCB2ZWM0IFJlc3VsdClcbntSZXN1bHQ9dmVjNChTY2FsYXIsU2NhbGFyLFNjYWxhciwxKSpDb2xvcjt9XG52b2lkIEZyYWdtZW50X01haW5fQjI3MShcbmZsb2F0IFN1bl9JbnRlbnNpdHksXG5mbG9hdCBTdW5fVGhldGEsXG5mbG9hdCBTdW5fUGhpLFxudmVjMyBOb3JtYWwsXG52ZWM0IEFsYmVkbyxcbmZsb2F0IEZyZXNuZWxfUmVmbGVjdCxcbmZsb2F0IFNoaW5pbmVzcyxcbnZlYzMgSW5jaWRlbnQsXG52ZWM0IEhvcml6b25fQ29sb3IsXG52ZWM0IFNreV9Db2xvcixcbnZlYzQgR3JvdW5kX0NvbG9yLFxuZmxvYXQgSW5kaXJlY3RfRGlmZnVzZSxcbmZsb2F0IFNwZWN1bGFyLFxuZmxvYXQgSG9yaXpvbl9Qb3dlcixcbmZsb2F0IFJlZmxlY3Rpb24sXG52ZWM0IFJlZmxlY3Rpb25fU2FtcGxlLFxudmVjNCBJbmRpcmVjdF9TYW1wbGUsXG5mbG9hdCBTaGFycG5lc3MsXG5mbG9hdCBTU1MsXG5mbG9hdCBTdWJzdXJmYWNlLFxudmVjNCBUcmFuc2x1Y2VuY2UsXG52ZWM0IFJpbV9MaWdodCxcbnZlYzQgSXJpZGVzY2VuY2UsXG5vdXQgdmVjNCBSZXN1bHQpXG57ZmxvYXQgdGhldGE9U3VuX1RoZXRhKjIuMCozLjE0MTU5O2Zsb2F0IHBoaT1TdW5fUGhpKjMuMTQxNTk7dmVjMyBsaWdodERpcj0gdmVjMyhjb3MocGhpKSpjb3ModGhldGEpLHNpbihwaGkpLGNvcyhwaGkpKnNpbih0aGV0YSkpO2Zsb2F0IE5kb3RMPW1heChkb3QobGlnaHREaXIsTm9ybWFsKSwwLjApO3ZlYzMgUj1yZWZsZWN0KEluY2lkZW50LE5vcm1hbCk7ZmxvYXQgUmRvdEw9bWF4KDAuMCxkb3QoUixsaWdodERpcikpO2Zsb2F0IHNwZWN1bGFyPXBvdyhSZG90TCxTaGluaW5lc3MpO3NwZWN1bGFyPW1peChzcGVjdWxhcixzbW9vdGhzdGVwKDAuNDk1KlNoYXJwbmVzcywxLjAtMC40OTUqU2hhcnBuZXNzLHNwZWN1bGFyKSxTaGFycG5lc3MpO3ZlYzQgZ2k9bWl4KEdyb3VuZF9Db2xvcixTa3lfQ29sb3IsTm9ybWFsLnkqMC41KzAuNSk7UmVzdWx0PSgoU3VuX0ludGVuc2l0eSpOZG90TCtJbmRpcmVjdF9TYW1wbGUqSW5kaXJlY3RfRGlmZnVzZStUcmFuc2x1Y2VuY2UpKigxLjArU1NTKlN1YnN1cmZhY2UpKSpBbGJlZG8qKDEuMC1GcmVzbmVsX1JlZmxlY3QpKyhTdW5fSW50ZW5zaXR5KnNwZWN1bGFyKlNwZWN1bGFyK0ZyZXNuZWxfUmVmbGVjdCpSZWZsZWN0aW9uKlJlZmxlY3Rpb25fU2FtcGxlKStGcmVzbmVsX1JlZmxlY3QqUmltX0xpZ2h0K0lyaWRlc2NlbmNlO31cbnZvaWQgQnVsZ2VfQjIyOShcbmJvb2wgRW5hYmxlZCxcbnZlYzMgTm9ybWFsLFxudmVjMyBUYW5nZW50LFxuZmxvYXQgQnVsZ2VfSGVpZ2h0LFxudmVjNCBVVixcbmZsb2F0IEJ1bGdlX1JhZGl1cyxcbnZlYzMgQnV0dG9uTixcbm91dCB2ZWMzIE5ld19Ob3JtYWwpXG57dmVjMiB4eT1jbGFtcChVVi54eSoyLjAsdmVjMigtMSwtMSksdmVjMigxLDEpKTt2ZWMzIEI9KGNyb3NzKE5vcm1hbCxUYW5nZW50KSk7ZmxvYXQgaz0tY2xhbXAoMS4wLWxlbmd0aCh4eSkvQnVsZ2VfUmFkaXVzLDAuMCwxLjApKkJ1bGdlX0hlaWdodDtrPXNpbihrKjMuMTQxNTkqMC41KTtrKj1zbW9vdGhzdGVwKDAuOTk5OCwwLjk5OTksYWJzKGRvdChCdXR0b25OLE5vcm1hbCkpKTtOZXdfTm9ybWFsPU5vcm1hbCpzcXJ0KDEuMC1rKmspKyh4eS54KlRhbmdlbnQreHkueSpCKSprO05ld19Ob3JtYWw9RW5hYmxlZCA/IE5ld19Ob3JtYWwgOiBOb3JtYWw7fVxudm9pZCBTU1NfQjIyNyhcbnZlYzMgQnV0dG9uTixcbnZlYzMgTm9ybWFsLFxudmVjMyBJbmNpZGVudCxcbm91dCBmbG9hdCBSZXN1bHQpXG57ZmxvYXQgTmRvdEk9YWJzKGRvdChOb3JtYWwsSW5jaWRlbnQpKTtmbG9hdCBCZG90ST1hYnMoZG90KEJ1dHRvbk4sSW5jaWRlbnQpKTtSZXN1bHQ9KGFicyhOZG90SS1CZG90SSkpOyB9XG52b2lkIEZpbmdlck9jY2x1c2lvbl9CMjE3KFxuZmxvYXQgV2lkdGgsXG5mbG9hdCBEaXN0VG9DZW50ZXIsXG5mbG9hdCBGdXp6LFxuZmxvYXQgTWluX0Z1enosXG52ZWMzIFBvc2l0aW9uLFxudmVjMyBGb3J3YXJkLFxudmVjMyBOZWFyZXN0LFxuZmxvYXQgRmFkZV9PdXQsXG5vdXQgZmxvYXQgTm90SW5TaGFkb3cpXG57ZmxvYXQgZD1kb3QoKE5lYXJlc3QtUG9zaXRpb24pLEZvcndhcmQpO2Zsb2F0IHNoPXNtb290aHN0ZXAoV2lkdGgqMC41LFdpZHRoKjAuNStGdXp6Km1heChkLDAuMCkrTWluX0Z1enosRGlzdFRvQ2VudGVyKTtOb3RJblNoYWRvdz0xLjAtKDEuMC1zaCkqc21vb3Roc3RlcCgtRmFkZV9PdXQsMC4wLGQpO31cbnZvaWQgRmluZ2VyT2NjbHVzaW9uX0IyMTgoXG5mbG9hdCBXaWR0aCxcbmZsb2F0IERpc3RUb0NlbnRlcixcbmZsb2F0IEZ1enosXG5mbG9hdCBNaW5fRnV6eixcbnZlYzMgUG9zaXRpb24sXG52ZWMzIEZvcndhcmQsXG52ZWMzIE5lYXJlc3QsXG5mbG9hdCBGYWRlX091dCxcbm91dCBmbG9hdCBOb3RJblNoYWRvdylcbntmbG9hdCBkPWRvdCgoTmVhcmVzdC1Qb3NpdGlvbiksRm9yd2FyZCk7ZmxvYXQgc2g9c21vb3Roc3RlcChXaWR0aCowLjUsV2lkdGgqMC41K0Z1enoqbWF4KGQsMC4wKStNaW5fRnV6eixEaXN0VG9DZW50ZXIpO05vdEluU2hhZG93PTEuMC0oMS4wLXNoKSpzbW9vdGhzdGVwKC1GYWRlX091dCwwLjAsZCk7fVxudm9pZCBTY2FsZV9Db2xvcl9CMjQxKFxudmVjNCBDb2xvcixcbmZsb2F0IFNjYWxhcixcbm91dCB2ZWM0IFJlc3VsdClcbntSZXN1bHQ9U2NhbGFyKkNvbG9yO31cbnZvaWQgRnJvbV9IU1ZfQjIyMyhcbmZsb2F0IEh1ZSxcbmZsb2F0IFNhdHVyYXRpb24sXG5mbG9hdCBWYWx1ZSxcbmZsb2F0IEFscGhhLFxub3V0IHZlYzQgQ29sb3IpXG57dmVjNCBLPXZlYzQoMS4wLDIuMC8zLjAsMS4wLzMuMCwzLjApO3ZlYzMgcD1hYnMoZnJhY3QodmVjMyhIdWUsSHVlLEh1ZSkrSy54eXopKjYuMC1LLnd3dyk7Q29sb3IucmdiPVZhbHVlKm1peChLLnh4eCxjbGFtcChwLUsueHh4LDAuMCwxLjApLFNhdHVyYXRpb24pO0NvbG9yLmE9QWxwaGE7fVxudm9pZCBGYXN0X0ZyZXNuZWxfQjI3MihcbmZsb2F0IEZyb250X1JlZmxlY3QsXG5mbG9hdCBFZGdlX1JlZmxlY3QsXG5mbG9hdCBQb3dlcixcbnZlYzMgTm9ybWFsLFxudmVjMyBJbmNpZGVudCxcbm91dCBmbG9hdCBUcmFuc21pdCxcbm91dCBmbG9hdCBSZWZsZWN0KVxue2Zsb2F0IGQ9bWF4KC1kb3QoSW5jaWRlbnQsTm9ybWFsKSwwLjApO1JlZmxlY3Q9RnJvbnRfUmVmbGVjdCsoRWRnZV9SZWZsZWN0LUZyb250X1JlZmxlY3QpKnBvdygxLjAtZCxQb3dlcik7VHJhbnNtaXQ9MS4wLVJlZmxlY3Q7fVxudm9pZCBNYXBwZWRfRW52aXJvbm1lbnRfQjIwMShcbnNhbXBsZXIyRCBSZWZsZWN0ZWRfRW52aXJvbm1lbnQsXG5zYW1wbGVyMkQgSW5kaXJlY3RfRW52aXJvbm1lbnQsXG52ZWMzIERpcixcbm91dCB2ZWM0IFJlZmxlY3RlZF9Db2xvcixcbm91dCB2ZWM0IEluZGlyZWN0X0RpZmZ1c2UpXG57UmVmbGVjdGVkX0NvbG9yPXRleHR1cmUoUmVmbGVjdGVkX0Vudmlyb25tZW50LHZlYzIoYXRhbihEaXIueixEaXIueCkvMy4xNDE1OSowLjUsYXNpbihEaXIueSkvMy4xNDE1OSswLjUpKTtJbmRpcmVjdF9EaWZmdXNlPXRleHR1cmUoSW5kaXJlY3RfRW52aXJvbm1lbnQsdmVjMihhdGFuKERpci56LERpci54KS8zLjE0MTU5KjAuNSxhc2luKERpci55KS8zLjE0MTU5KzAuNSkpO31cbnZlYzQgU2FtcGxlRW52X0JpZDIwMCh2ZWMzIEQsdmVjNCBTLHZlYzQgSCx2ZWM0IEcsZmxvYXQgZXhwb25lbnQpXG57ZmxvYXQgaz1wb3coYWJzKEQueSksZXhwb25lbnQpO3ZlYzQgQztpZiAoRC55PjAuMCkge0M9bWl4KEgsUyxrKTt9IGVsc2Uge0M9bWl4KEgsRyxrKTsgfVxucmV0dXJuIEM7fVxudm9pZCBTa3lfRW52aXJvbm1lbnRfQjIwMChcbnZlYzMgTm9ybWFsLFxudmVjMyBSZWZsZWN0ZWQsXG52ZWM0IFNreV9Db2xvcixcbnZlYzQgSG9yaXpvbl9Db2xvcixcbnZlYzQgR3JvdW5kX0NvbG9yLFxuZmxvYXQgSG9yaXpvbl9Qb3dlcixcbm91dCB2ZWM0IFJlZmxlY3RlZF9Db2xvcixcbm91dCB2ZWM0IEluZGlyZWN0X0NvbG9yKVxue1JlZmxlY3RlZF9Db2xvcj1TYW1wbGVFbnZfQmlkMjAwKFJlZmxlY3RlZCxTa3lfQ29sb3IsSG9yaXpvbl9Db2xvcixHcm91bmRfQ29sb3IsSG9yaXpvbl9Qb3dlcik7SW5kaXJlY3RfQ29sb3I9bWl4KEdyb3VuZF9Db2xvcixTa3lfQ29sb3IsTm9ybWFsLnkqMC41KzAuNSk7fVxudm9pZCBNaW5fU2VnbWVudF9EaXN0YW5jZV9CMjE1KFxudmVjMyBQMCxcbnZlYzMgUDEsXG52ZWMzIFEwLFxudmVjMyBRMSxcbm91dCB2ZWMzIE5lYXJQLFxub3V0IHZlYzMgTmVhclEsXG5vdXQgZmxvYXQgRGlzdGFuY2UpXG57dmVjMyB1PVAxLVAwO3ZlYzMgdj1RMS1RMDt2ZWMzIHc9UDAtUTA7ZmxvYXQgYT1kb3QodSx1KTtmbG9hdCBiPWRvdCh1LHYpO2Zsb2F0IGM9ZG90KHYsdik7ZmxvYXQgZD1kb3QodSx3KTtmbG9hdCBlPWRvdCh2LHcpO2Zsb2F0IEQ9YSpjLWIqYjtmbG9hdCBzRD1EO2Zsb2F0IHREPUQ7ZmxvYXQgc2Msc04sdGMsdE47aWYgKEQ8MC4wMDAwMSkge3NOPTAuMDtzRD0xLjA7dE49ZTt0RD1jO30gZWxzZSB7c049KGIqZS1jKmQpO3ROPShhKmUtYipkKTtpZiAoc048MC4wKSB7c049MC4wO3ROPWU7dEQ9Yzt9IGVsc2UgaWYgKHNOPnNEKSB7c049c0Q7dE49ZStiO3REPWM7fX1cbmlmICh0TjwwLjApIHt0Tj0wLjA7aWYgKC1kPDAuMCkge3NOPTAuMDt9IGVsc2UgaWYgKC1kPmEpIHtzTj1zRDt9IGVsc2Uge3NOPS1kO3NEPWE7fX0gZWxzZSBpZiAodE4+dEQpIHt0Tj10RDtpZiAoKC1kK2IpPDAuMCkge3NOPTAuMDt9IGVsc2UgaWYgKCgtZCtiKT5hKSB7c049c0Q7fSBlbHNlIHtzTj0oLWQrYik7c0Q9YTt9fVxuc2M9YWJzKHNOKTwwLjAwMDAwMSA/IDAuMCA6IHNOL3NEO3RjPWFicyh0Tik8MC4wMDAwMDEgPyAwLjAgOiB0Ti90RDtOZWFyUD1QMCtzYyp1O05lYXJRPVEwK3RjKnY7RGlzdGFuY2U9ZGlzdGFuY2UoTmVhclAsTmVhclEpO31cbnZvaWQgVG9fWFlaX0IyMjQoXG52ZWMzIFZlYzMsXG5vdXQgZmxvYXQgWCxcbm91dCBmbG9hdCBZLFxub3V0IGZsb2F0IFopXG57WD1WZWMzLng7WT1WZWMzLnk7Wj1WZWMzLno7fVxudm9pZCBGaW5nZXJfUG9zaXRpb25zX0IyMTQoXG52ZWMzIExlZnRfSW5kZXhfUG9zLFxudmVjMyBSaWdodF9JbmRleF9Qb3MsXG52ZWMzIExlZnRfSW5kZXhfTWlkZGxlX1BvcyxcbnZlYzMgUmlnaHRfSW5kZXhfTWlkZGxlX1Bvcyxcbm91dCB2ZWMzIExlZnRfSW5kZXgsXG5vdXQgdmVjMyBSaWdodF9JbmRleCxcbm91dCB2ZWMzIExlZnRfSW5kZXhfTWlkZGxlLFxub3V0IHZlYzMgUmlnaHRfSW5kZXhfTWlkZGxlKVxue0xlZnRfSW5kZXg9IChVc2VfR2xvYmFsX0xlZnRfSW5kZXggPyBHbG9iYWxfTGVmdF9JbmRleF9UaXBfUG9zaXRpb24ueHl6IDogTGVmdF9JbmRleF9Qb3MpO1JpZ2h0X0luZGV4PSAoVXNlX0dsb2JhbF9SaWdodF9JbmRleCA/IEdsb2JhbF9SaWdodF9JbmRleF9UaXBfUG9zaXRpb24ueHl6IDogUmlnaHRfSW5kZXhfUG9zKTtMZWZ0X0luZGV4X01pZGRsZT0gKFVzZV9HbG9iYWxfTGVmdF9JbmRleCA/IEdsb2JhbF9MZWZ0X0luZGV4X01pZGRsZV9Qb3NpdGlvbi54eXogOiBMZWZ0X0luZGV4X01pZGRsZV9Qb3MpO1JpZ2h0X0luZGV4X01pZGRsZT0gKFVzZV9HbG9iYWxfUmlnaHRfSW5kZXggPyBHbG9iYWxfUmlnaHRfSW5kZXhfTWlkZGxlX1Bvc2l0aW9uLnh5eiA6IFJpZ2h0X0luZGV4X01pZGRsZV9Qb3MpO31cbnZvaWQgVmFyeUhTVl9CMjU4KFxudmVjMyBIU1ZfSW4sXG5mbG9hdCBIdWVfU2hpZnQsXG5mbG9hdCBTYXR1cmF0aW9uX1NoaWZ0LFxuZmxvYXQgVmFsdWVfU2hpZnQsXG5vdXQgdmVjMyBIU1ZfT3V0KVxue0hTVl9PdXQ9dmVjMyhmcmFjdChIU1ZfSW4ueCtIdWVfU2hpZnQpLGNsYW1wKEhTVl9Jbi55K1NhdHVyYXRpb25fU2hpZnQsMC4wLDEuMCksY2xhbXAoSFNWX0luLnorVmFsdWVfU2hpZnQsMC4wLDEuMCkpO31cbnZvaWQgUmVtYXBfUmFuZ2VfQjI2NChcbmZsb2F0IEluX01pbixcbmZsb2F0IEluX01heCxcbmZsb2F0IE91dF9NaW4sXG5mbG9hdCBPdXRfTWF4LFxuZmxvYXQgSW4sXG5vdXQgZmxvYXQgT3V0KVxue091dD1taXgoT3V0X01pbixPdXRfTWF4LGNsYW1wKChJbi1Jbl9NaW4pLyhJbl9NYXgtSW5fTWluKSwwLjAsMS4wKSk7fVxudm9pZCBUb19IU1ZfQjIyNShcbnZlYzQgQ29sb3IsXG5vdXQgZmxvYXQgSHVlLFxub3V0IGZsb2F0IFNhdHVyYXRpb24sXG5vdXQgZmxvYXQgVmFsdWUsXG5vdXQgZmxvYXQgQWxwaGEsXG5vdXQgdmVjMyBIU1YpXG57dmVjNCBLPXZlYzQoMC4wLC0xLjAvMy4wLDIuMC8zLjAsLTEuMCk7dmVjNCBwPUNvbG9yLmc8Q29sb3IuYiA/IHZlYzQoQ29sb3IuYmcsSy53eikgOiB2ZWM0KENvbG9yLmdiLEsueHkpO3ZlYzQgcT1Db2xvci5yPHAueCA/IHZlYzQocC54eXcsQ29sb3IucikgOiB2ZWM0KENvbG9yLnIscC55engpO2Zsb2F0IGQ9cS54LW1pbihxLncscS55KTtmbG9hdCBlPTEuMGUtMTA7SHVlPWFicyhxLnorKHEudy1xLnkpLyg2LjAqZCtlKSk7U2F0dXJhdGlvbj1kLyhxLngrZSk7VmFsdWU9cS54O0FscGhhPUNvbG9yLmE7SFNWPXZlYzMoSHVlLFNhdHVyYXRpb24sVmFsdWUpO31cbnZvaWQgQ29kZV9CMjYwKFxuZmxvYXQgWCxcbm91dCBmbG9hdCBSZXN1bHQpXG57UmVzdWx0PShhY29zKFgpLzMuMTQxNTktMC41KSoyLjA7fVxudm9pZCBSaW1fTGlnaHRfQjI4MihcbnZlYzMgRnJvbnQsXG52ZWMzIE5vcm1hbCxcbnZlYzMgSW5jaWRlbnQsXG5mbG9hdCBSaW1fSW50ZW5zaXR5LFxuc2FtcGxlcjJEIFRleHR1cmUsXG5vdXQgdmVjNCBSZXN1bHQpXG57dmVjMyBSPXJlZmxlY3QoSW5jaWRlbnQsTm9ybWFsKTtmbG9hdCBSZG90Rj1kb3QoUixGcm9udCk7ZmxvYXQgUmRvdEw9c3FydCgxLjAtUmRvdEYqUmRvdEYpO3ZlYzIgVVY9dmVjMihSLnkqMC41KzAuNSwwLjUpO3ZlYzQgQ29sb3I9dGV4dHVyZShUZXh0dXJlLFVWKTtSZXN1bHQ9Q29sb3I7fVxudm9pZCBtYWluKClcbnt2ZWM0IEJsb2JfQ29sb3JfUTE4MDtcbiNpZiBCTE9CX0VOQUJMRVxuQmxvYl9GcmFnbWVudF9CMTgwKF9CbG9iX1RleHR1cmVfLHZFeHRyYTIsdkV4dHJhMyxCbG9iX0NvbG9yX1ExODApO1xuI2Vsc2VcbkJsb2JfQ29sb3JfUTE4MD12ZWM0KDAsMCwwLDApO1xuI2VuZGlmXG52ZWMzIEluY2lkZW50X1ExODk9bm9ybWFsaXplKHZQb3NpdGlvbi1jYW1lcmFQb3NpdGlvbik7dmVjMyBOb3JtYWxpemVkX1ExODg9bm9ybWFsaXplKHZOb3JtYWwpO3ZlYzMgTm9ybWFsaXplZF9RMjIxPW5vcm1hbGl6ZSh2VGFuZ2VudCk7dmVjNCBDb2xvcl9RMjMzO1xuI2lmIERFQ0FMX0VOQUJMRVxuQ29sb3JfUTIzMz10ZXh0dXJlKF9EZWNhbF8sdlVWKTtcbiNlbHNlXG5Db2xvcl9RMjMzPXZlYzQoMCwwLDAsMCk7XG4jZW5kaWZcbmZsb2F0IFhfUTI0MDtmbG9hdCBZX1EyNDA7ZmxvYXQgWl9RMjQwO2Zsb2F0IFdfUTI0MDtYX1EyNDA9dkV4dHJhMS54O1lfUTI0MD12RXh0cmExLnk7Wl9RMjQwPXZFeHRyYTEuejtXX1EyNDA9dkV4dHJhMS53O3ZlYzQgTGluZWFyX1ExOTM7TGluZWFyX1ExOTMucmdiPWNsYW1wKF9Ta3lfQ29sb3JfLnJnYipfU2t5X0NvbG9yXy5yZ2IsMC4wLDEuMCk7TGluZWFyX1ExOTMuYT1fU2t5X0NvbG9yXy5hO3ZlYzQgTGluZWFyX1ExOTQ7TGluZWFyX1ExOTQucmdiPWNsYW1wKF9Ib3Jpem9uX0NvbG9yXy5yZ2IqX0hvcml6b25fQ29sb3JfLnJnYiwwLjAsMS4wKTtMaW5lYXJfUTE5NC5hPV9Ib3Jpem9uX0NvbG9yXy5hO3ZlYzQgTGluZWFyX1ExOTU7TGluZWFyX1ExOTUucmdiPWNsYW1wKF9Hcm91bmRfQ29sb3JfLnJnYipfR3JvdW5kX0NvbG9yXy5yZ2IsMC4wLDEuMCk7TGluZWFyX1ExOTUuYT1fR3JvdW5kX0NvbG9yXy5hO3ZlYzMgTGVmdF9JbmRleF9RMjE0O3ZlYzMgUmlnaHRfSW5kZXhfUTIxNDt2ZWMzIExlZnRfSW5kZXhfTWlkZGxlX1EyMTQ7dmVjMyBSaWdodF9JbmRleF9NaWRkbGVfUTIxNDtGaW5nZXJfUG9zaXRpb25zX0IyMTQoX0xlZnRfSW5kZXhfUG9zXyxfUmlnaHRfSW5kZXhfUG9zXyxfTGVmdF9JbmRleF9NaWRkbGVfUG9zXyxfUmlnaHRfSW5kZXhfTWlkZGxlX1Bvc18sTGVmdF9JbmRleF9RMjE0LFJpZ2h0X0luZGV4X1EyMTQsTGVmdF9JbmRleF9NaWRkbGVfUTIxNCxSaWdodF9JbmRleF9NaWRkbGVfUTIxNCk7dmVjNCBMaW5lYXJfUTE5NjtMaW5lYXJfUTE5Ni5yZ2I9Y2xhbXAoX0FsYmVkb18ucmdiKl9BbGJlZG9fLnJnYiwwLjAsMS4wKTtMaW5lYXJfUTE5Ni5hPV9BbGJlZG9fLmE7dmVjMyBOb3JtYWxpemVkX1EyNTc9bm9ybWFsaXplKHZCaW5vcm1hbCk7dmVjMyBJbmNpZGVudF9RMjIwPW5vcm1hbGl6ZSh2UG9zaXRpb24tY2FtZXJhUG9zaXRpb24pO3ZlYzMgTmV3X05vcm1hbF9RMjI5O0J1bGdlX0IyMjkoX0J1bGdlX0VuYWJsZWRfLE5vcm1hbGl6ZWRfUTE4OCxOb3JtYWxpemVkX1EyMjEsX0J1bGdlX0hlaWdodF8sdkNvbG9yLF9CdWxnZV9SYWRpdXNfLHZCaW5vcm1hbCxOZXdfTm9ybWFsX1EyMjkpO2Zsb2F0IFJlc3VsdF9RMjI3O1NTU19CMjI3KHZCaW5vcm1hbCxOZXdfTm9ybWFsX1EyMjksSW5jaWRlbnRfUTE4OSxSZXN1bHRfUTIyNyk7dmVjNCBSZXN1bHRfUTI0MTtTY2FsZV9Db2xvcl9CMjQxKENvbG9yX1EyMzMsWF9RMjQwLFJlc3VsdF9RMjQxKTtmbG9hdCBUcmFuc21pdF9RMjcyO2Zsb2F0IFJlZmxlY3RfUTI3MjtGYXN0X0ZyZXNuZWxfQjI3MihfRnJvbnRfUmVmbGVjdF8sX0VkZ2VfUmVmbGVjdF8sX1Bvd2VyXyxOZXdfTm9ybWFsX1EyMjksSW5jaWRlbnRfUTE4OSxUcmFuc21pdF9RMjcyLFJlZmxlY3RfUTI3Mik7ZmxvYXQgUHJvZHVjdF9RMjc1PVlfUTI0MCpZX1EyNDA7dmVjMyBOZWFyUF9RMjE1O3ZlYzMgTmVhclFfUTIxNTtmbG9hdCBEaXN0YW5jZV9RMjE1O01pbl9TZWdtZW50X0Rpc3RhbmNlX0IyMTUoTGVmdF9JbmRleF9RMjE0LExlZnRfSW5kZXhfTWlkZGxlX1EyMTQsdlBvc2l0aW9uLGNhbWVyYVBvc2l0aW9uLE5lYXJQX1EyMTUsTmVhclFfUTIxNSxEaXN0YW5jZV9RMjE1KTt2ZWMzIE5lYXJQX1EyMTM7dmVjMyBOZWFyUV9RMjEzO2Zsb2F0IERpc3RhbmNlX1EyMTM7TWluX1NlZ21lbnRfRGlzdGFuY2VfQjIxNShSaWdodF9JbmRleF9RMjE0LFJpZ2h0X0luZGV4X01pZGRsZV9RMjE0LHZQb3NpdGlvbixjYW1lcmFQb3NpdGlvbixOZWFyUF9RMjEzLE5lYXJRX1EyMTMsRGlzdGFuY2VfUTIxMyk7dmVjMyBSZWZsZWN0ZWRfUTE5Nz1yZWZsZWN0KEluY2lkZW50X1ExODksTmV3X05vcm1hbF9RMjI5KTt2ZWM0IFByb2R1Y3RfUTI1Mz1MaW5lYXJfUTE5Nip2ZWM0KDEsMSwxLDEpO3ZlYzQgUmVzdWx0X1EyODI7UmltX0xpZ2h0X0IyODIoTm9ybWFsaXplZF9RMjU3LE5vcm1hbGl6ZWRfUTE4OCxJbmNpZGVudF9RMjIwLF9SaW1fSW50ZW5zaXR5XyxfUmltX1RleHR1cmVfLFJlc3VsdF9RMjgyKTtmbG9hdCBEb3RfUTIyMj1kb3QoSW5jaWRlbnRfUTIyMCwgTm9ybWFsaXplZF9RMjIxKTtmbG9hdCBNYXhBQl9RMjczPW1heChSZWZsZWN0X1EyNzIsUHJvZHVjdF9RMjc1KTtmbG9hdCBOb3RJblNoYWRvd19RMjE3O1xuI2lmIE9DQ0xVU0lPTl9FTkFCTEVEXG5GaW5nZXJPY2NsdXNpb25fQjIxNyhfV2lkdGhfLERpc3RhbmNlX1EyMTUsX0Z1enpfLF9NaW5fRnV6el8sdlBvc2l0aW9uLHZCaW5vcm1hbCxOZWFyUF9RMjE1LF9DbGlwX0ZhZGVfLE5vdEluU2hhZG93X1EyMTcpO1xuI2Vsc2Vcbk5vdEluU2hhZG93X1EyMTc9MS4wO1xuI2VuZGlmXG5mbG9hdCBOb3RJblNoYWRvd19RMjE4O1xuI2lmIE9DQ0xVU0lPTl9FTkFCTEVEXG5GaW5nZXJPY2NsdXNpb25fQjIxOChfV2lkdGhfLERpc3RhbmNlX1EyMTMsX0Z1enpfLF9NaW5fRnV6el8sdlBvc2l0aW9uLHZCaW5vcm1hbCxOZWFyUF9RMjEzLF9DbGlwX0ZhZGVfLE5vdEluU2hhZG93X1EyMTgpO1xuI2Vsc2Vcbk5vdEluU2hhZG93X1EyMTg9MS4wO1xuI2VuZGlmXG52ZWM0IFJlZmxlY3RlZF9Db2xvcl9RMjAxO3ZlYzQgSW5kaXJlY3RfRGlmZnVzZV9RMjAxO1xuI2lmIEVOVl9FTkFCTEVcbk1hcHBlZF9FbnZpcm9ubWVudF9CMjAxKF9SZWZsZWN0aW9uX01hcF8sX0luZGlyZWN0X0Vudmlyb25tZW50XyxSZWZsZWN0ZWRfUTE5NyxSZWZsZWN0ZWRfQ29sb3JfUTIwMSxJbmRpcmVjdF9EaWZmdXNlX1EyMDEpO1xuI2Vsc2VcblJlZmxlY3RlZF9Db2xvcl9RMjAxPXZlYzQoMCwwLDAsMSk7SW5kaXJlY3RfRGlmZnVzZV9RMjAxPXZlYzQoMCwwLDAsMSk7XG4jZW5kaWZcbnZlYzQgUmVmbGVjdGVkX0NvbG9yX1EyMDA7dmVjNCBJbmRpcmVjdF9Db2xvcl9RMjAwO1xuI2lmIFNLWV9FTkFCTEVEXG5Ta3lfRW52aXJvbm1lbnRfQjIwMChOZXdfTm9ybWFsX1EyMjksUmVmbGVjdGVkX1ExOTcsTGluZWFyX1ExOTMsTGluZWFyX1ExOTQsTGluZWFyX1ExOTUsX0hvcml6b25fUG93ZXJfLFJlZmxlY3RlZF9Db2xvcl9RMjAwLEluZGlyZWN0X0NvbG9yX1EyMDApO1xuI2Vsc2VcblJlZmxlY3RlZF9Db2xvcl9RMjAwPXZlYzQoMCwwLDAsMSk7SW5kaXJlY3RfQ29sb3JfUTIwMD12ZWM0KDAsMCwwLDEpO1xuI2VuZGlmXG5mbG9hdCBIdWVfUTIyNTtmbG9hdCBTYXR1cmF0aW9uX1EyMjU7ZmxvYXQgVmFsdWVfUTIyNTtmbG9hdCBBbHBoYV9RMjI1O3ZlYzMgSFNWX1EyMjU7VG9fSFNWX0IyMjUoUHJvZHVjdF9RMjUzLEh1ZV9RMjI1LFNhdHVyYXRpb25fUTIyNSxWYWx1ZV9RMjI1LEFscGhhX1EyMjUsSFNWX1EyMjUpO2Zsb2F0IEh1ZV9RMjc3O2Zsb2F0IFNhdHVyYXRpb25fUTI3NztmbG9hdCBWYWx1ZV9RMjc3O2Zsb2F0IEFscGhhX1EyNzc7dmVjMyBIU1ZfUTI3NztUb19IU1ZfQjIyNShSZXN1bHRfUTI4MixIdWVfUTI3NyxTYXR1cmF0aW9uX1EyNzcsVmFsdWVfUTI3NyxBbHBoYV9RMjc3LEhTVl9RMjc3KTtmbG9hdCBSZXN1bHRfUTI2MDtDb2RlX0IyNjAoRG90X1EyMjIsUmVzdWx0X1EyNjApO2Zsb2F0IEFic0FfUTIyNj1hYnMoUmVzdWx0X1EyNjApO2Zsb2F0IE1pbkFCX1EyMDg9bWluKE5vdEluU2hhZG93X1EyMTcsTm90SW5TaGFkb3dfUTIxOCk7dmVjNCBTdW1fUTE5OD1SZWZsZWN0ZWRfQ29sb3JfUTIwMStSZWZsZWN0ZWRfQ29sb3JfUTIwMDt2ZWM0IFN1bV9RMTk5PUluZGlyZWN0X0RpZmZ1c2VfUTIwMStJbmRpcmVjdF9Db2xvcl9RMjAwO3ZlYzMgSFNWX091dF9RMjc2O1ZhcnlIU1ZfQjI1OChIU1ZfUTI3NyxfUmltX0h1ZV9TaGlmdF8sX1JpbV9TYXR1cmF0aW9uX1NoaWZ0XyxfUmltX1ZhbHVlX1NoaWZ0XyxIU1ZfT3V0X1EyNzYpO2Zsb2F0IE91dF9RMjY0O1JlbWFwX1JhbmdlX0IyNjQoLTEuMCwxLjAsMC4wLDEuMCxSZXN1bHRfUTI2MCxPdXRfUTI2NCk7ZmxvYXQgUHJvZHVjdF9RMjU2O1Byb2R1Y3RfUTI1Nj1BYnNBX1EyMjYqX0h1ZV9TaGlmdF87ZmxvYXQgWF9RMjc4O2Zsb2F0IFlfUTI3ODtmbG9hdCBaX1EyNzg7VG9fWFlaX0IyMjQoSFNWX091dF9RMjc2LFhfUTI3OCxZX1EyNzgsWl9RMjc4KTt2ZWMyIFZlYzJfUTI2Mj12ZWMyKE91dF9RMjY0LDAuNSk7dmVjMyBIU1ZfT3V0X1EyNTg7VmFyeUhTVl9CMjU4KEhTVl9RMjI1LFByb2R1Y3RfUTI1NixfU2F0dXJhdGlvbl9TaGlmdF8sX1ZhbHVlX1NoaWZ0XyxIU1ZfT3V0X1EyNTgpO3ZlYzQgQ29sb3JfUTI3OTtGcm9tX0hTVl9CMjIzKFhfUTI3OCxZX1EyNzgsWl9RMjc4LDAuMCxDb2xvcl9RMjc5KTt2ZWM0IENvbG9yX1EyNjE7XG4jaWYgSVJJREVTQ0VOQ0VfRU5BQkxFRFxuQ29sb3JfUTI2MT10ZXh0dXJlKF9JcmlkZXNjZW5jZV9UZXh0dXJlXyxWZWMyX1EyNjIpO1xuI2Vsc2VcbkNvbG9yX1EyNjE9dmVjNCgwLDAsMCwwKTtcbiNlbmRpZlxuZmxvYXQgWF9RMjI0O2Zsb2F0IFlfUTIyNDtmbG9hdCBaX1EyMjQ7VG9fWFlaX0IyMjQoSFNWX091dF9RMjU4LFhfUTIyNCxZX1EyMjQsWl9RMjI0KTt2ZWM0IFJlc3VsdF9RMjgxPV9SaW1fSW50ZW5zaXR5XypDb2xvcl9RMjc5O3ZlYzQgUmVzdWx0X1EyNjM9X0lyaWRlc2NlbmNlX0ludGVuc2l0eV8qQ29sb3JfUTI2MTt2ZWM0IENvbG9yX1EyMjM7RnJvbV9IU1ZfQjIyMyhYX1EyMjQsWV9RMjI0LFpfUTIyNCwwLjAsQ29sb3JfUTIyMyk7dmVjNCBSZXN1bHRfUTIzND1SZXN1bHRfUTI0MSsoMS4wLVJlc3VsdF9RMjQxLmEpKkNvbG9yX1EyMjM7dmVjNCBSZXN1bHRfUTI3MTtGcmFnbWVudF9NYWluX0IyNzEoX1N1bl9JbnRlbnNpdHlfLF9TdW5fVGhldGFfLF9TdW5fUGhpXyxOZXdfTm9ybWFsX1EyMjksUmVzdWx0X1EyMzQsTWF4QUJfUTI3MyxfU2hpbmluZXNzXyxJbmNpZGVudF9RMTg5LF9Ib3Jpem9uX0NvbG9yXyxfU2t5X0NvbG9yXyxfR3JvdW5kX0NvbG9yXyxfSW5kaXJlY3RfRGlmZnVzZV8sX1NwZWN1bGFyXyxfSG9yaXpvbl9Qb3dlcl8sX1JlZmxlY3Rpb25fLFN1bV9RMTk4LFN1bV9RMTk5LF9TaGFycG5lc3NfLFJlc3VsdF9RMjI3LF9TdWJzdXJmYWNlXyx2ZWM0KDAsMCwwLDApLFJlc3VsdF9RMjgxLFJlc3VsdF9RMjYzLFJlc3VsdF9RMjcxKTt2ZWM0IFJlc3VsdF9RMjA5O1NjYWxlX1JHQl9CMjA5KFJlc3VsdF9RMjcxLE1pbkFCX1EyMDgsUmVzdWx0X1EyMDkpO3ZlYzQgc1JHQl9RMTkyO0Zhc3RMaW5lYXJUb3NSR0JfQjE5MihSZXN1bHRfUTIwOSxzUkdCX1ExOTIpO3ZlYzQgUmVzdWx0X1ExODE9QmxvYl9Db2xvcl9RMTgwKygxLjAtQmxvYl9Db2xvcl9RMTgwLmEpKnNSR0JfUTE5Mjt2ZWM0IFJlc3VsdF9RMTkwPVJlc3VsdF9RMTgxOyBSZXN1bHRfUTE5MC5hPTEuMDt2ZWM0IE91dF9Db2xvcj1SZXN1bHRfUTE5MDtmbG9hdCBDbGlwX1RocmVzaG9sZD0wLjAwMTtib29sIFRvX3NSR0I9ZmFsc2U7Z2xfRnJhZ0NvbG9yPU91dF9Db2xvcjt9YDtcbi8vIFNpZGVlZmZlY3RcblNoYWRlclN0b3JlLlNoYWRlcnNTdG9yZVtuYW1lXSA9IHNoYWRlcjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBtcmRsU2xpZGVyVGh1bWJQaXhlbFNoYWRlciA9IHsgbmFtZSwgc2hhZGVyIH07XG4iLCIvLyBEbyBub3QgZWRpdC5cbmltcG9ydCB7IFNoYWRlclN0b3JlIH0gZnJvbSBcImNvcmUvRW5naW5lcy9zaGFkZXJTdG9yZVwiO1xuXG5jb25zdCBuYW1lID0gXCJtcmRsU2xpZGVyVGh1bWJWZXJ0ZXhTaGFkZXJcIjtcbmNvbnN0IHNoYWRlciA9IGB1bmlmb3JtIG1hdDQgd29ybGQ7dW5pZm9ybSBtYXQ0IHZpZXdQcm9qZWN0aW9uO3VuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjthdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjthdHRyaWJ1dGUgdmVjMyBub3JtYWw7YXR0cmlidXRlIHZlYzIgdXY7XG4jaWZkZWYgVEFOR0VOVFxuYXR0cmlidXRlIHZlYzMgdGFuZ2VudDtcbiNlbHNlXG5jb25zdCB2ZWMzIHRhbmdlbnQ9dmVjMygwLik7XG4jZW5kaWZcbnVuaWZvcm0gZmxvYXQgX1JhZGl1c187dW5pZm9ybSBmbG9hdCBfQmV2ZWxfRnJvbnRfO3VuaWZvcm0gZmxvYXQgX0JldmVsX0Zyb250X1N0cmV0Y2hfO3VuaWZvcm0gZmxvYXQgX0JldmVsX0JhY2tfO3VuaWZvcm0gZmxvYXQgX0JldmVsX0JhY2tfU3RyZXRjaF87dW5pZm9ybSBmbG9hdCBfUmFkaXVzX1RvcF9MZWZ0Xzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfVG9wX1JpZ2h0Xzt1bmlmb3JtIGZsb2F0IF9SYWRpdXNfQm90dG9tX0xlZnRfO3VuaWZvcm0gZmxvYXQgX1JhZGl1c19Cb3R0b21fUmlnaHRfO3VuaWZvcm0gYm9vbCBfQnVsZ2VfRW5hYmxlZF87dW5pZm9ybSBmbG9hdCBfQnVsZ2VfSGVpZ2h0Xzt1bmlmb3JtIGZsb2F0IF9CdWxnZV9SYWRpdXNfO3VuaWZvcm0gZmxvYXQgX1N1bl9JbnRlbnNpdHlfO3VuaWZvcm0gZmxvYXQgX1N1bl9UaGV0YV87dW5pZm9ybSBmbG9hdCBfU3VuX1BoaV87dW5pZm9ybSBmbG9hdCBfSW5kaXJlY3RfRGlmZnVzZV87dW5pZm9ybSB2ZWM0IF9BbGJlZG9fO3VuaWZvcm0gZmxvYXQgX1NwZWN1bGFyXzt1bmlmb3JtIGZsb2F0IF9TaGluaW5lc3NfO3VuaWZvcm0gZmxvYXQgX1NoYXJwbmVzc187dW5pZm9ybSBmbG9hdCBfU3Vic3VyZmFjZV87dW5pZm9ybSB2ZWM0IF9MZWZ0X0NvbG9yXzt1bmlmb3JtIHZlYzQgX1JpZ2h0X0NvbG9yXzt1bmlmb3JtIGZsb2F0IF9SZWZsZWN0aW9uXzt1bmlmb3JtIGZsb2F0IF9Gcm9udF9SZWZsZWN0Xzt1bmlmb3JtIGZsb2F0IF9FZGdlX1JlZmxlY3RfO3VuaWZvcm0gZmxvYXQgX1Bvd2VyXzt1bmlmb3JtIHZlYzQgX1NreV9Db2xvcl87dW5pZm9ybSB2ZWM0IF9Ib3Jpem9uX0NvbG9yXzt1bmlmb3JtIHZlYzQgX0dyb3VuZF9Db2xvcl87dW5pZm9ybSBmbG9hdCBfSG9yaXpvbl9Qb3dlcl87dW5pZm9ybSBzYW1wbGVyMkQgX1JlZmxlY3Rpb25fTWFwXzt1bmlmb3JtIHNhbXBsZXIyRCBfSW5kaXJlY3RfRW52aXJvbm1lbnRfO3VuaWZvcm0gZmxvYXQgX1dpZHRoXzt1bmlmb3JtIGZsb2F0IF9GdXp6Xzt1bmlmb3JtIGZsb2F0IF9NaW5fRnV6el87dW5pZm9ybSBmbG9hdCBfQ2xpcF9GYWRlXzt1bmlmb3JtIGZsb2F0IF9IdWVfU2hpZnRfO3VuaWZvcm0gZmxvYXQgX1NhdHVyYXRpb25fU2hpZnRfO3VuaWZvcm0gZmxvYXQgX1ZhbHVlX1NoaWZ0Xzt1bmlmb3JtIHZlYzMgX0Jsb2JfUG9zaXRpb25fO3VuaWZvcm0gZmxvYXQgX0Jsb2JfSW50ZW5zaXR5Xzt1bmlmb3JtIGZsb2F0IF9CbG9iX05lYXJfU2l6ZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYXJfU2l6ZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX0Rpc3RhbmNlXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0Zhcl9EaXN0YW5jZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlX0xlbmd0aF87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV87dW5pZm9ybSBmbG9hdCBfQmxvYl9GYWRlXzt1bmlmb3JtIHNhbXBsZXIyRCBfQmxvYl9UZXh0dXJlXzt1bmlmb3JtIHZlYzMgX0Jsb2JfUG9zaXRpb25fMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9OZWFyX1NpemVfMl87dW5pZm9ybSBmbG9hdCBfQmxvYl9QdWxzZV8yXzt1bmlmb3JtIGZsb2F0IF9CbG9iX0ZhZGVfMl87dW5pZm9ybSB2ZWMzIF9MZWZ0X0luZGV4X1Bvc187dW5pZm9ybSB2ZWMzIF9SaWdodF9JbmRleF9Qb3NfO3VuaWZvcm0gdmVjMyBfTGVmdF9JbmRleF9NaWRkbGVfUG9zXzt1bmlmb3JtIHZlYzMgX1JpZ2h0X0luZGV4X01pZGRsZV9Qb3NfO3VuaWZvcm0gc2FtcGxlcjJEIF9EZWNhbF87dW5pZm9ybSB2ZWMyIF9EZWNhbF9TY2FsZV9YWV87dW5pZm9ybSBib29sIF9EZWNhbF9Gcm9udF9Pbmx5Xzt1bmlmb3JtIGZsb2F0IF9SaW1fSW50ZW5zaXR5Xzt1bmlmb3JtIHNhbXBsZXIyRCBfUmltX1RleHR1cmVfO3VuaWZvcm0gZmxvYXQgX1JpbV9IdWVfU2hpZnRfO3VuaWZvcm0gZmxvYXQgX1JpbV9TYXR1cmF0aW9uX1NoaWZ0Xzt1bmlmb3JtIGZsb2F0IF9SaW1fVmFsdWVfU2hpZnRfO3VuaWZvcm0gZmxvYXQgX0lyaWRlc2NlbmNlX0ludGVuc2l0eV87dW5pZm9ybSBzYW1wbGVyMkQgX0lyaWRlc2NlbmNlX1RleHR1cmVfO3VuaWZvcm0gYm9vbCBVc2VfR2xvYmFsX0xlZnRfSW5kZXg7dW5pZm9ybSBib29sIFVzZV9HbG9iYWxfUmlnaHRfSW5kZXg7dW5pZm9ybSB2ZWM0IEdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qb3NpdGlvbjt1bmlmb3JtIHZlYzQgR2xvYmFsX1JpZ2h0X0luZGV4X1RpcF9Qb3NpdGlvbjt1bmlmb3JtIHZlYzQgR2xvYmFsX0xlZnRfVGh1bWJfVGlwX1Bvc2l0aW9uO3VuaWZvcm0gdmVjNCBHbG9iYWxfUmlnaHRfVGh1bWJfVGlwX1Bvc2l0aW9uO3VuaWZvcm0gZmxvYXQgR2xvYmFsX0xlZnRfSW5kZXhfVGlwX1Byb3hpbWl0eTt1bmlmb3JtIGZsb2F0IEdsb2JhbF9SaWdodF9JbmRleF9UaXBfUHJveGltaXR5O3ZhcnlpbmcgdmVjMyB2UG9zaXRpb247dmFyeWluZyB2ZWMzIHZOb3JtYWw7dmFyeWluZyB2ZWMyIHZVVjt2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7dmFyeWluZyB2ZWMzIHZCaW5vcm1hbDt2YXJ5aW5nIHZlYzQgdkNvbG9yO3ZhcnlpbmcgdmVjNCB2RXh0cmExO3ZhcnlpbmcgdmVjNCB2RXh0cmEyO3ZhcnlpbmcgdmVjNCB2RXh0cmEzO3ZvaWQgT2JqZWN0X1RvX1dvcmxkX1Bvc19CMTYyKFxudmVjMyBQb3NfT2JqZWN0LFxub3V0IHZlYzMgUG9zX1dvcmxkKVxue1Bvc19Xb3JsZD0od29ybGQqdmVjNChQb3NfT2JqZWN0LDEuMCkpLnh5ejt9XG52b2lkIE9iamVjdF9Ub19Xb3JsZF9Ob3JtYWxfQjE4MihcbnZlYzMgTnJtX09iamVjdCxcbm91dCB2ZWMzIE5ybV9Xb3JsZClcbntOcm1fV29ybGQ9KHZlYzQoTnJtX09iamVjdCwwLjApKS54eXo7fVxudm9pZCBCbG9iX1ZlcnRleF9CMTczKFxudmVjMyBQb3NpdGlvbixcbnZlYzMgTm9ybWFsLFxudmVjMyBUYW5nZW50LFxudmVjMyBCaXRhbmdlbnQsXG52ZWMzIEJsb2JfUG9zaXRpb24sXG5mbG9hdCBJbnRlbnNpdHksXG5mbG9hdCBCbG9iX05lYXJfU2l6ZSxcbmZsb2F0IEJsb2JfRmFyX1NpemUsXG5mbG9hdCBCbG9iX05lYXJfRGlzdGFuY2UsXG5mbG9hdCBCbG9iX0Zhcl9EaXN0YW5jZSxcbmZsb2F0IEJsb2JfRmFkZV9MZW5ndGgsXG5mbG9hdCBCbG9iX1B1bHNlLFxuZmxvYXQgQmxvYl9GYWRlLFxub3V0IHZlYzQgQmxvYl9JbmZvKVxue3ZlYzMgYmxvYj0gKFVzZV9HbG9iYWxfTGVmdF9JbmRleCA/IEdsb2JhbF9MZWZ0X0luZGV4X1RpcF9Qb3NpdGlvbi54eXogOiBCbG9iX1Bvc2l0aW9uKTt2ZWMzIGRlbHRhPWJsb2ItUG9zaXRpb247ZmxvYXQgZGlzdD1kb3QoTm9ybWFsLGRlbHRhKTtmbG9hdCBsZXJwVmFsdWU9Y2xhbXAoKGFicyhkaXN0KS1CbG9iX05lYXJfRGlzdGFuY2UpLyhCbG9iX0Zhcl9EaXN0YW5jZS1CbG9iX05lYXJfRGlzdGFuY2UpLDAuMCwxLjApO2Zsb2F0IGZhZGVWYWx1ZT0xLjAtY2xhbXAoKGFicyhkaXN0KS1CbG9iX0Zhcl9EaXN0YW5jZSkvQmxvYl9GYWRlX0xlbmd0aCwwLjAsMS4wKTtmbG9hdCBzaXplPUJsb2JfTmVhcl9TaXplKyhCbG9iX0Zhcl9TaXplLUJsb2JfTmVhcl9TaXplKSpsZXJwVmFsdWU7dmVjMiBibG9iWFk9dmVjMihkb3QoZGVsdGEsVGFuZ2VudCksZG90KGRlbHRhLEJpdGFuZ2VudCkpLygwLjAwMDErc2l6ZSk7ZmxvYXQgRmFkZT1mYWRlVmFsdWUqSW50ZW5zaXR5KkJsb2JfRmFkZTtmbG9hdCBEaXN0YW5jZT0obGVycFZhbHVlKjAuNSswLjUpKigxLjAtQmxvYl9QdWxzZSk7QmxvYl9JbmZvPXZlYzQoYmxvYlhZLngsYmxvYlhZLnksRGlzdGFuY2UsRmFkZSk7fVxudm9pZCBCbG9iX1ZlcnRleF9CMTc0KFxudmVjMyBQb3NpdGlvbixcbnZlYzMgTm9ybWFsLFxudmVjMyBUYW5nZW50LFxudmVjMyBCaXRhbmdlbnQsXG52ZWMzIEJsb2JfUG9zaXRpb24sXG5mbG9hdCBJbnRlbnNpdHksXG5mbG9hdCBCbG9iX05lYXJfU2l6ZSxcbmZsb2F0IEJsb2JfRmFyX1NpemUsXG5mbG9hdCBCbG9iX05lYXJfRGlzdGFuY2UsXG5mbG9hdCBCbG9iX0Zhcl9EaXN0YW5jZSxcbmZsb2F0IEJsb2JfRmFkZV9MZW5ndGgsXG5mbG9hdCBCbG9iX1B1bHNlLFxuZmxvYXQgQmxvYl9GYWRlLFxub3V0IHZlYzQgQmxvYl9JbmZvKVxue3ZlYzMgYmxvYj0gKFVzZV9HbG9iYWxfUmlnaHRfSW5kZXggPyBHbG9iYWxfUmlnaHRfSW5kZXhfVGlwX1Bvc2l0aW9uLnh5eiA6IEJsb2JfUG9zaXRpb24pO3ZlYzMgZGVsdGE9YmxvYi1Qb3NpdGlvbjtmbG9hdCBkaXN0PWRvdChOb3JtYWwsZGVsdGEpO2Zsb2F0IGxlcnBWYWx1ZT1jbGFtcCgoYWJzKGRpc3QpLUJsb2JfTmVhcl9EaXN0YW5jZSkvKEJsb2JfRmFyX0Rpc3RhbmNlLUJsb2JfTmVhcl9EaXN0YW5jZSksMC4wLDEuMCk7ZmxvYXQgZmFkZVZhbHVlPTEuMC1jbGFtcCgoYWJzKGRpc3QpLUJsb2JfRmFyX0Rpc3RhbmNlKS9CbG9iX0ZhZGVfTGVuZ3RoLDAuMCwxLjApO2Zsb2F0IHNpemU9QmxvYl9OZWFyX1NpemUrKEJsb2JfRmFyX1NpemUtQmxvYl9OZWFyX1NpemUpKmxlcnBWYWx1ZTt2ZWMyIGJsb2JYWT12ZWMyKGRvdChkZWx0YSxUYW5nZW50KSxkb3QoZGVsdGEsQml0YW5nZW50KSkvKDAuMDAwMStzaXplKTtmbG9hdCBGYWRlPWZhZGVWYWx1ZSpJbnRlbnNpdHkqQmxvYl9GYWRlO2Zsb2F0IERpc3RhbmNlPShsZXJwVmFsdWUqMC41KzAuNSkqKDEuMC1CbG9iX1B1bHNlKTtCbG9iX0luZm89dmVjNChibG9iWFkueCxibG9iWFkueSxEaXN0YW5jZSxGYWRlKTt9XG52b2lkIE1vdmVfVmVydHNfQjI4MChcbmZsb2F0IEFuaXNvdHJvcHksXG52ZWMzIFAsXG5mbG9hdCBSYWRpdXMsXG5mbG9hdCBCZXZlbCxcbnZlYzMgTm9ybWFsX09iamVjdCxcbmZsb2F0IFNjYWxlWixcbmZsb2F0IFN0cmV0Y2gsXG5vdXQgdmVjMyBOZXdfUCxcbm91dCB2ZWMyIE5ld19VVixcbm91dCBmbG9hdCBSYWRpYWxfR3JhZGllbnQsXG5vdXQgdmVjMyBSYWRpYWxfRGlyLFxub3V0IHZlYzMgTmV3X05vcm1hbClcbnt2ZWMyIFVWPVAueHkqMi4wKzAuNTt2ZWMyIGNlbnRlcj1jbGFtcChVViwwLjAsMS4wKTt2ZWMyIGRlbHRhPVVWLWNlbnRlcjtmbG9hdCBkZWx0YWQ9KGxlbmd0aChkZWx0YSkqMi4wKTtmbG9hdCBmPShCZXZlbCsoUmFkaXVzLUJldmVsKSpTdHJldGNoKS9SYWRpdXM7ZmxvYXQgaW5uZXJkPWNsYW1wKGRlbHRhZCoyLjAsMC4wLDEuMCk7ZmxvYXQgb3V0ZXJkPWNsYW1wKGRlbHRhZCoyLjAtMS4wLDAuMCwxLjApO2Zsb2F0IGJldmVsQW5nbGU9b3V0ZXJkKjMuMTQxNTkqMC41O2Zsb2F0IHNpbmI9c2luKGJldmVsQW5nbGUpO2Zsb2F0IGNvc2I9Y29zKGJldmVsQW5nbGUpO2Zsb2F0IGJldmVsZD0oMS4wLWYpKmlubmVyZCtmKnNpbmI7ZmxvYXQgYnI9b3V0ZXJkO3ZlYzIgcjI9Mi4wKnZlYzIoUmFkaXVzL0FuaXNvdHJvcHksUmFkaXVzKTtmbG9hdCBkaXI9UC56PDAuMDAwMSA/IDEuMCA6IC0xLjA7TmV3X1VWPWNlbnRlcityMiooKDAuNS1jZW50ZXIpK25vcm1hbGl6ZShkZWx0YSt2ZWMyKDAuMCwwLjAwMDAwMSkpKmJldmVsZCowLjUpO05ld19QPXZlYzMoTmV3X1VWLTAuNSxQLnorZGlyKigxLjAtY29zYikqQmV2ZWwqU2NhbGVaKTtSYWRpYWxfR3JhZGllbnQ9Y2xhbXAoKGRlbHRhZC0wLjUpKjIuMCwwLjAsMS4wKTtSYWRpYWxfRGlyPXZlYzMoZGVsdGEqcjIsMC4wKTt2ZWMzIGJldmVsZWROb3JtYWw9Y29zYipOb3JtYWxfT2JqZWN0K3NpbmIqdmVjMyhkZWx0YS54LGRlbHRhLnksMC4wKTtOZXdfTm9ybWFsPU5vcm1hbF9PYmplY3Quej09MC4wID8gTm9ybWFsX09iamVjdCA6IGJldmVsZWROb3JtYWw7fVxudm9pZCBPYmplY3RfVG9fV29ybGRfRGlyX0IyMTAoXG52ZWMzIERpcl9PYmplY3QsXG5vdXQgdmVjMyBOb3JtYWxfV29ybGQsXG5vdXQgdmVjMyBOb3JtYWxfV29ybGRfTixcbm91dCBmbG9hdCBOb3JtYWxfTGVuZ3RoKVxue05vcm1hbF9Xb3JsZD0od29ybGQqdmVjNChEaXJfT2JqZWN0LDAuMCkpLnh5ejtOb3JtYWxfTGVuZ3RoPWxlbmd0aChOb3JtYWxfV29ybGQpO05vcm1hbF9Xb3JsZF9OPU5vcm1hbF9Xb3JsZC9Ob3JtYWxfTGVuZ3RoO31cbnZvaWQgVG9fWFlaX0IyMjgoXG52ZWMzIFZlYzMsXG5vdXQgZmxvYXQgWCxcbm91dCBmbG9hdCBZLFxub3V0IGZsb2F0IFopXG57WD1WZWMzLng7WT1WZWMzLnk7Wj1WZWMzLno7fVxudm9pZCBDb25kaXRpb25hbF9GbG9hdF9CMjQzKFxuYm9vbCBXaGljaCxcbmZsb2F0IElmX1RydWUsXG5mbG9hdCBJZl9GYWxzZSxcbm91dCBmbG9hdCBSZXN1bHQpXG57UmVzdWx0PVdoaWNoID8gSWZfVHJ1ZSA6IElmX0ZhbHNlO31cbnZvaWQgT2JqZWN0X1RvX1dvcmxkX0Rpcl9CMTc4KFxudmVjMyBEaXJfT2JqZWN0LFxub3V0IHZlYzMgQmlub3JtYWxfV29ybGQsXG5vdXQgdmVjMyBCaW5vcm1hbF9Xb3JsZF9OLFxub3V0IGZsb2F0IEJpbm9ybWFsX0xlbmd0aClcbntCaW5vcm1hbF9Xb3JsZD0od29ybGQqdmVjNChEaXJfT2JqZWN0LDAuMCkpLnh5ejtCaW5vcm1hbF9MZW5ndGg9bGVuZ3RoKEJpbm9ybWFsX1dvcmxkKTtCaW5vcm1hbF9Xb3JsZF9OPUJpbm9ybWFsX1dvcmxkL0Jpbm9ybWFsX0xlbmd0aDt9XG52b2lkIFBpY2tfUmFkaXVzX0IyMTkoXG5mbG9hdCBSYWRpdXMsXG5mbG9hdCBSYWRpdXNfVG9wX0xlZnQsXG5mbG9hdCBSYWRpdXNfVG9wX1JpZ2h0LFxuZmxvYXQgUmFkaXVzX0JvdHRvbV9MZWZ0LFxuZmxvYXQgUmFkaXVzX0JvdHRvbV9SaWdodCxcbnZlYzMgUG9zaXRpb24sXG5vdXQgZmxvYXQgUmVzdWx0KVxue2Jvb2wgd2hpY2hZPVBvc2l0aW9uLnk+MC4wO1Jlc3VsdD1Qb3NpdGlvbi54PDAuMCA/ICh3aGljaFkgPyBSYWRpdXNfVG9wX0xlZnQgOiBSYWRpdXNfQm90dG9tX0xlZnQpIDogKHdoaWNoWSA/IFJhZGl1c19Ub3BfUmlnaHQgOiBSYWRpdXNfQm90dG9tX1JpZ2h0KTtSZXN1bHQqPVJhZGl1czt9XG52b2lkIENvbmRpdGlvbmFsX0Zsb2F0X0IxODYoXG5ib29sIFdoaWNoLFxuZmxvYXQgSWZfVHJ1ZSxcbmZsb2F0IElmX0ZhbHNlLFxub3V0IGZsb2F0IFJlc3VsdClcbntSZXN1bHQ9V2hpY2ggPyBJZl9UcnVlIDogSWZfRmFsc2U7fVxudm9pZCBHcmVhdGVyX1RoYW5fQjE4NyhcbmZsb2F0IExlZnQsXG5mbG9hdCBSaWdodCxcbm91dCBib29sIE5vdF9HcmVhdGVyX1RoYW4sXG5vdXQgYm9vbCBHcmVhdGVyX1RoYW4pXG57R3JlYXRlcl9UaGFuPUxlZnQ+UmlnaHQ7Tm90X0dyZWF0ZXJfVGhhbj0hR3JlYXRlcl9UaGFuO31cbnZvaWQgUmVtYXBfUmFuZ2VfQjI1NShcbmZsb2F0IEluX01pbixcbmZsb2F0IEluX01heCxcbmZsb2F0IE91dF9NaW4sXG5mbG9hdCBPdXRfTWF4LFxuZmxvYXQgSW4sXG5vdXQgZmxvYXQgT3V0KVxue091dD1taXgoT3V0X01pbixPdXRfTWF4LGNsYW1wKChJbi1Jbl9NaW4pLyhJbl9NYXgtSW5fTWluKSwwLjAsMS4wKSk7fVxudm9pZCBtYWluKClcbnt2ZWMyIFhZX1EyMzU7WFlfUTIzNT0odXYtdmVjMigwLjUsMC41KSkqX0RlY2FsX1NjYWxlX1hZXyt2ZWMyKDAuNSwwLjUpO3ZlYzMgVGFuZ2VudF9Xb3JsZF9RMTc3O3ZlYzMgVGFuZ2VudF9Xb3JsZF9OX1ExNzc7ZmxvYXQgVGFuZ2VudF9MZW5ndGhfUTE3NztUYW5nZW50X1dvcmxkX1ExNzc9KHdvcmxkKnZlYzQodmVjMygxLDAsMCksMC4wKSkueHl6O1RhbmdlbnRfTGVuZ3RoX1ExNzc9bGVuZ3RoKFRhbmdlbnRfV29ybGRfUTE3Nyk7VGFuZ2VudF9Xb3JsZF9OX1ExNzc9VGFuZ2VudF9Xb3JsZF9RMTc3L1RhbmdlbnRfTGVuZ3RoX1ExNzc7dmVjMyBOb3JtYWxfV29ybGRfUTIxMDt2ZWMzIE5vcm1hbF9Xb3JsZF9OX1EyMTA7ZmxvYXQgTm9ybWFsX0xlbmd0aF9RMjEwO09iamVjdF9Ub19Xb3JsZF9EaXJfQjIxMCh2ZWMzKDAsMCwxKSxOb3JtYWxfV29ybGRfUTIxMCxOb3JtYWxfV29ybGRfTl9RMjEwLE5vcm1hbF9MZW5ndGhfUTIxMCk7ZmxvYXQgWF9RMjI4O2Zsb2F0IFlfUTIyODtmbG9hdCBaX1EyMjg7VG9fWFlaX0IyMjgocG9zaXRpb24sWF9RMjI4LFlfUTIyOCxaX1EyMjgpO3ZlYzMgTnJtX1dvcmxkX1ExNzY7TnJtX1dvcmxkX1ExNzY9bm9ybWFsaXplKCh3b3JsZCp2ZWM0KG5vcm1hbCwwLjApKS54eXopO3ZlYzMgQmlub3JtYWxfV29ybGRfUTE3ODt2ZWMzIEJpbm9ybWFsX1dvcmxkX05fUTE3ODtmbG9hdCBCaW5vcm1hbF9MZW5ndGhfUTE3ODtPYmplY3RfVG9fV29ybGRfRGlyX0IxNzgodmVjMygwLDEsMCksQmlub3JtYWxfV29ybGRfUTE3OCxCaW5vcm1hbF9Xb3JsZF9OX1ExNzgsQmlub3JtYWxfTGVuZ3RoX1ExNzgpO2Zsb2F0IEFuaXNvdHJvcHlfUTE3OT1UYW5nZW50X0xlbmd0aF9RMTc3L0Jpbm9ybWFsX0xlbmd0aF9RMTc4O2Zsb2F0IFJlc3VsdF9RMjE5O1BpY2tfUmFkaXVzX0IyMTkoX1JhZGl1c18sX1JhZGl1c19Ub3BfTGVmdF8sX1JhZGl1c19Ub3BfUmlnaHRfLF9SYWRpdXNfQm90dG9tX0xlZnRfLF9SYWRpdXNfQm90dG9tX1JpZ2h0Xyxwb3NpdGlvbixSZXN1bHRfUTIxOSk7ZmxvYXQgQW5pc290cm9weV9RMjAzPUJpbm9ybWFsX0xlbmd0aF9RMTc4L05vcm1hbF9MZW5ndGhfUTIxMDtib29sIE5vdF9HcmVhdGVyX1RoYW5fUTE4Nztib29sIEdyZWF0ZXJfVGhhbl9RMTg3O0dyZWF0ZXJfVGhhbl9CMTg3KFpfUTIyOCwwLjAsTm90X0dyZWF0ZXJfVGhhbl9RMTg3LEdyZWF0ZXJfVGhhbl9RMTg3KTt2ZWM0IExpbmVhcl9RMjUxO0xpbmVhcl9RMjUxLnJnYj1jbGFtcChfTGVmdF9Db2xvcl8ucmdiKl9MZWZ0X0NvbG9yXy5yZ2IsMC4wLDEuMCk7TGluZWFyX1EyNTEuYT1fTGVmdF9Db2xvcl8uYTt2ZWM0IExpbmVhcl9RMjUyO0xpbmVhcl9RMjUyLnJnYj1jbGFtcChfUmlnaHRfQ29sb3JfLnJnYipfUmlnaHRfQ29sb3JfLnJnYiwwLjAsMS4wKTtMaW5lYXJfUTI1Mi5hPV9SaWdodF9Db2xvcl8uYTt2ZWMzIERpZmZlcmVuY2VfUTIxMT12ZWMzKDAsMCwwKS1Ob3JtYWxfV29ybGRfTl9RMjEwO3ZlYzQgT3V0X0NvbG9yX1ExODQ9dmVjNChYX1EyMjgsWV9RMjI4LFpfUTIyOCwxKTtmbG9hdCBSZXN1bHRfUTE4NjtDb25kaXRpb25hbF9GbG9hdF9CMTg2KEdyZWF0ZXJfVGhhbl9RMTg3LF9CZXZlbF9CYWNrXyxfQmV2ZWxfRnJvbnRfLFJlc3VsdF9RMTg2KTtmbG9hdCBSZXN1bHRfUTI0NDtDb25kaXRpb25hbF9GbG9hdF9CMTg2KEdyZWF0ZXJfVGhhbl9RMTg3LF9CZXZlbF9CYWNrX1N0cmV0Y2hfLF9CZXZlbF9Gcm9udF9TdHJldGNoXyxSZXN1bHRfUTI0NCk7dmVjMyBOZXdfUF9RMjgwO3ZlYzIgTmV3X1VWX1EyODA7ZmxvYXQgUmFkaWFsX0dyYWRpZW50X1EyODA7dmVjMyBSYWRpYWxfRGlyX1EyODA7dmVjMyBOZXdfTm9ybWFsX1EyODA7TW92ZV9WZXJ0c19CMjgwKEFuaXNvdHJvcHlfUTE3OSxwb3NpdGlvbixSZXN1bHRfUTIxOSxSZXN1bHRfUTE4Nixub3JtYWwsQW5pc290cm9weV9RMjAzLFJlc3VsdF9RMjQ0LE5ld19QX1EyODAsTmV3X1VWX1EyODAsUmFkaWFsX0dyYWRpZW50X1EyODAsUmFkaWFsX0Rpcl9RMjgwLE5ld19Ob3JtYWxfUTI4MCk7ZmxvYXQgWF9RMjQ4O2Zsb2F0IFlfUTI0ODtYX1EyNDg9TmV3X1VWX1EyODAueDtZX1EyNDg9TmV3X1VWX1EyODAueTt2ZWMzIFBvc19Xb3JsZF9RMTYyO09iamVjdF9Ub19Xb3JsZF9Qb3NfQjE2MihOZXdfUF9RMjgwLFBvc19Xb3JsZF9RMTYyKTt2ZWMzIE5ybV9Xb3JsZF9RMTgyO09iamVjdF9Ub19Xb3JsZF9Ob3JtYWxfQjE4MihOZXdfTm9ybWFsX1EyODAsTnJtX1dvcmxkX1ExODIpO3ZlYzQgQmxvYl9JbmZvX1ExNzM7XG4jaWYgQkxPQl9FTkFCTEVcbkJsb2JfVmVydGV4X0IxNzMoUG9zX1dvcmxkX1ExNjIsTnJtX1dvcmxkX1ExNzYsVGFuZ2VudF9Xb3JsZF9OX1ExNzcsQmlub3JtYWxfV29ybGRfTl9RMTc4LF9CbG9iX1Bvc2l0aW9uXyxfQmxvYl9JbnRlbnNpdHlfLF9CbG9iX05lYXJfU2l6ZV8sX0Jsb2JfRmFyX1NpemVfLF9CbG9iX05lYXJfRGlzdGFuY2VfLF9CbG9iX0Zhcl9EaXN0YW5jZV8sX0Jsb2JfRmFkZV9MZW5ndGhfLF9CbG9iX1B1bHNlXyxfQmxvYl9GYWRlXyxCbG9iX0luZm9fUTE3Myk7XG4jZWxzZVxuQmxvYl9JbmZvX1ExNzM9dmVjNCgwLDAsMCwwKTtcbiNlbmRpZlxudmVjNCBCbG9iX0luZm9fUTE3NDtcbiNpZiBCTE9CX0VOQUJMRV8yXG5CbG9iX1ZlcnRleF9CMTc0KFBvc19Xb3JsZF9RMTYyLE5ybV9Xb3JsZF9RMTc2LFRhbmdlbnRfV29ybGRfTl9RMTc3LEJpbm9ybWFsX1dvcmxkX05fUTE3OCxfQmxvYl9Qb3NpdGlvbl8yXyxfQmxvYl9JbnRlbnNpdHlfLF9CbG9iX05lYXJfU2l6ZV8yXyxfQmxvYl9GYXJfU2l6ZV8sX0Jsb2JfTmVhcl9EaXN0YW5jZV8sX0Jsb2JfRmFyX0Rpc3RhbmNlXyxfQmxvYl9GYWRlX0xlbmd0aF8sX0Jsb2JfUHVsc2VfMl8sX0Jsb2JfRmFkZV8yXyxCbG9iX0luZm9fUTE3NCk7XG4jZWxzZVxuQmxvYl9JbmZvX1ExNzQ9dmVjNCgwLDAsMCwwKTtcbiNlbmRpZlxuZmxvYXQgT3V0X1EyNTU7UmVtYXBfUmFuZ2VfQjI1NSgwLjAsMS4wLDAuMCwxLjAsWF9RMjQ4LE91dF9RMjU1KTtmbG9hdCBYX1EyMzY7ZmxvYXQgWV9RMjM2O2Zsb2F0IFpfUTIzNjtUb19YWVpfQjIyOChOcm1fV29ybGRfUTE4MixYX1EyMzYsWV9RMjM2LFpfUTIzNik7dmVjNCBDb2xvcl9BdF9UX1EyNDc9bWl4KExpbmVhcl9RMjUxLExpbmVhcl9RMjUyLE91dF9RMjU1KTtmbG9hdCBNaW51c19GX1EyMzc9LVpfUTIzNjtmbG9hdCBSX1EyNDk7ZmxvYXQgR19RMjQ5O2Zsb2F0IEJfUTI0OTtmbG9hdCBBX1EyNDk7Ul9RMjQ5PUNvbG9yX0F0X1RfUTI0Ny5yOyBHX1EyNDk9Q29sb3JfQXRfVF9RMjQ3Lmc7IEJfUTI0OT1Db2xvcl9BdF9UX1EyNDcuYjsgQV9RMjQ5PUNvbG9yX0F0X1RfUTI0Ny5hO2Zsb2F0IENsYW1wRl9RMjM4PWNsYW1wKDAuMCxNaW51c19GX1EyMzcsMS4wKTtmbG9hdCBSZXN1bHRfUTI0MztDb25kaXRpb25hbF9GbG9hdF9CMjQzKF9EZWNhbF9Gcm9udF9Pbmx5XyxDbGFtcEZfUTIzOCwxLjAsUmVzdWx0X1EyNDMpO3ZlYzQgVmVjNF9RMjM5PXZlYzQoUmVzdWx0X1EyNDMsUmFkaWFsX0dyYWRpZW50X1EyODAsR19RMjQ5LEJfUTI0OSk7dmVjMyBQb3NpdGlvbj1Qb3NfV29ybGRfUTE2Mjt2ZWMzIE5vcm1hbD1Ocm1fV29ybGRfUTE4Mjt2ZWMyIFVWPVhZX1EyMzU7dmVjMyBUYW5nZW50PVRhbmdlbnRfV29ybGRfTl9RMTc3O3ZlYzMgQmlub3JtYWw9RGlmZmVyZW5jZV9RMjExO3ZlYzQgQ29sb3I9T3V0X0NvbG9yX1ExODQ7dmVjNCBFeHRyYTE9VmVjNF9RMjM5O3ZlYzQgRXh0cmEyPUJsb2JfSW5mb19RMTczO3ZlYzQgRXh0cmEzPUJsb2JfSW5mb19RMTc0O2dsX1Bvc2l0aW9uPXZpZXdQcm9qZWN0aW9uKnZlYzQoUG9zaXRpb24sMSk7dlBvc2l0aW9uPVBvc2l0aW9uO3ZOb3JtYWw9Tm9ybWFsO3ZVVj1VVjt2VGFuZ2VudD1UYW5nZW50O3ZCaW5vcm1hbD1CaW5vcm1hbDt2Q29sb3I9Q29sb3I7dkV4dHJhMT1FeHRyYTE7dkV4dHJhMj1FeHRyYTI7dkV4dHJhMz1FeHRyYTM7fWA7XG4vLyBTaWRlZWZmZWN0XG5TaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVbbmFtZV0gPSBzaGFkZXI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbXJkbFNsaWRlclRodW1iVmVydGV4U2hhZGVyID0geyBuYW1lLCBzaGFkZXIgfTtcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiY29yZS9NYXRocy9tYXRoLnZlY3RvclwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHVzZWQgdG8gdHJhbnNwb3J0IFZlY3RvcjMgaW5mb3JtYXRpb24gZm9yIHBvaW50ZXIgZXZlbnRzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmVjdG9yM1dpdGhJbmZvIGV4dGVuZHMgVmVjdG9yMyB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgVmVjdG9yM1dpdGhJbmZvXHJcbiAgICAgKiBAcGFyYW0gc291cmNlIGRlZmluZXMgdGhlIHZlY3RvcjMgZGF0YSB0byB0cmFuc3BvcnRcclxuICAgICAqIEBwYXJhbSBidXR0b25JbmRleCBkZWZpbmVzIHRoZSBjdXJyZW50IG1vdXNlIGJ1dHRvbiBpbmRleFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgICAgc291cmNlOiBWZWN0b3IzLFxyXG4gICAgICAgIC8qKiBkZWZpbmVzIHRoZSBjdXJyZW50IG1vdXNlIGJ1dHRvbiBpbmRleCAqL1xyXG4gICAgICAgIHB1YmxpYyBidXR0b25JbmRleDogbnVtYmVyID0gMFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoc291cmNlLngsIHNvdXJjZS55LCBzb3VyY2Uueik7XHJcbiAgICB9XHJcbn1cclxuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWludGVybmFsLW1vZHVsZXMgKi9cclxuZXhwb3J0ICogZnJvbSBcIi4vMkQvaW5kZXhcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vM0QvaW5kZXhcIjtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWludGVybmFsLW1vZHVsZXMgKi9cclxuaW1wb3J0ICogYXMgR1VJIGZyb20gXCJndWkvaW5kZXhcIjtcclxuXHJcbi8qKlxyXG4gKiBMZWdhY3kgc3VwcG9ydCwgZGVmaW5pbmcgd2luZG93LkJBQllMT04uR1VJIChnbG9iYWwgdmFyaWFibGUpLlxyXG4gKlxyXG4gKiBUaGlzIGlzIHRoZSBlbnRyeSBwb2ludCBmb3IgdGhlIFVNRCBtb2R1bGUuXHJcbiAqIFRoZSBlbnRyeSBwb2ludCBmb3IgYSBmdXR1cmUgRVNNIHBhY2thZ2Ugc2hvdWxkIGJlIGluZGV4LnRzXHJcbiAqL1xyXG5jb25zdCBnbG9iYWxPYmplY3QgPSB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcclxuaWYgKHR5cGVvZiBnbG9iYWxPYmplY3QgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICg8YW55Pmdsb2JhbE9iamVjdCkuQkFCWUxPTiA9ICg8YW55Pmdsb2JhbE9iamVjdCkuQkFCWUxPTiB8fCB7fTtcclxuICAgIGlmICghKDxhbnk+Z2xvYmFsT2JqZWN0KS5CQUJZTE9OLkdVSSkge1xyXG4gICAgICAgICg8YW55Pmdsb2JhbE9iamVjdCkuQkFCWUxPTi5HVUkgPSBHVUk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCAqIGZyb20gXCJndWkvaW5kZXhcIjtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2JhYnlsb25qc19NaXNjX3BlcmZDb3VudGVyX187IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sICovXG5cbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufVxuXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XG4gIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XG4gICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdDtcbiAgfVxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgfVxuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XG4gIGZ1bmN0aW9uIGFjY2VwdChmKSB7IGlmIChmICE9PSB2b2lkIDAgJiYgdHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGV4cGVjdGVkXCIpOyByZXR1cm4gZjsgfVxuICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xuICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcbiAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9ySW4gfHwgKHRhcmdldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSkgOiB7fSk7XG4gIHZhciBfLCBkb25lID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcbiAgICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoZikgeyBpZiAoZG9uZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgaW5pdGlhbGl6ZXJzIGFmdGVyIGRlY29yYXRpb24gaGFzIGNvbXBsZXRlZFwiKTsgZXh0cmFJbml0aWFsaXplcnMucHVzaChhY2NlcHQoZiB8fCBudWxsKSk7IH07XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcbiAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5zZXQpKSBkZXNjcmlwdG9yLnNldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF8gPSBhY2NlcHQocmVzdWx0KSkge1xuICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcbiAgICAgIH1cbiAgfVxuICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XG4gIGRvbmUgPSB0cnVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcnVuSW5pdGlhbGl6ZXJzKHRoaXNBcmcsIGluaXRpYWxpemVycywgdmFsdWUpIHtcbiAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IHVzZVZhbHVlID8gaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZywgdmFsdWUpIDogaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZyk7XG4gIH1cbiAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiID8geCA6IFwiXCIuY29uY2F0KHgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0RnVuY3Rpb25OYW1lKGYsIG5hbWUsIHByZWZpeCkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcbiAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gIH1cbn1cblxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIG9bazJdID0gbVtrXTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcbiAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xuICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgfVxuICB9O1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xuICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gIGlmICghbSkgcmV0dXJuIG87XG4gIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICB0cnkge1xuICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gIH1cbiAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gIGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgIH1cbiAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICB9XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XG4gIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xuICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgcltrXSA9IGFbal07XG4gIHJldHVybiByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xuICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XG4gIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiLCBhd2FpdFJldHVybiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gYXdhaXRSZXR1cm4oZikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGYsIHJlamVjdCk7IH07IH1cbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlmIChnW25dKSB7IGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IGlmIChmKSBpW25dID0gZihpW25dKTsgfSB9XG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gIHJldHVybiBjb29rZWQ7XG59O1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2UsIGlubmVyO1xuICAgIGlmIChhc3luYykge1xuICAgICAgaWYgKCFTeW1ib2wuYXN5bmNEaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgIGlmICghU3ltYm9sLmRpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuZGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmRpc3Bvc2VdO1xuICAgICAgaWYgKGFzeW5jKSBpbm5lciA9IGRpc3Bvc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcbiAgICBpZiAoaW5uZXIpIGRpc3Bvc2UgPSBmdW5jdGlvbigpIHsgdHJ5IHsgaW5uZXIuY2FsbCh0aGlzKTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7IH0gfTtcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xuICB9XG4gIGVsc2UgaWYgKGFzeW5jKSB7XG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGlzcG9zZVJlc291cmNlcyhlbnYpIHtcbiAgZnVuY3Rpb24gZmFpbChlKSB7XG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xuICAgIGVudi5oYXNFcnJvciA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAoZW52LnN0YWNrLmxlbmd0aCkge1xuICAgICAgdmFyIHJlYyA9IGVudi5zdGFjay5wb3AoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWMuZGlzcG9zZSAmJiByZWMuZGlzcG9zZS5jYWxsKHJlYy52YWx1ZSk7XG4gICAgICAgIGlmIChyZWMuYXN5bmMpIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KS50aGVuKG5leHQsIGZ1bmN0aW9uKGUpIHsgZmFpbChlKTsgcmV0dXJuIG5leHQoKTsgfSk7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIF9fZXh0ZW5kcyxcbiAgX19hc3NpZ24sXG4gIF9fcmVzdCxcbiAgX19kZWNvcmF0ZSxcbiAgX19wYXJhbSxcbiAgX19tZXRhZGF0YSxcbiAgX19hd2FpdGVyLFxuICBfX2dlbmVyYXRvcixcbiAgX19jcmVhdGVCaW5kaW5nLFxuICBfX2V4cG9ydFN0YXIsXG4gIF9fdmFsdWVzLFxuICBfX3JlYWQsXG4gIF9fc3ByZWFkLFxuICBfX3NwcmVhZEFycmF5cyxcbiAgX19zcHJlYWRBcnJheSxcbiAgX19hd2FpdCxcbiAgX19hc3luY0dlbmVyYXRvcixcbiAgX19hc3luY0RlbGVnYXRvcixcbiAgX19hc3luY1ZhbHVlcyxcbiAgX19tYWtlVGVtcGxhdGVPYmplY3QsXG4gIF9faW1wb3J0U3RhcixcbiAgX19pbXBvcnREZWZhdWx0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4sXG4gIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlLFxuICBfX2Rpc3Bvc2VSZXNvdXJjZXMsXG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0ICogYXMgZ3VpIGZyb20gXCJAbHRzL2d1aS9sZWdhY3kvbGVnYWN5XCI7XHJcblxyXG5leHBvcnQgeyBndWkgfTtcclxuZXhwb3J0IGRlZmF1bHQgZ3VpO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=